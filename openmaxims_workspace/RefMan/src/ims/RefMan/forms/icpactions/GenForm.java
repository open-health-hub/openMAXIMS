// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.icpactions;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabActionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 81, 18, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "HIP Replacement", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 9, 18, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ICP Name :", new Integer(1), null, new Integer(0)}));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 808, 506, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public Label lblName()
			{
				return (Label)super.getControl(0);
			}
			public DynamicGrid dyngrdActions()
			{
				return (DynamicGrid)super.getControl(2);
			}
		}
		public static class tabConsultantContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdConsultant()
			{
				return (DynamicGrid)super.getControl(0);
			}
		}
		public static class tabNursingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrNursingLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabPatientDetailsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 0, 32, 800, 492, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_cc1Form = loader.loadComponent(134124, appForm, startControlID * 10 + 1000, anchoringHelper5.getSize(), instance1, -1, skipContextValidation);
						//ims.framework.Control m_cc1Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(0), new Integer(32), new Integer(800), new Integer(492), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_cc1Form, instance1 } );
						ims.framework.Control m_cc1Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_cc1Form, instance1, Boolean.FALSE } );
						super.addControl(m_cc1Control);
						Menu[] menus1 = m_cc1Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.core.forms.demographicscomponent.IComponent cc1()
					{
						return (ims.core.forms.demographicscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setcc1ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setcc1Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean iscc1Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setcc1Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean iscc1Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabBasObsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 0, 32, 800, 490, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_cc2Form = loader.loadComponent(134205, appForm, startControlID * 10 + 2000, anchoringHelper6.getSize(), instance1, -1, skipContextValidation);
						//ims.framework.Control m_cc2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(0), new Integer(32), new Integer(800), new Integer(490), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_cc2Form, instance1 } );
						ims.framework.Control m_cc2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_cc2Form, instance1, Boolean.FALSE } );
						super.addControl(m_cc2Control);
						Menu[] menus1 = m_cc2Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.RefMan.forms.nursingnotescomponent.IComponent cc2()
					{
						return (ims.RefMan.forms.nursingnotescomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setcc2ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setcc2Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean iscc2Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setcc2Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean iscc2Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabMedicationContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdMedicationRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdMedicationRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColNameReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColNameReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColNameOpened()
						{
							super.row.showOpened(0);
						}
						public String getColName()
						{
							return (String)super.row.get(0);
						}
						public void setColName(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColNameTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColRouteReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColRouteReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColRouteOpened()
						{
							super.row.showOpened(1);
						}
						public String getColRoute()
						{
							return (String)super.row.get(1);
						}
						public void setColRoute(String value)
						{
							super.row.set(1, value);
						}
						public void setCellColRouteTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setColDoseReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isColDoseReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showColDoseOpened()
						{
							super.row.showOpened(2);
						}
						public String getColDose()
						{
							return (String)super.row.get(2);
						}
						public void setColDose(String value)
						{
							super.row.set(2, value);
						}
						public void setCellColDoseTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public void setColFrequencyReadOnly(boolean value)
						{
							super.row.setReadOnly(3, value);
						}
						public boolean isColFrequencyReadOnly()
						{
							return super.row.isReadOnly(3);
						}
						public void showColFrequencyOpened()
						{
							super.row.showOpened(3);
						}
						public String getColFrequency()
						{
							return (String)super.row.get(3);
						}
						public void setColFrequency(String value)
						{
							super.row.set(3, value);
						}
						public void setCellColFrequencyTooltip(String value)
						{
							super.row.setTooltip(3, value);
						}
						public String getValue()
						{
							return (String)super.row.getValue();
						}
						public void setValue(String value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdMedicationRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdMedicationRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdMedicationRow get(int index)
						{
							return new grdMedicationRow(super.collection.get(index));
						}
						public grdMedicationRow newRow()
						{
							return new grdMedicationRow(super.collection.newRow());
						}
						public grdMedicationRow newRow(boolean autoSelect)
						{
							return new grdMedicationRow(super.collection.newRow(autoSelect));
						}
						public grdMedicationRow newRowAt(int index)
						{
							return new grdMedicationRow(super.collection.newRowAt(index));
						}
						public grdMedicationRow newRowAt(int index, boolean autoSelect)
						{
							return new grdMedicationRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdMedicationGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public String[] getValues()
						{
							String[] listOfValues = new String[this.getRows().size()];
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues[x] = this.getRows().get(x).getValue();
							}
							return listOfValues;
						}
						public String getValue()
						{
							return (String)super.grid.getValue();
						}
						public void setValue(String value)
						{
							super.grid.setValue(value);
						}
						public grdMedicationRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdMedicationRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdMedicationRowCollection getRows()
						{
							return new grdMedicationRowCollection(super.grid.getRows());
						}
						public grdMedicationRow getRowByValue(String value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdMedicationRow(row);
						}
						public void setColNameHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColNameHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColRouteHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColRouteHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setColDoseHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getColDoseHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
						public void setColFrequencyHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(3, value);
						}
						public String getColFrequencyHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(3);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 784, 484, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdMedicationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdMedicationTemp);
						grdMedicationGrid grdMedication = (grdMedicationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMedicationGrid.class, m_grdMedicationTemp);
						grdMedication.addStringColumn("Drug Name", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdMedication.addStringColumn("Route", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdMedication.addStringColumn("Dose", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdMedication.addStringColumn("Frequency", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grdMedication);
					}
		
					public grdMedicationGrid grdMedication()
					{
						return (grdMedicationGrid)super.getGrid(0);
					}
				}
				public static class tabReasonContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 784, 468, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					}
		
					public TextBox txtReason()
					{
						return (TextBox)super.getControl(0);
					}
				}
				public static class tabHealthContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
					}
		
				}
				public static class tabClexaneContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 784, 476, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public DynamicGrid dyngrdClexane()
					{
						return (DynamicGrid)super.getControl(0);
					}
				}
				public static class tabSupportContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
					}
		
				}
				public static class tabDischargeContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
					}
		
				}
				public static class tabInvestigationsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 0, 40, 800, 484, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccInvForm = loader.loadComponent(134121, appForm, startControlID * 10 + 3000, anchoringHelper10.getSize(), instance1, -1, skipContextValidation);
						//ims.framework.Control m_ccInvControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(0), new Integer(40), new Integer(800), new Integer(484), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccInvForm, instance1 } );
						ims.framework.Control m_ccInvControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012),  new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccInvForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccInvControl);
						Menu[] menus1 = m_ccInvForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.RefMan.forms.investigationscomponent.IComponent ccInv()
					{
						return (ims.RefMan.forms.investigationscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccInvValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccInvVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccInvVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccInvEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccInvEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPatientDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Patient Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPatientDetailsContainer m_tabPatientDetailsContainer = (tabPatientDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPatientDetailsContainer.class, m_tabPatientDetails, factory);
					super.addContainer(m_tabPatientDetails, m_tabPatientDetailsContainer);
					ims.framework.utils.SizeInfo m_tabPatientDetailsDesignSize = new ims.framework.utils.SizeInfo(808, 546);
					ims.framework.utils.SizeInfo m_tabPatientDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper11.getWidth(), anchoringHelper11.getHeight());
					m_tabPatientDetailsContainer.setContext(form, appForm, m_tabPatientDetails, loader, form_images_local, startControlID, m_tabPatientDetailsDesignSize, m_tabPatientDetailsRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabBasObs = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Baseline Obs", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabBasObsContainer m_tabBasObsContainer = (tabBasObsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBasObsContainer.class, m_tabBasObs, factory);
					super.addContainer(m_tabBasObs, m_tabBasObsContainer);
					ims.framework.utils.SizeInfo m_tabBasObsDesignSize = new ims.framework.utils.SizeInfo(808, 546);
					ims.framework.utils.SizeInfo m_tabBasObsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
					m_tabBasObsContainer.setContext(form, appForm, m_tabBasObs, loader, form_images_local, startControlID, m_tabBasObsDesignSize, m_tabBasObsRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabMedication = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Current Medication", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabMedicationContainer m_tabMedicationContainer = (tabMedicationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMedicationContainer.class, m_tabMedication, factory);
					super.addContainer(m_tabMedication, m_tabMedicationContainer);
					ims.framework.utils.SizeInfo m_tabMedicationDesignSize = new ims.framework.utils.SizeInfo(808, 546);
					ims.framework.utils.SizeInfo m_tabMedicationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
					m_tabMedicationContainer.setContext(form, appForm, m_tabMedication, loader, form_images_local, startControlID, m_tabMedicationDesignSize, m_tabMedicationRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabReason = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Reason for Admission", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabReasonContainer m_tabReasonContainer = (tabReasonContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabReasonContainer.class, m_tabReason, factory);
					super.addContainer(m_tabReason, m_tabReasonContainer);
					ims.framework.utils.SizeInfo m_tabReasonDesignSize = new ims.framework.utils.SizeInfo(808, 546);
					ims.framework.utils.SizeInfo m_tabReasonRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
					m_tabReasonContainer.setContext(form, appForm, m_tabReason, loader, form_images_local, startControlID, m_tabReasonDesignSize, m_tabReasonRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabHealth = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Health Questionnaire", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabHealthContainer m_tabHealthContainer = (tabHealthContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHealthContainer.class, m_tabHealth, factory);
					super.addContainer(m_tabHealth, m_tabHealthContainer);
					ims.framework.utils.SizeInfo m_tabHealthDesignSize = new ims.framework.utils.SizeInfo(808, 546);
					ims.framework.utils.SizeInfo m_tabHealthRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
					m_tabHealthContainer.setContext(form, appForm, m_tabHealth, loader, form_images_local, startControlID, m_tabHealthDesignSize, m_tabHealthRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabClexane = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clexane Protocol", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabClexaneContainer m_tabClexaneContainer = (tabClexaneContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClexaneContainer.class, m_tabClexane, factory);
					super.addContainer(m_tabClexane, m_tabClexaneContainer);
					ims.framework.utils.SizeInfo m_tabClexaneDesignSize = new ims.framework.utils.SizeInfo(808, 546);
					ims.framework.utils.SizeInfo m_tabClexaneRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
					m_tabClexaneContainer.setContext(form, appForm, m_tabClexane, loader, form_images_local, startControlID, m_tabClexaneDesignSize, m_tabClexaneRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSupport = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Support Srv", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabSupportContainer m_tabSupportContainer = (tabSupportContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSupportContainer.class, m_tabSupport, factory);
					super.addContainer(m_tabSupport, m_tabSupportContainer);
					ims.framework.utils.SizeInfo m_tabSupportDesignSize = new ims.framework.utils.SizeInfo(808, 546);
					ims.framework.utils.SizeInfo m_tabSupportRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
					m_tabSupportContainer.setContext(form, appForm, m_tabSupport, loader, form_images_local, startControlID, m_tabSupportDesignSize, m_tabSupportRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabDischarge = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Discharge Planning", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabDischargeContainer m_tabDischargeContainer = (tabDischargeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDischargeContainer.class, m_tabDischarge, factory);
					super.addContainer(m_tabDischarge, m_tabDischargeContainer);
					ims.framework.utils.SizeInfo m_tabDischargeDesignSize = new ims.framework.utils.SizeInfo(808, 546);
					ims.framework.utils.SizeInfo m_tabDischargeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper18.getWidth(), anchoringHelper18.getHeight());
					m_tabDischargeContainer.setContext(form, appForm, m_tabDischarge, loader, form_images_local, startControlID, m_tabDischargeDesignSize, m_tabDischargeRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabInvestigations = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Inv. at Pre-Op Assessment ", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabInvestigationsContainer m_tabInvestigationsContainer = (tabInvestigationsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInvestigationsContainer.class, m_tabInvestigations, factory);
					super.addContainer(m_tabInvestigations, m_tabInvestigationsContainer);
					ims.framework.utils.SizeInfo m_tabInvestigationsDesignSize = new ims.framework.utils.SizeInfo(808, 546);
					ims.framework.utils.SizeInfo m_tabInvestigationsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
					m_tabInvestigationsContainer.setContext(form, appForm, m_tabInvestigations, loader, form_images_local, startControlID, m_tabInvestigationsDesignSize, m_tabInvestigationsRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabPatientDetails().setVisible(false);
					tabBasObs().setVisible(false);
					tabMedication().setVisible(false);
					tabReason().setVisible(false);
					tabHealth().setVisible(false);
					tabClexane().setVisible(false);
					tabSupport().setVisible(false);
					tabDischarge().setVisible(false);
					tabInvestigations().setVisible(false);
				}
				public void settabPatientDetailsEnabled(boolean value)
				{
					tabPatientDetails().setEnabled(value);
				}
				public void settabBasObsEnabled(boolean value)
				{
					tabBasObs().setEnabled(value);
				}
				public void settabMedicationEnabled(boolean value)
				{
					tabMedication().setEnabled(value);
				}
				public void settabReasonEnabled(boolean value)
				{
					tabReason().setEnabled(value);
				}
				public void settabHealthEnabled(boolean value)
				{
					tabHealth().setEnabled(value);
				}
				public void settabClexaneEnabled(boolean value)
				{
					tabClexane().setEnabled(value);
				}
				public void settabSupportEnabled(boolean value)
				{
					tabSupport().setEnabled(value);
				}
				public void settabDischargeEnabled(boolean value)
				{
					tabDischarge().setEnabled(value);
				}
				public void settabInvestigationsEnabled(boolean value)
				{
					tabInvestigations().setEnabled(value);
				}
				public void showtabPatientDetails()
				{
					tabBasObs().setVisible(false);
					tabMedication().setVisible(false);
					tabReason().setVisible(false);
					tabHealth().setVisible(false);
					tabClexane().setVisible(false);
					tabSupport().setVisible(false);
					tabDischarge().setVisible(false);
					tabInvestigations().setVisible(false);
					tabPatientDetails().setVisible(true);
				}
				public void showtabBasObs()
				{
					tabPatientDetails().setVisible(false);
					tabMedication().setVisible(false);
					tabReason().setVisible(false);
					tabHealth().setVisible(false);
					tabClexane().setVisible(false);
					tabSupport().setVisible(false);
					tabDischarge().setVisible(false);
					tabInvestigations().setVisible(false);
					tabBasObs().setVisible(true);
				}
				public void showtabMedication()
				{
					tabPatientDetails().setVisible(false);
					tabBasObs().setVisible(false);
					tabReason().setVisible(false);
					tabHealth().setVisible(false);
					tabClexane().setVisible(false);
					tabSupport().setVisible(false);
					tabDischarge().setVisible(false);
					tabInvestigations().setVisible(false);
					tabMedication().setVisible(true);
				}
				public void showtabReason()
				{
					tabPatientDetails().setVisible(false);
					tabBasObs().setVisible(false);
					tabMedication().setVisible(false);
					tabHealth().setVisible(false);
					tabClexane().setVisible(false);
					tabSupport().setVisible(false);
					tabDischarge().setVisible(false);
					tabInvestigations().setVisible(false);
					tabReason().setVisible(true);
				}
				public void showtabHealth()
				{
					tabPatientDetails().setVisible(false);
					tabBasObs().setVisible(false);
					tabMedication().setVisible(false);
					tabReason().setVisible(false);
					tabClexane().setVisible(false);
					tabSupport().setVisible(false);
					tabDischarge().setVisible(false);
					tabInvestigations().setVisible(false);
					tabHealth().setVisible(true);
				}
				public void showtabClexane()
				{
					tabPatientDetails().setVisible(false);
					tabBasObs().setVisible(false);
					tabMedication().setVisible(false);
					tabReason().setVisible(false);
					tabHealth().setVisible(false);
					tabSupport().setVisible(false);
					tabDischarge().setVisible(false);
					tabInvestigations().setVisible(false);
					tabClexane().setVisible(true);
				}
				public void showtabSupport()
				{
					tabPatientDetails().setVisible(false);
					tabBasObs().setVisible(false);
					tabMedication().setVisible(false);
					tabReason().setVisible(false);
					tabHealth().setVisible(false);
					tabClexane().setVisible(false);
					tabDischarge().setVisible(false);
					tabInvestigations().setVisible(false);
					tabSupport().setVisible(true);
				}
				public void showtabDischarge()
				{
					tabPatientDetails().setVisible(false);
					tabBasObs().setVisible(false);
					tabMedication().setVisible(false);
					tabReason().setVisible(false);
					tabHealth().setVisible(false);
					tabClexane().setVisible(false);
					tabSupport().setVisible(false);
					tabInvestigations().setVisible(false);
					tabDischarge().setVisible(true);
				}
				public void showtabInvestigations()
				{
					tabPatientDetails().setVisible(false);
					tabBasObs().setVisible(false);
					tabMedication().setVisible(false);
					tabReason().setVisible(false);
					tabHealth().setVisible(false);
					tabClexane().setVisible(false);
					tabSupport().setVisible(false);
					tabDischarge().setVisible(false);
					tabInvestigations().setVisible(true);
				}
		
				public tabPatientDetailsContainer tabPatientDetails()
				{
					return (tabPatientDetailsContainer)super.layers.get(0);
				}
				public tabBasObsContainer tabBasObs()
				{
					return (tabBasObsContainer)super.layers.get(1);
				}
				public tabMedicationContainer tabMedication()
				{
					return (tabMedicationContainer)super.layers.get(2);
				}
				public tabReasonContainer tabReason()
				{
					return (tabReasonContainer)super.layers.get(3);
				}
				public tabHealthContainer tabHealth()
				{
					return (tabHealthContainer)super.layers.get(4);
				}
				public tabClexaneContainer tabClexane()
				{
					return (tabClexaneContainer)super.layers.get(5);
				}
				public tabSupportContainer tabSupport()
				{
					return (tabSupportContainer)super.layers.get(6);
				}
				public tabDischargeContainer tabDischarge()
				{
					return (tabDischargeContainer)super.layers.get(7);
				}
				public tabInvestigationsContainer tabInvestigations()
				{
					return (tabInvestigationsContainer)super.layers.get(8);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrNursingLayer m_lyrNursingLayer = (lyrNursingLayer)LayerFlyweightFactory.getInstance().createLayer(lyrNursingLayer.class, this, factory);
				super.addLayer(m_lyrNursingLayer);
				m_lyrNursingLayer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
			}

			public lyrNursingLayer lyrNursing()
			{
				return (lyrNursingLayer)super.getLayer(0);
			}
		}
		public static class tabAnaesthetistContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdAnaesthetist()
			{
				return (DynamicGrid)super.getControl(0);
			}
		}
		public static class tabTherapyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdTherapy()
			{
				return (DynamicGrid)super.getControl(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabActions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Outstanding Actions", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabActionsContainer m_tabActionsContainer = (tabActionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabActionsContainer.class, m_tabActions, factory);
			super.addContainer(m_tabActions, m_tabActionsContainer);
			ims.framework.utils.SizeInfo m_tabActionsDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabActionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
			m_tabActionsContainer.setContext(form, appForm, m_tabActions, loader, form_images_local, startControlID, m_tabActionsDesignSize, m_tabActionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabConsultant = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Consultation", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabConsultantContainer m_tabConsultantContainer = (tabConsultantContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabConsultantContainer.class, m_tabConsultant, factory);
			super.addContainer(m_tabConsultant, m_tabConsultantContainer);
			ims.framework.utils.SizeInfo m_tabConsultantDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabConsultantRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper23.getWidth(), anchoringHelper23.getHeight());
			m_tabConsultantContainer.setContext(form, appForm, m_tabConsultant, loader, form_images_local, startControlID, m_tabConsultantDesignSize, m_tabConsultantRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabNursing = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Nursing Assessment", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabNursingContainer m_tabNursingContainer = (tabNursingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNursingContainer.class, m_tabNursing, factory);
			super.addContainer(m_tabNursing, m_tabNursingContainer);
			ims.framework.utils.SizeInfo m_tabNursingDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabNursingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper24.getWidth(), anchoringHelper24.getHeight());
			m_tabNursingContainer.setContext(form, appForm, m_tabNursing, loader, form_images_local, startControlID, m_tabNursingDesignSize, m_tabNursingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAnaesthetist = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Anaesthetist Assessment", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAnaesthetistContainer m_tabAnaesthetistContainer = (tabAnaesthetistContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAnaesthetistContainer.class, m_tabAnaesthetist, factory);
			super.addContainer(m_tabAnaesthetist, m_tabAnaesthetistContainer);
			ims.framework.utils.SizeInfo m_tabAnaesthetistDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabAnaesthetistRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper25.getWidth(), anchoringHelper25.getHeight());
			m_tabAnaesthetistContainer.setContext(form, appForm, m_tabAnaesthetist, loader, form_images_local, startControlID, m_tabAnaesthetistDesignSize, m_tabAnaesthetistRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTherapy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Therapy Assessment", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTherapyContainer m_tabTherapyContainer = (tabTherapyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTherapyContainer.class, m_tabTherapy, factory);
			super.addContainer(m_tabTherapy, m_tabTherapyContainer);
			ims.framework.utils.SizeInfo m_tabTherapyDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabTherapyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper26.getWidth(), anchoringHelper26.getHeight());
			m_tabTherapyContainer.setContext(form, appForm, m_tabTherapy, loader, form_images_local, startControlID, m_tabTherapyDesignSize, m_tabTherapyRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabActions().setVisible(false);
			tabConsultant().setVisible(false);
			tabNursing().setVisible(false);
			tabAnaesthetist().setVisible(false);
			tabTherapy().setVisible(false);
		}
		public void settabActionsEnabled(boolean value)
		{
			tabActions().setEnabled(value);
		}
		public void settabConsultantEnabled(boolean value)
		{
			tabConsultant().setEnabled(value);
		}
		public void settabNursingEnabled(boolean value)
		{
			tabNursing().setEnabled(value);
		}
		public void settabAnaesthetistEnabled(boolean value)
		{
			tabAnaesthetist().setEnabled(value);
		}
		public void settabTherapyEnabled(boolean value)
		{
			tabTherapy().setEnabled(value);
		}
		public void showtabActions()
		{
			tabConsultant().setVisible(false);
			tabNursing().setVisible(false);
			tabAnaesthetist().setVisible(false);
			tabTherapy().setVisible(false);
			tabActions().setVisible(true);
		}
		public void showtabConsultant()
		{
			tabActions().setVisible(false);
			tabNursing().setVisible(false);
			tabAnaesthetist().setVisible(false);
			tabTherapy().setVisible(false);
			tabConsultant().setVisible(true);
		}
		public void showtabNursing()
		{
			tabActions().setVisible(false);
			tabConsultant().setVisible(false);
			tabAnaesthetist().setVisible(false);
			tabTherapy().setVisible(false);
			tabNursing().setVisible(true);
		}
		public void showtabAnaesthetist()
		{
			tabActions().setVisible(false);
			tabConsultant().setVisible(false);
			tabNursing().setVisible(false);
			tabTherapy().setVisible(false);
			tabAnaesthetist().setVisible(true);
		}
		public void showtabTherapy()
		{
			tabActions().setVisible(false);
			tabConsultant().setVisible(false);
			tabNursing().setVisible(false);
			tabAnaesthetist().setVisible(false);
			tabTherapy().setVisible(true);
		}

		public tabActionsContainer tabActions()
		{
			return (tabActionsContainer)super.layers.get(0);
		}
		public tabConsultantContainer tabConsultant()
		{
			return (tabConsultantContainer)super.layers.get(1);
		}
		public tabNursingContainer tabNursing()
		{
			return (tabNursingContainer)super.layers.get(2);
		}
		public tabAnaesthetistContainer tabAnaesthetist()
		{
			return (tabAnaesthetistContainer)super.layers.get(3);
		}
		public tabTherapyContainer tabTherapy()
		{
			return (tabTherapyContainer)super.layers.get(4);
		}
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<< Previous", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 764, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next >>", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Link Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 784, 0, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnPrevious()
	{
		return (Button)super.getControl(5);
	}
	public Button btnNext()
	{
		return (Button)super.getControl(6);
	}
	public Link lnk1()
	{
		return (Link)super.getControl(7);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ClinicListWithICPActions = new LocalFormName(123155);
				InpatientListwithICPActions = new LocalFormName(123154);
			}
			public final FormName ClinicListWithICPActions;
			public final FormName InpatientListwithICPActions;
		}

		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Clinical = new ClinicalImages();
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				Phases = new ImageHelper(123107, "Images/Clinical/phases_24x24.png", new Integer(24), new Integer(24));
				Stage = new ImageHelper(123106, "Images/Clinical/stage_24x24.png", new Integer(24), new Integer(24));
				Action_unselected = new ImageHelper(123108, "Images/Clinical/action_unselected_24x24.png", new Integer(24), new Integer(24));
				Action_selected = new ImageHelper(123105, "Images/Clinical/action_24x24.png", new Integer(24), new Integer(24));
				Stages = new ImageHelper(123109, "Images/Clinical/stages_24x24.png", new Integer(24), new Integer(24));
				Medication = new ImageHelper(123111, "Images/Clinical/medication_24x24.png", new Integer(24), new Integer(24));
				Observations = new ImageHelper(123110, "Images/Clinical/observations_24x24.png", new Integer(24), new Integer(24));
				Patient_details = new ImageHelper(123112, "Images/Clinical/patient_details_24x24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Phases;
			public final ims.framework.utils.Image Stage;
			public final ims.framework.utils.Image Action_unselected;
			public final ims.framework.utils.Image Action_selected;
			public final ims.framework.utils.Image Stages;
			public final ims.framework.utils.Image Medication;
			public final ims.framework.utils.Image Observations;
			public final ims.framework.utils.Image Patient_details;
		}
		public final ClinicalImages Clinical;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
