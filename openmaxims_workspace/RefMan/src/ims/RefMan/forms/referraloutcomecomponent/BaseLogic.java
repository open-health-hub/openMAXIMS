// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referraloutcomecomponent;

public abstract class BaseLogic extends Handlers implements IComponent
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.RefMan.domain.ReferralOutcomeComponent.class;
	}
	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form, ims.RefMan.domain.ReferralOutcomeComponent domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	public void setMode(ims.framework.enumerations.FormMode mode)
	{
		form.setMode(mode);
	}
	public ims.framework.enumerations.FormMode getMode()
	{
		return form.getMode();
	}
	protected final void oncmbTLTTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabFurtherManagement().cmbTLTType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.TLTType existingInstance = (ims.RefMan.vo.lookups.TLTType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTLTTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.TLTType)
		{
			ims.RefMan.vo.lookups.TLTType instance = (ims.RefMan.vo.lookups.TLTType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTLTTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.TLTType existingInstance = (ims.RefMan.vo.lookups.TLTType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabFurtherManagement().cmbTLTType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTLTTypeLookup()
	{
		this.form.lyr1().tabFurtherManagement().cmbTLTType().clear();
		ims.RefMan.vo.lookups.TLTTypeCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getTLTType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabFurtherManagement().cmbTLTType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTLTTypeLookupValue(int id)
	{
		ims.RefMan.vo.lookups.TLTType instance = ims.RefMan.vo.lookups.LookupHelper.getTLTTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabFurtherManagement().cmbTLTType().setValue(instance);
	}
	protected final void defaultcmbTLTTypeLookupValue()
	{
		this.form.lyr1().tabFurtherManagement().cmbTLTType().setValue((ims.RefMan.vo.lookups.TLTType)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.TLTType.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.TLTType.TYPE_ID));
	}
	protected final void oncmbMedicallyIncompleteValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.MedicallyIncomplete existingInstance = (ims.RefMan.vo.lookups.MedicallyIncomplete)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMedicallyIncompleteLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.MedicallyIncomplete)
		{
			ims.RefMan.vo.lookups.MedicallyIncomplete instance = (ims.RefMan.vo.lookups.MedicallyIncomplete)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMedicallyIncompleteLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.MedicallyIncomplete existingInstance = (ims.RefMan.vo.lookups.MedicallyIncomplete)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMedicallyIncompleteLookup()
	{
		this.form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().clear();
		ims.RefMan.vo.lookups.MedicallyIncompleteCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getMedicallyIncomplete(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMedicallyIncompleteLookupValue(int id)
	{
		ims.RefMan.vo.lookups.MedicallyIncomplete instance = ims.RefMan.vo.lookups.LookupHelper.getMedicallyIncompleteInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setValue(instance);
	}
	protected final void defaultcmbMedicallyIncompleteLookupValue()
	{
		this.form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setValue((ims.RefMan.vo.lookups.MedicallyIncomplete)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.MedicallyIncomplete.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.MedicallyIncomplete.TYPE_ID));
	}
	protected final void oncmbReasonNOValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabFurtherManagement().cmbReasonNO().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.AnotherConsultationAppt existingInstance = (ims.RefMan.vo.lookups.AnotherConsultationAppt)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbReasonNOLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.AnotherConsultationAppt)
		{
			ims.RefMan.vo.lookups.AnotherConsultationAppt instance = (ims.RefMan.vo.lookups.AnotherConsultationAppt)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbReasonNOLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.AnotherConsultationAppt existingInstance = (ims.RefMan.vo.lookups.AnotherConsultationAppt)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabFurtherManagement().cmbReasonNO().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbReasonNOLookup()
	{
		this.form.lyr1().tabFurtherManagement().cmbReasonNO().clear();
		ims.RefMan.vo.lookups.AnotherConsultationApptCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getAnotherConsultationAppt(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabFurtherManagement().cmbReasonNO().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbReasonNOLookupValue(int id)
	{
		ims.RefMan.vo.lookups.AnotherConsultationAppt instance = ims.RefMan.vo.lookups.LookupHelper.getAnotherConsultationApptInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabFurtherManagement().cmbReasonNO().setValue(instance);
	}
	protected final void defaultcmbReasonNOLookupValue()
	{
		this.form.lyr1().tabFurtherManagement().cmbReasonNO().setValue((ims.RefMan.vo.lookups.AnotherConsultationAppt)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.AnotherConsultationAppt.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.AnotherConsultationAppt.TYPE_ID));
	}
	protected final void oncmbAMTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabActiveMonitoring().cmbAMType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.ActiveMonitoringReason existingInstance = (ims.RefMan.vo.lookups.ActiveMonitoringReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAMTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.ActiveMonitoringReason)
		{
			ims.RefMan.vo.lookups.ActiveMonitoringReason instance = (ims.RefMan.vo.lookups.ActiveMonitoringReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAMTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.ActiveMonitoringReason existingInstance = (ims.RefMan.vo.lookups.ActiveMonitoringReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabActiveMonitoring().cmbAMType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAMTypeLookup()
	{
		this.form.lyr1().tabActiveMonitoring().cmbAMType().clear();
		ims.RefMan.vo.lookups.ActiveMonitoringReasonCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getActiveMonitoringReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabActiveMonitoring().cmbAMType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAMTypeLookupValue(int id)
	{
		ims.RefMan.vo.lookups.ActiveMonitoringReason instance = ims.RefMan.vo.lookups.LookupHelper.getActiveMonitoringReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabActiveMonitoring().cmbAMType().setValue(instance);
	}
	protected final void defaultcmbAMTypeLookupValue()
	{
		this.form.lyr1().tabActiveMonitoring().cmbAMType().setValue((ims.RefMan.vo.lookups.ActiveMonitoringReason)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.ActiveMonitoringReason.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.ActiveMonitoringReason.TYPE_ID));
	}
	protected final void oncmbOnwardRefReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabDischargePatient().cmbOnwardRefReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.OnwardReferralReason existingInstance = (ims.RefMan.vo.lookups.OnwardReferralReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOnwardRefReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.OnwardReferralReason)
		{
			ims.RefMan.vo.lookups.OnwardReferralReason instance = (ims.RefMan.vo.lookups.OnwardReferralReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOnwardRefReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.OnwardReferralReason existingInstance = (ims.RefMan.vo.lookups.OnwardReferralReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabDischargePatient().cmbOnwardRefReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOnwardRefReasonLookup()
	{
		this.form.lyr1().tabDischargePatient().cmbOnwardRefReason().clear();
		ims.RefMan.vo.lookups.OnwardReferralReasonCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getOnwardReferralReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabDischargePatient().cmbOnwardRefReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOnwardRefReasonLookupValue(int id)
	{
		ims.RefMan.vo.lookups.OnwardReferralReason instance = ims.RefMan.vo.lookups.LookupHelper.getOnwardReferralReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabDischargePatient().cmbOnwardRefReason().setValue(instance);
	}
	protected final void defaultcmbOnwardRefReasonLookupValue()
	{
		this.form.lyr1().tabDischargePatient().cmbOnwardRefReason().setValue((ims.RefMan.vo.lookups.OnwardReferralReason)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.OnwardReferralReason.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.OnwardReferralReason.TYPE_ID));
	}
	protected final void oncmbOtherValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabDischargePatient().cmbOther().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.DischargeOtherType existingInstance = (ims.RefMan.vo.lookups.DischargeOtherType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOtherLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.DischargeOtherType)
		{
			ims.RefMan.vo.lookups.DischargeOtherType instance = (ims.RefMan.vo.lookups.DischargeOtherType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOtherLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.DischargeOtherType existingInstance = (ims.RefMan.vo.lookups.DischargeOtherType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabDischargePatient().cmbOther().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOtherLookup()
	{
		this.form.lyr1().tabDischargePatient().cmbOther().clear();
		ims.RefMan.vo.lookups.DischargeOtherTypeCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getDischargeOtherType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabDischargePatient().cmbOther().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOtherLookupValue(int id)
	{
		ims.RefMan.vo.lookups.DischargeOtherType instance = ims.RefMan.vo.lookups.LookupHelper.getDischargeOtherTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabDischargePatient().cmbOther().setValue(instance);
	}
	protected final void defaultcmbOtherLookupValue()
	{
		this.form.lyr1().tabDischargePatient().cmbOther().setValue((ims.RefMan.vo.lookups.DischargeOtherType)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.DischargeOtherType.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.DischargeOtherType.TYPE_ID));
	}
	protected final void oncmbDischargeTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabDischargePatient().cmbDischargeType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.DischargeType existingInstance = (ims.RefMan.vo.lookups.DischargeType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDischargeTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.DischargeType)
		{
			ims.RefMan.vo.lookups.DischargeType instance = (ims.RefMan.vo.lookups.DischargeType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDischargeTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.DischargeType existingInstance = (ims.RefMan.vo.lookups.DischargeType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabDischargePatient().cmbDischargeType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDischargeTypeLookup()
	{
		this.form.lyr1().tabDischargePatient().cmbDischargeType().clear();
		ims.RefMan.vo.lookups.DischargeTypeCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getDischargeType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabDischargePatient().cmbDischargeType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDischargeTypeLookupValue(int id)
	{
		ims.RefMan.vo.lookups.DischargeType instance = ims.RefMan.vo.lookups.LookupHelper.getDischargeTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabDischargePatient().cmbDischargeType().setValue(instance);
	}
	protected final void defaultcmbDischargeTypeLookupValue()
	{
		this.form.lyr1().tabDischargePatient().cmbDischargeType().setValue((ims.RefMan.vo.lookups.DischargeType)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.DischargeType.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.DischargeType.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.RefMan.domain.ReferralOutcomeComponent domain;
}
