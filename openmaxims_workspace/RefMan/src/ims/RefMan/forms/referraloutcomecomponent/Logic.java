// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.65 build 3160.29066)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.referraloutcomecomponent;

import ims.RefMan.forms.referraloutcomecomponent.GenForm.GrpDischPatientEnumeration;
import ims.RefMan.forms.referraloutcomecomponent.GenForm.lyr1Layer.tabDischargePatientContainer.grdDiagnosisRow;
import ims.RefMan.forms.referraloutcomecomponent.GenForm.lyr1Layer.tabDischargePatientContainer.grdInvestigationRow;
import ims.RefMan.forms.referraloutcomecomponent.GenForm.lyr1Layer.tabFurtherManagementContainer.Group2Enumeration;
import ims.RefMan.forms.referraloutcomecomponent.GenForm.lyr1Layer.tabFurtherManagementContainer.grdFurtherRow;
import ims.RefMan.vo.ActiveMonitoringVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralReportsVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralStatusVoCollection;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.FurtherManagementDetailsVo;
import ims.RefMan.vo.FurtherManagementDetailsVoCollection;
import ims.RefMan.vo.OnwardReferralVo;
import ims.RefMan.vo.OnwardReferralVoCollection;
import ims.RefMan.vo.ReferralDischargeVo;
import ims.RefMan.vo.ReferralDischargeVoCollection;
import ims.RefMan.vo.ReferralOutcomeLiteVo;
import ims.RefMan.vo.ReferralOutcomeVo;
import ims.RefMan.vo.enums.ReferralOutcomeReportType;
import ims.RefMan.vo.lookups.AnotherConsultationAppt;
import ims.RefMan.vo.lookups.DischargeToGPDetailsReviewStatus;
import ims.RefMan.vo.lookups.DischargeType;
import ims.RefMan.vo.lookups.FollowupManagementType;
import ims.RefMan.vo.lookups.OnwardReferralStatus;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReportStatus;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.clinical.vo.PatientDiagnosisRefVoCollection;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.OrgLiteVoCollection;
import ims.core.vo.PatientDiagnosisLiteVo;
import ims.core.vo.PatientDiagnosisLiteVoCollection;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ServiceShortVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppUser;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVoCollection;
import ims.ocrr.vo.OrderInvestigationListVo;
import ims.ocrr.vo.OrderInvestigationListVoCollection;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
	}
	
	private ReferralOutcomeVo populateDataFromScreen()
	{
		ReferralOutcomeVo refOutcomeVo = null;

		if (form.getLocalContext().getcurrentOutcomeVoIsNotNull()) {
			refOutcomeVo = form.getLocalContext().getcurrentOutcomeVo();
		}
		else {
			refOutcomeVo = new ReferralOutcomeVo();
		}

		if (refOutcomeVo.getCatsReferral() == null) {
			refOutcomeVo.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		}
		
		if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatYES)) 
		{		
			clearFurtherManagementTab();			
			refOutcomeVo = populateDischargeDetails(refOutcomeVo);					
			
			if (refOutcomeVo == null)
				return null;
			
			if (refOutcomeVo.getActiveMonitoringIsNotNull())
				refOutcomeVo = setActiveMonitoringEndDate(refOutcomeVo);
		}
	
		if ((form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatNO)
			|| (refOutcomeVo.getFurtherManagementDetailsIsNotNull() && refOutcomeVo.getFurtherManagementDetails().size() > 0) )) 
		{
			if (!form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatYES))	//wdev-11255 
				clearDischargePatientTab();
			
			if (form.lyr1().tabFurtherManagement().grdFurther().getRows().size() > 0) {
				refOutcomeVo.setFurtherManagementDetails(new FurtherManagementDetailsVoCollection());
			}
			
			for ( int  i = 0 ; i < form.lyr1().tabFurtherManagement().grdFurther().getRows().size() ; i++)
			{
				FurtherManagementDetailsVo voFMD = form.lyr1().tabFurtherManagement().grdFurther().getRows().get(i).getValue();
				refOutcomeVo.getFurtherManagementDetails().add(voFMD);
			}
			if (form.lyr1().tabFurtherManagement().ccA().getValue() != null)
				refOutcomeVo.setAuthoringInformation(form.lyr1().tabFurtherManagement().ccA().getValue());
			else if (form.lyr1().tabDischargePatient().cc2().getValue() != null)
				refOutcomeVo.setAuthoringInformation(form.lyr1().tabDischargePatient().cc2().getValue());
			
			if (refOutcomeVo.getActiveMonitoringIsNotNull())
				refOutcomeVo = setActiveMonitoringEndDate(refOutcomeVo);
			
			if (form.lyr1().tabFurtherManagement().chkFinal().isVisible())
			{
				refOutcomeVo.setCatsFinalReportStatus(form.lyr1().tabFurtherManagement().chkFinal().getValue()
						&& (refOutcomeVo.getCatsFinalReportStatus() == null
								|| (refOutcomeVo.getCatsFinalReportStatusIsNotNull()
									&& ! refOutcomeVo.getCatsFinalReportStatus().equals(ReportStatus.GENERATED))) ? ReportStatus.REQUIRED : null);
			}
		}			
	
		if ((form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatActive)
				|| (refOutcomeVo.getActiveMonitoringIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getEnableActiveMonitoring()))))			//wdev-11294
		{
			ActiveMonitoringVo voAM = refOutcomeVo.getActiveMonitoring();
			if (voAM == null)
				voAM = new ActiveMonitoringVo();			

			voAM.setAuthoringInformation(form.lyr1().tabActiveMonitoring().ccAMAuthoring().getValue());
			if (voAM.getRecordingInformation() == null)			
				voAM.setRecordingInformation(populateRecordinfInfo());			
			voAM.setStartDateActiveMonitoring(form.lyr1().tabActiveMonitoring().dtimAMStart().getValue());
			voAM.setActiveMonitoringReason(form.lyr1().tabActiveMonitoring().cmbAMType().getValue());
			voAM.setPeriodOfMonitoringDays(form.lyr1().tabActiveMonitoring().intAMPeriod().getValue());
			voAM.setBookApptBy(form.lyr1().tabActiveMonitoring().dteAMApptBy().getValue());
			voAM.setActiveMonitoringComments(form.lyr1().tabActiveMonitoring().txtAMComments().getValue());			

			refOutcomeVo.setActiveMonitoring(voAM);
						
			if (form.lyr1().tabActiveMonitoring().chkAMGFinalReport().isVisible())
			{
				refOutcomeVo.setCatsFinalReportStatus(form.lyr1().tabActiveMonitoring().chkAMGFinalReport().getValue()
					&& (refOutcomeVo.getCatsFinalReportStatus() == null
						|| (refOutcomeVo.getCatsFinalReportStatusIsNotNull()
						&& ! refOutcomeVo.getCatsFinalReportStatus().equals(ReportStatus.GENERATED))) ? ReportStatus.REQUIRED : null);
			}
		}			
		
		if (refOutcomeVo.getAuthoringInformation() == null)
			refOutcomeVo.setAuthoringInformation(populateRecordinfInfo());			
		
		form.getLocalContext().setcurrentOutcomeVo(refOutcomeVo);

		return refOutcomeVo;
	}

	private ReferralOutcomeVo setActiveMonitoringEndDate(ReferralOutcomeVo refOutcomeVo) 
	{
		if (refOutcomeVo.getActiveMonitoring().getActiveMonitoringEndDate() == null)
			refOutcomeVo.getActiveMonitoring().setActiveMonitoringEndDate(new Date());
		
		return refOutcomeVo;
	}

	private FurtherManagementDetailsVo populateFurtherManagementDetails(FurtherManagementDetailsVo voFurtherManage) 
	{		
		voFurtherManage = new FurtherManagementDetailsVo();
	
		if (form.lyr1().tabFurtherManagement().Group2().getValue().equals(Group2Enumeration.rdoTlt)) {
			voFurtherManage.setFollowupType(FollowupManagementType.TLT);
		}
		else if (form.lyr1().tabFurtherManagement().Group2().getValue().equals(Group2Enumeration.rdoFurther)) {
			voFurtherManage.setFollowupType(FollowupManagementType.ANOTHER_APPOINTMENT);
		}
		else if (form.lyr1().tabFurtherManagement().Group2().getValue().equals(Group2Enumeration.rdoSpecial)) {
			voFurtherManage.setFollowupType(FollowupManagementType.SPECIAL_INVESTIGATIONS);
		}
			
		voFurtherManage.setFurtherManagementByCATS(form.lyr1().tabFurtherManagement().txtFurtherManagement().getValue());
		voFurtherManage.setNoOfTltSessions(form.lyr1().tabFurtherManagement().intTlltSessions().getValue());
		voFurtherManage.setTLTNotes(form.lyr1().tabFurtherManagement().txtTLTNotes().getValue());
		voFurtherManage.setTLTType(form.lyr1().tabFurtherManagement().cmbTLTType().getValue());
		voFurtherManage.setAnotherConsultationAppt(form.lyr1().tabFurtherManagement().cmbReasonNO().getValue());
		voFurtherManage.setProcedure(form.lyr1().tabFurtherManagement().qmbProcedure().getValue());
		voFurtherManage.setProcedureNoOfDays(form.lyr1().tabFurtherManagement().intNoOfDaysNO().getValue());
		voFurtherManage.setMedicallyIncomplete(form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().getValue());
		voFurtherManage.setIncompleteNoOfDays(form.lyr1().tabFurtherManagement().intIncompNoDays().getValue());		
		voFurtherManage.setAuthoringInformation(form.lyr1().tabFurtherManagement().ccA().getValue());		
		voFurtherManage.setRecordingInformation(populateRecordinfInfo());
		
		return voFurtherManage;
	}

	private AuthoringInformationVo populateRecordinfInfo()
	{
		AuthoringInformationVo authoring = new AuthoringInformationVo();
		authoring.setAuthoringDateTime(new DateTime());
		
		HcpLiteVo hcpVo = new HcpLiteVo();
		hcpVo.setID_Hcp(engine.getLoggedInUser().getHcpId());
		hcpVo.setMos(domain.getMosUser() != null ? (MemberOfStaffLiteVo) domain.getMosUser() : null);
		
		authoring.setAuthoringHcp(hcpVo);
		
		return authoring;
	}
	
	private ReferralOutcomeVo populateDischargeDetails(ReferralOutcomeVo refOutcomeVo) 
	{
		if (refOutcomeVo != null)
		{
			form.getLocalContext().setInvalidOnwardReferral(null);
			ReferralDischargeVoCollection dischargeHistory = refOutcomeVo.getReferralDischargeHistory();	
			if (dischargeHistory == null) {
				dischargeHistory = new ReferralDischargeVoCollection();
			}
			
			ReferralDischargeVo voReferralDisch = refOutcomeVo.getReferralDischarge();			
			if (voReferralDisch != null) {
				dischargeHistory.add(voReferralDisch);
			}
		
			voReferralDisch = new ReferralDischargeVo();			
						
			voReferralDisch.setRecordingInformation(populateRecordinfInfo());			
			voReferralDisch.setDischargingHCP(form.lyr1().tabDischargePatient().cc2().getValue());
			voReferralDisch.setDischargeDate(form.lyr1().tabDischargePatient().dteDischarge().getValue());
			voReferralDisch.setDischargeType(form.lyr1().tabDischargePatient().cmbDischargeType().getValue());
			voReferralDisch.setDischargeOtherType(form.lyr1().tabDischargePatient().cmbOther().getValue());
			
			// WDEV-12345 - Get Investigation & Diagnosis user selected to be associated
			// to current record
			voReferralDisch.setResultsForReport(getSelectedInvestigations());
			voReferralDisch.setDiagnosisForReport(getSelectedDiagnosis());
		
			if (form.lyr1().tabDischargePatient().cmbDischargeType().getValue() != null 
				&& form.lyr1().tabDischargePatient().cmbDischargeType().getValue().equals(DischargeType.SEC_CARE))
			{
				OnwardReferralVo voOnward = new OnwardReferralVo();				
				voOnward.setDischargeDate(form.lyr1().tabDischargePatient().dteDischarge().getValue());
				voOnward.setOnwardReferralOrg(form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().getValue());
				voOnward.setOnwardReferral(form.lyr1().tabDischargePatient().txtOnwardReferralInstructions().getValue());
				voOnward.setOnwardReferralReason(form.lyr1().tabDischargePatient().cmbOnwardRefReason().getValue());
				
				voOnward.setCopyToGP(form.lyr1().tabDischargePatient().chkCopyToGP().getValue());
				voOnward.setCopyToPatient(form.lyr1().tabDischargePatient().chkCopyToPatient().getValue());
				voOnward.setCopyToSecondaryCare(form.lyr1().tabDischargePatient().chkCopyToSecondaryCare().getValue());
			
				voReferralDisch.setCurrentOnwardReferral(voOnward);
				
				if (voReferralDisch.getOnwardReferrals() == null) {
					voReferralDisch.setOnwardReferrals(new OnwardReferralVoCollection());
				}
			
				String[] str = voOnward.validate();
				if (str != null && str.length > 0)
					form.getLocalContext().setInvalidOnwardReferral(voOnward); 
			
				if (str == null)
					voReferralDisch.getOnwardReferrals().add(voOnward);			
			}
			else
			{
				voReferralDisch.setCurrentOnwardReferral(null);
				voReferralDisch.setOnwardReferrals(null);
			}
			
			String[] str = voReferralDisch.validate();
			if (str != null && str.length > 0) 
			{				
				engine.showErrors(str);			
				return null;				
			}				 
			
			dischargeHistory.add(voReferralDisch);
			refOutcomeVo.setReferralDischargeHistory(dischargeHistory);
			refOutcomeVo.setReferralDischarge(voReferralDisch);						
			if (refOutcomeVo.getAuthoringInformation() == null)
				refOutcomeVo.setAuthoringInformation(populateRecordinfInfo());			
		}
		
		String[] str = refOutcomeVo.validate();
		if (str != null && str.length > 0) 
		{				
			engine.showErrors(str);			
			return null;				
		}
		
		return refOutcomeVo;
	}

	/**
	 * WDEV-12345
	 * Function used to retrieve the selected investigations from grid
	 */
	private OrderInvestigationRefVoCollection getSelectedInvestigations()
	{
		// Create a new investigations collection
		OrderInvestigationRefVoCollection result = new OrderInvestigationRefVoCollection();

		// Iterate Investigations grid and add selected ones to result collection
		for (int i = 0; i < form.lyr1().tabDischargePatient().grdInvestigation().getRows().size(); i++)
		{
			grdInvestigationRow investigationRow = form.lyr1().tabDischargePatient().grdInvestigation().getRows().get(i);
			
			if (investigationRow.getColSelect() == true)
				result.add(investigationRow.getValue());
		}
		
		return result;
	}

	/**
	 * WDEV-12345
	 * Function used to retrieve the selected patient diagnosis from grid
	 */
	private PatientDiagnosisRefVoCollection getSelectedDiagnosis()
	{
		// Create a new diagnosis collection
		PatientDiagnosisRefVoCollection result = new PatientDiagnosisRefVoCollection();
		
		// Iterate Diagnosis grid and add selected ones to result collection
		for (int i = 0; i < form.lyr1().tabDischargePatient().grdDiagnosis().getRows().size(); i++)
		{
			grdDiagnosisRow diagnosisRow = form.lyr1().tabDischargePatient().grdDiagnosis().getRows().get(i);
			
			if (diagnosisRow.getColSelect() == true)
				result.add(diagnosisRow.getValue());
		}

		return result;
	}

	private void populateScreenFromData(ReferralOutcomeVo outcome)
	{
		clearScreen();
		form.lyr1().tabDischargePatient().setVisible(false);
		form.lyr1().tabFurtherManagement().setVisible(false);
		form.lyr1().tabActiveMonitoring().setVisible(false);
				
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatYES, true);				
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatNO, true);				
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatActive, true);				
		}

		form.getLocalContext().setcurrentOutcomeVo(outcome);	//WDEV-11299
		
		if (outcome == null)
		{			
			form.lyr1().tabDischargePatient().dteDischarge().setValue(null);
			
			form.lyr1().tabFurtherManagement().grdFurther().getRows().clear();
			clearFurtherManagementTab();
			clearDischargePatientTab();	
			clearActiveManagementTab();	
			
			if (form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged()) 
			{
				 form.GrpDischPatient().setEnabled(true);
			}			
		}
		else		
		{
			//form.getLocalContext().setcurrentOutcomeVo(outcome); //WDEV-11299
					
			if (outcome.getFurtherManagementDetailsIsNotNull() &&
					outcome.getFurtherManagementDetails().size() > 0) 
			{
				form.GrpDischPatient().setValue(GrpDischPatientEnumeration.rdoDischPatNO);
				manageRadioButtonGrpDischPatientValueChanged();
												
				form.lyr1().tabFurtherManagement().chkFinal().setVisible(outcome.getCatsFinalReportStatus() == null);
				form.lyr1().tabFurtherManagement().lblFinal().setVisible(outcome.getCatsFinalReportStatus() == null);
				
				form.lyr1().tabFurtherManagement().ccA().setEnabledAuthoringHCP(false);
				form.lyr1().tabFurtherManagement().ccA().setEnabledDateTime(false);
				form.lyr1().tabFurtherManagement().ccA().setIsRequiredPropertyToControls(true);
				
				
				form.lyr1().tabFurtherManagement().grdFurther().getRows().clear();
				outcome.getFurtherManagementDetails().sort();
				
				
				
				for(int i = 0 ; outcome.getFurtherManagementDetailsIsNotNull() && i < outcome.getFurtherManagementDetails().size() ; i++)
				{
					grdFurtherRow row = form.lyr1().tabFurtherManagement().grdFurther().getRows().newRow();	
					row.setcolNotes(outcome.getFurtherManagementDetails().get(i).getFollowupTypeIsNotNull() ? outcome.getFurtherManagementDetails().get(i).getFollowupType().toString() : "");
					row.setcolDateTime(outcome.getFurtherManagementDetails().get(i).getAuthoringInformationIsNotNull() ? (outcome.getFurtherManagementDetails().get(i).getAuthoringInformation().getAuthoringDateTimeIsNotNull() ? outcome.getFurtherManagementDetails().get(i).getAuthoringInformation().getAuthoringDateTime().toString() : "") : "");
					row.setValue(outcome.getFurtherManagementDetails().get(i));
				}
				
				form.lyr1().tabFurtherManagement().cmbReasonNO().setVisible(false);
				form.lyr1().tabFurtherManagement().lblApptReason().setVisible(false);
				form.lyr1().tabFurtherManagement().lblPROCEDURE().setVisible(false);
				form.lyr1().tabFurtherManagement().qmbProcedure().setVisible(false);
				form.lyr1().tabFurtherManagement().lblNoOfDaysNO().setVisible(false);
				form.lyr1().tabFurtherManagement().intNoOfDaysNO().setVisible(false);				
				
				if (form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged()) 
					enableDischargePatientTab(false);
				
				updateContextMenu();
			}

			if (outcome.getActiveMonitoringIsNotNull()) 
			{
				form.GrpDischPatient().setValue(GrpDischPatientEnumeration.rdoDischPatActive);				
				manageRadioButtonGrpDischPatientValueChanged();

				form.lyr1().tabActiveMonitoring().chkAMGFinalReport().setVisible(outcome.getCatsFinalReportStatus() == null);
				form.lyr1().tabActiveMonitoring().lblAMFinal().setVisible(outcome.getCatsFinalReportStatus() == null);

				form.lyr1().tabActiveMonitoring().ccAMAuthoring().setValue(outcome.getActiveMonitoring().getAuthoringInformation());
				form.lyr1().tabActiveMonitoring().dtimAMStart().setValue(outcome.getActiveMonitoring().getStartDateActiveMonitoring());
				form.lyr1().tabActiveMonitoring().cmbAMType().setValue(outcome.getActiveMonitoring().getActiveMonitoringReason());
				form.lyr1().tabActiveMonitoring().intAMPeriod().setValue(outcome.getActiveMonitoring().getPeriodOfMonitoringDays());
				form.lyr1().tabActiveMonitoring().dteAMApptBy().setValue(outcome.getActiveMonitoring().getBookApptBy());
				form.lyr1().tabActiveMonitoring().txtAMComments().setValue(outcome.getActiveMonitoring().getActiveMonitoringComments());

				if (form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged()) 
				{
					enableFurtherManagementTab(false);
				}
			}

			if (outcome.getReferralDischargeIsNotNull()) 
			{
				form.GrpDischPatient().setValue(GrpDischPatientEnumeration.rdoDischPatYES);
				manageRadioButtonGrpDischPatientValueChanged();

				form.lyr1().tabDischargePatient().cmbDischargeType().setValue(outcome.getReferralDischarge().getDischargeType());
				form.lyr1().tabDischargePatient().cc2().setValue(outcome.getReferralDischarge().getDischargingHCP());
				manageDischargeTypeValueChanged();
				
				form.lyr1().tabDischargePatient().txtOnwardReferralInstructions().setValue(outcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull() ? outcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferral() : null);
				form.lyr1().tabDischargePatient().cmbOnwardRefReason().setValue(outcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull() ? outcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralReason() : null);

				form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().setValue(outcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull() ? outcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralOrg() : null);
				if (form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().getValue() == null
					&& outcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull()
					&& outcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralOrgIsNotNull())
				{
					form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().newRow(outcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralOrg(), outcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralOrg().getName());
					form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().setValue(outcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralOrg());
				}
				
				// WDEV-12345 - Set the value to "Copy To ..." check-boxes
				form.lyr1().tabDischargePatient().chkCopyToGP().setValue(outcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull() ? outcome.getReferralDischarge().getCurrentOnwardReferral().getCopyToGP() : null);
				form.lyr1().tabDischargePatient().chkCopyToPatient().setValue(outcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull() ? outcome.getReferralDischarge().getCurrentOnwardReferral().getCopyToPatient() : null);
				form.lyr1().tabDischargePatient().chkCopyToSecondaryCare().setValue(outcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull() ? outcome.getReferralDischarge().getCurrentOnwardReferral().getCopyToSecondaryCare() : null);

				// WDEV-12345 - Mark as selected the Investigations & Diagnosis associated with current record
				markInvestigations(outcome.getReferralDischarge().getResultsForReport());
				markDiagnosis(outcome.getReferralDischarge().getDiagnosisForReport());
				
				form.lyr1().tabDischargePatient().dteDischarge().setValue(outcome.getReferralDischarge().getDischargeDate());
				form.lyr1().tabDischargePatient().cmbOther().setValue(outcome.getReferralDischarge().getDischargeOtherType());
				
				if (form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged()) {
					enableFurtherManagementTab(false);
				}
			}

			if (!(outcome.getFurtherManagementDetailsIsNotNull() 
					&& outcome.getFurtherManagementDetails().size() > 0) 
				&& !outcome.getReferralDischargeIsNotNull())
			{	
				if (form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged()) 
					form.GrpDischPatient().setEnabled(true);
			}

			if (outcome.getFurtherManagementDetailsIsNotNull() 
				&& outcome.getFurtherManagementDetails().size() > 0 
				&& !outcome.getReferralDischargeIsNotNull() 
				&& form.getMode().equals(FormMode.EDIT) 
				&& ! isReferralDischarged()) 
			{
				form.GrpDischPatient().setEnabled(true);				
			}
			
			if (outcome.getFurtherManagementDetailsIsNotNull() 
				&& outcome.getFurtherManagementDetails().size() > 0 
				&& form.getMode().equals(FormMode.EDIT) 
				&& ! isReferralDischarged()) 
				form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatNO, false);				

			if (outcome.getActiveMonitoringIsNotNull() 
				&& form.getMode().equals(FormMode.EDIT) 
				&& ! isReferralDischarged()) 
				form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatActive, false);				
		
			if (( form.getLocalContext().getDisplayReadOnly() == null
				|| ! form.getLocalContext().getDisplayReadOnly())
				&& form.getLocalContext().getCurrentCatsReferralIsNotNull())
			{
				CatsReferralStatusVoCollection voStatusColl = form.getLocalContext().getCurrentCatsReferral().getStatusHistory().sort(SortOrder.DESCENDING);

				if (voStatusColl.get(0).getReferralStatus().equals(ReferralApptStatus.ACTIVE_MONITORING))
				{
					form.GrpDischPatient().setValue(GrpDischPatientEnumeration.rdoDischPatActive);
					form.lyr1().showtabActiveMonitoring();
				}
				else if (voStatusColl.get(0).getReferralStatus().equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED))
				{
					form.GrpDischPatient().setValue(GrpDischPatientEnumeration.rdoDischPatNO);
					form.lyr1().showtabFurtherManagement();
				}
				if (voStatusColl.get(0).getReferralStatus().equals(ReferralApptStatus.DISCHARGED))
				{
					form.GrpDischPatient().setValue(GrpDischPatientEnumeration.rdoDischPatYES);
					form.lyr1().showtabDischargePatient();
				}
			}
			if (form.getLocalContext().getDisplayReadOnlyIsNotNull()
				&& form.getLocalContext().getDisplayReadOnly())
			{
				if (outcome.getReferralDischargeIsNotNull()) 
				{
					form.GrpDischPatient().setValue(GrpDischPatientEnumeration.rdoDischPatYES);
					form.lyr1().showtabDischargePatient();
				}

				if ((outcome.getFurtherManagementDetailsIsNotNull() 
					&& outcome.getFurtherManagementDetails().size() > 0) 
					&& outcome.getReferralDischarge() == null)
				{
					form.GrpDischPatient().setValue(GrpDischPatientEnumeration.rdoDischPatNO);
					form.lyr1().showtabFurtherManagement();
				}
			}
		}		
	}

	private void markInvestigations(OrderInvestigationRefVoCollection resultsForReport)
	{
		if (resultsForReport == null)
			return;
		
		for (OrderInvestigationRefVo investigation : resultsForReport)
		{
			for (int i = 0; i < form.lyr1().tabDischargePatient().grdInvestigation().getRows().size(); i++)
			{
				grdInvestigationRow investigationRow = form.lyr1().tabDischargePatient().grdInvestigation().getRows().get(i);
				
				if (investigation.equals(investigationRow.getValue()))
					investigationRow.setColSelect(true);
			}
		}
	}

	private void markDiagnosis(PatientDiagnosisRefVoCollection diagnosisForReport)
	{
		if (diagnosisForReport == null)
			return;

		for (PatientDiagnosisRefVo diagnosis : diagnosisForReport)
		{
			for (int i = 0; i < form.lyr1().tabDischargePatient().grdDiagnosis().getRows().size(); i++)
			{
				grdDiagnosisRow diagnosisRow = form.lyr1().tabDischargePatient().grdDiagnosis().getRows().get(i);
				
				if (diagnosis.equals(diagnosisRow.getValue()))
					diagnosisRow.setColSelect(true);
			}
		}
	}

	private void clearScreen()
	{
		form.GrpDischPatient().setValue(null);		
		
		form.lyr1().tabDischargePatient().cmbDischargeType().setValue(null);
		form.lyr1().tabDischargePatient().dteDischarge().setValue(null);
		form.lyr1().tabDischargePatient().txtOnwardReferralInstructions().setValue(null);
		form.lyr1().tabDischargePatient().cmbOnwardRefReason().setValue(null);
		form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().setValue(null);
		form.lyr1().tabDischargePatient().cmbOther().setValue(null);
		
		// WDEV-12345 - Clear "Copy To ..." check-boxes
		form.lyr1().tabDischargePatient().chkCopyToGP().setValue(null);
		form.lyr1().tabDischargePatient().chkCopyToPatient().setValue(null);
		form.lyr1().tabDischargePatient().chkCopyToSecondaryCare().setValue(null);
		
		form.lyr1().tabFurtherManagement().qmbProcedure().setValue(null);
		form.lyr1().tabFurtherManagement().cmbReasonNO().setValue(null);
		form.lyr1().tabFurtherManagement().chkFinal().setValue(false);
		form.lyr1().tabFurtherManagement().intNoOfDaysNO().setValue(null);
		form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setValue(null);
		form.lyr1().tabFurtherManagement().intIncompNoDays().setValue(null);
		form.lyr1().tabFurtherManagement().setVisible(false);
		form.lyr1().tabFurtherManagement().setHeaderVisible(false);

		form.lyr1().tabDischargePatient().setEnabled(true);
		form.lyr1().tabDischargePatient().setVisible(true);
		form.lyr1().tabDischargePatient().cmbDischargeType().setValue(null);
		form.lyr1().tabDischargePatient().dteDischarge().setValue(null);
		
		// WDEV-12345 - Clear associated investigations & associated diagnosis
		clearInvestigationAssociations();
		clearDiagnosisAssociations();
		
		displayDischargePatientTab(false, false, false);		
	}
	
	/**
	 * WDEV-12345
	 * Function used to clear the Investigation associated to discharge record
	 * This will only clear the screen - not from record. That will be cleared on save, when populating data from screen.
	 */
	private void clearInvestigationAssociations()
	{
		for (int i = 0; i < form.lyr1().tabDischargePatient().grdInvestigation().getRows().size(); i++)
		{
			form.lyr1().tabDischargePatient().grdInvestigation().getRows().get(i).setColSelect(false);
		}
	}

	/**
	 * WDEV-12345
	 * Function used to clear the PatientDiagnosis associated to discharge record
	 */
	private void clearDiagnosisAssociations()
	{
		for (int i = 0; i < form.lyr1().tabDischargePatient().grdDiagnosis().getRows().size(); i++)
		{
			form.lyr1().tabDischargePatient().grdDiagnosis().getRows().get(i).setColSelect(false);
		}
	}

	public void initialize(Boolean displayReadOnly, ReferralDischargeVo discharge, FurtherManagementDetailsVo furtherManagement, ReferralOutcomeLiteVo outcome)
	{
		form.getLocalContext().setDisplayReadOnly(displayReadOnly);
		
		// WDEV-12345 - Get investigation & patient diagnosis that can be associated with referral
		// The domain calls are expensive time wise and it doesn't make sense to do them more than once
		// as we only mark them as associated to current referral (or not)
		populateInvestigation(domain.getInvestigation(form.getGlobalContext().RefMan.getCatsReferral()));
		populateDiagnosis(domain.getDiagnosis(form.getGlobalContext().RefMan.getCatsReferral()));
		
		clearDischargePatientTab();
		clearFurtherManagementTab();
		clearActiveManagementTab();
		
		form.getLocalContext().setbFMDEditable(false);
		form.getLocalContext().setUndoDischarge(false);
		
		form.lyr1().tabDischargePatient().setHeaderVisible(false);
		form.lyr1().tabFurtherManagement().setHeaderVisible(false);		
		form.lyr1().tabActiveMonitoring().setHeaderVisible(false);		
		
		form.lyr1().tabFurtherManagement().Group2().setValue(null);
		
		initializeService();	
		
		if (outcome != null && outcome.getCatsReferralIsNotNull()) 
		{
			ReferralOutcomeVo displayOutcome = domain.getOutcome(outcome);						
			displayOutcome.setReferralDischarge(discharge);
			if (furtherManagement != null)
			{
				FurtherManagementDetailsVoCollection furtherManagementColl = new FurtherManagementDetailsVoCollection();
				furtherManagementColl.add(furtherManagement);
				displayOutcome.setFurtherManagementDetails(furtherManagementColl);
			}			
			populateScreenFromData(displayOutcome);	
			form.setMode(FormMode.VIEW);
			updateControlState();
			//WDEV-11282 
			displayCATSReportDocumentSentDate();		
			return;
		}
		
		form.setMode(FormMode.VIEW);
		
//		//Need to get latest Cats Referral, in case initialise is called from the tab change at the upper level and the status has changed.....to discharge
//		form.getLocalContext().setCurrentCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));
		open();
		
		updateControlState();
		
		enableEditAndReviewButtons();		
		enableOnwardReferralCompletedButton();
		//WDEV-11282 
		displayCATSReportDocumentSentDate();			
	}

	/**
	 * WDEV-12345
	 * Function used to populate investigation grid
	 */
	private void populateInvestigation(OrderInvestigationListVoCollection investigations)
	{
		// Clear the investigation grid row
		form.lyr1().tabDischargePatient().grdInvestigation().getRows().clear();
		
		// Terminate for null investigation collection
		if (investigations == null)
			return;
		
		// Add each investigation to grid
		for (OrderInvestigationListVo investigation : investigations)
		{
			grdInvestigationRow row = form.lyr1().tabDischargePatient().grdInvestigation().getRows().newRow();
			
			row.setColInvestigation(investigation.getIGenericItemInfoName());
			row.setTooltipForColInvestigation(investigation.getIGenericItemInfoName());
			row.setColInvestigationReadOnly(true);											// Make sure the investigation column is read only
			
			row.setColSelect(false);
			//row.setColSelectReadOnly(false);
			
			row.setValue(investigation);
		}		
	}

	/**
	 * WDEV-12345
	 * Function used to populate diagnosis grid
	 */
	private void populateDiagnosis(PatientDiagnosisLiteVoCollection diagnosis)
	{
		// Clear the diagnosis grid rows
		form.lyr1().tabDischargePatient().grdDiagnosis().getRows().clear();
		
		// Terminate for null diagnosis collection
		if (diagnosis == null)
			return;
		
		// Add each diagnosis to grid
		for (PatientDiagnosisLiteVo patientDiagnosis : diagnosis)
		{
			grdDiagnosisRow row = form.lyr1().tabDischargePatient().grdDiagnosis().getRows().newRow();
			
			row.setColDiagnosis(patientDiagnosis.toString());
			row.setTooltipForColDiagnosis(patientDiagnosis.toString());
			row.setColDiagnosisReadOnly(true);								// Make sure the diagnosis column is read only 

			row.setColSelect(false);
			//row.setColSelectReadOnly(false);

			row.setValue(patientDiagnosis);
		}
	}

	private void displayCATSReportDocumentSentDate() 
	{
		boolean isViewMode = form.getMode().equals(FormMode.VIEW);
		boolean isReadOnlyMode = form.getLocalContext().getDisplayReadOnlyIsNotNull() ? form.getLocalContext().getDisplayReadOnly() : false;
		boolean meetConditions = isViewMode && !isReadOnlyMode
									&& form.getLocalContext().getCurrentCatsReferralIsNotNull() 
									&& form.getLocalContext().getCurrentCatsReferral().getIsFinalReportRequiredIsNotNull()
									&& form.getLocalContext().getCurrentCatsReferral().getIsFinalReportRequired().equals(ReportStatus.GENERATED);
		
		if (meetConditions && !form.btnPrintFinal().isVisible())
		{
			CatsReferralReportsVo catsReferral = domain.getCatsReferralReports(form.getLocalContext().getCurrentCatsReferral());
			form.getGlobalContext().RefMan.setCatsReferralReports(catsReferral);
			manageCATSReportDocumentSentDate(catsReferral);
		}
		else
		{
			form.lblCATSReportSentDate().setVisible(false);
			form.dtim1().setVisible(false);
			form.btnEditDate().setVisible(false);
		}		
	}

	private void updateControlState()
	{
		boolean isViewMode = form.getMode().equals(FormMode.VIEW);
		boolean isReadOnlyMode = form.getLocalContext().getDisplayReadOnlyIsNotNull() ? form.getLocalContext().getDisplayReadOnly() : false;
		boolean isStatusDischarged = (engine.hasRight(AppRight.CAN_UNDO_DISCHARGE) ? true : false) 
										&& form.getLocalContext().getCurrentCatsReferralIsNotNull() 
											&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatusIsNotNull() 
												&& (form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatusIsNotNull() 
														? (form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.DISCHARGED) ?  true : false): false);
		if (isViewMode) 
		{
			form.btnEdit().setVisible(isViewMode);// && !isReadOnlyMode);
			if (isReadOnlyMode)
				form.btnEdit().setVisible(false);

			form.btnUndoDischarge().setVisible(isViewMode && !isReadOnlyMode && isStatusDischarged);
			
			form.btnPrintFinal().setVisible(isViewMode && !isReadOnlyMode 
					&& form.getLocalContext().getCurrentCatsReferralIsNotNull() 
					&& form.getLocalContext().getCurrentCatsReferral().getIsFinalReportRequiredIsNotNull()
					&& form.getLocalContext().getCurrentCatsReferral().getIsFinalReportRequired().equals(ReportStatus.REQUIRED));
			//&& form.getLocalContext().getCurrentCatsReferral().getIsFinalReportRequiredIsNotNull()
			//&& form.getLocalContext().getCurrentCatsReferral().getIsFinalReportRequired().equals(ReportStatus.REQUIRED));
			
			form.btnGPReviewed().setVisible(engine.hasRight(AppRight.CAN_REVIEW_GP_DISCHARGE_OUTCOME)
					&& isViewMode && !isReadOnlyMode 
					&& form.getLocalContext().getCurrentCatsReferralIsNotNull() 
					&& form.getLocalContext().getCurrentCatsReferral().getDischargeToGPDetailsReviewStatusIsNotNull()
					&& form.getLocalContext().getCurrentCatsReferral().getDischargeToGPDetailsReviewStatus().equals(DischargeToGPDetailsReviewStatus.TO_BE_REVIEWED)
					&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatusIsNotNull() 
					&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatusIsNotNull()
					&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.DISCHARGED));

			form.btnUpdateAM().setVisible(isViewMode && !isReadOnlyMode 
					&& form.getLocalContext().getCurrentCatsReferralIsNotNull() 
					&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatusIsNotNull() 
					&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatusIsNotNull()
					&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.ACTIVE_MONITORING)
					&& form.getLocalContext().getCurrentCatsReferral().getIsActiveMonitorApptRequiredIsNotNull()
					&& ! form.getLocalContext().getCurrentCatsReferral().getIsActiveMonitorApptRequired());

			form.btnPrintPrescriptions().setVisible(isViewMode && !isReadOnlyMode);
			form.btnReviewed().setVisible(isViewMode && !isReadOnlyMode);
			form.btnOnwardReferralCompleted().setVisible(isViewMode && !isReadOnlyMode);	
		}
		if (isReadOnlyMode) 
		{
			form.getContextMenus().disableAllGenericGridMenuItems();
		}
		//lock down ability to change status using radio buttons when ststua is Active Monitoring. 
		if (form.getMode().equals(FormMode.EDIT)
			&& form.getLocalContext().getCurrentCatsReferralIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatusIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatusIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.ACTIVE_MONITORING) )
		{
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatYES, false);				
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatNO, false);				
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatActive, false);				
		}
	}
	
	private void enableOnwardReferralCompletedButton() 
	{
		form.btnOnwardReferralCompleted().setVisible(false);
		CatsReferralWizardVo currentCatsReferral = form.getLocalContext().getCurrentCatsReferral();
		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		if (currentCatsReferral == null) {
			currentCatsReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		}
		if (viewMode && currentCatsReferral.getOnwardReferralReasonIsNotNull()) {
			form.btnOnwardReferralCompleted().setVisible(true);
		}
	}

	private void enableEditAndReviewButtons() 
	{
		form.btnReviewed().setVisible(false);
		CatsReferralWizardVo voRefWizard = form.getLocalContext().getCurrentCatsReferral();
		if (voRefWizard == null)
		{
			voRefWizard = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			form.getLocalContext().setCurrentCatsReferral(voRefWizard);
		}
		
		if (form.getMode().equals(FormMode.VIEW))
		{
			if (voRefWizard.getWasFurtherManagementDetailsReviewed() == null
					&& voRefWizard.getCurrentStatusIsNotNull()
					&& voRefWizard.getCurrentStatus().getReferralStatusIsNotNull()
					&& voRefWizard.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED))
			{
				form.btnReviewed().setVisible(true);
			}
			if (engine.hasRight(AppRight.CAN_REVIEW_GP_DISCHARGE_OUTCOME)
				&& voRefWizard.getDischargeToGPDetailsReviewStatusIsNotNull()
				&& voRefWizard.getDischargeToGPDetailsReviewStatus().equals(DischargeToGPDetailsReviewStatus.TO_BE_REVIEWED)
				&& voRefWizard.getCurrentStatus().getReferralStatusIsNotNull()
				&& voRefWizard.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.DISCHARGED))
			{
				form.btnGPReviewed().setVisible(true);
			}

			if (voRefWizard.getCurrentStatusIsNotNull()
				&& voRefWizard.getCurrentStatus().getReferralStatusIsNotNull()
				&& voRefWizard.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER))
			{			
				form.btnEdit().setVisible(false);				
			}
			else
			{
				form.btnEdit().setVisible(true);
				form.btnPrintFinal().setEnabled(true);
				form.btnPrintPrescriptions().setEnabled(true);
			}
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		enableEditAndReviewButtons();	
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.btnUndoDischarge().setVisible(false);
		}
		
		if (form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged())
		{
			updateContextMenu();
			form.btnUndoDischarge().setVisible(false);
						
			form.lyr1().tabFurtherManagement().chkFinal().setVisible(form.getLocalContext().getcurrentOutcomeVoIsNotNull()
					&& form.getLocalContext().getcurrentOutcomeVo().getCatsFinalReportStatus() == null);
			form.lyr1().tabFurtherManagement().lblFinal().setVisible(form.getLocalContext().getcurrentOutcomeVoIsNotNull()
					&& form.getLocalContext().getcurrentOutcomeVo().getCatsFinalReportStatus() == null);

			form.lyr1().tabActiveMonitoring().chkAMGFinalReport().setVisible(form.getLocalContext().getcurrentOutcomeVoIsNotNull()
					&& form.getLocalContext().getcurrentOutcomeVo().getCatsFinalReportStatus() == null);
			form.lyr1().tabActiveMonitoring().lblAMFinal().setVisible(form.getLocalContext().getcurrentOutcomeVoIsNotNull()
					&& form.getLocalContext().getcurrentOutcomeVo().getCatsFinalReportStatus() == null);

			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.EDIT);
			
			if (form.lyr1().tabActiveMonitoring().isHeaderVisible())
				showHideActiveMonitoringAuthoringInfo();
		}
		else if (form.getMode().equals(FormMode.VIEW))
		{
			enableOnwardReferralCompletedButton();
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.VIEW);
		}
		
		updateContextMenu();
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onCmbDischargeTypeValueChanged() throws PresentationLogicException 
	{		
		manageDischargeTypeValueChanged();	
	}

	private void manageDischargeTypeValueChanged() 
	{
		//WDEV-14180 
		if (form.lyr1().tabDischargePatient().cmbDischargeType().getValue() == null)
		{
			displayDischargePatientTab(false, false, false);
		}
		
		if (form.lyr1().tabDischargePatient().cmbDischargeType().getValue() != null 
			&& form.lyr1().tabDischargePatient().cmbDischargeType().getValue().equals(DischargeType.GP))
			displayDischargePatientTab(false, true, false);
		else if (form.lyr1().tabDischargePatient().cmbDischargeType().getValue() != null 
			&& form.lyr1().tabDischargePatient().cmbDischargeType().getValue().equals(DischargeType.SEC_CARE))
		{
			if (form.getLocalContext().getAllSuppliers() == null && form.getMode().equals(FormMode.EDIT))
				loadSuppliers();
			displayDischargePatientTab(true, false, false);
		}
		else if (form.lyr1().tabDischargePatient().cmbDischargeType().getValue() != null 
			&& form.lyr1().tabDischargePatient().cmbDischargeType().getValue().equals(DischargeType.OTHER))
			displayDischargePatientTab(false, false, true);
	}

	private void loadSuppliers()
	{
		OrgLiteVoCollection voColl = domain.listAllSuppliers();
		for (int i = 0 ; voColl != null && i <voColl.size() ; i++)
			form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().newRow(voColl.get(i), voColl.get(i).getName());
		
		form.getLocalContext().setAllSuppliers(voColl);
	}

	@Override
	protected void onRadioButtonGrpDischPatientValueChanged() throws PresentationLogicException 
	{
		if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatYES)) 
		{
			manageRadioButtonGrpDischPatientValueChanged(); //WDEV-14102 
		}
		else if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatNO))
		{			
			manageRadioButtonGrpDischPatientValueChanged();
		}
		else if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatActive))
		{			
			manageRadioButtonGrpDischPatientValueChanged();
		}
		
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatYES, false);				
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatNO, false);				
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatActive, false);
		}

	}

	private void manageRadioButtonGrpDischPatientValueChanged() 
	{
		boolean bAlwaysShowFurtherTab = false;
		boolean bAlwaysShowDischargeTab = false;
		boolean bAlwaysShowActiveTab = false;
		
		if (form.getLocalContext().getcurrentOutcomeVoIsNotNull()
			&& form.getLocalContext().getcurrentOutcomeVo().getFurtherManagementDetailsIsNotNull()
			&& form.getLocalContext().getcurrentOutcomeVo().getFurtherManagementDetails().size() > 0)
			bAlwaysShowFurtherTab = true;
		
		if (form.getLocalContext().getcurrentOutcomeVoIsNotNull()
			&& form.getLocalContext().getcurrentOutcomeVo().getReferralDischargeIsNotNull())
			bAlwaysShowDischargeTab = true;
		
		if (form.getLocalContext().getcurrentOutcomeVoIsNotNull()
			&& form.getLocalContext().getcurrentOutcomeVo().getActiveMonitoringIsNotNull())
			bAlwaysShowActiveTab = true;

		if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatYES))
		{
			form.lyr1().tabFurtherManagement().setHeaderEnabled(bAlwaysShowFurtherTab);
			form.lyr1().tabFurtherManagement().setHeaderVisible(bAlwaysShowFurtherTab);

			form.lyr1().tabActiveMonitoring().setHeaderEnabled(bAlwaysShowActiveTab);
			form.lyr1().tabActiveMonitoring().setHeaderVisible(bAlwaysShowActiveTab);

			form.lyr1().tabDischargePatient().setHeaderVisible(true);
			form.lyr1().tabDischargePatient().setVisible(true);			
			form.lyr1().tabDischargePatient().cc2().initializeComponent();
			form.lyr1().tabDischargePatient().setHeaderEnabled(true);
			form.lyr1().tabDischargePatient().setHeaderVisible(true);
			form.lyr1().tabDischargePatient().cmbDischargeType().setValue(null);
			form.lyr1().tabDischargePatient().dteDischarge().setValue(null);
			
			form.lyr1().tabDischargePatient().cc2().setEnabledAuthoringHCP(isReferralDischarged() && !FormMode.EDIT.equals(form.getMode()) ? false : true);		// WDEV-10533
			form.lyr1().tabDischargePatient().cc2().setEnabledDateTime(isReferralDischarged() && !FormMode.EDIT.equals(form.getMode()) ? false : true);			// WDEV-10533
			form.lyr1().tabDischargePatient().cc2().setIsRequiredPropertyToControls(true);
			
			displayDischargePatientTab(false, false, false);
			form.lyr1().showtabDischargePatient();
			enableFurtherManagementTab(false);
			// WDEV-11251, WDEV-11250
			// If the referral is not yet discharged or further management save modification that take place on 'Active Monitoring' tab
			// else don't allow editing on 'Active Monitoring' tab
			enableActiveManagementTab(!isReferralDischarged()/* && !isReferralFurtherManagement()*/);	
			updateContextMenu();

			showHideActiveMonitoringAuthoringInfo();

			if (form.getLocalContext().getcurrentOutcomeVo() == null
				|| (form.getLocalContext().getcurrentOutcomeVoIsNotNull()
				&& form.getLocalContext().getcurrentOutcomeVo().getReferralDischarge() == null) )
				form.lyr1().tabDischargePatient().dteDischarge().setValue(form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged() ? new Date() : null);

		}
		else if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatNO))
		{
			form.lyr1().tabFurtherManagement().setHeaderVisible(true);
			form.lyr1().tabFurtherManagement().setHeaderEnabled(true);
			form.lyr1().tabFurtherManagement().setVisible(true);
			
			form.lyr1().tabDischargePatient().setHeaderEnabled(bAlwaysShowDischargeTab);
			form.lyr1().tabDischargePatient().setHeaderVisible(bAlwaysShowDischargeTab);
			
			form.lyr1().tabActiveMonitoring().setHeaderEnabled(bAlwaysShowActiveTab);
			form.lyr1().tabActiveMonitoring().setHeaderVisible(bAlwaysShowActiveTab);

		//	form.lyr1().tabFurtherManagement().ccA().initializeComponent();
			form.lyr1().tabFurtherManagement().grdFurther().getRows().clear();
			displayFurtherManagementTab(false, false, form.lyr1().tabFurtherManagement().Group2().getValue(), false);
			
			form.lyr1().tabFurtherManagement().lblNoTLTSessions().setVisible(false);
			form.lyr1().tabFurtherManagement().lblTLTNotes().setVisible(false );
			form.lyr1().tabFurtherManagement().lblTLTNotes2().setVisible(false );
			form.lyr1().tabFurtherManagement().intTlltSessions().setVisible(false );
			form.lyr1().tabFurtherManagement().cmbTLTType().setVisible(false);
			form.lyr1().tabFurtherManagement().lblTLTType().setVisible(false);
			form.lyr1().tabFurtherManagement().txtTLTNotes().setVisible(false);
			form.lyr1().tabFurtherManagement().cmbReasonNO().setVisible(false);
			form.lyr1().tabFurtherManagement().lblApptReason().setVisible(false);
			form.lyr1().tabFurtherManagement().lblPROCEDURE().setVisible(false);
			form.lyr1().tabFurtherManagement().qmbProcedure().setVisible(false);
			form.lyr1().tabFurtherManagement().lblNoOfDaysNO().setVisible(false);
			form.lyr1().tabFurtherManagement().intNoOfDaysNO().setVisible(false);				
			form.lyr1().tabFurtherManagement().lblMI1().setVisible(false);
			form.lyr1().tabFurtherManagement().lblMI2().setVisible(false);
			form.lyr1().tabFurtherManagement().lblMI3().setVisible(false);
			form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setVisible(false);
			form.lyr1().tabFurtherManagement().intIncompNoDays().setVisible(false);
			
			
			
			form.lyr1().tabFurtherManagement().ccA().setEnabledAuthoringHCP(false);
			form.lyr1().tabFurtherManagement().ccA().setEnabledDateTime(false);
			form.lyr1().tabFurtherManagement().ccA().setIsRequiredPropertyToControls(true);
						
			form.lyr1().tabFurtherManagement().btnOk().setVisible(false);
			form.lyr1().tabFurtherManagement().btnCancelEdit().setVisible(false);
			
			form.lyr1().showtabFurtherManagement();
			enableDischargePatientTab(false);

			// WDEV-11250
			// If the referral is not yet discharged or further management save modification that take place on 'Active Monitoring' tab
			// else don't allow editing on 'Active Monitoring' tab
			enableActiveManagementTab(!isReferralDischarged()/* && !isReferralFurtherManagement()*/);	
			
			form.getLocalContext().setInvalidOnwardReferral(null);
			
			updateContextMenu();
		}
		else if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatActive))
		{
			clearActiveManagementTab();
			form.lyr1().tabDischargePatient().setHeaderEnabled(bAlwaysShowDischargeTab);
			form.lyr1().tabDischargePatient().setHeaderVisible(bAlwaysShowDischargeTab);

			form.lyr1().tabFurtherManagement().setHeaderEnabled(bAlwaysShowFurtherTab);
			form.lyr1().tabFurtherManagement().setHeaderVisible(bAlwaysShowFurtherTab);

			form.lyr1().tabActiveMonitoring().setHeaderVisible(true);
			form.lyr1().tabActiveMonitoring().setHeaderEnabled(true);
			form.lyr1().tabActiveMonitoring().setVisible(true);
			
			if (form.getMode().equals(FormMode.EDIT)
				&& (form.getLocalContext().getcurrentOutcomeVo() == null
						|| (form.getLocalContext().getcurrentOutcomeVoIsNotNull()
								&& form.getLocalContext().getcurrentOutcomeVo().getCatsFinalReportStatus() == null)))
			{
				form.lyr1().tabActiveMonitoring().chkAMGFinalReport().setVisible(true);
				form.lyr1().tabActiveMonitoring().lblAMFinal().setVisible(true);
			}

			form.lyr1().tabActiveMonitoring().ccAMAuthoring().initializeComponent();

			//displayFurtherManagementTab(false, false, form.lyr1().tabFurtherManagement().Group2().getValue(), false);
			
			showHideActiveMonitoringAuthoringInfo();
						
			form.lyr1().showtabActiveMonitoring();
			enableDischargePatientTab(false);
			enableFurtherManagementTab(false);
			enableActiveManagementTab(form.getMode().equals(FormMode.EDIT) && !isReferralDischarged()/* && !isReferralFurtherManagement()*/);
			
			form.getLocalContext().setInvalidOnwardReferral(null);
			
			updateContextMenu();
		}

	}

	private void showHideActiveMonitoringAuthoringInfo()
	{
		if ( form.getMode().equals(FormMode.EDIT) //WDEV-15475  
			&& ( ! form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatYES))
			&&( (engine.hasRight(AppRight.AUTHORISED_DATA_CORRECTOR)
					&& form.getLocalContext().getcurrentOutcomeVoIsNotNull()
					&& form.getLocalContext().getcurrentOutcomeVo().getActiveMonitoringIsNotNull()
					&& form.getLocalContext().getcurrentOutcomeVo().getActiveMonitoring().getID_ActiveMonitoringIsNotNull())
				|| form.getLocalContext().getcurrentOutcomeVo() == null
				|| form.getLocalContext().getcurrentOutcomeVo().getActiveMonitoring() == null
				|| (form.getLocalContext().getcurrentOutcomeVo().getActiveMonitoringIsNotNull()
						&& form.getLocalContext().getcurrentOutcomeVo().getActiveMonitoring().getID_ActiveMonitoring() == null)) ) 
			{
				form.lyr1().tabActiveMonitoring().ccAMAuthoring().setEnabledAuthoringHCP(isReferralDischarged() ? false : true);
				form.lyr1().tabActiveMonitoring().ccAMAuthoring().setEnabledDateTime(isReferralDischarged() ? false : true);
				form.lyr1().tabActiveMonitoring().ccAMAuthoring().setIsRequiredPropertyToControls(true);
			}
			else
			{
				form.lyr1().tabActiveMonitoring().ccAMAuthoring().setEnabledAuthoringHCP(false);
				form.lyr1().tabActiveMonitoring().ccAMAuthoring().setEnabledDateTime(false);
				form.lyr1().tabActiveMonitoring().ccAMAuthoring().setIsRequiredPropertyToControls(false);
			}
	}

	private void displayDischargePatientTab(boolean bOnward, boolean bFurther, boolean bOther) 
	{
		form.lyr1().tabDischargePatient().lblOnrefReason1().setVisible(bOnward);
		form.lyr1().tabDischargePatient().lblOnrefReason2().setVisible(bOnward);
		form.lyr1().tabDischargePatient().cmbOnwardRefReason().setVisible(bOnward);
		form.lyr1().tabDischargePatient().lblOnwardReferralInstructions().setVisible(bOnward);
		form.lyr1().tabDischargePatient().txtOnwardReferralInstructions().setVisible(bOnward);
		
		// WDEV-12345 - Show the "Copy To ..." check-boxes only for onward referral
		form.lyr1().tabDischargePatient().chkCopyToGP().setVisible(bOnward);
		form.lyr1().tabDischargePatient().chkCopyToPatient().setVisible(bOnward);
		form.lyr1().tabDischargePatient().chkCopyToSecondaryCare().setVisible(bOnward);
		
		form.lyr1().tabDischargePatient().txtOnwardReferralInstructions().setValue(null);
		form.lyr1().tabDischargePatient().cmbOnwardRefReason().setValue(null);//WDEV-14180
		form.lyr1().tabDischargePatient().chkCopyToGP().setValue(false);//WDEV-14180
		form.lyr1().tabDischargePatient().chkCopyToPatient().setValue(false);//WDEV-14180
		form.lyr1().tabDischargePatient().chkCopyToSecondaryCare().setValue(false);//WDEV-14180
		form.lyr1().tabDischargePatient().lblSecond().setVisible(bOnward);
		form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().setVisible(bOnward);
		form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().setValue(null);		
		form.lyr1().tabDischargePatient().lblOTHER().setVisible(bOther);
		form.lyr1().tabDischargePatient().cmbOther().setVisible(bOther);
		form.lyr1().tabDischargePatient().cmbOther().setValue(null);
	
		boolean mode = form.getMode().equals(FormMode.EDIT);// && ! isReferralDischarged();
		if (bOnward)
		{
			form.lyr1().tabDischargePatient().cmbOnwardRefReason().setEnabled(mode);
			form.lyr1().tabDischargePatient().txtOnwardReferralInstructions().setEnabled(mode);
			form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().setEnabled(mode);
			
			// WDEV-12345 - Enable the "Copy To ..." check-boxes for EDIT mode
			form.lyr1().tabDischargePatient().chkCopyToGP().setEnabled(mode);
			form.lyr1().tabDischargePatient().chkCopyToPatient().setEnabled(mode);
			form.lyr1().tabDischargePatient().chkCopyToSecondaryCare().setEnabled(mode);
		}

		if (bOther)
		{
			form.lyr1().tabDischargePatient().cmbOther().setEnabled(mode);
		}

		form.lyr1().tabDischargePatient().cmbDischargeType().setEnabled(mode);
		form.lyr1().tabDischargePatient().dteDischarge().setEnabled(mode);

		//clearFurtherManagementTab();
	}
	
	private void clearFurtherManagementTab() 
	{
		form.lyr1().tabFurtherManagement().txtFurtherManagement().setValue(null);
		form.lyr1().tabFurtherManagement().Group2().setValue(Group2Enumeration.None);
		form.lyr1().tabFurtherManagement().txtTLTNotes().setValue(null);
		form.lyr1().tabFurtherManagement().qmbProcedure().setValue(null);
		form.lyr1().tabFurtherManagement().intNoOfDaysNO().setValue(null);
		form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setValue(null);
		form.lyr1().tabFurtherManagement().intIncompNoDays().setValue(null);
		form.lyr1().tabFurtherManagement().intTlltSessions().setValue(null);
		form.lyr1().tabFurtherManagement().cmbTLTType().setValue(null);
		form.lyr1().tabFurtherManagement().chkFinal().setValue(null);
		form.lyr1().tabFurtherManagement().cmbReasonNO().setValue(null); //WDEV-13798
	}
	
	private void enableFurtherManagementTab(boolean isEnabled) 
	{
		form.lyr1().tabFurtherManagement().txtFurtherManagement().setEnabled(isEnabled);
		//form.lyr1().tabFurtherManagement().Group2().setValue(Group2Enumeration.rdoTlt);
		form.lyr1().tabFurtherManagement().txtTLTNotes().setEnabled(isEnabled);
		form.lyr1().tabFurtherManagement().qmbProcedure().setEnabled(isEnabled);
		form.lyr1().tabFurtherManagement().intNoOfDaysNO().setEnabled(isEnabled);
		form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setEnabled(isEnabled);
		form.lyr1().tabFurtherManagement().intIncompNoDays().setEnabled(isEnabled);
		form.lyr1().tabFurtherManagement().intTlltSessions().setEnabled(isEnabled);
		form.lyr1().tabFurtherManagement().cmbTLTType().setEnabled(isEnabled);
	}

	private void displayFurtherManagementTab(boolean bProc, boolean bMI, Group2Enumeration enumeration, boolean bEnable) 
	{
		if (form.getLocalContext().getcurrentOutcomeVoIsNotNull()
			&& form.getLocalContext().getcurrentOutcomeVo().getID_ReferralOutcomeIsNotNull()
			&& form.getLocalContext().getcurrentOutcomeVo().getReferralDischargeIsNotNull())
			bEnable = false;
		
		boolean bTLT = false;
	
		if (enumeration.equals(Group2Enumeration.rdoTlt))
			bTLT = true;
		else if (enumeration.equals(Group2Enumeration.rdoFurther))
			bTLT = false;
		else if (enumeration.equals(Group2Enumeration.rdoSpecial))
		{
			form.lyr1().tabFurtherManagement().lblNoTLTSessions().setVisible(false);
			form.lyr1().tabFurtherManagement().lblTLTNotes().setVisible(false );
			form.lyr1().tabFurtherManagement().lblTLTNotes2().setVisible(false );
			form.lyr1().tabFurtherManagement().intTlltSessions().setVisible(false );
			form.lyr1().tabFurtherManagement().cmbTLTType().setVisible(false);
			form.lyr1().tabFurtherManagement().lblTLTType().setVisible(false);
			form.lyr1().tabFurtherManagement().txtTLTNotes().setVisible(false);
			form.lyr1().tabFurtherManagement().cmbReasonNO().setVisible(false);
			form.lyr1().tabFurtherManagement().lblApptReason().setVisible(false);
			form.lyr1().tabFurtherManagement().lblPROCEDURE().setVisible(false);
			form.lyr1().tabFurtherManagement().qmbProcedure().setVisible(false);
			form.lyr1().tabFurtherManagement().lblNoOfDaysNO().setVisible(false);
			form.lyr1().tabFurtherManagement().intNoOfDaysNO().setVisible(false);
				
			form.lyr1().tabFurtherManagement().lblMI1().setVisible(false);
			form.lyr1().tabFurtherManagement().lblMI2().setVisible(false);
			form.lyr1().tabFurtherManagement().lblMI3().setVisible(false);
			form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setVisible(false);
			form.lyr1().tabFurtherManagement().intIncompNoDays().setVisible(false);
			
			form.lyr1().tabFurtherManagement().intTlltSessions().setValue(null);
			form.lyr1().tabFurtherManagement().intTlltSessions().setValue(null);
			form.lyr1().tabFurtherManagement().cmbTLTType().setValue(null);
			form.lyr1().tabFurtherManagement().txtTLTNotes().setValue(null);
			form.lyr1().tabFurtherManagement().qmbProcedure().setValue(null);
			form.lyr1().tabFurtherManagement().intNoOfDaysNO().setValue(null);
			form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setValue(null);
			form.lyr1().tabFurtherManagement().intIncompNoDays().setValue(null);

			clearDischargePatientTab();
			boolean mode2 = form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged() && form.getLocalContext().getbFMDEditable();
			form.lyr1().tabFurtherManagement().txtFurtherManagement().setEnabled(mode2);
			form.lyr1().tabFurtherManagement().chkFinal().setEnabled(mode2);
			form.lyr1().tabFurtherManagement().Group2().setEnabled(mode2);

			if (mode2)
			{
				form.getContextMenus().hideAllGenericGridMenuItems();
				form.lyr1().tabFurtherManagement().grdFurther().setEnabled(false);
			}
			else
			{
				updateContextMenu();
				form.lyr1().tabFurtherManagement().grdFurther().setEnabled(true);
			}
			return;
		}
		
		form.lyr1().tabFurtherManagement().lblNoTLTSessions().setVisible(bTLT);
		form.lyr1().tabFurtherManagement().lblTLTNotes().setVisible(bTLT );
		form.lyr1().tabFurtherManagement().lblTLTNotes2().setVisible(bTLT );
		form.lyr1().tabFurtherManagement().lblTLTType().setVisible(bTLT );
		form.lyr1().tabFurtherManagement().intTlltSessions().setVisible(bTLT );
		if (! bTLT)
			form.lyr1().tabFurtherManagement().intTlltSessions().setValue(null);
		form.lyr1().tabFurtherManagement().cmbTLTType().setVisible(bTLT );
		if (! bTLT)
			form.lyr1().tabFurtherManagement().cmbTLTType().setValue(null);
		
		form.lyr1().tabFurtherManagement().txtTLTNotes().setVisible(bTLT);
		form.lyr1().tabFurtherManagement().lblApptReason().setVisible(!bTLT);		
		form.lyr1().tabFurtherManagement().lblPROCEDURE().setVisible(!bTLT);
		if (! bTLT)
			form.lyr1().tabFurtherManagement().txtTLTNotes().setValue(null);

		if (enumeration.equals(Group2Enumeration.rdoTlt))
			form.lyr1().tabFurtherManagement().Group2().setValue(Group2Enumeration.rdoTlt);
		else if (enumeration.equals(Group2Enumeration.rdoFurther))
			form.lyr1().tabFurtherManagement().Group2().setValue(Group2Enumeration.rdoFurther);
		else if (enumeration.equals(Group2Enumeration.rdoSpecial))
			form.lyr1().tabFurtherManagement().Group2().setValue(Group2Enumeration.rdoSpecial);
	
		form.lyr1().tabFurtherManagement().cmbReasonNO().setVisible(bTLT ? false : true);
		form.lyr1().tabFurtherManagement().lblApptReason().setVisible(bTLT ? false : true);
		
		form.lyr1().tabFurtherManagement().lblPROCEDURE().setVisible(bProc);
		//form.lyr1().tabFurtherManagement().lblApptReason().setVisible(!bTLT && !bProc &&!bMI);
		
		form.lyr1().tabFurtherManagement().qmbProcedure().setVisible(bProc);
		form.lyr1().tabFurtherManagement().qmbProcedure().setValue(null);

		form.lyr1().tabFurtherManagement().lblNoOfDaysNO().setVisible(!bProc && !bMI ? false : true);
		form.lyr1().tabFurtherManagement().intNoOfDaysNO().setVisible(bProc);
		form.lyr1().tabFurtherManagement().intNoOfDaysNO().setValue(null);
		
		form.lyr1().tabFurtherManagement().lblMI1().setVisible(bMI && (bTLT ? false : true));
		form.lyr1().tabFurtherManagement().lblMI2().setVisible(bMI && (bTLT ? false : true));
		form.lyr1().tabFurtherManagement().lblMI3().setVisible(bMI && (bTLT ? false : true));
		form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setVisible(bMI && (bTLT ? false : true));
		form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setValue(null);
		form.lyr1().tabFurtherManagement().intIncompNoDays().setVisible(bMI && (bTLT ? false : true));
		form.lyr1().tabFurtherManagement().intIncompNoDays().setValue(null);
		
		boolean mode = form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged() && form.getLocalContext().getbFMDEditable();
		if (bTLT )
		{
			form.lyr1().tabFurtherManagement().intTlltSessions().setEnabled(mode);
			form.lyr1().tabFurtherManagement().cmbTLTType().setEnabled(mode);
			form.lyr1().tabFurtherManagement().txtTLTNotes().setEnabled(mode);
		}
		if (bProc)
		{
			form.lyr1().tabFurtherManagement().qmbProcedure().setEnabled(mode);
			form.lyr1().tabFurtherManagement().intNoOfDaysNO().setEnabled(mode);
		}
		if (bMI)
		{
			form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setEnabled(mode);
			form.lyr1().tabFurtherManagement().intIncompNoDays().setEnabled(mode);
		}

		form.lyr1().tabFurtherManagement().txtFurtherManagement().setEnabled(mode);
		form.lyr1().tabFurtherManagement().cmbReasonNO().setEnabled(mode);
		form.lyr1().tabFurtherManagement().Group2().setEnabled(mode);
		form.lyr1().tabFurtherManagement().chkFinal().setEnabled(mode);

		if (mode)
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
			form.lyr1().tabFurtherManagement().grdFurther().setEnabled(false);
		}
		else
		{
			updateContextMenu();
			form.lyr1().tabFurtherManagement().grdFurther().setEnabled(true);
		}


		//clearDischargePatientTab();
	}

	private boolean isReferralDischarged()
	{
		if (form.getLocalContext().getCurrentCatsReferralIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatusIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatusIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.DISCHARGED) )
			return true;
		else
			return false;		
	}
	
	/**
	 * WDEV-11250
	 * Function used to check if the current referral has the status FURTHER MANAGEMENT REQUIRED
	 * 
	 * @return
	 * - true if the referral has the status FURTHER_MANAGEMNT, false otherwise
	 */
//	private boolean isReferralFurtherManagement()
//	{
//		if (form.getLocalContext().getCurrentCatsReferralIsNotNull()
//				&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatusIsNotNull()
//				&& ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED.equals(form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatus()))
//		{
//			return true;
//		}
//		
//		return false;
//	}
	
	private boolean isActiveMonitoring()
	{
		if (form.getLocalContext().getCurrentCatsReferralIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatusIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatusIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.ACTIVE_MONITORING) )
			return true;
		else
			return false;		
	}
	
	private void clearDischargePatientTab() 
	{
		form.lyr1().tabDischargePatient().cmbOnwardRefReason().setValue(null);
		form.lyr1().tabDischargePatient().txtOnwardReferralInstructions().setValue(null);
		form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().setValue(null);
		form.lyr1().tabDischargePatient().cmbOther().setValue(null);
		
		// WDEV-12345
		form.lyr1().tabDischargePatient().chkCopyToGP().setValue(null);
		form.lyr1().tabDischargePatient().chkCopyToPatient().setValue(null);
		form.lyr1().tabDischargePatient().chkCopyToSecondaryCare().setValue(null);
	}

	private void enableDischargePatientTab(boolean isEnable) 
	{
		form.lyr1().tabDischargePatient().cmbOnwardRefReason().setEnabled(isEnable);
		form.lyr1().tabDischargePatient().txtOnwardReferralInstructions().setEnabled(isEnable);
		form.lyr1().tabDischargePatient().cmbSecondaryOrganisation().setEnabled(isEnable);
		form.lyr1().tabDischargePatient().cmbOther().setEnabled(isEnable);
		
		// WDEV-12345
		form.lyr1().tabDischargePatient().chkCopyToGP().setEnabled(isEnable);
		form.lyr1().tabDischargePatient().chkCopyToPatient().setEnabled(isEnable);
		form.lyr1().tabDischargePatient().chkCopyToSecondaryCare().setEnabled(isEnable);
	}
	
	private void clearActiveManagementTab() 
	{
		form.lyr1().tabActiveMonitoring().ccAMAuthoring().setValue(null);
		form.lyr1().tabActiveMonitoring().dtimAMStart().setValue(null);
		form.lyr1().tabActiveMonitoring().cmbAMType().setValue(null);
		form.lyr1().tabActiveMonitoring().intAMPeriod().setValue(null);
		form.lyr1().tabActiveMonitoring().dteAMApptBy().setValue(null);
		form.lyr1().tabActiveMonitoring().txtAMComments().setValue(null);
		form.lyr1().tabActiveMonitoring().chkAMGFinalReport().setValue(null);
	}
	private void enableActiveManagementTab(boolean isEnable) 
	{
		form.lyr1().tabActiveMonitoring().dtimAMStart().setEnabled(isEnable);
		form.lyr1().tabActiveMonitoring().cmbAMType().setEnabled(isEnable);
		form.lyr1().tabActiveMonitoring().intAMPeriod().setEnabled(isEnable);
		form.lyr1().tabActiveMonitoring().dteAMApptBy().setEnabled(isEnable);
		form.lyr1().tabActiveMonitoring().txtAMComments().setEnabled(isEnable);
		form.lyr1().tabActiveMonitoring().chkAMGFinalReport().setEnabled(isEnable);
		//wdev-11294
		form.getLocalContext().setEnableActiveMonitoring(isEnable);
		//---------
	}
	
	@Override
	protected void onCmbReasonNOValueChanged() throws PresentationLogicException 
	{
		manageReasonNOValueChanged();
	}

	private void manageReasonNOValueChanged() 
	{
		if (form.lyr1().tabFurtherManagement().cmbReasonNO().getValue() != null 
			&& form.lyr1().tabFurtherManagement().cmbReasonNO().getValue().equals(AnotherConsultationAppt.MED_INCOMPLETE))
			displayFurtherManagementTab(false, true, form.lyr1().tabFurtherManagement().Group2().getValue(), true);
		else if (form.lyr1().tabFurtherManagement().cmbReasonNO().getValue() != null 
			&& form.lyr1().tabFurtherManagement().cmbReasonNO().getValue().equals(AnotherConsultationAppt.PROCEDURE))
			displayFurtherManagementTab(true, false, form.lyr1().tabFurtherManagement().Group2().getValue(), true);
	}
	
	@Override
	protected void onQmbProcedureTextSubmited(String value) throws PresentationLogicException 
	{
		ServiceShortVo voServ = form.getLocalContext().getCurrentService();
		
		form.lyr1().tabFurtherManagement().qmbProcedure().clear();
		ProcedureLiteVoCollection voColl = null;
		try 
		{
			voColl = domain.listHotlistProcedureShort(value, voServ != null ? voServ.getSpecialty() : null);
		}
		catch (DomainRuntimeException e)
		{
			String a[]={e.getMessage()};
			engine.showErrors(a);
			return;
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
	
		for (int i = 0 ; voColl != null && i < voColl.size() ;i++)
			form.lyr1().tabFurtherManagement().qmbProcedure().newRow(voColl.get(i), voColl.get(i).getProcedureName(), voColl.get(i).getIsActiveIsNotNull() && !voColl.get(i).getIsActive().booleanValue() ? Color.Gray : Color.Default);

		if (voColl == null || voColl.size() == 0)
		{
			engine.showMessage("No Procedures found for you search criteria.", "No Data Found", MessageButtons.OK, MessageIcon.INFORMATION);
			return;
		}
		
		if (voColl.size() == 1)
			form.lyr1().tabFurtherManagement().qmbProcedure().setValue(voColl.get(0));
		else if (voColl.size() > 1)
			form.lyr1().tabFurtherManagement().qmbProcedure().showOpened();

			
	}
	private void initializeService() 
	{
		if (form.getLocalContext().getCurrentService() == null)
		{
			form.getLocalContext().setCurrentService(domain.getCatsReferralService(form.getGlobalContext().RefMan.getCatsReferral()));
		}		
	}

	private void anotherValueChanged() 
	{
		if (form.lyr1().tabFurtherManagement().cmbReasonNO().getValue() != null 
			&& form.lyr1().tabFurtherManagement().cmbReasonNO().getValue().equals(AnotherConsultationAppt.MED_INCOMPLETE))
			displayFurtherManagementTab(false, true, form.lyr1().tabFurtherManagement().Group2().getValue(), true);
		else if (form.lyr1().tabFurtherManagement().cmbReasonNO().getValue() != null 
			&& form.lyr1().tabFurtherManagement().cmbReasonNO().getValue().equals(AnotherConsultationAppt.PROCEDURE))
			displayFurtherManagementTab(true, false, form.lyr1().tabFurtherManagement().Group2().getValue(), true);
		else
			displayFurtherManagementTab(false, false, form.lyr1().tabFurtherManagement().Group2().getValue(), true);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.VIEW);
		form.btnEdit().setVisible(true);
		initialize(false,null,null,null);
		manageRadioButtonGrpDischPatientValueChanged();
		
		if(form.getLocalContext().getcurrentOutcomeVo() != null
			&& form.getLocalContext().getcurrentOutcomeVo().getID_ReferralOutcome() == null)
			form.getLocalContext().setcurrentOutcomeVo(null);

		populateScreenFromData(form.getLocalContext().getcurrentOutcomeVo());

		fireOnFormModeChange(FormMode.VIEW);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		ReferralOutcomeVo voOutcome = populateAndValidateRefferalOutcome();
		if (voOutcome == null)
			return;
		
		form.getLocalContext().setcurrentOutcomeVo(voOutcome);
		
		
		if (isReferralDischarged()
			&& (form.getLocalContext().getUndoDischarge() == null
				|| (form.getLocalContext().getUndoDischargeIsNotNull()
					&& !form.getLocalContext().getUndoDischarge())) )
		{
			setShowTLTContext();

			save();
			return;
		}
		
		if (isActiveMonitoring()
			&& form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatActive))
		{
			save();
			return;
		}	
			
		int msgBoxID = 0;
		if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatYES)) 
		{			
			msgBoxID = engine.showMessage("Are you sure you wish to discharge this patient ", "Discharge Patient" , MessageButtons.YESNO);			
		}
		else if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatNO)) 
		{
			msgBoxID = engine.showMessage("Are you sure you wish to bring this patient back for further management", "Further Management " , MessageButtons.YESNO);	
		}	
		else if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatActive)) 
		{
			msgBoxID = engine.showMessage("Are you sure you wish to start Active Monitoring", "Active Monitoring " , MessageButtons.YESNO);	
		}	
		form.getLocalContext().setMessageBoxId(msgBoxID);
	}
	
	private void save() 
	{
		ReferralOutcomeVo voOutcome = form.getLocalContext().getcurrentOutcomeVo();
		if (voOutcome == null) 
			return;
		
		try 
		{
			CatsReferralWizardVo currentCatsReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			
			// WDEV-10533 - Check record version and simulate StaleObject
			//if (currentCatsReferral.getVersion_CatsReferral() > form.getGlobalContext().RefMan.getCatsReferral().getVersion_CatsReferral())
			if(currentCatsReferral != null && currentCatsReferral.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.equals(currentCatsReferral.getCurrentStatus().getReferralStatus()))//	WDEV-15465
			{
				form.getGlobalContext().RefMan.setCatsReferral(currentCatsReferral);
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.setMode(FormMode.VIEW);
				initialize(false, null, null, null);	
				return;
			}
			
			form.getLocalContext().setCurrentCatsReferral(currentCatsReferral);
			
			if ( (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatYES)))
			{
				// WDEV-11251
				// When a CatsReferral is discharged always generate the report
				if(currentCatsReferral.getIsFinalReportRequired() == null)
				{
					currentCatsReferral.setIsFinalReportRequired(ReportStatus.REQUIRED);
					voOutcome.setCatsFinalReportStatus(ReportStatus.REQUIRED);
				}	
			}
			else if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatNO))
			{
				// WDEV-11250
				// When a CatsReferral is saved as FURTHER MANAGEMTN REQUIRED generate a report
				// if so required in 'Further Management' tab of 'Active Monitoring' tab
				if (form.lyr1().tabFurtherManagement().chkFinal().getValue()
					|| form.lyr1().tabActiveMonitoring().chkAMGFinalReport().getValue())
				{
					currentCatsReferral.setIsFinalReportRequired(ReportStatus.REQUIRED);
					voOutcome.setCatsFinalReportStatus(ReportStatus.REQUIRED);
				}	
			}
			else if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatActive))
			{
				if(form.lyr1().tabActiveMonitoring().chkAMGFinalReport().getValue())
				{
					currentCatsReferral.setIsFinalReportRequired(ReportStatus.REQUIRED);
					voOutcome.setCatsFinalReportStatus(ReportStatus.REQUIRED);
				}	
			}
			
			String[] str = voOutcome.validate();			
			if (str != null && str.length > 0)
			{
				engine.showErrors(str);			
				return ;
			}
						
			form.getLocalContext().setcurrentOutcomeVo(domain.saveReferralOutcome(voOutcome));
			// WDEV-12787 - Set local variable reference to what is returned from domain
			// Domain will returned a newly created record, so the local context and 'voOutcome' will not point to the same object
			voOutcome = form.getLocalContext().getcurrentOutcomeVo();
			
			if (form.getLocalContext().getcurrentOutcomeVoIsNotNull())
			{																						
				if (voOutcome.getReferralDischargeIsNotNull() && form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatYES))
				{								
					CatsReferralStatusVoCollection voStatusColl = currentCatsReferral.getStatusHistory().sort(SortOrder.DESCENDING);
				//	if (!voStatusColl.get(0).getReferralStatus().equals(ReferralApptStatus.DISCHARGED))
				//	{					
						if (voOutcome.getReferralDischargeIsNotNull()
							&& voOutcome.getReferralDischarge().getDischargeTypeIsNotNull()
							&& ( voOutcome.getReferralDischarge().getDischargeType().equals(DischargeType.SEC_CARE)
								|| voOutcome.getReferralDischarge().getDischargeType().equals(DischargeType.OTHER)) )
						{	
							updateCatsReferralStatusAndDischargeDateAndReportFlags(ReferralApptStatus.DISCHARGED, voStatusColl.get(0).getReferralStatus(), true, false, voOutcome, currentCatsReferral);
						}
						else if (voOutcome.getReferralDischargeIsNotNull()
								&& voOutcome.getReferralDischarge().getDischargeTypeIsNotNull()
								&& voOutcome.getReferralDischarge().getDischargeType().equals(DischargeType.GP) )
							{
								updateCatsReferralStatusAndDischargeDateAndReportFlags(ReferralApptStatus.DISCHARGED, voStatusColl.get(0).getReferralStatus(), true, true, voOutcome, currentCatsReferral);
							}
						else
							updateCatsReferralStatusAndDischargeDateAndReportFlags(ReferralApptStatus.DISCHARGED, voStatusColl.get(0).getReferralStatus(), false, false, voOutcome, currentCatsReferral);
						
						
						if (voOutcome.getReferralDischargeIsNotNull()) 
						{
							if (voOutcome.getReferralDischarge().getDischargeTypeIsNotNull() &&
									voOutcome.getReferralDischarge().getDischargeType().equals(DischargeType.SEC_CARE) &&
										voOutcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull() &&
											voOutcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralReasonIsNotNull())
							{						 							
								currentCatsReferral.setOnwardReferralReason(voOutcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralReason());
							}
						}
												
				//	}
				}
				
				else if (voOutcome.getFurtherManagementDetailsIsNotNull() 
						&& voOutcome.getFurtherManagementDetails().size() > 0 
						&& form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatNO)) 
				{
					CatsReferralStatusVoCollection voStatusColl = currentCatsReferral.getStatusHistory().sort(SortOrder.DESCENDING);
					if (!voStatusColl.get(0).getReferralStatus().equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED))
						updateCatsReferralStatusAndDischargeDateAndReportFlags(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED, null, false, false, voOutcome, currentCatsReferral);
					else if (voStatusColl.get(0).getReferralStatus().equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED)
						&& form.lyr1().tabFurtherManagement().chkFinal().getValue())
						updateCatsReferralStatusAndDischargeDateAndReportFlags(null, null, false, false, voOutcome, currentCatsReferral);
				}
				else if (voOutcome.getActiveMonitoringIsNotNull() 
						&& form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatActive)) 
				{
					CatsReferralStatusVoCollection voStatusColl = currentCatsReferral.getStatusHistory().sort(SortOrder.DESCENDING);
				
					if (!voStatusColl.get(0).getReferralStatus().equals(ReferralApptStatus.ACTIVE_MONITORING))
						updateCatsReferralStatusAndDischargeDateAndReportFlags(ReferralApptStatus.ACTIVE_MONITORING, null, false, false, voOutcome, currentCatsReferral);
					else if (voStatusColl.get(0).getReferralStatus().equals(ReferralApptStatus.ACTIVE_MONITORING)
						&& form.lyr1().tabActiveMonitoring().chkAMGFinalReport().getValue())
						updateCatsReferralStatusAndDischargeDateAndReportFlags(null, null, false, false, voOutcome, currentCatsReferral);

				}
				
				saveCatsReferral(currentCatsReferral);
			}
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());//	WDEV-15465
			form.setMode(FormMode.VIEW);
			initialize(false, null, null, null);	
			return;
		}

		form.setMode(FormMode.VIEW);
		initialize(false, null, null, null);	
		fireOnFormModeChange(FormMode.VIEW);
	}

	private ReferralOutcomeVo populateAndValidateRefferalOutcome() 
	{
		if (form.GrpDischPatient().getValue() == GrpDischPatientEnumeration.None) 
		{
			engine.showMessage("Please select Discharge Patient or Further Management", "No selection made", MessageButtons.OK);
			return null;
		}
		
		ReferralOutcomeVo voOutcome = form.getLocalContext().getcurrentOutcomeVo();
		if (voOutcome == null)
			voOutcome = new ReferralOutcomeVo();
			
		voOutcome = populateDataFromScreen();		
		
		if (voOutcome == null)
			return null;
		
		if ( form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatNO)
			&& voOutcome.getFurtherManagementDetails() == null )
		{
			engine.showMessage("There is no data to be saved for Further Management. Please edit and Save again.");			
			return null;
		}
				
		String[] str = voOutcome.validate();
		if (form.getLocalContext().getInvalidOnwardReferralIsNotNull())
			str = form.getLocalContext().getInvalidOnwardReferral().validate(str);
				
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);			
			return null;
		}
		
		str = voOutcome.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);			
			return null;
		}
		return voOutcome;
	}

	private void updateCatsReferralStatusAndDischargeDateAndReportFlags(ReferralApptStatus newStatus, ReferralApptStatus lastStatus, boolean bSetOnwardReferralStatus, boolean bSetDischToGPStatus, ReferralOutcomeVo voOutcome, CatsReferralWizardVo voRefWizard)
	{		
		if (( newStatus != null && lastStatus == null) 
			|| (lastStatus !=null &&  !newStatus.equals(lastStatus)))
		{
			CatsReferralStatusVoCollection voStatusColl = voRefWizard.getStatusHistory();
			CatsReferralStatusVo currentStatus = new CatsReferralStatusVo(); 		
			currentStatus.setReferralStatus(newStatus);
			currentStatus.setAuthoringUser((MemberOfStaffRefVo)domain.getMosUser());
			currentStatus.setStatusDateTime(new DateTime());
			
			voRefWizard.setCurrentStatus(currentStatus);

			if (voStatusColl == null)
				voStatusColl = new CatsReferralStatusVoCollection();
			
			voStatusColl.add(currentStatus);
			voRefWizard.setStatusHistory(voStatusColl);		

			if (newStatus != null && newStatus.equals(ReferralApptStatus.ACTIVE_MONITORING))
				voRefWizard.setIsActiveMonitorApptRequired(Boolean.TRUE);
		}
		
		if(bSetDischToGPStatus)
			voRefWizard.setDischargeToGPDetailsReviewStatus(DischargeToGPDetailsReviewStatus.TO_BE_REVIEWED);		
		else
			voRefWizard.setDischargeToGPDetailsReviewStatus(null);		
			
		if (bSetOnwardReferralStatus)
			voRefWizard.setOnwardReferralStatus(OnwardReferralStatus.CURRENT_ONWARD_REFERRAL);		
		else
			voRefWizard.setOnwardReferralStatus(null);		

		if (voOutcome.getReferralDischargeIsNotNull()
			&& voOutcome.getReferralDischarge().getDischargeDateIsNotNull())
			voRefWizard.setDischargeDate(voOutcome.getReferralDischarge().getDischargeDate());		

		/*if (form.lyr1().tabFurtherManagement().chkFinal().isVisible()
			&& form.lyr1().tabFurtherManagement().chkFinal().getValue())
			voRefWizard.setIsFinalReportRequired(ReportStatus.REQUIRED);
		else
			voRefWizard.setIsFinalReportRequired(null);
*/
		//wdev-8474
		if (newStatus != null && newStatus.equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED))
			voRefWizard.setWasFurtherManagementDetailsReviewed(null);

		//wdev-8433
		if (voOutcome.getReferralDischargeIsNotNull()
			&& voOutcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull())
			voRefWizard.setIsSecondaryReportRequired(ReportStatus.REQUIRED);

		if (voOutcome.getReferralDischargeIsNotNull()) 
		{
			if (voOutcome.getReferralDischarge().getDischargeTypeIsNotNull() &&
					voOutcome.getReferralDischarge().getDischargeType().equals(DischargeType.SEC_CARE) &&
						voOutcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull() &&
							voOutcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralReasonIsNotNull())
			{
				voRefWizard.setOnwardReferralReason(voOutcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralReason());
			}
			else
			{
				voRefWizard.setOnwardReferralReason(null);
			}
		}
		
		form.getLocalContext().setCurrentCatsReferral(voRefWizard);				
	}

	private void open() 
	{
		// Refresh the value for ReferralOutcome
		form.getLocalContext().setcurrentOutcomeVo(domain.getReferralOutcome(form.getGlobalContext().RefMan.getCatsReferral()));
		
		//WDEV-17233 
		form.getLocalContext().setCurrentCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));
		
		populateScreenFromData(form.getLocalContext().getcurrentOutcomeVo());
		
		//wdev-6163
		if(form.getGlobalContext().RefMan.getIsProviderCancellationIsNotNull()
			&& 	form.getGlobalContext().RefMan.getIsProviderCancellation()
			&& form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);		
	}

	private void fireOnFormModeChange(FormMode mode)
	{
		form.getGlobalContext().RefMan.setIsComponentInEditMode(mode);
		form.fireCustomControlValueChanged();
	}
	
	@Override
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);

		open();
		
		
		if (form.getMode().equals(FormMode.EDIT)
			&& form.getLocalContext().getCurrentCatsReferralIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatusIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatusIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.DISCHARGED) )
		{
			form.btnUndoDischarge().setVisible(false);
			fireOnFormModeChange(FormMode.EDIT);
			return;
		}
		
		//lock down ability to change status using radio buttons when ststua is Active Monitoring. 
		if (form.getMode().equals(FormMode.EDIT)
			&& form.getLocalContext().getCurrentCatsReferralIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatusIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatusIsNotNull() 
			&& form.getLocalContext().getCurrentCatsReferral().getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.ACTIVE_MONITORING) )
		{
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatYES, false);				
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatNO, false);				
			form.GrpDischPatient().setEnabled(GrpDischPatientEnumeration.rdoDischPatActive, false);				
		}

		
		if( form.getLocalContext().getcurrentOutcomeVo() == null)
		{
			if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatYES))
				form.lyr1().tabDischargePatient().dteDischarge().setValue(new Date());
		}
		
		if (form.GrpDischPatient().getValue().equals(GrpDischPatientEnumeration.rdoDischPatNO)) 
		{
			form.lyr1().tabFurtherManagement().Group2().setValue(Group2Enumeration.None);
			clearFurtherManagementTab();
		}
		
		fireOnFormModeChange(FormMode.EDIT);
	}

	@Override
	protected void onCmbOtherValueChanged() throws PresentationLogicException 
	{
	}

	@Override
	protected void onBtnCancelEditClick() throws PresentationLogicException 
	{
		if(form.getMode().equals(FormMode.EDIT))
			form.GrpDischPatient().setEnabled(true);
		form.getLocalContext().setbFMDEditable(false);
		
		displayFurtherManagementTab(false, false, form.lyr1().tabFurtherManagement().Group2().getValue(), false);
		
		if (form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow() != null)
			populateFurtherManagementFromData(form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow().getValue());
		else {
			clearFurtherManagementTab();
			form.lyr1().tabFurtherManagement().lblNoTLTSessions().setVisible(false);
			form.lyr1().tabFurtherManagement().lblTLTNotes().setVisible(false );
			form.lyr1().tabFurtherManagement().lblTLTNotes2().setVisible(false );
			form.lyr1().tabFurtherManagement().intTlltSessions().setVisible(false );
			form.lyr1().tabFurtherManagement().cmbTLTType().setVisible(false);
			form.lyr1().tabFurtherManagement().lblTLTType().setVisible(false);
			form.lyr1().tabFurtherManagement().txtTLTNotes().setVisible(false);			
			form.lyr1().tabFurtherManagement().cmbReasonNO().setVisible(false);
			form.lyr1().tabFurtherManagement().lblApptReason().setVisible(false);
			form.lyr1().tabFurtherManagement().lblPROCEDURE().setVisible(false);
			form.lyr1().tabFurtherManagement().qmbProcedure().setVisible(false);
			form.lyr1().tabFurtherManagement().lblNoOfDaysNO().setVisible(false);
			form.lyr1().tabFurtherManagement().intNoOfDaysNO().setVisible(false);				
			form.lyr1().tabFurtherManagement().lblMI1().setVisible(false);
			form.lyr1().tabFurtherManagement().lblMI2().setVisible(false);
			form.lyr1().tabFurtherManagement().lblMI3().setVisible(false);
			form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setVisible(false);
			form.lyr1().tabFurtherManagement().intIncompNoDays().setVisible(false);
		}
			
		form.lyr1().tabFurtherManagement().btnOk().setVisible(false);
		form.lyr1().tabFurtherManagement().btnCancelEdit().setVisible(false);

		
		
		form.lyr1().tabFurtherManagement().ccA().setEnabledAuthoringHCP(false);
		form.lyr1().tabFurtherManagement().ccA().setEnabledDateTime(false);
		form.lyr1().tabFurtherManagement().ccA().setIsRequiredPropertyToControls(true);
		
		form.getLocalContext().setbFMDEditable(false);

	}

	@Override
	protected void onBtnOkClick() throws PresentationLogicException 
	{	
		if (form.lyr1().tabFurtherManagement().Group2().getValue() == Group2Enumeration .None)
		{
			engine.showMessage("Further Management Type is mandatory");
			return;
		}
		if (form.lyr1().tabFurtherManagement().ccA().getValue() == null ||
				(form.lyr1().tabFurtherManagement().ccA().getValue() != null &&
						(form.lyr1().tabFurtherManagement().ccA().getValue().getAuthoringHcp() == null ||
								form.lyr1().tabFurtherManagement().ccA().getValue().getAuthoringDateTime() == null)))
		{
			engine.showMessage("AuthoringInformation is mandatory");
			return;
		}
		if (form.getMode().equals(FormMode.EDIT))
			form.GrpDischPatient().setEnabled(true);
		form.getLocalContext().setbFMDEditable(false);

		FurtherManagementDetailsVo voFurtherManage = populateFurtherManagementDetails(form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow() != null ? form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow().getValue() : null);

		if (form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow() != null)
		{
			form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow().setValue(voFurtherManage);
			form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow().setcolNotes(voFurtherManage.getFollowupTypeIsNotNull() ? voFurtherManage.getFollowupType().toString() : "");
		}
		else
		{
			grdFurtherRow row = form.lyr1().tabFurtherManagement().grdFurther().getRows().newRow();
			row.setValue(voFurtherManage);
			row.setcolNotes(voFurtherManage.getFollowupTypeIsNotNull() ? voFurtherManage.getFollowupType().toString() : "");
			row.setcolDateTime(voFurtherManage.getAuthoringInformationIsNotNull() ? (voFurtherManage.getAuthoringInformation().getAuthoringDateTimeIsNotNull() ?  voFurtherManage.getAuthoringInformation().getAuthoringDateTime().toString() : new DateTime().toString()) : new DateTime().toString());
		}
	
		form.lyr1().tabFurtherManagement().ccA().setEnabledAuthoringHCP(false);
		form.lyr1().tabFurtherManagement().ccA().setEnabledDateTime(false);
		form.lyr1().tabFurtherManagement().ccA().setIsRequiredPropertyToControls(true);
		
		form.lyr1().tabFurtherManagement().btnOk().setVisible(false);
		form.lyr1().tabFurtherManagement().btnCancelEdit().setVisible(false);
	
		if (form.lyr1().tabFurtherManagement().cmbReasonNO().getValue() != null 
			&& form.lyr1().tabFurtherManagement().cmbReasonNO().getValue().equals(AnotherConsultationAppt.MED_INCOMPLETE))
			displayFurtherManagementTab(false, true, form.lyr1().tabFurtherManagement().Group2().getValue(), false);
		else if (form.lyr1().tabFurtherManagement().cmbReasonNO().getValue() != null 
			&& form.lyr1().tabFurtherManagement().cmbReasonNO().getValue().equals(AnotherConsultationAppt.PROCEDURE))
			displayFurtherManagementTab(true, false, form.lyr1().tabFurtherManagement().Group2().getValue(), false);
		else
			displayFurtherManagementTab(false, false, form.lyr1().tabFurtherManagement().Group2().getValue(), false);
		
		form.lyr1().tabFurtherManagement().grdFurther().setValue(voFurtherManage);
		if(form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow() != null)
			populateFurtherManagementFromData(form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow().getValue());
	}

	@Override
	protected void onRadioButtonGroup2ValueChanged() throws PresentationLogicException 
	{
		radioTLTorAnotherChangedorSpecialInvestigations();
	}

	private void radioTLTorAnotherChangedorSpecialInvestigations() 
	{
		if (form.lyr1().tabFurtherManagement().Group2().getValue().equals(Group2Enumeration.rdoTlt))
			displayFurtherManagementTab(false, false, form.lyr1().tabFurtherManagement().Group2().getValue(), false);
		else
			anotherValueChanged();
	}

	@Override
	protected void onGrdFurtherSelectionChanged() throws PresentationLogicException
	{
		if(form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow() != null)
			populateFurtherManagementFromData(form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow().getValue());
		updateContextMenu();
	}

	private void populateFurtherManagementFromData(FurtherManagementDetailsVo voFurtherManage) 
	{
		form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setValue(voFurtherManage.getMedicallyIncomplete());
		form.lyr1().tabFurtherManagement().cmbReasonNO().setValue(voFurtherManage.getAnotherConsultationAppt());
		form.lyr1().tabFurtherManagement().ccA().setValue(voFurtherManage.getAuthoringInformation());
		
		if (voFurtherManage.getFollowupTypeIsNotNull())
		{
			if (voFurtherManage.getFollowupType().equals(FollowupManagementType.TLT))
				form.lyr1().tabFurtherManagement().Group2().setValue(Group2Enumeration.rdoTlt);
			else if (voFurtherManage.getFollowupType().equals(FollowupManagementType.ANOTHER_APPOINTMENT))
				form.lyr1().tabFurtherManagement().Group2().setValue(Group2Enumeration.rdoFurther);
			else if (voFurtherManage.getFollowupType().equals(FollowupManagementType.SPECIAL_INVESTIGATIONS))
				form.lyr1().tabFurtherManagement().Group2().setValue(Group2Enumeration.rdoSpecial);
		}
			
		radioTLTorAnotherChangedorSpecialInvestigations();

		form.lyr1().tabFurtherManagement().intIncompNoDays().setValue(voFurtherManage.getIncompleteNoOfDays());
		form.lyr1().tabFurtherManagement().txtFurtherManagement().setValue(voFurtherManage.getFurtherManagementByCATS());
		form.lyr1().tabFurtherManagement().intTlltSessions().setValue(voFurtherManage.getNoOfTltSessions());
		form.lyr1().tabFurtherManagement().txtTLTNotes().setValue(voFurtherManage.getTLTNotes());
		form.lyr1().tabFurtherManagement().cmbTLTType().setValue(voFurtherManage.getTLTType());
		form.lyr1().tabFurtherManagement().qmbProcedure().setValue(voFurtherManage.getProcedure());
		if (form.lyr1().tabFurtherManagement().qmbProcedure().getValue() == null
			&& voFurtherManage.getProcedureIsNotNull())
		{
			form.lyr1().tabFurtherManagement().qmbProcedure().newRow(voFurtherManage.getProcedure(), voFurtherManage.getProcedure().getProcedureName());
			form.lyr1().tabFurtherManagement().qmbProcedure().setValue(voFurtherManage.getProcedure());
		}
		form.lyr1().tabFurtherManagement().intNoOfDaysNO().setValue(voFurtherManage.getProcedureNoOfDays());
		
		form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setValue(voFurtherManage.getMedicallyIncomplete());
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newFurtherManage();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateFurtherManage();
				break;
		}
	}
	
	private void updateFurtherManage() 
	{
		if (form.getMode().equals(FormMode.EDIT))
			form.GrpDischPatient().setEnabled(false);
		form.getLocalContext().setbFMDEditable(true);

		form.lyr1().tabFurtherManagement().ccA().setEnabledAuthoringHCP(true);
		form.lyr1().tabFurtherManagement().ccA().setEnabledDateTime(true);
		form.lyr1().tabFurtherManagement().ccA().setIsRequiredPropertyToControls(true);
		
		if (form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow() != null)
		{
			populateFurtherManagementFromData(form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow().getValue());
			form.lyr1().tabFurtherManagement().Group2().setEnabled(false);
		}
		form.lyr1().tabFurtherManagement().btnOk().setVisible(true);
		form.lyr1().tabFurtherManagement().btnCancelEdit().setVisible(true);
	}

	private void newFurtherManage() 
	{
		if (form.getMode().equals(FormMode.EDIT))
			form.GrpDischPatient().setEnabled(false);
		
		form.getLocalContext().setbFMDEditable(true);
		form.lyr1().tabFurtherManagement().grdFurther().setValue(null);						
		form.lyr1().tabFurtherManagement().ccA().initializeComponent();
		
		form.lyr1().tabFurtherManagement().ccA().setEnabledAuthoringHCP(true);
		form.lyr1().tabFurtherManagement().ccA().setEnabledDateTime(true);
		form.lyr1().tabFurtherManagement().ccA().setIsRequiredPropertyToControls(true);
		
		displayFurtherManagementTab(false, false, form.lyr1().tabFurtherManagement().Group2().getValue(), true);
		clearFurtherManagementTab();
		form.lyr1().tabFurtherManagement().lblNoTLTSessions().setVisible(false);
		form.lyr1().tabFurtherManagement().lblTLTNotes().setVisible(false );
		form.lyr1().tabFurtherManagement().lblTLTNotes2().setVisible(false );
		form.lyr1().tabFurtherManagement().intTlltSessions().setVisible(false );
		form.lyr1().tabFurtherManagement().cmbTLTType().setVisible(false);
		form.lyr1().tabFurtherManagement().lblTLTType().setVisible(false);
		form.lyr1().tabFurtherManagement().txtTLTNotes().setVisible(false);
		form.lyr1().tabFurtherManagement().cmbReasonNO().setVisible(false);
		form.lyr1().tabFurtherManagement().lblApptReason().setVisible(false);
		form.lyr1().tabFurtherManagement().lblPROCEDURE().setVisible(false);
		form.lyr1().tabFurtherManagement().qmbProcedure().setVisible(false);
		form.lyr1().tabFurtherManagement().lblNoOfDaysNO().setVisible(false);
		form.lyr1().tabFurtherManagement().intNoOfDaysNO().setVisible(false);			
		form.lyr1().tabFurtherManagement().lblMI1().setVisible(false);
		form.lyr1().tabFurtherManagement().lblMI2().setVisible(false);
		form.lyr1().tabFurtherManagement().lblMI3().setVisible(false);
		form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setVisible(false);
		form.lyr1().tabFurtherManagement().intIncompNoDays().setVisible(false);
		
		form.lyr1().tabFurtherManagement().btnOk().setVisible(true);
		form.lyr1().tabFurtherManagement().btnCancelEdit().setVisible(true);
		form.lyr1().tabFurtherManagement().chkFinal().setValue(false);
		
		form.lyr1().tabFurtherManagement().chkFinal().setVisible(form.getLocalContext().getcurrentOutcomeVo() == null 
				|| (form.getLocalContext().getcurrentOutcomeVoIsNotNull()
						&& form.getLocalContext().getcurrentOutcomeVo().getCatsFinalReportStatus() == null));
		form.lyr1().tabFurtherManagement().lblFinal().setVisible(form.getLocalContext().getcurrentOutcomeVo() == null 
				|| (form.getLocalContext().getcurrentOutcomeVoIsNotNull()
						&& form.getLocalContext().getcurrentOutcomeVo().getCatsFinalReportStatus() == null));
	}

	private void updateContextMenu() 
	{
		form.getContextMenus().hideAllGenericGridMenuItems();
		boolean isRowSelected = form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow() != null ? true : false;
		FurtherManagementDetailsVo value = null;
		if (isRowSelected)
		{
			value = (FurtherManagementDetailsVo)form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow().getValue();
		}
		boolean referBackToConsultant = isRowSelected && value != null && value.getFollowupType().equals(FollowupManagementType.REFER_BACK_TO_CONSULTANT) ?  true : false;
		if (referBackToConsultant)
			hideAllUnusedControls();
		
		boolean isDischargeTabVisible = form.lyr1().tabDischargePatient().isHeaderVisible();
		form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged() && !isDischargeTabVisible);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.getMode().equals(FormMode.EDIT) && ! isReferralDischarged() && form.lyr1().tabFurtherManagement().grdFurther().getSelectedRow()!= null && !isDischargeTabVisible && !referBackToConsultant);
			
		if (form.getLocalContext().getcurrentOutcomeVoIsNotNull()
			&& form.getLocalContext().getcurrentOutcomeVo().getID_ReferralOutcomeIsNotNull()
			&& form.getLocalContext().getcurrentOutcomeVo().getReferralDischargeIsNotNull())
			form.getContextMenus().hideAllGenericGridMenuItems();

	}
	
	private void hideAllUnusedControls() 
	{
		form.lyr1().tabFurtherManagement().Group2().setValue(Group2Enumeration.None);
		form.lyr1().tabFurtherManagement().lblNoTLTSessions().setVisible(false);
		form.lyr1().tabFurtherManagement().lblTLTNotes().setVisible(false );
		form.lyr1().tabFurtherManagement().lblTLTNotes2().setVisible(false );
		form.lyr1().tabFurtherManagement().intTlltSessions().setVisible(false );
		form.lyr1().tabFurtherManagement().cmbTLTType().setVisible(false);
		form.lyr1().tabFurtherManagement().lblTLTType().setVisible(false);
		form.lyr1().tabFurtherManagement().txtTLTNotes().setVisible(false);
		form.lyr1().tabFurtherManagement().cmbReasonNO().setVisible(false);
		form.lyr1().tabFurtherManagement().lblApptReason().setVisible(false);
		form.lyr1().tabFurtherManagement().lblPROCEDURE().setVisible(false);
		form.lyr1().tabFurtherManagement().qmbProcedure().setVisible(false);
		form.lyr1().tabFurtherManagement().lblNoOfDaysNO().setVisible(false);
		form.lyr1().tabFurtherManagement().intNoOfDaysNO().setVisible(false);			
		form.lyr1().tabFurtherManagement().lblMI1().setVisible(false);
		form.lyr1().tabFurtherManagement().lblMI2().setVisible(false);
		form.lyr1().tabFurtherManagement().lblMI3().setVisible(false);
		form.lyr1().tabFurtherManagement().cmbMedicallyIncomplete().setVisible(false);
		form.lyr1().tabFurtherManagement().intIncompNoDays().setVisible(false);		
	}

	@Override
	protected void onBtnPrintFinalClick() throws PresentationLogicException 
	{	
		form.getGlobalContext().OCRR.setSelectedInvIds(getSelectedInvestigations()); //WDEV-12452 
		engine.open(form.getForms().RefMan.PrinterSelectionDialog);
		form.getGlobalContext().RefMan.setReferralOutcomeReportType(ReferralOutcomeReportType.FINAL);
		form.getGlobalContext().RefMan.setSelectedReferralOutcomeVo(form.getLocalContext().getcurrentOutcomeVo());
	}
	
	@Override
	protected void onBtnPrintPrescriptionsClick() throws PresentationLogicException 
	{
		
		engine.open(form.getForms().RefMan.PrintPrescriptionsDialog);
		form.getGlobalContext().RefMan.setReferralOutcomeReportType(ReferralOutcomeReportType.PRESCRIPTIONS);
		form.getGlobalContext().RefMan.setSelectedReferralOutcomeVo(form.getLocalContext().getcurrentOutcomeVo());
		
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result)
			throws PresentationLogicException 
	{
		//workaround because of framework issue		
		if (result.equals(DialogResult.YES)) 
		{
			setShowTLTContext();

			if (form.getLocalContext().getMessageBoxIdIsNotNull() &&
					messageBoxId == form.getLocalContext().getMessageBoxId())
			{
				save();
				return;
			}
			if (form.getLocalContext().getUndoDischarge() != null &&
				form.getLocalContext().getUndoDischarge().equals(Boolean.TRUE)) 
			{
				
				if (form.btnOnwardReferralCompleted().isVisible()) 
				{
					// WDEV-10533 
					CatsReferralWizardVo currentReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

					if (currentReferral.getVersion_CatsReferral() > form.getGlobalContext().RefMan.getCatsReferral().getVersion_CatsReferral())
					{
						form.getGlobalContext().RefMan.setCatsReferral(currentReferral);
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
						form.setMode(FormMode.VIEW);
						initialize(false, null, null, null);
						return;
					}
					onBtnOnwardReferralCompletedClick();
				}
				undoDischarge();
				return;
			}						
		
		}
		else if (result.equals(DialogResult.NO)) 
		{
			if (form.getLocalContext().getGenerateCATSReportMessageBoxIDIsNotNull() &&
					messageBoxId == form.getLocalContext().getGenerateCATSReportMessageBoxID())
			{				
				form.lyr1().tabFurtherManagement().chkFinal().setValue(false);
				return; //WDEV-13798 
			}

			// WDEV-11251
			// Clear only 'Generate CATS Report' check box
			if (form.getLocalContext().getGenerateAMCATSReportMessageBoxIDIsNotNull() 
				&& messageBoxId == form.getLocalContext().getGenerateAMCATSReportMessageBoxID())
			{
				form.lyr1().tabActiveMonitoring().chkAMGFinalReport().setValue(false);
				return;
			}
			
			if (form.getLocalContext().getDischargeMessageBoxIDIsNotNull() &&
					messageBoxId == form.getLocalContext().getDischargeMessageBoxID())
			{
				form.GrpDischPatient().setValue(null);
				form.setMode(FormMode.VIEW);			
			}
			if (form.getLocalContext().getMessageBoxIdIsNotNull() &&
					messageBoxId == form.getLocalContext().getMessageBoxId())
				form.setMode(FormMode.VIEW);			
			
			open();
			updateControlState();
			enableEditAndReviewButtons();		
			enableOnwardReferralCompletedButton();
			return;			
		}				
	}
	
	
	private void setShowTLTContext() 
	{
		for(int  i = 0 ; i < form.lyr1().tabFurtherManagement().grdFurther().getRows().size() ; i++)
		{
			FurtherManagementDetailsVo voFMD = form.lyr1().tabFurtherManagement().grdFurther().getRows().get(i).getValue();
		
			if (voFMD.getFollowupType().equals(FollowupManagementType.TLT))
				form.getGlobalContext().RefMan.setShowTLTTabs(true);
		}
	}

	@Override
	protected void onBtnReviewedClick() throws PresentationLogicException 
	{
		CatsReferralWizardVo voRefWizard = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (voRefWizard != null)
		{
			voRefWizard.setWasFurtherManagementDetailsReviewed(Boolean.TRUE);
			
			saveCatsReferral(voRefWizard);
			form.btnReviewed().setVisible(false);
		}
	}

	@Override
	protected void onBtnUndoDischargeClick() throws PresentationLogicException 
	{
		form.getLocalContext().setUndoDischarge(true);
		engine.showMessage("Are you sure that you want to UNDO this discharge?", "UNDO Discharge", MessageButtons.YESNO);				
	}
	
	private void undoDischarge() throws PresentationLogicException 
	{
		CatsReferralWizardVo currentReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		
		// WDEV-10533 - Check record version and simulate StaleObject
		if (currentReferral.getVersion_CatsReferral() > form.getGlobalContext().RefMan.getCatsReferral().getVersion_CatsReferral())
		{
			form.getGlobalContext().RefMan.setCatsReferral(currentReferral);
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.setMode(FormMode.VIEW);
			initialize(false, null, null, null);	
			return;
		}
		
		if (currentReferral != null)
		{
			CatsReferralStatusVo status = currentReferral.getCurrentStatus();
			if (status != null && status .getReferralStatusIsNotNull() && status.getReferralStatus().equals(ReferralApptStatus.DISCHARGED))
			{
				if (currentReferral.getStatusHistoryIsNotNull())
				{
 					CatsReferralStatusVoCollection history = currentReferral.getStatusHistory().sort(SortOrder.DESCENDING);
					CatsReferralStatusVo currentStatus = new CatsReferralStatusVo();
					for (int i = 0; i < history.size(); i++) 
					{
						if (history.get(i).getReferralStatus().equals(ReferralApptStatus.DISCHARGED))
						{
							continue;
						}
						else
						{
							currentStatus.setReferralStatus(history.get(i).getReferralStatus());							
							MemberOfStaffRefVo user = null;
							IAppUser loggedInUser = engine.getLoggedInUser();
							if (loggedInUser != null &&
									loggedInUser.getUsername() != null)
							{
								Object mosUser = domain.getMosUser(loggedInUser.getUsername());
								if (mosUser != null) {
									user = (MemberOfStaffRefVo)mosUser;
								}
							}
							
							currentStatus.setAuthoringUser(user);
							currentStatus.setStatusDateTime(new DateTime());
							currentReferral.setCurrentStatus(currentStatus);
							history.add(currentStatus);
							currentReferral.setStatusHistory(history);
														
							break;
						}		
					}
				
					currentReferral.setCurrentStatus(currentStatus);
					currentReferral.setDischargeDate(null);
					currentReferral.setOnwardReferralStatus(null);
					currentReferral.setOnwardReferralReason(null);
					currentReferral.setIsSecondaryReportRequired(null);					
				
					currentReferral.setDischargeToGPDetailsReviewStatus(null);//wdev-9916		

					try {
						String[] str = currentReferral.validate();
						if (str != null && str.length > 0)
						{
							engine.showErrors(str);			
							return;
						}
												
						form.getLocalContext().setCurrentCatsReferral(domain.updateReferralOutcome(currentReferral));				
						form.getGlobalContext().RefMan.setCatsReferral(form.getLocalContext().getCurrentCatsReferral());  // WDEV-10533
					}
					catch (DomainInterfaceException e) 
					{
						engine.showMessage(e.toString(), "DomainInterfaceException", MessageButtons.OK);
						returnToViewMode();
						return;
					} 
					catch (StaleObjectException e) 
					{
						engine.showMessage(e.toString(), "StaleObjectException", MessageButtons.OK);
						returnToViewMode();			
						return;	
					}
					catch (ForeignKeyViolationException e) 
					{
						engine.showMessage(e.toString(), "ForeignKeyViolationException", MessageButtons.OK);
						returnToViewMode();			
						return;	
					}
								
					returnToViewMode();			
					return;
				}
			}
		}
	}
	
	private void returnToViewMode() throws PresentationLogicException 
	{
		form.setMode(FormMode.VIEW);
		form.btnUndoDischarge().setVisible(false);
		form.getLocalContext().setUndoDischarge(false);				
		initialize(false, null, null, null);		
	}

	@Override
	protected void onBtnOnwardReferralCompletedClick() throws PresentationLogicException 
	{		
		CatsReferralWizardVo currentCatsReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());		
		currentCatsReferral.setOnwardReferralReason(null);		
		if(saveCatsReferral(currentCatsReferral)) 
		{
			if (form.getMode().equals(FormMode.VIEW))//wdev-10769
				form.btnOnwardReferralCompleted().setVisible(false);
		}
	}

	private boolean saveCatsReferral(CatsReferralWizardVo currentCatsReferral) 
	{
		String[] arrErrors = currentCatsReferral.validate();
		if(arrErrors != null) {
			engine.showErrors(arrErrors);
			return false;
		}

		try {
			currentCatsReferral = domain.saveCatsReferral(currentCatsReferral);
			form.getGlobalContext().RefMan.setCatsReferral(currentCatsReferral);	// WDEV-10533
		} 
		catch (DomainInterfaceException e){
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) {			
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		form.getLocalContext().setCurrentCatsReferral(currentCatsReferral);
		return true;
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		//if it was printerdialog, OK is result and trying to print FINAL, 
		// assume success and hide button.
		if (formName.equals(form.getForms().RefMan.PrinterSelectionDialog)
			&& result.equals(DialogResult.OK)
			&& form.getGlobalContext().RefMan.getReferralOutcomeReportTypeIsNotNull()
			&& form.getGlobalContext().RefMan.getReferralOutcomeReportType().equals(ReferralOutcomeReportType.FINAL))
		{
			form.btnPrintFinal().setVisible(false);
			
			//WDEV-11282 
			CatsReferralReportsVo catsReferral = domain.getCatsReferralReports(form.getGlobalContext().RefMan.getCatsReferral());
			form.getGlobalContext().RefMan.setCatsReferralReports(catsReferral);
			manageCATSReportDocumentSentDate(catsReferral); 
		}
		//WDEV-11282 
		if (formName.equals(form.getForms().RefMan.EditDate) && result.equals(DialogResult.OK))
		{
			CatsReferralReportsVo catsReferral = form.getGlobalContext().RefMan.getCatsReferralReports();
			String[] str = catsReferral.validate();
			if (str != null && str.length > 0)
			{
				engine.showErrors(str);
				return;
			}
			try 
			{
				catsReferral = domain.saveCatsReferralReport(catsReferral);
				form.getGlobalContext().RefMan.setCatsReferralReports(catsReferral);
				form.getGlobalContext().RefMan.setCatsReferral(catsReferral);	//wdev-14176
			}
			catch (DomainInterfaceException exception) 
			{
				engine.showMessage(exception.getMessage());
				return;
			}
			catch (StaleObjectException exception) 
			{
				//wdev-11298
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				
				catsReferral = domain.getCatsReferralReports(form.getGlobalContext().RefMan.getCatsReferralReports());
				form.getGlobalContext().RefMan.setCatsReferralReports(catsReferral);
				//----------
			
			}			
			
			manageCATSReportDocumentSentDate(catsReferral);
		}
		
		initialize(false, null, null, null);//WDEV-15476
	}
	
	//WDEV-11282 
	private void manageCATSReportDocumentSentDate(CatsReferralReportsVo catsReferral) 
	{
		if (catsReferral != null)
		{	
			form.lblCATSReportSentDate().setVisible(true);
			form.dtim1().setVisible(true);
			form.dtim1().setEnabled(false);
			form.dtim1().setValue(catsReferral.getCATSReportSentDate());
			
			form.btnEditDate().setVisible(hasRightToEditCATSReportDocumentSentDate());
				
			return;
		}		

		form.lblCATSReportSentDate().setVisible(false);
		form.dtim1().setVisible(false);
		form.btnEditDate().setVisible(false);
	}
	
	//WDEV-11282 
	private boolean hasRightToEditCATSReportDocumentSentDate()
	{
		return engine.hasRight(AppRight.CAN_EDIT_CATS_REPORT_DOCUMENT_SENT_DATE);
		//return true;
	}
	

	@Override
	protected void onlyr1TabChanged(LayerBridge tab)
	{
	}

	@Override
	protected void onChkFinalValueChanged() throws PresentationLogicException 
	{
		form.lyr1().tabFurtherManagement().chkFinal().getValue(); //WDEV-14179
	}

	@Override
	protected void onBtnGPReviewedClick() throws PresentationLogicException 
	{
		CatsReferralWizardVo voRefWizard = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (voRefWizard != null)
		{
			voRefWizard.setDischargeToGPDetailsReviewStatus(DischargeToGPDetailsReviewStatus.REVIEWED);
			
			saveCatsReferral(voRefWizard);
			form.btnGPReviewed().setVisible(false);
		}
	}

	@Override
	protected void onBtnUpdateAMClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);

		open();
		
		engine.showMessage("You need to either enter Further Management or Discharge details and Save.");
		
		fireOnFormModeChange(FormMode.EDIT);
	}

	@Override
	protected void onChkAMGFinalReportValueChanged() throws PresentationLogicException 
	{
		form.lyr1().tabActiveMonitoring().chkAMGFinalReport().getValue(); //WDEV-14179
	}

	@Override
	protected void onIntAMPeriodValueChanged() throws PresentationLogicException 
	{
		if (form.lyr1().tabActiveMonitoring().dteAMApptBy().getValue() == null
			&& form.lyr1().tabActiveMonitoring().intAMPeriod().getValue() != null
			&& form.lyr1().tabActiveMonitoring().intAMPeriod().getValue() > 0)
			form.lyr1().tabActiveMonitoring().dteAMApptBy().setValue(new Date().addDay(form.lyr1().tabActiveMonitoring().intAMPeriod().getValue()));
	}

	@Override
	protected void onBtnEditDateClick() throws PresentationLogicException 
	{			
		//WDEV-11282 
		CatsReferralReportsVo catsReferral = domain.getCatsReferralReports(form.getGlobalContext().RefMan.getCatsReferral());
		form.getGlobalContext().RefMan.setCatsReferralReports(catsReferral);
		engine.open(form.getForms().RefMan.EditDate);
	}
}
