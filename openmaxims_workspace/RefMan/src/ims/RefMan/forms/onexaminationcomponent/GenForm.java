// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.onexaminationcomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPatientDocumentsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccDocumentsForm = loader.loadComponent(102264, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
				//ims.framework.Control m_ccDocumentsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(816), new Integer(552), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_ccDocumentsForm, instance1 } );
				ims.framework.Control m_ccDocumentsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_ccDocumentsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccDocumentsControl);
				Menu[] menus1 = m_ccDocumentsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.uploaddocument.IComponent ccDocuments()
			{
				return (ims.core.forms.uploaddocument.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccDocumentsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccDocumentsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccDocumentsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccDocumentsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccDocumentsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabClinicalNoteContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 820, 558, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccClinicalNoteForm = loader.loadComponent(134213, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccClinicalNoteControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(0), new Integer(820), new Integer(558), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccClinicalNoteForm, instance1 } );
				ims.framework.Control m_ccClinicalNoteControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccClinicalNoteForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccClinicalNoteControl);
				Menu[] menus1 = m_ccClinicalNoteForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.clinicalnotescustomcontrol.IComponent ccClinicalNote()
			{
				return (ims.RefMan.forms.clinicalnotescustomcontrol.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccClinicalNoteValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccClinicalNoteVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccClinicalNoteVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccClinicalNoteEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccClinicalNoteEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPrescriptionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccPrescriptionForm = loader.loadComponent(134173, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 1002, skipContextValidation);
				//ims.framework.Control m_ccPrescriptionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(0), new Integer(0), new Integer(816), new Integer(552), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1002), m_ccPrescriptionForm, instance1 } );
				ims.framework.Control m_ccPrescriptionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1002), m_ccPrescriptionForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPrescriptionControl);
				Menu[] menus1 = m_ccPrescriptionForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.prescriptioncomponent.IComponent ccPrescription()
			{
				return (ims.RefMan.forms.prescriptioncomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPrescriptionValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPrescriptionVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPrescriptionVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPrescriptionEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPrescriptionEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabOutcomeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 816, 552, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccOutcomeForm = loader.loadComponent(134120, appForm, startControlID * 10 + 4000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 2003, skipContextValidation);
				//ims.framework.Control m_ccOutcomeControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(0), new Integer(8), new Integer(816), new Integer(552), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2003), m_ccOutcomeForm, instance1 } );
				ims.framework.Control m_ccOutcomeControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2003), m_ccOutcomeForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccOutcomeControl);
				Menu[] menus1 = m_ccOutcomeForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.referraloutcomecomponent.IComponent ccOutcome()
			{
				return (ims.RefMan.forms.referraloutcomecomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccOutcomeValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccOutcomeVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccOutcomeVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccOutcomeEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccOutcomeEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabTLTContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrTLTLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabPageTLTNotesContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 808, 830, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccTLTForm = loader.loadComponent(134172, appForm, startControlID * 10 + 5000, anchoringHelper5.getSize(), instance1, startTabIndex.intValue() + 3005, skipContextValidation);
						//ims.framework.Control m_ccTLTControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(0), new Integer(8), new Integer(808), new Integer(830), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3005), m_ccTLTForm, instance1 } );
						ims.framework.Control m_ccTLTControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3005), m_ccTLTForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccTLTControl);
						Menu[] menus1 = m_ccTLTForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.RefMan.forms.tltsummarynotescomponent.IComponent ccTLT()
					{
						return (ims.RefMan.forms.tltsummarynotescomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccTLTValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccTLTVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccTLTVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccTLTEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccTLTEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabPageTLTOutcomeContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbTLTOnwardReferralComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.RefMan.vo.lookups.OnwardReferralReason value)
						{
							return super.control.removeRow(value);
						}
						public ims.RefMan.vo.lookups.OnwardReferralReason getValue()
						{
							return (ims.RefMan.vo.lookups.OnwardReferralReason)super.control.getValue();
						}
						public void setValue(ims.RefMan.vo.lookups.OnwardReferralReason value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbTLTOrganisationComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.OrgLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.OrgLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.OrgLiteVo getValue()
						{
							return (ims.core.vo.OrgLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.OrgLiteVo value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbOtherComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.RefMan.vo.lookups.DischargeOtherType value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.RefMan.vo.lookups.DischargeOtherType value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.RefMan.vo.lookups.DischargeOtherType value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.RefMan.vo.lookups.DischargeOtherType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.RefMan.vo.lookups.DischargeOtherType value)
						{
							return super.control.removeRow(value);
						}
						public ims.RefMan.vo.lookups.DischargeOtherType getValue()
						{
							return (ims.RefMan.vo.lookups.DischargeOtherType)super.control.getValue();
						}
						public void setValue(ims.RefMan.vo.lookups.DischargeOtherType value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbTLTDischTypeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.RefMan.vo.lookups.DischargeType value)
						{
							return super.control.removeRow(value);
						}
						public ims.RefMan.vo.lookups.DischargeType getValue()
						{
							return (ims.RefMan.vo.lookups.DischargeType)super.control.getValue();
						}
						public void setValue(ims.RefMan.vo.lookups.DischargeType value)
						{
							super.control.setValue(value);
						}
					}
				
					public static class Group1RadioButton extends RadioButtonBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
						{
							if(startTabIndex == null)
								throw new RuntimeException("Invalid startTabIndex ");
							RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 136, 64, 168, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
							control.addButton(0, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Refer Back to Consultant", startTabIndex.intValue() + 4007);
							RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 136, 40, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
							control.addButton(1, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "Discharge Patient", startTabIndex.intValue() + 4006);
						}
						public void setText(Group1Enumeration option, String value)
						{
							if(option != null && option.id >= 0 && value != null)
								control.setText(option.id, value);
						}
						public Group1Enumeration getValue()
						{
							switch (super.control.getValue())
							{
								case -1: return Group1Enumeration.None;
								case 0: return Group1Enumeration.rdoReferBackToConsultant;
								case 1: return Group1Enumeration.rdoDischargePatient;
							}
							return null;
						}
						public void setValue(Group1Enumeration value)
						{
							if(value != null)
								super.control.setValue(value.id);
							else
								super.control.setValue(Group1Enumeration.None.id);
						}
						public boolean isEnabled(Group1Enumeration option)
						{
							return super.control.isEnabled(option.id);
						}
						public void setEnabled(Group1Enumeration option, boolean value)
						{
							super.control.setEnabled(option.id, value);
						}
						public boolean isVisible(Group1Enumeration option)
						{
							return super.control.isVisible(option.id);
						}
						public void setVisible(Group1Enumeration option, boolean value)
						{
							super.control.setVisible(option.id, value);
						}
						public void setVisible(boolean value)
						{
							super.control.setVisible(value);
						}
						public void setEnabled(boolean value)
						{
							super.control.setEnabled(value);
						}
					}
					public static class Group1Enumeration implements java.io.Serializable
					{
						private static final long serialVersionUID = 1L;
						public static Group1Enumeration None = new Group1Enumeration(-1);
						public static Group1Enumeration rdoReferBackToConsultant = new Group1Enumeration(0);
						public static Group1Enumeration rdoDischargePatient = new Group1Enumeration(1);
						private Group1Enumeration(int id)
						{
							this.id = id;
						}
						public boolean equals(Object o)
						{
							return this.id == ((Group1Enumeration)o).id;
						}
						private int id;
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Panel Controls
						RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 112, 16, 224, 80, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 344, 24, 360, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ims.framework.FormUiLogic m_ccAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 6000, anchoringHelper9.getSize(), instance1, startTabIndex.intValue() + 4008, skipContextValidation);
						//ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(344), new Integer(24), new Integer(360), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4008), m_ccAuthoringForm, instance1 } );
						ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012),  new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4008), m_ccAuthoringForm, instance1, Boolean.TRUE } );
						super.addControl(m_ccAuthoringControl);
						Menu[] menus1 = m_ccAuthoringForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
				
						// Label Controls
						RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 104, 264, 323, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Onward Referral Instructions to Discharge Coordinators", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 104, 208, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 104, 192, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Onward Referral", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 104, 120, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Date:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 104, 240, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Organisation:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 104, 192, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "If Other:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 104, 152, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Type:", new Integer(1), null, new Integer(0)}));
				
						// Button Controls
						RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 664, 456, 72, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 5016), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
						RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 584, 456, 72, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 5015), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
						RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 64, 456, 72, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 5014), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 104, 304, 584, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 5013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// Date Controls
						RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 208, 120, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 5009), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 208, 192, 480, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbTLTOnwardReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 5011), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbTLTOnwardReferralTemp);
						cmbTLTOnwardReferralComboBox cmbTLTOnwardReferral = (cmbTLTOnwardReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTLTOnwardReferralComboBox.class, m_cmbTLTOnwardReferralTemp);
						super.addComboBox(cmbTLTOnwardReferral);
						RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 208, 232, 480, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbTLTOrganisationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 5012), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbTLTOrganisationTemp);
						cmbTLTOrganisationComboBox cmbTLTOrganisation = (cmbTLTOrganisationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTLTOrganisationComboBox.class, m_cmbTLTOrganisationTemp);
						super.addComboBox(cmbTLTOrganisation);
						RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 208, 192, 480, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbOtherTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 3004), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbOtherTemp);
						cmbOtherComboBox cmbOther = (cmbOtherComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOtherComboBox.class, m_cmbOtherTemp);
						super.addComboBox(cmbOther);
						RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 208, 152, 480, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbTLTDischTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 5010), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbTLTDischTypeTemp);
						cmbTLTDischTypeComboBox cmbTLTDischType = (cmbTLTDischTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTLTDischTypeComboBox.class, m_cmbTLTDischTypeTemp);
						super.addComboBox(cmbTLTDischType);
				
						// RadioButton Controls
						RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
						super.addControl(tmpGroup1);
						Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
						Group1.setContext(startTabIndex, designSize, runtimeSize);
						super.addRadioButton(Group1);
					}
		
					public ims.core.forms.authoringinfo.IComponent ccAuthoring()
					{
						return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
					}
					public void setccAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
					}
					public void setccAuthoringVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(1)).setVisible(value);
					}
					public boolean isccAuthoringVisible()
					{
						return ((ims.framework.Control)super.getControl(1)).isVisible();
					}
					public void setccAuthoringEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(1)).setEnabled(value);
					}
					public boolean isccAuthoringEnabled()
					{
						return ((ims.framework.Control)super.getControl(1)).isEnabled();
					}
					public Label lblOnwardInstructions()
					{
						return (Label)super.getControl(2);
					}
					public Label lblOnward2()
					{
						return (Label)super.getControl(3);
					}
					public Label lblOnward1()
					{
						return (Label)super.getControl(4);
					}
					public Label lblDischargeDate()
					{
						return (Label)super.getControl(5);
					}
					public Label lblSecond()
					{
						return (Label)super.getControl(6);
					}
					public Label lblOther()
					{
						return (Label)super.getControl(7);
					}
					public Label lblDischargeType()
					{
						return (Label)super.getControl(8);
					}
					public Button btnCancelTLTOutcome()
					{
						return (Button)super.getControl(9);
					}
					public Button btnSaveTLTOutcome()
					{
						return (Button)super.getControl(10);
					}
					public Button btnEditTLTOutcome()
					{
						return (Button)super.getControl(11);
					}
					public TextBox txtTLTOnwardReferralInstructions()
					{
						return (TextBox)super.getControl(12);
					}
					public DateControl dteTLTDischDate()
					{
						return (DateControl)super.getControl(13);
					}
					public cmbTLTOnwardReferralComboBox cmbTLTOnwardReferral()
					{
						return (cmbTLTOnwardReferralComboBox)super.getComboBox(0);
					}
					public cmbTLTOrganisationComboBox cmbTLTOrganisation()
					{
						return (cmbTLTOrganisationComboBox)super.getComboBox(1);
					}
					public cmbOtherComboBox cmbOther()
					{
						return (cmbOtherComboBox)super.getComboBox(2);
					}
					public cmbTLTDischTypeComboBox cmbTLTDischType()
					{
						return (cmbTLTDischTypeComboBox)super.getComboBox(3);
					}
					public Group1RadioButton Group1()
					{
						return (Group1RadioButton)super.getRadioButton(0);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 808, 544, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabPageTLTNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Notes", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPageTLTNotesContainer m_tabPageTLTNotesContainer = (tabPageTLTNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTLTNotesContainer.class, m_tabPageTLTNotes, factory);
					super.addContainer(m_tabPageTLTNotes, m_tabPageTLTNotesContainer);
					ims.framework.utils.SizeInfo m_tabPageTLTNotesDesignSize = new ims.framework.utils.SizeInfo(808, 544);
					ims.framework.utils.SizeInfo m_tabPageTLTNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper26.getWidth(), anchoringHelper26.getHeight());
					m_tabPageTLTNotesContainer.setContext(form, appForm, m_tabPageTLTNotes, loader, form_images_local, startControlID, m_tabPageTLTNotesDesignSize, m_tabPageTLTNotesRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 808, 544, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabPageTLTOutcome = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Outcome", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPageTLTOutcomeContainer m_tabPageTLTOutcomeContainer = (tabPageTLTOutcomeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTLTOutcomeContainer.class, m_tabPageTLTOutcome, factory);
					super.addContainer(m_tabPageTLTOutcome, m_tabPageTLTOutcomeContainer);
					ims.framework.utils.SizeInfo m_tabPageTLTOutcomeDesignSize = new ims.framework.utils.SizeInfo(808, 544);
					ims.framework.utils.SizeInfo m_tabPageTLTOutcomeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper27.getWidth(), anchoringHelper27.getHeight());
					m_tabPageTLTOutcomeContainer.setContext(form, appForm, m_tabPageTLTOutcome, loader, form_images_local, startControlID, m_tabPageTLTOutcomeDesignSize, m_tabPageTLTOutcomeRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabPageTLTNotes().setVisible(false);
					tabPageTLTOutcome().setVisible(false);
				}
				public void settabPageTLTNotesEnabled(boolean value)
				{
					tabPageTLTNotes().setEnabled(value);
				}
				public void settabPageTLTOutcomeEnabled(boolean value)
				{
					tabPageTLTOutcome().setEnabled(value);
				}
				public void showtabPageTLTNotes()
				{
					tabPageTLTOutcome().setVisible(false);
					tabPageTLTNotes().setVisible(true);
				}
				public void showtabPageTLTOutcome()
				{
					tabPageTLTNotes().setVisible(false);
					tabPageTLTOutcome().setVisible(true);
				}
		
				public tabPageTLTNotesContainer tabPageTLTNotes()
				{
					return (tabPageTLTNotesContainer)super.layers.get(0);
				}
				public tabPageTLTOutcomeContainer tabPageTLTOutcome()
				{
					return (tabPageTLTOutcomeContainer)super.layers.get(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrTLTLayer m_lyrTLTLayer = (lyrTLTLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTLTLayer.class, this, factory);
				super.addLayer(m_lyrTLTLayer);
				m_lyrTLTLayer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
			}

			public lyrTLTLayer lyrTLT()
			{
				return (lyrTLTLayer)super.getLayer(0);
			}
		}
		public static class tabFinalReportContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 5018), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public HTMLViewer htmPreview()
			{
				return (HTMLViewer)super.getControl(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 824, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPatientDocuments = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pat Docs", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPatientDocumentsContainer m_tabPatientDocumentsContainer = (tabPatientDocumentsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPatientDocumentsContainer.class, m_tabPatientDocuments, factory);
			super.addContainer(m_tabPatientDocuments, m_tabPatientDocumentsContainer);
			ims.framework.utils.SizeInfo m_tabPatientDocumentsDesignSize = new ims.framework.utils.SizeInfo(824, 584);
			ims.framework.utils.SizeInfo m_tabPatientDocumentsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper29.getWidth(), anchoringHelper29.getHeight());
			m_tabPatientDocumentsContainer.setContext(form, appForm, m_tabPatientDocuments, loader, form_images_local, startControlID, m_tabPatientDocumentsDesignSize, m_tabPatientDocumentsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 824, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClinicalNote = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinical Notes", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabClinicalNoteContainer m_tabClinicalNoteContainer = (tabClinicalNoteContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClinicalNoteContainer.class, m_tabClinicalNote, factory);
			super.addContainer(m_tabClinicalNote, m_tabClinicalNoteContainer);
			ims.framework.utils.SizeInfo m_tabClinicalNoteDesignSize = new ims.framework.utils.SizeInfo(824, 584);
			ims.framework.utils.SizeInfo m_tabClinicalNoteRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper30.getWidth(), anchoringHelper30.getHeight());
			m_tabClinicalNoteContainer.setContext(form, appForm, m_tabClinicalNote, loader, form_images_local, startControlID, m_tabClinicalNoteDesignSize, m_tabClinicalNoteRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 824, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPrescription = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pres", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPrescriptionContainer m_tabPrescriptionContainer = (tabPrescriptionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPrescriptionContainer.class, m_tabPrescription, factory);
			super.addContainer(m_tabPrescription, m_tabPrescriptionContainer);
			ims.framework.utils.SizeInfo m_tabPrescriptionDesignSize = new ims.framework.utils.SizeInfo(824, 584);
			ims.framework.utils.SizeInfo m_tabPrescriptionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper31.getWidth(), anchoringHelper31.getHeight());
			m_tabPrescriptionContainer.setContext(form, appForm, m_tabPrescription, loader, form_images_local, startControlID, m_tabPrescriptionDesignSize, m_tabPrescriptionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 824, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOutcome = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Outcome", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOutcomeContainer m_tabOutcomeContainer = (tabOutcomeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOutcomeContainer.class, m_tabOutcome, factory);
			super.addContainer(m_tabOutcome, m_tabOutcomeContainer);
			ims.framework.utils.SizeInfo m_tabOutcomeDesignSize = new ims.framework.utils.SizeInfo(824, 584);
			ims.framework.utils.SizeInfo m_tabOutcomeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper32.getWidth(), anchoringHelper32.getHeight());
			m_tabOutcomeContainer.setContext(form, appForm, m_tabOutcome, loader, form_images_local, startControlID, m_tabOutcomeDesignSize, m_tabOutcomeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 824, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTLT = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"TLT", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTLTContainer m_tabTLTContainer = (tabTLTContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTLTContainer.class, m_tabTLT, factory);
			super.addContainer(m_tabTLT, m_tabTLTContainer);
			ims.framework.utils.SizeInfo m_tabTLTDesignSize = new ims.framework.utils.SizeInfo(824, 584);
			ims.framework.utils.SizeInfo m_tabTLTRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper33.getWidth(), anchoringHelper33.getHeight());
			m_tabTLTContainer.setContext(form, appForm, m_tabTLT, loader, form_images_local, startControlID, m_tabTLTDesignSize, m_tabTLTRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 824, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabFinalReport = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Discharge Report", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabFinalReportContainer m_tabFinalReportContainer = (tabFinalReportContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabFinalReportContainer.class, m_tabFinalReport, factory);
			super.addContainer(m_tabFinalReport, m_tabFinalReportContainer);
			ims.framework.utils.SizeInfo m_tabFinalReportDesignSize = new ims.framework.utils.SizeInfo(824, 584);
			ims.framework.utils.SizeInfo m_tabFinalReportRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper34.getWidth(), anchoringHelper34.getHeight());
			m_tabFinalReportContainer.setContext(form, appForm, m_tabFinalReport, loader, form_images_local, startControlID, m_tabFinalReportDesignSize, m_tabFinalReportRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNote().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabTLT().setVisible(false);
			tabFinalReport().setVisible(false);
		}
		public void settabPatientDocumentsEnabled(boolean value)
		{
			tabPatientDocuments().setEnabled(value);
		}
		public void settabClinicalNoteEnabled(boolean value)
		{
			tabClinicalNote().setEnabled(value);
		}
		public void settabPrescriptionEnabled(boolean value)
		{
			tabPrescription().setEnabled(value);
		}
		public void settabOutcomeEnabled(boolean value)
		{
			tabOutcome().setEnabled(value);
		}
		public void settabTLTEnabled(boolean value)
		{
			tabTLT().setEnabled(value);
		}
		public void settabFinalReportEnabled(boolean value)
		{
			tabFinalReport().setEnabled(value);
		}
		public void showtabPatientDocuments()
		{
			tabClinicalNote().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabTLT().setVisible(false);
			tabFinalReport().setVisible(false);
			tabPatientDocuments().setVisible(true);
		}
		public void showtabClinicalNote()
		{
			tabPatientDocuments().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabTLT().setVisible(false);
			tabFinalReport().setVisible(false);
			tabClinicalNote().setVisible(true);
		}
		public void showtabPrescription()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNote().setVisible(false);
			tabOutcome().setVisible(false);
			tabTLT().setVisible(false);
			tabFinalReport().setVisible(false);
			tabPrescription().setVisible(true);
		}
		public void showtabOutcome()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNote().setVisible(false);
			tabPrescription().setVisible(false);
			tabTLT().setVisible(false);
			tabFinalReport().setVisible(false);
			tabOutcome().setVisible(true);
		}
		public void showtabTLT()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNote().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabFinalReport().setVisible(false);
			tabTLT().setVisible(true);
		}
		public void showtabFinalReport()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNote().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabTLT().setVisible(false);
			tabFinalReport().setVisible(true);
		}

		public tabPatientDocumentsContainer tabPatientDocuments()
		{
			return (tabPatientDocumentsContainer)super.layers.get(0);
		}
		public tabClinicalNoteContainer tabClinicalNote()
		{
			return (tabClinicalNoteContainer)super.layers.get(1);
		}
		public tabPrescriptionContainer tabPrescription()
		{
			return (tabPrescriptionContainer)super.layers.get(2);
		}
		public tabOutcomeContainer tabOutcome()
		{
			return (tabOutcomeContainer)super.layers.get(3);
		}
		public tabTLTContainer tabTLT()
		{
			return (tabTLTContainer)super.layers.get(4);
		}
		public tabFinalReportContainer tabFinalReport()
		{
			return (tabFinalReportContainer)super.layers.get(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(824, 600);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ExaminationNotes = new LocalFormName(134150);
				OnExaminationPreview = new LocalFormName(134176);
			}
			public final FormName ExaminationNotes;
			public final FormName OnExaminationPreview;
		}

		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Clinical = new ClinicalImages();
			Admin = new AdminImages();
			RefMan = new RefManImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				History = new ImageHelper(102341, "Images/Core/URL-history-24x24.png", new Integer(24), new Integer(24));
				HTMLView48 = new ImageHelper(102444, "Images/Core/html_view_48.png", new Integer(48), new Integer(48));
				PDFIcon = new ImageHelper(102294, "Images/Core/pdf.gif", new Integer(16), new Integer(16));
				AddressUpdate48 = new ImageHelper(102491, "Images/Core/adress_book_up_48.png", new Integer(48), new Integer(48));
				Observation48 = new ImageHelper(102348, "Images/Core/observation_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image History;
			public final ims.framework.utils.Image HTMLView48;
			public final ims.framework.utils.Image PDFIcon;
			public final ims.framework.utils.Image AddressUpdate48;
			public final ims.framework.utils.Image Observation48;
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				ClinicalNoteDrawing48 = new ImageHelper(123120, "Images/Clinical/clinical_note_drawing_48.png", new Integer(48), new Integer(48));
				DiagnosisComplications48 = new ImageHelper(123121, "Images/Clinical/diagnosis_complications_48.png", new Integer(48), new Integer(48));
				PatientDiagnosisChecklist48 = new ImageHelper(123125, "Images/Clinical/patient_diagnosis_checklist_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image ClinicalNoteDrawing48;
			public final ims.framework.utils.Image DiagnosisComplications48;
			public final ims.framework.utils.Image PatientDiagnosisChecklist48;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Outcome48 = new ImageHelper(103342, "Images/Admin/outcome_48.png", new Integer(48), new Integer(48));
				Notes48 = new ImageHelper(103293, "Images/Admin/notes_48.png", new Integer(48), new Integer(48));
				PresentingDetails48 = new ImageHelper(103323, "Images/Admin/presenting_details_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image Outcome48;
			public final ims.framework.utils.Image Notes48;
			public final ims.framework.utils.Image PresentingDetails48;
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				DischargeOutcome48 = new ImageHelper(134102, "Images/RefMan/discharge_outcome_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image DischargeOutcome48;
		}
		public final CoreImages Core;
		public final ClinicalImages Clinical;
		public final AdminImages Admin;
		public final RefManImages RefMan;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_SelectedTab = new ims.framework.ContextVariable("SelectedTab", prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__SelectedTab_" + componentIdentifier + "");
			cxl_CurrentReferralOutcome = new ims.framework.ContextVariable("CurrentReferralOutcome", prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__CurrentReferralOutcome_" + componentIdentifier + "");
			cxl_AllSuppliers = new ims.framework.ContextVariable("AllSuppliers", prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__AllSuppliers_" + componentIdentifier + "");
			cxl_MessageBoxId = new ims.framework.ContextVariable("MessageBoxId", prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__MessageBoxId_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.onExaminationVo getSelectedRecord()
		{
			return (ims.RefMan.vo.onExaminationVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.RefMan.vo.onExaminationVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getSelectedTabIsNotNull()
		{
			return !cxl_SelectedTab.getValueIsNull(context);
		}
		public ims.RefMan.vo.enums.OnExaminationSelectedTab getSelectedTab()
		{
			return (ims.RefMan.vo.enums.OnExaminationSelectedTab)cxl_SelectedTab.getValue(context);
		}
		public void setSelectedTab(ims.RefMan.vo.enums.OnExaminationSelectedTab value)
		{
			cxl_SelectedTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedTab = null;
		public boolean getCurrentReferralOutcomeIsNotNull()
		{
			return !cxl_CurrentReferralOutcome.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralOutcomeVo getCurrentReferralOutcome()
		{
			return (ims.RefMan.vo.ReferralOutcomeVo)cxl_CurrentReferralOutcome.getValue(context);
		}
		public void setCurrentReferralOutcome(ims.RefMan.vo.ReferralOutcomeVo value)
		{
			cxl_CurrentReferralOutcome.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentReferralOutcome = null;
		public boolean getAllSuppliersIsNotNull()
		{
			return !cxl_AllSuppliers.getValueIsNull(context);
		}
		public ims.core.vo.OrgLiteVoCollection getAllSuppliers()
		{
			return (ims.core.vo.OrgLiteVoCollection)cxl_AllSuppliers.getValue(context);
		}
		public void setAllSuppliers(ims.core.vo.OrgLiteVoCollection value)
		{
			cxl_AllSuppliers.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllSuppliers = null;
		public boolean getMessageBoxIdIsNotNull()
		{
			return !cxl_MessageBoxId.getValueIsNull(context);
		}
		public Integer getMessageBoxId()
		{
			return (Integer)cxl_MessageBoxId.getValue(context);
		}
		public void setMessageBoxId(Integer value)
		{
			cxl_MessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxId = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[82];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_RefMan.OnExamComponent", "BO-1096100013-ID", "ID_CorrespondenceNote");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_RefMan.OnExamComponent", "BO-1096100013-CARECONTEXT", "CareContext");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_RefMan.OnExamComponent", "BO-1096100013-RECORDINGDATETIME", "RecordingDateTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_RefMan.OnExamComponent", "BO-1096100013-NOTE", "Note");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_RefMan.OnExamComponent", "BO-1096100013-NOTETYPE", "NoteType");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100003-ID", "ID_OnExamination");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100003-CATSREFERRAL", "CatsReferral");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100003-RELEVANTPMH", "RelevantPMH");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__CurrentReferralOutcome_" + componentIdentifier, "BO-1096100005-ID", "ID_ReferralOutcome");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__CurrentReferralOutcome_" + componentIdentifier, "BO-1096100005-CATSREFERRAL", "CatsReferral");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.OnExaminationComponent.__internal_x_context__CurrentReferralOutcome_" + componentIdentifier, "BO-1096100005-CATSFINALREPORTSTATUS", "CatsFinalReportStatus");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
