// This code was generated by Ander Telleria using IMS Development Environment (version 1.65 build 3159.24578)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.
	
package ims.RefMan.forms.onexaminationcomponent;
	
import ims.RefMan.forms.onexaminationcomponent.GenForm.lyr1Layer.tabTLTContainer.lyrTLTLayer.tabPageTLTOutcomeContainer.Group1Enumeration;
import ims.RefMan.helper.CatsReferralReportBuilder;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralStatusVoCollection;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.FurtherManagementDetailsVo;
import ims.RefMan.vo.FurtherManagementDetailsVoCollection;
import ims.RefMan.vo.OnwardReferralVo;
import ims.RefMan.vo.OnwardReferralVoCollection;
import ims.RefMan.vo.ReferralDischargeVo;
import ims.RefMan.vo.ReferralDischargeVoCollection;
import ims.RefMan.vo.ReferralOutcomeVo;
import ims.RefMan.vo.onExaminationVo;
import ims.RefMan.vo.enums.OnExaminationSelectedTab;
import ims.RefMan.vo.lookups.DischargeToGPDetailsReviewStatus;
import ims.RefMan.vo.lookups.DischargeType;
import ims.RefMan.vo.lookups.FollowupManagementType;
import ims.RefMan.vo.lookups.OnwardReferralStatus;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralNoteType;
import ims.RefMan.vo.lookups.ReportStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.OrgLiteVoCollection;
import ims.core.vo.ReferralNoteVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.enums.DocumentViewLevel;
import ims.core.vo.enums.UploadDocumentStoreLevel;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVoCollection;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.zip.CRC32;

import com.ims.query.builder.client.exceptions.QueryBuilderClientException;
import com.ims.query.server.ResultCollection;
import com.ims.query.server.ResultHolder;
	
public class Logic extends BaseLogic
{			
	private static final long serialVersionUID = 1L;

	private static final Integer CATS_FINAL_REPORT_ID = 130;
	private static final Integer RESULT_INVESTIGATION_REPORT = 309;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
	
		form.getGlobalContext().RefMan.setShowTLTTabs(false);

		onExaminationVo list = domain.getOnExamination(form.getGlobalContext().RefMan.getCatsReferral());
		form.getLocalContext().setSelectedRecord(list);			
				
		form.lyr1().tabTLT().setHeaderVisible(false);
	}
	
	@Override
	protected void onFormModeChanged()
	{		
		form.fireCustomControlValueChanged();
	}

	public void initialize()
	{
		if (form.getMode().equals(FormMode.EDIT))
			return;
	
		form.lyr1().showtabPatientDocuments();//	WDEV-13943
		onlyr1TabChanged(form.lyr1().tabPatientDocuments());//	WDEV-13943
		
		open();
	}

	protected onExaminationVo populateDataFromScreen()
	{
		onExaminationVo voExam = new onExaminationVo();
		ReferralNoteVo voNote = new ReferralNoteVo();

		
		if (voNote.getCareContext() == null)
			voNote.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());//wdev-17849

		if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			voExam = form.getLocalContext().getSelectedRecord();
			voNote = form.getLocalContext().getSelectedRecord().getClinicalNote();
		}
		else
		{
			
			voNote.setNoteType(ReferralNoteType.CLINICAL);
		}

		voExam.setClinicalNote(voNote);
		
		return voExam;
	}
	
	private void open() 
	{
		if(form.getGlobalContext().RefMan.getIsProviderCancellationIsNotNull()
			&& 	form.getGlobalContext().RefMan.getIsProviderCancellation())
		{
			form.setMode(FormMode.VIEW);
		}
		
		if(domain.isThereFurtherManagementOfTypeTLT(form.getGlobalContext().RefMan.getCatsReferral()))
		{
			form.getGlobalContext().RefMan.setShowTLTTabs(true);
			form.lyr1().tabTLT().setHeaderVisible(true);
		}
		
		form.lyr1().tabTLT().setHeaderVisible(form.getGlobalContext().RefMan.getShowTLTTabs());
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result)
			throws PresentationLogicException 
	{	
		
	}

	protected void onlyr1TabChanged(LayerBridge tab) 
	{
		boolean isProviderCancellation = form.getGlobalContext().RefMan.getIsProviderCancellationIsNotNull() && form.getGlobalContext().RefMan.getIsProviderCancellation();
		
		if (form.getGlobalContext().RefMan.getIsComponentInEditModeIsNotNull() &&		
			 form.getGlobalContext().RefMan.getIsComponentInEditMode().equals(FormMode.EDIT))
		{
			return;
		}
		
		if (tab.equals(form.lyr1().tabPatientDocuments())) 
		{
			form.getLocalContext().setSelectedTab(OnExaminationSelectedTab.PATIENT_DOCUMENTS);
			form.lyr1().tabPatientDocuments().ccDocuments().initialize(null, UploadDocumentStoreLevel.REFERRAL,DocumentViewLevel.REFERRAL);//WDEV-12242			
		}
		else if(tab.equals(form.lyr1().tabClinicalNote()))//WDEV-13943
		{
			form.getLocalContext().setSelectedTab(OnExaminationSelectedTab.CLINICAL_NOTES);
			form.lyr1().tabClinicalNote().ccClinicalNote().initialize(isProviderCancellation);
		}
		else if (tab.equals(form.lyr1().tabPrescription()))
		{
			form.getLocalContext().setSelectedTab(OnExaminationSelectedTab.PRESCRIPTIONS);
			form.lyr1().tabPrescription().ccPrescription().initialize(isProviderCancellation, null);
		}
		else if (tab.equals(form.lyr1().tabOutcome())) 
		{
			form.getLocalContext().setSelectedTab(OnExaminationSelectedTab.OUTCOME);
			form.lyr1().tabOutcome().ccOutcome().initialize(isProviderCancellation,null,null,null);
		}
		else if (tab.equals(form.lyr1().tabTLT())) 
		{
			form.getLocalContext().setSelectedTab(OnExaminationSelectedTab.TLT);
			form.lyr1().tabTLT().lyrTLT().tabPageTLTNotes().ccTLT().initialize(isProviderCancellation, null);
			
			if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().isVisible())
			{
				openTLTOutcome();				
			}
		}
		else if (tab.equals(form.lyr1().tabFinalReport())) 
		{
			form.getLocalContext().setSelectedTab(OnExaminationSelectedTab.FINAL_REPORT);
			buildFinalReport();
		}			
	}

	private void buildFinalReport() 
	{						
		try
		{
		// Get CATS Referral Discharge Report
		String[] coverReport = domain.getSystemReportAndTemplate(CATS_FINAL_REPORT_ID);
		
		// Check for report and template
		if (coverReport == null || coverReport.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}

		if (coverReport[0] == null || coverReport[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}

		// Get investigation report
		String[] investigationReport = domain.getSystemReportAndTemplate(RESULT_INVESTIGATION_REPORT);
		
		// Check for report and template
		if (coverReport == null || coverReport.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}

		if (coverReport[0] == null || coverReport[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		
		// Get order investigation
		OrderInvestigationRefVoCollection investigationList = domain.listInvestigations(form.getGlobalContext().RefMan.getCatsReferral());
		
		// Build CATS Referral Discharge Report (Final or Interim)
		CatsReferralReportBuilder reportBuilder = new CatsReferralReportBuilder();

		// Return content of the CATS Referral Discharge Report
		byte[] buffer = reportBuilder.getCatsReferralFinalDischargeReport(form.getGlobalContext().RefMan.getCatsReferral(), investigationList, coverReport, investigationReport, engine.getSessionId());

		
		if (buffer == null)
		{
			engine.showMessage("PDF size is zero.");
			return;
		}

			// Build checksum
			CRC32 crc = new CRC32();
			crc.reset();
			crc.update(buffer);

			// Build unique key
			String key = String.valueOf(System.currentTimeMillis());
			key += engine.getSessionId() != null ? engine.getSessionId() : "";
			key += String.valueOf(crc.getValue());

			// Add PDF byte array
			ResultCollection.putResult(key, new ResultHolder(buffer, "application/pdf"));

			// Code to preview a PDF byte array
			String urlToOpen = getQueryServerRoot() + "/ReturnAsUrlServlet?action=getResult&id=" + key + "&appservername=" + InetAddress.getLocalHost().getHostName();

			if (urlToOpen != null)
			{
				form.lyr1().tabFinalReport().htmPreview().setHTML("<IFRAME id=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + urlToOpen + "'></IFRAME>");
			}
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage(e.getMessage());
			return;
		} 

		catch (UnknownHostException e)
		{
			engine.showMessage("Error creating report: " + e.getMessage());
			e.printStackTrace();
			return;
		}
	}
	
	private String getQueryServerRoot()
	{
		String root = ConfigFlag.GEN.QUERY_SERVER_URL.getValue().trim();

		if (root.endsWith("/"))
			root = root.substring(0, root.length() - 1);

		if (root.endsWith("/ReportBuilder"))
		{
			int index = root.lastIndexOf("/");

			if (index > -1)
			{
				return root.substring(0, index);
			}
		}

		return root;
	}

	
	private void disableOrEnableTabs()
	{
		if (form.getLocalContext().getSelectedTabIsNotNull() && 
				form.getGlobalContext().RefMan.getIsComponentInEditModeIsNotNull())
		{
			if (form.getGlobalContext().RefMan.getIsComponentInEditMode().equals(FormMode.EDIT))
			{
				form.setMode(FormMode.EDIT);
				OnExaminationSelectedTab tab = form.getLocalContext().getSelectedTab();
				
				form.lyr1().tabPatientDocuments().setHeaderEnabled(tab.equals(OnExaminationSelectedTab.PATIENT_DOCUMENTS) ?  true : false);
				form.lyr1().tabClinicalNote().setHeaderEnabled(tab.equals(OnExaminationSelectedTab.CLINICAL_NOTES) ? true : false);//	WDEV-13943				
				form.lyr1().tabPrescription().setHeaderEnabled(tab.equals(OnExaminationSelectedTab.PRESCRIPTIONS) ? true : false);
				form.lyr1().tabOutcome().setHeaderEnabled(tab.equals(OnExaminationSelectedTab.OUTCOME) ? true : false);
				form.lyr1().tabTLT().setHeaderEnabled(tab.equals(OnExaminationSelectedTab.TLT) ? true : false);
				form.lyr1().tabFinalReport().setHeaderEnabled(tab.equals(OnExaminationSelectedTab.FINAL_REPORT) ? true : false);
			}
			else
			{
				form.setMode(FormMode.VIEW);
				form.lyr1().tabPatientDocuments().setHeaderEnabled(true);
				form.lyr1().tabClinicalNote().setHeaderEnabled(true);//	WDEV-13943			
				form.lyr1().tabPrescription().setHeaderEnabled(true);
				form.lyr1().tabOutcome().setHeaderEnabled(true);
				form.lyr1().tabTLT().setHeaderEnabled(true);
				form.lyr1().tabFinalReport().setHeaderEnabled(true);
			}
		}
		else
		{
			form.setMode(FormMode.VIEW);
			form.lyr1().tabPatientDocuments().setHeaderEnabled(true);
			form.lyr1().tabClinicalNote().setHeaderEnabled(true);//	WDEV-13943				
			form.lyr1().tabPrescription().setHeaderEnabled(true);
			form.lyr1().tabOutcome().setHeaderEnabled(true);
			form.lyr1().tabTLT().setHeaderEnabled(true);
			form.lyr1().tabFinalReport().setHeaderEnabled(true);
		}
	}

	
	//	WDEV-13943
	@Override
	protected void onCcClinicalNoteValueChanged() throws PresentationLogicException 
	{
		if (form.getGlobalContext().RefMan.getIsComponentInEditModeIsNotNull())
		{
			disableOrEnableTabs();
			form.fireCustomControlValueChanged();
		}									
	}

	@Override
	protected void onCcDocumentsValueChanged()
			throws PresentationLogicException 
	{
	}

	@Override
	protected void onCcOutcomeValueChanged() throws PresentationLogicException
	{
		if (form.getGlobalContext().RefMan.getShowTLTTabsIsNotNull())
		{
			form.lyr1().tabTLT().setHeaderVisible(form.getGlobalContext().RefMan.getShowTLTTabs());
		}
		if (form.getGlobalContext().RefMan.getIsComponentInEditModeIsNotNull())
		{
			disableOrEnableTabs();
			form.fireCustomControlValueChanged();
		}	
	}

	@Override
	protected void onCcPrescriptionValueChanged()
			throws PresentationLogicException 
	{
		if (form.getGlobalContext().RefMan.getIsComponentInEditModeIsNotNull())
		{
			disableOrEnableTabs();
			form.fireCustomControlValueChanged();
		}			
	}
	
	@Override
	protected void onCcTLTValueChanged() throws PresentationLogicException 
	{
		if (form.getGlobalContext().RefMan.getIsComponentInEditModeIsNotNull())
		{
			disableOrEnableTabs();
			form.fireCustomControlValueChanged();
		}			
	}


	@Override
	protected void onBtnCancelTLTOutcomeClick()
			throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		openTLTOutcome();

		form.lyr1().tabTLT().lyrTLT().tabPageTLTNotes().setHeaderEnabled(true);
		form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.VIEW);
		disableOrEnableTabs();
		form.fireCustomControlValueChanged();
	}


	@Override
	protected void onBtnSaveTLTOutcomeClick() throws PresentationLogicException 
	{	
		if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().getValue().equals(Group1Enumeration.None))
		{
			engine.showMessage("Please select DischargePatient or ReferBackToConsultant");
			return;
		}
		
		if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().ccAuthoring().getValue() == null ||
				(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().ccAuthoring().getValue() != null &&
						(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().ccAuthoring().getValue().getAuthoringHcp() == null ||
								form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().ccAuthoring().getValue().getAuthoringDateTime() == null)))
		{
			if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().getValue().equals(Group1Enumeration.rdoDischargePatient)) {
				engine.showMessage("Discharging HCP/DateTime is mandatory");
			}
			else if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().getValue().equals(Group1Enumeration.rdoReferBackToConsultant)) {
				engine.showMessage("Authoring HCP/DateTime is mandatory");
			}
			
			return;
		}
		
		ReferralOutcomeVo voRefOutcome = null;
		if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().getValue().equals(Group1Enumeration.rdoDischargePatient))			
		{
			voRefOutcome = populateOutcomeDataFromScreenforDischarge();			
		}
		else if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().getValue().equals(Group1Enumeration.rdoReferBackToConsultant))			
		{
			voRefOutcome = populateOutcomeDataFromScreenforFurtherManagement();
		}				
		
		if (voRefOutcome == null)
			return;
		
		String[] str = null;
		str = voRefOutcome.validate(str);
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return;
		}
		
		
		
		form.getLocalContext().setCurrentReferralOutcome(voRefOutcome);
		if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().getValue().equals(Group1Enumeration.rdoReferBackToConsultant))			
		{
			if (save())
			{
				openTLTOutcome();
				
				form.lyr1().tabTLT().lyrTLT().tabPageTLTNotes().setHeaderEnabled(true);
				form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.VIEW);
				disableOrEnableTabs();
				form.fireCustomControlValueChanged();
			}

			return;
		}
		
		
		int msgBoxID = engine.showMessage("Are you sure you wish to discharge this patient ?", "Discharge Patient" , MessageButtons.YESNO);
		form.getLocalContext().setMessageBoxId(msgBoxID);
	}

	private ReferralOutcomeVo populateOutcomeDataFromScreenforFurtherManagement() 
	{
		ReferralOutcomeVo voRef = form.getLocalContext().getCurrentReferralOutcome();
		if (voRef == null)
			return null;
		
		AuthoringInformationVo voAuth = new AuthoringInformationVo();
		voAuth.setAuthoringDateTime(new DateTime());
		HcpLiteVo hcpVo = new HcpLiteVo();
		hcpVo.setID_Hcp(engine.getLoggedInUser().getHcpId());
		voAuth.setAuthoringHcp(hcpVo);


		voRef.setAuthoringInformation(voAuth);		

		FurtherManagementDetailsVoCollection voFurtherManageColl = voRef.getFurtherManagementDetails();
		if (voFurtherManageColl == null)
			voFurtherManageColl = new FurtherManagementDetailsVoCollection();
		
		FurtherManagementDetailsVo voFurtherManage = new FurtherManagementDetailsVo();
		
		voFurtherManage.setFollowupType(FollowupManagementType.REFER_BACK_TO_CONSULTANT);
		voFurtherManage.setAuthoringInformation(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().ccAuthoring().getValue());		
		voFurtherManage.setRecordingInformation(populateRecordinfInfo());
		
		voFurtherManageColl.add(voFurtherManage);
		voRef.setFurtherManagementDetails(voFurtherManageColl);		
		
		return voRef;
	}

	@Override
	protected void onlyrTLTTabChanged(LayerBridge tab) 
	{
		if (tab.equals(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome()))
			openTLTOutcome();
	}

	@Override
	protected void onBtnEditTLTOutcomeClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		openTLTOutcome();

		form.lyr1().tabTLT().lyrTLT().tabPageTLTNotes().setHeaderEnabled(false);
		form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.EDIT);
		disableOrEnableTabs();
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onCmbTLTDischTypeValueChanged() throws PresentationLogicException 
	{
		manageDischargeTypeValueChanged();
	}

	private void manageDischargeTypeValueChanged() 
	{
		if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().getValue() != null 
			&& form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().getValue().equals(DischargeType.GP))
			displayDischargePatientTab(false, true, false);
		else if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().getValue() != null 
			&& form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().getValue().equals(DischargeType.SEC_CARE))
		{
			if (form.getLocalContext().getAllSuppliers() == null && form.getMode().equals(FormMode.EDIT))
				loadSuppliers();
			displayDischargePatientTab(true, false, false);
		}
		else if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().getValue() != null 
			&& form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().getValue().equals(DischargeType.OTHER))
			displayDischargePatientTab(false, false, true);
	}

	private void loadSuppliers()
	{
		OrgLiteVoCollection voColl = domain.listAllSuppliers();
		for (int i = 0 ; voColl != null && i <voColl.size() ; i++)
			form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().newRow(voColl.get(i), voColl.get(i).getName());
		
		form.getLocalContext().setAllSuppliers(voColl);
	}

	private void displayDischargePatientTab(boolean bOnward, boolean bFurther, boolean bOther) 
	{
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblOnward1().setVisible(bOnward);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblOnward2().setVisible(bOnward);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOnwardReferral().setVisible(bOnward);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOnwardReferral().setValue(null);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblOnwardInstructions().setVisible(bOnward);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().txtTLTOnwardReferralInstructions().setVisible(bOnward);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().txtTLTOnwardReferralInstructions().setValue(null);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblSecond().setVisible(bOnward);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().setVisible(bOnward);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().setValue(null);		
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblOther().setVisible(bOther);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbOther().setVisible(bOther);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbOther().setValue(null);
	
		boolean mode = form.getMode().equals(FormMode.EDIT);
		if (bOnward)
		{
			form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOnwardReferral().setEnabled(mode);
			form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().txtTLTOnwardReferralInstructions().setEnabled(mode);
			form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().setEnabled(mode);
		}

		if (bOther)
		{
			form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbOther().setEnabled(mode);
		}

		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().setEnabled(mode);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().dteTLTDischDate().setEnabled(mode);

	}

	private void openTLTOutcome() 
	{
		displayDischargePatientTab(false, false, false);

		clearInstanceControls();

		ReferralOutcomeVo voRef = domain.getReferralOutcomeFullVo(form.getGlobalContext().RefMan.getCatsReferral());
		if (voRef != null)
			populateScreenFromData(voRef);
	
		form.getLocalContext().setCurrentReferralOutcome(voRef);
		
		if(form.getMode().equals(FormMode.VIEW))
		{
			if(form.getGlobalContext().RefMan.getIsProviderCancellationIsNotNull()
				&& form.getGlobalContext().RefMan.getIsProviderCancellation())
				form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().btnEditTLTOutcome().setVisible(false);
			else
			{
				form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().btnEditTLTOutcome().setVisible(true);
				form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().btnEditTLTOutcome().setEnabled(true);
				
				form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().setValue(null);
				hideAllFields(true);
			}
		}
		
		//wdev-9028
		CatsReferralWizardVo currentCatsReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if (currentCatsReferral.getCurrentStatusIsNotNull()
				&& currentCatsReferral.getCurrentStatus().getReferralStatusIsNotNull()
				&& (currentCatsReferral.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.DISCHARGED) 
						|| currentCatsReferral.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER)))
		{			
				form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().btnEditTLTOutcome().setVisible(false);		
				form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().setValue(Group1Enumeration.rdoDischargePatient);
		}

	}

	private void clearInstanceControls() 
	{
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().ccAuthoring().initializeComponent();		
		
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().dteTLTDischDate().setValue(null);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().setValue(null);

		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().txtTLTOnwardReferralInstructions().setValue(null);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOnwardReferral().setValue(null);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().setValue(null);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbOther().setValue(null);

	}

	private AuthoringInformationVo populateRecordinfInfo()
	{
		AuthoringInformationVo authoring = new AuthoringInformationVo();
		authoring.setAuthoringDateTime(new DateTime());
		
		HcpLiteVo hcpVo = new HcpLiteVo();
		hcpVo.setID_Hcp(engine.getLoggedInUser().getHcpId());
		hcpVo.setMos(domain.getMosUser() != null ? (MemberOfStaffLiteVo) domain.getMosUser() : null);
		
		authoring.setAuthoringHcp(hcpVo);
		
		return authoring;
	}
	
	private ReferralOutcomeVo populateOutcomeDataFromScreenforDischarge() 
	{		
		ReferralOutcomeVo voRef = form.getLocalContext().getCurrentReferralOutcome();
		if (voRef == null)
			return null;
		
		voRef = (ReferralOutcomeVo) form.getLocalContext().getCurrentReferralOutcome().clone();
		
		AuthoringInformationVo voAuth = new AuthoringInformationVo();
		voAuth.setAuthoringDateTime(new DateTime());
		HcpLiteVo hcpVo = new HcpLiteVo();
		hcpVo.setID_Hcp(engine.getLoggedInUser().getHcpId());
		voAuth.setAuthoringHcp(hcpVo);

		if (voRef == null)
		{
			voRef = new ReferralOutcomeVo();
			voRef.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		}

		voRef.setAuthoringInformation(voAuth);		

		ReferralDischargeVo voDisch = voRef.getReferralDischarge();
		if (voDisch == null)
			voDisch = new ReferralDischargeVo();
			
		voDisch.setDischargingHCP(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().ccAuthoring().getValue());
		voDisch.setDischargeDate(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().dteTLTDischDate().getValue());
		voDisch.setDischargeType(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().getValue());
		voDisch.setDischargeOtherType(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbOther().getValue());
		voDisch.setRecordingInformation(populateRecordinfInfo());		
		
		if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().getValue() != null 
				&& form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().getValue().equals(DischargeType.SEC_CARE))
		{
			OnwardReferralVo voOnward = new OnwardReferralVo();				
			voOnward.setDischargeDate(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().dteTLTDischDate().getValue());
			voOnward.setOnwardReferralOrg(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().getValue());
			voOnward.setOnwardReferral(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().txtTLTOnwardReferralInstructions().getValue());
			voOnward.setOnwardReferralReason(form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOnwardReferral().getValue());
			
			voDisch.setCurrentOnwardReferral(voOnward);
				
			if (voDisch.getOnwardReferrals() == null)
				voDisch.setOnwardReferrals(new OnwardReferralVoCollection());
			
			String[] str = voOnward.validate();
//			TODO		if (str != null && str.le q	ngth > 0)
//			TODO			form.getLocalContext().setInvalidOnwardReferral(voOnward); 
			
			if (str == null)
				voDisch.getOnwardReferrals().add(voOnward);			
		}
		else
		{
			voDisch.setCurrentOnwardReferral(null);
			voDisch.setOnwardReferrals(null);
		}

		String[] str = null;	
		str = voDisch.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return null;
		}
		
		voRef.setReferralDischarge(voDisch);
		
		if (voRef.getReferralDischargeHistory() == null)
			voRef.setReferralDischargeHistory(new ReferralDischargeVoCollection());

		voRef.getReferralDischargeHistory().add(voDisch);
	
		return voRef;
	}

	private boolean save() 
	{
		String[] str = null;
		ReferralOutcomeVo voRefOutcome = form.getLocalContext().getCurrentReferralOutcome();		

		try 
		{
			CatsReferralWizardVo currentCatsReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			
			if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().getValue().equals(Group1Enumeration.rdoDischargePatient))						
			{
				if(currentCatsReferral.getIsFinalReportRequired() == null)
				{						
 					currentCatsReferral.setIsFinalReportRequired(ReportStatus.REQUIRED);
 					voRefOutcome.setCatsFinalReportStatus(ReportStatus.REQUIRED);
								
				}	
			}									
			
			str = voRefOutcome.validate(str);
			if (str != null && str.length > 0)
			{
				engine.showErrors(str);
				return false;
			}
			
			voRefOutcome = domain.saveReferralOutcome(voRefOutcome);
			
			if (voRefOutcome != null && voRefOutcome.getID_ReferralOutcomeIsNotNull())
			{											
				if (voRefOutcome.getReferralDischargeIsNotNull() && currentCatsReferral != null && currentCatsReferral.getID_CatsReferralIsNotNull())
				{
					CatsReferralStatusVoCollection voStatusColl = currentCatsReferral.getStatusHistory().sort(SortOrder.DESCENDING);
					if (!voStatusColl.get(0).getReferralStatus().equals(ReferralApptStatus.DISCHARGED))
					{					
						if (voRefOutcome.getReferralDischargeIsNotNull()
							&& voRefOutcome.getReferralDischarge().getDischargeTypeIsNotNull()
							&& ( voRefOutcome.getReferralDischarge().getDischargeType().equals(DischargeType.SEC_CARE)
								|| voRefOutcome.getReferralDischarge().getDischargeType().equals(DischargeType.OTHER)) )
						{
							updateCatsReferralStatusAndDischargeDateAndReportFlags(ReferralApptStatus.DISCHARGED, true, false, voRefOutcome, currentCatsReferral);
						}
						else if (voRefOutcome.getReferralDischargeIsNotNull()
							&& voRefOutcome.getReferralDischarge().getDischargeTypeIsNotNull()
							&& voRefOutcome.getReferralDischarge().getDischargeType().equals(DischargeType.GP) )
						{
							updateCatsReferralStatusAndDischargeDateAndReportFlags(ReferralApptStatus.DISCHARGED, true, true, voRefOutcome, currentCatsReferral);
						}
						else
							updateCatsReferralStatusAndDischargeDateAndReportFlags(ReferralApptStatus.DISCHARGED, false, false,voRefOutcome, currentCatsReferral);
						
						
						if (voRefOutcome.getReferralDischargeIsNotNull()) 
						{
							if (voRefOutcome.getReferralDischarge().getDischargeTypeIsNotNull() &&
									voRefOutcome.getReferralDischarge().getDischargeType().equals(DischargeType.SEC_CARE) &&
									voRefOutcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull() &&
									voRefOutcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralReasonIsNotNull())
							{						 							
								currentCatsReferral.setOnwardReferralReason(voRefOutcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralReason());
							}
						}
					}
				}
				
				saveCatsReferral(currentCatsReferral);
			}
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			form.setMode(FormMode.VIEW);			
			openTLTOutcome();
			return false;
		} 
		catch (StaleObjectException e) 
		{
			// WDEV-10532 - Send notification to the form containing the component
			// to re-enable the tabs on AtConsultation form.
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.setMode(FormMode.VIEW);			
			openTLTOutcome();
			form.lyr1().tabTLT().lyrTLT().tabPageTLTNotes().setHeaderEnabled(true);
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.VIEW);
			disableOrEnableTabs();
			form.fireCustomControlValueChanged();

			return false;
		} 
		form.getLocalContext().setCurrentReferralOutcome(voRefOutcome);
		form.setMode(FormMode.VIEW);			
		
		return true;
	}
	
	private void updateCatsReferralStatusAndDischargeDateAndReportFlags(ReferralApptStatus newStatus, boolean bSetOnwardReferralStatus, boolean bSetDischToGPStatus, ReferralOutcomeVo voOutcome, CatsReferralWizardVo voRefWizard)
	{		
		CatsReferralStatusVoCollection voStatusColl = voRefWizard.getStatusHistory();
			
		CatsReferralStatusVo currentStatus = new CatsReferralStatusVo(); 		
		currentStatus.setReferralStatus(newStatus);
		currentStatus.setAuthoringUser((MemberOfStaffRefVo)domain.getMosUser());
		currentStatus.setStatusDateTime(new DateTime());
			
		voRefWizard.setCurrentStatus(currentStatus);

		if (voStatusColl == null)
			voStatusColl = new CatsReferralStatusVoCollection();
			
		voStatusColl.add(currentStatus);
		voRefWizard.setStatusHistory(voStatusColl);		

		if (bSetOnwardReferralStatus)
			voRefWizard.setOnwardReferralStatus(OnwardReferralStatus.CURRENT_ONWARD_REFERRAL);		

		if(bSetDischToGPStatus)
			voRefWizard.setDischargeToGPDetailsReviewStatus(DischargeToGPDetailsReviewStatus.TO_BE_REVIEWED);		

		if (voOutcome.getReferralDischargeIsNotNull()
			&& voOutcome.getReferralDischarge().getDischargeDateIsNotNull())
			voRefWizard.setDischargeDate(voOutcome.getReferralDischarge().getDischargeDate());		
		
		//wdev-8474
		if (newStatus.equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED))
			voRefWizard.setWasFurtherManagementDetailsReviewed(null);
			
		if (voOutcome.getReferralDischargeIsNotNull()) 
		{
			if (voOutcome.getReferralDischarge().getDischargeTypeIsNotNull() &&
					voOutcome.getReferralDischarge().getDischargeType().equals(DischargeType.SEC_CARE) &&
						voOutcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull() &&
							voOutcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralReasonIsNotNull())
			{
				voRefWizard.setOnwardReferralReason(voOutcome.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralReason());
			}
			else
			{
				voRefWizard.setOnwardReferralReason(null);
			}
		}
	}
	
	private boolean saveCatsReferral(CatsReferralWizardVo currentCatsReferral) 
	{
		if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().getValue().equals(Group1Enumeration.rdoReferBackToConsultant))			
		{			
			CatsReferralStatusVoCollection voStatusColl = currentCatsReferral.getStatusHistory();			
			CatsReferralStatusVo currentStatus = new CatsReferralStatusVo(); 		
			currentStatus.setReferralStatus(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED);
			currentStatus.setAuthoringUser((MemberOfStaffRefVo)domain.getMosUser());
			currentStatus.setStatusDateTime(new DateTime());
				
			currentCatsReferral.setCurrentStatus(currentStatus);

			if (voStatusColl == null)
				voStatusColl = new CatsReferralStatusVoCollection();
				
			voStatusColl.add(currentStatus);
			currentCatsReferral.setStatusHistory(voStatusColl);		
			currentCatsReferral.setWasFurtherManagementDetailsReviewed(null);
		}
		
		String[] arrErrors = currentCatsReferral.validate();
		if(arrErrors != null) 
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try 
		{
			currentCatsReferral = domain.saveCatsReferral(currentCatsReferral);
		} 
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
			
		return true;
	}

	private void populateScreenFromData(ReferralOutcomeVo voRef)
	{
		if (voRef == null)
			return;
		
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().dteTLTDischDate().setValue(voRef.getReferralDischargeIsNotNull() && voRef.getReferralDischarge().getDischargeDateIsNotNull() ? voRef.getReferralDischarge().getDischargeDate() : null);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().setValue(voRef.getReferralDischargeIsNotNull() && voRef.getReferralDischarge().getDischargeTypeIsNotNull() ? voRef.getReferralDischarge().getDischargeType() : null);
		manageDischargeTypeValueChanged();

		if (voRef.getReferralDischargeIsNotNull())
		{
			if (voRef.getReferralDischarge().getCurrentOnwardReferralIsNotNull())
			{
				form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().txtTLTOnwardReferralInstructions().setValue(voRef.getReferralDischarge().getCurrentOnwardReferralIsNotNull() ? voRef.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferral() : null);
				form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOnwardReferral().setValue(voRef.getReferralDischarge().getCurrentOnwardReferralIsNotNull() ? voRef.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralReason() : null);
				form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().setValue(voRef.getReferralDischarge().getCurrentOnwardReferralIsNotNull() ? voRef.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralOrg() : null);
				if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().getValue() == null
					&& voRef.getReferralDischarge().getCurrentOnwardReferralIsNotNull()
					&& voRef.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralOrgIsNotNull())
				{
					form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().newRow(voRef.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralOrg(), voRef.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralOrg().getName());
					form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().setValue(voRef.getReferralDischarge().getCurrentOnwardReferral().getOnwardReferralOrg());
				}
			}			
			form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().dteTLTDischDate().setValue(voRef.getReferralDischarge().getDischargeDate());
			form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbOther().setValue(voRef.getReferralDischarge().getDischargeOtherType());
		}
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		//workaround because of framework issue		
		if (result.equals(DialogResult.YES)) 
		{
			if (form.getLocalContext().getMessageBoxIdIsNotNull() &&
					messageBoxId == form.getLocalContext().getMessageBoxId())
			{
				if (save())
				{
					openTLTOutcome();
					
					form.lyr1().tabTLT().lyrTLT().tabPageTLTNotes().setHeaderEnabled(true);
					form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.VIEW);
					disableOrEnableTabs();
					form.fireCustomControlValueChanged();
				}
				else
					return;
			}
		}
	}

	@Override
	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException 
	{	
		if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().getValue().equals(Group1Enumeration.rdoDischargePatient))			
		{
			form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().ccAuthoring().setLabels(AuthoringLabelType.DISCHARGING);
			hideAllFields(false);
			openTLTOutcome();
		}
		else if (form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().Group1().getValue().equals(Group1Enumeration.rdoReferBackToConsultant))			
		{
			form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().ccAuthoring().setLabels(AuthoringLabelType.AUTHORING);
			hideAllFields(true);
		}			
	}

	private void hideAllFields(boolean hide) 
	{
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblDischargeDate().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().dteTLTDischDate().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblDischargeType().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTDischType().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblOnward1().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblOnward2().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOnwardReferral().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblSecond().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbTLTOrganisation().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblOnwardInstructions().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().txtTLTOnwardReferralInstructions().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().lblOther().setVisible(!hide);
		form.lyr1().tabTLT().lyrTLT().tabPageTLTOutcome().cmbOther().setVisible(!hide);
	}
}
