// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referralstatuslist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTreatmentCentreComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.ContractServiceLocationsConfigVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.ContractServiceLocationsConfigVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.ContractServiceLocationsConfigVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.ContractServiceLocationsConfigVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.ContractServiceLocationsConfigVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.ContractServiceLocationsConfigVo getValue()
		{
			return (ims.RefMan.vo.ContractServiceLocationsConfigVo)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.ContractServiceLocationsConfigVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbOPDSiteComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.resource.place.vo.LocationRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.resource.place.vo.LocationRefVo getValue()
		{
			return (ims.core.resource.place.vo.LocationRefVo)super.control.getValue();
		}
		public void setValue(ims.core.resource.place.vo.LocationRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSecondOpinionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.SecondOpinionCategory value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.SecondOpinionCategory value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.SecondOpinionCategory value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.SecondOpinionCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.SecondOpinionCategory value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.SecondOpinionCategory getValue()
		{
			return (ims.RefMan.vo.lookups.SecondOpinionCategory)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.SecondOpinionCategory value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbContractComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo getValue()
		{
			return (ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbReportsRequiredComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.ReportNoteType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.ReportNoteType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.ReportNoteType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.ReportNoteType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.ReportNoteType value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.ReportNoteType getValue()
		{
			return (ims.RefMan.vo.lookups.ReportNoteType)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.ReportNoteType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbOnwardReferralReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.OnwardReferralReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.OnwardReferralReason getValue()
		{
			return (ims.RefMan.vo.lookups.OnwardReferralReason)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.OnwardReferralReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTLTTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.TLTType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.TLTType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.TLTType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.TLTType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.TLTType value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.TLTType getValue()
		{
			return (ims.RefMan.vo.lookups.TLTType)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.TLTType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbReportsRequiredSubCategoryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.ReportsRequiredSubCategory value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.ReportsRequiredSubCategory value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.ReportsRequiredSubCategory value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.ReportsRequiredSubCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.ReportsRequiredSubCategory value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.ReportsRequiredSubCategory getValue()
		{
			return (ims.RefMan.vo.lookups.ReportsRequiredSubCategory)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.ReportsRequiredSubCategory value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.ReviewType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.ReviewType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.ReviewType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.ReviewType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.ReviewType value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.ReviewType getValue()
		{
			return (ims.RefMan.vo.lookups.ReviewType)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.ReviewType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWorklistStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.ReferralWorklistStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralWorklistStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralWorklistStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralWorklistStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.ReferralWorklistStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.ReferralWorklistStatus getValue()
		{
			return (ims.RefMan.vo.lookups.ReferralWorklistStatus)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.ReferralWorklistStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbClinicComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceFunctionLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceFunctionLiteVo getValue()
		{
			return (ims.core.vo.ServiceFunctionLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceFunctionLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSpecComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceShortVo getValue()
		{
			return (ims.core.vo.ServiceShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbDOSComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.DirectoryOfServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.DirectoryOfServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.DirectoryOfServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.DirectoryOfServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.DirectoryOfServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.DirectoryOfServiceLiteVo getValue()
		{
			return (ims.scheduling.vo.DirectoryOfServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.DirectoryOfServiceLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbProcedureComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ProcedureLiteVo getValue()
		{
			return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ProcedureLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}

	public static class Group1RadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 192, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Manual", startTabIndex.intValue() + 3);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 80, 8, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "All", startTabIndex.intValue() + 1);
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 136, 8, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "CAB", startTabIndex.intValue() + 2);
		}
		public void setText(Group1Enumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public Group1Enumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return Group1Enumeration.None;
				case 0: return Group1Enumeration.rdoManual;
				case 1: return Group1Enumeration.rdoAll;
				case 2: return Group1Enumeration.rdoCAB;
			}
			return null;
		}
		public void setValue(Group1Enumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(Group1Enumeration.None.id);
		}
		public boolean isEnabled(Group1Enumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(Group1Enumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(Group1Enumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(Group1Enumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class Group1Enumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static Group1Enumeration None = new Group1Enumeration(-1);
		public static Group1Enumeration rdoManual = new Group1Enumeration(0);
		public static Group1Enumeration rdoAll = new Group1Enumeration(1);
		public static Group1Enumeration rdoCAB = new Group1Enumeration(2);
		private Group1Enumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((Group1Enumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CATSReferralFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CATSReferralFilterVo' of the global context variable 'RefMan.ReferralStatusListFilter' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.lookups.ReferralManagementContractType.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.lookups.ReferralManagementContractType' of the global context variable 'RefMan.ReferralContractTypeForPatient' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.DiagnosticReferralForApplication' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(185);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuReferralStatusListMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuReferralStatusListMenuViewDemographicsItem = factory.createMenuItem(startControlID.intValue() + 1, "View Demographics", true, false, new Integer(102223), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390001)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuViewDemographicsItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuNewReferralWizardItem = factory.createMenuItem(startControlID.intValue() + 2, "New Referral Registration", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390007)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuNewReferralWizardItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuEDIT_REFERRAL_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit Referral Details", true, false, new Integer(103102), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390025)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuEDIT_REFERRAL_DETAILSItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuPresentationItem = factory.createMenuItem(startControlID.intValue() + 4, "Presentation", true, false, new Integer(102186), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390008)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuPresentationItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuAtConsultationItem = factory.createMenuItem(startControlID.intValue() + 5, "At Consultation", true, false, new Integer(102324), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390009)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuAtConsultationItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuCALL_ATTEMPTSItem = factory.createMenuItem(startControlID.intValue() + 6, "Record call attempt", true, false, new Integer(110108), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390026)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuCALL_ATTEMPTSItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuReviewRejectedInvestigationsItem = factory.createMenuItem(startControlID.intValue() + 7, "View Rejection Details", true, false, new Integer(116134), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390010)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuReviewRejectedInvestigationsItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuVIEW_REJECTION_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 8, "NEEDS TO BE DDELETED", true, false, new Integer(116134), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390027)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuVIEW_REJECTION_DETAILSItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuFlagForReviewItem = factory.createMenuItem(startControlID.intValue() + 9, "Flag For Review", true, false, new Integer(102138), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390016)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuFlagForReviewItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuReviewFlagForReviewDetailItem = factory.createMenuItem(startControlID.intValue() + 10, "Flag for Review + Review Detail", true, false, new Integer(102340), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390017)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuReviewFlagForReviewDetailItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuNewProviderCancellationItem = factory.createMenuItem(startControlID.intValue() + 11, "New Provider Cancellation", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390018)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuNewProviderCancellationItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuEditProviderCancellationItem = factory.createMenuItem(startControlID.intValue() + 12, "Edit Provider Cancellation", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390019)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuEditProviderCancellationItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuNEWREJECTEDONWARDREFERRALItem = factory.createMenuItem(startControlID.intValue() + 13, "New Rejected Onward Referral", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390020)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuNEWREJECTEDONWARDREFERRALItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuEDITREJECTONWARDREFERRALDETAILSItem = factory.createMenuItem(startControlID.intValue() + 14, "Edit Reject Onward Referral Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390021)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuEDITREJECTONWARDREFERRALDETAILSItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuStartConsultantContactItem = factory.createMenuItem(startControlID.intValue() + 15, "Start Consultant Contact", true, false, new Integer(102316), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390028)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuStartConsultantContactItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuStartClinicalContactItem = factory.createMenuItem(startControlID.intValue() + 16, "Start Clinical Contact", true, false, new Integer(102317), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390011)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuStartClinicalContactItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuStartTLTContactItem = factory.createMenuItem(startControlID.intValue() + 17, "Start TLT Contact", true, false, new Integer(103140), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390012)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuStartTLTContactItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuEditConsultationDetailsItem = factory.createMenuItem(startControlID.intValue() + 18, "Edit Consultation Details", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390013)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuEditConsultationDetailsItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuNEWONWARDREFERRALItem = factory.createMenuItem(startControlID.intValue() + 19, "New Onward Referral", true, false, new Integer(102179), true, false);
		contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuNEWONWARDREFERRALItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuViewReferralDetailsItem = factory.createMenuItem(startControlID.intValue() + 20, "View Referral Details", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390014)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuViewReferralDetailsItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuViewConsultationDetailsItem = factory.createMenuItem(startControlID.intValue() + 21, "View Consultation Details", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390015)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuViewConsultationDetailsItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuEND_TLT_CONTACTItem = factory.createMenuItem(startControlID.intValue() + 22, "End TLT contact", true, false, new Integer(102214), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390029)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuEND_TLT_CONTACTItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuViewRejectedReferralDetailsItem = factory.createMenuItem(startControlID.intValue() + 23, "Edit Referral Rejection", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390030)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuViewRejectedReferralDetailsItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuBOOK_THEATRE_APPTItem = factory.createMenuItem(startControlID.intValue() + 24, "Book Theatre Appointment", true, false, new Integer(102254), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390043)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuBOOK_THEATRE_APPTItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuReAdmitPatientItem = factory.createMenuItem(startControlID.intValue() + 25, "Re-Admit Patient", true, false, new Integer(102311), true, false);
		contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuReAdmitPatientItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuREJECTED_ON_CABItem = factory.createMenuItem(startControlID.intValue() + 26, "Referral Rejected on CAB", true, false, new Integer(116134), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390031)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuREJECTED_ON_CABItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuPATIENT_REJ_LETTER_SENTItem = factory.createMenuItem(startControlID.intValue() + 27, "Patient Rejection Letter Sent", true, false, new Integer(102335), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390022)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuPATIENT_REJ_LETTER_SENTItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuREF_IS_PROV_CANC_ON_CABItem = factory.createMenuItem(startControlID.intValue() + 28, "Referral marked as Provider Cancellation on CAB", true, false, new Integer(116134), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390023)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuREF_IS_PROV_CANC_ON_CABItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuDOC_SENT_TO_PATIENTItem = factory.createMenuItem(startControlID.intValue() + 29, "Documentation Sent to Patient", true, false, new Integer(102335), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390024)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuDOC_SENT_TO_PATIENTItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuVIEW_DISCHARGE_SUMMARY_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 30, "View Discharge Summary Details", true, false, new Integer(123106), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390032)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuVIEW_DISCHARGE_SUMMARY_DETAILSItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuREVIEW_SUITABLE_FOR_SURGERYItem = factory.createMenuItem(startControlID.intValue() + 31, "Review Suitable for Surgery", true, false, new Integer(102332), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390034)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuREVIEW_SUITABLE_FOR_SURGERYItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuREVIEW_FITItem = factory.createMenuItem(startControlID.intValue() + 32, "Review Not Fit / Suitable for Surgery", true, false, new Integer(102266), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390033)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuREVIEW_FITItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuRESET_PROVEIDER_CANCELLATIONItem = factory.createMenuItem(startControlID.intValue() + 33, "Reset Provider Cancellation", true, false, new Integer(102311), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390035)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuRESET_PROVEIDER_CANCELLATIONItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuRESET_REJECT_REFERRALItem = factory.createMenuItem(startControlID.intValue() + 34, "Reset Referral Rejection", true, false, new Integer(102311), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390036)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuRESET_REJECT_REFERRALItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuUNDO_PROVIDER_CANCELLATIONItem = factory.createMenuItem(startControlID.intValue() + 35, "Undo Provider Cancellation", true, false, new Integer(103431), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390037)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuUNDO_PROVIDER_CANCELLATIONItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuUNDO_REFERRAL_REJECTIONItem = factory.createMenuItem(startControlID.intValue() + 36, "Undo Referral Rejection", true, false, new Integer(103432), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390038)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuUNDO_REFERRAL_REJECTIONItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuEND_OF_CAREItem = factory.createMenuItem(startControlID.intValue() + 37, "Mark Referral as End of Care", true, false, new Integer(102318), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390039)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuEND_OF_CAREItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuPOST_OP_CONTACTItem = factory.createMenuItem(startControlID.intValue() + 38, "Post Op COntact Made", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390040)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuPOST_OP_CONTACTItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuREMOVE_FROM_24HOURItem = factory.createMenuItem(startControlID.intValue() + 39, "Remove Patient from 24-hour worklist", true, false, new Integer(102273), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390041)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuREMOVE_FROM_24HOURItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuREMOVE_FROM_CATS_ONWARD_REFERRAL_WORKLISTItem = factory.createMenuItem(startControlID.intValue() + 40, "Remove from Referral Triage worklist", true, false, new Integer(102273), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390042)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuREMOVE_FROM_CATS_ONWARD_REFERRAL_WORKLISTItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuUNDO_END_OF_CAREItem = factory.createMenuItem(startControlID.intValue() + 41, "Undo End of Care", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390044)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuUNDO_END_OF_CAREItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuNEW_WAITING_LIST_ENTRYItem = factory.createMenuItem(startControlID.intValue() + 42, "New Waiting List Entry", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390045)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuNEW_WAITING_LIST_ENTRYItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuADD_TO_WAITING_LISTItem = factory.createMenuItem(startControlID.intValue() + 43, "Add to Waiting List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390046)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuADD_TO_WAITING_LISTItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuADD_TO_BOOKED_LISTItem = factory.createMenuItem(startControlID.intValue() + 44, "Add to Booked List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390047)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuADD_TO_BOOKED_LISTItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuADD_TO_PLANNED_LISTItem = factory.createMenuItem(startControlID.intValue() + 45, "Add to Planned List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390048)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuADD_TO_PLANNED_LISTItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuVIEW_EDIT_ELECTIVE_LIST_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 46, "View/Edit Elective List Details", true, false, new Integer(103102), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390049)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuVIEW_EDIT_ELECTIVE_LIST_DETAILSItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuRECORD_ADMIN_EVENTItem = factory.createMenuItem(startControlID.intValue() + 47, "Record Admin Event", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390050)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuRECORD_ADMIN_EVENTItem);
		contextMenus.RefMan.contextMenuReferralStatusListMenuVIEW_ADMIN_EVENTSItem = factory.createMenuItem(startControlID.intValue() + 48, "View Admin Events", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2390051)))
			contextMenus.RefMan.contextMenuReferralStatusListMenu.add(contextMenus.RefMan.contextMenuReferralStatusListMenuVIEW_ADMIN_EVENTSItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralStatusListMenu);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 504, 80, 272, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ims.framework.FormUiLogic m_ccMOSForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 23, skipContextValidation);
		//ims.framework.Control m_ccMOSControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(504), new Integer(80), new Integer(272), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 23), m_ccMOSForm, instance1 } );
		ims.framework.Control m_ccMOSControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 23), m_ccMOSForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccMOSControl);
		Menu[] menus1 = m_ccMOSForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 136, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Centre:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 122, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 608, 80, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 376, 80, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Discharge Date From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 376, 80, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Procedure:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 376, 8, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "NHS Number:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 608, 130, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 376, 130, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "SfS From Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 157, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "OPD Site:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 376, 82, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "2nd Opinion Reason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 106, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Contract:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 376, 80, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "MOS:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 376, 80, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Report:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 376, 80, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Onward Ref Reason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 376, 80, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "TLT Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 376, 80, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Required Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 376, 106, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Location:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 376, 82, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Reason: ", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 604, 37, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 376, 58, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Worklist:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 376, 34, 117, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referral From Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 608, 34, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 58, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOS:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 696, 602, 144, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1038), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Allocate Task(s)", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 504, 8, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(12), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 664, 80, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1030), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 504, 80, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 664, 128, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1028), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 504, 128, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 664, 32, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 504, 32, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 80, 129, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbTreatmentCentreTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTreatmentCentreTemp);
		cmbTreatmentCentreComboBox cmbTreatmentCentre = (cmbTreatmentCentreComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatmentCentreComboBox.class, m_cmbTreatmentCentreTemp);
		super.addComboBox(cmbTreatmentCentre);
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 80, 155, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbOPDSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbOPDSiteTemp);
		cmbOPDSiteComboBox cmbOPDSite = (cmbOPDSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOPDSiteComboBox.class, m_cmbOPDSiteTemp);
		super.addComboBox(cmbOPDSite);
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 504, 80, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbSecondOpinionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSecondOpinionTemp);
		cmbSecondOpinionComboBox cmbSecondOpinion = (cmbSecondOpinionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSecondOpinionComboBox.class, m_cmbSecondOpinionTemp);
		super.addComboBox(cmbSecondOpinion);
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 80, 104, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbContractTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbContractTemp);
		cmbContractComboBox cmbContract = (cmbContractComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbContractComboBox.class, m_cmbContractTemp);
		super.addComboBox(cmbContract);
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 504, 80, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbReportsRequiredTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 1024), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbReportsRequiredTemp);
		cmbReportsRequiredComboBox cmbReportsRequired = (cmbReportsRequiredComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReportsRequiredComboBox.class, m_cmbReportsRequiredTemp);
		super.addComboBox(cmbReportsRequired);
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 504, 80, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbOnwardReferralReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbOnwardReferralReasonTemp);
		cmbOnwardReferralReasonComboBox cmbOnwardReferralReason = (cmbOnwardReferralReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOnwardReferralReasonComboBox.class, m_cmbOnwardReferralReasonTemp);
		super.addComboBox(cmbOnwardReferralReason);
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 504, 80, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbTLTTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTLTTypeTemp);
		cmbTLTTypeComboBox cmbTLTType = (cmbTLTTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTLTTypeComboBox.class, m_cmbTLTTypeTemp);
		super.addComboBox(cmbTLTType);
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 504, 80, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbReportsRequiredSubCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbReportsRequiredSubCategoryTemp);
		cmbReportsRequiredSubCategoryComboBox cmbReportsRequiredSubCategory = (cmbReportsRequiredSubCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReportsRequiredSubCategoryComboBox.class, m_cmbReportsRequiredSubCategoryTemp);
		super.addComboBox(cmbReportsRequiredSubCategory);
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 504, 104, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLocationTemp);
		cmbLocationComboBox cmbLocation = (cmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationComboBox.class, m_cmbLocationTemp);
		super.addComboBox(cmbLocation);
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 504, 80, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbReasonTemp);
		cmbReasonComboBox cmbReason = (cmbReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonComboBox.class, m_cmbReasonTemp);
		super.addComboBox(cmbReason);
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 504, 56, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbWorklistStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbWorklistStatusTemp);
		cmbWorklistStatusComboBox cmbWorklistStatus = (cmbWorklistStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWorklistStatusComboBox.class, m_cmbWorklistStatusTemp);
		super.addComboBox(cmbWorklistStatus);
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 80, 80, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbClinicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbClinicTemp);
		cmbClinicComboBox cmbClinic = (cmbClinicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbClinicComboBox.class, m_cmbClinicTemp);
		super.addComboBox(cmbClinic);
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 80, 32, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSpecTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSpecTemp);
		cmbSpecComboBox cmbSpec = (cmbSpecComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecComboBox.class, m_cmbSpecTemp);
		super.addComboBox(cmbSpec);
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 80, 56, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbDOSTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDOSTemp);
		cmbDOSComboBox cmbDOS = (cmbDOSComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDOSComboBox.class, m_cmbDOSTemp);
		super.addComboBox(cmbDOS);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 504, 80, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_qmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbProcedureTemp);
		qmbProcedureComboBox qmbProcedure = (qmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureComboBox.class, m_qmbProcedureTemp);
		super.addComboBox(qmbProcedure);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 608, 8, 184, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Exclude Provider Cancellations", Boolean.TRUE, null}));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 193, 832, 400, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 1036), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.RefMan.contextMenuReferralStatusListMenu, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 808, 32, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 1034), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 776, 32, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 1032), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroup1);
		Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
		Group1.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(Group1);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccMOS()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccMOSValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccMOSVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccMOSVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccMOSEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccMOSEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Label lblCentre()
	{
		return (Label)super.getControl(1);
	}
	public Label lblTreatment()
	{
		return (Label)super.getControl(2);
	}
	public Label lblDischargeDateTo()
	{
		return (Label)super.getControl(3);
	}
	public Label lblDischargeDateFrom()
	{
		return (Label)super.getControl(4);
	}
	public Label lblProcedure()
	{
		return (Label)super.getControl(5);
	}
	public Label lblSfSTo()
	{
		return (Label)super.getControl(7);
	}
	public Label lblSfSFrom()
	{
		return (Label)super.getControl(8);
	}
	public Label lblOPD()
	{
		return (Label)super.getControl(9);
	}
	public Label lblSecondOpinionReason()
	{
		return (Label)super.getControl(10);
	}
	public Label lblContract()
	{
		return (Label)super.getControl(11);
	}
	public Label lblMOS()
	{
		return (Label)super.getControl(12);
	}
	public Label lblNoteType()
	{
		return (Label)super.getControl(13);
	}
	public Label lblOnwardReason1()
	{
		return (Label)super.getControl(14);
	}
	public Label lblTLT()
	{
		return (Label)super.getControl(15);
	}
	public Label lblReportsRequired()
	{
		return (Label)super.getControl(16);
	}
	public Label lblLocation()
	{
		return (Label)super.getControl(17);
	}
	public Label lblReason()
	{
		return (Label)super.getControl(18);
	}
	public Label lblTotal()
	{
		return (Label)super.getControl(19);
	}
	public Label lblClinic()
	{
		return (Label)super.getControl(23);
	}
	public Label lblServiceLabel()
	{
		return (Label)super.getControl(24);
	}
	public Label lblDOS()
	{
		return (Label)super.getControl(25);
	}
	public Button btnAllocate()
	{
		return (Button)super.getControl(26);
	}
	public TextBox txtNHSNumber()
	{
		return (TextBox)super.getControl(27);
	}
	public DateControl dteDischargeDateTo()
	{
		return (DateControl)super.getControl(28);
	}
	public DateControl dteDischargeDateFrom()
	{
		return (DateControl)super.getControl(29);
	}
	public DateControl dteSfSTo()
	{
		return (DateControl)super.getControl(30);
	}
	public DateControl dteSfSFrom()
	{
		return (DateControl)super.getControl(31);
	}
	public DateControl dteDateTo()
	{
		return (DateControl)super.getControl(32);
	}
	public DateControl dteApptFrom()
	{
		return (DateControl)super.getControl(33);
	}
	public cmbTreatmentCentreComboBox cmbTreatmentCentre()
	{
		return (cmbTreatmentCentreComboBox)super.getComboBox(0);
	}
	public cmbOPDSiteComboBox cmbOPDSite()
	{
		return (cmbOPDSiteComboBox)super.getComboBox(1);
	}
	public cmbSecondOpinionComboBox cmbSecondOpinion()
	{
		return (cmbSecondOpinionComboBox)super.getComboBox(2);
	}
	public cmbContractComboBox cmbContract()
	{
		return (cmbContractComboBox)super.getComboBox(3);
	}
	public cmbReportsRequiredComboBox cmbReportsRequired()
	{
		return (cmbReportsRequiredComboBox)super.getComboBox(4);
	}
	public cmbOnwardReferralReasonComboBox cmbOnwardReferralReason()
	{
		return (cmbOnwardReferralReasonComboBox)super.getComboBox(5);
	}
	public cmbTLTTypeComboBox cmbTLTType()
	{
		return (cmbTLTTypeComboBox)super.getComboBox(6);
	}
	public cmbReportsRequiredSubCategoryComboBox cmbReportsRequiredSubCategory()
	{
		return (cmbReportsRequiredSubCategoryComboBox)super.getComboBox(7);
	}
	public cmbLocationComboBox cmbLocation()
	{
		return (cmbLocationComboBox)super.getComboBox(8);
	}
	public cmbReasonComboBox cmbReason()
	{
		return (cmbReasonComboBox)super.getComboBox(9);
	}
	public cmbWorklistStatusComboBox cmbWorklistStatus()
	{
		return (cmbWorklistStatusComboBox)super.getComboBox(10);
	}
	public cmbClinicComboBox cmbClinic()
	{
		return (cmbClinicComboBox)super.getComboBox(11);
	}
	public cmbSpecComboBox cmbSpec()
	{
		return (cmbSpecComboBox)super.getComboBox(12);
	}
	public cmbDOSComboBox cmbDOS()
	{
		return (cmbDOSComboBox)super.getComboBox(13);
	}
	public qmbProcedureComboBox qmbProcedure()
	{
		return (qmbProcedureComboBox)super.getComboBox(14);
	}
	public CheckBox chkExcludeProvCancel()
	{
		return (CheckBox)super.getControl(49);
	}
	public DynamicGrid dyngrdReferrals()
	{
		return (DynamicGrid)super.getControl(50);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(51);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(52);
	}
	public Group1RadioButton Group1()
	{
		return (Group1RadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			RefMan = new RefManForms();
			Scheduling = new SchedulingForms();
			OCRR = new OCRRForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				Demographics = new LocalFormName(102101);
				HtmlView = new LocalFormName(102209);
			}
			public final FormName Demographics;
			public final FormName HtmlView;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				RaiseOrderAndAppointments = new LocalFormName(134101);
				RejectionReasondialog = new LocalFormName(134102);
				ReferralDetailsDialog = new LocalFormName(134104);
				ReferralWizardDialog = new LocalFormName(134109);
				AtConsultationDialog = new LocalFormName(134111);
				BookedAppointments = new LocalFormName(134113);
				Presentation = new LocalFormName(134112);
				CallAttempts = new LocalFormName(134125);
				BookAppointment = new LocalFormName(134123);
				ReferralReviewDetails = new LocalFormName(134133);
				ProviderCancellation = new LocalFormName(134135);
				OnwardReferralRejection = new LocalFormName(134138);
				NewOnwardReferral = new LocalFormName(134141);
				PrinterSelectionDialog = new LocalFormName(134145);
				Coding = new LocalFormName(134152);
				BookTheatre = new LocalFormName(134153);
				BookTheatreDialog = new LocalFormName(134159);
				AllocateTasksDialog = new LocalFormName(134171);
				DischargeSummaryWardPacuDialogAlias = new LocalFormName(134170);
				AllocatedTaskDialog = new LocalFormName(134174);
				ArrivalSeenTimeDialog = new LocalFormName(134186);
				EndofCareDlg = new LocalFormName(134192);
				BookTheatreSlot = new LocalFormName(134208);
			}
			public final FormName RaiseOrderAndAppointments;
			public final FormName RejectionReasondialog;
			public final FormName ReferralDetailsDialog;
			public final FormName ReferralWizardDialog;
			public final FormName AtConsultationDialog;
			public final FormName BookedAppointments;
			public final FormName Presentation;
			public final FormName CallAttempts;
			public final FormName BookAppointment;
			public final FormName ReferralReviewDetails;
			public final FormName ProviderCancellation;
			public final FormName OnwardReferralRejection;
			public final FormName NewOnwardReferral;
			public final FormName PrinterSelectionDialog;
			public final FormName Coding;
			public final FormName BookTheatre;
			public final FormName BookTheatreDialog;
			public final FormName AllocateTasksDialog;
			public final FormName DischargeSummaryWardPacuDialogAlias;
			public final FormName AllocatedTaskDialog;
			public final FormName ArrivalSeenTimeDialog;
			public final FormName EndofCareDlg;
			public final FormName BookTheatreSlot;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				BookAppointmentDialog = new LocalFormName(114162);
				PatientAppointmentsDialog = new LocalFormName(114110);
			}
			public final FormName BookAppointmentDialog;
			public final FormName PatientAppointmentsDialog;
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				RejectedInvestigationDetails = new LocalFormName(116150);
			}
			public final FormName RejectedInvestigationDetails;
		}

		public CoreForms Core;
		public RefManForms RefMan;
		public SchedulingForms Scheduling;
		public OCRRForms OCRR;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
			ICP = new ICPImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				PDFIcon = new ImageHelper(102294, "Images/Core/pdf.gif", new Integer(16), new Integer(16));
				BookOpenEnabled = new ImageHelper(102186, "Images/Core/Book-Open.gif", new Integer(16), new Integer(16));
				ClinicalContact = new ImageHelper(102254, "Images/Core/ClinicalContact.gif", new Integer(16), new Integer(16));
				Memo = new ImageHelper(102136, "Images/Core/memo.GIF", new Integer(17), new Integer(17));
				Calendar16 = new ImageHelper(102336, "Images/Core/Calendar_schedule.bmp", new Integer(16), new Integer(16));
				CalendarMonth16 = new ImageHelper(102337, "Images/Core/calendar_select.png", new Integer(16), new Integer(16));
				DocumentsBlue16 = new ImageHelper(102332, "Images/Core/documents2_16x16.png", new Integer(16), new Integer(16));
				DocumentsYellow16 = new ImageHelper(102333, "Images/Core/documents_16x16.png", new Integer(16), new Integer(16));
				SortAscending16 = new ImageHelper(102243, "Images/Core/SortAscending16.gif", new Integer(16), new Integer(16));
				DocumentPDF16 = new ImageHelper(102338, "Images/Core/Doc-PDF.gif", new Integer(16), new Integer(16));
				RedFlag = new ImageHelper(102138, "Images/Core/flag_red.png", new Integer(21), new Integer(21));
				Users = new ImageHelper(102317, "Images/Core/users.ico", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image PDFIcon;
			public final ims.framework.utils.Image BookOpenEnabled;
			public final ims.framework.utils.Image ClinicalContact;
			public final ims.framework.utils.Image Memo;
			public final ims.framework.utils.Image Calendar16;
			public final ims.framework.utils.Image CalendarMonth16;
			public final ims.framework.utils.Image DocumentsBlue16;
			public final ims.framework.utils.Image DocumentsYellow16;
			public final ims.framework.utils.Image SortAscending16;
			public final ims.framework.utils.Image DocumentPDF16;
			public final ims.framework.utils.Image RedFlag;
			public final ims.framework.utils.Image Users;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				OrderEntryTemplate = new ImageHelper(116103, "Images/OCRR/OrderEntryTemplate.gif", new Integer(16), new Integer(16));
				MyOrder = new ImageHelper(116110, "Images/OCRR/MyOrder.gif", new Integer(16), new Integer(16));
				TestTube = new ImageHelper(116118, "Images/OCRR/itesttube.gif", new Integer(19), new Integer(19));
				LetterC = new ImageHelper(116120, "Images/OCRR/c.gif", new Integer(16), new Integer(16));
				SpecimenDetails16 = new ImageHelper(116147, "Images/OCRR/SpecimenDetails.gif", new Integer(16), new Integer(16));
				Accepted = new ImageHelper(116139, "Images/OCRR/Accepted.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image OrderEntryTemplate;
			public final ims.framework.utils.Image MyOrder;
			public final ims.framework.utils.Image TestTube;
			public final ims.framework.utils.Image LetterC;
			public final ims.framework.utils.Image SpecimenDetails16;
			public final ims.framework.utils.Image Accepted;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				ICP = new ImageHelper(118104, "Images/ICP/ICP.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ICP;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
		public final ICPImages ICP;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedBookingAppt = new ims.framework.ContextVariable("SelectedBookingAppt", prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier + "");
			cxl_SortOrder20DayKpi = new ims.framework.ContextVariable("SortOrder20DayKpi", prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SortOrder20DayKpi_" + componentIdentifier + "");
			cxl_bLessThenTodaysDate = new ims.framework.ContextVariable("bLessThenTodaysDate", prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__bLessThenTodaysDate_" + componentIdentifier + "");
			cxl_MenuOptionChosen = new ims.framework.ContextVariable("MenuOptionChosen", prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__MenuOptionChosen_" + componentIdentifier + "");
			cxl_IdUndoCancelProviderMessageBox = new ims.framework.ContextVariable("IdUndoCancelProviderMessageBox", prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__IdUndoCancelProviderMessageBox_" + componentIdentifier + "");
			cxl_IdUndoReferralRejectionMessageBox = new ims.framework.ContextVariable("IdUndoReferralRejectionMessageBox", prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__IdUndoReferralRejectionMessageBox_" + componentIdentifier + "");
			cxl_SortOrderDaysLeft = new ims.framework.ContextVariable("SortOrderDaysLeft", prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SortOrderDaysLeft_" + componentIdentifier + "");
			cxl_IdUndoEndOfCareMessageBox = new ims.framework.ContextVariable("IdUndoEndOfCareMessageBox", prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__IdUndoEndOfCareMessageBox_" + componentIdentifier + "");
		}
		
		public boolean getSelectedBookingApptIsNotNull()
		{
			return !cxl_SelectedBookingAppt.getValueIsNull(context);
		}
		public ims.scheduling.vo.Booking_AppointmentShortVo getSelectedBookingAppt()
		{
			return (ims.scheduling.vo.Booking_AppointmentShortVo)cxl_SelectedBookingAppt.getValue(context);
		}
		public void setSelectedBookingAppt(ims.scheduling.vo.Booking_AppointmentShortVo value)
		{
			cxl_SelectedBookingAppt.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedBookingAppt = null;
		public boolean getSortOrder20DayKpiIsNotNull()
		{
			return !cxl_SortOrder20DayKpi.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrder20DayKpi()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrder20DayKpi.getValue(context);
		}
		public void setSortOrder20DayKpi(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrder20DayKpi.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrder20DayKpi = null;
		public boolean getbLessThenTodaysDateIsNotNull()
		{
			return !cxl_bLessThenTodaysDate.getValueIsNull(context);
		}
		public Boolean getbLessThenTodaysDate()
		{
			return (Boolean)cxl_bLessThenTodaysDate.getValue(context);
		}
		public void setbLessThenTodaysDate(Boolean value)
		{
			cxl_bLessThenTodaysDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bLessThenTodaysDate = null;
		public boolean getMenuOptionChosenIsNotNull()
		{
			return !cxl_MenuOptionChosen.getValueIsNull(context);
		}
		public Integer getMenuOptionChosen()
		{
			return (Integer)cxl_MenuOptionChosen.getValue(context);
		}
		public void setMenuOptionChosen(Integer value)
		{
			cxl_MenuOptionChosen.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MenuOptionChosen = null;
		public boolean getIdUndoCancelProviderMessageBoxIsNotNull()
		{
			return !cxl_IdUndoCancelProviderMessageBox.getValueIsNull(context);
		}
		public Integer getIdUndoCancelProviderMessageBox()
		{
			return (Integer)cxl_IdUndoCancelProviderMessageBox.getValue(context);
		}
		public void setIdUndoCancelProviderMessageBox(Integer value)
		{
			cxl_IdUndoCancelProviderMessageBox.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IdUndoCancelProviderMessageBox = null;
		public boolean getIdUndoReferralRejectionMessageBoxIsNotNull()
		{
			return !cxl_IdUndoReferralRejectionMessageBox.getValueIsNull(context);
		}
		public Integer getIdUndoReferralRejectionMessageBox()
		{
			return (Integer)cxl_IdUndoReferralRejectionMessageBox.getValue(context);
		}
		public void setIdUndoReferralRejectionMessageBox(Integer value)
		{
			cxl_IdUndoReferralRejectionMessageBox.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IdUndoReferralRejectionMessageBox = null;
		public boolean getSortOrderDaysLeftIsNotNull()
		{
			return !cxl_SortOrderDaysLeft.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderDaysLeft()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderDaysLeft.getValue(context);
		}
		public void setSortOrderDaysLeft(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderDaysLeft.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderDaysLeft = null;
		public boolean getIdUndoEndOfCareMessageBoxIsNotNull()
		{
			return !cxl_IdUndoEndOfCareMessageBox.getValueIsNull(context);
		}
		public Integer getIdUndoEndOfCareMessageBox()
		{
			return (Integer)cxl_IdUndoEndOfCareMessageBox.getValue(context);
		}
		public void setIdUndoEndOfCareMessageBox(Integer value)
		{
			cxl_IdUndoEndOfCareMessageBox.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IdUndoEndOfCareMessageBox = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ReferralStatusListMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ViewDemographics = 1;
				public static final int NewReferralWizard = 2;
				public static final int EDIT_REFERRAL_DETAILS = 3;
				public static final int Presentation = 4;
				public static final int AtConsultation = 5;
				public static final int CALL_ATTEMPTS = 6;
				public static final int ReviewRejectedInvestigations = 7;
				public static final int VIEW_REJECTION_DETAILS = 8;
				public static final int FlagForReview = 9;
				public static final int ReviewFlagForReviewDetail = 10;
				public static final int NewProviderCancellation = 11;
				public static final int EditProviderCancellation = 12;
				public static final int NEWREJECTEDONWARDREFERRAL = 13;
				public static final int EDITREJECTONWARDREFERRALDETAILS = 14;
				public static final int StartConsultantContact = 15;
				public static final int StartClinicalContact = 16;
				public static final int StartTLTContact = 17;
				public static final int EditConsultationDetails = 18;
				public static final int NEWONWARDREFERRAL = 19;
				public static final int ViewReferralDetails = 20;
				public static final int ViewConsultationDetails = 21;
				public static final int END_TLT_CONTACT = 22;
				public static final int ViewRejectedReferralDetails = 23;
				public static final int BOOK_THEATRE_APPT = 24;
				public static final int ReAdmitPatient = 25;
				public static final int REJECTED_ON_CAB = 26;
				public static final int PATIENT_REJ_LETTER_SENT = 27;
				public static final int REF_IS_PROV_CANC_ON_CAB = 28;
				public static final int DOC_SENT_TO_PATIENT = 29;
				public static final int VIEW_DISCHARGE_SUMMARY_DETAILS = 30;
				public static final int REVIEW_SUITABLE_FOR_SURGERY = 31;
				public static final int REVIEW_FIT = 32;
				public static final int RESET_PROVEIDER_CANCELLATION = 33;
				public static final int RESET_REJECT_REFERRAL = 34;
				public static final int UNDO_PROVIDER_CANCELLATION = 35;
				public static final int UNDO_REFERRAL_REJECTION = 36;
				public static final int END_OF_CARE = 37;
				public static final int POST_OP_CONTACT = 38;
				public static final int REMOVE_FROM_24HOUR = 39;
				public static final int REMOVE_FROM_CATS_ONWARD_REFERRAL_WORKLIST = 40;
				public static final int UNDO_END_OF_CARE = 41;
				public static final int NEW_WAITING_LIST_ENTRY = 42;
				public static final int ADD_TO_WAITING_LIST = 43;
				public static final int ADD_TO_BOOKED_LIST = 44;
				public static final int ADD_TO_PLANNED_LIST = 45;
				public static final int VIEW_EDIT_ELECTIVE_LIST_DETAILS = 46;
				public static final int RECORD_ADMIN_EVENT = 47;
				public static final int VIEW_ADMIN_EVENTS = 48;
			}
			public void disableAllReferralStatusListMenuMenuItems()
			{
				this.contextMenuReferralStatusListMenuViewDemographicsItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuNewReferralWizardItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuEDIT_REFERRAL_DETAILSItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuPresentationItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuAtConsultationItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuCALL_ATTEMPTSItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuReviewRejectedInvestigationsItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuVIEW_REJECTION_DETAILSItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuFlagForReviewItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuReviewFlagForReviewDetailItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuNewProviderCancellationItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuEditProviderCancellationItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuNEWREJECTEDONWARDREFERRALItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuEDITREJECTONWARDREFERRALDETAILSItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuStartConsultantContactItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuStartClinicalContactItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuStartTLTContactItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuEditConsultationDetailsItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuNEWONWARDREFERRALItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuViewReferralDetailsItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuViewConsultationDetailsItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuEND_TLT_CONTACTItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuViewRejectedReferralDetailsItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuBOOK_THEATRE_APPTItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuReAdmitPatientItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuREJECTED_ON_CABItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuPATIENT_REJ_LETTER_SENTItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuREF_IS_PROV_CANC_ON_CABItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuDOC_SENT_TO_PATIENTItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuVIEW_DISCHARGE_SUMMARY_DETAILSItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuREVIEW_SUITABLE_FOR_SURGERYItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuREVIEW_FITItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuRESET_PROVEIDER_CANCELLATIONItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuRESET_REJECT_REFERRALItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuUNDO_PROVIDER_CANCELLATIONItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuUNDO_REFERRAL_REJECTIONItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuEND_OF_CAREItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuPOST_OP_CONTACTItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuREMOVE_FROM_24HOURItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuREMOVE_FROM_CATS_ONWARD_REFERRAL_WORKLISTItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuUNDO_END_OF_CAREItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuNEW_WAITING_LIST_ENTRYItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuADD_TO_WAITING_LISTItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuADD_TO_BOOKED_LISTItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuADD_TO_PLANNED_LISTItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuVIEW_EDIT_ELECTIVE_LIST_DETAILSItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuRECORD_ADMIN_EVENTItem.setEnabled(false);
				this.contextMenuReferralStatusListMenuVIEW_ADMIN_EVENTSItem.setEnabled(false);
			}
			public void hideAllReferralStatusListMenuMenuItems()
			{
				this.contextMenuReferralStatusListMenuViewDemographicsItem.setVisible(false);
				this.contextMenuReferralStatusListMenuNewReferralWizardItem.setVisible(false);
				this.contextMenuReferralStatusListMenuEDIT_REFERRAL_DETAILSItem.setVisible(false);
				this.contextMenuReferralStatusListMenuPresentationItem.setVisible(false);
				this.contextMenuReferralStatusListMenuAtConsultationItem.setVisible(false);
				this.contextMenuReferralStatusListMenuCALL_ATTEMPTSItem.setVisible(false);
				this.contextMenuReferralStatusListMenuReviewRejectedInvestigationsItem.setVisible(false);
				this.contextMenuReferralStatusListMenuVIEW_REJECTION_DETAILSItem.setVisible(false);
				this.contextMenuReferralStatusListMenuFlagForReviewItem.setVisible(false);
				this.contextMenuReferralStatusListMenuReviewFlagForReviewDetailItem.setVisible(false);
				this.contextMenuReferralStatusListMenuNewProviderCancellationItem.setVisible(false);
				this.contextMenuReferralStatusListMenuEditProviderCancellationItem.setVisible(false);
				this.contextMenuReferralStatusListMenuNEWREJECTEDONWARDREFERRALItem.setVisible(false);
				this.contextMenuReferralStatusListMenuEDITREJECTONWARDREFERRALDETAILSItem.setVisible(false);
				this.contextMenuReferralStatusListMenuStartConsultantContactItem.setVisible(false);
				this.contextMenuReferralStatusListMenuStartClinicalContactItem.setVisible(false);
				this.contextMenuReferralStatusListMenuStartTLTContactItem.setVisible(false);
				this.contextMenuReferralStatusListMenuEditConsultationDetailsItem.setVisible(false);
				this.contextMenuReferralStatusListMenuNEWONWARDREFERRALItem.setVisible(false);
				this.contextMenuReferralStatusListMenuViewReferralDetailsItem.setVisible(false);
				this.contextMenuReferralStatusListMenuViewConsultationDetailsItem.setVisible(false);
				this.contextMenuReferralStatusListMenuEND_TLT_CONTACTItem.setVisible(false);
				this.contextMenuReferralStatusListMenuViewRejectedReferralDetailsItem.setVisible(false);
				this.contextMenuReferralStatusListMenuBOOK_THEATRE_APPTItem.setVisible(false);
				this.contextMenuReferralStatusListMenuReAdmitPatientItem.setVisible(false);
				this.contextMenuReferralStatusListMenuREJECTED_ON_CABItem.setVisible(false);
				this.contextMenuReferralStatusListMenuPATIENT_REJ_LETTER_SENTItem.setVisible(false);
				this.contextMenuReferralStatusListMenuREF_IS_PROV_CANC_ON_CABItem.setVisible(false);
				this.contextMenuReferralStatusListMenuDOC_SENT_TO_PATIENTItem.setVisible(false);
				this.contextMenuReferralStatusListMenuVIEW_DISCHARGE_SUMMARY_DETAILSItem.setVisible(false);
				this.contextMenuReferralStatusListMenuREVIEW_SUITABLE_FOR_SURGERYItem.setVisible(false);
				this.contextMenuReferralStatusListMenuREVIEW_FITItem.setVisible(false);
				this.contextMenuReferralStatusListMenuRESET_PROVEIDER_CANCELLATIONItem.setVisible(false);
				this.contextMenuReferralStatusListMenuRESET_REJECT_REFERRALItem.setVisible(false);
				this.contextMenuReferralStatusListMenuUNDO_PROVIDER_CANCELLATIONItem.setVisible(false);
				this.contextMenuReferralStatusListMenuUNDO_REFERRAL_REJECTIONItem.setVisible(false);
				this.contextMenuReferralStatusListMenuEND_OF_CAREItem.setVisible(false);
				this.contextMenuReferralStatusListMenuPOST_OP_CONTACTItem.setVisible(false);
				this.contextMenuReferralStatusListMenuREMOVE_FROM_24HOURItem.setVisible(false);
				this.contextMenuReferralStatusListMenuREMOVE_FROM_CATS_ONWARD_REFERRAL_WORKLISTItem.setVisible(false);
				this.contextMenuReferralStatusListMenuUNDO_END_OF_CAREItem.setVisible(false);
				this.contextMenuReferralStatusListMenuNEW_WAITING_LIST_ENTRYItem.setVisible(false);
				this.contextMenuReferralStatusListMenuADD_TO_WAITING_LISTItem.setVisible(false);
				this.contextMenuReferralStatusListMenuADD_TO_BOOKED_LISTItem.setVisible(false);
				this.contextMenuReferralStatusListMenuADD_TO_PLANNED_LISTItem.setVisible(false);
				this.contextMenuReferralStatusListMenuVIEW_EDIT_ELECTIVE_LIST_DETAILSItem.setVisible(false);
				this.contextMenuReferralStatusListMenuRECORD_ADMIN_EVENTItem.setVisible(false);
				this.contextMenuReferralStatusListMenuVIEW_ADMIN_EVENTSItem.setVisible(false);
			}
			private Menu contextMenuReferralStatusListMenu;
			public ReadOnlyMenuItem getReferralStatusListMenuViewDemographicsItem()
			{
				return this.contextMenuReferralStatusListMenuViewDemographicsItem;
			}
			private MenuItem contextMenuReferralStatusListMenuViewDemographicsItem;
			public ReadOnlyMenuItem getReferralStatusListMenuNewReferralWizardItem()
			{
				return this.contextMenuReferralStatusListMenuNewReferralWizardItem;
			}
			private MenuItem contextMenuReferralStatusListMenuNewReferralWizardItem;
			public ReadOnlyMenuItem getReferralStatusListMenuEDIT_REFERRAL_DETAILSItem()
			{
				return this.contextMenuReferralStatusListMenuEDIT_REFERRAL_DETAILSItem;
			}
			private MenuItem contextMenuReferralStatusListMenuEDIT_REFERRAL_DETAILSItem;
			public ReadOnlyMenuItem getReferralStatusListMenuPresentationItem()
			{
				return this.contextMenuReferralStatusListMenuPresentationItem;
			}
			private MenuItem contextMenuReferralStatusListMenuPresentationItem;
			public ReadOnlyMenuItem getReferralStatusListMenuAtConsultationItem()
			{
				return this.contextMenuReferralStatusListMenuAtConsultationItem;
			}
			private MenuItem contextMenuReferralStatusListMenuAtConsultationItem;
			public ReadOnlyMenuItem getReferralStatusListMenuCALL_ATTEMPTSItem()
			{
				return this.contextMenuReferralStatusListMenuCALL_ATTEMPTSItem;
			}
			private MenuItem contextMenuReferralStatusListMenuCALL_ATTEMPTSItem;
			public ReadOnlyMenuItem getReferralStatusListMenuReviewRejectedInvestigationsItem()
			{
				return this.contextMenuReferralStatusListMenuReviewRejectedInvestigationsItem;
			}
			private MenuItem contextMenuReferralStatusListMenuReviewRejectedInvestigationsItem;
			public ReadOnlyMenuItem getReferralStatusListMenuVIEW_REJECTION_DETAILSItem()
			{
				return this.contextMenuReferralStatusListMenuVIEW_REJECTION_DETAILSItem;
			}
			private MenuItem contextMenuReferralStatusListMenuVIEW_REJECTION_DETAILSItem;
			public ReadOnlyMenuItem getReferralStatusListMenuFlagForReviewItem()
			{
				return this.contextMenuReferralStatusListMenuFlagForReviewItem;
			}
			private MenuItem contextMenuReferralStatusListMenuFlagForReviewItem;
			public ReadOnlyMenuItem getReferralStatusListMenuReviewFlagForReviewDetailItem()
			{
				return this.contextMenuReferralStatusListMenuReviewFlagForReviewDetailItem;
			}
			private MenuItem contextMenuReferralStatusListMenuReviewFlagForReviewDetailItem;
			public ReadOnlyMenuItem getReferralStatusListMenuNewProviderCancellationItem()
			{
				return this.contextMenuReferralStatusListMenuNewProviderCancellationItem;
			}
			private MenuItem contextMenuReferralStatusListMenuNewProviderCancellationItem;
			public ReadOnlyMenuItem getReferralStatusListMenuEditProviderCancellationItem()
			{
				return this.contextMenuReferralStatusListMenuEditProviderCancellationItem;
			}
			private MenuItem contextMenuReferralStatusListMenuEditProviderCancellationItem;
			public ReadOnlyMenuItem getReferralStatusListMenuNEWREJECTEDONWARDREFERRALItem()
			{
				return this.contextMenuReferralStatusListMenuNEWREJECTEDONWARDREFERRALItem;
			}
			private MenuItem contextMenuReferralStatusListMenuNEWREJECTEDONWARDREFERRALItem;
			public ReadOnlyMenuItem getReferralStatusListMenuEDITREJECTONWARDREFERRALDETAILSItem()
			{
				return this.contextMenuReferralStatusListMenuEDITREJECTONWARDREFERRALDETAILSItem;
			}
			private MenuItem contextMenuReferralStatusListMenuEDITREJECTONWARDREFERRALDETAILSItem;
			public ReadOnlyMenuItem getReferralStatusListMenuStartConsultantContactItem()
			{
				return this.contextMenuReferralStatusListMenuStartConsultantContactItem;
			}
			private MenuItem contextMenuReferralStatusListMenuStartConsultantContactItem;
			public ReadOnlyMenuItem getReferralStatusListMenuStartClinicalContactItem()
			{
				return this.contextMenuReferralStatusListMenuStartClinicalContactItem;
			}
			private MenuItem contextMenuReferralStatusListMenuStartClinicalContactItem;
			public ReadOnlyMenuItem getReferralStatusListMenuStartTLTContactItem()
			{
				return this.contextMenuReferralStatusListMenuStartTLTContactItem;
			}
			private MenuItem contextMenuReferralStatusListMenuStartTLTContactItem;
			public ReadOnlyMenuItem getReferralStatusListMenuEditConsultationDetailsItem()
			{
				return this.contextMenuReferralStatusListMenuEditConsultationDetailsItem;
			}
			private MenuItem contextMenuReferralStatusListMenuEditConsultationDetailsItem;
			public ReadOnlyMenuItem getReferralStatusListMenuNEWONWARDREFERRALItem()
			{
				return this.contextMenuReferralStatusListMenuNEWONWARDREFERRALItem;
			}
			private MenuItem contextMenuReferralStatusListMenuNEWONWARDREFERRALItem;
			public ReadOnlyMenuItem getReferralStatusListMenuViewReferralDetailsItem()
			{
				return this.contextMenuReferralStatusListMenuViewReferralDetailsItem;
			}
			private MenuItem contextMenuReferralStatusListMenuViewReferralDetailsItem;
			public ReadOnlyMenuItem getReferralStatusListMenuViewConsultationDetailsItem()
			{
				return this.contextMenuReferralStatusListMenuViewConsultationDetailsItem;
			}
			private MenuItem contextMenuReferralStatusListMenuViewConsultationDetailsItem;
			public ReadOnlyMenuItem getReferralStatusListMenuEND_TLT_CONTACTItem()
			{
				return this.contextMenuReferralStatusListMenuEND_TLT_CONTACTItem;
			}
			private MenuItem contextMenuReferralStatusListMenuEND_TLT_CONTACTItem;
			public ReadOnlyMenuItem getReferralStatusListMenuViewRejectedReferralDetailsItem()
			{
				return this.contextMenuReferralStatusListMenuViewRejectedReferralDetailsItem;
			}
			private MenuItem contextMenuReferralStatusListMenuViewRejectedReferralDetailsItem;
			public ReadOnlyMenuItem getReferralStatusListMenuBOOK_THEATRE_APPTItem()
			{
				return this.contextMenuReferralStatusListMenuBOOK_THEATRE_APPTItem;
			}
			private MenuItem contextMenuReferralStatusListMenuBOOK_THEATRE_APPTItem;
			public MenuItem getReferralStatusListMenuReAdmitPatientItem()
			{
				return this.contextMenuReferralStatusListMenuReAdmitPatientItem;
			}
			private MenuItem contextMenuReferralStatusListMenuReAdmitPatientItem;
			public ReadOnlyMenuItem getReferralStatusListMenuREJECTED_ON_CABItem()
			{
				return this.contextMenuReferralStatusListMenuREJECTED_ON_CABItem;
			}
			private MenuItem contextMenuReferralStatusListMenuREJECTED_ON_CABItem;
			public ReadOnlyMenuItem getReferralStatusListMenuPATIENT_REJ_LETTER_SENTItem()
			{
				return this.contextMenuReferralStatusListMenuPATIENT_REJ_LETTER_SENTItem;
			}
			private MenuItem contextMenuReferralStatusListMenuPATIENT_REJ_LETTER_SENTItem;
			public ReadOnlyMenuItem getReferralStatusListMenuREF_IS_PROV_CANC_ON_CABItem()
			{
				return this.contextMenuReferralStatusListMenuREF_IS_PROV_CANC_ON_CABItem;
			}
			private MenuItem contextMenuReferralStatusListMenuREF_IS_PROV_CANC_ON_CABItem;
			public ReadOnlyMenuItem getReferralStatusListMenuDOC_SENT_TO_PATIENTItem()
			{
				return this.contextMenuReferralStatusListMenuDOC_SENT_TO_PATIENTItem;
			}
			private MenuItem contextMenuReferralStatusListMenuDOC_SENT_TO_PATIENTItem;
			public ReadOnlyMenuItem getReferralStatusListMenuVIEW_DISCHARGE_SUMMARY_DETAILSItem()
			{
				return this.contextMenuReferralStatusListMenuVIEW_DISCHARGE_SUMMARY_DETAILSItem;
			}
			private MenuItem contextMenuReferralStatusListMenuVIEW_DISCHARGE_SUMMARY_DETAILSItem;
			public ReadOnlyMenuItem getReferralStatusListMenuREVIEW_SUITABLE_FOR_SURGERYItem()
			{
				return this.contextMenuReferralStatusListMenuREVIEW_SUITABLE_FOR_SURGERYItem;
			}
			private MenuItem contextMenuReferralStatusListMenuREVIEW_SUITABLE_FOR_SURGERYItem;
			public ReadOnlyMenuItem getReferralStatusListMenuREVIEW_FITItem()
			{
				return this.contextMenuReferralStatusListMenuREVIEW_FITItem;
			}
			private MenuItem contextMenuReferralStatusListMenuREVIEW_FITItem;
			public ReadOnlyMenuItem getReferralStatusListMenuRESET_PROVEIDER_CANCELLATIONItem()
			{
				return this.contextMenuReferralStatusListMenuRESET_PROVEIDER_CANCELLATIONItem;
			}
			private MenuItem contextMenuReferralStatusListMenuRESET_PROVEIDER_CANCELLATIONItem;
			public ReadOnlyMenuItem getReferralStatusListMenuRESET_REJECT_REFERRALItem()
			{
				return this.contextMenuReferralStatusListMenuRESET_REJECT_REFERRALItem;
			}
			private MenuItem contextMenuReferralStatusListMenuRESET_REJECT_REFERRALItem;
			public ReadOnlyMenuItem getReferralStatusListMenuUNDO_PROVIDER_CANCELLATIONItem()
			{
				return this.contextMenuReferralStatusListMenuUNDO_PROVIDER_CANCELLATIONItem;
			}
			private MenuItem contextMenuReferralStatusListMenuUNDO_PROVIDER_CANCELLATIONItem;
			public ReadOnlyMenuItem getReferralStatusListMenuUNDO_REFERRAL_REJECTIONItem()
			{
				return this.contextMenuReferralStatusListMenuUNDO_REFERRAL_REJECTIONItem;
			}
			private MenuItem contextMenuReferralStatusListMenuUNDO_REFERRAL_REJECTIONItem;
			public ReadOnlyMenuItem getReferralStatusListMenuEND_OF_CAREItem()
			{
				return this.contextMenuReferralStatusListMenuEND_OF_CAREItem;
			}
			private MenuItem contextMenuReferralStatusListMenuEND_OF_CAREItem;
			public ReadOnlyMenuItem getReferralStatusListMenuPOST_OP_CONTACTItem()
			{
				return this.contextMenuReferralStatusListMenuPOST_OP_CONTACTItem;
			}
			private MenuItem contextMenuReferralStatusListMenuPOST_OP_CONTACTItem;
			public ReadOnlyMenuItem getReferralStatusListMenuREMOVE_FROM_24HOURItem()
			{
				return this.contextMenuReferralStatusListMenuREMOVE_FROM_24HOURItem;
			}
			private MenuItem contextMenuReferralStatusListMenuREMOVE_FROM_24HOURItem;
			public ReadOnlyMenuItem getReferralStatusListMenuREMOVE_FROM_CATS_ONWARD_REFERRAL_WORKLISTItem()
			{
				return this.contextMenuReferralStatusListMenuREMOVE_FROM_CATS_ONWARD_REFERRAL_WORKLISTItem;
			}
			private MenuItem contextMenuReferralStatusListMenuREMOVE_FROM_CATS_ONWARD_REFERRAL_WORKLISTItem;
			public ReadOnlyMenuItem getReferralStatusListMenuUNDO_END_OF_CAREItem()
			{
				return this.contextMenuReferralStatusListMenuUNDO_END_OF_CAREItem;
			}
			private MenuItem contextMenuReferralStatusListMenuUNDO_END_OF_CAREItem;
			public ReadOnlyMenuItem getReferralStatusListMenuNEW_WAITING_LIST_ENTRYItem()
			{
				return this.contextMenuReferralStatusListMenuNEW_WAITING_LIST_ENTRYItem;
			}
			private MenuItem contextMenuReferralStatusListMenuNEW_WAITING_LIST_ENTRYItem;
			public ReadOnlyMenuItem getReferralStatusListMenuADD_TO_WAITING_LISTItem()
			{
				return this.contextMenuReferralStatusListMenuADD_TO_WAITING_LISTItem;
			}
			private MenuItem contextMenuReferralStatusListMenuADD_TO_WAITING_LISTItem;
			public ReadOnlyMenuItem getReferralStatusListMenuADD_TO_BOOKED_LISTItem()
			{
				return this.contextMenuReferralStatusListMenuADD_TO_BOOKED_LISTItem;
			}
			private MenuItem contextMenuReferralStatusListMenuADD_TO_BOOKED_LISTItem;
			public ReadOnlyMenuItem getReferralStatusListMenuADD_TO_PLANNED_LISTItem()
			{
				return this.contextMenuReferralStatusListMenuADD_TO_PLANNED_LISTItem;
			}
			private MenuItem contextMenuReferralStatusListMenuADD_TO_PLANNED_LISTItem;
			public ReadOnlyMenuItem getReferralStatusListMenuVIEW_EDIT_ELECTIVE_LIST_DETAILSItem()
			{
				return this.contextMenuReferralStatusListMenuVIEW_EDIT_ELECTIVE_LIST_DETAILSItem;
			}
			private MenuItem contextMenuReferralStatusListMenuVIEW_EDIT_ELECTIVE_LIST_DETAILSItem;
			public ReadOnlyMenuItem getReferralStatusListMenuRECORD_ADMIN_EVENTItem()
			{
				return this.contextMenuReferralStatusListMenuRECORD_ADMIN_EVENTItem;
			}
			private MenuItem contextMenuReferralStatusListMenuRECORD_ADMIN_EVENTItem;
			public ReadOnlyMenuItem getReferralStatusListMenuVIEW_ADMIN_EVENTSItem()
			{
				return this.contextMenuReferralStatusListMenuVIEW_ADMIN_EVENTSItem;
			}
			private MenuItem contextMenuReferralStatusListMenuVIEW_ADMIN_EVENTSItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[111];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ID", "ID_Patient");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SEX", "Sex");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOB", "Dob");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOD", "Dod");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-RELIGION", "Religion");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISACTIVE", "IsActive");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SCN", "SCN");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-ID", "ID_SpecimenWorkListItem");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-SPECIMEN", "Specimen");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-LISTTYPE", "ListType");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-DATETOCOLLECT", "DateToCollect");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-ROUNDTOCOLLECT", "RoundToCollect");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-TIMETOCOLLECT", "TimeToCollect");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-COLLECTIONSTATUS", "CollectionStatus");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-DFTORDERINVESTIGATION", "DFTOrderInvestigation");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_RefMan.RejectionReason", "BO-1096100014-ID", "ID_ReferralReject");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_RefMan.RejectionReason", "BO-1096100014-REASON", "Reason");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_RefMan.RejectionReason", "BO-1096100014-REJECTIONCOMMENTS", "RejectionComments");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_RefMan.RejectionReason", "BO-1096100014-WASGPCONTACTED", "WasGPContacted");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_RefMan.RejectionReason", "BO-1096100014-WASPATIENTCONTACTED", "WasPatientContacted");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-SEENTIME", "SeenTime");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-APPTCOMPLETETIME", "ApptCompleteTime");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-OUTCOME", "Outcome");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-COMMENTS", "Comments");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralStatusList.__internal_x_context__SelectedBookingAppt_" + componentIdentifier, "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
