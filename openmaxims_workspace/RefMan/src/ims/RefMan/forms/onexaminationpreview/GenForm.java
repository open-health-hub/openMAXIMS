// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.onexaminationpreview;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPatientDocumentsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 808, 512, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccDocumentsForm = loader.loadComponent(102264, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccDocumentsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(808), new Integer(512), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccDocumentsForm, instance1 } );
				ims.framework.Control m_ccDocumentsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccDocumentsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccDocumentsControl);
				Menu[] menus1 = m_ccDocumentsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.uploaddocument.IComponent ccDocuments()
			{
				return (ims.core.forms.uploaddocument.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccDocumentsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccDocumentsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccDocumentsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccDocumentsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccDocumentsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabClinicalNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 804, 508, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccClinicalNotesForm = loader.loadComponent(134166, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccClinicalNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(0), new Integer(804), new Integer(508), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccClinicalNotesForm, instance1 } );
				ims.framework.Control m_ccClinicalNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccClinicalNotesForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccClinicalNotesControl);
				Menu[] menus1 = m_ccClinicalNotesForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.clinicalnotescomponent.IComponent ccClinicalNotes()
			{
				return (ims.RefMan.forms.clinicalnotescomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccClinicalNotesValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccClinicalNotesVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccClinicalNotesVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccClinicalNotesEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccClinicalNotesEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabDiagnosisAndManagementContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 804, 508, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccDiagnosisManagementForm = loader.loadComponent(134169, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccDiagnosisManagementControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(0), new Integer(0), new Integer(804), new Integer(508), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccDiagnosisManagementForm, instance1 } );
				ims.framework.Control m_ccDiagnosisManagementControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccDiagnosisManagementForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccDiagnosisManagementControl);
				Menu[] menus1 = m_ccDiagnosisManagementForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.diagnosisandmanagementcomponent.IComponent ccDiagnosisManagement()
			{
				return (ims.RefMan.forms.diagnosisandmanagementcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccDiagnosisManagementValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccDiagnosisManagementVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccDiagnosisManagementVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccDiagnosisManagementEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccDiagnosisManagementEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPrescriptionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 808, 512, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccPrescriptionForm = loader.loadComponent(134173, appForm, startControlID * 10 + 4000, anchoringHelper4.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccPrescriptionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(0), new Integer(0), new Integer(808), new Integer(512), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccPrescriptionForm, instance1 } );
				ims.framework.Control m_ccPrescriptionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccPrescriptionForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPrescriptionControl);
				Menu[] menus1 = m_ccPrescriptionForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.prescriptioncomponent.IComponent ccPrescription()
			{
				return (ims.RefMan.forms.prescriptioncomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPrescriptionValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPrescriptionVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPrescriptionVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPrescriptionEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPrescriptionEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabOutcomeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 808, 512, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccOutcomeForm = loader.loadComponent(134120, appForm, startControlID * 10 + 5000, anchoringHelper5.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccOutcomeControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(0), new Integer(0), new Integer(808), new Integer(512), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccOutcomeForm, instance1 } );
				ims.framework.Control m_ccOutcomeControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccOutcomeForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccOutcomeControl);
				Menu[] menus1 = m_ccOutcomeForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.referraloutcomecomponent.IComponent ccOutcome()
			{
				return (ims.RefMan.forms.referraloutcomecomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccOutcomeValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccOutcomeVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccOutcomeVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccOutcomeEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccOutcomeEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabFollowUpNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 808, 512, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccFollowUpNotesForm = loader.loadComponent(134168, appForm, startControlID * 10 + 6000, anchoringHelper6.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccFollowUpNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(0), new Integer(0), new Integer(808), new Integer(512), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccFollowUpNotesForm, instance1 } );
				ims.framework.Control m_ccFollowUpNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccFollowUpNotesForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccFollowUpNotesControl);
				Menu[] menus1 = m_ccFollowUpNotesForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.followupnotescomponent.IComponent ccFollowUpNotes()
			{
				return (ims.RefMan.forms.followupnotescomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccFollowUpNotesValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccFollowUpNotesVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccFollowUpNotesVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccFollowUpNotesEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccFollowUpNotesEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabReportNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 512, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccReportNotesForm = loader.loadComponent(134180, appForm, startControlID * 10 + 7000, anchoringHelper7.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccReportNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(0), new Integer(0), new Integer(800), new Integer(512), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccReportNotesForm, instance1 } );
				ims.framework.Control m_ccReportNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccReportNotesForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccReportNotesControl);
				Menu[] menus1 = m_ccReportNotesForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.correspondencenotes.IComponent ccReportNotes()
			{
				return (ims.RefMan.forms.correspondencenotes.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccReportNotesValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccReportNotesVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccReportNotesVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccReportNotesEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccReportNotesEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabTLTContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrTLTLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabPageTLTNotesContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 808, 488, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccTLTForm = loader.loadComponent(134172, appForm, startControlID * 10 + 8000, anchoringHelper8.getSize(), instance1, -1, skipContextValidation);
						//ims.framework.Control m_ccTLTControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(0), new Integer(0), new Integer(808), new Integer(488), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccTLTForm, instance1 } );
						ims.framework.Control m_ccTLTControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccTLTForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccTLTControl);
						Menu[] menus1 = m_ccTLTForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.RefMan.forms.tltsummarynotescomponent.IComponent ccTLT()
					{
						return (ims.RefMan.forms.tltsummarynotescomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccTLTValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccTLTVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccTLTVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccTLTEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccTLTEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 808, 504, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabPageTLTNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Notes", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPageTLTNotesContainer m_tabPageTLTNotesContainer = (tabPageTLTNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTLTNotesContainer.class, m_tabPageTLTNotes, factory);
					super.addContainer(m_tabPageTLTNotes, m_tabPageTLTNotesContainer);
					ims.framework.utils.SizeInfo m_tabPageTLTNotesDesignSize = new ims.framework.utils.SizeInfo(808, 504);
					ims.framework.utils.SizeInfo m_tabPageTLTNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
					m_tabPageTLTNotesContainer.setContext(form, appForm, m_tabPageTLTNotes, loader, form_images_local, startControlID, m_tabPageTLTNotesDesignSize, m_tabPageTLTNotesRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabPageTLTNotes().setVisible(false);
				}
				public void settabPageTLTNotesEnabled(boolean value)
				{
					tabPageTLTNotes().setEnabled(value);
				}
				public void showtabPageTLTNotes()
				{
					tabPageTLTNotes().setVisible(true);
				}
		
				public tabPageTLTNotesContainer tabPageTLTNotes()
				{
					return (tabPageTLTNotesContainer)super.layers.get(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrTLTLayer m_lyrTLTLayer = (lyrTLTLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTLTLayer.class, this, factory);
				super.addLayer(m_lyrTLTLayer);
				m_lyrTLTLayer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
			}

			public lyrTLTLayer lyrTLT()
			{
				return (lyrTLTLayer)super.getLayer(0);
			}
		}
		public static class tabCatsReportNoteContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 512, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccCatsReferralForm = loader.loadComponent(134179, appForm, startControlID * 10 + 9000, anchoringHelper10.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccCatsReferralControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(0), new Integer(0), new Integer(800), new Integer(512), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccCatsReferralForm, instance1 } );
				ims.framework.Control m_ccCatsReferralControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018),  new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccCatsReferralForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccCatsReferralControl);
				Menu[] menus1 = m_ccCatsReferralForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.catsreportcomponent.IComponent ccCatsReferral()
			{
				return (ims.RefMan.forms.catsreportcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccCatsReferralValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccCatsReferralVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccCatsReferralVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccCatsReferralEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccCatsReferralEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPatientDocuments = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pat Docs", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPatientDocumentsContainer m_tabPatientDocumentsContainer = (tabPatientDocumentsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPatientDocumentsContainer.class, m_tabPatientDocuments, factory);
			super.addContainer(m_tabPatientDocuments, m_tabPatientDocumentsContainer);
			ims.framework.utils.SizeInfo m_tabPatientDocumentsDesignSize = new ims.framework.utils.SizeInfo(816, 544);
			ims.framework.utils.SizeInfo m_tabPatientDocumentsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper11.getWidth(), anchoringHelper11.getHeight());
			m_tabPatientDocumentsContainer.setContext(form, appForm, m_tabPatientDocuments, loader, form_images_local, startControlID, m_tabPatientDocumentsDesignSize, m_tabPatientDocumentsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClinicalNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clin Notes", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabClinicalNotesContainer m_tabClinicalNotesContainer = (tabClinicalNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClinicalNotesContainer.class, m_tabClinicalNotes, factory);
			super.addContainer(m_tabClinicalNotes, m_tabClinicalNotesContainer);
			ims.framework.utils.SizeInfo m_tabClinicalNotesDesignSize = new ims.framework.utils.SizeInfo(816, 544);
			ims.framework.utils.SizeInfo m_tabClinicalNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
			m_tabClinicalNotesContainer.setContext(form, appForm, m_tabClinicalNotes, loader, form_images_local, startControlID, m_tabClinicalNotesDesignSize, m_tabClinicalNotesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDiagnosisAndManagement = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Diag and Manag", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDiagnosisAndManagementContainer m_tabDiagnosisAndManagementContainer = (tabDiagnosisAndManagementContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDiagnosisAndManagementContainer.class, m_tabDiagnosisAndManagement, factory);
			super.addContainer(m_tabDiagnosisAndManagement, m_tabDiagnosisAndManagementContainer);
			ims.framework.utils.SizeInfo m_tabDiagnosisAndManagementDesignSize = new ims.framework.utils.SizeInfo(816, 544);
			ims.framework.utils.SizeInfo m_tabDiagnosisAndManagementRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
			m_tabDiagnosisAndManagementContainer.setContext(form, appForm, m_tabDiagnosisAndManagement, loader, form_images_local, startControlID, m_tabDiagnosisAndManagementDesignSize, m_tabDiagnosisAndManagementRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPrescription = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pres", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPrescriptionContainer m_tabPrescriptionContainer = (tabPrescriptionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPrescriptionContainer.class, m_tabPrescription, factory);
			super.addContainer(m_tabPrescription, m_tabPrescriptionContainer);
			ims.framework.utils.SizeInfo m_tabPrescriptionDesignSize = new ims.framework.utils.SizeInfo(816, 544);
			ims.framework.utils.SizeInfo m_tabPrescriptionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
			m_tabPrescriptionContainer.setContext(form, appForm, m_tabPrescription, loader, form_images_local, startControlID, m_tabPrescriptionDesignSize, m_tabPrescriptionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOutcome = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Outcome", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOutcomeContainer m_tabOutcomeContainer = (tabOutcomeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOutcomeContainer.class, m_tabOutcome, factory);
			super.addContainer(m_tabOutcome, m_tabOutcomeContainer);
			ims.framework.utils.SizeInfo m_tabOutcomeDesignSize = new ims.framework.utils.SizeInfo(816, 544);
			ims.framework.utils.SizeInfo m_tabOutcomeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
			m_tabOutcomeContainer.setContext(form, appForm, m_tabOutcome, loader, form_images_local, startControlID, m_tabOutcomeDesignSize, m_tabOutcomeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabFollowUpNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Follow-up Notes", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabFollowUpNotesContainer m_tabFollowUpNotesContainer = (tabFollowUpNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabFollowUpNotesContainer.class, m_tabFollowUpNotes, factory);
			super.addContainer(m_tabFollowUpNotes, m_tabFollowUpNotesContainer);
			ims.framework.utils.SizeInfo m_tabFollowUpNotesDesignSize = new ims.framework.utils.SizeInfo(816, 544);
			ims.framework.utils.SizeInfo m_tabFollowUpNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
			m_tabFollowUpNotesContainer.setContext(form, appForm, m_tabFollowUpNotes, loader, form_images_local, startControlID, m_tabFollowUpNotesDesignSize, m_tabFollowUpNotesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabReportNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Corres Notes", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabReportNotesContainer m_tabReportNotesContainer = (tabReportNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabReportNotesContainer.class, m_tabReportNotes, factory);
			super.addContainer(m_tabReportNotes, m_tabReportNotesContainer);
			ims.framework.utils.SizeInfo m_tabReportNotesDesignSize = new ims.framework.utils.SizeInfo(816, 544);
			ims.framework.utils.SizeInfo m_tabReportNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
			m_tabReportNotesContainer.setContext(form, appForm, m_tabReportNotes, loader, form_images_local, startControlID, m_tabReportNotesDesignSize, m_tabReportNotesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTLT = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"TLT", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTLTContainer m_tabTLTContainer = (tabTLTContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTLTContainer.class, m_tabTLT, factory);
			super.addContainer(m_tabTLT, m_tabTLTContainer);
			ims.framework.utils.SizeInfo m_tabTLTDesignSize = new ims.framework.utils.SizeInfo(816, 544);
			ims.framework.utils.SizeInfo m_tabTLTRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper18.getWidth(), anchoringHelper18.getHeight());
			m_tabTLTContainer.setContext(form, appForm, m_tabTLT, loader, form_images_local, startControlID, m_tabTLTDesignSize, m_tabTLTRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCatsReportNote = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"CATSReportNote", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCatsReportNoteContainer m_tabCatsReportNoteContainer = (tabCatsReportNoteContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCatsReportNoteContainer.class, m_tabCatsReportNote, factory);
			super.addContainer(m_tabCatsReportNote, m_tabCatsReportNoteContainer);
			ims.framework.utils.SizeInfo m_tabCatsReportNoteDesignSize = new ims.framework.utils.SizeInfo(816, 544);
			ims.framework.utils.SizeInfo m_tabCatsReportNoteRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
			m_tabCatsReportNoteContainer.setContext(form, appForm, m_tabCatsReportNote, loader, form_images_local, startControlID, m_tabCatsReportNoteDesignSize, m_tabCatsReportNoteRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabDiagnosisAndManagement().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabFollowUpNotes().setVisible(false);
			tabReportNotes().setVisible(false);
			tabTLT().setVisible(false);
			tabCatsReportNote().setVisible(false);
		}
		public void settabPatientDocumentsEnabled(boolean value)
		{
			tabPatientDocuments().setEnabled(value);
		}
		public void settabClinicalNotesEnabled(boolean value)
		{
			tabClinicalNotes().setEnabled(value);
		}
		public void settabDiagnosisAndManagementEnabled(boolean value)
		{
			tabDiagnosisAndManagement().setEnabled(value);
		}
		public void settabPrescriptionEnabled(boolean value)
		{
			tabPrescription().setEnabled(value);
		}
		public void settabOutcomeEnabled(boolean value)
		{
			tabOutcome().setEnabled(value);
		}
		public void settabFollowUpNotesEnabled(boolean value)
		{
			tabFollowUpNotes().setEnabled(value);
		}
		public void settabReportNotesEnabled(boolean value)
		{
			tabReportNotes().setEnabled(value);
		}
		public void settabTLTEnabled(boolean value)
		{
			tabTLT().setEnabled(value);
		}
		public void settabCatsReportNoteEnabled(boolean value)
		{
			tabCatsReportNote().setEnabled(value);
		}
		public void showtabPatientDocuments()
		{
			tabClinicalNotes().setVisible(false);
			tabDiagnosisAndManagement().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabFollowUpNotes().setVisible(false);
			tabReportNotes().setVisible(false);
			tabTLT().setVisible(false);
			tabCatsReportNote().setVisible(false);
			tabPatientDocuments().setVisible(true);
		}
		public void showtabClinicalNotes()
		{
			tabPatientDocuments().setVisible(false);
			tabDiagnosisAndManagement().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabFollowUpNotes().setVisible(false);
			tabReportNotes().setVisible(false);
			tabTLT().setVisible(false);
			tabCatsReportNote().setVisible(false);
			tabClinicalNotes().setVisible(true);
		}
		public void showtabDiagnosisAndManagement()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabFollowUpNotes().setVisible(false);
			tabReportNotes().setVisible(false);
			tabTLT().setVisible(false);
			tabCatsReportNote().setVisible(false);
			tabDiagnosisAndManagement().setVisible(true);
		}
		public void showtabPrescription()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabDiagnosisAndManagement().setVisible(false);
			tabOutcome().setVisible(false);
			tabFollowUpNotes().setVisible(false);
			tabReportNotes().setVisible(false);
			tabTLT().setVisible(false);
			tabCatsReportNote().setVisible(false);
			tabPrescription().setVisible(true);
		}
		public void showtabOutcome()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabDiagnosisAndManagement().setVisible(false);
			tabPrescription().setVisible(false);
			tabFollowUpNotes().setVisible(false);
			tabReportNotes().setVisible(false);
			tabTLT().setVisible(false);
			tabCatsReportNote().setVisible(false);
			tabOutcome().setVisible(true);
		}
		public void showtabFollowUpNotes()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabDiagnosisAndManagement().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabReportNotes().setVisible(false);
			tabTLT().setVisible(false);
			tabCatsReportNote().setVisible(false);
			tabFollowUpNotes().setVisible(true);
		}
		public void showtabReportNotes()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabDiagnosisAndManagement().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabFollowUpNotes().setVisible(false);
			tabTLT().setVisible(false);
			tabCatsReportNote().setVisible(false);
			tabReportNotes().setVisible(true);
		}
		public void showtabTLT()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabDiagnosisAndManagement().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabFollowUpNotes().setVisible(false);
			tabReportNotes().setVisible(false);
			tabCatsReportNote().setVisible(false);
			tabTLT().setVisible(true);
		}
		public void showtabCatsReportNote()
		{
			tabPatientDocuments().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabDiagnosisAndManagement().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabFollowUpNotes().setVisible(false);
			tabReportNotes().setVisible(false);
			tabTLT().setVisible(false);
			tabCatsReportNote().setVisible(true);
		}

		public tabPatientDocumentsContainer tabPatientDocuments()
		{
			return (tabPatientDocumentsContainer)super.layers.get(0);
		}
		public tabClinicalNotesContainer tabClinicalNotes()
		{
			return (tabClinicalNotesContainer)super.layers.get(1);
		}
		public tabDiagnosisAndManagementContainer tabDiagnosisAndManagement()
		{
			return (tabDiagnosisAndManagementContainer)super.layers.get(2);
		}
		public tabPrescriptionContainer tabPrescription()
		{
			return (tabPrescriptionContainer)super.layers.get(3);
		}
		public tabOutcomeContainer tabOutcome()
		{
			return (tabOutcomeContainer)super.layers.get(4);
		}
		public tabFollowUpNotesContainer tabFollowUpNotes()
		{
			return (tabFollowUpNotesContainer)super.layers.get(5);
		}
		public tabReportNotesContainer tabReportNotes()
		{
			return (tabReportNotesContainer)super.layers.get(6);
		}
		public tabTLTContainer tabTLT()
		{
			return (tabTLTContainer)super.layers.get(7);
		}
		public tabCatsReportNoteContainer tabCatsReportNote()
		{
			return (tabCatsReportNoteContainer)super.layers.get(8);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(824, 592);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 376, 560, 72, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(9);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ExaminationNotes = new LocalFormName(134150);
			}
			public final FormName ExaminationNotes;
		}

		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Clinical = new ClinicalImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				History = new ImageHelper(102341, "Images/Core/URL-history-24x24.png", new Integer(24), new Integer(24));
				HTMLView48 = new ImageHelper(102444, "Images/Core/html_view_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image History;
			public final ims.framework.utils.Image HTMLView48;
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				ClinicalNoteDrawing48 = new ImageHelper(123120, "Images/Clinical/clinical_note_drawing_48.png", new Integer(48), new Integer(48));
				DiagnosisComplications48 = new ImageHelper(123121, "Images/Clinical/diagnosis_complications_48.png", new Integer(48), new Integer(48));
				PatientDiagnosisChecklist48 = new ImageHelper(123125, "Images/Clinical/patient_diagnosis_checklist_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image ClinicalNoteDrawing48;
			public final ims.framework.utils.Image DiagnosisComplications48;
			public final ims.framework.utils.Image PatientDiagnosisChecklist48;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Outcome48 = new ImageHelper(103342, "Images/Admin/outcome_48.png", new Integer(48), new Integer(48));
				Notes48 = new ImageHelper(103293, "Images/Admin/notes_48.png", new Integer(48), new Integer(48));
				PresentingDetails48 = new ImageHelper(103323, "Images/Admin/presenting_details_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image Outcome48;
			public final ims.framework.utils.Image Notes48;
			public final ims.framework.utils.Image PresentingDetails48;
		}
		public final CoreImages Core;
		public final ClinicalImages Clinical;
		public final AdminImages Admin;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_RefMan.OnExaminationPreview.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_SelectedTab = new ims.framework.ContextVariable("SelectedTab", prefix + "_lv_RefMan.OnExaminationPreview.__internal_x_context__SelectedTab_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.onExaminationVo getSelectedRecord()
		{
			return (ims.RefMan.vo.onExaminationVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.RefMan.vo.onExaminationVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getSelectedTabIsNotNull()
		{
			return !cxl_SelectedTab.getValueIsNull(context);
		}
		public ims.RefMan.vo.enums.OnExaminationSelectedTab getSelectedTab()
		{
			return (ims.RefMan.vo.enums.OnExaminationSelectedTab)cxl_SelectedTab.getValue(context);
		}
		public void setSelectedTab(ims.RefMan.vo.enums.OnExaminationSelectedTab value)
		{
			cxl_SelectedTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedTab = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[74];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.OnExaminationPreview.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100003-ID", "ID_OnExamination");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.OnExaminationPreview.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100003-CATSREFERRAL", "CatsReferral");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.OnExaminationPreview.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100003-RELEVANTPMH", "RelevantPMH");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
