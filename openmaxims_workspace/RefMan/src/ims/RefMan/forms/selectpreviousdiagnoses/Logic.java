// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.selectpreviousdiagnoses;

import ims.RefMan.forms.selectpreviousdiagnoses.GenForm.grdDiagnosisRow;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.PatientDiagnosisListVo;
import ims.core.vo.PatientDiagnosisListVoCollection;
import ims.core.vo.PatientListVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	@Override
	protected void onGrdDiagnosisGridCheckBoxClicked(int column, GenForm.grdDiagnosisRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();
	}

	private void updateControlState()
	{
		form.btnOk().setEnabled(valueSelected());
	}			

	private boolean valueSelected()
	{
		for (int i=0;i<form.grdDiagnosis().getRows().size();i++)
		{
			if (form.grdDiagnosis().getRows().get(i).getcolSelect())
				return true;
		}
		
		return false;
	}


	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		if (args!=null && args.length>1 && args[0]!=null && args[0] instanceof CareContextLiteVo && args[1]!=null && args[1] instanceof PatientListVo)
		{
			form.getLocalContext().setCurrentCareContext((CareContextLiteVo) args[0]);
			PatientDiagnosisListVoCollection colldiagnosis = domain.listDiagnosis(form.getLocalContext().getCurrentCareContext(),(PatientListVo)args[1]);
			populateGrid(colldiagnosis);
			updateControlState();
		}
	}


	private void populateGrid(PatientDiagnosisListVoCollection colldiagnosis)
	{
		if (colldiagnosis==null || colldiagnosis.size()==0)
			return;
		
		for (int i=0;i<colldiagnosis.size();i++)
		{
			addRowToGrid(colldiagnosis.get(i));
		}
	}


	private void addRowToGrid(PatientDiagnosisListVo patientDiagnosisListVo)
	{
		if (patientDiagnosisListVo==null)
			return;
		
		grdDiagnosisRow row = form.grdDiagnosis().getRows().newRow();
		row.setcolDescription(patientDiagnosisListVo.getDiagnosisDescription());
		row.setTooltipForcolDescription(patientDiagnosisListVo.getDiagnosisDescription());
		
		row.setcolDiagnosisDate(patientDiagnosisListVo.getDiagnosedDate() != null ? patientDiagnosisListVo.getDiagnosedDate().toString() : "");
		row.setTooltipForcolDiagnosisDate(patientDiagnosisListVo.getDiagnosedDate() != null ? patientDiagnosisListVo.getDiagnosedDate().toString() : "");
		
		if (patientDiagnosisListVo.getAuthoringInfo() != null)
		{		
			row.setcolAuthoringHCPDateTime(patientDiagnosisListVo.getAuthoringInfo().getIItemText());
			row.setTooltipForcolAuthoringHCPDateTime(patientDiagnosisListVo.getAuthoringInfo().getIItemText());
		}
		
		row.setcolStatus((patientDiagnosisListVo.getCurrentStatus() != null && patientDiagnosisListVo.getCurrentStatus().getStatus() != null) ? patientDiagnosisListVo.getCurrentStatus().getStatus().getText() : "");
		row.setTooltipForcolStatus((patientDiagnosisListVo.getCurrentStatus() != null && patientDiagnosisListVo.getCurrentStatus().getStatus() != null) ? patientDiagnosisListVo.getCurrentStatus().getStatus().getText() : "");
		
		row.setValue(patientDiagnosisListVo);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnOkClick() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setSelectedPatientDiagnosisListVoCollection(populateDataFromScreen());
		
		engine.close(DialogResult.OK);
	}

	private PatientDiagnosisListVoCollection populateDataFromScreen()
	{
		PatientDiagnosisListVoCollection collDiagnosisSelected = new PatientDiagnosisListVoCollection();
		for (int i=0;i<form.grdDiagnosis().getRows().size();i++)
		{
			if (form.grdDiagnosis().getRows().get(i).getcolSelect())
				collDiagnosisSelected.add(form.grdDiagnosis().getRows().get(i).getValue());
		}
		
		return collDiagnosisSelected;
	}
	
}
