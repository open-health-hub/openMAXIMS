//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//This code is generated, please do not modify it.
//ClinicviewRds.java : Generated by vpurdila on 06 Jul 2004 12:09.
//Java DTO script

package ims.rds.dto.script;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;


import ims.rds.dto.*;
import ims.dto.client.Sd_appt_dts;
import ims.dto.client.Int_locn;
import ims.dto.client.Sd_session;
import ims.dto.client.Sd_activity;
import ims.dto.client.Sd_appt_dts.Sd_appt_dtsRecord;


public final class ClinicviewRds extends IMSReportDataSourceDTO
{
	private static final String COLLECTION = "Collection";
	
    public ClinicviewRds(ims.dto.DTODomain domain, String seed1, String seed2, String seed3, String seed4, String seed5)
    {
        super(domain);
        SEED_VALUE[0] = seed1;
        SEED_VALUE[1] = seed2;
        SEED_VALUE[2] = seed3;
        SEED_VALUE[3] = seed4;
        SEED_VALUE[4] = seed5;
    }

    //Seeds
    private String[] SEED = new String[] {"TODAY", "PRFILE_SESS_ID", "PRFILED_SESS_ID", "APPT_STAT", "SCREEN_DATE"};
    private String[] SEED_VALUE = new String[5];

    //User variables declaration
    private String[] IMS_USERVAR = new String[] {"TODAY", "PRFILE_SESS_ID", "PRFILED_SESS_ID", "APPT_STAT", "SCREEN_DATE"};
    private String[] IMS_USERVAR_ALIAS = new String[] {"TODAY", "PRFILE_SESS_ID", "PRFILED_SESS_ID", "APPT_STAT", "SCREEN_DATE"};
    private String[] IMS_USERVAR_DESC = new String[] {"__", "__", "__", "__", "__"};
    private ArrayList IMS_USERVAR_VALUE = new ArrayList();

    //Services declarations    
    private String[] SD_APPT_DTS = new String[] {"APPT_ID", "APPT_HEAD_ID", "PRFILE_SESS_ID", "PRFILED_SESS_ID", "CONTRACT_ID", "ATT_STAT", "ATT_STAT_REAS", "PKEY", "SNM", "FNM1", "TITL", "DOB", "HOSPNUM", "SEX", "STM", "ETM", "APPT_DT", "APPT_STAT", "PRTY", "MC_ID", "MCMODALITY_ID", "MODID", "MODIDTXT", "MODENRGY", "MODENRGYUNIT", "MODENRGYUNITTXT", "TREATPL_ACT_ID", "ATTND_ASID", "PAT_STAT", "TXCATTYPE", "ATTND_ASTXT", "TXCATTYPETXT", "ATT_TM", "LO_ID", "LO_IDTXT", "REL_APPT_HEAD_ID", "APPT_STATTXT", "ATT_STATTXT", "APPT_CMTS", "ACTIV_ID", "SPEC_CD", "GRP_ID", "SESS_DT", "PRTYTXT", "ACTION_ID", "ACTION_IDTXT", "ACTIVITYTXT", "TRANS_TYP", "FIRST_APPT_ID", "LAST_APPT_ID", "TRANS_TYPTXT", "CLINICFLAG", "PRFILE_SESS_IDTXT", "ARR_TME", "ACT_COMP_FLG", "MC_NM", "CONFIRM_STAT", "CONFIRM_STATTXT", "ACT_CONSULT", "ACT_CONSULTTXT", "REL_APPT_TM", "REL_APPT_STATTXT", "REL_APPT_SESSTXT"};
    private String[] SD_APPT_DTS_ALIAS = new String[] {"SD_APPT_DTS.APPT_ID", "SD_APPT_DTS.APPT_HEAD_ID", "SD_APPT_DTS.PRFILE_SESS_ID", "SD_APPT_DTS.PRFILED_SESS_ID", "SD_APPT_DTS.CONTRACT_ID", "SD_APPT_DTS.ATT_STAT", "SD_APPT_DTS.ATT_STAT_REAS", "SD_APPT_DTS.PKEY", "SD_APPT_DTS.SNM", "SD_APPT_DTS.FNM1", "SD_APPT_DTS.TITL", "SD_APPT_DTS.DOB", "SD_APPT_DTS.HOSPNUM", "SD_APPT_DTS.SEX", "SD_APPT_DTS.STM", "SD_APPT_DTS.ETM", "SD_APPT_DTS.APPT_DT", "SD_APPT_DTS.APPT_STAT", "SD_APPT_DTS.PRTY", "SD_APPT_DTS.MC_ID", "SD_APPT_DTS.MCMODALITY_ID", "SD_APPT_DTS.MODID", "SD_APPT_DTS.MODIDTXT", "SD_APPT_DTS.MODENRGY", "SD_APPT_DTS.MODENRGYUNIT", "SD_APPT_DTS.MODENRGYUNITTXT", "SD_APPT_DTS.TREATPL_ACT_ID", "SD_APPT_DTS.ATTND_ASID", "SD_APPT_DTS.PAT_STAT", "SD_APPT_DTS.TXCATTYPE", "SD_APPT_DTS.ATTND_ASTXT", "SD_APPT_DTS.TXCATTYPETXT", "SD_APPT_DTS.ATT_TM", "SD_APPT_DTS.LO_ID", "SD_APPT_DTS.LO_IDTXT", "SD_APPT_DTS.REL_APPT_HEAD_ID", "SD_APPT_DTS.APPT_STATTXT", "SD_APPT_DTS.ATT_STATTXT", "SD_APPT_DTS.APPT_CMTS", "SD_APPT_DTS.ACTIV_ID", "SD_APPT_DTS.SPEC_CD", "SD_APPT_DTS.GRP_ID", "SD_APPT_DTS.SESS_DT", "SD_APPT_DTS.PRTYTXT", "SD_APPT_DTS.ACTION_ID", "SD_APPT_DTS.ACTION_IDTXT", "SD_APPT_DTS.ACTIVITYTXT", "SD_APPT_DTS.TRANS_TYP", "SD_APPT_DTS.FIRST_APPT_ID", "SD_APPT_DTS.LAST_APPT_ID", "SD_APPT_DTS.TRANS_TYPTXT", "SD_APPT_DTS.CLINICFLAG", "SD_APPT_DTS.PRFILE_SESS_IDTXT", "SD_APPT_DTS.ARR_TME", "SD_APPT_DTS.ACT_COMP_FLG", "SD_APPT_DTS.MC_NM", "SD_APPT_DTS.CONFIRM_STAT", "SD_APPT_DTS.CONFIRM_STATTXT", "SD_APPT_DTS.ACT_CONSULT", "SD_APPT_DTS.ACT_CONSULTTXT", "SD_APPT_DTS.REL_APPT_TM", "SD_APPT_DTS.REL_APPT_STATTXT", "SD_APPT_DTS.REL_APPT_SESSTXT"};
    private String[] SD_APPT_DTS_ATTR_DESC = new String[] {"__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "_D", "__", "__", "_T", "__", "_D", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "_D", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "_T", "__", "__", "__"};
    private ArrayList SD_APPT_DTS_VALUE = new ArrayList();
    private ArrayList SD_APPT_DTS_FILTERS = new ArrayList();
    private ims.dto.client.Sd_appt_dts sd_appt_dtsRds = null;
    private String[] INT_LOCN = new String[] {"INT_LOCN_ID", "LOCN_NM", "LOCN_PARENT_ID", "LOCN_SITE_ID", "ACT_IND", "TSTP", "LOCN_CHAR", "ACT_IND1"};
    private String[] INT_LOCN_ALIAS = new String[] {"INT_LOCN.INT_LOCN_ID", "INT_LOCN.LOCN_NM", "INT_LOCN.LOCN_PARENT_ID", "INT_LOCN.LOCN_SITE_ID", "INT_LOCN.ACT_IND", "INT_LOCN.TSTP", "INT_LOCN.LOCN_CHAR", "INT_LOCN.ACT_IND1"};
    private String[] INT_LOCN_ATTR_DESC = new String[] {"__", "__", "__", "__", "__", "__", "S_", "R_"};
    private ArrayList INT_LOCN_VALUE = new ArrayList();
    private ArrayList INT_LOCN_FILTERS = new ArrayList();
    private ims.dto.client.Int_locn int_locnRds = null;
    private String[] SD_SESSION = new String[] {"PRFILE_SESS_ID", "PRFILE_ID", "GRP_ID", "ACTIV_ID", "SESS_DT", "STM", "ETM", "SESS_DESC", "MAX_APP", "LASTAPPTINT", "REM_APPS", "INT_LOC_ID", "TCI_RNDING_INT", "PRFILE_SESS_STAT", "PRFILE_SESS_DUR", "REM_TM", "ACT_IND", "ACT_STM", "ACT_ETM", "STAT_REAS", "MIN_INT", "MOD_IND", "TSTP", "SCHED_CAT", "ACTIV_NAME", "ADHOC", "USR_ID", "SUSR", "ACT_IND_USR", "SEQNO2", "ACT_PRFILE_ID", "SESSIOND_ID2", "ACTION_ID", "RM_NO_ACT", "MAX_NO", "ACT_IND_PRSESS", "SEQNO3", "EXCL_TM_ID", "SESSIOND_ID3", "STM2", "ETM2", "ACT_IND_TM", "PRFILEASS_S_ID", "PRFILEASS_ID", "SESSIOND_ID", "MOS_ID", "STM1", "ETM1", "DUR", "REM_TM1", "MAX_APP1", "REM_APPS1", "ACT_IND_ASS", "PRFILED_SESS_ID1", "SESS_STAT_REASON", "SESS_STAT", "MOD_IND1", "SESS_INT_LOC", "PRFILED_ID1", "MC_ID", "SESSD_DESC", "MAX_APP2", "REM_APPS2", "MIN_INT1", "DUR5", "REM_TIME", "ACT_IND2"};
    private String[] SD_SESSION_ALIAS = new String[] {"SD_SESSION.PRFILE_SESS_ID", "SD_SESSION.PRFILE_ID", "SD_SESSION.GRP_ID", "SD_SESSION.ACTIV_ID", "SD_SESSION.SESS_DT", "SD_SESSION.STM", "SD_SESSION.ETM", "SD_SESSION.SESS_DESC", "SD_SESSION.MAX_APP", "SD_SESSION.LASTAPPTINT", "SD_SESSION.REM_APPS", "SD_SESSION.INT_LOC_ID", "SD_SESSION.TCI_RNDING_INT", "SD_SESSION.PRFILE_SESS_STAT", "SD_SESSION.PRFILE_SESS_DUR", "SD_SESSION.REM_TM", "SD_SESSION.ACT_IND", "SD_SESSION.ACT_STM", "SD_SESSION.ACT_ETM", "SD_SESSION.STAT_REAS", "SD_SESSION.MIN_INT", "SD_SESSION.MOD_IND", "SD_SESSION.TSTP", "SD_SESSION.SCHED_CAT", "SD_SESSION.ACTIV_NAME", "SD_SESSION.ADHOC", "SD_SESSION.USR_ID", "SD_SESSION.SUSR", "SD_SESSION.ACT_IND_USR", "SD_SESSION.SEQNO2", "SD_SESSION.ACT_PRFILE_ID", "SD_SESSION.SESSIOND_ID2", "SD_SESSION.ACTION_ID", "SD_SESSION.RM_NO_ACT", "SD_SESSION.MAX_NO", "SD_SESSION.ACT_IND_PRSESS", "SD_SESSION.SEQNO3", "SD_SESSION.EXCL_TM_ID", "SD_SESSION.SESSIOND_ID3", "SD_SESSION.STM2", "SD_SESSION.ETM2", "SD_SESSION.ACT_IND_TM", "SD_SESSION.PRFILEASS_S_ID", "SD_SESSION.PRFILEASS_ID", "SD_SESSION.SESSIOND_ID", "SD_SESSION.MOS_ID", "SD_SESSION.STM1", "SD_SESSION.ETM1", "SD_SESSION.DUR", "SD_SESSION.REM_TM1", "SD_SESSION.MAX_APP1", "SD_SESSION.REM_APPS1", "SD_SESSION.ACT_IND_ASS", "SD_SESSION.PRFILED_SESS_ID1", "SD_SESSION.SESS_STAT_REASON", "SD_SESSION.SESS_STAT", "SD_SESSION.MOD_IND1", "SD_SESSION.SESS_INT_LOC", "SD_SESSION.PRFILED_ID1", "SD_SESSION.MC_ID", "SD_SESSION.SESSD_DESC", "SD_SESSION.MAX_APP2", "SD_SESSION.REM_APPS2", "SD_SESSION.MIN_INT1", "SD_SESSION.DUR5", "SD_SESSION.REM_TIME", "SD_SESSION.ACT_IND2"};
    private String[] SD_SESSION_ATTR_DESC = new String[] {"__", "__", "__", "__", "_D", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "S_", "R_", "R_", "S_", "R_", "R_", "R_", "R_", "R_", "R_", "S_", "R_", "R_", "R_", "R_", "R_", "S_", "R_", "R_", "R_", "R_", "R_", "R_", "R_", "R_", "R_", "R_", "S_", "R_", "R_", "R_", "R_", "R_", "R_", "R_", "R_", "R_", "R_", "R_", "R_", "R_"};
    private ArrayList SD_SESSION_VALUE = new ArrayList();
    private ArrayList SD_SESSION_FILTERS = new ArrayList();
    private ims.dto.client.Sd_session sd_sessionRds = null;
    private String[] SD_ACTIVITY = new String[] {"GRP_ID", "ACTIV_ID", "ACTIV_NM", "GRP_NM"};
    private String[] SD_ACTIVITY_ALIAS = new String[] {"SD_ACTIVITY.GRP_ID", "SD_ACTIVITY.ACTIV_ID", "SD_ACTIVITY.ACTIV_NM", "SD_ACTIVITY.GRP_NM"};
    private String[] SD_ACTIVITY_ATTR_DESC = new String[] {"__", "__", "__", "__"};
    private ArrayList SD_ACTIVITY_VALUE = new ArrayList();
    private ArrayList SD_ACTIVITY_FILTERS = new ArrayList();
    private ims.dto.client.Sd_activity sd_activityRds = null;

    //Init default values
    private void InitDefaultValues()
    {
        int i;

        sd_appt_dtsRds = (Sd_appt_dts)domain.getDTOInstance(Sd_appt_dts.class);
        int_locnRds = (Int_locn)domain.getDTOInstance(Int_locn.class);
        sd_sessionRds = (Sd_session)domain.getDTOInstance(Sd_session.class);
        sd_activityRds = (Sd_activity)domain.getDTOInstance(Sd_activity.class);

        //init user variables
        IMS_USERVAR_VALUE.clear();
        for(i = 0; i < 5; i++)
        {
            IMS_USERVAR_VALUE.add(new ArrayList());

            for(int j = 0; j < SEED.length; j++)
            {
                if(SEED[j].equalsIgnoreCase(IMS_USERVAR[i]) == true)
                {
                    ArrayList al = (ArrayList)IMS_USERVAR_VALUE.get(i);
                    al.add(SEED_VALUE[j]);
                    IMS_USERVAR_VALUE.set(i,al);
                    break;
                }
            }
        }

        //init variables
        SD_APPT_DTS_VALUE.clear();
        for(i = 0; i < 63; i++)
            SD_APPT_DTS_VALUE.add(new ArrayList());
        INT_LOCN_VALUE.clear();
        for(i = 0; i < 8; i++)
            INT_LOCN_VALUE.add(new ArrayList());
        SD_SESSION_VALUE.clear();
        for(i = 0; i < 67; i++)
            SD_SESSION_VALUE.add(new ArrayList());
        SD_ACTIVITY_VALUE.clear();
        for(i = 0; i < 4; i++)
            SD_ACTIVITY_VALUE.add(new ArrayList());

        int ix = 0;
    }

    public void SetSeeds(String seed1, String seed2, String seed3, String seed4, String seed5)
    {
        SEED_VALUE[0] = seed1;
        SEED_VALUE[1] = seed2;
        SEED_VALUE[2] = seed3;
        SEED_VALUE[3] = seed4;
        SEED_VALUE[4] = seed5;
    }

    private boolean _internalGetData()
    {
        boolean bRet = true;

        //clear internal collections
        Clear();

        //init the default values first
        InitDefaultValues();

        //LIST SD_APPT_DTS
        SD_APPT_DTS_FILTERS.clear();
        SD_APPT_DTS_FILTERS.add("PRFILE_SESS_ID");
        SD_APPT_DTS_FILTERS.add("APPT_STAT");
        SD_APPT_DTS_FILTERS.add("PRFILED_SESS_ID");
        CopyValue(SD_APPT_DTS_VALUE, GetIndexByName("PRFILE_SESS_ID", SD_APPT_DTS), (ArrayList)IMS_USERVAR_VALUE.get(GetIndexByName("PRFILE_SESS_ID", IMS_USERVAR)));
        CopyValue(SD_APPT_DTS_VALUE, GetIndexByName("APPT_STAT", SD_APPT_DTS), (ArrayList)IMS_USERVAR_VALUE.get(GetIndexByName("APPT_STAT", IMS_USERVAR)));
        CopyValue(SD_APPT_DTS_VALUE, GetIndexByName("PRFILED_SESS_ID", SD_APPT_DTS), (ArrayList)IMS_USERVAR_VALUE.get(GetIndexByName("PRFILED_SESS_ID", IMS_USERVAR)));
        bRet = CallService(sd_appt_dtsRds, "SD_APPT_DTS", "LIST", SD_APPT_DTS, SD_APPT_DTS_ATTR_DESC, SD_APPT_DTS_VALUE, SD_APPT_DTS_FILTERS, true);
        //GET SD_SESSION
        SD_SESSION_FILTERS.clear();
        SD_SESSION_FILTERS.add("PRFILE_SESS_ID");
        CopyValue(SD_SESSION_VALUE, GetIndexByName("PRFILE_SESS_ID", SD_SESSION), (ArrayList)IMS_USERVAR_VALUE.get(GetIndexByName("PRFILE_SESS_ID", IMS_USERVAR)));
        bRet = CallService(sd_sessionRds, "SD_SESSION", "GET", SD_SESSION, SD_SESSION_ATTR_DESC, SD_SESSION_VALUE, SD_SESSION_FILTERS, false);
        //GET INT_LOCN
        INT_LOCN_FILTERS.clear();
        INT_LOCN_FILTERS.add("INT_LOCN_ID");
        CopyValue(INT_LOCN_VALUE, GetIndexByName("INT_LOCN_ID", INT_LOCN), (ArrayList)SD_SESSION_VALUE.get(GetIndexByName("INT_LOC_ID",SD_SESSION)));
        bRet = CallService(int_locnRds, "INT_LOCN", "GET", INT_LOCN, INT_LOCN_ATTR_DESC, INT_LOCN_VALUE, INT_LOCN_FILTERS, false);
        //GET SD_ACTIVITY
        SD_ACTIVITY_FILTERS.clear();
        SD_ACTIVITY_FILTERS.add("GRP_ID");
        SD_ACTIVITY_FILTERS.add("ACTIV_ID");
        CopyValue(SD_ACTIVITY_VALUE, GetIndexByName("GRP_ID", SD_ACTIVITY), (ArrayList)SD_SESSION_VALUE.get(GetIndexByName("GRP_ID",SD_SESSION)));
        CopyValue(SD_ACTIVITY_VALUE, GetIndexByName("ACTIV_ID", SD_ACTIVITY), (ArrayList)SD_SESSION_VALUE.get(GetIndexByName("ACTIV_ID",SD_SESSION)));
        bRet = CallService(sd_activityRds, "SD_ACTIVITY", "GET", SD_ACTIVITY, SD_ACTIVITY_ATTR_DESC, SD_ACTIVITY_VALUE, SD_ACTIVITY_FILTERS, false);

        return bRet;
    }

    public String GetData()
    {
        boolean bRet = _internalGetData();

        //build results
        
        //list will have to be re-sorted based on SESS_DT and ATT_TM attributes
        ReSortList();
        BuildResult(SD_APPT_DTS_ALIAS, SD_APPT_DTS_ATTR_DESC, SD_APPT_DTS_VALUE);
        BuildResult(INT_LOCN_ALIAS, INT_LOCN_ATTR_DESC, INT_LOCN_VALUE);
        BuildResult(SD_SESSION_ALIAS, SD_SESSION_ATTR_DESC, SD_SESSION_VALUE);
        BuildResult(SD_ACTIVITY_ALIAS, SD_ACTIVITY_ATTR_DESC, SD_ACTIVITY_VALUE);
        BuildResult(IMS_USERVAR_ALIAS, IMS_USERVAR_DESC, IMS_USERVAR_VALUE);

        return Serialize();
    }

    private void ReSortList() 
    {
		java.util.List<Object> newList = new ArrayList<Object>();
		if (sd_appt_dtsRds.DataCollection != null && sd_appt_dtsRds.DataCollection.count() > 0)
		{
			
			for (int i=0; i<sd_appt_dtsRds.DataCollection.count(); i++)
			{
				// If the attendance time is only 4 digits, we need to prepend
				// and zero to it
				Sd_appt_dts.Sd_appt_dtsRecord appointment = sd_appt_dtsRds.DataCollection.get(i);
				if (appointment.Att_tm != null && appointment.Att_tm.length() == 5)
				{
					appointment.Att_tm = "0" + appointment.Att_tm;
				}
				newList.add(appointment);
			}
			
			Collections.sort(newList, new AppointmentListComparator());
			
			sd_appt_dtsRds.DataCollection.clear();
			// Convert back to appointments collection
			for (int i=0; i<newList.size(); i++)
			{
				sd_appt_dtsRds.DataCollection.add((Sd_appt_dtsRecord) newList.get(i));
			}
		}

		//put back into SD_APPT_DTS_VALUE
		Object objDataCollection = null;
		try
		{
			objDataCollection = sd_appt_dtsRds.getClass().getField("DataCollection").get(sd_appt_dtsRds);
		} 
		catch (SecurityException e1)
		{
			e1.printStackTrace();
			return;
		} 
		catch (NoSuchFieldException e1)
		{
			e1.printStackTrace();
			return;
		}
		catch(IllegalAccessException e)
		{
			e.printStackTrace();
			return;
		}
		
		//clear attr values
		for(int i = 0; i < SD_APPT_DTS_VALUE.size(); i++)
		{
			ArrayList al = (ArrayList)SD_APPT_DTS_VALUE.get(i);
			al.clear();
			SD_APPT_DTS_VALUE.set(i,al);
		}

		IterateCollection(objDataCollection,SD_APPT_DTS, SD_APPT_DTS_ATTR_DESC, SD_APPT_DTS_VALUE);
    	    
	}

    class AppointmentListComparator implements Comparator
    {
    	public int compare(Object obj1, Object obj2)
    	{
    		Sd_appt_dts.Sd_appt_dtsRecord voObj1 = (Sd_appt_dts.Sd_appt_dtsRecord)obj1;
    		Sd_appt_dts.Sd_appt_dtsRecord voObj2 = (Sd_appt_dts.Sd_appt_dtsRecord)obj2;
    		
    		// compare session date and attendance time
    		if (voObj1.Sess_dt != null && voObj2.Sess_dt != null)
    		{
    			int result =voObj1.Sess_dt.compareTo(voObj2.Sess_dt); 
    			if (result < 0)  // Negative voObj1 less than obj2
    				return -1;
    			else if (result > 0)  // Positive voObj1 greater than obj2
    				return 1;
    			else if (result == 0)  // Values Equal - check times
    			{
    				if (voObj1.Att_tm != null && voObj2.Att_tm != null)
    				{
    					int timeResult = voObj1.Att_tm.compareTo(voObj2.Att_tm);
    					if (timeResult < 0)
    						return -1;
    					else if (timeResult > 0)
    						return 1;
    					else 
    						return 0;
    				}
    			}
    		}
    		return 0;
    	}
    }
    
	private boolean IterateCollection(Object objDataCollection, String[] aAttr, String[] aAttrDescr, ArrayList aAttrValue)
	{
		String val = "";
		String colName = "";
		int ix = 0;
		
		Method countMethod = null;
		Method getMethod = null;
		Integer iCount = null;
		int nCount = 0;
		try
		{
			countMethod = objDataCollection.getClass().getDeclaredMethod("count", null);
			getMethod = objDataCollection.getClass().getDeclaredMethod("get", new Class[] {int.class});
			iCount = (Integer)countMethod.invoke(objDataCollection, null);
			
			nCount = iCount.intValue();
		} 
		catch (SecurityException e1)
		{
			e1.printStackTrace();
			
			return false;
		} 
		catch (NoSuchMethodException e1)
		{
			e1.printStackTrace();
			
			return false;
		}
		catch (IllegalAccessException e1)
		{
			e1.printStackTrace();
			
			return false;
		}
		catch (InvocationTargetException e1)
		{
			e1.printStackTrace();
			
			return false;
		}
		
		if(nCount == 0)
			return true;
		
		Field[] attributes = null;
		Object objRecord = null;
		
		for (int i = 0; i < nCount; i++)
		{
			try
			{
				objRecord = getMethod.invoke(objDataCollection, new Object[] {new Integer(i)});
			} 
			catch (IllegalArgumentException e)
			{
				e.printStackTrace();
				
				return false;
			} 
			catch (IllegalAccessException e)
			{
				e.printStackTrace();
				
				return false;
			} 
			catch (InvocationTargetException e)
			{
				e.printStackTrace();
				
				return false;
			}
			
			attributes = objRecord.getClass().getFields();
			
			for (int j = 0; j < attributes.length; j++)
			{
				colName = attributes[j].getName();
				if(colName.charAt(0) >= 'A' && colName.charAt(0) <= 'Z')
				{
					if(attributes[j].getType().getName().equals("java.lang.String") == true)
					{
						colName = colName.toUpperCase();
						ix = GetIndexByName(colName,aAttr);
						
						if(ix != -1)
						{
							try
							{
								val = (String)attributes[j].get(objRecord);
								ArrayList al = (ArrayList)aAttrValue.get(ix);
								al.add(val);
								aAttrValue.set(ix,al);
							} 
							catch (IllegalArgumentException e2)
							{
								e2.printStackTrace();
								
								return false;
							} 
							catch (IllegalAccessException e2)
							{
								e2.printStackTrace();
								
								return false;
							}
						}
					}
					else
					if(attributes[j].getType().getName().length() > COLLECTION.length() && attributes[j].getType().getName().endsWith(COLLECTION))
					{
						//this is a repeating group
						boolean bRet = false;
						try
						{
							bRet = IterateCollection(attributes[j].get(objRecord), aAttr, aAttrDescr, aAttrValue);
						} 
						catch (IllegalArgumentException e2)
						{
							// TODO Auto-generated catch block
							e2.printStackTrace();
						} catch (IllegalAccessException e2)
						{
							// TODO Auto-generated catch block
							e2.printStackTrace();
						}
						if(bRet == false)
							return false;
					}
				}
			}
		}
		
		return true;
	}
    
	public String GetStructuredData(String sName)
    {
        boolean bRet = _internalGetData();

        //build results
        BuildStructuredResult("SD_APPT_DTS", SD_APPT_DTS_ALIAS, SD_APPT_DTS_ATTR_DESC, SD_APPT_DTS_VALUE);
        BuildStructuredResult("INT_LOCN", INT_LOCN_ALIAS, INT_LOCN_ATTR_DESC, INT_LOCN_VALUE);
        BuildStructuredResult("SD_SESSION", SD_SESSION_ALIAS, SD_SESSION_ATTR_DESC, SD_SESSION_VALUE);
        BuildStructuredResult("SD_ACTIVITY", SD_ACTIVITY_ALIAS, SD_ACTIVITY_ATTR_DESC, SD_ACTIVITY_VALUE);
        BuildStructuredResult("IMS_USERVAR", IMS_USERVAR_ALIAS, IMS_USERVAR_DESC, IMS_USERVAR_VALUE);

        return SerializeStructuredData(sName);
    }
}
