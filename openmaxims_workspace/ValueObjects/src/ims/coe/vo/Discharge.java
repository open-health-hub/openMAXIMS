//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.vo;

/**
 * Linked to clinical.Discharge business object (ID: 1017100000).
 */
public class Discharge extends ims.clinical.vo.DischargeRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public Discharge()
	{
	}
	public Discharge(Integer id, int version)
	{
		super(id, version);
	}
	public Discharge(ims.coe.vo.beans.DischargeBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.datecommenced = bean.getDateCommenced() == null ? null : bean.getDateCommenced().buildDate();
		this.destination = bean.getDestination() == null ? null : ims.coe.vo.lookups.DischargeDestination.buildLookup(bean.getDestination());
		this.datetimedischarged = bean.getDateTimeDischarged() == null ? null : bean.getDateTimeDischarged().buildDateTime();
		this.hcp = bean.getHCP() == null ? null : bean.getHCP().buildVo();
		this.notes = bean.getNotes();
		this.actions = ims.coe.vo.DischargeActionsCollection.buildFromBeanCollection(bean.getActions());
		this.assessment = bean.getAssessment() == null ? null : bean.getAssessment().buildVo();
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.coe.vo.beans.DischargeBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.datecommenced = bean.getDateCommenced() == null ? null : bean.getDateCommenced().buildDate();
		this.destination = bean.getDestination() == null ? null : ims.coe.vo.lookups.DischargeDestination.buildLookup(bean.getDestination());
		this.datetimedischarged = bean.getDateTimeDischarged() == null ? null : bean.getDateTimeDischarged().buildDateTime();
		this.hcp = bean.getHCP() == null ? null : bean.getHCP().buildVo(map);
		this.notes = bean.getNotes();
		this.actions = ims.coe.vo.DischargeActionsCollection.buildFromBeanCollection(bean.getActions());
		this.assessment = bean.getAssessment() == null ? null : bean.getAssessment().buildVo(map);
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.coe.vo.beans.DischargeBean bean = null;
		if(map != null)
			bean = (ims.coe.vo.beans.DischargeBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.coe.vo.beans.DischargeBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("DATECOMMENCED"))
			return getDateCommenced();
		if(fieldName.equals("DESTINATION"))
			return getDestination();
		if(fieldName.equals("DATETIMEDISCHARGED"))
			return getDateTimeDischarged();
		if(fieldName.equals("HCP"))
			return getHCP();
		if(fieldName.equals("NOTES"))
			return getNotes();
		if(fieldName.equals("ACTIONS"))
			return getActions();
		if(fieldName.equals("ASSESSMENT"))
			return getAssessment();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getDateCommencedIsNotNull()
	{
		return this.datecommenced != null;
	}
	public ims.framework.utils.Date getDateCommenced()
	{
		return this.datecommenced;
	}
	public void setDateCommenced(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.datecommenced = value;
	}
	public boolean getDestinationIsNotNull()
	{
		return this.destination != null;
	}
	public ims.coe.vo.lookups.DischargeDestination getDestination()
	{
		return this.destination;
	}
	public void setDestination(ims.coe.vo.lookups.DischargeDestination value)
	{
		this.isValidated = false;
		this.destination = value;
	}
	public boolean getDateTimeDischargedIsNotNull()
	{
		return this.datetimedischarged != null;
	}
	public ims.framework.utils.DateTime getDateTimeDischarged()
	{
		return this.datetimedischarged;
	}
	public void setDateTimeDischarged(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.datetimedischarged = value;
	}
	public boolean getHCPIsNotNull()
	{
		return this.hcp != null;
	}
	public ims.core.vo.HcpLiteVo getHCP()
	{
		return this.hcp;
	}
	public void setHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.hcp = value;
	}
	public boolean getNotesIsNotNull()
	{
		return this.notes != null;
	}
	public String getNotes()
	{
		return this.notes;
	}
	public static int getNotesMaxLength()
	{
		return 1500;
	}
	public void setNotes(String value)
	{
		this.isValidated = false;
		this.notes = value;
	}
	public boolean getActionsIsNotNull()
	{
		return this.actions != null;
	}
	public ims.coe.vo.DischargeActionsCollection getActions()
	{
		return this.actions;
	}
	public void setActions(ims.coe.vo.DischargeActionsCollection value)
	{
		this.isValidated = false;
		this.actions = value;
	}
	public boolean getAssessmentIsNotNull()
	{
		return this.assessment != null;
	}
	public ims.coe.vo.DischargeAssessment getAssessment()
	{
		return this.assessment;
	}
	public void setAssessment(ims.coe.vo.DischargeAssessment value)
	{
		this.isValidated = false;
		this.assessment = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.vo.CareContextShortVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.vo.CareContextShortVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.hcp != null)
		{
			if(!this.hcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.actions != null)
		{
			if(!this.actions.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.assessment != null)
		{
			if(!this.assessment.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.hcp != null)
		{
			String[] listOfOtherErrors = this.hcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.notes != null)
			if(this.notes.length() > 1500)
				listOfErrors.add("The length of the field [notes] in the value object [ims.coe.vo.Discharge] is too big. It should be less or equal to 1500");
		if(this.actions != null)
		{
			String[] listOfOtherErrors = this.actions.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.assessment != null)
		{
			String[] listOfOtherErrors = this.assessment.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		Discharge clone = new Discharge(this.id, this.version);
		
		if(this.datecommenced == null)
			clone.datecommenced = null;
		else
			clone.datecommenced = (ims.framework.utils.Date)this.datecommenced.clone();
		if(this.destination == null)
			clone.destination = null;
		else
			clone.destination = (ims.coe.vo.lookups.DischargeDestination)this.destination.clone();
		if(this.datetimedischarged == null)
			clone.datetimedischarged = null;
		else
			clone.datetimedischarged = (ims.framework.utils.DateTime)this.datetimedischarged.clone();
		if(this.hcp == null)
			clone.hcp = null;
		else
			clone.hcp = (ims.core.vo.HcpLiteVo)this.hcp.clone();
		clone.notes = this.notes;
		if(this.actions == null)
			clone.actions = null;
		else
			clone.actions = (ims.coe.vo.DischargeActionsCollection)this.actions.clone();
		if(this.assessment == null)
			clone.assessment = null;
		else
			clone.assessment = (ims.coe.vo.DischargeAssessment)this.assessment.clone();
		if(this.carecontext == null)
			clone.carecontext = null;
		else
			clone.carecontext = (ims.core.vo.CareContextShortVo)this.carecontext.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(Discharge.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A Discharge object cannot be compared an Object of type " + obj.getClass().getName());
		}
		Discharge compareObj = (Discharge)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_Discharge() == null && compareObj.getID_Discharge() != null)
				return -1;
			if(this.getID_Discharge() != null && compareObj.getID_Discharge() == null)
				return 1;
			if(this.getID_Discharge() != null && compareObj.getID_Discharge() != null)
				retVal = this.getID_Discharge().compareTo(compareObj.getID_Discharge());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.datecommenced != null)
			count++;
		if(this.destination != null)
			count++;
		if(this.datetimedischarged != null)
			count++;
		if(this.hcp != null)
			count++;
		if(this.notes != null)
			count++;
		if(this.actions != null)
			count++;
		if(this.assessment != null)
			count++;
		if(this.carecontext != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.framework.utils.Date datecommenced;
	protected ims.coe.vo.lookups.DischargeDestination destination;
	protected ims.framework.utils.DateTime datetimedischarged;
	protected ims.core.vo.HcpLiteVo hcp;
	protected String notes;
	protected ims.coe.vo.DischargeActionsCollection actions;
	protected ims.coe.vo.DischargeAssessment assessment;
	protected ims.core.vo.CareContextShortVo carecontext;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
