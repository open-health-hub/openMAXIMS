//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.vo;

/**
 * Linked to nursing.assessment.Assessment Component business object (ID: 1015100001).
 */
public class AssessmentSpirituality extends ims.nursing.vo.AssessmentComponent implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AssessmentSpirituality()
	{
	}
	public AssessmentSpirituality(Integer id, int version)
	{
		super(id, version);
	}
	public AssessmentSpirituality(ims.coe.vo.beans.AssessmentSpiritualityBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.iscomplete = bean.getIsComplete();
		this.assessmentinfo = ims.nursing.vo.AssessmentInfoCollection.buildFromBeanCollection(bean.getAssessmentInfo());
		this.copy = bean.getCopy();
		this.componenttype = bean.getComponentType() == null ? null : ims.nursing.vo.lookups.AssessmentComponentType.buildLookup(bean.getComponentType());
		this.lastassessmentinfo = bean.getLastAssessmentInfo() == null ? null : bean.getLastAssessmentInfo().buildVo();
		this.careplantemplate = ims.nursing.vo.CarePlanTemplateCollection.buildFromBeanCollection(bean.getCarePlanTemplate());
		this.careplans = ims.nursing.vo.CarePlanCollection.buildFromBeanCollection(bean.getCarePlans());
		this.religion = bean.getReligion();
		this.belieforfaith = bean.getBeliefOrFaith() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getBeliefOrFaith());
		this.practicingmember = bean.getPracticingMember() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getPracticingMember());
		this.continuepracticing = bean.getContinuePracticing() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getContinuePracticing());
		this.name = bean.getName();
		this.address = bean.getAddress();
		this.telephonenumber = bean.getTelephoneNumber();
		this.requirements = bean.getRequirements();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.coe.vo.beans.AssessmentSpiritualityBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.iscomplete = bean.getIsComplete();
		this.assessmentinfo = ims.nursing.vo.AssessmentInfoCollection.buildFromBeanCollection(bean.getAssessmentInfo());
		this.copy = bean.getCopy();
		this.componenttype = bean.getComponentType() == null ? null : ims.nursing.vo.lookups.AssessmentComponentType.buildLookup(bean.getComponentType());
		this.lastassessmentinfo = bean.getLastAssessmentInfo() == null ? null : bean.getLastAssessmentInfo().buildVo(map);
		this.careplantemplate = ims.nursing.vo.CarePlanTemplateCollection.buildFromBeanCollection(bean.getCarePlanTemplate());
		this.careplans = ims.nursing.vo.CarePlanCollection.buildFromBeanCollection(bean.getCarePlans());
		this.religion = bean.getReligion();
		this.belieforfaith = bean.getBeliefOrFaith() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getBeliefOrFaith());
		this.practicingmember = bean.getPracticingMember() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getPracticingMember());
		this.continuepracticing = bean.getContinuePracticing() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getContinuePracticing());
		this.name = bean.getName();
		this.address = bean.getAddress();
		this.telephonenumber = bean.getTelephoneNumber();
		this.requirements = bean.getRequirements();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.coe.vo.beans.AssessmentSpiritualityBean bean = null;
		if(map != null)
			bean = (ims.coe.vo.beans.AssessmentSpiritualityBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.coe.vo.beans.AssessmentSpiritualityBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("RELIGION"))
			return getReligion();
		if(fieldName.equals("BELIEFORFAITH"))
			return getBeliefOrFaith();
		if(fieldName.equals("PRACTICINGMEMBER"))
			return getPracticingMember();
		if(fieldName.equals("CONTINUEPRACTICING"))
			return getContinuePracticing();
		if(fieldName.equals("NAME"))
			return getName();
		if(fieldName.equals("ADDRESS"))
			return getAddress();
		if(fieldName.equals("TELEPHONENUMBER"))
			return getTelephoneNumber();
		if(fieldName.equals("REQUIREMENTS"))
			return getRequirements();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getReligionIsNotNull()
	{
		return this.religion != null;
	}
	public String getReligion()
	{
		return this.religion;
	}
	public static int getReligionMaxLength()
	{
		return 255;
	}
	public void setReligion(String value)
	{
		this.isValidated = false;
		this.religion = value;
	}
	public boolean getBeliefOrFaithIsNotNull()
	{
		return this.belieforfaith != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getBeliefOrFaith()
	{
		return this.belieforfaith;
	}
	public void setBeliefOrFaith(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.belieforfaith = value;
	}
	public boolean getPracticingMemberIsNotNull()
	{
		return this.practicingmember != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getPracticingMember()
	{
		return this.practicingmember;
	}
	public void setPracticingMember(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.practicingmember = value;
	}
	public boolean getContinuePracticingIsNotNull()
	{
		return this.continuepracticing != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getContinuePracticing()
	{
		return this.continuepracticing;
	}
	public void setContinuePracticing(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.continuepracticing = value;
	}
	public boolean getNameIsNotNull()
	{
		return this.name != null;
	}
	public String getName()
	{
		return this.name;
	}
	public static int getNameMaxLength()
	{
		return 255;
	}
	public void setName(String value)
	{
		this.isValidated = false;
		this.name = value;
	}
	public boolean getAddressIsNotNull()
	{
		return this.address != null;
	}
	public String getAddress()
	{
		return this.address;
	}
	public static int getAddressMaxLength()
	{
		return 255;
	}
	public void setAddress(String value)
	{
		this.isValidated = false;
		this.address = value;
	}
	public boolean getTelephoneNumberIsNotNull()
	{
		return this.telephonenumber != null;
	}
	public String getTelephoneNumber()
	{
		return this.telephonenumber;
	}
	public static int getTelephoneNumberMaxLength()
	{
		return 30;
	}
	public void setTelephoneNumber(String value)
	{
		this.isValidated = false;
		this.telephonenumber = value;
	}
	public boolean getRequirementsIsNotNull()
	{
		return this.requirements != null;
	}
	public String getRequirements()
	{
		return this.requirements;
	}
	public static int getRequirementsMaxLength()
	{
		return 255;
	}
	public void setRequirements(String value)
	{
		this.isValidated = false;
		this.requirements = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.assessmentinfo != null)
		{
			if(!this.assessmentinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.lastassessmentinfo != null)
		{
			if(!this.lastassessmentinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.careplantemplate != null)
		{
			if(!this.careplantemplate.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.careplans != null)
		{
			if(!this.careplans.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.assessmentinfo != null)
		{
			String[] listOfOtherErrors = this.assessmentinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.lastassessmentinfo != null)
		{
			String[] listOfOtherErrors = this.lastassessmentinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.careplantemplate != null)
		{
			String[] listOfOtherErrors = this.careplantemplate.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.careplans != null)
		{
			String[] listOfOtherErrors = this.careplans.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.telephonenumber != null)
			if(this.telephonenumber.length() > 30)
				listOfErrors.add("The length of the field [telephonenumber] in the value object [ims.coe.vo.AssessmentSpirituality] is too big. It should be less or equal to 30");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AssessmentSpirituality clone = new AssessmentSpirituality(this.id, this.version);
		
		clone.iscomplete = this.iscomplete;
		if(this.assessmentinfo == null)
			clone.assessmentinfo = null;
		else
			clone.assessmentinfo = (ims.nursing.vo.AssessmentInfoCollection)this.assessmentinfo.clone();
		clone.copy = this.copy;
		if(this.componenttype == null)
			clone.componenttype = null;
		else
			clone.componenttype = (ims.nursing.vo.lookups.AssessmentComponentType)this.componenttype.clone();
		if(this.lastassessmentinfo == null)
			clone.lastassessmentinfo = null;
		else
			clone.lastassessmentinfo = (ims.nursing.vo.AssessmentInfo)this.lastassessmentinfo.clone();
		if(this.careplantemplate == null)
			clone.careplantemplate = null;
		else
			clone.careplantemplate = (ims.nursing.vo.CarePlanTemplateCollection)this.careplantemplate.clone();
		if(this.careplans == null)
			clone.careplans = null;
		else
			clone.careplans = (ims.nursing.vo.CarePlanCollection)this.careplans.clone();
		clone.religion = this.religion;
		if(this.belieforfaith == null)
			clone.belieforfaith = null;
		else
			clone.belieforfaith = (ims.core.vo.lookups.YesNoUnknown)this.belieforfaith.clone();
		if(this.practicingmember == null)
			clone.practicingmember = null;
		else
			clone.practicingmember = (ims.core.vo.lookups.YesNoUnknown)this.practicingmember.clone();
		if(this.continuepracticing == null)
			clone.continuepracticing = null;
		else
			clone.continuepracticing = (ims.core.vo.lookups.YesNoUnknown)this.continuepracticing.clone();
		clone.name = this.name;
		clone.address = this.address;
		clone.telephonenumber = this.telephonenumber;
		clone.requirements = this.requirements;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AssessmentSpirituality.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AssessmentSpirituality object cannot be compared an Object of type " + obj.getClass().getName());
		}
		AssessmentSpirituality compareObj = (AssessmentSpirituality)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_AssessmentComponent() == null && compareObj.getID_AssessmentComponent() != null)
				return -1;
			if(this.getID_AssessmentComponent() != null && compareObj.getID_AssessmentComponent() == null)
				return 1;
			if(this.getID_AssessmentComponent() != null && compareObj.getID_AssessmentComponent() != null)
				retVal = this.getID_AssessmentComponent().compareTo(compareObj.getID_AssessmentComponent());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.religion != null)
			count++;
		if(this.belieforfaith != null)
			count++;
		if(this.practicingmember != null)
			count++;
		if(this.continuepracticing != null)
			count++;
		if(this.name != null)
			count++;
		if(this.address != null)
			count++;
		if(this.telephonenumber != null)
			count++;
		if(this.requirements != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 8;
	}
	protected String religion;
	protected ims.core.vo.lookups.YesNoUnknown belieforfaith;
	protected ims.core.vo.lookups.YesNoUnknown practicingmember;
	protected ims.core.vo.lookups.YesNoUnknown continuepracticing;
	protected String name;
	protected String address;
	protected String telephonenumber;
	protected String requirements;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
