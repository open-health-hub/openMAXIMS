//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.vo;

/**
 * Linked to coe.assessment.Communication Hearing business object (ID: 1012100013).
 */
public class CommunicationHearingVo extends ims.coe.assessment.vo.CommunicationHearingRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public CommunicationHearingVo()
	{
	}
	public CommunicationHearingVo(Integer id, int version)
	{
		super(id, version);
	}
	public CommunicationHearingVo(ims.coe.vo.beans.CommunicationHearingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.hearingimpairment = bean.getHearingImpairment() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getHearingImpairment());
		this.effectedears = bean.getEffectedEars() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getEffectedEars());
		this.hearingaid = bean.getHearingAid() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getHearingAid());
		this.hearingaidwithpatientonadmission = bean.getHearingAidWithPatientOnAdmission() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getHearingAidWithPatientOnAdmission());
		this.batteriesinorder = bean.getBatteriesInOrder() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getBatteriesInOrder());
		this.yearlasthearingtest = bean.getYearLastHearingTest();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.coe.vo.beans.CommunicationHearingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.hearingimpairment = bean.getHearingImpairment() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getHearingImpairment());
		this.effectedears = bean.getEffectedEars() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getEffectedEars());
		this.hearingaid = bean.getHearingAid() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getHearingAid());
		this.hearingaidwithpatientonadmission = bean.getHearingAidWithPatientOnAdmission() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getHearingAidWithPatientOnAdmission());
		this.batteriesinorder = bean.getBatteriesInOrder() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getBatteriesInOrder());
		this.yearlasthearingtest = bean.getYearLastHearingTest();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.coe.vo.beans.CommunicationHearingVoBean bean = null;
		if(map != null)
			bean = (ims.coe.vo.beans.CommunicationHearingVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.coe.vo.beans.CommunicationHearingVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("HEARINGIMPAIRMENT"))
			return getHearingImpairment();
		if(fieldName.equals("EFFECTEDEARS"))
			return getEffectedEars();
		if(fieldName.equals("HEARINGAID"))
			return getHearingAid();
		if(fieldName.equals("HEARINGAIDWITHPATIENTONADMISSION"))
			return getHearingAidWithPatientOnAdmission();
		if(fieldName.equals("BATTERIESINORDER"))
			return getBatteriesInOrder();
		if(fieldName.equals("YEARLASTHEARINGTEST"))
			return getYearLastHearingTest();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getHearingImpairmentIsNotNull()
	{
		return this.hearingimpairment != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getHearingImpairment()
	{
		return this.hearingimpairment;
	}
	public void setHearingImpairment(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.hearingimpairment = value;
	}
	public boolean getEffectedEarsIsNotNull()
	{
		return this.effectedears != null;
	}
	public ims.core.vo.lookups.LateralityLRB getEffectedEars()
	{
		return this.effectedears;
	}
	public void setEffectedEars(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.effectedears = value;
	}
	public boolean getHearingAidIsNotNull()
	{
		return this.hearingaid != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getHearingAid()
	{
		return this.hearingaid;
	}
	public void setHearingAid(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.hearingaid = value;
	}
	public boolean getHearingAidWithPatientOnAdmissionIsNotNull()
	{
		return this.hearingaidwithpatientonadmission != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getHearingAidWithPatientOnAdmission()
	{
		return this.hearingaidwithpatientonadmission;
	}
	public void setHearingAidWithPatientOnAdmission(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.hearingaidwithpatientonadmission = value;
	}
	public boolean getBatteriesInOrderIsNotNull()
	{
		return this.batteriesinorder != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getBatteriesInOrder()
	{
		return this.batteriesinorder;
	}
	public void setBatteriesInOrder(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.batteriesinorder = value;
	}
	public boolean getYearLastHearingTestIsNotNull()
	{
		return this.yearlasthearingtest != null;
	}
	public Integer getYearLastHearingTest()
	{
		return this.yearlasthearingtest;
	}
	public void setYearLastHearingTest(Integer value)
	{
		this.isValidated = false;
		this.yearlasthearingtest = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		CommunicationHearingVo clone = new CommunicationHearingVo(this.id, this.version);
		
		if(this.hearingimpairment == null)
			clone.hearingimpairment = null;
		else
			clone.hearingimpairment = (ims.core.vo.lookups.YesNoUnknown)this.hearingimpairment.clone();
		if(this.effectedears == null)
			clone.effectedears = null;
		else
			clone.effectedears = (ims.core.vo.lookups.LateralityLRB)this.effectedears.clone();
		if(this.hearingaid == null)
			clone.hearingaid = null;
		else
			clone.hearingaid = (ims.core.vo.lookups.YesNoUnknown)this.hearingaid.clone();
		if(this.hearingaidwithpatientonadmission == null)
			clone.hearingaidwithpatientonadmission = null;
		else
			clone.hearingaidwithpatientonadmission = (ims.core.vo.lookups.YesNoUnknown)this.hearingaidwithpatientonadmission.clone();
		if(this.batteriesinorder == null)
			clone.batteriesinorder = null;
		else
			clone.batteriesinorder = (ims.core.vo.lookups.YesNoUnknown)this.batteriesinorder.clone();
		clone.yearlasthearingtest = this.yearlasthearingtest;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(CommunicationHearingVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A CommunicationHearingVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((CommunicationHearingVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((CommunicationHearingVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.hearingimpairment != null)
			count++;
		if(this.effectedears != null)
			count++;
		if(this.hearingaid != null)
			count++;
		if(this.hearingaidwithpatientonadmission != null)
			count++;
		if(this.batteriesinorder != null)
			count++;
		if(this.yearlasthearingtest != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.core.vo.lookups.YesNoUnknown hearingimpairment;
	protected ims.core.vo.lookups.LateralityLRB effectedears;
	protected ims.core.vo.lookups.YesNoUnknown hearingaid;
	protected ims.core.vo.lookups.YesNoUnknown hearingaidwithpatientonadmission;
	protected ims.core.vo.lookups.YesNoUnknown batteriesinorder;
	protected Integer yearlasthearingtest;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
