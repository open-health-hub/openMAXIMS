//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.vo;

/**
 * Linked to nursing.assessment.Assessment Component business object (ID: 1015100001).
 */
public class InfectionControlComponentVo extends ims.nursing.vo.AssessmentComponent implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public InfectionControlComponentVo()
	{
	}
	public InfectionControlComponentVo(Integer id, int version)
	{
		super(id, version);
	}
	public InfectionControlComponentVo(ims.coe.vo.beans.InfectionControlComponentVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.iscomplete = bean.getIsComplete();
		this.assessmentinfo = ims.nursing.vo.AssessmentInfoCollection.buildFromBeanCollection(bean.getAssessmentInfo());
		this.copy = bean.getCopy();
		this.componenttype = bean.getComponentType() == null ? null : ims.nursing.vo.lookups.AssessmentComponentType.buildLookup(bean.getComponentType());
		this.lastassessmentinfo = bean.getLastAssessmentInfo() == null ? null : bean.getLastAssessmentInfo().buildVo();
		this.careplantemplate = ims.nursing.vo.CarePlanTemplateCollection.buildFromBeanCollection(bean.getCarePlanTemplate());
		this.careplans = ims.nursing.vo.CarePlanCollection.buildFromBeanCollection(bean.getCarePlans());
		this.mrsa = bean.getMRSA() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getMRSA());
		this.mrsacomment = bean.getMRSAComment();
		this.clostridium = bean.getClostridium() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getClostridium());
		this.clostridiumcomment = bean.getClostridiumComment();
		this.vre = bean.getVRE() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getVRE());
		this.vrecomment = bean.getVREComment();
		this.esbc = bean.getESBC() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getESBC());
		this.esbccomment = bean.getESBCComment();
		this.tb = bean.getTB() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getTB());
		this.tbcomment = bean.getTBComment();
		this.norovirus = bean.getNorovirus() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getNorovirus());
		this.noroviruscomment = bean.getNorovirusComment();
		this.controlrequirement = bean.getControlRequirement() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getControlRequirement());
		this.notes = bean.getNotes();
		this.infectioncontrolassessment = bean.getInfectionControlAssessment() == null ? null : bean.getInfectionControlAssessment().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.coe.vo.beans.InfectionControlComponentVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.iscomplete = bean.getIsComplete();
		this.assessmentinfo = ims.nursing.vo.AssessmentInfoCollection.buildFromBeanCollection(bean.getAssessmentInfo());
		this.copy = bean.getCopy();
		this.componenttype = bean.getComponentType() == null ? null : ims.nursing.vo.lookups.AssessmentComponentType.buildLookup(bean.getComponentType());
		this.lastassessmentinfo = bean.getLastAssessmentInfo() == null ? null : bean.getLastAssessmentInfo().buildVo(map);
		this.careplantemplate = ims.nursing.vo.CarePlanTemplateCollection.buildFromBeanCollection(bean.getCarePlanTemplate());
		this.careplans = ims.nursing.vo.CarePlanCollection.buildFromBeanCollection(bean.getCarePlans());
		this.mrsa = bean.getMRSA() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getMRSA());
		this.mrsacomment = bean.getMRSAComment();
		this.clostridium = bean.getClostridium() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getClostridium());
		this.clostridiumcomment = bean.getClostridiumComment();
		this.vre = bean.getVRE() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getVRE());
		this.vrecomment = bean.getVREComment();
		this.esbc = bean.getESBC() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getESBC());
		this.esbccomment = bean.getESBCComment();
		this.tb = bean.getTB() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getTB());
		this.tbcomment = bean.getTBComment();
		this.norovirus = bean.getNorovirus() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getNorovirus());
		this.noroviruscomment = bean.getNorovirusComment();
		this.controlrequirement = bean.getControlRequirement() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getControlRequirement());
		this.notes = bean.getNotes();
		this.infectioncontrolassessment = bean.getInfectionControlAssessment() == null ? null : bean.getInfectionControlAssessment().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.coe.vo.beans.InfectionControlComponentVoBean bean = null;
		if(map != null)
			bean = (ims.coe.vo.beans.InfectionControlComponentVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.coe.vo.beans.InfectionControlComponentVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("MRSA"))
			return getMRSA();
		if(fieldName.equals("MRSACOMMENT"))
			return getMRSAComment();
		if(fieldName.equals("CLOSTRIDIUM"))
			return getClostridium();
		if(fieldName.equals("CLOSTRIDIUMCOMMENT"))
			return getClostridiumComment();
		if(fieldName.equals("VRE"))
			return getVRE();
		if(fieldName.equals("VRECOMMENT"))
			return getVREComment();
		if(fieldName.equals("ESBC"))
			return getESBC();
		if(fieldName.equals("ESBCCOMMENT"))
			return getESBCComment();
		if(fieldName.equals("TB"))
			return getTB();
		if(fieldName.equals("TBCOMMENT"))
			return getTBComment();
		if(fieldName.equals("NOROVIRUS"))
			return getNorovirus();
		if(fieldName.equals("NOROVIRUSCOMMENT"))
			return getNorovirusComment();
		if(fieldName.equals("CONTROLREQUIREMENT"))
			return getControlRequirement();
		if(fieldName.equals("NOTES"))
			return getNotes();
		if(fieldName.equals("INFECTIONCONTROLASSESSMENT"))
			return getInfectionControlAssessment();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getMRSAIsNotNull()
	{
		return this.mrsa != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getMRSA()
	{
		return this.mrsa;
	}
	public void setMRSA(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.mrsa = value;
	}
	public boolean getMRSACommentIsNotNull()
	{
		return this.mrsacomment != null;
	}
	public String getMRSAComment()
	{
		return this.mrsacomment;
	}
	public static int getMRSACommentMaxLength()
	{
		return 255;
	}
	public void setMRSAComment(String value)
	{
		this.isValidated = false;
		this.mrsacomment = value;
	}
	public boolean getClostridiumIsNotNull()
	{
		return this.clostridium != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getClostridium()
	{
		return this.clostridium;
	}
	public void setClostridium(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.clostridium = value;
	}
	public boolean getClostridiumCommentIsNotNull()
	{
		return this.clostridiumcomment != null;
	}
	public String getClostridiumComment()
	{
		return this.clostridiumcomment;
	}
	public static int getClostridiumCommentMaxLength()
	{
		return 255;
	}
	public void setClostridiumComment(String value)
	{
		this.isValidated = false;
		this.clostridiumcomment = value;
	}
	public boolean getVREIsNotNull()
	{
		return this.vre != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getVRE()
	{
		return this.vre;
	}
	public void setVRE(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.vre = value;
	}
	public boolean getVRECommentIsNotNull()
	{
		return this.vrecomment != null;
	}
	public String getVREComment()
	{
		return this.vrecomment;
	}
	public static int getVRECommentMaxLength()
	{
		return 255;
	}
	public void setVREComment(String value)
	{
		this.isValidated = false;
		this.vrecomment = value;
	}
	public boolean getESBCIsNotNull()
	{
		return this.esbc != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getESBC()
	{
		return this.esbc;
	}
	public void setESBC(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.esbc = value;
	}
	public boolean getESBCCommentIsNotNull()
	{
		return this.esbccomment != null;
	}
	public String getESBCComment()
	{
		return this.esbccomment;
	}
	public static int getESBCCommentMaxLength()
	{
		return 255;
	}
	public void setESBCComment(String value)
	{
		this.isValidated = false;
		this.esbccomment = value;
	}
	public boolean getTBIsNotNull()
	{
		return this.tb != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getTB()
	{
		return this.tb;
	}
	public void setTB(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.tb = value;
	}
	public boolean getTBCommentIsNotNull()
	{
		return this.tbcomment != null;
	}
	public String getTBComment()
	{
		return this.tbcomment;
	}
	public static int getTBCommentMaxLength()
	{
		return 255;
	}
	public void setTBComment(String value)
	{
		this.isValidated = false;
		this.tbcomment = value;
	}
	public boolean getNorovirusIsNotNull()
	{
		return this.norovirus != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getNorovirus()
	{
		return this.norovirus;
	}
	public void setNorovirus(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.norovirus = value;
	}
	public boolean getNorovirusCommentIsNotNull()
	{
		return this.noroviruscomment != null;
	}
	public String getNorovirusComment()
	{
		return this.noroviruscomment;
	}
	public static int getNorovirusCommentMaxLength()
	{
		return 255;
	}
	public void setNorovirusComment(String value)
	{
		this.isValidated = false;
		this.noroviruscomment = value;
	}
	public boolean getControlRequirementIsNotNull()
	{
		return this.controlrequirement != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getControlRequirement()
	{
		return this.controlrequirement;
	}
	public void setControlRequirement(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.controlrequirement = value;
	}
	public boolean getNotesIsNotNull()
	{
		return this.notes != null;
	}
	public String getNotes()
	{
		return this.notes;
	}
	public static int getNotesMaxLength()
	{
		return 500;
	}
	public void setNotes(String value)
	{
		this.isValidated = false;
		this.notes = value;
	}
	public boolean getInfectionControlAssessmentIsNotNull()
	{
		return this.infectioncontrolassessment != null;
	}
	public ims.coe.vo.InfectionControlRepeatableAssessmentVo getInfectionControlAssessment()
	{
		return this.infectioncontrolassessment;
	}
	public void setInfectionControlAssessment(ims.coe.vo.InfectionControlRepeatableAssessmentVo value)
	{
		this.isValidated = false;
		this.infectioncontrolassessment = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.assessmentinfo != null)
		{
			if(!this.assessmentinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.lastassessmentinfo != null)
		{
			if(!this.lastassessmentinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.careplantemplate != null)
		{
			if(!this.careplantemplate.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.careplans != null)
		{
			if(!this.careplans.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.assessmentinfo != null)
		{
			String[] listOfOtherErrors = this.assessmentinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.lastassessmentinfo != null)
		{
			String[] listOfOtherErrors = this.lastassessmentinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.careplantemplate != null)
		{
			String[] listOfOtherErrors = this.careplantemplate.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.careplans != null)
		{
			String[] listOfOtherErrors = this.careplans.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.mrsacomment != null)
			if(this.mrsacomment.length() > 255)
				listOfErrors.add("The length of the field [mrsacomment] in the value object [ims.coe.vo.InfectionControlComponentVo] is too big. It should be less or equal to 255");
		if(this.clostridiumcomment != null)
			if(this.clostridiumcomment.length() > 255)
				listOfErrors.add("The length of the field [clostridiumcomment] in the value object [ims.coe.vo.InfectionControlComponentVo] is too big. It should be less or equal to 255");
		if(this.vrecomment != null)
			if(this.vrecomment.length() > 255)
				listOfErrors.add("The length of the field [vrecomment] in the value object [ims.coe.vo.InfectionControlComponentVo] is too big. It should be less or equal to 255");
		if(this.esbccomment != null)
			if(this.esbccomment.length() > 255)
				listOfErrors.add("The length of the field [esbccomment] in the value object [ims.coe.vo.InfectionControlComponentVo] is too big. It should be less or equal to 255");
		if(this.tbcomment != null)
			if(this.tbcomment.length() > 255)
				listOfErrors.add("The length of the field [tbcomment] in the value object [ims.coe.vo.InfectionControlComponentVo] is too big. It should be less or equal to 255");
		if(this.noroviruscomment != null)
			if(this.noroviruscomment.length() > 255)
				listOfErrors.add("The length of the field [noroviruscomment] in the value object [ims.coe.vo.InfectionControlComponentVo] is too big. It should be less or equal to 255");
		if(this.notes != null)
			if(this.notes.length() > 500)
				listOfErrors.add("The length of the field [notes] in the value object [ims.coe.vo.InfectionControlComponentVo] is too big. It should be less or equal to 500");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		InfectionControlComponentVo clone = new InfectionControlComponentVo(this.id, this.version);
		
		clone.iscomplete = this.iscomplete;
		if(this.assessmentinfo == null)
			clone.assessmentinfo = null;
		else
			clone.assessmentinfo = (ims.nursing.vo.AssessmentInfoCollection)this.assessmentinfo.clone();
		clone.copy = this.copy;
		if(this.componenttype == null)
			clone.componenttype = null;
		else
			clone.componenttype = (ims.nursing.vo.lookups.AssessmentComponentType)this.componenttype.clone();
		if(this.lastassessmentinfo == null)
			clone.lastassessmentinfo = null;
		else
			clone.lastassessmentinfo = (ims.nursing.vo.AssessmentInfo)this.lastassessmentinfo.clone();
		if(this.careplantemplate == null)
			clone.careplantemplate = null;
		else
			clone.careplantemplate = (ims.nursing.vo.CarePlanTemplateCollection)this.careplantemplate.clone();
		if(this.careplans == null)
			clone.careplans = null;
		else
			clone.careplans = (ims.nursing.vo.CarePlanCollection)this.careplans.clone();
		if(this.mrsa == null)
			clone.mrsa = null;
		else
			clone.mrsa = (ims.core.vo.lookups.YesNoUnknown)this.mrsa.clone();
		clone.mrsacomment = this.mrsacomment;
		if(this.clostridium == null)
			clone.clostridium = null;
		else
			clone.clostridium = (ims.core.vo.lookups.YesNoUnknown)this.clostridium.clone();
		clone.clostridiumcomment = this.clostridiumcomment;
		if(this.vre == null)
			clone.vre = null;
		else
			clone.vre = (ims.core.vo.lookups.YesNoUnknown)this.vre.clone();
		clone.vrecomment = this.vrecomment;
		if(this.esbc == null)
			clone.esbc = null;
		else
			clone.esbc = (ims.core.vo.lookups.YesNoUnknown)this.esbc.clone();
		clone.esbccomment = this.esbccomment;
		if(this.tb == null)
			clone.tb = null;
		else
			clone.tb = (ims.core.vo.lookups.YesNoUnknown)this.tb.clone();
		clone.tbcomment = this.tbcomment;
		if(this.norovirus == null)
			clone.norovirus = null;
		else
			clone.norovirus = (ims.core.vo.lookups.YesNoUnknown)this.norovirus.clone();
		clone.noroviruscomment = this.noroviruscomment;
		if(this.controlrequirement == null)
			clone.controlrequirement = null;
		else
			clone.controlrequirement = (ims.core.vo.lookups.YesNoUnknown)this.controlrequirement.clone();
		clone.notes = this.notes;
		if(this.infectioncontrolassessment == null)
			clone.infectioncontrolassessment = null;
		else
			clone.infectioncontrolassessment = (ims.coe.vo.InfectionControlRepeatableAssessmentVo)this.infectioncontrolassessment.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(InfectionControlComponentVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A InfectionControlComponentVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((InfectionControlComponentVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((InfectionControlComponentVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.mrsa != null)
			count++;
		if(this.mrsacomment != null)
			count++;
		if(this.clostridium != null)
			count++;
		if(this.clostridiumcomment != null)
			count++;
		if(this.vre != null)
			count++;
		if(this.vrecomment != null)
			count++;
		if(this.esbc != null)
			count++;
		if(this.esbccomment != null)
			count++;
		if(this.tb != null)
			count++;
		if(this.tbcomment != null)
			count++;
		if(this.norovirus != null)
			count++;
		if(this.noroviruscomment != null)
			count++;
		if(this.controlrequirement != null)
			count++;
		if(this.notes != null)
			count++;
		if(this.infectioncontrolassessment != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 15;
	}
	protected ims.core.vo.lookups.YesNoUnknown mrsa;
	protected String mrsacomment;
	protected ims.core.vo.lookups.YesNoUnknown clostridium;
	protected String clostridiumcomment;
	protected ims.core.vo.lookups.YesNoUnknown vre;
	protected String vrecomment;
	protected ims.core.vo.lookups.YesNoUnknown esbc;
	protected String esbccomment;
	protected ims.core.vo.lookups.YesNoUnknown tb;
	protected String tbcomment;
	protected ims.core.vo.lookups.YesNoUnknown norovirus;
	protected String noroviruscomment;
	protected ims.core.vo.lookups.YesNoUnknown controlrequirement;
	protected String notes;
	protected ims.coe.vo.InfectionControlRepeatableAssessmentVo infectioncontrolassessment;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
