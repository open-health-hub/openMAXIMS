//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.vo;

/**
 * Linked to Pathways.PatientEvent business object (ID: 1088100002).
 */
public class PatientEventLiteVo extends ims.pathways.vo.PatientEventRefVo implements ims.vo.ImsCloneable, Comparable, ims.vo.interfaces.IDiaryEntry
{
	private static final long serialVersionUID = 1L;

	public PatientEventLiteVo()
	{
	}
	public PatientEventLiteVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientEventLiteVo(ims.pathways.vo.beans.PatientEventLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.event = bean.getEvent() == null ? null : bean.getEvent().buildVo();
		this.eventdatetime = bean.getEventDateTime() == null ? null : bean.getEventDateTime().buildDateTime();
		this.scheduleddate = bean.getScheduledDate() == null ? null : bean.getScheduledDate().buildDateTime();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo();
		this.cliniccode = bean.getClinicCode();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.pathways.vo.beans.PatientEventLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.event = bean.getEvent() == null ? null : bean.getEvent().buildVo(map);
		this.eventdatetime = bean.getEventDateTime() == null ? null : bean.getEventDateTime().buildDateTime();
		this.scheduleddate = bean.getScheduledDate() == null ? null : bean.getScheduledDate().buildDateTime();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo(map);
		this.cliniccode = bean.getClinicCode();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.pathways.vo.beans.PatientEventLiteVoBean bean = null;
		if(map != null)
			bean = (ims.pathways.vo.beans.PatientEventLiteVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.pathways.vo.beans.PatientEventLiteVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("EVENT"))
			return getEvent();
		if(fieldName.equals("EVENTDATETIME"))
			return getEventDateTime();
		if(fieldName.equals("SCHEDULEDDATE"))
			return getScheduledDate();
		if(fieldName.equals("SPECIALTY"))
			return getSpecialty();
		if(fieldName.equals("CONSULTANT"))
			return getConsultant();
		if(fieldName.equals("CLINICCODE"))
			return getClinicCode();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getEventIsNotNull()
	{
		return this.event != null;
	}
	public ims.pathways.vo.EventLiteVo getEvent()
	{
		return this.event;
	}
	public void setEvent(ims.pathways.vo.EventLiteVo value)
	{
		this.isValidated = false;
		this.event = value;
	}
	public boolean getEventDateTimeIsNotNull()
	{
		return this.eventdatetime != null;
	}
	public ims.framework.utils.DateTime getEventDateTime()
	{
		return this.eventdatetime;
	}
	public void setEventDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.eventdatetime = value;
	}
	public boolean getScheduledDateIsNotNull()
	{
		return this.scheduleddate != null;
	}
	public ims.framework.utils.DateTime getScheduledDate()
	{
		return this.scheduleddate;
	}
	public void setScheduledDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.scheduleddate = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.lookups.Specialty getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getConsultantIsNotNull()
	{
		return this.consultant != null;
	}
	public ims.core.vo.HcpLiteVo getConsultant()
	{
		return this.consultant;
	}
	public void setConsultant(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.consultant = value;
	}
	public boolean getClinicCodeIsNotNull()
	{
		return this.cliniccode != null;
	}
	public String getClinicCode()
	{
		return this.cliniccode;
	}
	public static int getClinicCodeMaxLength()
	{
		return 255;
	}
	public void setClinicCode(String value)
	{
		this.isValidated = false;
		this.cliniccode = value;
	}
	/**
	* IDiaryEntry interface methods
	*/
		public ims.framework.utils.DateTime getIDiaryEntryDateTime()
		{
			if(this.scheduleddate != null)
				return this.scheduleddate;
			else
				return this.eventdatetime;
		}
		public ims.admin.vo.AppImageVo getIDiaryEntryImage()
		{
			return this.event.icon;
		}
		public String getIDiaryEntryText()
		{
			return this.event.name;
		}
		public String getIDiaryEntryTooltip()
		{
			if(this.event != null)
			{
				return "Name : " + "<b>" + this.event.name + "</b>" +
				(this.event.description != null && this.event.description != ""? 
				("<br></b>Desc : <b> " + this.event.description)  : "" ) +
				(this.event.status != null ? ("<br></b>Status : <b> " + this.event.status.toString())  : "" ) +
				(this.scheduleddate != null 
						? (" </b><br>Scheduled DateTime: " + "<b><i>" + getIDiaryEntryDateTime().toString() + "</b></i>" )
						: " </b><br>Event DateTime : " + "<b><i>" + getIDiaryEntryDateTime().toString() + "</b></i>") +
				(this.specialty != null ? ("   </b><br>Specialty : <b><i>" + this.specialty + "</b></i>") : "") +
				(this.consultant != null ? ("<br>Consultant : <b><i>" + this.consultant.getName() + "</b></i>") : "");
			}
			return "";
		}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.event != null)
		{
			if(!this.event.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.consultant != null)
		{
			if(!this.consultant.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.event == null)
			listOfErrors.add("Event is mandatory");
		if(this.event != null)
		{
			String[] listOfOtherErrors = this.event.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.consultant != null)
		{
			String[] listOfOtherErrors = this.consultant.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientEventLiteVo clone = new PatientEventLiteVo(this.id, this.version);
		
		if(this.event == null)
			clone.event = null;
		else
			clone.event = (ims.pathways.vo.EventLiteVo)this.event.clone();
		if(this.eventdatetime == null)
			clone.eventdatetime = null;
		else
			clone.eventdatetime = (ims.framework.utils.DateTime)this.eventdatetime.clone();
		if(this.scheduleddate == null)
			clone.scheduleddate = null;
		else
			clone.scheduleddate = (ims.framework.utils.DateTime)this.scheduleddate.clone();
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		if(this.consultant == null)
			clone.consultant = null;
		else
			clone.consultant = (ims.core.vo.HcpLiteVo)this.consultant.clone();
		clone.cliniccode = this.cliniccode;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientEventLiteVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientEventLiteVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientEventLiteVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientEventLiteVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.event != null)
			count++;
		if(this.eventdatetime != null)
			count++;
		if(this.scheduleddate != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.consultant != null)
			count++;
		if(this.cliniccode != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.pathways.vo.EventLiteVo event;
	protected ims.framework.utils.DateTime eventdatetime;
	protected ims.framework.utils.DateTime scheduleddate;
	protected ims.core.vo.lookups.Specialty specialty;
	protected ims.core.vo.HcpLiteVo consultant;
	protected String cliniccode;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
