//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.vo;

/**
 * Linked to core.clinical.Assessment business object (ID: 1003100002).
 */
public class AssessmentOverview extends ims.core.vo.AssessmentVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AssessmentOverview()
	{
	}
	public AssessmentOverview(Integer id, int version)
	{
		super(id, version);
	}
	public AssessmentOverview(ims.nursing.vo.beans.AssessmentOverviewBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.hcpinitiated = bean.getHcpInitiated() == null ? null : bean.getHcpInitiated().buildVo();
		this.datetimeinitiated = bean.getDateTimeInitiated() == null ? null : bean.getDateTimeInitiated().buildDateTime();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.components = ims.nursing.vo.AssessmentComponentLiteVoCollection.buildFromBeanCollection(bean.getComponents());
		this.assessmenttype = bean.getAssessmentType() == null ? null : ims.nursing.vo.lookups.AssessmentType.buildLookup(bean.getAssessmentType());
		this.assessmentstatus = bean.getAssessmentStatus() == null ? null : ims.nursing.vo.lookups.AssessmentStatus.buildLookup(bean.getAssessmentStatus());
		this.hcpcomplete = bean.getHCPComplete() == null ? null : bean.getHCPComplete().buildVo();
		this.datetimecomplete = bean.getDateTimeComplete() == null ? null : bean.getDateTimeComplete().buildDateTime();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.nursing.vo.beans.AssessmentOverviewBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.hcpinitiated = bean.getHcpInitiated() == null ? null : bean.getHcpInitiated().buildVo(map);
		this.datetimeinitiated = bean.getDateTimeInitiated() == null ? null : bean.getDateTimeInitiated().buildDateTime();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.components = ims.nursing.vo.AssessmentComponentLiteVoCollection.buildFromBeanCollection(bean.getComponents());
		this.assessmenttype = bean.getAssessmentType() == null ? null : ims.nursing.vo.lookups.AssessmentType.buildLookup(bean.getAssessmentType());
		this.assessmentstatus = bean.getAssessmentStatus() == null ? null : ims.nursing.vo.lookups.AssessmentStatus.buildLookup(bean.getAssessmentStatus());
		this.hcpcomplete = bean.getHCPComplete() == null ? null : bean.getHCPComplete().buildVo(map);
		this.datetimecomplete = bean.getDateTimeComplete() == null ? null : bean.getDateTimeComplete().buildDateTime();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.nursing.vo.beans.AssessmentOverviewBean bean = null;
		if(map != null)
			bean = (ims.nursing.vo.beans.AssessmentOverviewBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.nursing.vo.beans.AssessmentOverviewBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("COMPONENTS"))
			return getComponents();
		if(fieldName.equals("ASSESSMENTTYPE"))
			return getAssessmentType();
		if(fieldName.equals("ASSESSMENTSTATUS"))
			return getAssessmentStatus();
		if(fieldName.equals("HCPCOMPLETE"))
			return getHCPComplete();
		if(fieldName.equals("DATETIMECOMPLETE"))
			return getDateTimeComplete();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getComponentsIsNotNull()
	{
		return this.components != null;
	}
	public ims.nursing.vo.AssessmentComponentLiteVoCollection getComponents()
	{
		return this.components;
	}
	public void setComponents(ims.nursing.vo.AssessmentComponentLiteVoCollection value)
	{
		this.isValidated = false;
		this.components = value;
	}
	public boolean getAssessmentTypeIsNotNull()
	{
		return this.assessmenttype != null;
	}
	public ims.nursing.vo.lookups.AssessmentType getAssessmentType()
	{
		return this.assessmenttype;
	}
	public void setAssessmentType(ims.nursing.vo.lookups.AssessmentType value)
	{
		this.isValidated = false;
		this.assessmenttype = value;
	}
	public boolean getAssessmentStatusIsNotNull()
	{
		return this.assessmentstatus != null;
	}
	public ims.nursing.vo.lookups.AssessmentStatus getAssessmentStatus()
	{
		return this.assessmentstatus;
	}
	public void setAssessmentStatus(ims.nursing.vo.lookups.AssessmentStatus value)
	{
		this.isValidated = false;
		this.assessmentstatus = value;
	}
	public boolean getHCPCompleteIsNotNull()
	{
		return this.hcpcomplete != null;
	}
	public ims.core.vo.HcpLiteVo getHCPComplete()
	{
		return this.hcpcomplete;
	}
	public void setHCPComplete(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.hcpcomplete = value;
	}
	public boolean getDateTimeCompleteIsNotNull()
	{
		return this.datetimecomplete != null;
	}
	public ims.framework.utils.DateTime getDateTimeComplete()
	{
		return this.datetimecomplete;
	}
	public void setDateTimeComplete(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.datetimecomplete = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.components != null)
		{
			if(!this.components.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.hcpcomplete != null)
		{
			if(!this.hcpcomplete.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.components != null)
		{
			String[] listOfOtherErrors = this.components.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.hcpcomplete != null)
		{
			String[] listOfOtherErrors = this.hcpcomplete.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AssessmentOverview clone = new AssessmentOverview(this.id, this.version);
		
		if(this.hcpinitiated == null)
			clone.hcpinitiated = null;
		else
			clone.hcpinitiated = (ims.core.vo.HcpLiteVo)this.hcpinitiated.clone();
		if(this.datetimeinitiated == null)
			clone.datetimeinitiated = null;
		else
			clone.datetimeinitiated = (ims.framework.utils.DateTime)this.datetimeinitiated.clone();
		clone.clinicalcontact = this.clinicalcontact;
		clone.carecontext = this.carecontext;
		if(this.components == null)
			clone.components = null;
		else
			clone.components = (ims.nursing.vo.AssessmentComponentLiteVoCollection)this.components.clone();
		if(this.assessmenttype == null)
			clone.assessmenttype = null;
		else
			clone.assessmenttype = (ims.nursing.vo.lookups.AssessmentType)this.assessmenttype.clone();
		if(this.assessmentstatus == null)
			clone.assessmentstatus = null;
		else
			clone.assessmentstatus = (ims.nursing.vo.lookups.AssessmentStatus)this.assessmentstatus.clone();
		if(this.hcpcomplete == null)
			clone.hcpcomplete = null;
		else
			clone.hcpcomplete = (ims.core.vo.HcpLiteVo)this.hcpcomplete.clone();
		if(this.datetimecomplete == null)
			clone.datetimecomplete = null;
		else
			clone.datetimecomplete = (ims.framework.utils.DateTime)this.datetimecomplete.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AssessmentOverview.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AssessmentOverview object cannot be compared an Object of type " + obj.getClass().getName());
		}
		AssessmentOverview compareObj = (AssessmentOverview)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getDateTimeInitiated() == null && compareObj.getDateTimeInitiated() != null)
				return -1;
			if(this.getDateTimeInitiated() != null && compareObj.getDateTimeInitiated() == null)
				return 1;
			if(this.getDateTimeInitiated() != null && compareObj.getDateTimeInitiated() != null)
				retVal = this.getDateTimeInitiated().compareTo(compareObj.getDateTimeInitiated());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.components != null)
			count++;
		if(this.assessmenttype != null)
			count++;
		if(this.assessmentstatus != null)
			count++;
		if(this.hcpcomplete != null)
			count++;
		if(this.datetimecomplete != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 5;
	}
	protected ims.nursing.vo.AssessmentComponentLiteVoCollection components;
	protected ims.nursing.vo.lookups.AssessmentType assessmenttype;
	protected ims.nursing.vo.lookups.AssessmentStatus assessmentstatus;
	protected ims.core.vo.HcpLiteVo hcpcomplete;
	protected ims.framework.utils.DateTime datetimecomplete;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
