//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.vo;

/**
 * Linked to Oncology.PrimaryTumourDetails business object (ID: 1074100007).
 */
public class PrimaryTumourDetailsShortVo extends ims.oncology.vo.PrimaryTumourDetailsLiteVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PrimaryTumourDetailsShortVo()
	{
	}
	public PrimaryTumourDetailsShortVo(Integer id, int version)
	{
		super(id, version);
	}
	public PrimaryTumourDetailsShortVo(ims.oncology.vo.beans.PrimaryTumourDetailsShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.tumourgroup = bean.getTumourGroup() == null ? null : bean.getTumourGroup().buildVo();
		this.tumoursite = bean.getTumourSite() == null ? null : bean.getTumourSite().buildVo();
		this.tumourlaterality = bean.getTumourLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getTumourLaterality());
		this.iscurrent = bean.getIsCurrent();
		this.enddate = bean.getEndDate() == null ? null : bean.getEndDate().buildDate();
		this.patientdiagnosis = bean.getPatientDiagnosis() == null ? null : bean.getPatientDiagnosis().buildVo();
		this.pretreatmentoverall = bean.getPreTreatmentOverall() == null ? null : bean.getPreTreatmentOverall().buildVo();
		this.episodeofcare = bean.getEpisodeOfCare() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisodeOfCare().getId()), bean.getEpisodeOfCare().getVersion());
		this.tumourhistology = bean.getTumourHistology() == null ? null : bean.getTumourHistology().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.oncology.vo.beans.PrimaryTumourDetailsShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.tumourgroup = bean.getTumourGroup() == null ? null : bean.getTumourGroup().buildVo(map);
		this.tumoursite = bean.getTumourSite() == null ? null : bean.getTumourSite().buildVo(map);
		this.tumourlaterality = bean.getTumourLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getTumourLaterality());
		this.iscurrent = bean.getIsCurrent();
		this.enddate = bean.getEndDate() == null ? null : bean.getEndDate().buildDate();
		this.patientdiagnosis = bean.getPatientDiagnosis() == null ? null : bean.getPatientDiagnosis().buildVo(map);
		this.pretreatmentoverall = bean.getPreTreatmentOverall() == null ? null : bean.getPreTreatmentOverall().buildVo(map);
		this.episodeofcare = bean.getEpisodeOfCare() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisodeOfCare().getId()), bean.getEpisodeOfCare().getVersion());
		this.tumourhistology = bean.getTumourHistology() == null ? null : bean.getTumourHistology().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.oncology.vo.beans.PrimaryTumourDetailsShortVoBean bean = null;
		if(map != null)
			bean = (ims.oncology.vo.beans.PrimaryTumourDetailsShortVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.oncology.vo.beans.PrimaryTumourDetailsShortVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENTDIAGNOSIS"))
			return getPatientDiagnosis();
		if(fieldName.equals("PRETREATMENTOVERALL"))
			return getPreTreatmentOverall();
		if(fieldName.equals("EPISODEOFCARE"))
			return getEpisodeOfCare();
		if(fieldName.equals("TUMOURHISTOLOGY"))
			return getTumourHistology();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientDiagnosisIsNotNull()
	{
		return this.patientdiagnosis != null;
	}
	public ims.oncology.vo.PatientDiagnosisForPrimaryTumourVo getPatientDiagnosis()
	{
		return this.patientdiagnosis;
	}
	public void setPatientDiagnosis(ims.oncology.vo.PatientDiagnosisForPrimaryTumourVo value)
	{
		this.isValidated = false;
		this.patientdiagnosis = value;
	}
	public boolean getPreTreatmentOverallIsNotNull()
	{
		return this.pretreatmentoverall != null;
	}
	public ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo getPreTreatmentOverall()
	{
		return this.pretreatmentoverall;
	}
	public void setPreTreatmentOverall(ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo value)
	{
		this.isValidated = false;
		this.pretreatmentoverall = value;
	}
	public boolean getEpisodeOfCareIsNotNull()
	{
		return this.episodeofcare != null;
	}
	public ims.core.admin.vo.EpisodeOfCareRefVo getEpisodeOfCare()
	{
		return this.episodeofcare;
	}
	public void setEpisodeOfCare(ims.core.admin.vo.EpisodeOfCareRefVo value)
	{
		this.isValidated = false;
		this.episodeofcare = value;
	}
	public boolean getTumourHistologyIsNotNull()
	{
		return this.tumourhistology != null;
	}
	public ims.clinicaladmin.vo.TumourHistologyLiteVo getTumourHistology()
	{
		return this.tumourhistology;
	}
	public void setTumourHistology(ims.clinicaladmin.vo.TumourHistologyLiteVo value)
	{
		this.isValidated = false;
		this.tumourhistology = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.pretreatmentoverall != null)
		{
			if(!this.pretreatmentoverall.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.tumourhistology != null)
		{
			if(!this.tumourhistology.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.tumourgroup == null)
			listOfErrors.add("TumourGroup is mandatory");
		if(this.patientdiagnosis == null)
			listOfErrors.add("PatientDiagnosis is mandatory");
		if(this.pretreatmentoverall != null)
		{
			String[] listOfOtherErrors = this.pretreatmentoverall.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.episodeofcare == null)
			listOfErrors.add("EpisodeOfCare is mandatory");
		if(this.tumourhistology != null)
		{
			String[] listOfOtherErrors = this.tumourhistology.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PrimaryTumourDetailsShortVo clone = new PrimaryTumourDetailsShortVo(this.id, this.version);
		
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		if(this.tumourgroup == null)
			clone.tumourgroup = null;
		else
			clone.tumourgroup = (ims.clinicaladmin.vo.TumourGroupLiteVo)this.tumourgroup.clone();
		if(this.tumoursite == null)
			clone.tumoursite = null;
		else
			clone.tumoursite = (ims.clinicaladmin.vo.TumourSiteLiteVo)this.tumoursite.clone();
		if(this.tumourlaterality == null)
			clone.tumourlaterality = null;
		else
			clone.tumourlaterality = (ims.core.vo.lookups.LateralityLRB)this.tumourlaterality.clone();
		clone.iscurrent = this.iscurrent;
		if(this.enddate == null)
			clone.enddate = null;
		else
			clone.enddate = (ims.framework.utils.Date)this.enddate.clone();
		if(this.patientdiagnosis == null)
			clone.patientdiagnosis = null;
		else
			clone.patientdiagnosis = (ims.oncology.vo.PatientDiagnosisForPrimaryTumourVo)this.patientdiagnosis.clone();
		if(this.pretreatmentoverall == null)
			clone.pretreatmentoverall = null;
		else
			clone.pretreatmentoverall = (ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo)this.pretreatmentoverall.clone();
		clone.episodeofcare = this.episodeofcare;
		if(this.tumourhistology == null)
			clone.tumourhistology = null;
		else
			clone.tumourhistology = (ims.clinicaladmin.vo.TumourHistologyLiteVo)this.tumourhistology.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PrimaryTumourDetailsShortVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PrimaryTumourDetailsShortVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PrimaryTumourDetailsShortVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PrimaryTumourDetailsShortVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.patientdiagnosis != null)
			count++;
		if(this.pretreatmentoverall != null)
			count++;
		if(this.episodeofcare != null)
			count++;
		if(this.tumourhistology != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 4;
	}
	protected ims.oncology.vo.PatientDiagnosisForPrimaryTumourVo patientdiagnosis;
	protected ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVo pretreatmentoverall;
	protected ims.core.admin.vo.EpisodeOfCareRefVo episodeofcare;
	protected ims.clinicaladmin.vo.TumourHistologyLiteVo tumourhistology;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
