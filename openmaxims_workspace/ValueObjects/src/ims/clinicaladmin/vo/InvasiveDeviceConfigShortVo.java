//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.vo;

/**
 * Linked to clinical.configuration.InvasiveDeviceConfig business object (ID: 1073100015).
 */
public class InvasiveDeviceConfigShortVo extends ims.clinical.configuration.vo.InvasiveDeviceConfigRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public InvasiveDeviceConfigShortVo()
	{
	}
	public InvasiveDeviceConfigShortVo(Integer id, int version)
	{
		super(id, version);
	}
	public InvasiveDeviceConfigShortVo(ims.clinicaladmin.vo.beans.InvasiveDeviceConfigShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.invasivedevice = bean.getInvasiveDevice();
		this.durationint = bean.getDurationInt();
		this.durationunit = bean.getDurationUnit() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getDurationUnit());
		this.isactive = bean.getIsActive();
		this.size = ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVoCollection.buildFromBeanCollection(bean.getSize());
		this.requiresvip = bean.getRequiresVIP();
		this.hassite = bean.getHasSite();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinicaladmin.vo.beans.InvasiveDeviceConfigShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.invasivedevice = bean.getInvasiveDevice();
		this.durationint = bean.getDurationInt();
		this.durationunit = bean.getDurationUnit() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getDurationUnit());
		this.isactive = bean.getIsActive();
		this.size = ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVoCollection.buildFromBeanCollection(bean.getSize());
		this.requiresvip = bean.getRequiresVIP();
		this.hassite = bean.getHasSite();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinicaladmin.vo.beans.InvasiveDeviceConfigShortVoBean bean = null;
		if(map != null)
			bean = (ims.clinicaladmin.vo.beans.InvasiveDeviceConfigShortVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinicaladmin.vo.beans.InvasiveDeviceConfigShortVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("INVASIVEDEVICE"))
			return getInvasiveDevice();
		if(fieldName.equals("DURATIONINT"))
			return getDurationInt();
		if(fieldName.equals("DURATIONUNIT"))
			return getDurationUnit();
		if(fieldName.equals("ISACTIVE"))
			return getIsActive();
		if(fieldName.equals("SIZE"))
			return getSize();
		if(fieldName.equals("REQUIRESVIP"))
			return getRequiresVIP();
		if(fieldName.equals("HASSITE"))
			return getHasSite();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getInvasiveDeviceIsNotNull()
	{
		return this.invasivedevice != null;
	}
	public String getInvasiveDevice()
	{
		return this.invasivedevice;
	}
	public static int getInvasiveDeviceMaxLength()
	{
		return 255;
	}
	public void setInvasiveDevice(String value)
	{
		this.isValidated = false;
		this.invasivedevice = value;
	}
	public boolean getDurationIntIsNotNull()
	{
		return this.durationint != null;
	}
	public Integer getDurationInt()
	{
		return this.durationint;
	}
	public void setDurationInt(Integer value)
	{
		this.isValidated = false;
		this.durationint = value;
	}
	public boolean getDurationUnitIsNotNull()
	{
		return this.durationunit != null;
	}
	public ims.core.vo.lookups.TimeUnitsSecondsToMonths getDurationUnit()
	{
		return this.durationunit;
	}
	public void setDurationUnit(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
	{
		this.isValidated = false;
		this.durationunit = value;
	}
	public boolean getIsActiveIsNotNull()
	{
		return this.isactive != null;
	}
	public Boolean getIsActive()
	{
		return this.isactive;
	}
	public void setIsActive(Boolean value)
	{
		this.isValidated = false;
		this.isactive = value;
	}
	public boolean getSizeIsNotNull()
	{
		return this.size != null;
	}
	public ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVoCollection getSize()
	{
		return this.size;
	}
	public void setSize(ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVoCollection value)
	{
		this.isValidated = false;
		this.size = value;
	}
	public boolean getRequiresVIPIsNotNull()
	{
		return this.requiresvip != null;
	}
	public Boolean getRequiresVIP()
	{
		return this.requiresvip;
	}
	public void setRequiresVIP(Boolean value)
	{
		this.isValidated = false;
		this.requiresvip = value;
	}
	public boolean getHasSiteIsNotNull()
	{
		return this.hassite != null;
	}
	public Boolean getHasSite()
	{
		return this.hassite;
	}
	public void setHasSite(Boolean value)
	{
		this.isValidated = false;
		this.hassite = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.size != null)
		{
			if(!this.size.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.invasivedevice == null || this.invasivedevice.length() == 0)
			listOfErrors.add("InvasiveDevice is mandatory");
		else if(this.invasivedevice.length() > 255)
			listOfErrors.add("The length of the field [invasivedevice] in the value object [ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo] is too big. It should be less or equal to 255");
		if(this.isactive == null)
			listOfErrors.add("isActive is mandatory");
		if(this.size != null)
		{
			String[] listOfOtherErrors = this.size.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		InvasiveDeviceConfigShortVo clone = new InvasiveDeviceConfigShortVo(this.id, this.version);
		
		clone.invasivedevice = this.invasivedevice;
		clone.durationint = this.durationint;
		if(this.durationunit == null)
			clone.durationunit = null;
		else
			clone.durationunit = (ims.core.vo.lookups.TimeUnitsSecondsToMonths)this.durationunit.clone();
		clone.isactive = this.isactive;
		if(this.size == null)
			clone.size = null;
		else
			clone.size = (ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVoCollection)this.size.clone();
		clone.requiresvip = this.requiresvip;
		clone.hassite = this.hassite;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(InvasiveDeviceConfigShortVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A InvasiveDeviceConfigShortVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		InvasiveDeviceConfigShortVo compareObj = (InvasiveDeviceConfigShortVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getSize() == null && compareObj.getSize() != null)
				return -1;
			if(this.getSize() != null && compareObj.getSize() == null)
				return 1;
			if(this.getSize() != null && compareObj.getSize() != null)
				retVal = this.getSize().compareTo(compareObj.getSize());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.invasivedevice != null)
			count++;
		if(this.durationint != null)
			count++;
		if(this.durationunit != null)
			count++;
		if(this.isactive != null)
			count++;
		if(this.size != null)
			count++;
		if(this.requiresvip != null)
			count++;
		if(this.hassite != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected String invasivedevice;
	protected Integer durationint;
	protected ims.core.vo.lookups.TimeUnitsSecondsToMonths durationunit;
	protected Boolean isactive;
	protected ims.clinicaladmin.vo.InvasiveDeviceConfigSizeVoCollection size;
	protected Boolean requiresvip;
	protected Boolean hassite;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
