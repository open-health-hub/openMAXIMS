//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.generalmedical.vo;

/**
 * Linked to medical.SleepReferral business object (ID: 1023100029).
 */
public class SleepReferralVo extends ims.medical.vo.SleepReferralRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public SleepReferralVo()
	{
	}
	public SleepReferralVo(Integer id, int version)
	{
		super(id, version);
	}
	public SleepReferralVo(ims.generalmedical.vo.beans.SleepReferralVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pulseoximetry = bean.getPulseOximetry();
		this.oximetryvalues = bean.getOximetryValues() == null ? null : ims.core.vo.lookups.PulseOximetryValues.buildLookup(bean.getOximetryValues());
		this.weightheightnecksize = bean.getWeightHeightNeckSize() == null ? null : bean.getWeightHeightNeckSize().buildVo();
		this.medication = bean.getMedication();
		this.sleepfindings = ims.generalmedical.vo.SleepFindingsVoCollection.buildFromBeanCollection(bean.getSleepFindings());
		this.epworthsleepassessment = ims.generalmedical.vo.EpworthSleepAssessmentVoCollection.buildFromBeanCollection(bean.getEpworthSleepAssessment());
		this.cognitivefunction = ims.generalmedical.vo.CognitiveFunctionVoCollection.buildFromBeanCollection(bean.getCognitiveFunction());
		this.sleepapnoea = ims.generalmedical.vo.SleepApnoeaVoCollection.buildFromBeanCollection(bean.getSleepApnoea());
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.generalmedical.vo.beans.SleepReferralVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pulseoximetry = bean.getPulseOximetry();
		this.oximetryvalues = bean.getOximetryValues() == null ? null : ims.core.vo.lookups.PulseOximetryValues.buildLookup(bean.getOximetryValues());
		this.weightheightnecksize = bean.getWeightHeightNeckSize() == null ? null : bean.getWeightHeightNeckSize().buildVo(map);
		this.medication = bean.getMedication();
		this.sleepfindings = ims.generalmedical.vo.SleepFindingsVoCollection.buildFromBeanCollection(bean.getSleepFindings());
		this.epworthsleepassessment = ims.generalmedical.vo.EpworthSleepAssessmentVoCollection.buildFromBeanCollection(bean.getEpworthSleepAssessment());
		this.cognitivefunction = ims.generalmedical.vo.CognitiveFunctionVoCollection.buildFromBeanCollection(bean.getCognitiveFunction());
		this.sleepapnoea = ims.generalmedical.vo.SleepApnoeaVoCollection.buildFromBeanCollection(bean.getSleepApnoea());
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo(map);
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.generalmedical.vo.beans.SleepReferralVoBean bean = null;
		if(map != null)
			bean = (ims.generalmedical.vo.beans.SleepReferralVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.generalmedical.vo.beans.SleepReferralVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PULSEOXIMETRY"))
			return getPulseOximetry();
		if(fieldName.equals("OXIMETRYVALUES"))
			return getOximetryValues();
		if(fieldName.equals("WEIGHTHEIGHTNECKSIZE"))
			return getWeightHeightNeckSize();
		if(fieldName.equals("MEDICATION"))
			return getMedication();
		if(fieldName.equals("SLEEPFINDINGS"))
			return getSleepFindings();
		if(fieldName.equals("EPWORTHSLEEPASSESSMENT"))
			return getEpworthSleepAssessment();
		if(fieldName.equals("COGNITIVEFUNCTION"))
			return getCognitiveFunction();
		if(fieldName.equals("SLEEPAPNOEA"))
			return getSleepApnoea();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("AUTHORINGINFORMATION"))
			return getAuthoringInformation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPulseOximetryIsNotNull()
	{
		return this.pulseoximetry != null;
	}
	public Boolean getPulseOximetry()
	{
		return this.pulseoximetry;
	}
	public void setPulseOximetry(Boolean value)
	{
		this.isValidated = false;
		this.pulseoximetry = value;
	}
	public boolean getOximetryValuesIsNotNull()
	{
		return this.oximetryvalues != null;
	}
	public ims.core.vo.lookups.PulseOximetryValues getOximetryValues()
	{
		return this.oximetryvalues;
	}
	public void setOximetryValues(ims.core.vo.lookups.PulseOximetryValues value)
	{
		this.isValidated = false;
		this.oximetryvalues = value;
	}
	public boolean getWeightHeightNeckSizeIsNotNull()
	{
		return this.weightheightnecksize != null;
	}
	public ims.core.vo.VSMetrics getWeightHeightNeckSize()
	{
		return this.weightheightnecksize;
	}
	public void setWeightHeightNeckSize(ims.core.vo.VSMetrics value)
	{
		this.isValidated = false;
		this.weightheightnecksize = value;
	}
	public boolean getMedicationIsNotNull()
	{
		return this.medication != null;
	}
	public String getMedication()
	{
		return this.medication;
	}
	public static int getMedicationMaxLength()
	{
		return 255;
	}
	public void setMedication(String value)
	{
		this.isValidated = false;
		this.medication = value;
	}
	public boolean getSleepFindingsIsNotNull()
	{
		return this.sleepfindings != null;
	}
	public ims.generalmedical.vo.SleepFindingsVoCollection getSleepFindings()
	{
		return this.sleepfindings;
	}
	public void setSleepFindings(ims.generalmedical.vo.SleepFindingsVoCollection value)
	{
		this.isValidated = false;
		this.sleepfindings = value;
	}
	public boolean getEpworthSleepAssessmentIsNotNull()
	{
		return this.epworthsleepassessment != null;
	}
	public ims.generalmedical.vo.EpworthSleepAssessmentVoCollection getEpworthSleepAssessment()
	{
		return this.epworthsleepassessment;
	}
	public void setEpworthSleepAssessment(ims.generalmedical.vo.EpworthSleepAssessmentVoCollection value)
	{
		this.isValidated = false;
		this.epworthsleepassessment = value;
	}
	public boolean getCognitiveFunctionIsNotNull()
	{
		return this.cognitivefunction != null;
	}
	public ims.generalmedical.vo.CognitiveFunctionVoCollection getCognitiveFunction()
	{
		return this.cognitivefunction;
	}
	public void setCognitiveFunction(ims.generalmedical.vo.CognitiveFunctionVoCollection value)
	{
		this.isValidated = false;
		this.cognitivefunction = value;
	}
	public boolean getSleepApnoeaIsNotNull()
	{
		return this.sleepapnoea != null;
	}
	public ims.generalmedical.vo.SleepApnoeaVoCollection getSleepApnoea()
	{
		return this.sleepapnoea;
	}
	public void setSleepApnoea(ims.generalmedical.vo.SleepApnoeaVoCollection value)
	{
		this.isValidated = false;
		this.sleepapnoea = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.vo.CareContextShortVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.vo.CareContextShortVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getAuthoringInformationIsNotNull()
	{
		return this.authoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInformation()
	{
		return this.authoringinformation;
	}
	public void setAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinformation = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.weightheightnecksize != null)
		{
			if(!this.weightheightnecksize.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.sleepfindings != null)
		{
			if(!this.sleepfindings.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.epworthsleepassessment != null)
		{
			if(!this.epworthsleepassessment.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.cognitivefunction != null)
		{
			if(!this.cognitivefunction.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.sleepapnoea != null)
		{
			if(!this.sleepapnoea.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.weightheightnecksize != null)
		{
			String[] listOfOtherErrors = this.weightheightnecksize.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.sleepfindings != null)
		{
			String[] listOfOtherErrors = this.sleepfindings.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.epworthsleepassessment != null)
		{
			String[] listOfOtherErrors = this.epworthsleepassessment.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.cognitivefunction != null)
		{
			String[] listOfOtherErrors = this.cognitivefunction.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.sleepapnoea != null)
		{
			String[] listOfOtherErrors = this.sleepapnoea.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		SleepReferralVo clone = new SleepReferralVo(this.id, this.version);
		
		clone.pulseoximetry = this.pulseoximetry;
		if(this.oximetryvalues == null)
			clone.oximetryvalues = null;
		else
			clone.oximetryvalues = (ims.core.vo.lookups.PulseOximetryValues)this.oximetryvalues.clone();
		if(this.weightheightnecksize == null)
			clone.weightheightnecksize = null;
		else
			clone.weightheightnecksize = (ims.core.vo.VSMetrics)this.weightheightnecksize.clone();
		clone.medication = this.medication;
		if(this.sleepfindings == null)
			clone.sleepfindings = null;
		else
			clone.sleepfindings = (ims.generalmedical.vo.SleepFindingsVoCollection)this.sleepfindings.clone();
		if(this.epworthsleepassessment == null)
			clone.epworthsleepassessment = null;
		else
			clone.epworthsleepassessment = (ims.generalmedical.vo.EpworthSleepAssessmentVoCollection)this.epworthsleepassessment.clone();
		if(this.cognitivefunction == null)
			clone.cognitivefunction = null;
		else
			clone.cognitivefunction = (ims.generalmedical.vo.CognitiveFunctionVoCollection)this.cognitivefunction.clone();
		if(this.sleepapnoea == null)
			clone.sleepapnoea = null;
		else
			clone.sleepapnoea = (ims.generalmedical.vo.SleepApnoeaVoCollection)this.sleepapnoea.clone();
		if(this.carecontext == null)
			clone.carecontext = null;
		else
			clone.carecontext = (ims.core.vo.CareContextShortVo)this.carecontext.clone();
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(SleepReferralVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A SleepReferralVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		SleepReferralVo compareObj = (SleepReferralVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_SleepReferral() == null && compareObj.getID_SleepReferral() != null)
				return -1;
			if(this.getID_SleepReferral() != null && compareObj.getID_SleepReferral() == null)
				return 1;
			if(this.getID_SleepReferral() != null && compareObj.getID_SleepReferral() != null)
				retVal = this.getID_SleepReferral().compareTo(compareObj.getID_SleepReferral());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.pulseoximetry != null)
			count++;
		if(this.oximetryvalues != null)
			count++;
		if(this.weightheightnecksize != null)
			count++;
		if(this.medication != null)
			count++;
		if(this.sleepfindings != null)
			count++;
		if(this.epworthsleepassessment != null)
			count++;
		if(this.cognitivefunction != null)
			count++;
		if(this.sleepapnoea != null)
			count++;
		if(this.carecontext != null)
			count++;
		if(this.authoringinformation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected Boolean pulseoximetry;
	protected ims.core.vo.lookups.PulseOximetryValues oximetryvalues;
	protected ims.core.vo.VSMetrics weightheightnecksize;
	protected String medication;
	protected ims.generalmedical.vo.SleepFindingsVoCollection sleepfindings;
	protected ims.generalmedical.vo.EpworthSleepAssessmentVoCollection epworthsleepassessment;
	protected ims.generalmedical.vo.CognitiveFunctionVoCollection cognitivefunction;
	protected ims.generalmedical.vo.SleepApnoeaVoCollection sleepapnoea;
	protected ims.core.vo.CareContextShortVo carecontext;
	protected ims.core.vo.AuthoringInformationVo authoringinformation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
