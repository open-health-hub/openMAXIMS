//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.generalmedical.vo;


public class AdmisSummary extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AdmisSummary()
	{
	}
	public AdmisSummary(ims.generalmedical.vo.beans.AdmisSummaryBean bean)
	{
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo();
		this.recordingdatetime = bean.getRecordingDateTime() == null ? null : bean.getRecordingDateTime().buildDateTime();
		this.dateofinjury = bean.getDateOfInjury() == null ? null : bean.getDateOfInjury().buildDate();
		this.sensoryright = bean.getSensoryRight();
		this.sensoryleft = bean.getSensoryLeft();
		this.motorleft = bean.getMotorLeft();
		this.motorright = bean.getMotorRight();
		this.overallneuro = bean.getOverallNeuro();
		this.completeincomplete = bean.getCompleteIncomplete();
		this.asiagrade = bean.getAsiaGrade();
		this.asiascore = bean.getAsiaScore();
		this.franklegrade = bean.getFrankleGrade();
		this.modeofinjury = bean.getModeOfInjury();
		this.causeofinjury = bean.getCauseOfInjury();
		this.mechanismofinjury = bean.getMechanismOfInjury();
		this.levelofinjury = bean.getLevelOfInjury();
		this.spinesyndrome = bean.getSpineSyndrome();
		this.durationsinceinjury = bean.getDurationSinceInjury();
		this.typeofinjury = bean.getTypeOfInjury();
		this.firstadmissiondate = bean.getFirstAdmissionDate() == null ? null : bean.getFirstAdmissionDate().buildDate();
		this.mrsastatus = bean.getMRSAStatus();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.generalmedical.vo.beans.AdmisSummaryBean bean)
	{
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo(map);
		this.recordingdatetime = bean.getRecordingDateTime() == null ? null : bean.getRecordingDateTime().buildDateTime();
		this.dateofinjury = bean.getDateOfInjury() == null ? null : bean.getDateOfInjury().buildDate();
		this.sensoryright = bean.getSensoryRight();
		this.sensoryleft = bean.getSensoryLeft();
		this.motorleft = bean.getMotorLeft();
		this.motorright = bean.getMotorRight();
		this.overallneuro = bean.getOverallNeuro();
		this.completeincomplete = bean.getCompleteIncomplete();
		this.asiagrade = bean.getAsiaGrade();
		this.asiascore = bean.getAsiaScore();
		this.franklegrade = bean.getFrankleGrade();
		this.modeofinjury = bean.getModeOfInjury();
		this.causeofinjury = bean.getCauseOfInjury();
		this.mechanismofinjury = bean.getMechanismOfInjury();
		this.levelofinjury = bean.getLevelOfInjury();
		this.spinesyndrome = bean.getSpineSyndrome();
		this.durationsinceinjury = bean.getDurationSinceInjury();
		this.typeofinjury = bean.getTypeOfInjury();
		this.firstadmissiondate = bean.getFirstAdmissionDate() == null ? null : bean.getFirstAdmissionDate().buildDate();
		this.mrsastatus = bean.getMRSAStatus();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.generalmedical.vo.beans.AdmisSummaryBean bean = null;
		if(map != null)
			bean = (ims.generalmedical.vo.beans.AdmisSummaryBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.generalmedical.vo.beans.AdmisSummaryBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getClinicalContactIsNotNull()
	{
		return this.clinicalcontact != null;
	}
	public ims.core.vo.ClinicalContactShortVo getClinicalContact()
	{
		return this.clinicalcontact;
	}
	public void setClinicalContact(ims.core.vo.ClinicalContactShortVo value)
	{
		this.isValidated = false;
		this.clinicalcontact = value;
	}
	public boolean getRecordingDateTimeIsNotNull()
	{
		return this.recordingdatetime != null;
	}
	public ims.framework.utils.DateTime getRecordingDateTime()
	{
		return this.recordingdatetime;
	}
	public void setRecordingDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.recordingdatetime = value;
	}
	public boolean getDateOfInjuryIsNotNull()
	{
		return this.dateofinjury != null;
	}
	public ims.framework.utils.Date getDateOfInjury()
	{
		return this.dateofinjury;
	}
	public void setDateOfInjury(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateofinjury = value;
	}
	public boolean getSensoryRightIsNotNull()
	{
		return this.sensoryright != null;
	}
	public String getSensoryRight()
	{
		return this.sensoryright;
	}
	public static int getSensoryRightMaxLength()
	{
		return 255;
	}
	public void setSensoryRight(String value)
	{
		this.isValidated = false;
		this.sensoryright = value;
	}
	public boolean getSensoryLeftIsNotNull()
	{
		return this.sensoryleft != null;
	}
	public String getSensoryLeft()
	{
		return this.sensoryleft;
	}
	public static int getSensoryLeftMaxLength()
	{
		return 255;
	}
	public void setSensoryLeft(String value)
	{
		this.isValidated = false;
		this.sensoryleft = value;
	}
	public boolean getMotorLeftIsNotNull()
	{
		return this.motorleft != null;
	}
	public String getMotorLeft()
	{
		return this.motorleft;
	}
	public static int getMotorLeftMaxLength()
	{
		return 255;
	}
	public void setMotorLeft(String value)
	{
		this.isValidated = false;
		this.motorleft = value;
	}
	public boolean getMotorRightIsNotNull()
	{
		return this.motorright != null;
	}
	public String getMotorRight()
	{
		return this.motorright;
	}
	public static int getMotorRightMaxLength()
	{
		return 255;
	}
	public void setMotorRight(String value)
	{
		this.isValidated = false;
		this.motorright = value;
	}
	public boolean getOverallNeuroIsNotNull()
	{
		return this.overallneuro != null;
	}
	public String getOverallNeuro()
	{
		return this.overallneuro;
	}
	public static int getOverallNeuroMaxLength()
	{
		return 255;
	}
	public void setOverallNeuro(String value)
	{
		this.isValidated = false;
		this.overallneuro = value;
	}
	public boolean getCompleteIncompleteIsNotNull()
	{
		return this.completeincomplete != null;
	}
	public String getCompleteIncomplete()
	{
		return this.completeincomplete;
	}
	public static int getCompleteIncompleteMaxLength()
	{
		return 255;
	}
	public void setCompleteIncomplete(String value)
	{
		this.isValidated = false;
		this.completeincomplete = value;
	}
	public boolean getAsiaGradeIsNotNull()
	{
		return this.asiagrade != null;
	}
	public String getAsiaGrade()
	{
		return this.asiagrade;
	}
	public static int getAsiaGradeMaxLength()
	{
		return 255;
	}
	public void setAsiaGrade(String value)
	{
		this.isValidated = false;
		this.asiagrade = value;
	}
	public boolean getAsiaScoreIsNotNull()
	{
		return this.asiascore != null;
	}
	public String getAsiaScore()
	{
		return this.asiascore;
	}
	public static int getAsiaScoreMaxLength()
	{
		return 255;
	}
	public void setAsiaScore(String value)
	{
		this.isValidated = false;
		this.asiascore = value;
	}
	public boolean getFrankleGradeIsNotNull()
	{
		return this.franklegrade != null;
	}
	public String getFrankleGrade()
	{
		return this.franklegrade;
	}
	public static int getFrankleGradeMaxLength()
	{
		return 255;
	}
	public void setFrankleGrade(String value)
	{
		this.isValidated = false;
		this.franklegrade = value;
	}
	public boolean getModeOfInjuryIsNotNull()
	{
		return this.modeofinjury != null;
	}
	public String getModeOfInjury()
	{
		return this.modeofinjury;
	}
	public static int getModeOfInjuryMaxLength()
	{
		return 255;
	}
	public void setModeOfInjury(String value)
	{
		this.isValidated = false;
		this.modeofinjury = value;
	}
	public boolean getCauseOfInjuryIsNotNull()
	{
		return this.causeofinjury != null;
	}
	public String getCauseOfInjury()
	{
		return this.causeofinjury;
	}
	public static int getCauseOfInjuryMaxLength()
	{
		return 255;
	}
	public void setCauseOfInjury(String value)
	{
		this.isValidated = false;
		this.causeofinjury = value;
	}
	public boolean getMechanismOfInjuryIsNotNull()
	{
		return this.mechanismofinjury != null;
	}
	public String getMechanismOfInjury()
	{
		return this.mechanismofinjury;
	}
	public static int getMechanismOfInjuryMaxLength()
	{
		return 255;
	}
	public void setMechanismOfInjury(String value)
	{
		this.isValidated = false;
		this.mechanismofinjury = value;
	}
	public boolean getLevelOfInjuryIsNotNull()
	{
		return this.levelofinjury != null;
	}
	public String getLevelOfInjury()
	{
		return this.levelofinjury;
	}
	public static int getLevelOfInjuryMaxLength()
	{
		return 255;
	}
	public void setLevelOfInjury(String value)
	{
		this.isValidated = false;
		this.levelofinjury = value;
	}
	public boolean getSpineSyndromeIsNotNull()
	{
		return this.spinesyndrome != null;
	}
	public String getSpineSyndrome()
	{
		return this.spinesyndrome;
	}
	public static int getSpineSyndromeMaxLength()
	{
		return 255;
	}
	public void setSpineSyndrome(String value)
	{
		this.isValidated = false;
		this.spinesyndrome = value;
	}
	public boolean getDurationSinceInjuryIsNotNull()
	{
		return this.durationsinceinjury != null;
	}
	public String getDurationSinceInjury()
	{
		return this.durationsinceinjury;
	}
	public static int getDurationSinceInjuryMaxLength()
	{
		return 255;
	}
	public void setDurationSinceInjury(String value)
	{
		this.isValidated = false;
		this.durationsinceinjury = value;
	}
	public boolean getTypeOfInjuryIsNotNull()
	{
		return this.typeofinjury != null;
	}
	public String getTypeOfInjury()
	{
		return this.typeofinjury;
	}
	public static int getTypeOfInjuryMaxLength()
	{
		return 255;
	}
	public void setTypeOfInjury(String value)
	{
		this.isValidated = false;
		this.typeofinjury = value;
	}
	public boolean getFirstAdmissionDateIsNotNull()
	{
		return this.firstadmissiondate != null;
	}
	public ims.framework.utils.Date getFirstAdmissionDate()
	{
		return this.firstadmissiondate;
	}
	public void setFirstAdmissionDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.firstadmissiondate = value;
	}
	public boolean getMRSAStatusIsNotNull()
	{
		return this.mrsastatus != null;
	}
	public Boolean getMRSAStatus()
	{
		return this.mrsastatus;
	}
	public void setMRSAStatus(Boolean value)
	{
		this.isValidated = false;
		this.mrsastatus = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof AdmisSummary))
			return false;
		AdmisSummary compareObj = (AdmisSummary)obj;
		if(this.getClinicalContact() == null && compareObj.getClinicalContact() != null)
			return false;
		if(this.getClinicalContact() != null && compareObj.getClinicalContact() == null)
			return false;
		if(this.getClinicalContact() != null && compareObj.getClinicalContact() != null)
			return this.getClinicalContact().equals(compareObj.getClinicalContact());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.clinicalcontact != null)
		{
			if(!this.clinicalcontact.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.clinicalcontact != null)
		{
			String[] listOfOtherErrors = this.clinicalcontact.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AdmisSummary clone = new AdmisSummary();
		
		if(this.clinicalcontact == null)
			clone.clinicalcontact = null;
		else
			clone.clinicalcontact = (ims.core.vo.ClinicalContactShortVo)this.clinicalcontact.clone();
		if(this.recordingdatetime == null)
			clone.recordingdatetime = null;
		else
			clone.recordingdatetime = (ims.framework.utils.DateTime)this.recordingdatetime.clone();
		if(this.dateofinjury == null)
			clone.dateofinjury = null;
		else
			clone.dateofinjury = (ims.framework.utils.Date)this.dateofinjury.clone();
		clone.sensoryright = this.sensoryright;
		clone.sensoryleft = this.sensoryleft;
		clone.motorleft = this.motorleft;
		clone.motorright = this.motorright;
		clone.overallneuro = this.overallneuro;
		clone.completeincomplete = this.completeincomplete;
		clone.asiagrade = this.asiagrade;
		clone.asiascore = this.asiascore;
		clone.franklegrade = this.franklegrade;
		clone.modeofinjury = this.modeofinjury;
		clone.causeofinjury = this.causeofinjury;
		clone.mechanismofinjury = this.mechanismofinjury;
		clone.levelofinjury = this.levelofinjury;
		clone.spinesyndrome = this.spinesyndrome;
		clone.durationsinceinjury = this.durationsinceinjury;
		clone.typeofinjury = this.typeofinjury;
		if(this.firstadmissiondate == null)
			clone.firstadmissiondate = null;
		else
			clone.firstadmissiondate = (ims.framework.utils.Date)this.firstadmissiondate.clone();
		clone.mrsastatus = this.mrsastatus;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AdmisSummary.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AdmisSummary object cannot be compared an Object of type " + obj.getClass().getName());
		}
		AdmisSummary compareObj = (AdmisSummary)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getClinicalContact() == null && compareObj.getClinicalContact() != null)
				return -1;
			if(this.getClinicalContact() != null && compareObj.getClinicalContact() == null)
				return 1;
			if(this.getClinicalContact() != null && compareObj.getClinicalContact() != null)
				retVal = this.getClinicalContact().compareTo(compareObj.getClinicalContact());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.clinicalcontact != null)
			count++;
		if(this.recordingdatetime != null)
			count++;
		if(this.dateofinjury != null)
			count++;
		if(this.sensoryright != null)
			count++;
		if(this.sensoryleft != null)
			count++;
		if(this.motorleft != null)
			count++;
		if(this.motorright != null)
			count++;
		if(this.overallneuro != null)
			count++;
		if(this.completeincomplete != null)
			count++;
		if(this.asiagrade != null)
			count++;
		if(this.asiascore != null)
			count++;
		if(this.franklegrade != null)
			count++;
		if(this.modeofinjury != null)
			count++;
		if(this.causeofinjury != null)
			count++;
		if(this.mechanismofinjury != null)
			count++;
		if(this.levelofinjury != null)
			count++;
		if(this.spinesyndrome != null)
			count++;
		if(this.durationsinceinjury != null)
			count++;
		if(this.typeofinjury != null)
			count++;
		if(this.firstadmissiondate != null)
			count++;
		if(this.mrsastatus != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 21;
	}
	protected ims.core.vo.ClinicalContactShortVo clinicalcontact;
	protected ims.framework.utils.DateTime recordingdatetime;
	protected ims.framework.utils.Date dateofinjury;
	protected String sensoryright;
	protected String sensoryleft;
	protected String motorleft;
	protected String motorright;
	protected String overallneuro;
	protected String completeincomplete;
	protected String asiagrade;
	protected String asiascore;
	protected String franklegrade;
	protected String modeofinjury;
	protected String causeofinjury;
	protected String mechanismofinjury;
	protected String levelofinjury;
	protected String spinesyndrome;
	protected String durationsinceinjury;
	protected String typeofinjury;
	protected ims.framework.utils.Date firstadmissiondate;
	protected Boolean mrsastatus;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
