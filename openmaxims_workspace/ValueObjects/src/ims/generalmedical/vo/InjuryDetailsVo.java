//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.generalmedical.vo;

/**
 * Linked to medical.InjuryDetails business object (ID: 1023100000).
 */
public class InjuryDetailsVo extends ims.medical.vo.InjuryDetailsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public InjuryDetailsVo()
	{
	}
	public InjuryDetailsVo(Integer id, int version)
	{
		super(id, version);
	}
	public InjuryDetailsVo(ims.generalmedical.vo.beans.InjuryDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.injurydate = bean.getInjuryDate() == null ? null : bean.getInjuryDate().buildDate();
		this.injurytime = bean.getInjuryTime() == null ? null : bean.getInjuryTime().buildTime();
		this.referraldate = bean.getReferralDate() == null ? null : bean.getReferralDate().buildDate();
		this.transferdate = bean.getTransferDate() == null ? null : bean.getTransferDate().buildDate();
		this.sufferedloc = bean.getSufferedLOC();
		this.durloc = bean.getDurLOC();
		this.durlocunit = bean.getDurLOCUnit() == null ? null : ims.spinalinjuries.vo.lookups.DurLOCUnit.buildLookup(bean.getDurLOCUnit());
		this.requiresventillation = bean.getRequiresVentillation() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getRequiresVentillation());
		this.descriptionofinjury = bean.getDescriptionOfInjury();
		this.presentingcomplaints = bean.getPresentingComplaints();
		this.associatedfactor = ims.generalmedical.vo.AssociatedFactorVoCollection.buildFromBeanCollection(bean.getAssociatedFactor());
		this.modeofinjury = bean.getModeOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury.buildLookup(bean.getModeOfInjury());
		this.causeofinjury = bean.getCauseOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury.buildLookup(bean.getCauseOfInjury());
		this.mechanismofinjury = bean.getMechanismOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury.buildLookup(bean.getMechanismOfInjury());
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.generalmedical.vo.beans.InjuryDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.injurydate = bean.getInjuryDate() == null ? null : bean.getInjuryDate().buildDate();
		this.injurytime = bean.getInjuryTime() == null ? null : bean.getInjuryTime().buildTime();
		this.referraldate = bean.getReferralDate() == null ? null : bean.getReferralDate().buildDate();
		this.transferdate = bean.getTransferDate() == null ? null : bean.getTransferDate().buildDate();
		this.sufferedloc = bean.getSufferedLOC();
		this.durloc = bean.getDurLOC();
		this.durlocunit = bean.getDurLOCUnit() == null ? null : ims.spinalinjuries.vo.lookups.DurLOCUnit.buildLookup(bean.getDurLOCUnit());
		this.requiresventillation = bean.getRequiresVentillation() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getRequiresVentillation());
		this.descriptionofinjury = bean.getDescriptionOfInjury();
		this.presentingcomplaints = bean.getPresentingComplaints();
		this.associatedfactor = ims.generalmedical.vo.AssociatedFactorVoCollection.buildFromBeanCollection(bean.getAssociatedFactor());
		this.modeofinjury = bean.getModeOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury.buildLookup(bean.getModeOfInjury());
		this.causeofinjury = bean.getCauseOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury.buildLookup(bean.getCauseOfInjury());
		this.mechanismofinjury = bean.getMechanismOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury.buildLookup(bean.getMechanismOfInjury());
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.generalmedical.vo.beans.InjuryDetailsVoBean bean = null;
		if(map != null)
			bean = (ims.generalmedical.vo.beans.InjuryDetailsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.generalmedical.vo.beans.InjuryDetailsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("INJURYDATE"))
			return getInjuryDate();
		if(fieldName.equals("INJURYTIME"))
			return getInjuryTime();
		if(fieldName.equals("REFERRALDATE"))
			return getReferralDate();
		if(fieldName.equals("TRANSFERDATE"))
			return getTransferDate();
		if(fieldName.equals("SUFFEREDLOC"))
			return getSufferedLOC();
		if(fieldName.equals("DURLOC"))
			return getDurLOC();
		if(fieldName.equals("DURLOCUNIT"))
			return getDurLOCUnit();
		if(fieldName.equals("REQUIRESVENTILLATION"))
			return getRequiresVentillation();
		if(fieldName.equals("DESCRIPTIONOFINJURY"))
			return getDescriptionOfInjury();
		if(fieldName.equals("PRESENTINGCOMPLAINTS"))
			return getPresentingComplaints();
		if(fieldName.equals("ASSOCIATEDFACTOR"))
			return getAssociatedFactor();
		if(fieldName.equals("MODEOFINJURY"))
			return getModeOfInjury();
		if(fieldName.equals("CAUSEOFINJURY"))
			return getCauseOfInjury();
		if(fieldName.equals("MECHANISMOFINJURY"))
			return getMechanismOfInjury();
		if(fieldName.equals("CLINICALCONTACT"))
			return getClinicalContact();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getInjuryDateIsNotNull()
	{
		return this.injurydate != null;
	}
	public ims.framework.utils.Date getInjuryDate()
	{
		return this.injurydate;
	}
	public void setInjuryDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.injurydate = value;
	}
	public boolean getInjuryTimeIsNotNull()
	{
		return this.injurytime != null;
	}
	public ims.framework.utils.Time getInjuryTime()
	{
		return this.injurytime;
	}
	public void setInjuryTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.injurytime = value;
	}
	public boolean getReferralDateIsNotNull()
	{
		return this.referraldate != null;
	}
	public ims.framework.utils.Date getReferralDate()
	{
		return this.referraldate;
	}
	public void setReferralDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.referraldate = value;
	}
	public boolean getTransferDateIsNotNull()
	{
		return this.transferdate != null;
	}
	public ims.framework.utils.Date getTransferDate()
	{
		return this.transferdate;
	}
	public void setTransferDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.transferdate = value;
	}
	public boolean getSufferedLOCIsNotNull()
	{
		return this.sufferedloc != null;
	}
	public Boolean getSufferedLOC()
	{
		return this.sufferedloc;
	}
	public void setSufferedLOC(Boolean value)
	{
		this.isValidated = false;
		this.sufferedloc = value;
	}
	public boolean getDurLOCIsNotNull()
	{
		return this.durloc != null;
	}
	public Integer getDurLOC()
	{
		return this.durloc;
	}
	public void setDurLOC(Integer value)
	{
		this.isValidated = false;
		this.durloc = value;
	}
	public boolean getDurLOCUnitIsNotNull()
	{
		return this.durlocunit != null;
	}
	public ims.spinalinjuries.vo.lookups.DurLOCUnit getDurLOCUnit()
	{
		return this.durlocunit;
	}
	public void setDurLOCUnit(ims.spinalinjuries.vo.lookups.DurLOCUnit value)
	{
		this.isValidated = false;
		this.durlocunit = value;
	}
	public boolean getRequiresVentillationIsNotNull()
	{
		return this.requiresventillation != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getRequiresVentillation()
	{
		return this.requiresventillation;
	}
	public void setRequiresVentillation(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.requiresventillation = value;
	}
	public boolean getDescriptionOfInjuryIsNotNull()
	{
		return this.descriptionofinjury != null;
	}
	public String getDescriptionOfInjury()
	{
		return this.descriptionofinjury;
	}
	public static int getDescriptionOfInjuryMaxLength()
	{
		return 2000;
	}
	public void setDescriptionOfInjury(String value)
	{
		this.isValidated = false;
		this.descriptionofinjury = value;
	}
	public boolean getPresentingComplaintsIsNotNull()
	{
		return this.presentingcomplaints != null;
	}
	public String getPresentingComplaints()
	{
		return this.presentingcomplaints;
	}
	public static int getPresentingComplaintsMaxLength()
	{
		return 2000;
	}
	public void setPresentingComplaints(String value)
	{
		this.isValidated = false;
		this.presentingcomplaints = value;
	}
	public boolean getAssociatedFactorIsNotNull()
	{
		return this.associatedfactor != null;
	}
	public ims.generalmedical.vo.AssociatedFactorVoCollection getAssociatedFactor()
	{
		return this.associatedfactor;
	}
	public void setAssociatedFactor(ims.generalmedical.vo.AssociatedFactorVoCollection value)
	{
		this.isValidated = false;
		this.associatedfactor = value;
	}
	public boolean getModeOfInjuryIsNotNull()
	{
		return this.modeofinjury != null;
	}
	public ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury getModeOfInjury()
	{
		return this.modeofinjury;
	}
	public void setModeOfInjury(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
	{
		this.isValidated = false;
		this.modeofinjury = value;
	}
	public boolean getCauseOfInjuryIsNotNull()
	{
		return this.causeofinjury != null;
	}
	public ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury getCauseOfInjury()
	{
		return this.causeofinjury;
	}
	public void setCauseOfInjury(ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury value)
	{
		this.isValidated = false;
		this.causeofinjury = value;
	}
	public boolean getMechanismOfInjuryIsNotNull()
	{
		return this.mechanismofinjury != null;
	}
	public ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury getMechanismOfInjury()
	{
		return this.mechanismofinjury;
	}
	public void setMechanismOfInjury(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
	{
		this.isValidated = false;
		this.mechanismofinjury = value;
	}
	public boolean getClinicalContactIsNotNull()
	{
		return this.clinicalcontact != null;
	}
	public ims.core.vo.ClinicalContactShortVo getClinicalContact()
	{
		return this.clinicalcontact;
	}
	public void setClinicalContact(ims.core.vo.ClinicalContactShortVo value)
	{
		this.isValidated = false;
		this.clinicalcontact = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.associatedfactor != null)
		{
			if(!this.associatedfactor.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.injurydate == null)
			listOfErrors.add("Injury Date is a mandatory field");
		if(this.injurytime == null)
			listOfErrors.add("Injury Time is a mandatory field");
		if(this.descriptionofinjury != null)
			if(this.descriptionofinjury.length() > 2000)
				listOfErrors.add("The length of the field [descriptionofinjury] in the value object [ims.generalmedical.vo.InjuryDetailsVo] is too big. It should be less or equal to 2000");
		if(this.presentingcomplaints != null)
			if(this.presentingcomplaints.length() > 2000)
				listOfErrors.add("The length of the field [presentingcomplaints] in the value object [ims.generalmedical.vo.InjuryDetailsVo] is too big. It should be less or equal to 2000");
		if(this.associatedfactor != null)
		{
			String[] listOfOtherErrors = this.associatedfactor.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		InjuryDetailsVo clone = new InjuryDetailsVo(this.id, this.version);
		
		if(this.injurydate == null)
			clone.injurydate = null;
		else
			clone.injurydate = (ims.framework.utils.Date)this.injurydate.clone();
		if(this.injurytime == null)
			clone.injurytime = null;
		else
			clone.injurytime = (ims.framework.utils.Time)this.injurytime.clone();
		if(this.referraldate == null)
			clone.referraldate = null;
		else
			clone.referraldate = (ims.framework.utils.Date)this.referraldate.clone();
		if(this.transferdate == null)
			clone.transferdate = null;
		else
			clone.transferdate = (ims.framework.utils.Date)this.transferdate.clone();
		clone.sufferedloc = this.sufferedloc;
		clone.durloc = this.durloc;
		if(this.durlocunit == null)
			clone.durlocunit = null;
		else
			clone.durlocunit = (ims.spinalinjuries.vo.lookups.DurLOCUnit)this.durlocunit.clone();
		if(this.requiresventillation == null)
			clone.requiresventillation = null;
		else
			clone.requiresventillation = (ims.core.vo.lookups.YesNoUnknown)this.requiresventillation.clone();
		clone.descriptionofinjury = this.descriptionofinjury;
		clone.presentingcomplaints = this.presentingcomplaints;
		if(this.associatedfactor == null)
			clone.associatedfactor = null;
		else
			clone.associatedfactor = (ims.generalmedical.vo.AssociatedFactorVoCollection)this.associatedfactor.clone();
		if(this.modeofinjury == null)
			clone.modeofinjury = null;
		else
			clone.modeofinjury = (ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury)this.modeofinjury.clone();
		if(this.causeofinjury == null)
			clone.causeofinjury = null;
		else
			clone.causeofinjury = (ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury)this.causeofinjury.clone();
		if(this.mechanismofinjury == null)
			clone.mechanismofinjury = null;
		else
			clone.mechanismofinjury = (ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury)this.mechanismofinjury.clone();
		if(this.clinicalcontact == null)
			clone.clinicalcontact = null;
		else
			clone.clinicalcontact = (ims.core.vo.ClinicalContactShortVo)this.clinicalcontact.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(InjuryDetailsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A InjuryDetailsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		InjuryDetailsVo compareObj = (InjuryDetailsVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_InjuryDetails() == null && compareObj.getID_InjuryDetails() != null)
				return -1;
			if(this.getID_InjuryDetails() != null && compareObj.getID_InjuryDetails() == null)
				return 1;
			if(this.getID_InjuryDetails() != null && compareObj.getID_InjuryDetails() != null)
				retVal = this.getID_InjuryDetails().compareTo(compareObj.getID_InjuryDetails());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.injurydate != null)
			count++;
		if(this.injurytime != null)
			count++;
		if(this.referraldate != null)
			count++;
		if(this.transferdate != null)
			count++;
		if(this.sufferedloc != null)
			count++;
		if(this.durloc != null)
			count++;
		if(this.durlocunit != null)
			count++;
		if(this.requiresventillation != null)
			count++;
		if(this.descriptionofinjury != null)
			count++;
		if(this.presentingcomplaints != null)
			count++;
		if(this.associatedfactor != null)
			count++;
		if(this.modeofinjury != null)
			count++;
		if(this.causeofinjury != null)
			count++;
		if(this.mechanismofinjury != null)
			count++;
		if(this.clinicalcontact != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 15;
	}
	protected ims.framework.utils.Date injurydate;
	protected ims.framework.utils.Time injurytime;
	protected ims.framework.utils.Date referraldate;
	protected ims.framework.utils.Date transferdate;
	protected Boolean sufferedloc;
	protected Integer durloc;
	protected ims.spinalinjuries.vo.lookups.DurLOCUnit durlocunit;
	protected ims.core.vo.lookups.YesNoUnknown requiresventillation;
	protected String descriptionofinjury;
	protected String presentingcomplaints;
	protected ims.generalmedical.vo.AssociatedFactorVoCollection associatedfactor;
	protected ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury modeofinjury;
	protected ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury causeofinjury;
	protected ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury mechanismofinjury;
	protected ims.core.vo.ClinicalContactShortVo clinicalcontact;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
