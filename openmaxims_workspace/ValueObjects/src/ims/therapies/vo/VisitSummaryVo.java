//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.vo;

/**
 * Linked to therapies.homeAndEnvironmentalVisit.VisitSummary business object (ID: 1019100095).
 */
public class VisitSummaryVo extends ims.therapies.homeandenvironmentalvisit.vo.VisitSummaryRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public VisitSummaryVo()
	{
	}
	public VisitSummaryVo(Integer id, int version)
	{
		super(id, version);
	}
	public VisitSummaryVo(ims.therapies.vo.beans.VisitSummaryVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.problemsidentified = bean.getProblemsIdentified();
		this.recommendations = bean.getRecommendations();
		this.equipment = bean.getEquipment();
		this.conclusions = bean.getConclusions();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.therapies.vo.beans.VisitSummaryVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.problemsidentified = bean.getProblemsIdentified();
		this.recommendations = bean.getRecommendations();
		this.equipment = bean.getEquipment();
		this.conclusions = bean.getConclusions();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.therapies.vo.beans.VisitSummaryVoBean bean = null;
		if(map != null)
			bean = (ims.therapies.vo.beans.VisitSummaryVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.therapies.vo.beans.VisitSummaryVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PROBLEMSIDENTIFIED"))
			return getProblemsIdentified();
		if(fieldName.equals("RECOMMENDATIONS"))
			return getRecommendations();
		if(fieldName.equals("EQUIPMENT"))
			return getEquipment();
		if(fieldName.equals("CONCLUSIONS"))
			return getConclusions();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getProblemsIdentifiedIsNotNull()
	{
		return this.problemsidentified != null;
	}
	public String getProblemsIdentified()
	{
		return this.problemsidentified;
	}
	public static int getProblemsIdentifiedMaxLength()
	{
		return 1000;
	}
	public void setProblemsIdentified(String value)
	{
		this.isValidated = false;
		this.problemsidentified = value;
	}
	public boolean getRecommendationsIsNotNull()
	{
		return this.recommendations != null;
	}
	public String getRecommendations()
	{
		return this.recommendations;
	}
	public static int getRecommendationsMaxLength()
	{
		return 1000;
	}
	public void setRecommendations(String value)
	{
		this.isValidated = false;
		this.recommendations = value;
	}
	public boolean getEquipmentIsNotNull()
	{
		return this.equipment != null;
	}
	public String getEquipment()
	{
		return this.equipment;
	}
	public static int getEquipmentMaxLength()
	{
		return 1000;
	}
	public void setEquipment(String value)
	{
		this.isValidated = false;
		this.equipment = value;
	}
	public boolean getConclusionsIsNotNull()
	{
		return this.conclusions != null;
	}
	public String getConclusions()
	{
		return this.conclusions;
	}
	public static int getConclusionsMaxLength()
	{
		return 1000;
	}
	public void setConclusions(String value)
	{
		this.isValidated = false;
		this.conclusions = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.problemsidentified != null)
			if(this.problemsidentified.length() > 1000)
				listOfErrors.add("The length of the field [problemsidentified] in the value object [ims.therapies.vo.VisitSummaryVo] is too big. It should be less or equal to 1000");
		if(this.recommendations != null)
			if(this.recommendations.length() > 1000)
				listOfErrors.add("The length of the field [recommendations] in the value object [ims.therapies.vo.VisitSummaryVo] is too big. It should be less or equal to 1000");
		if(this.equipment != null)
			if(this.equipment.length() > 1000)
				listOfErrors.add("The length of the field [equipment] in the value object [ims.therapies.vo.VisitSummaryVo] is too big. It should be less or equal to 1000");
		if(this.conclusions != null)
			if(this.conclusions.length() > 1000)
				listOfErrors.add("The length of the field [conclusions] in the value object [ims.therapies.vo.VisitSummaryVo] is too big. It should be less or equal to 1000");
		if(this.countFieldsWithValue() < 1)
		{
			listOfErrors.add("A minimum of 1 data fields must be entered");
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		VisitSummaryVo clone = new VisitSummaryVo(this.id, this.version);
		
		clone.problemsidentified = this.problemsidentified;
		clone.recommendations = this.recommendations;
		clone.equipment = this.equipment;
		clone.conclusions = this.conclusions;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(VisitSummaryVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A VisitSummaryVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		VisitSummaryVo compareObj = (VisitSummaryVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_VisitSummary() == null && compareObj.getID_VisitSummary() != null)
				return -1;
			if(this.getID_VisitSummary() != null && compareObj.getID_VisitSummary() == null)
				return 1;
			if(this.getID_VisitSummary() != null && compareObj.getID_VisitSummary() != null)
				retVal = this.getID_VisitSummary().compareTo(compareObj.getID_VisitSummary());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.problemsidentified != null)
			count++;
		if(this.recommendations != null)
			count++;
		if(this.equipment != null)
			count++;
		if(this.conclusions != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 4;
	}
	protected String problemsidentified;
	protected String recommendations;
	protected String equipment;
	protected String conclusions;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
