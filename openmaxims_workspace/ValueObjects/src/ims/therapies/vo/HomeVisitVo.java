//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.vo;

/**
 * Linked to therapies.homeAndEnvironmentalVisit.HomeVisit business object (ID: 1019100088).
 */
public class HomeVisitVo extends ims.therapies.vo.HomeVisitShortVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public HomeVisitVo()
	{
	}
	public HomeVisitVo(Integer id, int version)
	{
		super(id, version);
	}
	public HomeVisitVo(ims.therapies.vo.beans.HomeVisitVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.visitdate = bean.getVisitDate() == null ? null : bean.getVisitDate().buildDate();
		this.housedetails = bean.getHouseDetails() == null ? null : bean.getHouseDetails().buildVo();
		this.therapistpresent = bean.getTherapistPresent() == null ? null : bean.getTherapistPresent().buildVo();
		this.otherspresent = bean.getOthersPresent();
		this.homeassessmentcomponent = ims.therapies.vo.BathingFacilityVoCollection.buildFromBeanCollection(bean.getHomeAssessmentComponent());
		this.rooms = ims.therapies.vo.RoomDetailsVoCollection.buildFromBeanCollection(bean.getRooms());
		this.visitsummary = bean.getVisitSummary() == null ? null : bean.getVisitSummary().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.therapies.vo.beans.HomeVisitVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo(map);
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.visitdate = bean.getVisitDate() == null ? null : bean.getVisitDate().buildDate();
		this.housedetails = bean.getHouseDetails() == null ? null : bean.getHouseDetails().buildVo(map);
		this.therapistpresent = bean.getTherapistPresent() == null ? null : bean.getTherapistPresent().buildVo(map);
		this.otherspresent = bean.getOthersPresent();
		this.homeassessmentcomponent = ims.therapies.vo.BathingFacilityVoCollection.buildFromBeanCollection(bean.getHomeAssessmentComponent());
		this.rooms = ims.therapies.vo.RoomDetailsVoCollection.buildFromBeanCollection(bean.getRooms());
		this.visitsummary = bean.getVisitSummary() == null ? null : bean.getVisitSummary().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.therapies.vo.beans.HomeVisitVoBean bean = null;
		if(map != null)
			bean = (ims.therapies.vo.beans.HomeVisitVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.therapies.vo.beans.HomeVisitVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("VISITDATE"))
			return getVisitDate();
		if(fieldName.equals("HOUSEDETAILS"))
			return getHouseDetails();
		if(fieldName.equals("THERAPISTPRESENT"))
			return getTherapistPresent();
		if(fieldName.equals("OTHERSPRESENT"))
			return getOthersPresent();
		if(fieldName.equals("HOMEASSESSMENTCOMPONENT"))
			return getHomeAssessmentComponent();
		if(fieldName.equals("ROOMS"))
			return getRooms();
		if(fieldName.equals("VISITSUMMARY"))
			return getVisitSummary();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getVisitDateIsNotNull()
	{
		return this.visitdate != null;
	}
	public ims.framework.utils.Date getVisitDate()
	{
		return this.visitdate;
	}
	public void setVisitDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.visitdate = value;
	}
	public boolean getHouseDetailsIsNotNull()
	{
		return this.housedetails != null;
	}
	public ims.therapies.vo.HomeDetailsVo getHouseDetails()
	{
		return this.housedetails;
	}
	public void setHouseDetails(ims.therapies.vo.HomeDetailsVo value)
	{
		this.isValidated = false;
		this.housedetails = value;
	}
	public boolean getTherapistPresentIsNotNull()
	{
		return this.therapistpresent != null;
	}
	public ims.core.vo.HcpLiteVo getTherapistPresent()
	{
		return this.therapistpresent;
	}
	public void setTherapistPresent(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.therapistpresent = value;
	}
	public boolean getOthersPresentIsNotNull()
	{
		return this.otherspresent != null;
	}
	public String getOthersPresent()
	{
		return this.otherspresent;
	}
	public static int getOthersPresentMaxLength()
	{
		return 500;
	}
	public void setOthersPresent(String value)
	{
		this.isValidated = false;
		this.otherspresent = value;
	}
	public boolean getHomeAssessmentComponentIsNotNull()
	{
		return this.homeassessmentcomponent != null;
	}
	public ims.therapies.vo.BathingFacilityVoCollection getHomeAssessmentComponent()
	{
		return this.homeassessmentcomponent;
	}
	public void setHomeAssessmentComponent(ims.therapies.vo.BathingFacilityVoCollection value)
	{
		this.isValidated = false;
		this.homeassessmentcomponent = value;
	}
	public boolean getRoomsIsNotNull()
	{
		return this.rooms != null;
	}
	public ims.therapies.vo.RoomDetailsVoCollection getRooms()
	{
		return this.rooms;
	}
	public void setRooms(ims.therapies.vo.RoomDetailsVoCollection value)
	{
		this.isValidated = false;
		this.rooms = value;
	}
	public boolean getVisitSummaryIsNotNull()
	{
		return this.visitsummary != null;
	}
	public ims.therapies.vo.VisitSummaryVo getVisitSummary()
	{
		return this.visitsummary;
	}
	public void setVisitSummary(ims.therapies.vo.VisitSummaryVo value)
	{
		this.isValidated = false;
		this.visitsummary = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.housedetails != null)
		{
			if(!this.housedetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.therapistpresent != null)
		{
			if(!this.therapistpresent.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.homeassessmentcomponent != null)
		{
			if(!this.homeassessmentcomponent.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.rooms != null)
		{
			if(!this.rooms.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.visitsummary != null)
		{
			if(!this.visitsummary.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.visitdate == null)
			listOfErrors.add("Please enter Date of Visit.");
		if(this.housedetails != null)
		{
			String[] listOfOtherErrors = this.housedetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.therapistpresent != null)
		{
			String[] listOfOtherErrors = this.therapistpresent.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.otherspresent != null)
			if(this.otherspresent.length() > 500)
				listOfErrors.add("The length of the field [otherspresent] in the value object [ims.therapies.vo.HomeVisitVo] is too big. It should be less or equal to 500");
		if(this.homeassessmentcomponent != null)
		{
			String[] listOfOtherErrors = this.homeassessmentcomponent.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.rooms != null)
		{
			String[] listOfOtherErrors = this.rooms.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.visitsummary != null)
		{
			String[] listOfOtherErrors = this.visitsummary.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		HomeVisitVo clone = new HomeVisitVo(this.id, this.version);
		
		if(this.clinicalcontact == null)
			clone.clinicalcontact = null;
		else
			clone.clinicalcontact = (ims.core.vo.ClinicalContactShortVo)this.clinicalcontact.clone();
		clone.carecontext = this.carecontext;
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		if(this.visitdate == null)
			clone.visitdate = null;
		else
			clone.visitdate = (ims.framework.utils.Date)this.visitdate.clone();
		if(this.housedetails == null)
			clone.housedetails = null;
		else
			clone.housedetails = (ims.therapies.vo.HomeDetailsVo)this.housedetails.clone();
		if(this.therapistpresent == null)
			clone.therapistpresent = null;
		else
			clone.therapistpresent = (ims.core.vo.HcpLiteVo)this.therapistpresent.clone();
		clone.otherspresent = this.otherspresent;
		if(this.homeassessmentcomponent == null)
			clone.homeassessmentcomponent = null;
		else
			clone.homeassessmentcomponent = (ims.therapies.vo.BathingFacilityVoCollection)this.homeassessmentcomponent.clone();
		if(this.rooms == null)
			clone.rooms = null;
		else
			clone.rooms = (ims.therapies.vo.RoomDetailsVoCollection)this.rooms.clone();
		if(this.visitsummary == null)
			clone.visitsummary = null;
		else
			clone.visitsummary = (ims.therapies.vo.VisitSummaryVo)this.visitsummary.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(HomeVisitVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A HomeVisitVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		HomeVisitVo compareObj = (HomeVisitVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_HomeVisit() == null && compareObj.getID_HomeVisit() != null)
				return -1;
			if(this.getID_HomeVisit() != null && compareObj.getID_HomeVisit() == null)
				return 1;
			if(this.getID_HomeVisit() != null && compareObj.getID_HomeVisit() != null)
				retVal = this.getID_HomeVisit().compareTo(compareObj.getID_HomeVisit());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.visitdate != null)
			count++;
		if(this.housedetails != null)
			count++;
		if(this.therapistpresent != null)
			count++;
		if(this.otherspresent != null)
			count++;
		if(this.homeassessmentcomponent != null)
			count++;
		if(this.rooms != null)
			count++;
		if(this.visitsummary != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 7;
	}
	protected ims.framework.utils.Date visitdate;
	protected ims.therapies.vo.HomeDetailsVo housedetails;
	protected ims.core.vo.HcpLiteVo therapistpresent;
	protected String otherspresent;
	protected ims.therapies.vo.BathingFacilityVoCollection homeassessmentcomponent;
	protected ims.therapies.vo.RoomDetailsVoCollection rooms;
	protected ims.therapies.vo.VisitSummaryVo visitsummary;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
