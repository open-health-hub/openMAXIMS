//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.vo;

/**
 * Linked to core.clinical.coding.snomed_concept business object (ID: 1065100006).
 */
public class TaxonomySnomedConceptVo extends ims.core.clinical.coding.vo.snomed_conceptRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public TaxonomySnomedConceptVo()
	{
	}
	public TaxonomySnomedConceptVo(Integer id, int version)
	{
		super(id, version);
	}
	public TaxonomySnomedConceptVo(ims.admin.vo.beans.TaxonomySnomedConceptVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.conceptid = bean.getConceptid();
		this.conceptstatus = bean.getConceptstatus();
		this.fullyspecifiedname = bean.getFullyspecifiedname();
		this.ctv3id = bean.getCtv3id();
		this.snomedid = bean.getSnomedid();
		this.isprimitive = bean.getIsprimitive();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.admin.vo.beans.TaxonomySnomedConceptVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.conceptid = bean.getConceptid();
		this.conceptstatus = bean.getConceptstatus();
		this.fullyspecifiedname = bean.getFullyspecifiedname();
		this.ctv3id = bean.getCtv3id();
		this.snomedid = bean.getSnomedid();
		this.isprimitive = bean.getIsprimitive();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.admin.vo.beans.TaxonomySnomedConceptVoBean bean = null;
		if(map != null)
			bean = (ims.admin.vo.beans.TaxonomySnomedConceptVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.admin.vo.beans.TaxonomySnomedConceptVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CONCEPTID"))
			return getConceptid();
		if(fieldName.equals("CONCEPTSTATUS"))
			return getConceptstatus();
		if(fieldName.equals("FULLYSPECIFIEDNAME"))
			return getFullyspecifiedname();
		if(fieldName.equals("CTV3ID"))
			return getCtv3id();
		if(fieldName.equals("SNOMEDID"))
			return getSnomedid();
		if(fieldName.equals("ISPRIMITIVE"))
			return getIsprimitive();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getConceptidIsNotNull()
	{
		return this.conceptid != null;
	}
	public String getConceptid()
	{
		return this.conceptid;
	}
	public static int getConceptidMaxLength()
	{
		return 100;
	}
	public void setConceptid(String value)
	{
		this.isValidated = false;
		this.conceptid = value;
	}
	public boolean getConceptstatusIsNotNull()
	{
		return this.conceptstatus != null;
	}
	public Integer getConceptstatus()
	{
		return this.conceptstatus;
	}
	public void setConceptstatus(Integer value)
	{
		this.isValidated = false;
		this.conceptstatus = value;
	}
	public boolean getFullyspecifiednameIsNotNull()
	{
		return this.fullyspecifiedname != null;
	}
	public String getFullyspecifiedname()
	{
		return this.fullyspecifiedname;
	}
	public static int getFullyspecifiednameMaxLength()
	{
		return 255;
	}
	public void setFullyspecifiedname(String value)
	{
		this.isValidated = false;
		this.fullyspecifiedname = value;
	}
	public boolean getCtv3idIsNotNull()
	{
		return this.ctv3id != null;
	}
	public String getCtv3id()
	{
		return this.ctv3id;
	}
	public static int getCtv3idMaxLength()
	{
		return 5;
	}
	public void setCtv3id(String value)
	{
		this.isValidated = false;
		this.ctv3id = value;
	}
	public boolean getSnomedidIsNotNull()
	{
		return this.snomedid != null;
	}
	public String getSnomedid()
	{
		return this.snomedid;
	}
	public static int getSnomedidMaxLength()
	{
		return 8;
	}
	public void setSnomedid(String value)
	{
		this.isValidated = false;
		this.snomedid = value;
	}
	public boolean getIsprimitiveIsNotNull()
	{
		return this.isprimitive != null;
	}
	public Integer getIsprimitive()
	{
		return this.isprimitive;
	}
	public void setIsprimitive(Integer value)
	{
		this.isValidated = false;
		this.isprimitive = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.conceptid != null)
			if(this.conceptid.length() > 100)
				listOfErrors.add("The length of the field [conceptid] in the value object [ims.admin.vo.TaxonomySnomedConceptVo] is too big. It should be less or equal to 100");
		if(this.fullyspecifiedname != null)
			if(this.fullyspecifiedname.length() > 255)
				listOfErrors.add("The length of the field [fullyspecifiedname] in the value object [ims.admin.vo.TaxonomySnomedConceptVo] is too big. It should be less or equal to 255");
		if(this.ctv3id != null)
			if(this.ctv3id.length() > 5)
				listOfErrors.add("The length of the field [ctv3id] in the value object [ims.admin.vo.TaxonomySnomedConceptVo] is too big. It should be less or equal to 5");
		if(this.snomedid != null)
			if(this.snomedid.length() > 8)
				listOfErrors.add("The length of the field [snomedid] in the value object [ims.admin.vo.TaxonomySnomedConceptVo] is too big. It should be less or equal to 8");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		TaxonomySnomedConceptVo clone = new TaxonomySnomedConceptVo(this.id, this.version);
		
		clone.conceptid = this.conceptid;
		clone.conceptstatus = this.conceptstatus;
		clone.fullyspecifiedname = this.fullyspecifiedname;
		clone.ctv3id = this.ctv3id;
		clone.snomedid = this.snomedid;
		clone.isprimitive = this.isprimitive;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(TaxonomySnomedConceptVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A TaxonomySnomedConceptVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((TaxonomySnomedConceptVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((TaxonomySnomedConceptVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.conceptid != null)
			count++;
		if(this.conceptstatus != null)
			count++;
		if(this.fullyspecifiedname != null)
			count++;
		if(this.ctv3id != null)
			count++;
		if(this.snomedid != null)
			count++;
		if(this.isprimitive != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected String conceptid;
	protected Integer conceptstatus;
	protected String fullyspecifiedname;
	protected String ctv3id;
	protected String snomedid;
	protected Integer isprimitive;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
