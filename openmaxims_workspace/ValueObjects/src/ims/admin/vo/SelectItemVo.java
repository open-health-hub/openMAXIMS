//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.vo;


public class SelectItemVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public SelectItemVo()
	{
	}
	public SelectItemVo(ims.admin.vo.beans.SelectItemVoBean bean)
	{
		// Interface field type not supported.
		this.selected = bean.getSelected();
		this.items = ims.admin.vo.SelectItemVoCollection.buildFromBeanCollection(bean.getItems());
		this.itemimage = bean.getItemImage() == null ? null : bean.getItemImage().buildImage();
		this.orderinvestigationforsite = bean.getOrderInvestigationForSite() == null ? null : bean.getOrderInvestigationForSite().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.admin.vo.beans.SelectItemVoBean bean)
	{
		// Interface field type not supported.
		this.selected = bean.getSelected();
		this.items = ims.admin.vo.SelectItemVoCollection.buildFromBeanCollection(bean.getItems());
		this.itemimage = bean.getItemImage() == null ? null : bean.getItemImage().buildImage();
		this.orderinvestigationforsite = bean.getOrderInvestigationForSite() == null ? null : bean.getOrderInvestigationForSite().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.admin.vo.beans.SelectItemVoBean bean = null;
		if(map != null)
			bean = (ims.admin.vo.beans.SelectItemVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.admin.vo.beans.SelectItemVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getItemIsNotNull()
	{
		return this.item != null;
	}
	public ims.vo.interfaces.IGenericItemType getItem()
	{
		return this.item;
	}
	public void setItem(ims.vo.interfaces.IGenericItemType value)
	{
		this.isValidated = false;
		this.item = value;
	}
	public boolean getSelectedIsNotNull()
	{
		return this.selected != null;
	}
	public Boolean getSelected()
	{
		return this.selected;
	}
	public void setSelected(Boolean value)
	{
		this.isValidated = false;
		this.selected = value;
	}
	public boolean getItemsIsNotNull()
	{
		return this.items != null;
	}
	public ims.admin.vo.SelectItemVoCollection getItems()
	{
		return this.items;
	}
	public void setItems(ims.admin.vo.SelectItemVoCollection value)
	{
		this.isValidated = false;
		this.items = value;
	}
	public boolean getItemImageIsNotNull()
	{
		return this.itemimage != null;
	}
	public ims.framework.utils.Image getItemImage()
	{
		return this.itemimage;
	}
	public void setItemImage(ims.framework.utils.Image value)
	{
		this.isValidated = false;
		this.itemimage = value;
	}
	public boolean getOrderInvestigationForSiteIsNotNull()
	{
		return this.orderinvestigationforsite != null;
	}
	public ims.ocrr.vo.OrderInvestigationVo getOrderInvestigationForSite()
	{
		return this.orderinvestigationforsite;
	}
	public void setOrderInvestigationForSite(ims.ocrr.vo.OrderInvestigationVo value)
	{
		this.isValidated = false;
		this.orderinvestigationforsite = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	/**
	* compareTo methods
	*/
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}	
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		return -1;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.items != null)
		{
			if(!this.items.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.items != null)
		{
			String[] listOfOtherErrors = this.items.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		SelectItemVo clone = new SelectItemVo();
		
		clone.item = this.item;
		clone.selected = this.selected;
		if(this.items == null)
			clone.items = null;
		else
			clone.items = (ims.admin.vo.SelectItemVoCollection)this.items.clone();
		clone.itemimage = this.itemimage;
		if(this.orderinvestigationforsite == null)
			clone.orderinvestigationforsite = null;
		else
			clone.orderinvestigationforsite = (ims.ocrr.vo.OrderInvestigationVo)this.orderinvestigationforsite.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.item != null)
			count++;
		if(this.selected != null)
			count++;
		if(this.items != null)
			count++;
		if(this.itemimage != null)
			count++;
		if(this.orderinvestigationforsite != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.vo.interfaces.IGenericItemType item;
	protected Boolean selected;
	protected ims.admin.vo.SelectItemVoCollection items;
	protected ims.framework.utils.Image itemimage;
	protected ims.ocrr.vo.OrderInvestigationVo orderinvestigationforsite;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
