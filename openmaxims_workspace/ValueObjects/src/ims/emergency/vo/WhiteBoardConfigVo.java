//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to emergency.Configuration.WhiteBoardConfig business object (ID: 1087100018).
 */
public class WhiteBoardConfigVo extends ims.emergency.configuration.vo.WhiteBoardConfigRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public WhiteBoardConfigVo()
	{
	}
	public WhiteBoardConfigVo(Integer id, int version)
	{
		super(id, version);
	}
	public WhiteBoardConfigVo(ims.emergency.vo.beans.WhiteBoardConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.edlocation = bean.getEDLocation() == null ? null : bean.getEDLocation().buildVo();
		this.isactive = bean.getIsActive();
		this.medsgiven = bean.getMedsGiven();
		this.obstaken = bean.getObsTaken();
		this.ecg = bean.getECG();
		this.npo = bean.getNPO();
		this.isolation = bean.getIsolation();
		this.assessments = ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection.buildFromBeanCollection(bean.getAssessments());
		this.otherquestions = ims.emergency.vo.WhiteBoardQuestionConfigVoCollection.buildFromBeanCollection(bean.getOtherQuestions());
		this.comments = bean.getComments();
		this.currentarea = bean.getCurrentArea() == null ? null : bean.getCurrentArea().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.WhiteBoardConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.edlocation = bean.getEDLocation() == null ? null : bean.getEDLocation().buildVo(map);
		this.isactive = bean.getIsActive();
		this.medsgiven = bean.getMedsGiven();
		this.obstaken = bean.getObsTaken();
		this.ecg = bean.getECG();
		this.npo = bean.getNPO();
		this.isolation = bean.getIsolation();
		this.assessments = ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection.buildFromBeanCollection(bean.getAssessments());
		this.otherquestions = ims.emergency.vo.WhiteBoardQuestionConfigVoCollection.buildFromBeanCollection(bean.getOtherQuestions());
		this.comments = bean.getComments();
		this.currentarea = bean.getCurrentArea() == null ? null : bean.getCurrentArea().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.WhiteBoardConfigVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.WhiteBoardConfigVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.WhiteBoardConfigVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("EDLOCATION"))
			return getEDLocation();
		if(fieldName.equals("ISACTIVE"))
			return getIsActive();
		if(fieldName.equals("MEDSGIVEN"))
			return getMedsGiven();
		if(fieldName.equals("OBSTAKEN"))
			return getObsTaken();
		if(fieldName.equals("ECG"))
			return getECG();
		if(fieldName.equals("NPO"))
			return getNPO();
		if(fieldName.equals("ISOLATION"))
			return getIsolation();
		if(fieldName.equals("ASSESSMENTS"))
			return getAssessments();
		if(fieldName.equals("OTHERQUESTIONS"))
			return getOtherQuestions();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		if(fieldName.equals("CURRENTAREA"))
			return getCurrentArea();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getEDLocationIsNotNull()
	{
		return this.edlocation != null;
	}
	public ims.core.vo.LocationLiteVo getEDLocation()
	{
		return this.edlocation;
	}
	public void setEDLocation(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.edlocation = value;
	}
	public boolean getIsActiveIsNotNull()
	{
		return this.isactive != null;
	}
	public Boolean getIsActive()
	{
		return this.isactive;
	}
	public void setIsActive(Boolean value)
	{
		this.isValidated = false;
		this.isactive = value;
	}
	public boolean getMedsGivenIsNotNull()
	{
		return this.medsgiven != null;
	}
	public Boolean getMedsGiven()
	{
		return this.medsgiven;
	}
	public void setMedsGiven(Boolean value)
	{
		this.isValidated = false;
		this.medsgiven = value;
	}
	public boolean getObsTakenIsNotNull()
	{
		return this.obstaken != null;
	}
	public Boolean getObsTaken()
	{
		return this.obstaken;
	}
	public void setObsTaken(Boolean value)
	{
		this.isValidated = false;
		this.obstaken = value;
	}
	public boolean getECGIsNotNull()
	{
		return this.ecg != null;
	}
	public Boolean getECG()
	{
		return this.ecg;
	}
	public void setECG(Boolean value)
	{
		this.isValidated = false;
		this.ecg = value;
	}
	public boolean getNPOIsNotNull()
	{
		return this.npo != null;
	}
	public Boolean getNPO()
	{
		return this.npo;
	}
	public void setNPO(Boolean value)
	{
		this.isValidated = false;
		this.npo = value;
	}
	public boolean getIsolationIsNotNull()
	{
		return this.isolation != null;
	}
	public Boolean getIsolation()
	{
		return this.isolation;
	}
	public void setIsolation(Boolean value)
	{
		this.isValidated = false;
		this.isolation = value;
	}
	public boolean getAssessmentsIsNotNull()
	{
		return this.assessments != null;
	}
	public ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection getAssessments()
	{
		return this.assessments;
	}
	public void setAssessments(ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection value)
	{
		this.isValidated = false;
		this.assessments = value;
	}
	public boolean getOtherQuestionsIsNotNull()
	{
		return this.otherquestions != null;
	}
	public ims.emergency.vo.WhiteBoardQuestionConfigVoCollection getOtherQuestions()
	{
		return this.otherquestions;
	}
	public void setOtherQuestions(ims.emergency.vo.WhiteBoardQuestionConfigVoCollection value)
	{
		this.isValidated = false;
		this.otherquestions = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public Boolean getComments()
	{
		return this.comments;
	}
	public void setComments(Boolean value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean getCurrentAreaIsNotNull()
	{
		return this.currentarea != null;
	}
	public ims.emergency.vo.TrackingAreaLiteVo getCurrentArea()
	{
		return this.currentarea;
	}
	public void setCurrentArea(ims.emergency.vo.TrackingAreaLiteVo value)
	{
		this.isValidated = false;
		this.currentarea = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.assessments != null)
		{
			if(!this.assessments.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.otherquestions != null)
		{
			if(!this.otherquestions.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.edlocation == null)
			listOfErrors.add("EDLocation is mandatory");
		if(this.isactive == null)
			listOfErrors.add("isActive is mandatory");
		if(this.medsgiven == null)
			listOfErrors.add("MedsGiven is mandatory");
		if(this.obstaken == null)
			listOfErrors.add("ObsTaken is mandatory");
		if(this.ecg == null)
			listOfErrors.add("ECG is mandatory");
		if(this.npo == null)
			listOfErrors.add("NPO is mandatory");
		if(this.isolation == null)
			listOfErrors.add("Isolation is mandatory");
		if(this.assessments != null)
		{
			String[] listOfOtherErrors = this.assessments.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.otherquestions != null)
		{
			String[] listOfOtherErrors = this.otherquestions.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.comments == null)
			listOfErrors.add("Comments is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		WhiteBoardConfigVo clone = new WhiteBoardConfigVo(this.id, this.version);
		
		if(this.edlocation == null)
			clone.edlocation = null;
		else
			clone.edlocation = (ims.core.vo.LocationLiteVo)this.edlocation.clone();
		clone.isactive = this.isactive;
		clone.medsgiven = this.medsgiven;
		clone.obstaken = this.obstaken;
		clone.ecg = this.ecg;
		clone.npo = this.npo;
		clone.isolation = this.isolation;
		if(this.assessments == null)
			clone.assessments = null;
		else
			clone.assessments = (ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection)this.assessments.clone();
		if(this.otherquestions == null)
			clone.otherquestions = null;
		else
			clone.otherquestions = (ims.emergency.vo.WhiteBoardQuestionConfigVoCollection)this.otherquestions.clone();
		clone.comments = this.comments;
		if(this.currentarea == null)
			clone.currentarea = null;
		else
			clone.currentarea = (ims.emergency.vo.TrackingAreaLiteVo)this.currentarea.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(WhiteBoardConfigVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A WhiteBoardConfigVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((WhiteBoardConfigVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((WhiteBoardConfigVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.edlocation != null)
			count++;
		if(this.isactive != null)
			count++;
		if(this.medsgiven != null)
			count++;
		if(this.obstaken != null)
			count++;
		if(this.ecg != null)
			count++;
		if(this.npo != null)
			count++;
		if(this.isolation != null)
			count++;
		if(this.assessments != null)
			count++;
		if(this.otherquestions != null)
			count++;
		if(this.comments != null)
			count++;
		if(this.currentarea != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 11;
	}
	protected ims.core.vo.LocationLiteVo edlocation;
	protected Boolean isactive;
	protected Boolean medsgiven;
	protected Boolean obstaken;
	protected Boolean ecg;
	protected Boolean npo;
	protected Boolean isolation;
	protected ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection assessments;
	protected ims.emergency.vo.WhiteBoardQuestionConfigVoCollection otherquestions;
	protected Boolean comments;
	protected ims.emergency.vo.TrackingAreaLiteVo currentarea;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
