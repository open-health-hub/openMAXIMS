//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to core.admin.EmergencyAttendanceBilling business object (ID: 1004100063).
 */
public class EmergencyAttendanceBillingVo extends ims.core.admin.vo.EmergencyAttendanceBillingRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public EmergencyAttendanceBillingVo()
	{
	}
	public EmergencyAttendanceBillingVo(Integer id, int version)
	{
		super(id, version);
	}
	public EmergencyAttendanceBillingVo(ims.emergency.vo.beans.EmergencyAttendanceBillingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.emergencyattendence = bean.getEmergencyAttendence() == null ? null : new ims.core.admin.vo.EmergencyAttendanceRefVo(new Integer(bean.getEmergencyAttendence().getId()), bean.getEmergencyAttendence().getVersion());
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisode().getId()), bean.getEpisode().getVersion());
		this.attendance = bean.getAttendance() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getAttendance().getId()), bean.getAttendance().getVersion());
		this.ispatientexempt = bean.getIsPatientExempt() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getIsPatientExempt());
		this.exemptionreason = bean.getExemptionReason() == null ? null : ims.emergency.vo.lookups.ExemptionReason.buildLookup(bean.getExemptionReason());
		this.exemptionreasonother = bean.getExemptionReasonOther();
		this.paymentmade = bean.getPaymentMade() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPaymentMade());
		this.paymenttype = bean.getPaymentType() == null ? null : ims.pci.vo.lookups.PaymentType.buildLookup(bean.getPaymentType());
		this.invoiceamount = bean.getInvoiceAmount();
		this.reasonfornonpayment = bean.getReasonForNonPayment() == null ? null : ims.billing.vo.lookups.ReasonForNonPayment.buildLookup(bean.getReasonForNonPayment());
		this.paymentrefunded = bean.getPaymentRefunded() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPaymentRefunded());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.EmergencyAttendanceBillingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.emergencyattendence = bean.getEmergencyAttendence() == null ? null : new ims.core.admin.vo.EmergencyAttendanceRefVo(new Integer(bean.getEmergencyAttendence().getId()), bean.getEmergencyAttendence().getVersion());
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisode().getId()), bean.getEpisode().getVersion());
		this.attendance = bean.getAttendance() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getAttendance().getId()), bean.getAttendance().getVersion());
		this.ispatientexempt = bean.getIsPatientExempt() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getIsPatientExempt());
		this.exemptionreason = bean.getExemptionReason() == null ? null : ims.emergency.vo.lookups.ExemptionReason.buildLookup(bean.getExemptionReason());
		this.exemptionreasonother = bean.getExemptionReasonOther();
		this.paymentmade = bean.getPaymentMade() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPaymentMade());
		this.paymenttype = bean.getPaymentType() == null ? null : ims.pci.vo.lookups.PaymentType.buildLookup(bean.getPaymentType());
		this.invoiceamount = bean.getInvoiceAmount();
		this.reasonfornonpayment = bean.getReasonForNonPayment() == null ? null : ims.billing.vo.lookups.ReasonForNonPayment.buildLookup(bean.getReasonForNonPayment());
		this.paymentrefunded = bean.getPaymentRefunded() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPaymentRefunded());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.EmergencyAttendanceBillingVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.EmergencyAttendanceBillingVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.EmergencyAttendanceBillingVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("EMERGENCYATTENDENCE"))
			return getEmergencyAttendence();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("EPISODE"))
			return getEpisode();
		if(fieldName.equals("ATTENDANCE"))
			return getAttendance();
		if(fieldName.equals("ISPATIENTEXEMPT"))
			return getIsPatientExempt();
		if(fieldName.equals("EXEMPTIONREASON"))
			return getExemptionReason();
		if(fieldName.equals("EXEMPTIONREASONOTHER"))
			return getExemptionReasonOther();
		if(fieldName.equals("PAYMENTMADE"))
			return getPaymentMade();
		if(fieldName.equals("PAYMENTTYPE"))
			return getPaymentType();
		if(fieldName.equals("INVOICEAMOUNT"))
			return getInvoiceAmount();
		if(fieldName.equals("REASONFORNONPAYMENT"))
			return getReasonForNonPayment();
		if(fieldName.equals("PAYMENTREFUNDED"))
			return getPaymentRefunded();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getEmergencyAttendenceIsNotNull()
	{
		return this.emergencyattendence != null;
	}
	public ims.core.admin.vo.EmergencyAttendanceRefVo getEmergencyAttendence()
	{
		return this.emergencyattendence;
	}
	public void setEmergencyAttendence(ims.core.admin.vo.EmergencyAttendanceRefVo value)
	{
		this.isValidated = false;
		this.emergencyattendence = value;
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getEpisodeIsNotNull()
	{
		return this.episode != null;
	}
	public ims.core.admin.vo.EpisodeOfCareRefVo getEpisode()
	{
		return this.episode;
	}
	public void setEpisode(ims.core.admin.vo.EpisodeOfCareRefVo value)
	{
		this.isValidated = false;
		this.episode = value;
	}
	public boolean getAttendanceIsNotNull()
	{
		return this.attendance != null;
	}
	public ims.core.admin.vo.CareContextRefVo getAttendance()
	{
		return this.attendance;
	}
	public void setAttendance(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.attendance = value;
	}
	public boolean getIsPatientExemptIsNotNull()
	{
		return this.ispatientexempt != null;
	}
	public ims.core.vo.lookups.YesNo getIsPatientExempt()
	{
		return this.ispatientexempt;
	}
	public void setIsPatientExempt(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.ispatientexempt = value;
	}
	public boolean getExemptionReasonIsNotNull()
	{
		return this.exemptionreason != null;
	}
	public ims.emergency.vo.lookups.ExemptionReason getExemptionReason()
	{
		return this.exemptionreason;
	}
	public void setExemptionReason(ims.emergency.vo.lookups.ExemptionReason value)
	{
		this.isValidated = false;
		this.exemptionreason = value;
	}
	public boolean getExemptionReasonOtherIsNotNull()
	{
		return this.exemptionreasonother != null;
	}
	public String getExemptionReasonOther()
	{
		return this.exemptionreasonother;
	}
	public static int getExemptionReasonOtherMaxLength()
	{
		return 500;
	}
	public void setExemptionReasonOther(String value)
	{
		this.isValidated = false;
		this.exemptionreasonother = value;
	}
	public boolean getPaymentMadeIsNotNull()
	{
		return this.paymentmade != null;
	}
	public ims.core.vo.lookups.YesNo getPaymentMade()
	{
		return this.paymentmade;
	}
	public void setPaymentMade(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.paymentmade = value;
	}
	public boolean getPaymentTypeIsNotNull()
	{
		return this.paymenttype != null;
	}
	public ims.pci.vo.lookups.PaymentType getPaymentType()
	{
		return this.paymenttype;
	}
	public void setPaymentType(ims.pci.vo.lookups.PaymentType value)
	{
		this.isValidated = false;
		this.paymenttype = value;
	}
	public boolean getInvoiceAmountIsNotNull()
	{
		return this.invoiceamount != null;
	}
	public Integer getInvoiceAmount()
	{
		return this.invoiceamount;
	}
	public void setInvoiceAmount(Integer value)
	{
		this.isValidated = false;
		this.invoiceamount = value;
	}
	public boolean getReasonForNonPaymentIsNotNull()
	{
		return this.reasonfornonpayment != null;
	}
	public ims.billing.vo.lookups.ReasonForNonPayment getReasonForNonPayment()
	{
		return this.reasonfornonpayment;
	}
	public void setReasonForNonPayment(ims.billing.vo.lookups.ReasonForNonPayment value)
	{
		this.isValidated = false;
		this.reasonfornonpayment = value;
	}
	public boolean getPaymentRefundedIsNotNull()
	{
		return this.paymentrefunded != null;
	}
	public ims.core.vo.lookups.YesNo getPaymentRefunded()
	{
		return this.paymentrefunded;
	}
	public void setPaymentRefunded(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.paymentrefunded = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.emergencyattendence == null)
			listOfErrors.add("EmergencyAttendence is mandatory");
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.episode == null)
			listOfErrors.add("Episode is mandatory");
		if(this.attendance == null)
			listOfErrors.add("Attendance is mandatory");
		if(this.ispatientexempt == null)
			listOfErrors.add("Is Patient Exempt is mandatory!");
		if(this.exemptionreasonother != null)
			if(this.exemptionreasonother.length() > 500)
				listOfErrors.add("The length of the field [exemptionreasonother] in the value object [ims.emergency.vo.EmergencyAttendanceBillingVo] is too big. It should be less or equal to 500");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		EmergencyAttendanceBillingVo clone = new EmergencyAttendanceBillingVo(this.id, this.version);
		
		clone.emergencyattendence = this.emergencyattendence;
		clone.patient = this.patient;
		clone.episode = this.episode;
		clone.attendance = this.attendance;
		if(this.ispatientexempt == null)
			clone.ispatientexempt = null;
		else
			clone.ispatientexempt = (ims.core.vo.lookups.YesNo)this.ispatientexempt.clone();
		if(this.exemptionreason == null)
			clone.exemptionreason = null;
		else
			clone.exemptionreason = (ims.emergency.vo.lookups.ExemptionReason)this.exemptionreason.clone();
		clone.exemptionreasonother = this.exemptionreasonother;
		if(this.paymentmade == null)
			clone.paymentmade = null;
		else
			clone.paymentmade = (ims.core.vo.lookups.YesNo)this.paymentmade.clone();
		if(this.paymenttype == null)
			clone.paymenttype = null;
		else
			clone.paymenttype = (ims.pci.vo.lookups.PaymentType)this.paymenttype.clone();
		clone.invoiceamount = this.invoiceamount;
		if(this.reasonfornonpayment == null)
			clone.reasonfornonpayment = null;
		else
			clone.reasonfornonpayment = (ims.billing.vo.lookups.ReasonForNonPayment)this.reasonfornonpayment.clone();
		if(this.paymentrefunded == null)
			clone.paymentrefunded = null;
		else
			clone.paymentrefunded = (ims.core.vo.lookups.YesNo)this.paymentrefunded.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(EmergencyAttendanceBillingVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A EmergencyAttendanceBillingVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((EmergencyAttendanceBillingVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((EmergencyAttendanceBillingVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.emergencyattendence != null)
			count++;
		if(this.patient != null)
			count++;
		if(this.episode != null)
			count++;
		if(this.attendance != null)
			count++;
		if(this.ispatientexempt != null)
			count++;
		if(this.exemptionreason != null)
			count++;
		if(this.exemptionreasonother != null)
			count++;
		if(this.paymentmade != null)
			count++;
		if(this.paymenttype != null)
			count++;
		if(this.invoiceamount != null)
			count++;
		if(this.reasonfornonpayment != null)
			count++;
		if(this.paymentrefunded != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 12;
	}
	protected ims.core.admin.vo.EmergencyAttendanceRefVo emergencyattendence;
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.core.admin.vo.EpisodeOfCareRefVo episode;
	protected ims.core.admin.vo.CareContextRefVo attendance;
	protected ims.core.vo.lookups.YesNo ispatientexempt;
	protected ims.emergency.vo.lookups.ExemptionReason exemptionreason;
	protected String exemptionreasonother;
	protected ims.core.vo.lookups.YesNo paymentmade;
	protected ims.pci.vo.lookups.PaymentType paymenttype;
	protected Integer invoiceamount;
	protected ims.billing.vo.lookups.ReasonForNonPayment reasonfornonpayment;
	protected ims.core.vo.lookups.YesNo paymentrefunded;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
