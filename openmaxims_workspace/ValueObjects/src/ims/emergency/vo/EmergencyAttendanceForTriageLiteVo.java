//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to core.admin.EmergencyAttendance business object (ID: 1004100025).
 */
public class EmergencyAttendanceForTriageLiteVo extends ims.emergency.vo.EmergencyAttendanceListForClinicianWorklistVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public EmergencyAttendanceForTriageLiteVo()
	{
	}
	public EmergencyAttendanceForTriageLiteVo(Integer id, int version)
	{
		super(id, version);
	}
	public EmergencyAttendanceForTriageLiteVo(ims.emergency.vo.beans.EmergencyAttendanceForTriageLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.registrationdatetime = bean.getRegistrationDateTime() == null ? null : bean.getRegistrationDateTime().buildDateTime();
		this.ageatattendance = bean.getAgeAtAttendance();
		this.arrivaldatetime = bean.getArrivalDateTime() == null ? null : bean.getArrivalDateTime().buildDateTime();
		this.dischargedatetime = bean.getDischargeDateTime() == null ? null : bean.getDischargeDateTime().buildDateTime();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.urgencylevel = bean.getUrgencyLevel() == null ? null : ims.emergency.vo.lookups.UrgencyLevel.buildLookup(bean.getUrgencyLevel());
		this.conclusiondatetime = bean.getConclusionDateTime() == null ? null : bean.getConclusionDateTime().buildDateTime();
		this.bedtyperequested = bean.getBedTypeRequested() == null ? null : ims.core.vo.lookups.BedTypeRequested.buildLookup(bean.getBedTypeRequested());
		this.mc = bean.getMC();
		this.cota = bean.getCOTA();
		this.pcg1 = bean.getPCG1();
		this.pcg2 = bean.getPCG2();
		this.har = bean.getHAR();
		this.purchaser = bean.getPurchaser();
		this.sequencenumber = bean.getSequenceNumber();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.EmergencyAttendanceForTriageLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.registrationdatetime = bean.getRegistrationDateTime() == null ? null : bean.getRegistrationDateTime().buildDateTime();
		this.ageatattendance = bean.getAgeAtAttendance();
		this.arrivaldatetime = bean.getArrivalDateTime() == null ? null : bean.getArrivalDateTime().buildDateTime();
		this.dischargedatetime = bean.getDischargeDateTime() == null ? null : bean.getDischargeDateTime().buildDateTime();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.urgencylevel = bean.getUrgencyLevel() == null ? null : ims.emergency.vo.lookups.UrgencyLevel.buildLookup(bean.getUrgencyLevel());
		this.conclusiondatetime = bean.getConclusionDateTime() == null ? null : bean.getConclusionDateTime().buildDateTime();
		this.bedtyperequested = bean.getBedTypeRequested() == null ? null : ims.core.vo.lookups.BedTypeRequested.buildLookup(bean.getBedTypeRequested());
		this.mc = bean.getMC();
		this.cota = bean.getCOTA();
		this.pcg1 = bean.getPCG1();
		this.pcg2 = bean.getPCG2();
		this.har = bean.getHAR();
		this.purchaser = bean.getPurchaser();
		this.sequencenumber = bean.getSequenceNumber();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.EmergencyAttendanceForTriageLiteVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.EmergencyAttendanceForTriageLiteVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.EmergencyAttendanceForTriageLiteVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("ARRIVALDATETIME"))
			return getArrivalDateTime();
		if(fieldName.equals("DISCHARGEDATETIME"))
			return getDischargeDateTime();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("URGENCYLEVEL"))
			return getUrgencyLevel();
		if(fieldName.equals("CONCLUSIONDATETIME"))
			return getConclusionDateTime();
		if(fieldName.equals("BEDTYPEREQUESTED"))
			return getBedTypeRequested();
		if(fieldName.equals("MC"))
			return getMC();
		if(fieldName.equals("COTA"))
			return getCOTA();
		if(fieldName.equals("PCG1"))
			return getPCG1();
		if(fieldName.equals("PCG2"))
			return getPCG2();
		if(fieldName.equals("HAR"))
			return getHAR();
		if(fieldName.equals("PURCHASER"))
			return getPurchaser();
		if(fieldName.equals("SEQUENCENUMBER"))
			return getSequenceNumber();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getArrivalDateTimeIsNotNull()
	{
		return this.arrivaldatetime != null;
	}
	public ims.framework.utils.DateTime getArrivalDateTime()
	{
		return this.arrivaldatetime;
	}
	public void setArrivalDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.arrivaldatetime = value;
	}
	public boolean getDischargeDateTimeIsNotNull()
	{
		return this.dischargedatetime != null;
	}
	public ims.framework.utils.DateTime getDischargeDateTime()
	{
		return this.dischargedatetime;
	}
	public void setDischargeDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.dischargedatetime = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.admin.vo.CareContextRefVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getUrgencyLevelIsNotNull()
	{
		return this.urgencylevel != null;
	}
	public ims.emergency.vo.lookups.UrgencyLevel getUrgencyLevel()
	{
		return this.urgencylevel;
	}
	public void setUrgencyLevel(ims.emergency.vo.lookups.UrgencyLevel value)
	{
		this.isValidated = false;
		this.urgencylevel = value;
	}
	public boolean getConclusionDateTimeIsNotNull()
	{
		return this.conclusiondatetime != null;
	}
	public ims.framework.utils.DateTime getConclusionDateTime()
	{
		return this.conclusiondatetime;
	}
	public void setConclusionDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.conclusiondatetime = value;
	}
	public boolean getBedTypeRequestedIsNotNull()
	{
		return this.bedtyperequested != null;
	}
	public ims.core.vo.lookups.BedTypeRequested getBedTypeRequested()
	{
		return this.bedtyperequested;
	}
	public void setBedTypeRequested(ims.core.vo.lookups.BedTypeRequested value)
	{
		this.isValidated = false;
		this.bedtyperequested = value;
	}
	public boolean getMCIsNotNull()
	{
		return this.mc != null;
	}
	public String getMC()
	{
		return this.mc;
	}
	public static int getMCMaxLength()
	{
		return 5;
	}
	public void setMC(String value)
	{
		this.isValidated = false;
		this.mc = value;
	}
	public boolean getCOTAIsNotNull()
	{
		return this.cota != null;
	}
	public String getCOTA()
	{
		return this.cota;
	}
	public static int getCOTAMaxLength()
	{
		return 5;
	}
	public void setCOTA(String value)
	{
		this.isValidated = false;
		this.cota = value;
	}
	public boolean getPCG1IsNotNull()
	{
		return this.pcg1 != null;
	}
	public String getPCG1()
	{
		return this.pcg1;
	}
	public static int getPCG1MaxLength()
	{
		return 5;
	}
	public void setPCG1(String value)
	{
		this.isValidated = false;
		this.pcg1 = value;
	}
	public boolean getPCG2IsNotNull()
	{
		return this.pcg2 != null;
	}
	public String getPCG2()
	{
		return this.pcg2;
	}
	public static int getPCG2MaxLength()
	{
		return 5;
	}
	public void setPCG2(String value)
	{
		this.isValidated = false;
		this.pcg2 = value;
	}
	public boolean getHARIsNotNull()
	{
		return this.har != null;
	}
	public String getHAR()
	{
		return this.har;
	}
	public static int getHARMaxLength()
	{
		return 5;
	}
	public void setHAR(String value)
	{
		this.isValidated = false;
		this.har = value;
	}
	public boolean getPurchaserIsNotNull()
	{
		return this.purchaser != null;
	}
	public String getPurchaser()
	{
		return this.purchaser;
	}
	public static int getPurchaserMaxLength()
	{
		return 5;
	}
	public void setPurchaser(String value)
	{
		this.isValidated = false;
		this.purchaser = value;
	}
	public boolean getSequenceNumberIsNotNull()
	{
		return this.sequencenumber != null;
	}
	public String getSequenceNumber()
	{
		return this.sequencenumber;
	}
	public static int getSequenceNumberMaxLength()
	{
		return 6;
	}
	public void setSequenceNumber(String value)
	{
		this.isValidated = false;
		this.sequencenumber = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.registrationdatetime == null)
			listOfErrors.add("RegistrationDateTime is mandatory");
		if(this.arrivaldatetime == null)
			listOfErrors.add("ArrivalDateTime is mandatory");
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.mc != null)
			if(this.mc.length() > 5)
				listOfErrors.add("The length of the field [mc] in the value object [ims.emergency.vo.EmergencyAttendanceForTriageLiteVo] is too big. It should be less or equal to 5");
		if(this.cota != null)
			if(this.cota.length() > 5)
				listOfErrors.add("The length of the field [cota] in the value object [ims.emergency.vo.EmergencyAttendanceForTriageLiteVo] is too big. It should be less or equal to 5");
		if(this.pcg1 != null)
			if(this.pcg1.length() > 5)
				listOfErrors.add("The length of the field [pcg1] in the value object [ims.emergency.vo.EmergencyAttendanceForTriageLiteVo] is too big. It should be less or equal to 5");
		if(this.pcg2 != null)
			if(this.pcg2.length() > 5)
				listOfErrors.add("The length of the field [pcg2] in the value object [ims.emergency.vo.EmergencyAttendanceForTriageLiteVo] is too big. It should be less or equal to 5");
		if(this.har != null)
			if(this.har.length() > 5)
				listOfErrors.add("The length of the field [har] in the value object [ims.emergency.vo.EmergencyAttendanceForTriageLiteVo] is too big. It should be less or equal to 5");
		if(this.purchaser != null)
			if(this.purchaser.length() > 5)
				listOfErrors.add("The length of the field [purchaser] in the value object [ims.emergency.vo.EmergencyAttendanceForTriageLiteVo] is too big. It should be less or equal to 5");
		if(this.sequencenumber != null)
			if(this.sequencenumber.length() > 6)
				listOfErrors.add("The length of the field [sequencenumber] in the value object [ims.emergency.vo.EmergencyAttendanceForTriageLiteVo] is too big. It should be less or equal to 6");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		EmergencyAttendanceForTriageLiteVo clone = new EmergencyAttendanceForTriageLiteVo(this.id, this.version);
		
		if(this.registrationdatetime == null)
			clone.registrationdatetime = null;
		else
			clone.registrationdatetime = (ims.framework.utils.DateTime)this.registrationdatetime.clone();
		clone.ageatattendance = this.ageatattendance;
		if(this.arrivaldatetime == null)
			clone.arrivaldatetime = null;
		else
			clone.arrivaldatetime = (ims.framework.utils.DateTime)this.arrivaldatetime.clone();
		if(this.dischargedatetime == null)
			clone.dischargedatetime = null;
		else
			clone.dischargedatetime = (ims.framework.utils.DateTime)this.dischargedatetime.clone();
		clone.carecontext = this.carecontext;
		if(this.urgencylevel == null)
			clone.urgencylevel = null;
		else
			clone.urgencylevel = (ims.emergency.vo.lookups.UrgencyLevel)this.urgencylevel.clone();
		if(this.conclusiondatetime == null)
			clone.conclusiondatetime = null;
		else
			clone.conclusiondatetime = (ims.framework.utils.DateTime)this.conclusiondatetime.clone();
		if(this.bedtyperequested == null)
			clone.bedtyperequested = null;
		else
			clone.bedtyperequested = (ims.core.vo.lookups.BedTypeRequested)this.bedtyperequested.clone();
		clone.mc = this.mc;
		clone.cota = this.cota;
		clone.pcg1 = this.pcg1;
		clone.pcg2 = this.pcg2;
		clone.har = this.har;
		clone.purchaser = this.purchaser;
		clone.sequencenumber = this.sequencenumber;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(EmergencyAttendanceForTriageLiteVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A EmergencyAttendanceForTriageLiteVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((EmergencyAttendanceForTriageLiteVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((EmergencyAttendanceForTriageLiteVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.arrivaldatetime != null)
			count++;
		if(this.dischargedatetime != null)
			count++;
		if(this.carecontext != null)
			count++;
		if(this.urgencylevel != null)
			count++;
		if(this.conclusiondatetime != null)
			count++;
		if(this.bedtyperequested != null)
			count++;
		if(this.mc != null)
			count++;
		if(this.cota != null)
			count++;
		if(this.pcg1 != null)
			count++;
		if(this.pcg2 != null)
			count++;
		if(this.har != null)
			count++;
		if(this.purchaser != null)
			count++;
		if(this.sequencenumber != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 13;
	}
	protected ims.framework.utils.DateTime arrivaldatetime;
	protected ims.framework.utils.DateTime dischargedatetime;
	protected ims.core.admin.vo.CareContextRefVo carecontext;
	protected ims.emergency.vo.lookups.UrgencyLevel urgencylevel;
	protected ims.framework.utils.DateTime conclusiondatetime;
	protected ims.core.vo.lookups.BedTypeRequested bedtyperequested;
	protected String mc;
	protected String cota;
	protected String pcg1;
	protected String pcg2;
	protected String har;
	protected String purchaser;
	protected String sequencenumber;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
