//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to emergency.Tracking business object (ID: 1086100005).
 */
public class TrackingSendToAreaVo extends ims.emergency.vo.TrackingRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public TrackingSendToAreaVo()
	{
	}
	public TrackingSendToAreaVo(Integer id, int version)
	{
		super(id, version);
	}
	public TrackingSendToAreaVo(ims.emergency.vo.beans.TrackingSendToAreaVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : bean.getEpisode().buildVo();
		this.attendance = bean.getAttendance() == null ? null : bean.getAttendance().buildVo();
		this.currentreferral = bean.getCurrentReferral() == null ? null : new ims.emergency.vo.ReferralToSpecTeamRefVo(new Integer(bean.getCurrentReferral().getId()), bean.getCurrentReferral().getVersion());
		this.triagedetails = bean.getTriageDetails() == null ? null : new ims.emergency.vo.TriageRefVo(new Integer(bean.getTriageDetails().getId()), bean.getTriageDetails().getVersion());
		this.currentarea = bean.getCurrentArea() == null ? null : bean.getCurrentArea().buildVo();
		this.edlocation = bean.getEDLocation() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getEDLocation().getId()), bean.getEDLocation().getVersion());
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo();
		this.isunknownpatient = bean.getIsUnknownPatient();
		this.isprimarycare = bean.getIsPrimaryCare();
		this.currentdnw = bean.getCurrentDNW() == null ? null : new ims.emergency.vo.DNWRefVo(new Integer(bean.getCurrentDNW().getId()), bean.getCurrentDNW().getVersion());
		this.dischargeletterstatus = bean.getDischargeLetterStatus() == null ? null : ims.clinical.vo.lookups.DischargeLetterStatus.buildLookup(bean.getDischargeLetterStatus());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.TrackingSendToAreaVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : bean.getEpisode().buildVo(map);
		this.attendance = bean.getAttendance() == null ? null : bean.getAttendance().buildVo(map);
		this.currentreferral = bean.getCurrentReferral() == null ? null : new ims.emergency.vo.ReferralToSpecTeamRefVo(new Integer(bean.getCurrentReferral().getId()), bean.getCurrentReferral().getVersion());
		this.triagedetails = bean.getTriageDetails() == null ? null : new ims.emergency.vo.TriageRefVo(new Integer(bean.getTriageDetails().getId()), bean.getTriageDetails().getVersion());
		this.currentarea = bean.getCurrentArea() == null ? null : bean.getCurrentArea().buildVo(map);
		this.edlocation = bean.getEDLocation() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getEDLocation().getId()), bean.getEDLocation().getVersion());
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo(map);
		this.isunknownpatient = bean.getIsUnknownPatient();
		this.isprimarycare = bean.getIsPrimaryCare();
		this.currentdnw = bean.getCurrentDNW() == null ? null : new ims.emergency.vo.DNWRefVo(new Integer(bean.getCurrentDNW().getId()), bean.getCurrentDNW().getVersion());
		this.dischargeletterstatus = bean.getDischargeLetterStatus() == null ? null : ims.clinical.vo.lookups.DischargeLetterStatus.buildLookup(bean.getDischargeLetterStatus());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.TrackingSendToAreaVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.TrackingSendToAreaVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.TrackingSendToAreaVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("EPISODE"))
			return getEpisode();
		if(fieldName.equals("ATTENDANCE"))
			return getAttendance();
		if(fieldName.equals("CURRENTREFERRAL"))
			return getCurrentReferral();
		if(fieldName.equals("TRIAGEDETAILS"))
			return getTriageDetails();
		if(fieldName.equals("CURRENTAREA"))
			return getCurrentArea();
		if(fieldName.equals("EDLOCATION"))
			return getEDLocation();
		if(fieldName.equals("CURRENTSTATUS"))
			return getCurrentStatus();
		if(fieldName.equals("ISUNKNOWNPATIENT"))
			return getIsUnknownPatient();
		if(fieldName.equals("ISPRIMARYCARE"))
			return getIsPrimaryCare();
		if(fieldName.equals("CURRENTDNW"))
			return getCurrentDNW();
		if(fieldName.equals("DISCHARGELETTERSTATUS"))
			return getDischargeLetterStatus();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getEpisodeIsNotNull()
	{
		return this.episode != null;
	}
	public ims.emergency.vo.EpisodeDetailsVo getEpisode()
	{
		return this.episode;
	}
	public void setEpisode(ims.emergency.vo.EpisodeDetailsVo value)
	{
		this.isValidated = false;
		this.episode = value;
	}
	public boolean getAttendanceIsNotNull()
	{
		return this.attendance != null;
	}
	public ims.emergency.vo.AttendanceDetailsVo getAttendance()
	{
		return this.attendance;
	}
	public void setAttendance(ims.emergency.vo.AttendanceDetailsVo value)
	{
		this.isValidated = false;
		this.attendance = value;
	}
	public boolean getCurrentReferralIsNotNull()
	{
		return this.currentreferral != null;
	}
	public ims.emergency.vo.ReferralToSpecTeamRefVo getCurrentReferral()
	{
		return this.currentreferral;
	}
	public void setCurrentReferral(ims.emergency.vo.ReferralToSpecTeamRefVo value)
	{
		this.isValidated = false;
		this.currentreferral = value;
	}
	public boolean getTriageDetailsIsNotNull()
	{
		return this.triagedetails != null;
	}
	public ims.emergency.vo.TriageRefVo getTriageDetails()
	{
		return this.triagedetails;
	}
	public void setTriageDetails(ims.emergency.vo.TriageRefVo value)
	{
		this.isValidated = false;
		this.triagedetails = value;
	}
	public boolean getCurrentAreaIsNotNull()
	{
		return this.currentarea != null;
	}
	public ims.emergency.vo.TrackingAreaVo getCurrentArea()
	{
		return this.currentarea;
	}
	public void setCurrentArea(ims.emergency.vo.TrackingAreaVo value)
	{
		this.isValidated = false;
		this.currentarea = value;
	}
	public boolean getEDLocationIsNotNull()
	{
		return this.edlocation != null;
	}
	public ims.core.resource.place.vo.LocationRefVo getEDLocation()
	{
		return this.edlocation;
	}
	public void setEDLocation(ims.core.resource.place.vo.LocationRefVo value)
	{
		this.isValidated = false;
		this.edlocation = value;
	}
	public boolean getCurrentStatusIsNotNull()
	{
		return this.currentstatus != null;
	}
	public ims.emergency.vo.TrackingAttendanceStatusVo getCurrentStatus()
	{
		return this.currentstatus;
	}
	public void setCurrentStatus(ims.emergency.vo.TrackingAttendanceStatusVo value)
	{
		this.isValidated = false;
		this.currentstatus = value;
	}
	public boolean getIsUnknownPatientIsNotNull()
	{
		return this.isunknownpatient != null;
	}
	public Boolean getIsUnknownPatient()
	{
		return this.isunknownpatient;
	}
	public void setIsUnknownPatient(Boolean value)
	{
		this.isValidated = false;
		this.isunknownpatient = value;
	}
	public boolean getIsPrimaryCareIsNotNull()
	{
		return this.isprimarycare != null;
	}
	public Boolean getIsPrimaryCare()
	{
		return this.isprimarycare;
	}
	public void setIsPrimaryCare(Boolean value)
	{
		this.isValidated = false;
		this.isprimarycare = value;
	}
	public boolean getCurrentDNWIsNotNull()
	{
		return this.currentdnw != null;
	}
	public ims.emergency.vo.DNWRefVo getCurrentDNW()
	{
		return this.currentdnw;
	}
	public void setCurrentDNW(ims.emergency.vo.DNWRefVo value)
	{
		this.isValidated = false;
		this.currentdnw = value;
	}
	public boolean getDischargeLetterStatusIsNotNull()
	{
		return this.dischargeletterstatus != null;
	}
	public ims.clinical.vo.lookups.DischargeLetterStatus getDischargeLetterStatus()
	{
		return this.dischargeletterstatus;
	}
	public void setDischargeLetterStatus(ims.clinical.vo.lookups.DischargeLetterStatus value)
	{
		this.isValidated = false;
		this.dischargeletterstatus = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.currentstatus != null)
		{
			if(!this.currentstatus.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.episode == null)
			listOfErrors.add("Episode is mandatory");
		if(this.attendance == null)
			listOfErrors.add("Attendance is mandatory");
		if(this.edlocation == null)
			listOfErrors.add("EDLocation is mandatory");
		if(this.currentstatus != null)
		{
			String[] listOfOtherErrors = this.currentstatus.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.dischargeletterstatus == null)
			listOfErrors.add("DischargeLetterStatus is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		TrackingSendToAreaVo clone = new TrackingSendToAreaVo(this.id, this.version);
		
		clone.patient = this.patient;
		if(this.episode == null)
			clone.episode = null;
		else
			clone.episode = (ims.emergency.vo.EpisodeDetailsVo)this.episode.clone();
		if(this.attendance == null)
			clone.attendance = null;
		else
			clone.attendance = (ims.emergency.vo.AttendanceDetailsVo)this.attendance.clone();
		clone.currentreferral = this.currentreferral;
		clone.triagedetails = this.triagedetails;
		if(this.currentarea == null)
			clone.currentarea = null;
		else
			clone.currentarea = (ims.emergency.vo.TrackingAreaVo)this.currentarea.clone();
		clone.edlocation = this.edlocation;
		if(this.currentstatus == null)
			clone.currentstatus = null;
		else
			clone.currentstatus = (ims.emergency.vo.TrackingAttendanceStatusVo)this.currentstatus.clone();
		clone.isunknownpatient = this.isunknownpatient;
		clone.isprimarycare = this.isprimarycare;
		clone.currentdnw = this.currentdnw;
		if(this.dischargeletterstatus == null)
			clone.dischargeletterstatus = null;
		else
			clone.dischargeletterstatus = (ims.clinical.vo.lookups.DischargeLetterStatus)this.dischargeletterstatus.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(TrackingSendToAreaVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A TrackingSendToAreaVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((TrackingSendToAreaVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((TrackingSendToAreaVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.episode != null)
			count++;
		if(this.attendance != null)
			count++;
		if(this.currentreferral != null)
			count++;
		if(this.triagedetails != null)
			count++;
		if(this.currentarea != null)
			count++;
		if(this.edlocation != null)
			count++;
		if(this.currentstatus != null)
			count++;
		if(this.isunknownpatient != null)
			count++;
		if(this.isprimarycare != null)
			count++;
		if(this.currentdnw != null)
			count++;
		if(this.dischargeletterstatus != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 12;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.emergency.vo.EpisodeDetailsVo episode;
	protected ims.emergency.vo.AttendanceDetailsVo attendance;
	protected ims.emergency.vo.ReferralToSpecTeamRefVo currentreferral;
	protected ims.emergency.vo.TriageRefVo triagedetails;
	protected ims.emergency.vo.TrackingAreaVo currentarea;
	protected ims.core.resource.place.vo.LocationRefVo edlocation;
	protected ims.emergency.vo.TrackingAttendanceStatusVo currentstatus;
	protected Boolean isunknownpatient;
	protected Boolean isprimarycare;
	protected ims.emergency.vo.DNWRefVo currentdnw;
	protected ims.clinical.vo.lookups.DischargeLetterStatus dischargeletterstatus;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
