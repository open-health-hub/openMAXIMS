//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to emergency.Tracking business object (ID: 1086100005).
 */
public class TrackingVo extends ims.emergency.vo.TrackingRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public TrackingVo()
	{
	}
	public TrackingVo(Integer id, int version)
	{
		super(id, version);
	}
	public TrackingVo(ims.emergency.vo.beans.TrackingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.currentarea = bean.getCurrentArea() == null ? null : bean.getCurrentArea().buildVo();
		this.episode = bean.getEpisode() == null ? null : bean.getEpisode().buildVo();
		this.attendance = bean.getAttendance() == null ? null : bean.getAttendance().buildVo();
		this.currentreferral = bean.getCurrentReferral() == null ? null : bean.getCurrentReferral().buildVo();
		this.triagedetails = bean.getTriageDetails() == null ? null : bean.getTriageDetails().buildVo();
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo();
		this.edlocation = bean.getEDLocation() == null ? null : bean.getEDLocation().buildVo();
		this.currentcubicle = bean.getCurrentCubicle() == null ? null : bean.getCurrentCubicle().buildVo();
		this.lastmovementdatetime = bean.getLastMovementDateTime() == null ? null : bean.getLastMovementDateTime().buildDateTime();
		this.bedavailability = bean.getBedAvailability() == null ? null : bean.getBedAvailability().buildVo();
		this.currentdnw = bean.getCurrentDNW() == null ? null : bean.getCurrentDNW().buildVo();
		this.lastmovementdateinminutes = bean.getLastMovementDateInMinutes();
		this.isdischarged = bean.getIsDischarged();
		this.seenby = bean.getSeenBy() == null ? null : bean.getSeenBy().buildVo();
		this.primarydiagnosis = bean.getPrimaryDiagnosis() == null ? null : bean.getPrimaryDiagnosis().buildVo();
		this.currenttransferrecord = bean.getCurrentTransferRecord() == null ? null : bean.getCurrentTransferRecord().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.TrackingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.currentarea = bean.getCurrentArea() == null ? null : bean.getCurrentArea().buildVo(map);
		this.episode = bean.getEpisode() == null ? null : bean.getEpisode().buildVo(map);
		this.attendance = bean.getAttendance() == null ? null : bean.getAttendance().buildVo(map);
		this.currentreferral = bean.getCurrentReferral() == null ? null : bean.getCurrentReferral().buildVo(map);
		this.triagedetails = bean.getTriageDetails() == null ? null : bean.getTriageDetails().buildVo(map);
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo(map);
		this.edlocation = bean.getEDLocation() == null ? null : bean.getEDLocation().buildVo(map);
		this.currentcubicle = bean.getCurrentCubicle() == null ? null : bean.getCurrentCubicle().buildVo(map);
		this.lastmovementdatetime = bean.getLastMovementDateTime() == null ? null : bean.getLastMovementDateTime().buildDateTime();
		this.bedavailability = bean.getBedAvailability() == null ? null : bean.getBedAvailability().buildVo(map);
		this.currentdnw = bean.getCurrentDNW() == null ? null : bean.getCurrentDNW().buildVo(map);
		this.lastmovementdateinminutes = bean.getLastMovementDateInMinutes();
		this.isdischarged = bean.getIsDischarged();
		this.seenby = bean.getSeenBy() == null ? null : bean.getSeenBy().buildVo(map);
		this.primarydiagnosis = bean.getPrimaryDiagnosis() == null ? null : bean.getPrimaryDiagnosis().buildVo(map);
		this.currenttransferrecord = bean.getCurrentTransferRecord() == null ? null : bean.getCurrentTransferRecord().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.TrackingVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.TrackingVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.TrackingVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("CURRENTAREA"))
			return getCurrentArea();
		if(fieldName.equals("EPISODE"))
			return getEpisode();
		if(fieldName.equals("ATTENDANCE"))
			return getAttendance();
		if(fieldName.equals("CURRENTREFERRAL"))
			return getCurrentReferral();
		if(fieldName.equals("TRIAGEDETAILS"))
			return getTriageDetails();
		if(fieldName.equals("CURRENTSTATUS"))
			return getCurrentStatus();
		if(fieldName.equals("EDLOCATION"))
			return getEDLocation();
		if(fieldName.equals("CURRENTCUBICLE"))
			return getCurrentCubicle();
		if(fieldName.equals("LASTMOVEMENTDATETIME"))
			return getLastMovementDateTime();
		if(fieldName.equals("BEDAVAILABILITY"))
			return getBedAvailability();
		if(fieldName.equals("CURRENTDNW"))
			return getCurrentDNW();
		if(fieldName.equals("LASTMOVEMENTDATEINMINUTES"))
			return getLastMovementDateInMinutes();
		if(fieldName.equals("ISDISCHARGED"))
			return getIsDischarged();
		if(fieldName.equals("SEENBY"))
			return getSeenBy();
		if(fieldName.equals("PRIMARYDIAGNOSIS"))
			return getPrimaryDiagnosis();
		if(fieldName.equals("CURRENTTRANSFERRECORD"))
			return getCurrentTransferRecord();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.emergency.vo.PatientForTrackingVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.emergency.vo.PatientForTrackingVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getCurrentAreaIsNotNull()
	{
		return this.currentarea != null;
	}
	public ims.emergency.vo.TrackingAreaForTrackingLiteVo getCurrentArea()
	{
		return this.currentarea;
	}
	public void setCurrentArea(ims.emergency.vo.TrackingAreaForTrackingLiteVo value)
	{
		this.isValidated = false;
		this.currentarea = value;
	}
	public boolean getEpisodeIsNotNull()
	{
		return this.episode != null;
	}
	public ims.emergency.vo.EmergencyEpisodeForTrackingVo getEpisode()
	{
		return this.episode;
	}
	public void setEpisode(ims.emergency.vo.EmergencyEpisodeForTrackingVo value)
	{
		this.isValidated = false;
		this.episode = value;
	}
	public boolean getAttendanceIsNotNull()
	{
		return this.attendance != null;
	}
	public ims.emergency.vo.EmergencyAttendanceForTrackingVo getAttendance()
	{
		return this.attendance;
	}
	public void setAttendance(ims.emergency.vo.EmergencyAttendanceForTrackingVo value)
	{
		this.isValidated = false;
		this.attendance = value;
	}
	public boolean getCurrentReferralIsNotNull()
	{
		return this.currentreferral != null;
	}
	public ims.emergency.vo.ReferToSpecTeamForTrackingVo getCurrentReferral()
	{
		return this.currentreferral;
	}
	public void setCurrentReferral(ims.emergency.vo.ReferToSpecTeamForTrackingVo value)
	{
		this.isValidated = false;
		this.currentreferral = value;
	}
	public boolean getTriageDetailsIsNotNull()
	{
		return this.triagedetails != null;
	}
	public ims.emergency.vo.TriageForTrackingVo getTriageDetails()
	{
		return this.triagedetails;
	}
	public void setTriageDetails(ims.emergency.vo.TriageForTrackingVo value)
	{
		this.isValidated = false;
		this.triagedetails = value;
	}
	public boolean getCurrentStatusIsNotNull()
	{
		return this.currentstatus != null;
	}
	public ims.emergency.vo.TrackingAttendanceStatusForTrackingVo getCurrentStatus()
	{
		return this.currentstatus;
	}
	public void setCurrentStatus(ims.emergency.vo.TrackingAttendanceStatusForTrackingVo value)
	{
		this.isValidated = false;
		this.currentstatus = value;
	}
	public boolean getEDLocationIsNotNull()
	{
		return this.edlocation != null;
	}
	public ims.core.vo.LocationLiteVo getEDLocation()
	{
		return this.edlocation;
	}
	public void setEDLocation(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.edlocation = value;
	}
	public boolean getCurrentCubicleIsNotNull()
	{
		return this.currentcubicle != null;
	}
	public ims.emergency.vo.CubicleAllocationForTrackingVo getCurrentCubicle()
	{
		return this.currentcubicle;
	}
	public void setCurrentCubicle(ims.emergency.vo.CubicleAllocationForTrackingVo value)
	{
		this.isValidated = false;
		this.currentcubicle = value;
	}
	public boolean getLastMovementDateTimeIsNotNull()
	{
		return this.lastmovementdatetime != null;
	}
	public ims.framework.utils.DateTime getLastMovementDateTime()
	{
		return this.lastmovementdatetime;
	}
	public void setLastMovementDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.lastmovementdatetime = value;
	}
	public boolean getBedAvailabilityIsNotNull()
	{
		return this.bedavailability != null;
	}
	public ims.emergency.vo.BedAvailabilityForTrackingVo getBedAvailability()
	{
		return this.bedavailability;
	}
	public void setBedAvailability(ims.emergency.vo.BedAvailabilityForTrackingVo value)
	{
		this.isValidated = false;
		this.bedavailability = value;
	}
	public boolean getCurrentDNWIsNotNull()
	{
		return this.currentdnw != null;
	}
	public ims.emergency.vo.DNWForTrackingVo getCurrentDNW()
	{
		return this.currentdnw;
	}
	public void setCurrentDNW(ims.emergency.vo.DNWForTrackingVo value)
	{
		this.isValidated = false;
		this.currentdnw = value;
	}
	public boolean getLastMovementDateInMinutesIsNotNull()
	{
		return this.lastmovementdateinminutes != null;
	}
	public Integer getLastMovementDateInMinutes()
	{
		return this.lastmovementdateinminutes;
	}
	public void setLastMovementDateInMinutes(Integer value)
	{
		this.isValidated = false;
		this.lastmovementdateinminutes = value;
	}
	public boolean getIsDischargedIsNotNull()
	{
		return this.isdischarged != null;
	}
	public Boolean getIsDischarged()
	{
		return this.isdischarged;
	}
	public void setIsDischarged(Boolean value)
	{
		this.isValidated = false;
		this.isdischarged = value;
	}
	public boolean getSeenByIsNotNull()
	{
		return this.seenby != null;
	}
	public ims.emergency.vo.SeenByHCPVo getSeenBy()
	{
		return this.seenby;
	}
	public void setSeenBy(ims.emergency.vo.SeenByHCPVo value)
	{
		this.isValidated = false;
		this.seenby = value;
	}
	public boolean getPrimaryDiagnosisIsNotNull()
	{
		return this.primarydiagnosis != null;
	}
	public ims.emergency.vo.PatientDiagnosisForTrackingVo getPrimaryDiagnosis()
	{
		return this.primarydiagnosis;
	}
	public void setPrimaryDiagnosis(ims.emergency.vo.PatientDiagnosisForTrackingVo value)
	{
		this.isValidated = false;
		this.primarydiagnosis = value;
	}
	public boolean getCurrentTransferRecordIsNotNull()
	{
		return this.currenttransferrecord != null;
	}
	public ims.emergency.vo.EDTransferVo getCurrentTransferRecord()
	{
		return this.currenttransferrecord;
	}
	public void setCurrentTransferRecord(ims.emergency.vo.EDTransferVo value)
	{
		this.isValidated = false;
		this.currenttransferrecord = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.patient != null)
		{
			if(!this.patient.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentarea != null)
		{
			if(!this.currentarea.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.episode != null)
		{
			if(!this.episode.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.attendance != null)
		{
			if(!this.attendance.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentreferral != null)
		{
			if(!this.currentreferral.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.triagedetails != null)
		{
			if(!this.triagedetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentstatus != null)
		{
			if(!this.currentstatus.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.seenby != null)
		{
			if(!this.seenby.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.patient != null)
		{
			String[] listOfOtherErrors = this.patient.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentarea != null)
		{
			String[] listOfOtherErrors = this.currentarea.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.episode == null)
			listOfErrors.add("Episode is mandatory");
		if(this.episode != null)
		{
			String[] listOfOtherErrors = this.episode.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.attendance == null)
			listOfErrors.add("Attendance is mandatory");
		if(this.attendance != null)
		{
			String[] listOfOtherErrors = this.attendance.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentreferral != null)
		{
			String[] listOfOtherErrors = this.currentreferral.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.triagedetails != null)
		{
			String[] listOfOtherErrors = this.triagedetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentstatus != null)
		{
			String[] listOfOtherErrors = this.currentstatus.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.edlocation == null)
			listOfErrors.add("EDLocation is mandatory");
		if(this.seenby != null)
		{
			String[] listOfOtherErrors = this.seenby.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		TrackingVo clone = new TrackingVo(this.id, this.version);
		
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.emergency.vo.PatientForTrackingVo)this.patient.clone();
		if(this.currentarea == null)
			clone.currentarea = null;
		else
			clone.currentarea = (ims.emergency.vo.TrackingAreaForTrackingLiteVo)this.currentarea.clone();
		if(this.episode == null)
			clone.episode = null;
		else
			clone.episode = (ims.emergency.vo.EmergencyEpisodeForTrackingVo)this.episode.clone();
		if(this.attendance == null)
			clone.attendance = null;
		else
			clone.attendance = (ims.emergency.vo.EmergencyAttendanceForTrackingVo)this.attendance.clone();
		if(this.currentreferral == null)
			clone.currentreferral = null;
		else
			clone.currentreferral = (ims.emergency.vo.ReferToSpecTeamForTrackingVo)this.currentreferral.clone();
		if(this.triagedetails == null)
			clone.triagedetails = null;
		else
			clone.triagedetails = (ims.emergency.vo.TriageForTrackingVo)this.triagedetails.clone();
		if(this.currentstatus == null)
			clone.currentstatus = null;
		else
			clone.currentstatus = (ims.emergency.vo.TrackingAttendanceStatusForTrackingVo)this.currentstatus.clone();
		if(this.edlocation == null)
			clone.edlocation = null;
		else
			clone.edlocation = (ims.core.vo.LocationLiteVo)this.edlocation.clone();
		if(this.currentcubicle == null)
			clone.currentcubicle = null;
		else
			clone.currentcubicle = (ims.emergency.vo.CubicleAllocationForTrackingVo)this.currentcubicle.clone();
		if(this.lastmovementdatetime == null)
			clone.lastmovementdatetime = null;
		else
			clone.lastmovementdatetime = (ims.framework.utils.DateTime)this.lastmovementdatetime.clone();
		if(this.bedavailability == null)
			clone.bedavailability = null;
		else
			clone.bedavailability = (ims.emergency.vo.BedAvailabilityForTrackingVo)this.bedavailability.clone();
		if(this.currentdnw == null)
			clone.currentdnw = null;
		else
			clone.currentdnw = (ims.emergency.vo.DNWForTrackingVo)this.currentdnw.clone();
		clone.lastmovementdateinminutes = this.lastmovementdateinminutes;
		clone.isdischarged = this.isdischarged;
		if(this.seenby == null)
			clone.seenby = null;
		else
			clone.seenby = (ims.emergency.vo.SeenByHCPVo)this.seenby.clone();
		if(this.primarydiagnosis == null)
			clone.primarydiagnosis = null;
		else
			clone.primarydiagnosis = (ims.emergency.vo.PatientDiagnosisForTrackingVo)this.primarydiagnosis.clone();
		if(this.currenttransferrecord == null)
			clone.currenttransferrecord = null;
		else
			clone.currenttransferrecord = (ims.emergency.vo.EDTransferVo)this.currenttransferrecord.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(TrackingVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A TrackingVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((TrackingVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((TrackingVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.currentarea != null)
			count++;
		if(this.episode != null)
			count++;
		if(this.attendance != null)
			count++;
		if(this.currentreferral != null)
			count++;
		if(this.triagedetails != null)
			count++;
		if(this.currentstatus != null)
			count++;
		if(this.edlocation != null)
			count++;
		if(this.currentcubicle != null)
			count++;
		if(this.lastmovementdatetime != null)
			count++;
		if(this.bedavailability != null)
			count++;
		if(this.currentdnw != null)
			count++;
		if(this.lastmovementdateinminutes != null)
			count++;
		if(this.isdischarged != null)
			count++;
		if(this.seenby != null)
			count++;
		if(this.primarydiagnosis != null)
			count++;
		if(this.currenttransferrecord != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 17;
	}
	protected ims.emergency.vo.PatientForTrackingVo patient;
	protected ims.emergency.vo.TrackingAreaForTrackingLiteVo currentarea;
	protected ims.emergency.vo.EmergencyEpisodeForTrackingVo episode;
	protected ims.emergency.vo.EmergencyAttendanceForTrackingVo attendance;
	protected ims.emergency.vo.ReferToSpecTeamForTrackingVo currentreferral;
	protected ims.emergency.vo.TriageForTrackingVo triagedetails;
	protected ims.emergency.vo.TrackingAttendanceStatusForTrackingVo currentstatus;
	protected ims.core.vo.LocationLiteVo edlocation;
	protected ims.emergency.vo.CubicleAllocationForTrackingVo currentcubicle;
	protected ims.framework.utils.DateTime lastmovementdatetime;
	protected ims.emergency.vo.BedAvailabilityForTrackingVo bedavailability;
	protected ims.emergency.vo.DNWForTrackingVo currentdnw;
	protected Integer lastmovementdateinminutes;
	protected Boolean isdischarged;
	protected ims.emergency.vo.SeenByHCPVo seenby;
	protected ims.emergency.vo.PatientDiagnosisForTrackingVo primarydiagnosis;
	protected ims.emergency.vo.EDTransferVo currenttransferrecord;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
