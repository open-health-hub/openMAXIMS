//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.vo;


public class PasContactVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PasContactVo()
	{
	}
	public PasContactVo(ims.correspondence.vo.beans.PasContactVoBean bean)
	{
		this.contactnumber = bean.getContactNumber();
		this.appointmentdatetime = bean.getAppointmentDateTime() == null ? null : bean.getAppointmentDateTime().buildDateTime();
		this.dischargedatetime = bean.getDischargeDateTime() == null ? null : bean.getDischargeDateTime().buildDateTime();
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo();
		this.location = bean.getLocation() == null ? null : bean.getLocation().buildVo();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.documentstatus = bean.getDocumentStatus() == null ? null : ims.core.vo.lookups.DocumentStatus.buildLookup(bean.getDocumentStatus());
		this.contacttype = bean.getContactType();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.gpcode = bean.getGPCode();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.correspondence.vo.beans.PasContactVoBean bean)
	{
		this.contactnumber = bean.getContactNumber();
		this.appointmentdatetime = bean.getAppointmentDateTime() == null ? null : bean.getAppointmentDateTime().buildDateTime();
		this.dischargedatetime = bean.getDischargeDateTime() == null ? null : bean.getDischargeDateTime().buildDateTime();
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo(map);
		this.location = bean.getLocation() == null ? null : bean.getLocation().buildVo(map);
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.documentstatus = bean.getDocumentStatus() == null ? null : ims.core.vo.lookups.DocumentStatus.buildLookup(bean.getDocumentStatus());
		this.contacttype = bean.getContactType();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.gpcode = bean.getGPCode();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.correspondence.vo.beans.PasContactVoBean bean = null;
		if(map != null)
			bean = (ims.correspondence.vo.beans.PasContactVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.correspondence.vo.beans.PasContactVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getContactNumberIsNotNull()
	{
		return this.contactnumber != null;
	}
	public String getContactNumber()
	{
		return this.contactnumber;
	}
	public static int getContactNumberMaxLength()
	{
		return 255;
	}
	public void setContactNumber(String value)
	{
		this.isValidated = false;
		this.contactnumber = value;
	}
	public boolean getAppointmentDateTimeIsNotNull()
	{
		return this.appointmentdatetime != null;
	}
	public ims.framework.utils.DateTime getAppointmentDateTime()
	{
		return this.appointmentdatetime;
	}
	public void setAppointmentDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.appointmentdatetime = value;
	}
	public boolean getDischargeDateTimeIsNotNull()
	{
		return this.dischargedatetime != null;
	}
	public ims.framework.utils.DateTime getDischargeDateTime()
	{
		return this.dischargedatetime;
	}
	public void setDischargeDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.dischargedatetime = value;
	}
	public boolean getConsultantIsNotNull()
	{
		return this.consultant != null;
	}
	public ims.core.vo.MedicWithMappingsLiteVo getConsultant()
	{
		return this.consultant;
	}
	public void setConsultant(ims.core.vo.MedicWithMappingsLiteVo value)
	{
		this.isValidated = false;
		this.consultant = value;
	}
	public boolean getLocationIsNotNull()
	{
		return this.location != null;
	}
	public ims.core.vo.LocationLiteVo getLocation()
	{
		return this.location;
	}
	public void setLocation(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.location = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.lookups.Specialty getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getDocumentStatusIsNotNull()
	{
		return this.documentstatus != null;
	}
	public ims.core.vo.lookups.DocumentStatus getDocumentStatus()
	{
		return this.documentstatus;
	}
	public void setDocumentStatus(ims.core.vo.lookups.DocumentStatus value)
	{
		this.isValidated = false;
		this.documentstatus = value;
	}
	public boolean getContactTypeIsNotNull()
	{
		return this.contacttype != null;
	}
	public String getContactType()
	{
		return this.contacttype;
	}
	public static int getContactTypeMaxLength()
	{
		return 255;
	}
	public void setContactType(String value)
	{
		this.isValidated = false;
		this.contacttype = value;
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientShort getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientShort value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getGPCodeIsNotNull()
	{
		return this.gpcode != null;
	}
	public String getGPCode()
	{
		return this.gpcode;
	}
	public static int getGPCodeMaxLength()
	{
		return 255;
	}
	public void setGPCode(String value)
	{
		this.isValidated = false;
		this.gpcode = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof PasContactVo))
			return false;
		PasContactVo compareObj = (PasContactVo)obj;
		if(this.getContactNumber() == null && compareObj.getContactNumber() != null)
			return false;
		if(this.getContactNumber() != null && compareObj.getContactNumber() == null)
			return false;
		if(this.getContactNumber() != null && compareObj.getContactNumber() != null)
			return this.getContactNumber().equals(compareObj.getContactNumber());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.consultant != null)
		{
			if(!this.consultant.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.location != null)
		{
			if(!this.location.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.patient != null)
		{
			if(!this.patient.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.consultant != null)
		{
			String[] listOfOtherErrors = this.consultant.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.location != null)
		{
			String[] listOfOtherErrors = this.location.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.patient != null)
		{
			String[] listOfOtherErrors = this.patient.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PasContactVo clone = new PasContactVo();
		
		clone.contactnumber = this.contactnumber;
		if(this.appointmentdatetime == null)
			clone.appointmentdatetime = null;
		else
			clone.appointmentdatetime = (ims.framework.utils.DateTime)this.appointmentdatetime.clone();
		if(this.dischargedatetime == null)
			clone.dischargedatetime = null;
		else
			clone.dischargedatetime = (ims.framework.utils.DateTime)this.dischargedatetime.clone();
		if(this.consultant == null)
			clone.consultant = null;
		else
			clone.consultant = (ims.core.vo.MedicWithMappingsLiteVo)this.consultant.clone();
		if(this.location == null)
			clone.location = null;
		else
			clone.location = (ims.core.vo.LocationLiteVo)this.location.clone();
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		if(this.documentstatus == null)
			clone.documentstatus = null;
		else
			clone.documentstatus = (ims.core.vo.lookups.DocumentStatus)this.documentstatus.clone();
		clone.contacttype = this.contacttype;
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientShort)this.patient.clone();
		clone.gpcode = this.gpcode;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PasContactVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PasContactVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PasContactVo compareObj = (PasContactVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getDischargeDateTime() == null && compareObj.getDischargeDateTime() != null)
				return -1;
			if(this.getDischargeDateTime() != null && compareObj.getDischargeDateTime() == null)
				return 1;
			if(this.getDischargeDateTime() != null && compareObj.getDischargeDateTime() != null)
				retVal = this.getDischargeDateTime().compareTo(compareObj.getDischargeDateTime());
		}
		if (retVal == 0)
		{
			if(this.getAppointmentDateTime() == null && compareObj.getAppointmentDateTime() != null)
				return -1;
			if(this.getAppointmentDateTime() != null && compareObj.getAppointmentDateTime() == null)
				return 1;
			if(this.getAppointmentDateTime() != null && compareObj.getAppointmentDateTime() != null)
				retVal = this.getAppointmentDateTime().compareTo(compareObj.getAppointmentDateTime());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.contactnumber != null)
			count++;
		if(this.appointmentdatetime != null)
			count++;
		if(this.dischargedatetime != null)
			count++;
		if(this.consultant != null)
			count++;
		if(this.location != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.documentstatus != null)
			count++;
		if(this.contacttype != null)
			count++;
		if(this.patient != null)
			count++;
		if(this.gpcode != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected String contactnumber;
	protected ims.framework.utils.DateTime appointmentdatetime;
	protected ims.framework.utils.DateTime dischargedatetime;
	protected ims.core.vo.MedicWithMappingsLiteVo consultant;
	protected ims.core.vo.LocationLiteVo location;
	protected ims.core.vo.lookups.Specialty specialty;
	protected ims.core.vo.lookups.DocumentStatus documentstatus;
	protected String contacttype;
	protected ims.core.vo.PatientShort patient;
	protected String gpcode;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
