//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.CareContext business object (ID: 1004100019).
 */
public class CareContextVo extends ims.core.vo.CareContextShortVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public CareContextVo()
	{
	}
	public CareContextVo(Integer id, int version)
	{
		super(id, version);
	}
	public CareContextVo(ims.core.vo.beans.CareContextVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo();
		this.context = bean.getContext() == null ? null : ims.core.vo.lookups.ContextType.buildLookup(bean.getContext());
		this.episodeofcare = bean.getEpisodeOfCare() == null ? null : bean.getEpisodeOfCare().buildVo();
		this.orderinghospital = bean.getOrderingHospital() == null ? null : new ims.core.resource.place.vo.LocSiteRefVo(new Integer(bean.getOrderingHospital().getId()), bean.getOrderingHospital().getVersion());
		this.estimateddischargedate = bean.getEstimatedDischargeDate() == null ? null : bean.getEstimatedDischargeDate().buildDate();
		this.startdatetime = bean.getStartDateTime() == null ? null : bean.getStartDateTime().buildDateTime();
		this.enddatetime = bean.getEndDateTime() == null ? null : bean.getEndDateTime().buildDateTime();
		this.locationtype = bean.getLocationType() == null ? null : ims.core.vo.lookups.ContactLocation.buildLookup(bean.getLocationType());
		// Interface field type not supported.
		this.clinicalcontacts = ims.core.vo.ClinicalContactShortVoCollection.buildFromBeanCollection(bean.getClinicalContacts());
		this.bednumber = bean.getBedNumber();
		this.dischargereason = bean.getDischargeReason() == null ? null : ims.core.vo.lookups.DischargeReason.buildLookup(bean.getDischargeReason());
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo();
		this.carecontexthistory = ims.core.vo.CareContextHistoryVoCollection.buildFromBeanCollection(bean.getCareContextHistory());
		this.statushistory = ims.core.vo.CareContextStatusHistoryVoCollection.buildFromBeanCollection(bean.getStatusHistory());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.CareContextVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo(map);
		this.context = bean.getContext() == null ? null : ims.core.vo.lookups.ContextType.buildLookup(bean.getContext());
		this.episodeofcare = bean.getEpisodeOfCare() == null ? null : bean.getEpisodeOfCare().buildVo(map);
		this.orderinghospital = bean.getOrderingHospital() == null ? null : new ims.core.resource.place.vo.LocSiteRefVo(new Integer(bean.getOrderingHospital().getId()), bean.getOrderingHospital().getVersion());
		this.estimateddischargedate = bean.getEstimatedDischargeDate() == null ? null : bean.getEstimatedDischargeDate().buildDate();
		this.startdatetime = bean.getStartDateTime() == null ? null : bean.getStartDateTime().buildDateTime();
		this.enddatetime = bean.getEndDateTime() == null ? null : bean.getEndDateTime().buildDateTime();
		this.locationtype = bean.getLocationType() == null ? null : ims.core.vo.lookups.ContactLocation.buildLookup(bean.getLocationType());
		// Interface field type not supported.
		this.clinicalcontacts = ims.core.vo.ClinicalContactShortVoCollection.buildFromBeanCollection(bean.getClinicalContacts());
		this.bednumber = bean.getBedNumber();
		this.dischargereason = bean.getDischargeReason() == null ? null : ims.core.vo.lookups.DischargeReason.buildLookup(bean.getDischargeReason());
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo(map);
		this.carecontexthistory = ims.core.vo.CareContextHistoryVoCollection.buildFromBeanCollection(bean.getCareContextHistory());
		this.statushistory = ims.core.vo.CareContextStatusHistoryVoCollection.buildFromBeanCollection(bean.getStatusHistory());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.CareContextVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.CareContextVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.CareContextVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CLINICALCONTACTS"))
			return getClinicalContacts();
		if(fieldName.equals("BEDNUMBER"))
			return getBedNumber();
		if(fieldName.equals("DISCHARGEREASON"))
			return getDischargeReason();
		if(fieldName.equals("CURRENTSTATUS"))
			return getCurrentStatus();
		if(fieldName.equals("CARECONTEXTHISTORY"))
			return getCareContextHistory();
		if(fieldName.equals("STATUSHISTORY"))
			return getStatusHistory();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getClinicalContactsIsNotNull()
	{
		return this.clinicalcontacts != null;
	}
	public ims.core.vo.ClinicalContactShortVoCollection getClinicalContacts()
	{
		return this.clinicalcontacts;
	}
	public void setClinicalContacts(ims.core.vo.ClinicalContactShortVoCollection value)
	{
		this.isValidated = false;
		this.clinicalcontacts = value;
	}
	public boolean getBedNumberIsNotNull()
	{
		return this.bednumber != null;
	}
	public String getBedNumber()
	{
		return this.bednumber;
	}
	public static int getBedNumberMaxLength()
	{
		return 10;
	}
	public void setBedNumber(String value)
	{
		this.isValidated = false;
		this.bednumber = value;
	}
	public boolean getDischargeReasonIsNotNull()
	{
		return this.dischargereason != null;
	}
	public ims.core.vo.lookups.DischargeReason getDischargeReason()
	{
		return this.dischargereason;
	}
	public void setDischargeReason(ims.core.vo.lookups.DischargeReason value)
	{
		this.isValidated = false;
		this.dischargereason = value;
	}
	public boolean getCurrentStatusIsNotNull()
	{
		return this.currentstatus != null;
	}
	public ims.core.vo.CareContextStatusHistoryVo getCurrentStatus()
	{
		return this.currentstatus;
	}
	public void setCurrentStatus(ims.core.vo.CareContextStatusHistoryVo value)
	{
		this.isValidated = false;
		this.currentstatus = value;
	}
	public boolean getCareContextHistoryIsNotNull()
	{
		return this.carecontexthistory != null;
	}
	public ims.core.vo.CareContextHistoryVoCollection getCareContextHistory()
	{
		return this.carecontexthistory;
	}
	public void setCareContextHistory(ims.core.vo.CareContextHistoryVoCollection value)
	{
		this.isValidated = false;
		this.carecontexthistory = value;
	}
	public boolean getStatusHistoryIsNotNull()
	{
		return this.statushistory != null;
	}
	public ims.core.vo.CareContextStatusHistoryVoCollection getStatusHistory()
	{
		return this.statushistory;
	}
	public void setStatusHistory(ims.core.vo.CareContextStatusHistoryVoCollection value)
	{
		this.isValidated = false;
		this.statushistory = value;
	}
	/**
	* createDisplayString
	*/
	public String createDisplayString()
	{
		String strCareContext = this.getStartDateTimeIsNotNull() ? this.getStartDateTime().toString() : "";
		if (this.getContextIsNotNull())
			if(this.getCurrentStatusIsNotNull()&&ims.core.vo.lookups.CareContextStatus.CANCELLED.equals(  this.getCurrentStatus().getStatus()))
				{
					strCareContext += this.getEndDateTimeIsNotNull() ? " - " + this.getEndDateTime().toString() + " - Cancelled " : " - Cancelled";
				}
				else
				{
					strCareContext += this.getEndDateTimeIsNotNull() ? " - " + this.getEndDateTime().toString() + " - Discharged " : " - Ongoing";
				}
			return strCareContext;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.pasevent != null)
		{
			if(!this.pasevent.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.episodeofcare != null)
		{
			if(!this.episodeofcare.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.clinicalcontacts != null)
		{
			if(!this.clinicalcontacts.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentstatus != null)
		{
			if(!this.currentstatus.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.carecontexthistory != null)
		{
			if(!this.carecontexthistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.statushistory != null)
		{
			if(!this.statushistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.pasevent != null)
		{
			String[] listOfOtherErrors = this.pasevent.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.context == null)
			listOfErrors.add("Context is mandatory");
		if(this.episodeofcare == null)
			listOfErrors.add("EpisodeOfCare is mandatory");
		if(this.episodeofcare != null)
		{
			String[] listOfOtherErrors = this.episodeofcare.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.startdatetime == null)
			listOfErrors.add("Start Date for 'Care Context' is mandatory.");
		if(this.clinicalcontacts != null)
		{
			String[] listOfOtherErrors = this.clinicalcontacts.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.bednumber != null)
			if(this.bednumber.length() > 10)
				listOfErrors.add("The length of the field [bednumber] in the value object [ims.core.vo.CareContextVo] is too big. It should be less or equal to 10");
		if(this.currentstatus != null)
		{
			String[] listOfOtherErrors = this.currentstatus.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.carecontexthistory != null)
		{
			String[] listOfOtherErrors = this.carecontexthistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.statushistory != null)
		{
			String[] listOfOtherErrors = this.statushistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		CareContextVo clone = new CareContextVo(this.id, this.version);
		
		if(this.pasevent == null)
			clone.pasevent = null;
		else
			clone.pasevent = (ims.core.vo.PasEventVo)this.pasevent.clone();
		if(this.context == null)
			clone.context = null;
		else
			clone.context = (ims.core.vo.lookups.ContextType)this.context.clone();
		if(this.episodeofcare == null)
			clone.episodeofcare = null;
		else
			clone.episodeofcare = (ims.core.vo.EpisodeofCareLiteVo)this.episodeofcare.clone();
		clone.orderinghospital = this.orderinghospital;
		if(this.estimateddischargedate == null)
			clone.estimateddischargedate = null;
		else
			clone.estimateddischargedate = (ims.framework.utils.Date)this.estimateddischargedate.clone();
		if(this.startdatetime == null)
			clone.startdatetime = null;
		else
			clone.startdatetime = (ims.framework.utils.DateTime)this.startdatetime.clone();
		if(this.enddatetime == null)
			clone.enddatetime = null;
		else
			clone.enddatetime = (ims.framework.utils.DateTime)this.enddatetime.clone();
		if(this.locationtype == null)
			clone.locationtype = null;
		else
			clone.locationtype = (ims.core.vo.lookups.ContactLocation)this.locationtype.clone();
		clone.responsiblehcp = this.responsiblehcp;
		if(this.clinicalcontacts == null)
			clone.clinicalcontacts = null;
		else
			clone.clinicalcontacts = (ims.core.vo.ClinicalContactShortVoCollection)this.clinicalcontacts.clone();
		clone.bednumber = this.bednumber;
		if(this.dischargereason == null)
			clone.dischargereason = null;
		else
			clone.dischargereason = (ims.core.vo.lookups.DischargeReason)this.dischargereason.clone();
		if(this.currentstatus == null)
			clone.currentstatus = null;
		else
			clone.currentstatus = (ims.core.vo.CareContextStatusHistoryVo)this.currentstatus.clone();
		if(this.carecontexthistory == null)
			clone.carecontexthistory = null;
		else
			clone.carecontexthistory = (ims.core.vo.CareContextHistoryVoCollection)this.carecontexthistory.clone();
		if(this.statushistory == null)
			clone.statushistory = null;
		else
			clone.statushistory = (ims.core.vo.CareContextStatusHistoryVoCollection)this.statushistory.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(CareContextVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A CareContextVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		CareContextVo compareObj = (CareContextVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getStartDateTime() == null && compareObj.getStartDateTime() != null)
				return -1;
			if(this.getStartDateTime() != null && compareObj.getStartDateTime() == null)
				return 1;
			if(this.getStartDateTime() != null && compareObj.getStartDateTime() != null)
				retVal = this.getStartDateTime().compareTo(compareObj.getStartDateTime());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.clinicalcontacts != null)
			count++;
		if(this.bednumber != null)
			count++;
		if(this.dischargereason != null)
			count++;
		if(this.currentstatus != null)
			count++;
		if(this.carecontexthistory != null)
			count++;
		if(this.statushistory != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 6;
	}
	protected ims.core.vo.ClinicalContactShortVoCollection clinicalcontacts;
	protected String bednumber;
	protected ims.core.vo.lookups.DischargeReason dischargereason;
	protected ims.core.vo.CareContextStatusHistoryVo currentstatus;
	protected ims.core.vo.CareContextHistoryVoCollection carecontexthistory;
	protected ims.core.vo.CareContextStatusHistoryVoCollection statushistory;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
