//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.configuration.DrawingGroup business object (ID: 1021100007).
 */
public class DrawingGroupVo extends ims.core.configuration.vo.DrawingGroupRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public DrawingGroupVo()
	{
	}
	public DrawingGroupVo(Integer id, int version)
	{
		super(id, version);
	}
	public DrawingGroupVo(ims.core.vo.beans.DrawingGroupVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.groupid = bean.getGroupID();
		this.groupname = bean.getGroupName();
		this.areacollection = ims.core.vo.DrawingAreaVoCollection.buildFromBeanCollection(bean.getAreaCollection());
		this.childgroups = ims.core.vo.DrawingGroupVoCollection.buildFromBeanCollection(bean.getChildGroups());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.DrawingGroupVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.groupid = bean.getGroupID();
		this.groupname = bean.getGroupName();
		this.areacollection = ims.core.vo.DrawingAreaVoCollection.buildFromBeanCollection(bean.getAreaCollection());
		this.childgroups = ims.core.vo.DrawingGroupVoCollection.buildFromBeanCollection(bean.getChildGroups());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.DrawingGroupVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.DrawingGroupVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.DrawingGroupVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("GROUPID"))
			return getGroupID();
		if(fieldName.equals("GROUPNAME"))
			return getGroupName();
		if(fieldName.equals("AREACOLLECTION"))
			return getAreaCollection();
		if(fieldName.equals("CHILDGROUPS"))
			return getChildGroups();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getGroupIDIsNotNull()
	{
		return this.groupid != null;
	}
	public Integer getGroupID()
	{
		return this.groupid;
	}
	public void setGroupID(Integer value)
	{
		this.isValidated = false;
		this.groupid = value;
	}
	public boolean getGroupNameIsNotNull()
	{
		return this.groupname != null;
	}
	public String getGroupName()
	{
		return this.groupname;
	}
	public static int getGroupNameMaxLength()
	{
		return 150;
	}
	public void setGroupName(String value)
	{
		this.isValidated = false;
		this.groupname = value;
	}
	public boolean getAreaCollectionIsNotNull()
	{
		return this.areacollection != null;
	}
	public ims.core.vo.DrawingAreaVoCollection getAreaCollection()
	{
		return this.areacollection;
	}
	public void setAreaCollection(ims.core.vo.DrawingAreaVoCollection value)
	{
		this.isValidated = false;
		this.areacollection = value;
	}
	public boolean getChildGroupsIsNotNull()
	{
		return this.childgroups != null;
	}
	public ims.core.vo.DrawingGroupVoCollection getChildGroups()
	{
		return this.childgroups;
	}
	public void setChildGroups(ims.core.vo.DrawingGroupVoCollection value)
	{
		this.isValidated = false;
		this.childgroups = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.areacollection != null)
		{
			if(!this.areacollection.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.childgroups != null)
		{
			if(!this.childgroups.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.groupid == null)
			listOfErrors.add("Invalid Group ID");
		if(this.groupname == null || this.groupname.length() == 0)
			listOfErrors.add("Invalid Group ID");
		else if(this.groupname.length() > 150)
			listOfErrors.add("The length of the field [groupname] in the value object [ims.core.vo.DrawingGroupVo] is too big. It should be less or equal to 150");
		if(this.areacollection != null)
		{
			String[] listOfOtherErrors = this.areacollection.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.childgroups != null)
		{
			String[] listOfOtherErrors = this.childgroups.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		DrawingGroupVo clone = new DrawingGroupVo(this.id, this.version);
		
		clone.groupid = this.groupid;
		clone.groupname = this.groupname;
		if(this.areacollection == null)
			clone.areacollection = null;
		else
			clone.areacollection = (ims.core.vo.DrawingAreaVoCollection)this.areacollection.clone();
		if(this.childgroups == null)
			clone.childgroups = null;
		else
			clone.childgroups = (ims.core.vo.DrawingGroupVoCollection)this.childgroups.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(DrawingGroupVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A DrawingGroupVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		DrawingGroupVo compareObj = (DrawingGroupVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getGroupName() == null && compareObj.getGroupName() != null)
				return -1;
			if(this.getGroupName() != null && compareObj.getGroupName() == null)
				return 1;
			if(this.getGroupName() != null && compareObj.getGroupName() != null)
			{
				if(caseInsensitive)
					retVal = this.getGroupName().toLowerCase().compareTo(compareObj.getGroupName().toLowerCase());
				else
					retVal = this.getGroupName().compareTo(compareObj.getGroupName());
			}
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.groupid != null)
			count++;
		if(this.groupname != null)
			count++;
		if(this.areacollection != null)
			count++;
		if(this.childgroups != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 4;
	}
	protected Integer groupid;
	protected String groupname;
	protected ims.core.vo.DrawingAreaVoCollection areacollection;
	protected ims.core.vo.DrawingGroupVoCollection childgroups;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
