//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.patient.PatientId business object (ID: 1001100004).
 */
public class PatientId extends ims.core.patient.vo.PatientIdRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientId()
	{
	}
	public PatientId(Integer id, int version)
	{
		super(id, version);
	}
	public PatientId(ims.core.vo.beans.PatientIdBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.type = bean.getType() == null ? null : ims.core.vo.lookups.PatIdType.buildLookup(bean.getType());
		this.idvalue = bean.getIdValue();
		this.verified = bean.getVerified();
		this.merged = bean.getMerged();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PatientIdBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.type = bean.getType() == null ? null : ims.core.vo.lookups.PatIdType.buildLookup(bean.getType());
		this.idvalue = bean.getIdValue();
		this.verified = bean.getVerified();
		this.merged = bean.getMerged();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PatientIdBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PatientIdBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PatientIdBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("TYPE"))
			return getType();
		if(fieldName.equals("IDVALUE"))
			return getIdValue();
		if(fieldName.equals("VERIFIED"))
			return getVerified();
		if(fieldName.equals("MERGED"))
			return getMerged();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getTypeIsNotNull()
	{
		return this.type != null;
	}
	public ims.core.vo.lookups.PatIdType getType()
	{
		return this.type;
	}
	public void setType(ims.core.vo.lookups.PatIdType value)
	{
		this.isValidated = false;
		this.type = value;
	}
	public boolean getIdValueIsNotNull()
	{
		return this.idvalue != null;
	}
	public String getIdValue()
	{
		return this.idvalue;
	}
	public static int getIdValueMaxLength()
	{
		return 50;
	}
	public void setIdValue(String value)
	{
		this.isValidated = false;
		this.idvalue = value;
	}
	public boolean getVerifiedIsNotNull()
	{
		return this.verified != null;
	}
	public Boolean getVerified()
	{
		return this.verified;
	}
	public void setVerified(Boolean value)
	{
		this.isValidated = false;
		this.verified = value;
	}
	public boolean getMergedIsNotNull()
	{
		return this.merged != null;
	}
	public Boolean getMerged()
	{
		return this.merged;
	}
	public void setMerged(Boolean value)
	{
		this.isValidated = false;
		this.merged = value;
	}
	/**
	* getValue
	*/
	public String getValue()
	{
		if (this.type != null
			&& this.type.equals(ims.core.vo.lookups.PatIdType.NHSN))
		{
			java.lang.StringBuffer sb = new java.lang.StringBuffer("");
			String str = this.idvalue.replace(" ", "");
			if ( str.length() > 6)
			{
				sb.append(str.substring(0, 3));
				sb.append(" ");
				sb.append(str.substring(3, 6));
				sb.append(" ");
				sb.append(str.substring(6));
					
				return sb.toString();
			}			
			else
				return this.idvalue;
		}
		else
			return this.idvalue;
	}
	
	/**
	* setValue
	*/
	public void setValue(String value)
	{
		this.idvalue= value;
	}
	/**
	* getValueIsNotNull
	*/
	public boolean getValueIsNotNull()
	{
		return this.idvalue != null;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.idvalue != null)
			if(this.idvalue.length() > 50)
				listOfErrors.add("The length of the field [idvalue] in the value object [ims.core.vo.PatientId] is too big. It should be less or equal to 50");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientId clone = new PatientId(this.id, this.version);
		
		if(this.type == null)
			clone.type = null;
		else
			clone.type = (ims.core.vo.lookups.PatIdType)this.type.clone();
		clone.idvalue = this.idvalue;
		clone.verified = this.verified;
		clone.merged = this.merged;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientId.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientId object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PatientId compareObj = (PatientId)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getType() == null && compareObj.getType() != null)
				return -1;
			if(this.getType() != null && compareObj.getType() == null)
				return 1;
			if(this.getType() != null && compareObj.getType() != null)
				retVal = this.getType().compareTo(compareObj.getType());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.type != null)
			count++;
		if(this.idvalue != null)
			count++;
		if(this.verified != null)
			count++;
		if(this.merged != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 4;
	}
	protected ims.core.vo.lookups.PatIdType type;
	protected String idvalue;
	protected Boolean verified;
	protected Boolean merged;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
