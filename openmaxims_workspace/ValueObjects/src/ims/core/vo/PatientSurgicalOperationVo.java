//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.clinical.PatientProcedure business object (ID: 1003100017).
 */
public class PatientSurgicalOperationVo extends ims.core.vo.PatientProcedureVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientSurgicalOperationVo()
	{
	}
	public PatientSurgicalOperationVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientSurgicalOperationVo(ims.core.vo.beans.PatientSurgicalOperationVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.procedure = bean.getProcedure() == null ? null : bean.getProcedure().buildVo();
		this.proceduredescription = bean.getProcedureDescription();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.infosource = bean.getInfoSource() == null ? null : ims.core.vo.lookups.SourceofInformation.buildLookup(bean.getInfoSource());
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo();
		this.procdate = bean.getProcDate() == null ? null : bean.getProcDate().buildPartialDate();
		this.includeindischargeletter = bean.getIncludeInDischargeLetter();
		this.sitetext = bean.getSiteText();
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.procedurestatus = bean.getProcedureStatus() == null ? null : ims.core.vo.lookups.PatientProcedureStatus.buildLookup(bean.getProcedureStatus());
		this.proctime = bean.getProcTime() == null ? null : bean.getProcTime().buildTime();
		this.episodeofcare = bean.getEpisodeOfCare() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisodeOfCare().getId()), bean.getEpisodeOfCare().getVersion());
		this.isprimary = bean.getIsPrimary();
		this.notes = bean.getNotes();
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.procedureurgency = bean.getProcedureUrgency() == null ? null : ims.core.vo.lookups.ProcedureUrgency.buildLookup(bean.getProcedureUrgency());
		this.procedureoutcome = bean.getProcedureOutcome() == null ? null : ims.clinical.vo.lookups.PatientProcedureOutcome.buildLookup(bean.getProcedureOutcome());
		this.dateplanned = bean.getDatePlanned() == null ? null : bean.getDatePlanned().buildPartialDate();
		this.plannedproc = bean.getPlannedProc() == null ? null : new ims.core.clinical.vo.PatientProcedureRefVo(new Integer(bean.getPlannedProc().getId()), bean.getPlannedProc().getVersion());
		this.procsite = bean.getProcSite() == null ? null : ims.core.vo.lookups.MedicalHistoryProcedureSite.buildLookup(bean.getProcSite());
		// Interface field type not supported.
		this.procedureintent = bean.getProcedureIntent() == null ? null : ims.core.vo.lookups.ProcedureIntent.buildLookup(bean.getProcedureIntent());
		this.location = bean.getLocation();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.confirmedstatus = bean.getConfirmedStatus() == null ? null : ims.core.vo.lookups.ConfirmedStatus.buildLookup(bean.getConfirmedStatus());
		this.confirmedby = bean.getConfirmedBy() == null ? null : bean.getConfirmedBy().buildVo();
		this.confirmeddatetime = bean.getConfirmedDateTime() == null ? null : bean.getConfirmedDateTime().buildDateTime();
		this.excludefromothers = bean.getExcludeFromOthers();
		this.hcppresent = ims.core.vo.HcpLiteVoCollection.buildFromBeanCollection(bean.getHCPPresent());
		this.inserteddevices = ims.core.vo.PatientCharacteristicVoCollection.buildFromBeanCollection(bean.getInsertedDevices());
		this.removeddevices = ims.core.vo.PatientCharacteristicVoCollection.buildFromBeanCollection(bean.getRemovedDevices());
		this.assocclinicalnote = bean.getAssocClinicalNote();
		this.proclocation = bean.getProcLocation() == null ? null : ims.core.vo.lookups.ProcedureLocation.buildLookup(bean.getProcLocation());
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo();
		this.ispmh = bean.getIsPMH();
		this.cancelleddate = bean.getCancelledDate() == null ? null : bean.getCancelledDate().buildDate();
		this.cancelledreason = bean.getCancelledReason();
		this.surgeonsgrade = bean.getSurgeonsGrade() == null ? null : ims.core.vo.lookups.MedicGrade.buildLookup(bean.getSurgeonsGrade());
		this.procenddate = bean.getProcEndDate() == null ? null : bean.getProcEndDate().buildPartialDate();
		this.procendtime = bean.getProcEndTime() == null ? null : bean.getProcEndTime().buildTime();
		this.signifproc = bean.getSignifProc();
		this.intraoperativerecord = bean.getIntraOperativeRecord() == null ? null : bean.getIntraOperativeRecord().buildVo();
		this.assistants = ims.core.vo.HcpLiteVoCollection.buildFromBeanCollection(bean.getAssistants());
		this.nurse = bean.getNurse() == null ? null : bean.getNurse().buildVo();
		this.anaesthetist = bean.getAnaesthetist() == null ? null : bean.getAnaesthetist().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PatientSurgicalOperationVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.procedure = bean.getProcedure() == null ? null : bean.getProcedure().buildVo(map);
		this.proceduredescription = bean.getProcedureDescription();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.infosource = bean.getInfoSource() == null ? null : ims.core.vo.lookups.SourceofInformation.buildLookup(bean.getInfoSource());
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo(map);
		this.procdate = bean.getProcDate() == null ? null : bean.getProcDate().buildPartialDate();
		this.includeindischargeletter = bean.getIncludeInDischargeLetter();
		this.sitetext = bean.getSiteText();
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.procedurestatus = bean.getProcedureStatus() == null ? null : ims.core.vo.lookups.PatientProcedureStatus.buildLookup(bean.getProcedureStatus());
		this.proctime = bean.getProcTime() == null ? null : bean.getProcTime().buildTime();
		this.episodeofcare = bean.getEpisodeOfCare() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisodeOfCare().getId()), bean.getEpisodeOfCare().getVersion());
		this.isprimary = bean.getIsPrimary();
		this.notes = bean.getNotes();
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.procedureurgency = bean.getProcedureUrgency() == null ? null : ims.core.vo.lookups.ProcedureUrgency.buildLookup(bean.getProcedureUrgency());
		this.procedureoutcome = bean.getProcedureOutcome() == null ? null : ims.clinical.vo.lookups.PatientProcedureOutcome.buildLookup(bean.getProcedureOutcome());
		this.dateplanned = bean.getDatePlanned() == null ? null : bean.getDatePlanned().buildPartialDate();
		this.plannedproc = bean.getPlannedProc() == null ? null : new ims.core.clinical.vo.PatientProcedureRefVo(new Integer(bean.getPlannedProc().getId()), bean.getPlannedProc().getVersion());
		this.procsite = bean.getProcSite() == null ? null : ims.core.vo.lookups.MedicalHistoryProcedureSite.buildLookup(bean.getProcSite());
		// Interface field type not supported.
		this.procedureintent = bean.getProcedureIntent() == null ? null : ims.core.vo.lookups.ProcedureIntent.buildLookup(bean.getProcedureIntent());
		this.location = bean.getLocation();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.confirmedstatus = bean.getConfirmedStatus() == null ? null : ims.core.vo.lookups.ConfirmedStatus.buildLookup(bean.getConfirmedStatus());
		this.confirmedby = bean.getConfirmedBy() == null ? null : bean.getConfirmedBy().buildVo(map);
		this.confirmeddatetime = bean.getConfirmedDateTime() == null ? null : bean.getConfirmedDateTime().buildDateTime();
		this.excludefromothers = bean.getExcludeFromOthers();
		this.hcppresent = ims.core.vo.HcpLiteVoCollection.buildFromBeanCollection(bean.getHCPPresent());
		this.inserteddevices = ims.core.vo.PatientCharacteristicVoCollection.buildFromBeanCollection(bean.getInsertedDevices());
		this.removeddevices = ims.core.vo.PatientCharacteristicVoCollection.buildFromBeanCollection(bean.getRemovedDevices());
		this.assocclinicalnote = bean.getAssocClinicalNote();
		this.proclocation = bean.getProcLocation() == null ? null : ims.core.vo.lookups.ProcedureLocation.buildLookup(bean.getProcLocation());
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo(map);
		this.ispmh = bean.getIsPMH();
		this.cancelleddate = bean.getCancelledDate() == null ? null : bean.getCancelledDate().buildDate();
		this.cancelledreason = bean.getCancelledReason();
		this.surgeonsgrade = bean.getSurgeonsGrade() == null ? null : ims.core.vo.lookups.MedicGrade.buildLookup(bean.getSurgeonsGrade());
		this.procenddate = bean.getProcEndDate() == null ? null : bean.getProcEndDate().buildPartialDate();
		this.procendtime = bean.getProcEndTime() == null ? null : bean.getProcEndTime().buildTime();
		this.signifproc = bean.getSignifProc();
		this.intraoperativerecord = bean.getIntraOperativeRecord() == null ? null : bean.getIntraOperativeRecord().buildVo(map);
		this.assistants = ims.core.vo.HcpLiteVoCollection.buildFromBeanCollection(bean.getAssistants());
		this.nurse = bean.getNurse() == null ? null : bean.getNurse().buildVo(map);
		this.anaesthetist = bean.getAnaesthetist() == null ? null : bean.getAnaesthetist().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PatientSurgicalOperationVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PatientSurgicalOperationVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PatientSurgicalOperationVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("ASSISTANTS"))
			return getAssistants();
		if(fieldName.equals("NURSE"))
			return getNurse();
		if(fieldName.equals("ANAESTHETIST"))
			return getAnaesthetist();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAssistantsIsNotNull()
	{
		return this.assistants != null;
	}
	public ims.core.vo.HcpLiteVoCollection getAssistants()
	{
		return this.assistants;
	}
	public void setAssistants(ims.core.vo.HcpLiteVoCollection value)
	{
		this.isValidated = false;
		this.assistants = value;
	}
	public boolean getNurseIsNotNull()
	{
		return this.nurse != null;
	}
	public ims.core.vo.HcpLiteVo getNurse()
	{
		return this.nurse;
	}
	public void setNurse(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.nurse = value;
	}
	public boolean getAnaesthetistIsNotNull()
	{
		return this.anaesthetist != null;
	}
	public ims.core.vo.HcpLiteVo getAnaesthetist()
	{
		return this.anaesthetist;
	}
	public void setAnaesthetist(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.anaesthetist = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.procedure != null)
		{
			if(!this.procedure.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.confirmedby != null)
		{
			if(!this.confirmedby.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.hcppresent != null)
		{
			if(!this.hcppresent.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.inserteddevices != null)
		{
			if(!this.inserteddevices.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.removeddevices != null)
		{
			if(!this.removeddevices.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.assistants != null)
		{
			if(!this.assistants.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.nurse != null)
		{
			if(!this.nurse.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.anaesthetist != null)
		{
			if(!this.anaesthetist.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.procedure != null)
		{
			String[] listOfOtherErrors = this.procedure.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.proceduredescription == null || this.proceduredescription.length() == 0)
			listOfErrors.add("ProcedureDescription is mandatory");
		else if(this.proceduredescription.length() > 255)
			listOfErrors.add("The length of the field [proceduredescription] in the value object [ims.core.vo.PatientSurgicalOperationVo] is too big. It should be less or equal to 255");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.infosource == null)
			listOfErrors.add("InfoSource is mandatory");
		if(this.sitetext != null)
			if(this.sitetext.length() > 255)
				listOfErrors.add("The length of the field [sitetext] in the value object [ims.core.vo.PatientSurgicalOperationVo] is too big. It should be less or equal to 255");
		if(this.episodeofcare == null)
			listOfErrors.add("EpisodeOfCare is mandatory");
		if(this.notes != null)
			if(this.notes.length() > 500)
				listOfErrors.add("The length of the field [notes] in the value object [ims.core.vo.PatientSurgicalOperationVo] is too big. It should be less or equal to 500");
		if(this.location != null)
			if(this.location.length() > 255)
				listOfErrors.add("The length of the field [location] in the value object [ims.core.vo.PatientSurgicalOperationVo] is too big. It should be less or equal to 255");
		if(this.confirmedby != null)
		{
			String[] listOfOtherErrors = this.confirmedby.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.hcppresent != null)
		{
			String[] listOfOtherErrors = this.hcppresent.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.inserteddevices != null)
		{
			String[] listOfOtherErrors = this.inserteddevices.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.removeddevices != null)
		{
			String[] listOfOtherErrors = this.removeddevices.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.cancelledreason != null)
			if(this.cancelledreason.length() > 255)
				listOfErrors.add("The length of the field [cancelledreason] in the value object [ims.core.vo.PatientSurgicalOperationVo] is too big. It should be less or equal to 255");
		if(this.assistants != null)
		{
			String[] listOfOtherErrors = this.assistants.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.nurse != null)
		{
			String[] listOfOtherErrors = this.nurse.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.anaesthetist != null)
		{
			String[] listOfOtherErrors = this.anaesthetist.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientSurgicalOperationVo clone = new PatientSurgicalOperationVo(this.id, this.version);
		
		if(this.procedure == null)
			clone.procedure = null;
		else
			clone.procedure = (ims.core.vo.ProcedureLiteVo)this.procedure.clone();
		clone.proceduredescription = this.proceduredescription;
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		if(this.infosource == null)
			clone.infosource = null;
		else
			clone.infosource = (ims.core.vo.lookups.SourceofInformation)this.infosource.clone();
		if(this.carecontext == null)
			clone.carecontext = null;
		else
			clone.carecontext = (ims.core.vo.CareContextLiteVo)this.carecontext.clone();
		if(this.procdate == null)
			clone.procdate = null;
		else
			clone.procdate = (ims.framework.utils.PartialDate)this.procdate.clone();
		clone.includeindischargeletter = this.includeindischargeletter;
		clone.sitetext = this.sitetext;
		if(this.proclaterality == null)
			clone.proclaterality = null;
		else
			clone.proclaterality = (ims.core.vo.lookups.LateralityLRB)this.proclaterality.clone();
		if(this.procedurestatus == null)
			clone.procedurestatus = null;
		else
			clone.procedurestatus = (ims.core.vo.lookups.PatientProcedureStatus)this.procedurestatus.clone();
		if(this.proctime == null)
			clone.proctime = null;
		else
			clone.proctime = (ims.framework.utils.Time)this.proctime.clone();
		clone.episodeofcare = this.episodeofcare;
		clone.isprimary = this.isprimary;
		clone.notes = this.notes;
		if(this.sysinfo == null)
			clone.sysinfo = null;
		else
			clone.sysinfo = (ims.vo.SystemInformation)this.sysinfo.clone();
		if(this.procedureurgency == null)
			clone.procedureurgency = null;
		else
			clone.procedureurgency = (ims.core.vo.lookups.ProcedureUrgency)this.procedureurgency.clone();
		if(this.procedureoutcome == null)
			clone.procedureoutcome = null;
		else
			clone.procedureoutcome = (ims.clinical.vo.lookups.PatientProcedureOutcome)this.procedureoutcome.clone();
		if(this.dateplanned == null)
			clone.dateplanned = null;
		else
			clone.dateplanned = (ims.framework.utils.PartialDate)this.dateplanned.clone();
		clone.plannedproc = this.plannedproc;
		if(this.procsite == null)
			clone.procsite = null;
		else
			clone.procsite = (ims.core.vo.lookups.MedicalHistoryProcedureSite)this.procsite.clone();
		clone.peformedby = this.peformedby;
		if(this.procedureintent == null)
			clone.procedureintent = null;
		else
			clone.procedureintent = (ims.core.vo.lookups.ProcedureIntent)this.procedureintent.clone();
		clone.location = this.location;
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		if(this.confirmedstatus == null)
			clone.confirmedstatus = null;
		else
			clone.confirmedstatus = (ims.core.vo.lookups.ConfirmedStatus)this.confirmedstatus.clone();
		if(this.confirmedby == null)
			clone.confirmedby = null;
		else
			clone.confirmedby = (ims.core.vo.Hcp)this.confirmedby.clone();
		if(this.confirmeddatetime == null)
			clone.confirmeddatetime = null;
		else
			clone.confirmeddatetime = (ims.framework.utils.DateTime)this.confirmeddatetime.clone();
		clone.excludefromothers = this.excludefromothers;
		if(this.hcppresent == null)
			clone.hcppresent = null;
		else
			clone.hcppresent = (ims.core.vo.HcpLiteVoCollection)this.hcppresent.clone();
		if(this.inserteddevices == null)
			clone.inserteddevices = null;
		else
			clone.inserteddevices = (ims.core.vo.PatientCharacteristicVoCollection)this.inserteddevices.clone();
		if(this.removeddevices == null)
			clone.removeddevices = null;
		else
			clone.removeddevices = (ims.core.vo.PatientCharacteristicVoCollection)this.removeddevices.clone();
		clone.assocclinicalnote = this.assocclinicalnote;
		if(this.proclocation == null)
			clone.proclocation = null;
		else
			clone.proclocation = (ims.core.vo.lookups.ProcedureLocation)this.proclocation.clone();
		if(this.clinicalcontact == null)
			clone.clinicalcontact = null;
		else
			clone.clinicalcontact = (ims.core.vo.ClinicalContactShortVo)this.clinicalcontact.clone();
		clone.ispmh = this.ispmh;
		if(this.cancelleddate == null)
			clone.cancelleddate = null;
		else
			clone.cancelleddate = (ims.framework.utils.Date)this.cancelleddate.clone();
		clone.cancelledreason = this.cancelledreason;
		if(this.surgeonsgrade == null)
			clone.surgeonsgrade = null;
		else
			clone.surgeonsgrade = (ims.core.vo.lookups.MedicGrade)this.surgeonsgrade.clone();
		if(this.procenddate == null)
			clone.procenddate = null;
		else
			clone.procenddate = (ims.framework.utils.PartialDate)this.procenddate.clone();
		if(this.procendtime == null)
			clone.procendtime = null;
		else
			clone.procendtime = (ims.framework.utils.Time)this.procendtime.clone();
		clone.signifproc = this.signifproc;
		if(this.intraoperativerecord == null)
			clone.intraoperativerecord = null;
		else
			clone.intraoperativerecord = (ims.clinical.vo.IntraOperativeCareRecordMinVo)this.intraoperativerecord.clone();
		if(this.assistants == null)
			clone.assistants = null;
		else
			clone.assistants = (ims.core.vo.HcpLiteVoCollection)this.assistants.clone();
		if(this.nurse == null)
			clone.nurse = null;
		else
			clone.nurse = (ims.core.vo.HcpLiteVo)this.nurse.clone();
		if(this.anaesthetist == null)
			clone.anaesthetist = null;
		else
			clone.anaesthetist = (ims.core.vo.HcpLiteVo)this.anaesthetist.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientSurgicalOperationVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientSurgicalOperationVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PatientSurgicalOperationVo compareObj = (PatientSurgicalOperationVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_PatientProcedure() == null && compareObj.getID_PatientProcedure() != null)
				return -1;
			if(this.getID_PatientProcedure() != null && compareObj.getID_PatientProcedure() == null)
				return 1;
			if(this.getID_PatientProcedure() != null && compareObj.getID_PatientProcedure() != null)
				retVal = this.getID_PatientProcedure().compareTo(compareObj.getID_PatientProcedure());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.assistants != null)
			count++;
		if(this.nurse != null)
			count++;
		if(this.anaesthetist != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 3;
	}
	protected ims.core.vo.HcpLiteVoCollection assistants;
	protected ims.core.vo.HcpLiteVo nurse;
	protected ims.core.vo.HcpLiteVo anaesthetist;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
