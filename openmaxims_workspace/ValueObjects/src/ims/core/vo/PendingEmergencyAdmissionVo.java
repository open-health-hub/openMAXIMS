//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.PendingEmergencyAdmission business object (ID: 1014100011).
 */
public class PendingEmergencyAdmissionVo extends ims.core.admin.pas.vo.PendingEmergencyAdmissionRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PendingEmergencyAdmissionVo()
	{
	}
	public PendingEmergencyAdmissionVo(Integer id, int version)
	{
		super(id, version);
	}
	public PendingEmergencyAdmissionVo(ims.core.vo.beans.PendingEmergencyAdmissionVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : new ims.core.admin.pas.vo.PASEventRefVo(new Integer(bean.getPasEvent().getId()), bean.getPasEvent().getVersion());
		this.admissionstatus = bean.getAdmissionStatus() == null ? null : ims.core.vo.lookups.EmergencyAdmissionStatus.buildLookup(bean.getAdmissionStatus());
		this.reasonforadmission = bean.getReasonForAdmission();
		this.dtadatetime = bean.getDTADateTime() == null ? null : bean.getDTADateTime().buildDateTime();
		this.conclusiondate = bean.getConclusionDate() == null ? null : bean.getConclusionDate().buildDateTime();
		this.currentlocation = bean.getCurrentLocation() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getCurrentLocation().getId()), bean.getCurrentLocation().getVersion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PendingEmergencyAdmissionVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : new ims.core.admin.pas.vo.PASEventRefVo(new Integer(bean.getPasEvent().getId()), bean.getPasEvent().getVersion());
		this.admissionstatus = bean.getAdmissionStatus() == null ? null : ims.core.vo.lookups.EmergencyAdmissionStatus.buildLookup(bean.getAdmissionStatus());
		this.reasonforadmission = bean.getReasonForAdmission();
		this.dtadatetime = bean.getDTADateTime() == null ? null : bean.getDTADateTime().buildDateTime();
		this.conclusiondate = bean.getConclusionDate() == null ? null : bean.getConclusionDate().buildDateTime();
		this.currentlocation = bean.getCurrentLocation() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getCurrentLocation().getId()), bean.getCurrentLocation().getVersion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PendingEmergencyAdmissionVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PendingEmergencyAdmissionVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PendingEmergencyAdmissionVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PASEVENT"))
			return getPasEvent();
		if(fieldName.equals("ADMISSIONSTATUS"))
			return getAdmissionStatus();
		if(fieldName.equals("REASONFORADMISSION"))
			return getReasonForAdmission();
		if(fieldName.equals("DTADATETIME"))
			return getDTADateTime();
		if(fieldName.equals("CONCLUSIONDATE"))
			return getConclusionDate();
		if(fieldName.equals("CURRENTLOCATION"))
			return getCurrentLocation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPasEventIsNotNull()
	{
		return this.pasevent != null;
	}
	public ims.core.admin.pas.vo.PASEventRefVo getPasEvent()
	{
		return this.pasevent;
	}
	public void setPasEvent(ims.core.admin.pas.vo.PASEventRefVo value)
	{
		this.isValidated = false;
		this.pasevent = value;
	}
	public boolean getAdmissionStatusIsNotNull()
	{
		return this.admissionstatus != null;
	}
	public ims.core.vo.lookups.EmergencyAdmissionStatus getAdmissionStatus()
	{
		return this.admissionstatus;
	}
	public void setAdmissionStatus(ims.core.vo.lookups.EmergencyAdmissionStatus value)
	{
		this.isValidated = false;
		this.admissionstatus = value;
	}
	public boolean getReasonForAdmissionIsNotNull()
	{
		return this.reasonforadmission != null;
	}
	public String getReasonForAdmission()
	{
		return this.reasonforadmission;
	}
	public static int getReasonForAdmissionMaxLength()
	{
		return 1500;
	}
	public void setReasonForAdmission(String value)
	{
		this.isValidated = false;
		this.reasonforadmission = value;
	}
	public boolean getDTADateTimeIsNotNull()
	{
		return this.dtadatetime != null;
	}
	public ims.framework.utils.DateTime getDTADateTime()
	{
		return this.dtadatetime;
	}
	public void setDTADateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.dtadatetime = value;
	}
	public boolean getConclusionDateIsNotNull()
	{
		return this.conclusiondate != null;
	}
	public ims.framework.utils.DateTime getConclusionDate()
	{
		return this.conclusiondate;
	}
	public void setConclusionDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.conclusiondate = value;
	}
	public boolean getCurrentLocationIsNotNull()
	{
		return this.currentlocation != null;
	}
	public ims.core.resource.place.vo.LocationRefVo getCurrentLocation()
	{
		return this.currentlocation;
	}
	public void setCurrentLocation(ims.core.resource.place.vo.LocationRefVo value)
	{
		this.isValidated = false;
		this.currentlocation = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.reasonforadmission != null)
			if(this.reasonforadmission.length() > 1500)
				listOfErrors.add("The length of the field [reasonforadmission] in the value object [ims.core.vo.PendingEmergencyAdmissionVo] is too big. It should be less or equal to 1500");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PendingEmergencyAdmissionVo clone = new PendingEmergencyAdmissionVo(this.id, this.version);
		
		clone.pasevent = this.pasevent;
		if(this.admissionstatus == null)
			clone.admissionstatus = null;
		else
			clone.admissionstatus = (ims.core.vo.lookups.EmergencyAdmissionStatus)this.admissionstatus.clone();
		clone.reasonforadmission = this.reasonforadmission;
		if(this.dtadatetime == null)
			clone.dtadatetime = null;
		else
			clone.dtadatetime = (ims.framework.utils.DateTime)this.dtadatetime.clone();
		if(this.conclusiondate == null)
			clone.conclusiondate = null;
		else
			clone.conclusiondate = (ims.framework.utils.DateTime)this.conclusiondate.clone();
		clone.currentlocation = this.currentlocation;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PendingEmergencyAdmissionVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PendingEmergencyAdmissionVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PendingEmergencyAdmissionVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PendingEmergencyAdmissionVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.pasevent != null)
			count++;
		if(this.admissionstatus != null)
			count++;
		if(this.reasonforadmission != null)
			count++;
		if(this.dtadatetime != null)
			count++;
		if(this.conclusiondate != null)
			count++;
		if(this.currentlocation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.core.admin.pas.vo.PASEventRefVo pasevent;
	protected ims.core.vo.lookups.EmergencyAdmissionStatus admissionstatus;
	protected String reasonforadmission;
	protected ims.framework.utils.DateTime dtadatetime;
	protected ims.framework.utils.DateTime conclusiondate;
	protected ims.core.resource.place.vo.LocationRefVo currentlocation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
