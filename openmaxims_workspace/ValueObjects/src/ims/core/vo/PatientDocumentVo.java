//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.Documents.PatientDocument business object (ID: 1068100001).
 */
public class PatientDocumentVo extends ims.core.documents.vo.PatientDocumentRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientDocumentVo()
	{
	}
	public PatientDocumentVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientDocumentVo(ims.core.vo.beans.PatientDocumentVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episodeofcare = bean.getEpisodeofCare() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisodeofCare().getId()), bean.getEpisodeofCare().getVersion());
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.referral = bean.getReferral() == null ? null : new ims.core.admin.vo.ReferralRefVo(new Integer(bean.getReferral().getId()), bean.getReferral().getVersion());
		this.name = bean.getName();
		this.serverdocument = bean.getServerDocument() == null ? null : bean.getServerDocument().buildVo();
		this.creationtype = bean.getCreationType() == null ? null : ims.core.vo.lookups.DocumentCreationType.buildLookup(bean.getCreationType());
		this.category = bean.getCategory() == null ? null : ims.core.vo.lookups.DocumentCategory.buildLookup(bean.getCategory());
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.PreActiveActiveInactiveStatus.buildLookup(bean.getStatus());
		this.recordinguser = bean.getRecordingUser() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getRecordingUser().getId()), bean.getRecordingUser().getVersion());
		this.recordingdatetime = bean.getRecordingDateTime() == null ? null : bean.getRecordingDateTime().buildDateTime();
		this.authoringhcp = bean.getAuthoringHCP() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getAuthoringHCP().getId()), bean.getAuthoringHCP().getVersion());
		this.authoringdatetime = bean.getAuthoringDateTime() == null ? null : bean.getAuthoringDateTime().buildDateTime();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.correspondencestatus = bean.getCorrespondenceStatus() == null ? null : ims.core.vo.lookups.DocumentStatus.buildLookup(bean.getCorrespondenceStatus());
		this.currentdocumentstatus = bean.getCurrentDocumentStatus() == null ? null : bean.getCurrentDocumentStatus().buildVo();
		this.documentstatushistory = ims.core.vo.PatientDocumentStatusVoCollection.buildFromBeanCollection(bean.getDocumentStatusHistory());
		this.documentdate = bean.getDocumentDate() == null ? null : bean.getDocumentDate().buildDate();
		this.clinic = bean.getClinic() == null ? null : new ims.core.resource.place.vo.ClinicRefVo(new Integer(bean.getClinic().getId()), bean.getClinic().getVersion());
		this.islockedforediting = bean.getIsLockedForEditing();
		this.lockedbyuser = bean.getLockedByUser() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getLockedByUser().getId()), bean.getLockedByUser().getVersion());
		this.lockedondatetime = bean.getLockedOnDateTime() == null ? null : bean.getLockedOnDateTime().buildDateTime();
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getResponsibleHCP().getId()), bean.getResponsibleHCP().getVersion());
		this.noofcopies = bean.getNoOfCopies();
		this.historicalfilename = bean.getHistoricalFileName();
		this.historicdocid = bean.getHistoricDocId();
		if(bean.getServices() != null)
		{
			this.services = new ims.core.clinical.vo.ServiceRefVoCollection();
			for(int services_i = 0; services_i < bean.getServices().length; services_i++)
			{
				this.services.add(new ims.core.clinical.vo.ServiceRefVo(new Integer(bean.getServices()[services_i].getId()), bean.getServices()[services_i].getVersion()));
			}
		}
		this.wasprinted = bean.getWasPrinted();
		this.emailstatus = bean.getEmailStatus() == null ? null : ims.core.vo.lookups.DocumentEmailStatus.buildLookup(bean.getEmailStatus());
		this.copypatientoncorrespondence = bean.getCopyPatientOnCorrespondence();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PatientDocumentVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episodeofcare = bean.getEpisodeofCare() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisodeofCare().getId()), bean.getEpisodeofCare().getVersion());
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.referral = bean.getReferral() == null ? null : new ims.core.admin.vo.ReferralRefVo(new Integer(bean.getReferral().getId()), bean.getReferral().getVersion());
		this.name = bean.getName();
		this.serverdocument = bean.getServerDocument() == null ? null : bean.getServerDocument().buildVo(map);
		this.creationtype = bean.getCreationType() == null ? null : ims.core.vo.lookups.DocumentCreationType.buildLookup(bean.getCreationType());
		this.category = bean.getCategory() == null ? null : ims.core.vo.lookups.DocumentCategory.buildLookup(bean.getCategory());
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.PreActiveActiveInactiveStatus.buildLookup(bean.getStatus());
		this.recordinguser = bean.getRecordingUser() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getRecordingUser().getId()), bean.getRecordingUser().getVersion());
		this.recordingdatetime = bean.getRecordingDateTime() == null ? null : bean.getRecordingDateTime().buildDateTime();
		this.authoringhcp = bean.getAuthoringHCP() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getAuthoringHCP().getId()), bean.getAuthoringHCP().getVersion());
		this.authoringdatetime = bean.getAuthoringDateTime() == null ? null : bean.getAuthoringDateTime().buildDateTime();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.correspondencestatus = bean.getCorrespondenceStatus() == null ? null : ims.core.vo.lookups.DocumentStatus.buildLookup(bean.getCorrespondenceStatus());
		this.currentdocumentstatus = bean.getCurrentDocumentStatus() == null ? null : bean.getCurrentDocumentStatus().buildVo(map);
		this.documentstatushistory = ims.core.vo.PatientDocumentStatusVoCollection.buildFromBeanCollection(bean.getDocumentStatusHistory());
		this.documentdate = bean.getDocumentDate() == null ? null : bean.getDocumentDate().buildDate();
		this.clinic = bean.getClinic() == null ? null : new ims.core.resource.place.vo.ClinicRefVo(new Integer(bean.getClinic().getId()), bean.getClinic().getVersion());
		this.islockedforediting = bean.getIsLockedForEditing();
		this.lockedbyuser = bean.getLockedByUser() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getLockedByUser().getId()), bean.getLockedByUser().getVersion());
		this.lockedondatetime = bean.getLockedOnDateTime() == null ? null : bean.getLockedOnDateTime().buildDateTime();
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getResponsibleHCP().getId()), bean.getResponsibleHCP().getVersion());
		this.noofcopies = bean.getNoOfCopies();
		this.historicalfilename = bean.getHistoricalFileName();
		this.historicdocid = bean.getHistoricDocId();
		if(bean.getServices() != null)
		{
			this.services = new ims.core.clinical.vo.ServiceRefVoCollection();
			for(int services_i = 0; services_i < bean.getServices().length; services_i++)
			{
				this.services.add(new ims.core.clinical.vo.ServiceRefVo(new Integer(bean.getServices()[services_i].getId()), bean.getServices()[services_i].getVersion()));
			}
		}
		this.wasprinted = bean.getWasPrinted();
		this.emailstatus = bean.getEmailStatus() == null ? null : ims.core.vo.lookups.DocumentEmailStatus.buildLookup(bean.getEmailStatus());
		this.copypatientoncorrespondence = bean.getCopyPatientOnCorrespondence();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PatientDocumentVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PatientDocumentVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PatientDocumentVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("EPISODEOFCARE"))
			return getEpisodeofCare();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("CLINICALCONTACT"))
			return getClinicalContact();
		if(fieldName.equals("REFERRAL"))
			return getReferral();
		if(fieldName.equals("NAME"))
			return getName();
		if(fieldName.equals("SERVERDOCUMENT"))
			return getServerDocument();
		if(fieldName.equals("CREATIONTYPE"))
			return getCreationType();
		if(fieldName.equals("CATEGORY"))
			return getCategory();
		if(fieldName.equals("STATUS"))
			return getStatus();
		if(fieldName.equals("RECORDINGUSER"))
			return getRecordingUser();
		if(fieldName.equals("RECORDINGDATETIME"))
			return getRecordingDateTime();
		if(fieldName.equals("AUTHORINGHCP"))
			return getAuthoringHCP();
		if(fieldName.equals("AUTHORINGDATETIME"))
			return getAuthoringDateTime();
		if(fieldName.equals("SPECIALTY"))
			return getSpecialty();
		if(fieldName.equals("CORRESPONDENCESTATUS"))
			return getCorrespondenceStatus();
		if(fieldName.equals("CURRENTDOCUMENTSTATUS"))
			return getCurrentDocumentStatus();
		if(fieldName.equals("DOCUMENTSTATUSHISTORY"))
			return getDocumentStatusHistory();
		if(fieldName.equals("DOCUMENTDATE"))
			return getDocumentDate();
		if(fieldName.equals("CLINIC"))
			return getClinic();
		if(fieldName.equals("ISLOCKEDFOREDITING"))
			return getIsLockedForEditing();
		if(fieldName.equals("LOCKEDBYUSER"))
			return getLockedByUser();
		if(fieldName.equals("LOCKEDONDATETIME"))
			return getLockedOnDateTime();
		if(fieldName.equals("RESPONSIBLEHCP"))
			return getResponsibleHCP();
		if(fieldName.equals("NOOFCOPIES"))
			return getNoOfCopies();
		if(fieldName.equals("HISTORICALFILENAME"))
			return getHistoricalFileName();
		if(fieldName.equals("HISTORICDOCID"))
			return getHistoricDocId();
		if(fieldName.equals("SERVICES"))
			return getServices();
		if(fieldName.equals("WASPRINTED"))
			return getWasPrinted();
		if(fieldName.equals("EMAILSTATUS"))
			return getEmailStatus();
		if(fieldName.equals("COPYPATIENTONCORRESPONDENCE"))
			return getCopyPatientOnCorrespondence();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getEpisodeofCareIsNotNull()
	{
		return this.episodeofcare != null;
	}
	public ims.core.admin.vo.EpisodeOfCareRefVo getEpisodeofCare()
	{
		return this.episodeofcare;
	}
	public void setEpisodeofCare(ims.core.admin.vo.EpisodeOfCareRefVo value)
	{
		this.isValidated = false;
		this.episodeofcare = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.admin.vo.CareContextRefVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getClinicalContactIsNotNull()
	{
		return this.clinicalcontact != null;
	}
	public ims.core.admin.vo.ClinicalContactRefVo getClinicalContact()
	{
		return this.clinicalcontact;
	}
	public void setClinicalContact(ims.core.admin.vo.ClinicalContactRefVo value)
	{
		this.isValidated = false;
		this.clinicalcontact = value;
	}
	public boolean getReferralIsNotNull()
	{
		return this.referral != null;
	}
	public ims.core.admin.vo.ReferralRefVo getReferral()
	{
		return this.referral;
	}
	public void setReferral(ims.core.admin.vo.ReferralRefVo value)
	{
		this.isValidated = false;
		this.referral = value;
	}
	public boolean getNameIsNotNull()
	{
		return this.name != null;
	}
	public String getName()
	{
		return this.name;
	}
	public static int getNameMaxLength()
	{
		return 100;
	}
	public void setName(String value)
	{
		this.isValidated = false;
		this.name = value;
	}
	public boolean getServerDocumentIsNotNull()
	{
		return this.serverdocument != null;
	}
	public ims.core.vo.ServerDocumentVo getServerDocument()
	{
		return this.serverdocument;
	}
	public void setServerDocument(ims.core.vo.ServerDocumentVo value)
	{
		this.isValidated = false;
		this.serverdocument = value;
	}
	public boolean getCreationTypeIsNotNull()
	{
		return this.creationtype != null;
	}
	public ims.core.vo.lookups.DocumentCreationType getCreationType()
	{
		return this.creationtype;
	}
	public void setCreationType(ims.core.vo.lookups.DocumentCreationType value)
	{
		this.isValidated = false;
		this.creationtype = value;
	}
	public boolean getCategoryIsNotNull()
	{
		return this.category != null;
	}
	public ims.core.vo.lookups.DocumentCategory getCategory()
	{
		return this.category;
	}
	public void setCategory(ims.core.vo.lookups.DocumentCategory value)
	{
		this.isValidated = false;
		this.category = value;
	}
	public boolean getStatusIsNotNull()
	{
		return this.status != null;
	}
	public ims.core.vo.lookups.PreActiveActiveInactiveStatus getStatus()
	{
		return this.status;
	}
	public void setStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
	{
		this.isValidated = false;
		this.status = value;
	}
	public boolean getRecordingUserIsNotNull()
	{
		return this.recordinguser != null;
	}
	public ims.core.resource.people.vo.MemberOfStaffRefVo getRecordingUser()
	{
		return this.recordinguser;
	}
	public void setRecordingUser(ims.core.resource.people.vo.MemberOfStaffRefVo value)
	{
		this.isValidated = false;
		this.recordinguser = value;
	}
	public boolean getRecordingDateTimeIsNotNull()
	{
		return this.recordingdatetime != null;
	}
	public ims.framework.utils.DateTime getRecordingDateTime()
	{
		return this.recordingdatetime;
	}
	public void setRecordingDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.recordingdatetime = value;
	}
	public boolean getAuthoringHCPIsNotNull()
	{
		return this.authoringhcp != null;
	}
	public ims.core.resource.people.vo.HcpRefVo getAuthoringHCP()
	{
		return this.authoringhcp;
	}
	public void setAuthoringHCP(ims.core.resource.people.vo.HcpRefVo value)
	{
		this.isValidated = false;
		this.authoringhcp = value;
	}
	public boolean getAuthoringDateTimeIsNotNull()
	{
		return this.authoringdatetime != null;
	}
	public ims.framework.utils.DateTime getAuthoringDateTime()
	{
		return this.authoringdatetime;
	}
	public void setAuthoringDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.authoringdatetime = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.lookups.Specialty getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getCorrespondenceStatusIsNotNull()
	{
		return this.correspondencestatus != null;
	}
	public ims.core.vo.lookups.DocumentStatus getCorrespondenceStatus()
	{
		return this.correspondencestatus;
	}
	public void setCorrespondenceStatus(ims.core.vo.lookups.DocumentStatus value)
	{
		this.isValidated = false;
		this.correspondencestatus = value;
	}
	public boolean getCurrentDocumentStatusIsNotNull()
	{
		return this.currentdocumentstatus != null;
	}
	public ims.core.vo.PatientDocumentStatusVo getCurrentDocumentStatus()
	{
		return this.currentdocumentstatus;
	}
	public void setCurrentDocumentStatus(ims.core.vo.PatientDocumentStatusVo value)
	{
		this.isValidated = false;
		this.currentdocumentstatus = value;
	}
	public boolean getDocumentStatusHistoryIsNotNull()
	{
		return this.documentstatushistory != null;
	}
	public ims.core.vo.PatientDocumentStatusVoCollection getDocumentStatusHistory()
	{
		return this.documentstatushistory;
	}
	public void setDocumentStatusHistory(ims.core.vo.PatientDocumentStatusVoCollection value)
	{
		this.isValidated = false;
		this.documentstatushistory = value;
	}
	public boolean getDocumentDateIsNotNull()
	{
		return this.documentdate != null;
	}
	public ims.framework.utils.Date getDocumentDate()
	{
		return this.documentdate;
	}
	public void setDocumentDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.documentdate = value;
	}
	public boolean getClinicIsNotNull()
	{
		return this.clinic != null;
	}
	public ims.core.resource.place.vo.ClinicRefVo getClinic()
	{
		return this.clinic;
	}
	public void setClinic(ims.core.resource.place.vo.ClinicRefVo value)
	{
		this.isValidated = false;
		this.clinic = value;
	}
	public boolean getIsLockedForEditingIsNotNull()
	{
		return this.islockedforediting != null;
	}
	public Boolean getIsLockedForEditing()
	{
		return this.islockedforediting;
	}
	public void setIsLockedForEditing(Boolean value)
	{
		this.isValidated = false;
		this.islockedforediting = value;
	}
	public boolean getLockedByUserIsNotNull()
	{
		return this.lockedbyuser != null;
	}
	public ims.core.resource.people.vo.MemberOfStaffRefVo getLockedByUser()
	{
		return this.lockedbyuser;
	}
	public void setLockedByUser(ims.core.resource.people.vo.MemberOfStaffRefVo value)
	{
		this.isValidated = false;
		this.lockedbyuser = value;
	}
	public boolean getLockedOnDateTimeIsNotNull()
	{
		return this.lockedondatetime != null;
	}
	public ims.framework.utils.DateTime getLockedOnDateTime()
	{
		return this.lockedondatetime;
	}
	public void setLockedOnDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.lockedondatetime = value;
	}
	public boolean getResponsibleHCPIsNotNull()
	{
		return this.responsiblehcp != null;
	}
	public ims.core.resource.people.vo.HcpRefVo getResponsibleHCP()
	{
		return this.responsiblehcp;
	}
	public void setResponsibleHCP(ims.core.resource.people.vo.HcpRefVo value)
	{
		this.isValidated = false;
		this.responsiblehcp = value;
	}
	public boolean getNoOfCopiesIsNotNull()
	{
		return this.noofcopies != null;
	}
	public Integer getNoOfCopies()
	{
		return this.noofcopies;
	}
	public void setNoOfCopies(Integer value)
	{
		this.isValidated = false;
		this.noofcopies = value;
	}
	public boolean getHistoricalFileNameIsNotNull()
	{
		return this.historicalfilename != null;
	}
	public String getHistoricalFileName()
	{
		return this.historicalfilename;
	}
	public static int getHistoricalFileNameMaxLength()
	{
		return 255;
	}
	public void setHistoricalFileName(String value)
	{
		this.isValidated = false;
		this.historicalfilename = value;
	}
	public boolean getHistoricDocIdIsNotNull()
	{
		return this.historicdocid != null;
	}
	public Integer getHistoricDocId()
	{
		return this.historicdocid;
	}
	public void setHistoricDocId(Integer value)
	{
		this.isValidated = false;
		this.historicdocid = value;
	}
	public boolean getServicesIsNotNull()
	{
		return this.services != null;
	}
	public ims.core.clinical.vo.ServiceRefVoCollection getServices()
	{
		return this.services;
	}
	public void setServices(ims.core.clinical.vo.ServiceRefVoCollection value)
	{
		this.isValidated = false;
		this.services = value;
	}
	public boolean getWasPrintedIsNotNull()
	{
		return this.wasprinted != null;
	}
	public Boolean getWasPrinted()
	{
		return this.wasprinted;
	}
	public void setWasPrinted(Boolean value)
	{
		this.isValidated = false;
		this.wasprinted = value;
	}
	public boolean getEmailStatusIsNotNull()
	{
		return this.emailstatus != null;
	}
	public ims.core.vo.lookups.DocumentEmailStatus getEmailStatus()
	{
		return this.emailstatus;
	}
	public void setEmailStatus(ims.core.vo.lookups.DocumentEmailStatus value)
	{
		this.isValidated = false;
		this.emailstatus = value;
	}
	public boolean getCopyPatientOnCorrespondenceIsNotNull()
	{
		return this.copypatientoncorrespondence != null;
	}
	public Boolean getCopyPatientOnCorrespondence()
	{
		return this.copypatientoncorrespondence;
	}
	public void setCopyPatientOnCorrespondence(Boolean value)
	{
		this.isValidated = false;
		this.copypatientoncorrespondence = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.serverdocument != null)
		{
			if(!this.serverdocument.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentdocumentstatus != null)
		{
			if(!this.currentdocumentstatus.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.documentstatushistory != null)
		{
			if(!this.documentstatushistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.name == null || this.name.length() == 0)
			listOfErrors.add("Name is mandatory");
		else if(this.name.length() > 100)
			listOfErrors.add("The length of the field [name] in the value object [ims.core.vo.PatientDocumentVo] is too big. It should be less or equal to 100");
		if(this.serverdocument == null)
			listOfErrors.add("ServerDocument is mandatory");
		if(this.serverdocument != null)
		{
			String[] listOfOtherErrors = this.serverdocument.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.category == null)
			listOfErrors.add("Category is mandatory");
		if(this.status == null)
			listOfErrors.add("Status is mandatory");
		if(this.recordingdatetime == null)
			listOfErrors.add("RecordingDateTime is mandatory");
		if(this.currentdocumentstatus != null)
		{
			String[] listOfOtherErrors = this.currentdocumentstatus.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.documentstatushistory != null)
		{
			String[] listOfOtherErrors = this.documentstatushistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.historicalfilename != null)
			if(this.historicalfilename.length() > 255)
				listOfErrors.add("The length of the field [historicalfilename] in the value object [ims.core.vo.PatientDocumentVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientDocumentVo clone = new PatientDocumentVo(this.id, this.version);
		
		clone.patient = this.patient;
		clone.episodeofcare = this.episodeofcare;
		clone.carecontext = this.carecontext;
		clone.clinicalcontact = this.clinicalcontact;
		clone.referral = this.referral;
		clone.name = this.name;
		if(this.serverdocument == null)
			clone.serverdocument = null;
		else
			clone.serverdocument = (ims.core.vo.ServerDocumentVo)this.serverdocument.clone();
		if(this.creationtype == null)
			clone.creationtype = null;
		else
			clone.creationtype = (ims.core.vo.lookups.DocumentCreationType)this.creationtype.clone();
		if(this.category == null)
			clone.category = null;
		else
			clone.category = (ims.core.vo.lookups.DocumentCategory)this.category.clone();
		if(this.status == null)
			clone.status = null;
		else
			clone.status = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)this.status.clone();
		clone.recordinguser = this.recordinguser;
		if(this.recordingdatetime == null)
			clone.recordingdatetime = null;
		else
			clone.recordingdatetime = (ims.framework.utils.DateTime)this.recordingdatetime.clone();
		clone.authoringhcp = this.authoringhcp;
		if(this.authoringdatetime == null)
			clone.authoringdatetime = null;
		else
			clone.authoringdatetime = (ims.framework.utils.DateTime)this.authoringdatetime.clone();
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		if(this.correspondencestatus == null)
			clone.correspondencestatus = null;
		else
			clone.correspondencestatus = (ims.core.vo.lookups.DocumentStatus)this.correspondencestatus.clone();
		if(this.currentdocumentstatus == null)
			clone.currentdocumentstatus = null;
		else
			clone.currentdocumentstatus = (ims.core.vo.PatientDocumentStatusVo)this.currentdocumentstatus.clone();
		if(this.documentstatushistory == null)
			clone.documentstatushistory = null;
		else
			clone.documentstatushistory = (ims.core.vo.PatientDocumentStatusVoCollection)this.documentstatushistory.clone();
		if(this.documentdate == null)
			clone.documentdate = null;
		else
			clone.documentdate = (ims.framework.utils.Date)this.documentdate.clone();
		clone.clinic = this.clinic;
		clone.islockedforediting = this.islockedforediting;
		clone.lockedbyuser = this.lockedbyuser;
		if(this.lockedondatetime == null)
			clone.lockedondatetime = null;
		else
			clone.lockedondatetime = (ims.framework.utils.DateTime)this.lockedondatetime.clone();
		clone.responsiblehcp = this.responsiblehcp;
		clone.noofcopies = this.noofcopies;
		clone.historicalfilename = this.historicalfilename;
		clone.historicdocid = this.historicdocid;
		clone.services = this.services;
		clone.wasprinted = this.wasprinted;
		if(this.emailstatus == null)
			clone.emailstatus = null;
		else
			clone.emailstatus = (ims.core.vo.lookups.DocumentEmailStatus)this.emailstatus.clone();
		clone.copypatientoncorrespondence = this.copypatientoncorrespondence;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientDocumentVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientDocumentVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientDocumentVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientDocumentVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.episodeofcare != null)
			count++;
		if(this.carecontext != null)
			count++;
		if(this.clinicalcontact != null)
			count++;
		if(this.referral != null)
			count++;
		if(this.name != null)
			count++;
		if(this.serverdocument != null)
			count++;
		if(this.creationtype != null)
			count++;
		if(this.category != null)
			count++;
		if(this.status != null)
			count++;
		if(this.recordinguser != null)
			count++;
		if(this.recordingdatetime != null)
			count++;
		if(this.authoringhcp != null)
			count++;
		if(this.authoringdatetime != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.correspondencestatus != null)
			count++;
		if(this.currentdocumentstatus != null)
			count++;
		if(this.documentstatushistory != null)
			count++;
		if(this.documentdate != null)
			count++;
		if(this.clinic != null)
			count++;
		if(this.islockedforediting != null)
			count++;
		if(this.lockedbyuser != null)
			count++;
		if(this.lockedondatetime != null)
			count++;
		if(this.responsiblehcp != null)
			count++;
		if(this.noofcopies != null)
			count++;
		if(this.historicalfilename != null)
			count++;
		if(this.historicdocid != null)
			count++;
		if(this.services != null)
			count++;
		if(this.wasprinted != null)
			count++;
		if(this.emailstatus != null)
			count++;
		if(this.copypatientoncorrespondence != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 31;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.core.admin.vo.EpisodeOfCareRefVo episodeofcare;
	protected ims.core.admin.vo.CareContextRefVo carecontext;
	protected ims.core.admin.vo.ClinicalContactRefVo clinicalcontact;
	protected ims.core.admin.vo.ReferralRefVo referral;
	protected String name;
	protected ims.core.vo.ServerDocumentVo serverdocument;
	protected ims.core.vo.lookups.DocumentCreationType creationtype;
	protected ims.core.vo.lookups.DocumentCategory category;
	protected ims.core.vo.lookups.PreActiveActiveInactiveStatus status;
	protected ims.core.resource.people.vo.MemberOfStaffRefVo recordinguser;
	protected ims.framework.utils.DateTime recordingdatetime;
	protected ims.core.resource.people.vo.HcpRefVo authoringhcp;
	protected ims.framework.utils.DateTime authoringdatetime;
	protected ims.core.vo.lookups.Specialty specialty;
	protected ims.core.vo.lookups.DocumentStatus correspondencestatus;
	protected ims.core.vo.PatientDocumentStatusVo currentdocumentstatus;
	protected ims.core.vo.PatientDocumentStatusVoCollection documentstatushistory;
	protected ims.framework.utils.Date documentdate;
	protected ims.core.resource.place.vo.ClinicRefVo clinic;
	protected Boolean islockedforediting;
	protected ims.core.resource.people.vo.MemberOfStaffRefVo lockedbyuser;
	protected ims.framework.utils.DateTime lockedondatetime;
	protected ims.core.resource.people.vo.HcpRefVo responsiblehcp;
	protected Integer noofcopies;
	protected String historicalfilename;
	protected Integer historicdocid;
	protected ims.core.clinical.vo.ServiceRefVoCollection services;
	protected Boolean wasprinted;
	protected ims.core.vo.lookups.DocumentEmailStatus emailstatus;
	protected Boolean copypatientoncorrespondence;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
