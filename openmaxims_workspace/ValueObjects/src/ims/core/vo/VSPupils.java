//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.vitals.Pupils business object (ID: 1022100009).
 */
public class VSPupils extends ims.core.vitals.vo.PupilsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public VSPupils()
	{
	}
	public VSPupils(Integer id, int version)
	{
		super(id, version);
	}
	public VSPupils(ims.core.vo.beans.VSPupilsBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pupilleftsize = bean.getPupilLeftSize();
		this.pupilleftreaction = bean.getPupilLeftReaction() == null ? null : ims.core.vo.lookups.VSPupilReaction.buildLookup(bean.getPupilLeftReaction());
		this.pupilrightsize = bean.getPupilRightSize();
		this.pupilrightreaction = bean.getPupilRightReaction() == null ? null : ims.core.vo.lookups.VSPupilReaction.buildLookup(bean.getPupilRightReaction());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.VSPupilsBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pupilleftsize = bean.getPupilLeftSize();
		this.pupilleftreaction = bean.getPupilLeftReaction() == null ? null : ims.core.vo.lookups.VSPupilReaction.buildLookup(bean.getPupilLeftReaction());
		this.pupilrightsize = bean.getPupilRightSize();
		this.pupilrightreaction = bean.getPupilRightReaction() == null ? null : ims.core.vo.lookups.VSPupilReaction.buildLookup(bean.getPupilRightReaction());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.VSPupilsBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.VSPupilsBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.VSPupilsBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PUPILLEFTSIZE"))
			return getPupilLeftSize();
		if(fieldName.equals("PUPILLEFTREACTION"))
			return getPupilLeftReaction();
		if(fieldName.equals("PUPILRIGHTSIZE"))
			return getPupilRightSize();
		if(fieldName.equals("PUPILRIGHTREACTION"))
			return getPupilRightReaction();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPupilLeftSizeIsNotNull()
	{
		return this.pupilleftsize != null;
	}
	public Integer getPupilLeftSize()
	{
		return this.pupilleftsize;
	}
	public void setPupilLeftSize(Integer value)
	{
		this.isValidated = false;
		this.pupilleftsize = value;
	}
	public boolean getPupilLeftReactionIsNotNull()
	{
		return this.pupilleftreaction != null;
	}
	public ims.core.vo.lookups.VSPupilReaction getPupilLeftReaction()
	{
		return this.pupilleftreaction;
	}
	public void setPupilLeftReaction(ims.core.vo.lookups.VSPupilReaction value)
	{
		this.isValidated = false;
		this.pupilleftreaction = value;
	}
	public boolean getPupilRightSizeIsNotNull()
	{
		return this.pupilrightsize != null;
	}
	public Integer getPupilRightSize()
	{
		return this.pupilrightsize;
	}
	public void setPupilRightSize(Integer value)
	{
		this.isValidated = false;
		this.pupilrightsize = value;
	}
	public boolean getPupilRightReactionIsNotNull()
	{
		return this.pupilrightreaction != null;
	}
	public ims.core.vo.lookups.VSPupilReaction getPupilRightReaction()
	{
		return this.pupilrightreaction;
	}
	public void setPupilRightReaction(ims.core.vo.lookups.VSPupilReaction value)
	{
		this.isValidated = false;
		this.pupilrightreaction = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.pupilleftsize != null && (this.pupilleftsize.intValue() < 1 || this.pupilleftsize.intValue() > 8))
			listOfErrors.add("The Left Pupil has an invalid value. The valid range of values is between 1 and 8");
		if(this.pupilrightsize != null && (this.pupilrightsize.intValue() < 1 || this.pupilrightsize.intValue() > 8))
			listOfErrors.add("The Right Pupil has an invalid value. The valid range of values is between 1 and 8");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		VSPupils clone = new VSPupils(this.id, this.version);
		
		clone.pupilleftsize = this.pupilleftsize;
		if(this.pupilleftreaction == null)
			clone.pupilleftreaction = null;
		else
			clone.pupilleftreaction = (ims.core.vo.lookups.VSPupilReaction)this.pupilleftreaction.clone();
		clone.pupilrightsize = this.pupilrightsize;
		if(this.pupilrightreaction == null)
			clone.pupilrightreaction = null;
		else
			clone.pupilrightreaction = (ims.core.vo.lookups.VSPupilReaction)this.pupilrightreaction.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(VSPupils.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A VSPupils object cannot be compared an Object of type " + obj.getClass().getName());
		}
		VSPupils compareObj = (VSPupils)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_Pupils() == null && compareObj.getID_Pupils() != null)
				return -1;
			if(this.getID_Pupils() != null && compareObj.getID_Pupils() == null)
				return 1;
			if(this.getID_Pupils() != null && compareObj.getID_Pupils() != null)
				retVal = this.getID_Pupils().compareTo(compareObj.getID_Pupils());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.pupilleftsize != null)
			count++;
		if(this.pupilleftreaction != null)
			count++;
		if(this.pupilrightsize != null)
			count++;
		if(this.pupilrightreaction != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 4;
	}
	protected Integer pupilleftsize;
	protected ims.core.vo.lookups.VSPupilReaction pupilleftreaction;
	protected Integer pupilrightsize;
	protected ims.core.vo.lookups.VSPupilReaction pupilrightreaction;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
