//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;


public class ChartValueCommentVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable, ims.vo.interfaces.IChartValueComment
{
	private static final long serialVersionUID = 1L;

	public ChartValueCommentVo()
	{
	}
	public ChartValueCommentVo(ims.core.vo.beans.ChartValueCommentVoBean bean)
	{
		this.type = bean.getType();
		this.source = bean.getSource();
		this.text = bean.getText();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.ChartValueCommentVoBean bean)
	{
		this.type = bean.getType();
		this.source = bean.getSource();
		this.text = bean.getText();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.ChartValueCommentVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.ChartValueCommentVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.ChartValueCommentVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getTypeIsNotNull()
	{
		return this.type != null;
	}
	public String getType()
	{
		return this.type;
	}
	public static int getTypeMaxLength()
	{
		return 255;
	}
	public void setType(String value)
	{
		this.isValidated = false;
		this.type = value;
	}
	public boolean getSourceIsNotNull()
	{
		return this.source != null;
	}
	public String getSource()
	{
		return this.source;
	}
	public static int getSourceMaxLength()
	{
		return 255;
	}
	public void setSource(String value)
	{
		this.isValidated = false;
		this.source = value;
	}
	public boolean getTextIsNotNull()
	{
		return this.text != null;
	}
	public String getText()
	{
		return this.text;
	}
	public static int getTextMaxLength()
	{
		return 255;
	}
	public void setText(String value)
	{
		this.isValidated = false;
		this.text = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public String toString()
	{
		StringBuffer sb = new StringBuffer();
		if(this.text != null)
			sb.append(this.text);
		return sb.toString();
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof ChartValueCommentVo))
			return false;
		ChartValueCommentVo compareObj = (ChartValueCommentVo)obj;
		if(this.getType() == null && compareObj.getType() != null)
			return false;
		if(this.getType() != null && compareObj.getType() == null)
			return false;
		if(this.getType() != null && compareObj.getType() != null)
			if(!this.getType().equals(compareObj.getType()))
				return false;
		if(this.getSource() == null && compareObj.getSource() != null)
			return false;
		if(this.getSource() != null && compareObj.getSource() == null)
			return false;
		if(this.getSource() != null && compareObj.getSource() != null)
			if(!this.getSource().equals(compareObj.getSource()))
				return false;
		if(this.getText() == null && compareObj.getText() != null)
			return false;
		if(this.getText() != null && compareObj.getText() == null)
			return false;
		if(this.getText() != null && compareObj.getText() != null)
			return this.getText().equals(compareObj.getText());
		return super.equals(obj);
	}
	/**
	* IChartValueComment
	*/
	public String getIChartValueCommentSource() 
	{
		return source;
	}
	public String getIChartValueCommentText() 
	{
		return text;
	}
	public String getIChartValueCommentType() 
	{
		return type;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ChartValueCommentVo clone = new ChartValueCommentVo();
		
		clone.type = this.type;
		clone.source = this.source;
		clone.text = this.text;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ChartValueCommentVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ChartValueCommentVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		ChartValueCommentVo compareObj = (ChartValueCommentVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getType() == null && compareObj.getType() != null)
				return -1;
			if(this.getType() != null && compareObj.getType() == null)
				return 1;
			if(this.getType() != null && compareObj.getType() != null)
			{
				if(caseInsensitive)
					retVal = this.getType().toLowerCase().compareTo(compareObj.getType().toLowerCase());
				else
					retVal = this.getType().compareTo(compareObj.getType());
			}
		}
		if (retVal == 0)
		{
			if(this.getSource() == null && compareObj.getSource() != null)
				return -1;
			if(this.getSource() != null && compareObj.getSource() == null)
				return 1;
			if(this.getSource() != null && compareObj.getSource() != null)
			{
				if(caseInsensitive)
					retVal = this.getSource().toLowerCase().compareTo(compareObj.getSource().toLowerCase());
				else
					retVal = this.getSource().compareTo(compareObj.getSource());
			}
		}
		if (retVal == 0)
		{
			if(this.getText() == null && compareObj.getText() != null)
				return -1;
			if(this.getText() != null && compareObj.getText() == null)
				return 1;
			if(this.getText() != null && compareObj.getText() != null)
			{
				if(caseInsensitive)
					retVal = this.getText().toLowerCase().compareTo(compareObj.getText().toLowerCase());
				else
					retVal = this.getText().compareTo(compareObj.getText());
			}
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.type != null)
			count++;
		if(this.source != null)
			count++;
		if(this.text != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 3;
	}
	protected String type;
	protected String source;
	protected String text;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
