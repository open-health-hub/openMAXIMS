//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.vitals.FluidBalanceInstance business object (ID: 1022100016).
 */
public class FluidBalanceInstanceVo extends ims.core.vitals.vo.FluidBalanceInstanceRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public FluidBalanceInstanceVo()
	{
	}
	public FluidBalanceInstanceVo(Integer id, int version)
	{
		super(id, version);
	}
	public FluidBalanceInstanceVo(ims.core.vo.beans.FluidBalanceInstanceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.totalintake = bean.getTotalIntake();
		this.totaloutput = bean.getTotalOutput();
		this.balance = bean.getBalance();
		this.fluidintake = ims.core.vo.FluidBalanceDetailsVoCollection.buildFromBeanCollection(bean.getFluidIntake());
		this.fluidoutput = ims.core.vo.FluidBalanceDetailsVoCollection.buildFromBeanCollection(bean.getFluidOutput());
		this.ventilationchart = bean.getVentilationChart() == null ? null : bean.getVentilationChart().buildVo();
		this.fluidbalancedate = bean.getFluidBalanceDate() == null ? null : bean.getFluidBalanceDate().buildDate();
		this.starttime = bean.getStartTime() == null ? null : bean.getStartTime().buildTime();
		this.systeminfo = bean.getSystemInfo() == null ? null : bean.getSystemInfo().buildSystemInformation();
		this.comments = bean.getComments();
		this.confirmingdatetime = bean.getConfirmingDateTime() == null ? null : bean.getConfirmingDateTime().buildDateTime();
		this.confirminghcp = bean.getConfirmingHCP() == null ? null : bean.getConfirmingHCP().buildVo();
		this.isconfirmed = bean.getIsConfirmed();
		this.irrigationin = bean.getIrrigationIn();
		this.irrigationout = bean.getIrrigationOut();
		this.timeperiod = bean.getTimePeriod() == null ? null : ims.core.vo.lookups.DailyTimePeriods.buildLookup(bean.getTimePeriod());
		this.signatoryshift = bean.getSignatoryShift() == null ? null : new ims.core.vitals.vo.SignatoryShiftDetailsRefVo(new Integer(bean.getSignatoryShift().getId()), bean.getSignatoryShift().getVersion());
		this.endtime = bean.getEndTime() == null ? null : bean.getEndTime().buildTime();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.FluidBalanceInstanceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.totalintake = bean.getTotalIntake();
		this.totaloutput = bean.getTotalOutput();
		this.balance = bean.getBalance();
		this.fluidintake = ims.core.vo.FluidBalanceDetailsVoCollection.buildFromBeanCollection(bean.getFluidIntake());
		this.fluidoutput = ims.core.vo.FluidBalanceDetailsVoCollection.buildFromBeanCollection(bean.getFluidOutput());
		this.ventilationchart = bean.getVentilationChart() == null ? null : bean.getVentilationChart().buildVo(map);
		this.fluidbalancedate = bean.getFluidBalanceDate() == null ? null : bean.getFluidBalanceDate().buildDate();
		this.starttime = bean.getStartTime() == null ? null : bean.getStartTime().buildTime();
		this.systeminfo = bean.getSystemInfo() == null ? null : bean.getSystemInfo().buildSystemInformation();
		this.comments = bean.getComments();
		this.confirmingdatetime = bean.getConfirmingDateTime() == null ? null : bean.getConfirmingDateTime().buildDateTime();
		this.confirminghcp = bean.getConfirmingHCP() == null ? null : bean.getConfirmingHCP().buildVo(map);
		this.isconfirmed = bean.getIsConfirmed();
		this.irrigationin = bean.getIrrigationIn();
		this.irrigationout = bean.getIrrigationOut();
		this.timeperiod = bean.getTimePeriod() == null ? null : ims.core.vo.lookups.DailyTimePeriods.buildLookup(bean.getTimePeriod());
		this.signatoryshift = bean.getSignatoryShift() == null ? null : new ims.core.vitals.vo.SignatoryShiftDetailsRefVo(new Integer(bean.getSignatoryShift().getId()), bean.getSignatoryShift().getVersion());
		this.endtime = bean.getEndTime() == null ? null : bean.getEndTime().buildTime();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.FluidBalanceInstanceVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.FluidBalanceInstanceVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.FluidBalanceInstanceVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("TOTALINTAKE"))
			return getTotalIntake();
		if(fieldName.equals("TOTALOUTPUT"))
			return getTotalOutput();
		if(fieldName.equals("BALANCE"))
			return getBalance();
		if(fieldName.equals("FLUIDINTAKE"))
			return getFluidIntake();
		if(fieldName.equals("FLUIDOUTPUT"))
			return getFluidOutput();
		if(fieldName.equals("VENTILATIONCHART"))
			return getVentilationChart();
		if(fieldName.equals("FLUIDBALANCEDATE"))
			return getFluidBalanceDate();
		if(fieldName.equals("STARTTIME"))
			return getStartTime();
		if(fieldName.equals("SYSTEMINFO"))
			return getSystemInfo();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		if(fieldName.equals("CONFIRMINGDATETIME"))
			return getConfirmingDateTime();
		if(fieldName.equals("CONFIRMINGHCP"))
			return getConfirmingHCP();
		if(fieldName.equals("ISCONFIRMED"))
			return getIsConfirmed();
		if(fieldName.equals("IRRIGATIONIN"))
			return getIrrigationIn();
		if(fieldName.equals("IRRIGATIONOUT"))
			return getIrrigationOut();
		if(fieldName.equals("TIMEPERIOD"))
			return getTimePeriod();
		if(fieldName.equals("SIGNATORYSHIFT"))
			return getSignatoryShift();
		if(fieldName.equals("ENDTIME"))
			return getEndTime();
		if(fieldName.equals("AUTHORINGINFORMATION"))
			return getAuthoringInformation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getTotalIntakeIsNotNull()
	{
		return this.totalintake != null;
	}
	public Integer getTotalIntake()
	{
		return this.totalintake;
	}
	public void setTotalIntake(Integer value)
	{
		this.isValidated = false;
		this.totalintake = value;
	}
	public boolean getTotalOutputIsNotNull()
	{
		return this.totaloutput != null;
	}
	public Integer getTotalOutput()
	{
		return this.totaloutput;
	}
	public void setTotalOutput(Integer value)
	{
		this.isValidated = false;
		this.totaloutput = value;
	}
	public boolean getBalanceIsNotNull()
	{
		return this.balance != null;
	}
	public Integer getBalance()
	{
		return this.balance;
	}
	public void setBalance(Integer value)
	{
		this.isValidated = false;
		this.balance = value;
	}
	public boolean getFluidIntakeIsNotNull()
	{
		return this.fluidintake != null;
	}
	public ims.core.vo.FluidBalanceDetailsVoCollection getFluidIntake()
	{
		return this.fluidintake;
	}
	public void setFluidIntake(ims.core.vo.FluidBalanceDetailsVoCollection value)
	{
		this.isValidated = false;
		this.fluidintake = value;
	}
	public boolean getFluidOutputIsNotNull()
	{
		return this.fluidoutput != null;
	}
	public ims.core.vo.FluidBalanceDetailsVoCollection getFluidOutput()
	{
		return this.fluidoutput;
	}
	public void setFluidOutput(ims.core.vo.FluidBalanceDetailsVoCollection value)
	{
		this.isValidated = false;
		this.fluidoutput = value;
	}
	public boolean getVentilationChartIsNotNull()
	{
		return this.ventilationchart != null;
	}
	public ims.core.vo.VSVentilationChartVo getVentilationChart()
	{
		return this.ventilationchart;
	}
	public void setVentilationChart(ims.core.vo.VSVentilationChartVo value)
	{
		this.isValidated = false;
		this.ventilationchart = value;
	}
	public boolean getFluidBalanceDateIsNotNull()
	{
		return this.fluidbalancedate != null;
	}
	public ims.framework.utils.Date getFluidBalanceDate()
	{
		return this.fluidbalancedate;
	}
	public void setFluidBalanceDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.fluidbalancedate = value;
	}
	public boolean getStartTimeIsNotNull()
	{
		return this.starttime != null;
	}
	public ims.framework.utils.Time getStartTime()
	{
		return this.starttime;
	}
	public void setStartTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.starttime = value;
	}
	public boolean getSystemInfoIsNotNull()
	{
		return this.systeminfo != null;
	}
	public ims.vo.SystemInformation getSystemInfo()
	{
		return this.systeminfo;
	}
	public void setSystemInfo(ims.vo.SystemInformation value)
	{
		this.isValidated = false;
		this.systeminfo = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public String getComments()
	{
		return this.comments;
	}
	public static int getCommentsMaxLength()
	{
		return 255;
	}
	public void setComments(String value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean getConfirmingDateTimeIsNotNull()
	{
		return this.confirmingdatetime != null;
	}
	public ims.framework.utils.DateTime getConfirmingDateTime()
	{
		return this.confirmingdatetime;
	}
	public void setConfirmingDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.confirmingdatetime = value;
	}
	public boolean getConfirmingHCPIsNotNull()
	{
		return this.confirminghcp != null;
	}
	public ims.core.vo.HcpLiteVo getConfirmingHCP()
	{
		return this.confirminghcp;
	}
	public void setConfirmingHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.confirminghcp = value;
	}
	public boolean getIsConfirmedIsNotNull()
	{
		return this.isconfirmed != null;
	}
	public Boolean getIsConfirmed()
	{
		return this.isconfirmed;
	}
	public void setIsConfirmed(Boolean value)
	{
		this.isValidated = false;
		this.isconfirmed = value;
	}
	public boolean getIrrigationInIsNotNull()
	{
		return this.irrigationin != null;
	}
	public Integer getIrrigationIn()
	{
		return this.irrigationin;
	}
	public void setIrrigationIn(Integer value)
	{
		this.isValidated = false;
		this.irrigationin = value;
	}
	public boolean getIrrigationOutIsNotNull()
	{
		return this.irrigationout != null;
	}
	public Integer getIrrigationOut()
	{
		return this.irrigationout;
	}
	public void setIrrigationOut(Integer value)
	{
		this.isValidated = false;
		this.irrigationout = value;
	}
	public boolean getTimePeriodIsNotNull()
	{
		return this.timeperiod != null;
	}
	public ims.core.vo.lookups.DailyTimePeriods getTimePeriod()
	{
		return this.timeperiod;
	}
	public void setTimePeriod(ims.core.vo.lookups.DailyTimePeriods value)
	{
		this.isValidated = false;
		this.timeperiod = value;
	}
	public boolean getSignatoryShiftIsNotNull()
	{
		return this.signatoryshift != null;
	}
	public ims.core.vitals.vo.SignatoryShiftDetailsRefVo getSignatoryShift()
	{
		return this.signatoryshift;
	}
	public void setSignatoryShift(ims.core.vitals.vo.SignatoryShiftDetailsRefVo value)
	{
		this.isValidated = false;
		this.signatoryshift = value;
	}
	public boolean getEndTimeIsNotNull()
	{
		return this.endtime != null;
	}
	public ims.framework.utils.Time getEndTime()
	{
		return this.endtime;
	}
	public void setEndTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.endtime = value;
	}
	public boolean getAuthoringInformationIsNotNull()
	{
		return this.authoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInformation()
	{
		return this.authoringinformation;
	}
	public void setAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinformation = value;
	}
	/**
	* calculates the balance of a Fluid Balance Instance
	*/
	public Integer calculateBalance(FluidBalanceInstanceVo voFluidBalInstance)
	{
		return new Integer(voFluidBalInstance.getTotalIntake().intValue() - voFluidBalInstance.getTotalOutput().intValue());
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.fluidintake != null)
		{
			if(!this.fluidintake.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.fluidoutput != null)
		{
			if(!this.fluidoutput.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.ventilationchart != null)
		{
			if(!this.ventilationchart.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.confirminghcp != null)
		{
			if(!this.confirminghcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.fluidintake != null)
		{
			String[] listOfOtherErrors = this.fluidintake.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.fluidoutput != null)
		{
			String[] listOfOtherErrors = this.fluidoutput.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.ventilationchart != null)
		{
			String[] listOfOtherErrors = this.ventilationchart.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.fluidbalancedate == null)
			listOfErrors.add("Fluid Balance Date is a mandatory field");
		if(this.confirminghcp != null)
		{
			String[] listOfOtherErrors = this.confirminghcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		FluidBalanceInstanceVo clone = new FluidBalanceInstanceVo(this.id, this.version);
		
		clone.totalintake = this.totalintake;
		clone.totaloutput = this.totaloutput;
		clone.balance = this.balance;
		if(this.fluidintake == null)
			clone.fluidintake = null;
		else
			clone.fluidintake = (ims.core.vo.FluidBalanceDetailsVoCollection)this.fluidintake.clone();
		if(this.fluidoutput == null)
			clone.fluidoutput = null;
		else
			clone.fluidoutput = (ims.core.vo.FluidBalanceDetailsVoCollection)this.fluidoutput.clone();
		if(this.ventilationchart == null)
			clone.ventilationchart = null;
		else
			clone.ventilationchart = (ims.core.vo.VSVentilationChartVo)this.ventilationchart.clone();
		if(this.fluidbalancedate == null)
			clone.fluidbalancedate = null;
		else
			clone.fluidbalancedate = (ims.framework.utils.Date)this.fluidbalancedate.clone();
		if(this.starttime == null)
			clone.starttime = null;
		else
			clone.starttime = (ims.framework.utils.Time)this.starttime.clone();
		if(this.systeminfo == null)
			clone.systeminfo = null;
		else
			clone.systeminfo = (ims.vo.SystemInformation)this.systeminfo.clone();
		clone.comments = this.comments;
		if(this.confirmingdatetime == null)
			clone.confirmingdatetime = null;
		else
			clone.confirmingdatetime = (ims.framework.utils.DateTime)this.confirmingdatetime.clone();
		if(this.confirminghcp == null)
			clone.confirminghcp = null;
		else
			clone.confirminghcp = (ims.core.vo.HcpLiteVo)this.confirminghcp.clone();
		clone.isconfirmed = this.isconfirmed;
		clone.irrigationin = this.irrigationin;
		clone.irrigationout = this.irrigationout;
		if(this.timeperiod == null)
			clone.timeperiod = null;
		else
			clone.timeperiod = (ims.core.vo.lookups.DailyTimePeriods)this.timeperiod.clone();
		clone.signatoryshift = this.signatoryshift;
		if(this.endtime == null)
			clone.endtime = null;
		else
			clone.endtime = (ims.framework.utils.Time)this.endtime.clone();
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(FluidBalanceInstanceVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A FluidBalanceInstanceVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		FluidBalanceInstanceVo compareObj = (FluidBalanceInstanceVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getFluidBalanceDate() == null && compareObj.getFluidBalanceDate() != null)
				return -1;
			if(this.getFluidBalanceDate() != null && compareObj.getFluidBalanceDate() == null)
				return 1;
			if(this.getFluidBalanceDate() != null && compareObj.getFluidBalanceDate() != null)
				retVal = this.getFluidBalanceDate().compareTo(compareObj.getFluidBalanceDate());
		}
		if (retVal == 0)
		{
			if(this.getStartTime() == null && compareObj.getStartTime() != null)
				return -1;
			if(this.getStartTime() != null && compareObj.getStartTime() == null)
				return 1;
			if(this.getStartTime() != null && compareObj.getStartTime() != null)
				retVal = this.getStartTime().compareTo(compareObj.getStartTime());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.totalintake != null)
			count++;
		if(this.totaloutput != null)
			count++;
		if(this.balance != null)
			count++;
		if(this.fluidintake != null)
			count++;
		if(this.fluidoutput != null)
			count++;
		if(this.ventilationchart != null)
			count++;
		if(this.fluidbalancedate != null)
			count++;
		if(this.starttime != null)
			count++;
		if(this.systeminfo != null)
			count++;
		if(this.comments != null)
			count++;
		if(this.confirmingdatetime != null)
			count++;
		if(this.confirminghcp != null)
			count++;
		if(this.isconfirmed != null)
			count++;
		if(this.irrigationin != null)
			count++;
		if(this.irrigationout != null)
			count++;
		if(this.timeperiod != null)
			count++;
		if(this.signatoryshift != null)
			count++;
		if(this.endtime != null)
			count++;
		if(this.authoringinformation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 19;
	}
	protected Integer totalintake;
	protected Integer totaloutput;
	protected Integer balance;
	protected ims.core.vo.FluidBalanceDetailsVoCollection fluidintake;
	protected ims.core.vo.FluidBalanceDetailsVoCollection fluidoutput;
	protected ims.core.vo.VSVentilationChartVo ventilationchart;
	protected ims.framework.utils.Date fluidbalancedate;
	protected ims.framework.utils.Time starttime;
	protected ims.vo.SystemInformation systeminfo;
	protected String comments;
	protected ims.framework.utils.DateTime confirmingdatetime;
	protected ims.core.vo.HcpLiteVo confirminghcp;
	protected Boolean isconfirmed;
	protected Integer irrigationin;
	protected Integer irrigationout;
	protected ims.core.vo.lookups.DailyTimePeriods timeperiod;
	protected ims.core.vitals.vo.SignatoryShiftDetailsRefVo signatoryshift;
	protected ims.framework.utils.Time endtime;
	protected ims.core.vo.AuthoringInformationVo authoringinformation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
