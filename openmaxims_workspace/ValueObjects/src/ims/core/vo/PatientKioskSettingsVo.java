//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.configuration.PatientKioskSettings business object (ID: 1028100046).
 */
public class PatientKioskSettingsVo extends ims.core.configuration.vo.PatientKioskSettingsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientKioskSettingsVo()
	{
	}
	public PatientKioskSettingsVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientKioskSettingsVo(ims.core.vo.beans.PatientKioskSettingsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.theme = bean.getTheme() == null ? null : ims.core.vo.lookups.PatientKioskTheme.buildLookup(bean.getTheme());
		this.timeout = bean.getTimeout();
		this.webserviceurl = bean.getWebServiceUrl();
		this.appupdateurl = bean.getAppUpdateUrl();
		this.autoinstallupdates = bean.getAutoInstallUpdates();
		this.alloweddelay = bean.getAllowedDelay();
		this.showappointments = bean.getShowAppointments();
		this.messages = ims.core.vo.PatientKioskMessageVoCollection.buildFromBeanCollection(bean.getMessages());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PatientKioskSettingsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.theme = bean.getTheme() == null ? null : ims.core.vo.lookups.PatientKioskTheme.buildLookup(bean.getTheme());
		this.timeout = bean.getTimeout();
		this.webserviceurl = bean.getWebServiceUrl();
		this.appupdateurl = bean.getAppUpdateUrl();
		this.autoinstallupdates = bean.getAutoInstallUpdates();
		this.alloweddelay = bean.getAllowedDelay();
		this.showappointments = bean.getShowAppointments();
		this.messages = ims.core.vo.PatientKioskMessageVoCollection.buildFromBeanCollection(bean.getMessages());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PatientKioskSettingsVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PatientKioskSettingsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PatientKioskSettingsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("THEME"))
			return getTheme();
		if(fieldName.equals("TIMEOUT"))
			return getTimeout();
		if(fieldName.equals("WEBSERVICEURL"))
			return getWebServiceUrl();
		if(fieldName.equals("APPUPDATEURL"))
			return getAppUpdateUrl();
		if(fieldName.equals("AUTOINSTALLUPDATES"))
			return getAutoInstallUpdates();
		if(fieldName.equals("ALLOWEDDELAY"))
			return getAllowedDelay();
		if(fieldName.equals("SHOWAPPOINTMENTS"))
			return getShowAppointments();
		if(fieldName.equals("MESSAGES"))
			return getMessages();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getThemeIsNotNull()
	{
		return this.theme != null;
	}
	public ims.core.vo.lookups.PatientKioskTheme getTheme()
	{
		return this.theme;
	}
	public void setTheme(ims.core.vo.lookups.PatientKioskTheme value)
	{
		this.isValidated = false;
		this.theme = value;
	}
	public boolean getTimeoutIsNotNull()
	{
		return this.timeout != null;
	}
	public Integer getTimeout()
	{
		return this.timeout;
	}
	public void setTimeout(Integer value)
	{
		this.isValidated = false;
		this.timeout = value;
	}
	public boolean getWebServiceUrlIsNotNull()
	{
		return this.webserviceurl != null;
	}
	public String getWebServiceUrl()
	{
		return this.webserviceurl;
	}
	public static int getWebServiceUrlMaxLength()
	{
		return 255;
	}
	public void setWebServiceUrl(String value)
	{
		this.isValidated = false;
		this.webserviceurl = value;
	}
	public boolean getAppUpdateUrlIsNotNull()
	{
		return this.appupdateurl != null;
	}
	public String getAppUpdateUrl()
	{
		return this.appupdateurl;
	}
	public static int getAppUpdateUrlMaxLength()
	{
		return 255;
	}
	public void setAppUpdateUrl(String value)
	{
		this.isValidated = false;
		this.appupdateurl = value;
	}
	public boolean getAutoInstallUpdatesIsNotNull()
	{
		return this.autoinstallupdates != null;
	}
	public Boolean getAutoInstallUpdates()
	{
		return this.autoinstallupdates;
	}
	public void setAutoInstallUpdates(Boolean value)
	{
		this.isValidated = false;
		this.autoinstallupdates = value;
	}
	public boolean getAllowedDelayIsNotNull()
	{
		return this.alloweddelay != null;
	}
	public Integer getAllowedDelay()
	{
		return this.alloweddelay;
	}
	public void setAllowedDelay(Integer value)
	{
		this.isValidated = false;
		this.alloweddelay = value;
	}
	public boolean getShowAppointmentsIsNotNull()
	{
		return this.showappointments != null;
	}
	public Boolean getShowAppointments()
	{
		return this.showappointments;
	}
	public void setShowAppointments(Boolean value)
	{
		this.isValidated = false;
		this.showappointments = value;
	}
	public boolean getMessagesIsNotNull()
	{
		return this.messages != null;
	}
	public ims.core.vo.PatientKioskMessageVoCollection getMessages()
	{
		return this.messages;
	}
	public void setMessages(ims.core.vo.PatientKioskMessageVoCollection value)
	{
		this.isValidated = false;
		this.messages = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.messages != null)
		{
			if(!this.messages.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.theme == null)
			listOfErrors.add("Theme is mandatory");
		if(this.timeout == null)
			listOfErrors.add("Timeout is mandatory");
		if(this.timeout != null && (this.timeout.intValue() < 1 || this.timeout.intValue() > 15))
			listOfErrors.add("The timeout should be between 1 and 15 minutes");
		if(this.webserviceurl != null)
			if(this.webserviceurl.length() > 255)
				listOfErrors.add("The length of the field [webserviceurl] in the value object [ims.core.vo.PatientKioskSettingsVo] is too big. It should be less or equal to 255");
		if(this.appupdateurl != null)
			if(this.appupdateurl.length() > 255)
				listOfErrors.add("The length of the field [appupdateurl] in the value object [ims.core.vo.PatientKioskSettingsVo] is too big. It should be less or equal to 255");
		if(this.alloweddelay != null && (this.alloweddelay.intValue() < 0 || this.alloweddelay.intValue() > 60))
			listOfErrors.add("The allowed delay should be between 0 and 60 minutes");
		if(this.messages != null)
		{
			String[] listOfOtherErrors = this.messages.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientKioskSettingsVo clone = new PatientKioskSettingsVo(this.id, this.version);
		
		if(this.theme == null)
			clone.theme = null;
		else
			clone.theme = (ims.core.vo.lookups.PatientKioskTheme)this.theme.clone();
		clone.timeout = this.timeout;
		clone.webserviceurl = this.webserviceurl;
		clone.appupdateurl = this.appupdateurl;
		clone.autoinstallupdates = this.autoinstallupdates;
		clone.alloweddelay = this.alloweddelay;
		clone.showappointments = this.showappointments;
		if(this.messages == null)
			clone.messages = null;
		else
			clone.messages = (ims.core.vo.PatientKioskMessageVoCollection)this.messages.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientKioskSettingsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientKioskSettingsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientKioskSettingsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientKioskSettingsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.theme != null)
			count++;
		if(this.timeout != null)
			count++;
		if(this.webserviceurl != null)
			count++;
		if(this.appupdateurl != null)
			count++;
		if(this.autoinstallupdates != null)
			count++;
		if(this.alloweddelay != null)
			count++;
		if(this.showappointments != null)
			count++;
		if(this.messages != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.core.vo.lookups.PatientKioskTheme theme;
	protected Integer timeout;
	protected String webserviceurl;
	protected String appupdateurl;
	protected Boolean autoinstallupdates;
	protected Integer alloweddelay;
	protected Boolean showappointments;
	protected ims.core.vo.PatientKioskMessageVoCollection messages;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
