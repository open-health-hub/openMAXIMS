//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.AE Attendance business object (ID: 1014100002).
 */
public class AneAttendanceVo extends ims.core.admin.pas.vo.AEAttendanceRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AneAttendanceVo()
	{
	}
	public AneAttendanceVo(Integer id, int version)
	{
		super(id, version);
	}
	public AneAttendanceVo(ims.core.vo.beans.AneAttendanceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo();
		this.modeofarrival = bean.getModeOfArrival() == null ? null : ims.core.vo.lookups.ArrivalMode.buildLookup(bean.getModeOfArrival());
		this.isactive = bean.getIsActive();
		this.admitdatetime = bean.getAdmitDateTime() == null ? null : bean.getAdmitDateTime().buildDateTime();
		this.aneconclusiondatetime = bean.getANEconclusionDateTime() == null ? null : bean.getANEconclusionDateTime().buildDateTime();
		this.reasonforadmission = bean.getReasonForAdmission();
		this.bedtyperequested = bean.getBedTypeRequested() == null ? null : ims.core.vo.lookups.BedTypeRequested.buildLookup(bean.getBedTypeRequested());
		this.currentlocation = bean.getCurrentLocation() == null ? null : bean.getCurrentLocation().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.AneAttendanceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo(map);
		this.modeofarrival = bean.getModeOfArrival() == null ? null : ims.core.vo.lookups.ArrivalMode.buildLookup(bean.getModeOfArrival());
		this.isactive = bean.getIsActive();
		this.admitdatetime = bean.getAdmitDateTime() == null ? null : bean.getAdmitDateTime().buildDateTime();
		this.aneconclusiondatetime = bean.getANEconclusionDateTime() == null ? null : bean.getANEconclusionDateTime().buildDateTime();
		this.reasonforadmission = bean.getReasonForAdmission();
		this.bedtyperequested = bean.getBedTypeRequested() == null ? null : ims.core.vo.lookups.BedTypeRequested.buildLookup(bean.getBedTypeRequested());
		this.currentlocation = bean.getCurrentLocation() == null ? null : bean.getCurrentLocation().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.AneAttendanceVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.AneAttendanceVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.AneAttendanceVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PASEVENT"))
			return getPasEvent();
		if(fieldName.equals("MODEOFARRIVAL"))
			return getModeOfArrival();
		if(fieldName.equals("ISACTIVE"))
			return getIsActive();
		if(fieldName.equals("ADMITDATETIME"))
			return getAdmitDateTime();
		if(fieldName.equals("ANECONCLUSIONDATETIME"))
			return getANEconclusionDateTime();
		if(fieldName.equals("REASONFORADMISSION"))
			return getReasonForAdmission();
		if(fieldName.equals("BEDTYPEREQUESTED"))
			return getBedTypeRequested();
		if(fieldName.equals("CURRENTLOCATION"))
			return getCurrentLocation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPasEventIsNotNull()
	{
		return this.pasevent != null;
	}
	public ims.core.vo.PasEventVo getPasEvent()
	{
		return this.pasevent;
	}
	public void setPasEvent(ims.core.vo.PasEventVo value)
	{
		this.isValidated = false;
		this.pasevent = value;
	}
	public boolean getModeOfArrivalIsNotNull()
	{
		return this.modeofarrival != null;
	}
	public ims.core.vo.lookups.ArrivalMode getModeOfArrival()
	{
		return this.modeofarrival;
	}
	public void setModeOfArrival(ims.core.vo.lookups.ArrivalMode value)
	{
		this.isValidated = false;
		this.modeofarrival = value;
	}
	public boolean getIsActiveIsNotNull()
	{
		return this.isactive != null;
	}
	public Boolean getIsActive()
	{
		return this.isactive;
	}
	public void setIsActive(Boolean value)
	{
		this.isValidated = false;
		this.isactive = value;
	}
	public boolean getAdmitDateTimeIsNotNull()
	{
		return this.admitdatetime != null;
	}
	public ims.framework.utils.DateTime getAdmitDateTime()
	{
		return this.admitdatetime;
	}
	public void setAdmitDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.admitdatetime = value;
	}
	public boolean getANEconclusionDateTimeIsNotNull()
	{
		return this.aneconclusiondatetime != null;
	}
	public ims.framework.utils.DateTime getANEconclusionDateTime()
	{
		return this.aneconclusiondatetime;
	}
	public void setANEconclusionDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.aneconclusiondatetime = value;
	}
	public boolean getReasonForAdmissionIsNotNull()
	{
		return this.reasonforadmission != null;
	}
	public String getReasonForAdmission()
	{
		return this.reasonforadmission;
	}
	public static int getReasonForAdmissionMaxLength()
	{
		return 255;
	}
	public void setReasonForAdmission(String value)
	{
		this.isValidated = false;
		this.reasonforadmission = value;
	}
	public boolean getBedTypeRequestedIsNotNull()
	{
		return this.bedtyperequested != null;
	}
	public ims.core.vo.lookups.BedTypeRequested getBedTypeRequested()
	{
		return this.bedtyperequested;
	}
	public void setBedTypeRequested(ims.core.vo.lookups.BedTypeRequested value)
	{
		this.isValidated = false;
		this.bedtyperequested = value;
	}
	public boolean getCurrentLocationIsNotNull()
	{
		return this.currentlocation != null;
	}
	public ims.core.vo.LocShortVo getCurrentLocation()
	{
		return this.currentlocation;
	}
	public void setCurrentLocation(ims.core.vo.LocShortVo value)
	{
		this.isValidated = false;
		this.currentlocation = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.pasevent != null)
		{
			if(!this.pasevent.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.pasevent != null)
		{
			String[] listOfOtherErrors = this.pasevent.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AneAttendanceVo clone = new AneAttendanceVo(this.id, this.version);
		
		if(this.pasevent == null)
			clone.pasevent = null;
		else
			clone.pasevent = (ims.core.vo.PasEventVo)this.pasevent.clone();
		if(this.modeofarrival == null)
			clone.modeofarrival = null;
		else
			clone.modeofarrival = (ims.core.vo.lookups.ArrivalMode)this.modeofarrival.clone();
		clone.isactive = this.isactive;
		if(this.admitdatetime == null)
			clone.admitdatetime = null;
		else
			clone.admitdatetime = (ims.framework.utils.DateTime)this.admitdatetime.clone();
		if(this.aneconclusiondatetime == null)
			clone.aneconclusiondatetime = null;
		else
			clone.aneconclusiondatetime = (ims.framework.utils.DateTime)this.aneconclusiondatetime.clone();
		clone.reasonforadmission = this.reasonforadmission;
		if(this.bedtyperequested == null)
			clone.bedtyperequested = null;
		else
			clone.bedtyperequested = (ims.core.vo.lookups.BedTypeRequested)this.bedtyperequested.clone();
		if(this.currentlocation == null)
			clone.currentlocation = null;
		else
			clone.currentlocation = (ims.core.vo.LocShortVo)this.currentlocation.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AneAttendanceVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AneAttendanceVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		AneAttendanceVo compareObj = (AneAttendanceVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getPasEvent() == null && compareObj.getPasEvent() != null)
				return -1;
			if(this.getPasEvent() != null && compareObj.getPasEvent() == null)
				return 1;
			if(this.getPasEvent() != null && compareObj.getPasEvent() != null)
				retVal = this.getPasEvent().compareTo(compareObj.getPasEvent());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.pasevent != null)
			count++;
		if(this.modeofarrival != null)
			count++;
		if(this.isactive != null)
			count++;
		if(this.admitdatetime != null)
			count++;
		if(this.aneconclusiondatetime != null)
			count++;
		if(this.reasonforadmission != null)
			count++;
		if(this.bedtyperequested != null)
			count++;
		if(this.currentlocation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.core.vo.PasEventVo pasevent;
	protected ims.core.vo.lookups.ArrivalMode modeofarrival;
	protected Boolean isactive;
	protected ims.framework.utils.DateTime admitdatetime;
	protected ims.framework.utils.DateTime aneconclusiondatetime;
	protected String reasonforadmission;
	protected ims.core.vo.lookups.BedTypeRequested bedtyperequested;
	protected ims.core.vo.LocShortVo currentlocation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
