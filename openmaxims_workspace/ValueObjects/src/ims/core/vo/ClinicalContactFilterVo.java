//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;


public class ClinicalContactFilterVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ClinicalContactFilterVo()
	{
	}
	public ClinicalContactFilterVo(ims.core.vo.beans.ClinicalContactFilterVoBean bean)
	{
		this.contacttype = bean.getContactType() == null ? null : ims.core.vo.lookups.ContactType.buildLookup(bean.getContactType());
		this.datefrom = bean.getDateFrom() == null ? null : bean.getDateFrom().buildDate();
		this.dateto = bean.getDateTo() == null ? null : bean.getDateTo().buildDate();
		this.location = bean.getLocation() == null ? null : bean.getLocation().buildVo();
		this.memberofstaff = bean.getMemberOfStaff() == null ? null : bean.getMemberOfStaff().buildVo();
		this.iscontacttypeinpatient = bean.getIsContactTypeInpatient();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.parentclinicalcontact = bean.getParentClinicalContact() == null ? null : bean.getParentClinicalContact().buildVo();
		this.includedischarged = bean.getIncludeDischarged();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.ClinicalContactFilterVoBean bean)
	{
		this.contacttype = bean.getContactType() == null ? null : ims.core.vo.lookups.ContactType.buildLookup(bean.getContactType());
		this.datefrom = bean.getDateFrom() == null ? null : bean.getDateFrom().buildDate();
		this.dateto = bean.getDateTo() == null ? null : bean.getDateTo().buildDate();
		this.location = bean.getLocation() == null ? null : bean.getLocation().buildVo(map);
		this.memberofstaff = bean.getMemberOfStaff() == null ? null : bean.getMemberOfStaff().buildVo(map);
		this.iscontacttypeinpatient = bean.getIsContactTypeInpatient();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.parentclinicalcontact = bean.getParentClinicalContact() == null ? null : bean.getParentClinicalContact().buildVo(map);
		this.includedischarged = bean.getIncludeDischarged();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.ClinicalContactFilterVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.ClinicalContactFilterVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.ClinicalContactFilterVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getContactTypeIsNotNull()
	{
		return this.contacttype != null;
	}
	public ims.core.vo.lookups.ContactType getContactType()
	{
		return this.contacttype;
	}
	public void setContactType(ims.core.vo.lookups.ContactType value)
	{
		this.isValidated = false;
		this.contacttype = value;
	}
	public boolean getDateFromIsNotNull()
	{
		return this.datefrom != null;
	}
	public ims.framework.utils.Date getDateFrom()
	{
		return this.datefrom;
	}
	public void setDateFrom(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.datefrom = value;
	}
	public boolean getDateToIsNotNull()
	{
		return this.dateto != null;
	}
	public ims.framework.utils.Date getDateTo()
	{
		return this.dateto;
	}
	public void setDateTo(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateto = value;
	}
	public boolean getLocationIsNotNull()
	{
		return this.location != null;
	}
	public ims.core.vo.LocShortVo getLocation()
	{
		return this.location;
	}
	public void setLocation(ims.core.vo.LocShortVo value)
	{
		this.isValidated = false;
		this.location = value;
	}
	public boolean getMemberOfStaffIsNotNull()
	{
		return this.memberofstaff != null;
	}
	public ims.core.vo.MemberOfStaffShortVo getMemberOfStaff()
	{
		return this.memberofstaff;
	}
	public void setMemberOfStaff(ims.core.vo.MemberOfStaffShortVo value)
	{
		this.isValidated = false;
		this.memberofstaff = value;
	}
	public boolean getIsContactTypeInpatientIsNotNull()
	{
		return this.iscontacttypeinpatient != null;
	}
	public Boolean getIsContactTypeInpatient()
	{
		return this.iscontacttypeinpatient;
	}
	public void setIsContactTypeInpatient(Boolean value)
	{
		this.isValidated = false;
		this.iscontacttypeinpatient = value;
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientShort getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientShort value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getParentClinicalContactIsNotNull()
	{
		return this.parentclinicalcontact != null;
	}
	public ims.core.vo.ClinicalContactShortVo getParentClinicalContact()
	{
		return this.parentclinicalcontact;
	}
	public void setParentClinicalContact(ims.core.vo.ClinicalContactShortVo value)
	{
		this.isValidated = false;
		this.parentclinicalcontact = value;
	}
	public boolean getIncludeDischargedIsNotNull()
	{
		return this.includedischarged != null;
	}
	public Boolean getIncludeDischarged()
	{
		return this.includedischarged;
	}
	public void setIncludeDischarged(Boolean value)
	{
		this.isValidated = false;
		this.includedischarged = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof ClinicalContactFilterVo))
			return false;
		ClinicalContactFilterVo compareObj = (ClinicalContactFilterVo)obj;
		if(this.getContactType() == null && compareObj.getContactType() != null)
			return false;
		if(this.getContactType() != null && compareObj.getContactType() == null)
			return false;
		if(this.getContactType() != null && compareObj.getContactType() != null)
			return this.getContactType().equals(compareObj.getContactType());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.location != null)
		{
			if(!this.location.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.memberofstaff != null)
		{
			if(!this.memberofstaff.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.patient != null)
		{
			if(!this.patient.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.parentclinicalcontact != null)
		{
			if(!this.parentclinicalcontact.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.location != null)
		{
			String[] listOfOtherErrors = this.location.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.memberofstaff != null)
		{
			String[] listOfOtherErrors = this.memberofstaff.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.patient != null)
		{
			String[] listOfOtherErrors = this.patient.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.parentclinicalcontact != null)
		{
			String[] listOfOtherErrors = this.parentclinicalcontact.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ClinicalContactFilterVo clone = new ClinicalContactFilterVo();
		
		if(this.contacttype == null)
			clone.contacttype = null;
		else
			clone.contacttype = (ims.core.vo.lookups.ContactType)this.contacttype.clone();
		if(this.datefrom == null)
			clone.datefrom = null;
		else
			clone.datefrom = (ims.framework.utils.Date)this.datefrom.clone();
		if(this.dateto == null)
			clone.dateto = null;
		else
			clone.dateto = (ims.framework.utils.Date)this.dateto.clone();
		if(this.location == null)
			clone.location = null;
		else
			clone.location = (ims.core.vo.LocShortVo)this.location.clone();
		if(this.memberofstaff == null)
			clone.memberofstaff = null;
		else
			clone.memberofstaff = (ims.core.vo.MemberOfStaffShortVo)this.memberofstaff.clone();
		clone.iscontacttypeinpatient = this.iscontacttypeinpatient;
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientShort)this.patient.clone();
		if(this.parentclinicalcontact == null)
			clone.parentclinicalcontact = null;
		else
			clone.parentclinicalcontact = (ims.core.vo.ClinicalContactShortVo)this.parentclinicalcontact.clone();
		clone.includedischarged = this.includedischarged;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ClinicalContactFilterVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ClinicalContactFilterVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		ClinicalContactFilterVo compareObj = (ClinicalContactFilterVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getContactType() == null && compareObj.getContactType() != null)
				return -1;
			if(this.getContactType() != null && compareObj.getContactType() == null)
				return 1;
			if(this.getContactType() != null && compareObj.getContactType() != null)
				retVal = this.getContactType().compareTo(compareObj.getContactType());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.contacttype != null)
			count++;
		if(this.datefrom != null)
			count++;
		if(this.dateto != null)
			count++;
		if(this.location != null)
			count++;
		if(this.memberofstaff != null)
			count++;
		if(this.iscontacttypeinpatient != null)
			count++;
		if(this.patient != null)
			count++;
		if(this.parentclinicalcontact != null)
			count++;
		if(this.includedischarged != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 9;
	}
	protected ims.core.vo.lookups.ContactType contacttype;
	protected ims.framework.utils.Date datefrom;
	protected ims.framework.utils.Date dateto;
	protected ims.core.vo.LocShortVo location;
	protected ims.core.vo.MemberOfStaffShortVo memberofstaff;
	protected Boolean iscontacttypeinpatient;
	protected ims.core.vo.PatientShort patient;
	protected ims.core.vo.ClinicalContactShortVo parentclinicalcontact;
	protected Boolean includedischarged;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
