//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.patient.Patient business object (ID: 1001100000).
 */
public class PatientFilter extends ims.core.patient.vo.PatientRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientFilter()
	{
	}
	public PatientFilter(Integer id, int version)
	{
		super(id, version);
	}
	public PatientFilter(ims.core.vo.beans.PatientFilterBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.surname = bean.getSurname();
		this.forename = bean.getForename();
		this.forename2 = bean.getForename2();
		this.sex = bean.getSex() == null ? null : ims.core.vo.lookups.Sex.buildLookup(bean.getSex());
		this.dob = bean.getDob() == null ? null : bean.getDob().buildPartialDate();
		this.county = bean.getCounty() == null ? null : ims.ntpf.vo.lookups.County.buildLookup(bean.getCounty());
		this.address = bean.getAddress();
		this.persid = bean.getPersId() == null ? null : bean.getPersId().buildVo();
		this.cca = bean.getCCA() == null ? null : bean.getCCA().buildVo();
		this.excludequickregistrationpatients = bean.getExcludeQuickRegistrationPatients();
		this.excludedeceasedpatients = bean.getExcludeDeceasedPatients();
		this.postcode = bean.getPostCode();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PatientFilterBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.surname = bean.getSurname();
		this.forename = bean.getForename();
		this.forename2 = bean.getForename2();
		this.sex = bean.getSex() == null ? null : ims.core.vo.lookups.Sex.buildLookup(bean.getSex());
		this.dob = bean.getDob() == null ? null : bean.getDob().buildPartialDate();
		this.county = bean.getCounty() == null ? null : ims.ntpf.vo.lookups.County.buildLookup(bean.getCounty());
		this.address = bean.getAddress();
		this.persid = bean.getPersId() == null ? null : bean.getPersId().buildVo(map);
		this.cca = bean.getCCA() == null ? null : bean.getCCA().buildVo(map);
		this.excludequickregistrationpatients = bean.getExcludeQuickRegistrationPatients();
		this.excludedeceasedpatients = bean.getExcludeDeceasedPatients();
		this.postcode = bean.getPostCode();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PatientFilterBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PatientFilterBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PatientFilterBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("SURNAME"))
			return getSurname();
		if(fieldName.equals("FORENAME"))
			return getForename();
		if(fieldName.equals("FORENAME2"))
			return getForename2();
		if(fieldName.equals("SEX"))
			return getSex();
		if(fieldName.equals("DOB"))
			return getDob();
		if(fieldName.equals("COUNTY"))
			return getCounty();
		if(fieldName.equals("ADDRESS"))
			return getAddress();
		if(fieldName.equals("PERSID"))
			return getPersId();
		if(fieldName.equals("CCA"))
			return getCCA();
		if(fieldName.equals("EXCLUDEQUICKREGISTRATIONPATIENTS"))
			return getExcludeQuickRegistrationPatients();
		if(fieldName.equals("EXCLUDEDECEASEDPATIENTS"))
			return getExcludeDeceasedPatients();
		if(fieldName.equals("POSTCODE"))
			return getPostCode();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getSurnameIsNotNull()
	{
		return this.surname != null;
	}
	public String getSurname()
	{
		return this.surname;
	}
	public static int getSurnameMaxLength()
	{
		return 255;
	}
	public void setSurname(String value)
	{
		this.isValidated = false;
		this.surname = value;
	}
	public boolean getForenameIsNotNull()
	{
		return this.forename != null;
	}
	public String getForename()
	{
		return this.forename;
	}
	public static int getForenameMaxLength()
	{
		return 255;
	}
	public void setForename(String value)
	{
		this.isValidated = false;
		this.forename = value;
	}
	public boolean getForename2IsNotNull()
	{
		return this.forename2 != null;
	}
	public String getForename2()
	{
		return this.forename2;
	}
	public static int getForename2MaxLength()
	{
		return 255;
	}
	public void setForename2(String value)
	{
		this.isValidated = false;
		this.forename2 = value;
	}
	public boolean getSexIsNotNull()
	{
		return this.sex != null;
	}
	public ims.core.vo.lookups.Sex getSex()
	{
		return this.sex;
	}
	public void setSex(ims.core.vo.lookups.Sex value)
	{
		this.isValidated = false;
		this.sex = value;
	}
	public boolean getDobIsNotNull()
	{
		return this.dob != null;
	}
	public ims.framework.utils.PartialDate getDob()
	{
		return this.dob;
	}
	public void setDob(ims.framework.utils.PartialDate value)
	{
		this.isValidated = false;
		this.dob = value;
	}
	public boolean getCountyIsNotNull()
	{
		return this.county != null;
	}
	public ims.ntpf.vo.lookups.County getCounty()
	{
		return this.county;
	}
	public void setCounty(ims.ntpf.vo.lookups.County value)
	{
		this.isValidated = false;
		this.county = value;
	}
	public boolean getAddressIsNotNull()
	{
		return this.address != null;
	}
	public String getAddress()
	{
		return this.address;
	}
	public static int getAddressMaxLength()
	{
		return 255;
	}
	public void setAddress(String value)
	{
		this.isValidated = false;
		this.address = value;
	}
	public boolean getPersIdIsNotNull()
	{
		return this.persid != null;
	}
	public ims.core.vo.PatientId getPersId()
	{
		return this.persid;
	}
	public void setPersId(ims.core.vo.PatientId value)
	{
		this.isValidated = false;
		this.persid = value;
	}
	public boolean getCCAIsNotNull()
	{
		return this.cca != null;
	}
	public ims.core.vo.LocSiteLiteVo getCCA()
	{
		return this.cca;
	}
	public void setCCA(ims.core.vo.LocSiteLiteVo value)
	{
		this.isValidated = false;
		this.cca = value;
	}
	public boolean getExcludeQuickRegistrationPatientsIsNotNull()
	{
		return this.excludequickregistrationpatients != null;
	}
	public Boolean getExcludeQuickRegistrationPatients()
	{
		return this.excludequickregistrationpatients;
	}
	public void setExcludeQuickRegistrationPatients(Boolean value)
	{
		this.isValidated = false;
		this.excludequickregistrationpatients = value;
	}
	public boolean getExcludeDeceasedPatientsIsNotNull()
	{
		return this.excludedeceasedpatients != null;
	}
	public Boolean getExcludeDeceasedPatients()
	{
		return this.excludedeceasedpatients;
	}
	public void setExcludeDeceasedPatients(Boolean value)
	{
		this.isValidated = false;
		this.excludedeceasedpatients = value;
	}
	public boolean getPostCodeIsNotNull()
	{
		return this.postcode != null;
	}
	public String getPostCode()
	{
		return this.postcode;
	}
	public static int getPostCodeMaxLength()
	{
		return 255;
	}
	public void setPostCode(String value)
	{
		this.isValidated = false;
		this.postcode = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.persid != null)
		{
			if(!this.persid.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.cca != null)
		{
			if(!this.cca.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.persid != null)
		{
			String[] listOfOtherErrors = this.persid.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.cca != null)
		{
			String[] listOfOtherErrors = this.cca.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientFilter clone = new PatientFilter(this.id, this.version);
		
		clone.surname = this.surname;
		clone.forename = this.forename;
		clone.forename2 = this.forename2;
		if(this.sex == null)
			clone.sex = null;
		else
			clone.sex = (ims.core.vo.lookups.Sex)this.sex.clone();
		if(this.dob == null)
			clone.dob = null;
		else
			clone.dob = (ims.framework.utils.PartialDate)this.dob.clone();
		if(this.county == null)
			clone.county = null;
		else
			clone.county = (ims.ntpf.vo.lookups.County)this.county.clone();
		clone.address = this.address;
		if(this.persid == null)
			clone.persid = null;
		else
			clone.persid = (ims.core.vo.PatientId)this.persid.clone();
		if(this.cca == null)
			clone.cca = null;
		else
			clone.cca = (ims.core.vo.LocSiteLiteVo)this.cca.clone();
		clone.excludequickregistrationpatients = this.excludequickregistrationpatients;
		clone.excludedeceasedpatients = this.excludedeceasedpatients;
		clone.postcode = this.postcode;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientFilter.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientFilter object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PatientFilter compareObj = (PatientFilter)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getSurname() == null && compareObj.getSurname() != null)
				return -1;
			if(this.getSurname() != null && compareObj.getSurname() == null)
				return 1;
			if(this.getSurname() != null && compareObj.getSurname() != null)
			{
				if(caseInsensitive)
					retVal = this.getSurname().toLowerCase().compareTo(compareObj.getSurname().toLowerCase());
				else
					retVal = this.getSurname().compareTo(compareObj.getSurname());
			}
		}
		if (retVal == 0)
		{
			if(this.getForename() == null && compareObj.getForename() != null)
				return -1;
			if(this.getForename() != null && compareObj.getForename() == null)
				return 1;
			if(this.getForename() != null && compareObj.getForename() != null)
			{
				if(caseInsensitive)
					retVal = this.getForename().toLowerCase().compareTo(compareObj.getForename().toLowerCase());
				else
					retVal = this.getForename().compareTo(compareObj.getForename());
			}
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.surname != null)
			count++;
		if(this.forename != null)
			count++;
		if(this.forename2 != null)
			count++;
		if(this.sex != null)
			count++;
		if(this.dob != null)
			count++;
		if(this.county != null)
			count++;
		if(this.address != null)
			count++;
		if(this.persid != null)
			count++;
		if(this.cca != null)
			count++;
		if(this.excludequickregistrationpatients != null)
			count++;
		if(this.excludedeceasedpatients != null)
			count++;
		if(this.postcode != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 12;
	}
	protected String surname;
	protected String forename;
	protected String forename2;
	protected ims.core.vo.lookups.Sex sex;
	protected ims.framework.utils.PartialDate dob;
	protected ims.ntpf.vo.lookups.County county;
	protected String address;
	protected ims.core.vo.PatientId persid;
	protected ims.core.vo.LocSiteLiteVo cca;
	protected Boolean excludequickregistrationpatients;
	protected Boolean excludedeceasedpatients;
	protected String postcode;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
