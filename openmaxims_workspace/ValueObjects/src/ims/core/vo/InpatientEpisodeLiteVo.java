//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.Inpatient Episode business object (ID: 1014100000).
 */
public class InpatientEpisodeLiteVo extends ims.core.admin.pas.vo.InpatientEpisodeRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public InpatientEpisodeLiteVo()
	{
	}
	public InpatientEpisodeLiteVo(Integer id, int version)
	{
		super(id, version);
	}
	public InpatientEpisodeLiteVo(ims.core.vo.beans.InpatientEpisodeLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo();
		this.estdischargedate = bean.getEstDischargeDate() == null ? null : bean.getEstDischargeDate().buildDate();
		this.isconfirmeddischarge = bean.getIsConfirmedDischarge();
		if(bean.getWardStays() != null)
		{
			this.wardstays = new ims.core.admin.pas.vo.WardStayRefVoCollection();
			for(int wardstays_i = 0; wardstays_i < bean.getWardStays().length; wardstays_i++)
			{
				this.wardstays.add(new ims.core.admin.pas.vo.WardStayRefVo(new Integer(bean.getWardStays()[wardstays_i].getId()), bean.getWardStays()[wardstays_i].getVersion()));
			}
		}
		if(bean.getConsultantStays() != null)
		{
			this.consultantstays = new ims.core.admin.pas.vo.ConsultantStayRefVoCollection();
			for(int consultantstays_i = 0; consultantstays_i < bean.getConsultantStays().length; consultantstays_i++)
			{
				this.consultantstays.add(new ims.core.admin.pas.vo.ConsultantStayRefVo(new Integer(bean.getConsultantStays()[consultantstays_i].getId()), bean.getConsultantStays()[consultantstays_i].getVersion()));
			}
		}
		this.confirmeddischargedatetime = bean.getConfirmedDischargeDateTime() == null ? null : bean.getConfirmedDischargeDateTime().buildDateTime();
		this.ismaternityinpatient = bean.getIsMaternityInpatient();
		this.bed = bean.getBed() == null ? null : bean.getBed().buildVo();
		this.dischargereadydate = bean.getDischargeReadyDate() == null ? null : bean.getDischargeReadyDate().buildDate();
		this.isonhomeleave = bean.getIsOnHomeLeave();
		this.expecteddateofreturn = bean.getExpectedDateOfReturn() == null ? null : bean.getExpectedDateOfReturn().buildDate();
		this.expectedtimeofreturn = bean.getExpectedTimeOfReturn() == null ? null : bean.getExpectedTimeOfReturn().buildTime();
		this.vacatedbednumber = bean.getVacatedBedNumber();
		this.dateonhomeleave = bean.getDateOnHomeLeave() == null ? null : bean.getDateOnHomeLeave().buildDate();
		this.vteassessmentstatus = bean.getVTEAssessmentStatus() == null ? null : ims.clinical.vo.lookups.VTEAsessmentStatus.buildLookup(bean.getVTEAssessmentStatus());
		this.vteriskassessment = bean.getVTERiskAssessment() == null ? null : new ims.core.clinical.vo.VTERiskAssessmentRefVo(new Integer(bean.getVTERiskAssessment().getId()), bean.getVTERiskAssessment().getVersion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.InpatientEpisodeLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo(map);
		this.estdischargedate = bean.getEstDischargeDate() == null ? null : bean.getEstDischargeDate().buildDate();
		this.isconfirmeddischarge = bean.getIsConfirmedDischarge();
		if(bean.getWardStays() != null)
		{
			this.wardstays = new ims.core.admin.pas.vo.WardStayRefVoCollection();
			for(int wardstays_i = 0; wardstays_i < bean.getWardStays().length; wardstays_i++)
			{
				this.wardstays.add(new ims.core.admin.pas.vo.WardStayRefVo(new Integer(bean.getWardStays()[wardstays_i].getId()), bean.getWardStays()[wardstays_i].getVersion()));
			}
		}
		if(bean.getConsultantStays() != null)
		{
			this.consultantstays = new ims.core.admin.pas.vo.ConsultantStayRefVoCollection();
			for(int consultantstays_i = 0; consultantstays_i < bean.getConsultantStays().length; consultantstays_i++)
			{
				this.consultantstays.add(new ims.core.admin.pas.vo.ConsultantStayRefVo(new Integer(bean.getConsultantStays()[consultantstays_i].getId()), bean.getConsultantStays()[consultantstays_i].getVersion()));
			}
		}
		this.confirmeddischargedatetime = bean.getConfirmedDischargeDateTime() == null ? null : bean.getConfirmedDischargeDateTime().buildDateTime();
		this.ismaternityinpatient = bean.getIsMaternityInpatient();
		this.bed = bean.getBed() == null ? null : bean.getBed().buildVo(map);
		this.dischargereadydate = bean.getDischargeReadyDate() == null ? null : bean.getDischargeReadyDate().buildDate();
		this.isonhomeleave = bean.getIsOnHomeLeave();
		this.expecteddateofreturn = bean.getExpectedDateOfReturn() == null ? null : bean.getExpectedDateOfReturn().buildDate();
		this.expectedtimeofreturn = bean.getExpectedTimeOfReturn() == null ? null : bean.getExpectedTimeOfReturn().buildTime();
		this.vacatedbednumber = bean.getVacatedBedNumber();
		this.dateonhomeleave = bean.getDateOnHomeLeave() == null ? null : bean.getDateOnHomeLeave().buildDate();
		this.vteassessmentstatus = bean.getVTEAssessmentStatus() == null ? null : ims.clinical.vo.lookups.VTEAsessmentStatus.buildLookup(bean.getVTEAssessmentStatus());
		this.vteriskassessment = bean.getVTERiskAssessment() == null ? null : new ims.core.clinical.vo.VTERiskAssessmentRefVo(new Integer(bean.getVTERiskAssessment().getId()), bean.getVTERiskAssessment().getVersion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.InpatientEpisodeLiteVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.InpatientEpisodeLiteVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.InpatientEpisodeLiteVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PASEVENT"))
			return getPasEvent();
		if(fieldName.equals("ESTDISCHARGEDATE"))
			return getEstDischargeDate();
		if(fieldName.equals("ISCONFIRMEDDISCHARGE"))
			return getIsConfirmedDischarge();
		if(fieldName.equals("WARDSTAYS"))
			return getWardStays();
		if(fieldName.equals("CONSULTANTSTAYS"))
			return getConsultantStays();
		if(fieldName.equals("CONFIRMEDDISCHARGEDATETIME"))
			return getConfirmedDischargeDateTime();
		if(fieldName.equals("ISMATERNITYINPATIENT"))
			return getIsMaternityInpatient();
		if(fieldName.equals("BED"))
			return getBed();
		if(fieldName.equals("DISCHARGEREADYDATE"))
			return getDischargeReadyDate();
		if(fieldName.equals("ISONHOMELEAVE"))
			return getIsOnHomeLeave();
		if(fieldName.equals("EXPECTEDDATEOFRETURN"))
			return getExpectedDateOfReturn();
		if(fieldName.equals("EXPECTEDTIMEOFRETURN"))
			return getExpectedTimeOfReturn();
		if(fieldName.equals("VACATEDBEDNUMBER"))
			return getVacatedBedNumber();
		if(fieldName.equals("DATEONHOMELEAVE"))
			return getDateOnHomeLeave();
		if(fieldName.equals("VTEASSESSMENTSTATUS"))
			return getVTEAssessmentStatus();
		if(fieldName.equals("VTERISKASSESSMENT"))
			return getVTERiskAssessment();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPasEventIsNotNull()
	{
		return this.pasevent != null;
	}
	public ims.core.vo.PasEventADTVo getPasEvent()
	{
		return this.pasevent;
	}
	public void setPasEvent(ims.core.vo.PasEventADTVo value)
	{
		this.isValidated = false;
		this.pasevent = value;
	}
	public boolean getEstDischargeDateIsNotNull()
	{
		return this.estdischargedate != null;
	}
	public ims.framework.utils.Date getEstDischargeDate()
	{
		return this.estdischargedate;
	}
	public void setEstDischargeDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.estdischargedate = value;
	}
	public boolean getIsConfirmedDischargeIsNotNull()
	{
		return this.isconfirmeddischarge != null;
	}
	public Boolean getIsConfirmedDischarge()
	{
		return this.isconfirmeddischarge;
	}
	public void setIsConfirmedDischarge(Boolean value)
	{
		this.isValidated = false;
		this.isconfirmeddischarge = value;
	}
	public boolean getWardStaysIsNotNull()
	{
		return this.wardstays != null;
	}
	public ims.core.admin.pas.vo.WardStayRefVoCollection getWardStays()
	{
		return this.wardstays;
	}
	public void setWardStays(ims.core.admin.pas.vo.WardStayRefVoCollection value)
	{
		this.isValidated = false;
		this.wardstays = value;
	}
	public boolean getConsultantStaysIsNotNull()
	{
		return this.consultantstays != null;
	}
	public ims.core.admin.pas.vo.ConsultantStayRefVoCollection getConsultantStays()
	{
		return this.consultantstays;
	}
	public void setConsultantStays(ims.core.admin.pas.vo.ConsultantStayRefVoCollection value)
	{
		this.isValidated = false;
		this.consultantstays = value;
	}
	public boolean getConfirmedDischargeDateTimeIsNotNull()
	{
		return this.confirmeddischargedatetime != null;
	}
	public ims.framework.utils.DateTime getConfirmedDischargeDateTime()
	{
		return this.confirmeddischargedatetime;
	}
	public void setConfirmedDischargeDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.confirmeddischargedatetime = value;
	}
	public boolean getIsMaternityInpatientIsNotNull()
	{
		return this.ismaternityinpatient != null;
	}
	public Boolean getIsMaternityInpatient()
	{
		return this.ismaternityinpatient;
	}
	public void setIsMaternityInpatient(Boolean value)
	{
		this.isValidated = false;
		this.ismaternityinpatient = value;
	}
	public boolean getBedIsNotNull()
	{
		return this.bed != null;
	}
	public ims.core.vo.BedSpaceStateBayOnlyVo getBed()
	{
		return this.bed;
	}
	public void setBed(ims.core.vo.BedSpaceStateBayOnlyVo value)
	{
		this.isValidated = false;
		this.bed = value;
	}
	public boolean getDischargeReadyDateIsNotNull()
	{
		return this.dischargereadydate != null;
	}
	public ims.framework.utils.Date getDischargeReadyDate()
	{
		return this.dischargereadydate;
	}
	public void setDischargeReadyDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dischargereadydate = value;
	}
	public boolean getIsOnHomeLeaveIsNotNull()
	{
		return this.isonhomeleave != null;
	}
	public Boolean getIsOnHomeLeave()
	{
		return this.isonhomeleave;
	}
	public void setIsOnHomeLeave(Boolean value)
	{
		this.isValidated = false;
		this.isonhomeleave = value;
	}
	public boolean getExpectedDateOfReturnIsNotNull()
	{
		return this.expecteddateofreturn != null;
	}
	public ims.framework.utils.Date getExpectedDateOfReturn()
	{
		return this.expecteddateofreturn;
	}
	public void setExpectedDateOfReturn(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.expecteddateofreturn = value;
	}
	public boolean getExpectedTimeOfReturnIsNotNull()
	{
		return this.expectedtimeofreturn != null;
	}
	public ims.framework.utils.Time getExpectedTimeOfReturn()
	{
		return this.expectedtimeofreturn;
	}
	public void setExpectedTimeOfReturn(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.expectedtimeofreturn = value;
	}
	public boolean getVacatedBedNumberIsNotNull()
	{
		return this.vacatedbednumber != null;
	}
	public String getVacatedBedNumber()
	{
		return this.vacatedbednumber;
	}
	public static int getVacatedBedNumberMaxLength()
	{
		return 255;
	}
	public void setVacatedBedNumber(String value)
	{
		this.isValidated = false;
		this.vacatedbednumber = value;
	}
	public boolean getDateOnHomeLeaveIsNotNull()
	{
		return this.dateonhomeleave != null;
	}
	public ims.framework.utils.Date getDateOnHomeLeave()
	{
		return this.dateonhomeleave;
	}
	public void setDateOnHomeLeave(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateonhomeleave = value;
	}
	public boolean getVTEAssessmentStatusIsNotNull()
	{
		return this.vteassessmentstatus != null;
	}
	public ims.clinical.vo.lookups.VTEAsessmentStatus getVTEAssessmentStatus()
	{
		return this.vteassessmentstatus;
	}
	public void setVTEAssessmentStatus(ims.clinical.vo.lookups.VTEAsessmentStatus value)
	{
		this.isValidated = false;
		this.vteassessmentstatus = value;
	}
	public boolean getVTERiskAssessmentIsNotNull()
	{
		return this.vteriskassessment != null;
	}
	public ims.core.clinical.vo.VTERiskAssessmentRefVo getVTERiskAssessment()
	{
		return this.vteriskassessment;
	}
	public void setVTERiskAssessment(ims.core.clinical.vo.VTERiskAssessmentRefVo value)
	{
		this.isValidated = false;
		this.vteriskassessment = value;
	}
	/**
	* isDischargeDueWithin24Hrs
	*/
	public boolean isDischargeDueWithin24Hrs()
	{
		if(estdischargedate == null)
			return false;
				
		ims.framework.utils.Date nowPlus24Hrs = new ims.framework.utils.Date();
		nowPlus24Hrs.addDay(1);
				
		if(estdischargedate.isLessOrEqualThan(nowPlus24Hrs))
			return true;
				
		return false;
	}
	
	/**
	* getPatientString
	*/
		/**
		* getPatientString
		*/
		public String getPatientString()
		{
			String strPatient = "";
			
			if(this.getPasEventIsNotNull() && this.getPasEvent().getPatientIsNotNull())
			{
				 if(this.getPasEvent().getPatient().getNameIsNotNull())
					 strPatient += this.getPasEvent().getPatient().getName().toShortForm();
				 
				 PatientId patId = this.getPasEvent().getPatient().getDisplayId();
				 if(patId != null)
					 strPatient += " - " + patId.getValue();		
			}
			return strPatient;
		}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.pasevent != null)
		{
			if(!this.pasevent.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.pasevent != null)
		{
			String[] listOfOtherErrors = this.pasevent.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.vacatedbednumber != null)
			if(this.vacatedbednumber.length() > 255)
				listOfErrors.add("The length of the field [vacatedbednumber] in the value object [ims.core.vo.InpatientEpisodeLiteVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		InpatientEpisodeLiteVo clone = new InpatientEpisodeLiteVo(this.id, this.version);
		
		if(this.pasevent == null)
			clone.pasevent = null;
		else
			clone.pasevent = (ims.core.vo.PasEventADTVo)this.pasevent.clone();
		if(this.estdischargedate == null)
			clone.estdischargedate = null;
		else
			clone.estdischargedate = (ims.framework.utils.Date)this.estdischargedate.clone();
		clone.isconfirmeddischarge = this.isconfirmeddischarge;
		clone.wardstays = this.wardstays;
		clone.consultantstays = this.consultantstays;
		if(this.confirmeddischargedatetime == null)
			clone.confirmeddischargedatetime = null;
		else
			clone.confirmeddischargedatetime = (ims.framework.utils.DateTime)this.confirmeddischargedatetime.clone();
		clone.ismaternityinpatient = this.ismaternityinpatient;
		if(this.bed == null)
			clone.bed = null;
		else
			clone.bed = (ims.core.vo.BedSpaceStateBayOnlyVo)this.bed.clone();
		if(this.dischargereadydate == null)
			clone.dischargereadydate = null;
		else
			clone.dischargereadydate = (ims.framework.utils.Date)this.dischargereadydate.clone();
		clone.isonhomeleave = this.isonhomeleave;
		if(this.expecteddateofreturn == null)
			clone.expecteddateofreturn = null;
		else
			clone.expecteddateofreturn = (ims.framework.utils.Date)this.expecteddateofreturn.clone();
		if(this.expectedtimeofreturn == null)
			clone.expectedtimeofreturn = null;
		else
			clone.expectedtimeofreturn = (ims.framework.utils.Time)this.expectedtimeofreturn.clone();
		clone.vacatedbednumber = this.vacatedbednumber;
		if(this.dateonhomeleave == null)
			clone.dateonhomeleave = null;
		else
			clone.dateonhomeleave = (ims.framework.utils.Date)this.dateonhomeleave.clone();
		if(this.vteassessmentstatus == null)
			clone.vteassessmentstatus = null;
		else
			clone.vteassessmentstatus = (ims.clinical.vo.lookups.VTEAsessmentStatus)this.vteassessmentstatus.clone();
		clone.vteriskassessment = this.vteriskassessment;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(InpatientEpisodeLiteVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A InpatientEpisodeLiteVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((InpatientEpisodeLiteVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((InpatientEpisodeLiteVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.pasevent != null)
			count++;
		if(this.estdischargedate != null)
			count++;
		if(this.isconfirmeddischarge != null)
			count++;
		if(this.wardstays != null)
			count++;
		if(this.consultantstays != null)
			count++;
		if(this.confirmeddischargedatetime != null)
			count++;
		if(this.ismaternityinpatient != null)
			count++;
		if(this.bed != null)
			count++;
		if(this.dischargereadydate != null)
			count++;
		if(this.isonhomeleave != null)
			count++;
		if(this.expecteddateofreturn != null)
			count++;
		if(this.expectedtimeofreturn != null)
			count++;
		if(this.vacatedbednumber != null)
			count++;
		if(this.dateonhomeleave != null)
			count++;
		if(this.vteassessmentstatus != null)
			count++;
		if(this.vteriskassessment != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 16;
	}
	protected ims.core.vo.PasEventADTVo pasevent;
	protected ims.framework.utils.Date estdischargedate;
	protected Boolean isconfirmeddischarge;
	protected ims.core.admin.pas.vo.WardStayRefVoCollection wardstays;
	protected ims.core.admin.pas.vo.ConsultantStayRefVoCollection consultantstays;
	protected ims.framework.utils.DateTime confirmeddischargedatetime;
	protected Boolean ismaternityinpatient;
	protected ims.core.vo.BedSpaceStateBayOnlyVo bed;
	protected ims.framework.utils.Date dischargereadydate;
	protected Boolean isonhomeleave;
	protected ims.framework.utils.Date expecteddateofreturn;
	protected ims.framework.utils.Time expectedtimeofreturn;
	protected String vacatedbednumber;
	protected ims.framework.utils.Date dateonhomeleave;
	protected ims.clinical.vo.lookups.VTEAsessmentStatus vteassessmentstatus;
	protected ims.core.clinical.vo.VTERiskAssessmentRefVo vteriskassessment;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
