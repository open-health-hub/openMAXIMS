//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.clinical.PatientProblem business object (ID: 1023100001).
 */
public class PatientProblemVo extends ims.core.vo.PatientProblemListVo implements ims.vo.ImsCloneable, Comparable, ims.vo.interfaces.IGenericItemInfo, ims.vo.interfaces.IClinicalCodingValue
{
	private static final long serialVersionUID = 1L;

	public PatientProblemVo()
	{
	}
	public PatientProblemVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientProblemVo(ims.core.vo.beans.PatientProblemVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patientproblem = bean.getPatientProblem();
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.PatientProblemStatus.buildLookup(bean.getStatus());
		this.primaryforcarespells = ims.core.vo.CSPrimaryProblemVoCollection.buildFromBeanCollection(bean.getPrimaryForCareSpells());
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.problem = bean.getProblem() == null ? null : bean.getProblem().buildVo();
		this.ispresentingproblem = bean.getIsPresentingProblem();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo();
		this.problemcontext = bean.getProblemContext();
		this.isactive = bean.getIsActive();
		this.isresolved = bean.getIsResolved();
		this.dateresolved = bean.getDateResolved() == null ? null : bean.getDateResolved().buildDate();
		this.onset = bean.getOnset() == null ? null : bean.getOnset().buildPartialDate();
		this.source = bean.getSource() == null ? null : ims.core.vo.lookups.SourceofInformation.buildLookup(bean.getSource());
		this.resolvedhcp = bean.getResolvedHCP() == null ? null : bean.getResolvedHCP().buildVo();
		this.problemnote = bean.getProblemNote();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PatientProblemVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patientproblem = bean.getPatientProblem();
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.PatientProblemStatus.buildLookup(bean.getStatus());
		this.primaryforcarespells = ims.core.vo.CSPrimaryProblemVoCollection.buildFromBeanCollection(bean.getPrimaryForCareSpells());
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.problem = bean.getProblem() == null ? null : bean.getProblem().buildVo(map);
		this.ispresentingproblem = bean.getIsPresentingProblem();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo(map);
		this.problemcontext = bean.getProblemContext();
		this.isactive = bean.getIsActive();
		this.isresolved = bean.getIsResolved();
		this.dateresolved = bean.getDateResolved() == null ? null : bean.getDateResolved().buildDate();
		this.onset = bean.getOnset() == null ? null : bean.getOnset().buildPartialDate();
		this.source = bean.getSource() == null ? null : ims.core.vo.lookups.SourceofInformation.buildLookup(bean.getSource());
		this.resolvedhcp = bean.getResolvedHCP() == null ? null : bean.getResolvedHCP().buildVo(map);
		this.problemnote = bean.getProblemNote();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PatientProblemVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PatientProblemVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PatientProblemVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PROBLEM"))
			return getProblem();
		if(fieldName.equals("ISPRESENTINGPROBLEM"))
			return getIsPresentingProblem();
		if(fieldName.equals("CLINICALCONTACT"))
			return getClinicalContact();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("PROBLEMCONTEXT"))
			return getProblemContext();
		if(fieldName.equals("ISACTIVE"))
			return getIsActive();
		if(fieldName.equals("ISRESOLVED"))
			return getIsResolved();
		if(fieldName.equals("DATERESOLVED"))
			return getDateResolved();
		if(fieldName.equals("ONSET"))
			return getOnset();
		if(fieldName.equals("SOURCE"))
			return getSource();
		if(fieldName.equals("RESOLVEDHCP"))
			return getResolvedHCP();
		if(fieldName.equals("PROBLEMNOTE"))
			return getProblemNote();
		if(fieldName.equals("SPECIALTY"))
			return getSpecialty();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getProblemIsNotNull()
	{
		return this.problem != null;
	}
	public ims.clinical.vo.ClinicalProblemShortVo getProblem()
	{
		return this.problem;
	}
	public void setProblem(ims.clinical.vo.ClinicalProblemShortVo value)
	{
		this.isValidated = false;
		this.problem = value;
	}
	public boolean getIsPresentingProblemIsNotNull()
	{
		return this.ispresentingproblem != null;
	}
	public Boolean getIsPresentingProblem()
	{
		return this.ispresentingproblem;
	}
	public void setIsPresentingProblem(Boolean value)
	{
		this.isValidated = false;
		this.ispresentingproblem = value;
	}
	public boolean getClinicalContactIsNotNull()
	{
		return this.clinicalcontact != null;
	}
	public ims.core.admin.vo.ClinicalContactRefVo getClinicalContact()
	{
		return this.clinicalcontact;
	}
	public void setClinicalContact(ims.core.admin.vo.ClinicalContactRefVo value)
	{
		this.isValidated = false;
		this.clinicalcontact = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.vo.CareContextLiteVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.vo.CareContextLiteVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getProblemContextIsNotNull()
	{
		return this.problemcontext != null;
	}
	public String getProblemContext()
	{
		return this.problemcontext;
	}
	public static int getProblemContextMaxLength()
	{
		return 100;
	}
	public void setProblemContext(String value)
	{
		this.isValidated = false;
		this.problemcontext = value;
	}
	public boolean getIsActiveIsNotNull()
	{
		return this.isactive != null;
	}
	public Boolean getIsActive()
	{
		return this.isactive;
	}
	public void setIsActive(Boolean value)
	{
		this.isValidated = false;
		this.isactive = value;
	}
	public boolean getIsResolvedIsNotNull()
	{
		return this.isresolved != null;
	}
	public Boolean getIsResolved()
	{
		return this.isresolved;
	}
	public void setIsResolved(Boolean value)
	{
		this.isValidated = false;
		this.isresolved = value;
	}
	public boolean getDateResolvedIsNotNull()
	{
		return this.dateresolved != null;
	}
	public ims.framework.utils.Date getDateResolved()
	{
		return this.dateresolved;
	}
	public void setDateResolved(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateresolved = value;
	}
	public boolean getOnsetIsNotNull()
	{
		return this.onset != null;
	}
	public ims.framework.utils.PartialDate getOnset()
	{
		return this.onset;
	}
	public void setOnset(ims.framework.utils.PartialDate value)
	{
		this.isValidated = false;
		this.onset = value;
	}
	public boolean getSourceIsNotNull()
	{
		return this.source != null;
	}
	public ims.core.vo.lookups.SourceofInformation getSource()
	{
		return this.source;
	}
	public void setSource(ims.core.vo.lookups.SourceofInformation value)
	{
		this.isValidated = false;
		this.source = value;
	}
	public boolean getResolvedHCPIsNotNull()
	{
		return this.resolvedhcp != null;
	}
	public ims.core.vo.Hcp getResolvedHCP()
	{
		return this.resolvedhcp;
	}
	public void setResolvedHCP(ims.core.vo.Hcp value)
	{
		this.isValidated = false;
		this.resolvedhcp = value;
	}
	public boolean getProblemNoteIsNotNull()
	{
		return this.problemnote != null;
	}
	public String getProblemNote()
	{
		return this.problemnote;
	}
	public static int getProblemNoteMaxLength()
	{
		return 500;
	}
	public void setProblemNote(String value)
	{
		this.isValidated = false;
		this.problemnote = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.lookups.Specialty getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	/**
	* createTooltipForPatientSummary
	*/
	public String createTooltipForPatientSummary()
	{
		StringBuffer sb = new StringBuffer();
				
		if(this.authoringinformation != null)
			sb.append(this.authoringinformation.toString(" "));
		return sb.toString();
	}
	
	/**
	* getDiAssociationTooltip
	*/
	public String getDiAssociationTooltip()
	{
		if(this == null)
			return "";
		
		StringBuffer tooltip = new StringBuffer();
		String CR = "\n";
		if (this.getPatientProblemIsNotNull())
		{
			tooltip.append("*Problem Description: *");
			tooltip.append(this.getPatientProblem());
			tooltip.append(CR);
		}
		if (this.getOnsetIsNotNull())
		{
			tooltip.append("*Onset Date: *");
			tooltip.append(this.getOnset());
			tooltip.append(CR);
		}
		if (this.getAuthoringInformationIsNotNull())
		{
			tooltip.append("<hr width='212' size='1' align='left' color='#000000'>");
			tooltip.append("*Authoring HCP: *");
			tooltip.append(this.getAuthoringInformation().getAuthoringHcp());
			tooltip.append(CR);
			tooltip.append("*Authoring Date/Time: *");
			tooltip.append(this.getAuthoringInformation().getAuthoringDateTime());
		}
			
		return new ims.utils.textile.Textile().process(tooltip.toString());
	}
	/**
	* IClinicalCoding methods
	*/
	public ims.vo.ValueObject getIClinicalCodingValue() 
	{
		return this.problem;
	}
	public void setIClinicalCodingValue(ims.vo.ValueObject vo) 
	{
		this.problem = (ims.clinical.vo.ClinicalProblemShortVo) vo;
	}
	public String getIClinicalCodingValueDescription() 
	{
		return this.patientproblem;
	}
	public void setIClinicalCodingValueDescription(String value) 
	{
		this.patientproblem = value;
	}
	/**
	* IGenericItemInfo
	*/
	public String getIGenericItemInfoName()
	{
		return getPatientProblem();
	}
	
	public void setIGenericItemName(String cciName)
	{
		setPatientProblem(cciName);
	}
	
	public Boolean getIGenericItemInfoIsActive()
	{
		return getIsActive();
	}
	
	public void setIGenericItemIsActive(Boolean cciIsActive)
	{
		setIsActive(cciIsActive);
	}
	
	public Integer getIGenericItemInfoID()
	{
		return this.getID_PatientProblem();
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.primaryforcarespells != null)
		{
			if(!this.primaryforcarespells.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.resolvedhcp != null)
		{
			if(!this.resolvedhcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patientproblem == null || this.patientproblem.length() == 0)
			listOfErrors.add("Patient Problem is mandatory");
		else if(this.patientproblem.length() > 255)
			listOfErrors.add("The length of the field [patientproblem] in the value object [ims.core.vo.PatientProblemVo] is too big. It should be less or equal to 255");
		if(this.primaryforcarespells != null)
		{
			String[] listOfOtherErrors = this.primaryforcarespells.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.problemcontext != null)
			if(this.problemcontext.length() > 100)
				listOfErrors.add("The length of the field [problemcontext] in the value object [ims.core.vo.PatientProblemVo] is too big. It should be less or equal to 100");
		if(this.resolvedhcp != null)
		{
			String[] listOfOtherErrors = this.resolvedhcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.problemnote != null)
			if(this.problemnote.length() > 500)
				listOfErrors.add("The length of the field [problemnote] in the value object [ims.core.vo.PatientProblemVo] is too big. It should be less or equal to 500");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientProblemVo clone = new PatientProblemVo(this.id, this.version);
		
		clone.patientproblem = this.patientproblem;
		if(this.status == null)
			clone.status = null;
		else
			clone.status = (ims.core.vo.lookups.PatientProblemStatus)this.status.clone();
		if(this.primaryforcarespells == null)
			clone.primaryforcarespells = null;
		else
			clone.primaryforcarespells = (ims.core.vo.CSPrimaryProblemVoCollection)this.primaryforcarespells.clone();
		if(this.sysinfo == null)
			clone.sysinfo = null;
		else
			clone.sysinfo = (ims.vo.SystemInformation)this.sysinfo.clone();
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		if(this.problem == null)
			clone.problem = null;
		else
			clone.problem = (ims.clinical.vo.ClinicalProblemShortVo)this.problem.clone();
		clone.ispresentingproblem = this.ispresentingproblem;
		clone.clinicalcontact = this.clinicalcontact;
		if(this.carecontext == null)
			clone.carecontext = null;
		else
			clone.carecontext = (ims.core.vo.CareContextLiteVo)this.carecontext.clone();
		clone.problemcontext = this.problemcontext;
		clone.isactive = this.isactive;
		clone.isresolved = this.isresolved;
		if(this.dateresolved == null)
			clone.dateresolved = null;
		else
			clone.dateresolved = (ims.framework.utils.Date)this.dateresolved.clone();
		if(this.onset == null)
			clone.onset = null;
		else
			clone.onset = (ims.framework.utils.PartialDate)this.onset.clone();
		if(this.source == null)
			clone.source = null;
		else
			clone.source = (ims.core.vo.lookups.SourceofInformation)this.source.clone();
		if(this.resolvedhcp == null)
			clone.resolvedhcp = null;
		else
			clone.resolvedhcp = (ims.core.vo.Hcp)this.resolvedhcp.clone();
		clone.problemnote = this.problemnote;
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientProblemVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientProblemVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PatientProblemVo compareObj = (PatientProblemVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_PatientProblem() == null && compareObj.getID_PatientProblem() != null)
				return -1;
			if(this.getID_PatientProblem() != null && compareObj.getID_PatientProblem() == null)
				return 1;
			if(this.getID_PatientProblem() != null && compareObj.getID_PatientProblem() != null)
				retVal = this.getID_PatientProblem().compareTo(compareObj.getID_PatientProblem());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.problem != null)
			count++;
		if(this.ispresentingproblem != null)
			count++;
		if(this.clinicalcontact != null)
			count++;
		if(this.carecontext != null)
			count++;
		if(this.problemcontext != null)
			count++;
		if(this.isactive != null)
			count++;
		if(this.isresolved != null)
			count++;
		if(this.dateresolved != null)
			count++;
		if(this.onset != null)
			count++;
		if(this.source != null)
			count++;
		if(this.resolvedhcp != null)
			count++;
		if(this.problemnote != null)
			count++;
		if(this.specialty != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 13;
	}
	protected ims.clinical.vo.ClinicalProblemShortVo problem;
	protected Boolean ispresentingproblem;
	protected ims.core.admin.vo.ClinicalContactRefVo clinicalcontact;
	protected ims.core.vo.CareContextLiteVo carecontext;
	protected String problemcontext;
	protected Boolean isactive;
	protected Boolean isresolved;
	protected ims.framework.utils.Date dateresolved;
	protected ims.framework.utils.PartialDate onset;
	protected ims.core.vo.lookups.SourceofInformation source;
	protected ims.core.vo.Hcp resolvedhcp;
	protected String problemnote;
	protected ims.core.vo.lookups.Specialty specialty;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
