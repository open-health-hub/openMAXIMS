//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.cds.CDSHistory business object (ID: 1104100006).
 */
public class CDSHistoryVo extends ims.core.cds.vo.CDSHistoryRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public CDSHistoryVo()
	{
	}
	public CDSHistoryVo(Integer id, int version)
	{
		super(id, version);
	}
	public CDSHistoryVo(ims.core.vo.beans.CDSHistoryVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.jobstarttime = bean.getJobStartTime() == null ? null : bean.getJobStartTime().buildDateTime();
		this.jobendtime = bean.getJobEndTime() == null ? null : bean.getJobEndTime().buildDateTime();
		this.jobsuccessful = bean.getJobSuccessful();
		this.errormessage = bean.getErrorMessage();
		this.reporttype = bean.getReportType() == null ? null : ims.core.vo.lookups.CDSReportType.buildLookup(bean.getReportType());
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.enddate = bean.getEndDate() == null ? null : bean.getEndDate().buildDate();
		this.location = bean.getLocation();
		this.logurl = bean.getLogUrl();
		this.fileurl = bean.getFileUrl();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.CDSHistoryVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.jobstarttime = bean.getJobStartTime() == null ? null : bean.getJobStartTime().buildDateTime();
		this.jobendtime = bean.getJobEndTime() == null ? null : bean.getJobEndTime().buildDateTime();
		this.jobsuccessful = bean.getJobSuccessful();
		this.errormessage = bean.getErrorMessage();
		this.reporttype = bean.getReportType() == null ? null : ims.core.vo.lookups.CDSReportType.buildLookup(bean.getReportType());
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.enddate = bean.getEndDate() == null ? null : bean.getEndDate().buildDate();
		this.location = bean.getLocation();
		this.logurl = bean.getLogUrl();
		this.fileurl = bean.getFileUrl();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.CDSHistoryVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.CDSHistoryVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.CDSHistoryVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("JOBSTARTTIME"))
			return getJobStartTime();
		if(fieldName.equals("JOBENDTIME"))
			return getJobEndTime();
		if(fieldName.equals("JOBSUCCESSFUL"))
			return getJobSuccessful();
		if(fieldName.equals("ERRORMESSAGE"))
			return getErrorMessage();
		if(fieldName.equals("REPORTTYPE"))
			return getReportType();
		if(fieldName.equals("STARTDATE"))
			return getStartDate();
		if(fieldName.equals("ENDDATE"))
			return getEndDate();
		if(fieldName.equals("LOCATION"))
			return getLocation();
		if(fieldName.equals("LOGURL"))
			return getLogUrl();
		if(fieldName.equals("FILEURL"))
			return getFileUrl();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getJobStartTimeIsNotNull()
	{
		return this.jobstarttime != null;
	}
	public ims.framework.utils.DateTime getJobStartTime()
	{
		return this.jobstarttime;
	}
	public void setJobStartTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.jobstarttime = value;
	}
	public boolean getJobEndTimeIsNotNull()
	{
		return this.jobendtime != null;
	}
	public ims.framework.utils.DateTime getJobEndTime()
	{
		return this.jobendtime;
	}
	public void setJobEndTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.jobendtime = value;
	}
	public boolean getJobSuccessfulIsNotNull()
	{
		return this.jobsuccessful != null;
	}
	public Boolean getJobSuccessful()
	{
		return this.jobsuccessful;
	}
	public void setJobSuccessful(Boolean value)
	{
		this.isValidated = false;
		this.jobsuccessful = value;
	}
	public boolean getErrorMessageIsNotNull()
	{
		return this.errormessage != null;
	}
	public String getErrorMessage()
	{
		return this.errormessage;
	}
	public static int getErrorMessageMaxLength()
	{
		return 2000;
	}
	public void setErrorMessage(String value)
	{
		this.isValidated = false;
		this.errormessage = value;
	}
	public boolean getReportTypeIsNotNull()
	{
		return this.reporttype != null;
	}
	public ims.core.vo.lookups.CDSReportType getReportType()
	{
		return this.reporttype;
	}
	public void setReportType(ims.core.vo.lookups.CDSReportType value)
	{
		this.isValidated = false;
		this.reporttype = value;
	}
	public boolean getStartDateIsNotNull()
	{
		return this.startdate != null;
	}
	public ims.framework.utils.Date getStartDate()
	{
		return this.startdate;
	}
	public void setStartDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.startdate = value;
	}
	public boolean getEndDateIsNotNull()
	{
		return this.enddate != null;
	}
	public ims.framework.utils.Date getEndDate()
	{
		return this.enddate;
	}
	public void setEndDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.enddate = value;
	}
	public boolean getLocationIsNotNull()
	{
		return this.location != null;
	}
	public String getLocation()
	{
		return this.location;
	}
	public static int getLocationMaxLength()
	{
		return 100;
	}
	public void setLocation(String value)
	{
		this.isValidated = false;
		this.location = value;
	}
	public boolean getLogUrlIsNotNull()
	{
		return this.logurl != null;
	}
	public String getLogUrl()
	{
		return this.logurl;
	}
	public static int getLogUrlMaxLength()
	{
		return 255;
	}
	public void setLogUrl(String value)
	{
		this.isValidated = false;
		this.logurl = value;
	}
	public boolean getFileUrlIsNotNull()
	{
		return this.fileurl != null;
	}
	public String getFileUrl()
	{
		return this.fileurl;
	}
	public static int getFileUrlMaxLength()
	{
		return 255;
	}
	public void setFileUrl(String value)
	{
		this.isValidated = false;
		this.fileurl = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.jobstarttime == null)
			listOfErrors.add("JobStartTime is mandatory");
		if(this.jobendtime == null)
			listOfErrors.add("JobEndTime is mandatory");
		if(this.jobsuccessful == null)
			listOfErrors.add("JobSuccessful is mandatory");
		if(this.errormessage != null)
			if(this.errormessage.length() > 2000)
				listOfErrors.add("The length of the field [errormessage] in the value object [ims.core.vo.CDSHistoryVo] is too big. It should be less or equal to 2000");
		if(this.reporttype == null)
			listOfErrors.add("ReportType is mandatory");
		if(this.startdate == null)
			listOfErrors.add("StartDate is mandatory");
		if(this.enddate == null)
			listOfErrors.add("EndDate is mandatory");
		if(this.location != null)
			if(this.location.length() > 100)
				listOfErrors.add("The length of the field [location] in the value object [ims.core.vo.CDSHistoryVo] is too big. It should be less or equal to 100");
		if(this.logurl != null)
			if(this.logurl.length() > 255)
				listOfErrors.add("The length of the field [logurl] in the value object [ims.core.vo.CDSHistoryVo] is too big. It should be less or equal to 255");
		if(this.fileurl != null)
			if(this.fileurl.length() > 255)
				listOfErrors.add("The length of the field [fileurl] in the value object [ims.core.vo.CDSHistoryVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		CDSHistoryVo clone = new CDSHistoryVo(this.id, this.version);
		
		if(this.jobstarttime == null)
			clone.jobstarttime = null;
		else
			clone.jobstarttime = (ims.framework.utils.DateTime)this.jobstarttime.clone();
		if(this.jobendtime == null)
			clone.jobendtime = null;
		else
			clone.jobendtime = (ims.framework.utils.DateTime)this.jobendtime.clone();
		clone.jobsuccessful = this.jobsuccessful;
		clone.errormessage = this.errormessage;
		if(this.reporttype == null)
			clone.reporttype = null;
		else
			clone.reporttype = (ims.core.vo.lookups.CDSReportType)this.reporttype.clone();
		if(this.startdate == null)
			clone.startdate = null;
		else
			clone.startdate = (ims.framework.utils.Date)this.startdate.clone();
		if(this.enddate == null)
			clone.enddate = null;
		else
			clone.enddate = (ims.framework.utils.Date)this.enddate.clone();
		clone.location = this.location;
		clone.logurl = this.logurl;
		clone.fileurl = this.fileurl;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(CDSHistoryVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A CDSHistoryVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((CDSHistoryVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((CDSHistoryVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.jobstarttime != null)
			count++;
		if(this.jobendtime != null)
			count++;
		if(this.jobsuccessful != null)
			count++;
		if(this.errormessage != null)
			count++;
		if(this.reporttype != null)
			count++;
		if(this.startdate != null)
			count++;
		if(this.enddate != null)
			count++;
		if(this.location != null)
			count++;
		if(this.logurl != null)
			count++;
		if(this.fileurl != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected ims.framework.utils.DateTime jobstarttime;
	protected ims.framework.utils.DateTime jobendtime;
	protected Boolean jobsuccessful;
	protected String errormessage;
	protected ims.core.vo.lookups.CDSReportType reporttype;
	protected ims.framework.utils.Date startdate;
	protected ims.framework.utils.Date enddate;
	protected String location;
	protected String logurl;
	protected String fileurl;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
