// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.ReferralClinicalNotes business object (ID: 1096100058).
 */
public class ReferralClinicalNotesVo extends ims.RefMan.vo.ReferralClinicalNotesRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ReferralClinicalNotesVo()
	{
	}
	public ReferralClinicalNotesVo(Integer id, int version)
	{
		super(id, version);
	}
	public ReferralClinicalNotesVo(ims.RefMan.vo.beans.ReferralClinicalNotesVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.catsreferral = bean.getCatsReferral() == null ? null : new ims.RefMan.vo.CatsReferralRefVo(new Integer(bean.getCatsReferral().getId()), bean.getCatsReferral().getVersion());
		this.clinicalnotes = ims.RefMan.vo.AppointmentClinicalNotesVoCollection.buildFromBeanCollection(bean.getClinicalNotes());
		this.diagnosis = ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection.buildFromBeanCollection(bean.getDiagnosis());
		this.procedures = ims.RefMan.vo.PatientProcedureApptDetailVoCollection.buildFromBeanCollection(bean.getProcedures());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.ReferralClinicalNotesVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.catsreferral = bean.getCatsReferral() == null ? null : new ims.RefMan.vo.CatsReferralRefVo(new Integer(bean.getCatsReferral().getId()), bean.getCatsReferral().getVersion());
		this.clinicalnotes = ims.RefMan.vo.AppointmentClinicalNotesVoCollection.buildFromBeanCollection(bean.getClinicalNotes());
		this.diagnosis = ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection.buildFromBeanCollection(bean.getDiagnosis());
		this.procedures = ims.RefMan.vo.PatientProcedureApptDetailVoCollection.buildFromBeanCollection(bean.getProcedures());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.ReferralClinicalNotesVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.ReferralClinicalNotesVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.ReferralClinicalNotesVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CATSREFERRAL"))
			return getCatsReferral();
		if(fieldName.equals("CLINICALNOTES"))
			return getClinicalNotes();
		if(fieldName.equals("DIAGNOSIS"))
			return getDiagnosis();
		if(fieldName.equals("PROCEDURES"))
			return getProcedures();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getCatsReferralIsNotNull()
	{
		return this.catsreferral != null;
	}
	public ims.RefMan.vo.CatsReferralRefVo getCatsReferral()
	{
		return this.catsreferral;
	}
	public void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)
	{
		this.isValidated = false;
		this.catsreferral = value;
	}
	public boolean getClinicalNotesIsNotNull()
	{
		return this.clinicalnotes != null;
	}
	public ims.RefMan.vo.AppointmentClinicalNotesVoCollection getClinicalNotes()
	{
		return this.clinicalnotes;
	}
	public void setClinicalNotes(ims.RefMan.vo.AppointmentClinicalNotesVoCollection value)
	{
		this.isValidated = false;
		this.clinicalnotes = value;
	}
	public boolean getDiagnosisIsNotNull()
	{
		return this.diagnosis != null;
	}
	public ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection getDiagnosis()
	{
		return this.diagnosis;
	}
	public void setDiagnosis(ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection value)
	{
		this.isValidated = false;
		this.diagnosis = value;
	}
	public boolean getProceduresIsNotNull()
	{
		return this.procedures != null;
	}
	public ims.RefMan.vo.PatientProcedureApptDetailVoCollection getProcedures()
	{
		return this.procedures;
	}
	public void setProcedures(ims.RefMan.vo.PatientProcedureApptDetailVoCollection value)
	{
		this.isValidated = false;
		this.procedures = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.clinicalnotes != null)
		{
			if(!this.clinicalnotes.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.diagnosis != null)
		{
			if(!this.diagnosis.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.procedures != null)
		{
			if(!this.procedures.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.catsreferral == null)
			listOfErrors.add("CatsReferral is mandatory");
		if(this.clinicalnotes != null)
		{
			String[] listOfOtherErrors = this.clinicalnotes.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.diagnosis != null)
		{
			String[] listOfOtherErrors = this.diagnosis.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.procedures != null)
		{
			String[] listOfOtherErrors = this.procedures.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ReferralClinicalNotesVo clone = new ReferralClinicalNotesVo(this.id, this.version);
		
		clone.catsreferral = this.catsreferral;
		if(this.clinicalnotes == null)
			clone.clinicalnotes = null;
		else
			clone.clinicalnotes = (ims.RefMan.vo.AppointmentClinicalNotesVoCollection)this.clinicalnotes.clone();
		if(this.diagnosis == null)
			clone.diagnosis = null;
		else
			clone.diagnosis = (ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection)this.diagnosis.clone();
		if(this.procedures == null)
			clone.procedures = null;
		else
			clone.procedures = (ims.RefMan.vo.PatientProcedureApptDetailVoCollection)this.procedures.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ReferralClinicalNotesVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ReferralClinicalNotesVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ReferralClinicalNotesVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ReferralClinicalNotesVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.catsreferral != null)
			count++;
		if(this.clinicalnotes != null)
			count++;
		if(this.diagnosis != null)
			count++;
		if(this.procedures != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 4;
	}
	protected ims.RefMan.vo.CatsReferralRefVo catsreferral;
	protected ims.RefMan.vo.AppointmentClinicalNotesVoCollection clinicalnotes;
	protected ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection diagnosis;
	protected ims.RefMan.vo.PatientProcedureApptDetailVoCollection procedures;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
