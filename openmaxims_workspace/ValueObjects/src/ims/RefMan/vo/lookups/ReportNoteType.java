// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo.lookups;

import ims.framework.cn.data.TreeNode;
import java.util.ArrayList;
import ims.framework.utils.Image;
import ims.framework.utils.Color;

public class ReportNoteType extends ims.vo.LookupInstVo implements TreeNode
{
	private static final long serialVersionUID = 1L;

	public ReportNoteType()
	{
		super();
	}
	public ReportNoteType(int id)
	{
		super(id, "", true);
	}
	public ReportNoteType(int id, String text, boolean active)
	{
		super(id, text, active, null, null, null);
	}
	public ReportNoteType(int id, String text, boolean active, ReportNoteType parent, Image image)
	{
		super(id, text, active, parent, image);
	}
	public ReportNoteType(int id, String text, boolean active, ReportNoteType parent, Image image, Color color)
	{
		super(id, text, active, parent, image, color);
	}
	public ReportNoteType(int id, String text, boolean active, ReportNoteType parent, Image image, Color color, int order)
	{
		super(id, text, active, parent, image, color, order);
	}
	public static ReportNoteType buildLookup(ims.vo.LookupInstanceBean bean)
	{
		return new ReportNoteType(bean.getId(), bean.getText(), bean.isActive());
	}
	public String toString()
	{
		if(getText() != null)
			return getText();
		return "";
	}
	public TreeNode getParentNode()
	{
		return (ReportNoteType)super.getParentInstance();
	}
	public ReportNoteType getParent()
	{
		return (ReportNoteType)super.getParentInstance();
	}
	public void setParent(ReportNoteType parent)
	{
		super.setParentInstance(parent);
	}
	public TreeNode[] getChildren()
	{
		ArrayList children = super.getChildInstances();
		ReportNoteType[] typedChildren = new ReportNoteType[children.size()];
		for (int i = 0; i < children.size(); i++)
		{
			typedChildren[i] = (ReportNoteType)children.get(i);
		}
		return typedChildren;
	}
	public int addChild(TreeNode child)
	{
		if (child instanceof ReportNoteType)
		{
			super.addChild((ReportNoteType)child);
		}
		return super.getChildInstances().size();
	}
	public int removeChild(TreeNode child)
	{
		if (child instanceof ReportNoteType)
		{
			super.removeChild((ReportNoteType)child);
		}
		return super.getChildInstances().size();
	}
	public Image getExpandedImage()
	{
		return super.getImage();
	}
	public Image getCollapsedImage()
	{
		return super.getImage();
	}
	public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()
	{
		ReportNoteTypeCollection result = new ReportNoteTypeCollection();
		result.add(RESULTS_OR_FOLLOWUP_LETTER_TO_SECONDARY_CARE);
		result.add(RESULTS_OR_FOLLOWUP_LETTER_TO_GP);
		result.add(RESULTS_OR_FOLLOWUP_LETTER_TO_PATIENT);
		result.add(TLT_SUMMARY);
		result.add(DISCHARGE_LETTER);
		return result;
	}
	public static ReportNoteType[] getNegativeInstances()
	{
		ReportNoteType[] instances = new ReportNoteType[5];
		instances[0] = RESULTS_OR_FOLLOWUP_LETTER_TO_SECONDARY_CARE;
		instances[1] = RESULTS_OR_FOLLOWUP_LETTER_TO_GP;
		instances[2] = RESULTS_OR_FOLLOWUP_LETTER_TO_PATIENT;
		instances[3] = TLT_SUMMARY;
		instances[4] = DISCHARGE_LETTER;
		return instances;
	}
	public static String[] getNegativeInstanceNames()
	{
		String[] negativeInstances = new String[5];
		negativeInstances[0] = "RESULTS_OR_FOLLOWUP_LETTER_TO_SECONDARY_CARE";
		negativeInstances[1] = "RESULTS_OR_FOLLOWUP_LETTER_TO_GP";
		negativeInstances[2] = "RESULTS_OR_FOLLOWUP_LETTER_TO_PATIENT";
		negativeInstances[3] = "TLT_SUMMARY";
		negativeInstances[4] = "DISCHARGE_LETTER";
		return negativeInstances;
	}
	public static ReportNoteType getNegativeInstance(String name)
	{
		if(name == null)
			return null;
		String[] negativeInstances = getNegativeInstanceNames();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].equals(name))
				return getNegativeInstances()[i];
		}
		return null;
	}
	public static ReportNoteType getNegativeInstance(Integer id)
	{
		if(id == null)
			return null;
		ReportNoteType[] negativeInstances = getNegativeInstances();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].getID() == id)
				return negativeInstances[i];
		}
		return null;
	}
	public int getTypeId()
	{
		return TYPE_ID;
	}
	public static final int TYPE_ID = 1341023;
	public static final ReportNoteType RESULTS_OR_FOLLOWUP_LETTER_TO_SECONDARY_CARE = new ReportNoteType(-1856, "Results or Followup Letter to Secondary Care", true, null, null, Color.Default);
	public static final ReportNoteType RESULTS_OR_FOLLOWUP_LETTER_TO_GP = new ReportNoteType(-1857, "Results or Followup Letter to GP", true, null, null, Color.Default);
	public static final ReportNoteType RESULTS_OR_FOLLOWUP_LETTER_TO_PATIENT = new ReportNoteType(-1858, "Results or Followup Letter to Patient", true, null, null, Color.Default);
	public static final ReportNoteType TLT_SUMMARY = new ReportNoteType(-1859, "TLT Summary", true, null, null, Color.Default);
	public static final ReportNoteType DISCHARGE_LETTER = new ReportNoteType(-2157, "Discharge Letter", true, null, null, Color.Default);
}
