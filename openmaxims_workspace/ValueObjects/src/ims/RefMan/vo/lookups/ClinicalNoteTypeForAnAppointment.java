// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo.lookups;

import ims.framework.cn.data.TreeNode;
import java.util.ArrayList;
import ims.framework.utils.Image;
import ims.framework.utils.Color;

public class ClinicalNoteTypeForAnAppointment extends ims.vo.LookupInstVo implements TreeNode
{
	private static final long serialVersionUID = 1L;

	public ClinicalNoteTypeForAnAppointment()
	{
		super();
	}
	public ClinicalNoteTypeForAnAppointment(int id)
	{
		super(id, "", true);
	}
	public ClinicalNoteTypeForAnAppointment(int id, String text, boolean active)
	{
		super(id, text, active, null, null, null);
	}
	public ClinicalNoteTypeForAnAppointment(int id, String text, boolean active, ClinicalNoteTypeForAnAppointment parent, Image image)
	{
		super(id, text, active, parent, image);
	}
	public ClinicalNoteTypeForAnAppointment(int id, String text, boolean active, ClinicalNoteTypeForAnAppointment parent, Image image, Color color)
	{
		super(id, text, active, parent, image, color);
	}
	public ClinicalNoteTypeForAnAppointment(int id, String text, boolean active, ClinicalNoteTypeForAnAppointment parent, Image image, Color color, int order)
	{
		super(id, text, active, parent, image, color, order);
	}
	public static ClinicalNoteTypeForAnAppointment buildLookup(ims.vo.LookupInstanceBean bean)
	{
		return new ClinicalNoteTypeForAnAppointment(bean.getId(), bean.getText(), bean.isActive());
	}
	public String toString()
	{
		if(getText() != null)
			return getText();
		return "";
	}
	public TreeNode getParentNode()
	{
		return (ClinicalNoteTypeForAnAppointment)super.getParentInstance();
	}
	public ClinicalNoteTypeForAnAppointment getParent()
	{
		return (ClinicalNoteTypeForAnAppointment)super.getParentInstance();
	}
	public void setParent(ClinicalNoteTypeForAnAppointment parent)
	{
		super.setParentInstance(parent);
	}
	public TreeNode[] getChildren()
	{
		ArrayList children = super.getChildInstances();
		ClinicalNoteTypeForAnAppointment[] typedChildren = new ClinicalNoteTypeForAnAppointment[children.size()];
		for (int i = 0; i < children.size(); i++)
		{
			typedChildren[i] = (ClinicalNoteTypeForAnAppointment)children.get(i);
		}
		return typedChildren;
	}
	public int addChild(TreeNode child)
	{
		if (child instanceof ClinicalNoteTypeForAnAppointment)
		{
			super.addChild((ClinicalNoteTypeForAnAppointment)child);
		}
		return super.getChildInstances().size();
	}
	public int removeChild(TreeNode child)
	{
		if (child instanceof ClinicalNoteTypeForAnAppointment)
		{
			super.removeChild((ClinicalNoteTypeForAnAppointment)child);
		}
		return super.getChildInstances().size();
	}
	public Image getExpandedImage()
	{
		return super.getImage();
	}
	public Image getCollapsedImage()
	{
		return super.getImage();
	}
	public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()
	{
		ClinicalNoteTypeForAnAppointmentCollection result = new ClinicalNoteTypeForAnAppointmentCollection();
		result.add(CLINICAL_NOTES);
		result.add(CORRESPONDENCE_NOTES);
		result.add(FOLLOW_UP_NOTES);
		return result;
	}
	public static ClinicalNoteTypeForAnAppointment[] getNegativeInstances()
	{
		ClinicalNoteTypeForAnAppointment[] instances = new ClinicalNoteTypeForAnAppointment[3];
		instances[0] = CLINICAL_NOTES;
		instances[1] = CORRESPONDENCE_NOTES;
		instances[2] = FOLLOW_UP_NOTES;
		return instances;
	}
	public static String[] getNegativeInstanceNames()
	{
		String[] negativeInstances = new String[3];
		negativeInstances[0] = "CLINICAL_NOTES";
		negativeInstances[1] = "CORRESPONDENCE_NOTES";
		negativeInstances[2] = "FOLLOW_UP_NOTES";
		return negativeInstances;
	}
	public static ClinicalNoteTypeForAnAppointment getNegativeInstance(String name)
	{
		if(name == null)
			return null;
		String[] negativeInstances = getNegativeInstanceNames();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].equals(name))
				return getNegativeInstances()[i];
		}
		return null;
	}
	public static ClinicalNoteTypeForAnAppointment getNegativeInstance(Integer id)
	{
		if(id == null)
			return null;
		ClinicalNoteTypeForAnAppointment[] negativeInstances = getNegativeInstances();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].getID() == id)
				return negativeInstances[i];
		}
		return null;
	}
	public int getTypeId()
	{
		return TYPE_ID;
	}
	public static final int TYPE_ID = 1341035;
	public static final ClinicalNoteTypeForAnAppointment CLINICAL_NOTES = new ClinicalNoteTypeForAnAppointment(-2207, "Clinical Notes", true, null, null, Color.Default);
	public static final ClinicalNoteTypeForAnAppointment CORRESPONDENCE_NOTES = new ClinicalNoteTypeForAnAppointment(-2208, "Correspondence Notes ", true, null, null, Color.Default);
	public static final ClinicalNoteTypeForAnAppointment FOLLOW_UP_NOTES = new ClinicalNoteTypeForAnAppointment(-2209, "Follow-up Notes", true, null, null, Color.Default);
}
