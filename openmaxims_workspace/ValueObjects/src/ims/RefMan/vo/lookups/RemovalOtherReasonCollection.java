// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo.lookups;

import ims.framework.cn.data.TreeModel;
import ims.framework.cn.data.TreeNode;
import ims.vo.LookupInstanceCollection;
import ims.vo.LookupInstVo;

public class RemovalOtherReasonCollection extends LookupInstanceCollection implements ims.vo.ImsCloneable, TreeModel
{
	private static final long serialVersionUID = 1L;
	public void add(RemovalOtherReason value)
	{
		super.add(value);
	}
	public int indexOf(RemovalOtherReason instance)
	{
		return super.indexOf(instance);
	}
	public boolean contains(RemovalOtherReason instance)
	{
		return indexOf(instance) >= 0;
	}
	public RemovalOtherReason get(int index)
	{
		return (RemovalOtherReason)super.getIndex(index);
	}
	public void remove(RemovalOtherReason instance)
	{
		if(instance != null)
		{
			int index = indexOf(instance);
			if(index >= 0)
				remove(index);
		}
	}
	public Object clone()
	{
		RemovalOtherReasonCollection newCol = new RemovalOtherReasonCollection();
		RemovalOtherReason item;
		for (int i = 0; i < super.size(); i++)
		{
			item = this.get(i);
			newCol.add(new RemovalOtherReason(item.getID(), item.getText(), item.isActive(), item.getParent(), item.getImage(), item.getColor(), item.getOrder()));
		}
		for (int i = 0; i < newCol.size(); i++)
		{
			item = newCol.get(i);
			if (item.getParent() != null)
			{
				int parentIndex = this.indexOf(item.getParent());
				if(parentIndex >= 0)
					item.setParent(newCol.get(parentIndex));
				else
					item.setParent((RemovalOtherReason)item.getParent().clone());
			}
		}
		return newCol;
	}
	public RemovalOtherReason getInstance(int instanceId)
	{
		return (RemovalOtherReason)super.getInstanceById(instanceId);
	}
	public TreeNode[] getRootNodes()
	{
		LookupInstVo[] roots = super.getRoots();
		TreeNode[] nodes = new TreeNode[roots.length];
		System.arraycopy(roots, 0, nodes, 0, roots.length);
		return nodes;
	}
	public RemovalOtherReason[] toArray()
	{
		RemovalOtherReason[] arr = new RemovalOtherReason[this.size()];
		super.toArray(arr);
		return arr;
	}
	public static RemovalOtherReasonCollection buildFromBeanCollection(java.util.Collection beans)
	{
		RemovalOtherReasonCollection coll = new RemovalOtherReasonCollection();
		if(beans == null)
			return coll;
		java.util.Iterator iter = beans.iterator();
		while(iter.hasNext())
		{
			coll.add(RemovalOtherReason.buildLookup((ims.vo.LookupInstanceBean)iter.next()));
		}
		return coll;
	}
	public static RemovalOtherReasonCollection buildFromBeanCollection(ims.vo.LookupInstanceBean[] beans)
	{
		RemovalOtherReasonCollection coll = new RemovalOtherReasonCollection();
		if(beans == null)
			return coll;
		for(int x = 0; x < beans.length; x++)
		{
			coll.add(RemovalOtherReason.buildLookup(beans[x]));
		}
		return coll;
	}
}
