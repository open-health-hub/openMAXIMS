// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to core.configuration.ElectiveListConfiguration business object (ID: 1028100072).
 */
public class PatientElectiveListConfigForReferralDetailsVo extends ims.core.configuration.vo.ElectiveListConfigurationRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientElectiveListConfigForReferralDetailsVo()
	{
	}
	public PatientElectiveListConfigForReferralDetailsVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientElectiveListConfigForReferralDetailsVo(ims.RefMan.vo.beans.PatientElectiveListConfigForReferralDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.waitinglistname = bean.getWaitingListName();
		this.isactive = bean.getIsActive();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.PatientElectiveListConfigForReferralDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.waitinglistname = bean.getWaitingListName();
		this.isactive = bean.getIsActive();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.PatientElectiveListConfigForReferralDetailsVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.PatientElectiveListConfigForReferralDetailsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.PatientElectiveListConfigForReferralDetailsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("WAITINGLISTNAME"))
			return getWaitingListName();
		if(fieldName.equals("ISACTIVE"))
			return getIsActive();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getWaitingListNameIsNotNull()
	{
		return this.waitinglistname != null;
	}
	public String getWaitingListName()
	{
		return this.waitinglistname;
	}
	public static int getWaitingListNameMaxLength()
	{
		return 150;
	}
	public void setWaitingListName(String value)
	{
		this.isValidated = false;
		this.waitinglistname = value;
	}
	public boolean getIsActiveIsNotNull()
	{
		return this.isactive != null;
	}
	public Boolean getIsActive()
	{
		return this.isactive;
	}
	public void setIsActive(Boolean value)
	{
		this.isValidated = false;
		this.isactive = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.waitinglistname == null || this.waitinglistname.length() == 0)
			listOfErrors.add("WaitingListName is mandatory");
		else if(this.waitinglistname.length() > 150)
			listOfErrors.add("The length of the field [waitinglistname] in the value object [ims.RefMan.vo.PatientElectiveListConfigForReferralDetailsVo] is too big. It should be less or equal to 150");
		if(this.isactive == null)
			listOfErrors.add("IsActive is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientElectiveListConfigForReferralDetailsVo clone = new PatientElectiveListConfigForReferralDetailsVo(this.id, this.version);
		
		clone.waitinglistname = this.waitinglistname;
		clone.isactive = this.isactive;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientElectiveListConfigForReferralDetailsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientElectiveListConfigForReferralDetailsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientElectiveListConfigForReferralDetailsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientElectiveListConfigForReferralDetailsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.waitinglistname != null)
			count++;
		if(this.isactive != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 2;
	}
	protected String waitinglistname;
	protected Boolean isactive;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
