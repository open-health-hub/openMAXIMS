// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;


public class IFCATSExternalEventVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public IFCATSExternalEventVo()
	{
	}
	public IFCATSExternalEventVo(ims.RefMan.vo.beans.IFCATSExternalEventVoBean bean)
	{
		this.appointmentid = bean.getAppointmentID();
		this.referralid = bean.getReferralID();
		this.transportarranged = bean.getTransportArranged();
		this.interperterrequired = bean.getInterperterRequired();
		this.commentsontransport = bean.getCommentsOnTransport();
		this.documenttype = bean.getDocumentType();
		this.documentformat = bean.getDocumentFormat();
		this.startdatetime = bean.getStartDateTime() == null ? null : bean.getStartDateTime().buildDateTime();
		this.enddatetime = bean.getEndDateTime() == null ? null : bean.getEndDateTime().buildDateTime();
		this.orderid = bean.getOrderID();
		this.eventtype = bean.getEventType();
		this.documentpath = bean.getDocumentPath();
		this.appointmentstatuscode = bean.getAppointmentStatusCode();
		this.appointmentstatuscomment = bean.getAppointmentStatusComment();
		this.appointmentlocationcode = bean.getAppointmentLocationCode();
		this.appointmentparentlocationcode = bean.getAppointmentParentLocationCode();
		this.ubrn = bean.getUBRN();
		this.referralcreationdate = bean.getReferralCreationDate() == null ? null : bean.getReferralCreationDate().buildDateTime();
		this.practicename = bean.getPracticeName();
		this.practicecode = bean.getPracticeCode();
		this.practiceaddress = bean.getPracticeAddress() == null ? null : bean.getPracticeAddress().buildVo();
		this.contracttype = bean.getContractType() == null ? null : bean.getContractType().buildLookupInstVo();
		this.contractid = bean.getContractId();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.IFCATSExternalEventVoBean bean)
	{
		this.appointmentid = bean.getAppointmentID();
		this.referralid = bean.getReferralID();
		this.transportarranged = bean.getTransportArranged();
		this.interperterrequired = bean.getInterperterRequired();
		this.commentsontransport = bean.getCommentsOnTransport();
		this.documenttype = bean.getDocumentType();
		this.documentformat = bean.getDocumentFormat();
		this.startdatetime = bean.getStartDateTime() == null ? null : bean.getStartDateTime().buildDateTime();
		this.enddatetime = bean.getEndDateTime() == null ? null : bean.getEndDateTime().buildDateTime();
		this.orderid = bean.getOrderID();
		this.eventtype = bean.getEventType();
		this.documentpath = bean.getDocumentPath();
		this.appointmentstatuscode = bean.getAppointmentStatusCode();
		this.appointmentstatuscomment = bean.getAppointmentStatusComment();
		this.appointmentlocationcode = bean.getAppointmentLocationCode();
		this.appointmentparentlocationcode = bean.getAppointmentParentLocationCode();
		this.ubrn = bean.getUBRN();
		this.referralcreationdate = bean.getReferralCreationDate() == null ? null : bean.getReferralCreationDate().buildDateTime();
		this.practicename = bean.getPracticeName();
		this.practicecode = bean.getPracticeCode();
		this.practiceaddress = bean.getPracticeAddress() == null ? null : bean.getPracticeAddress().buildVo(map);
		this.contracttype = bean.getContractType() == null ? null : bean.getContractType().buildLookupInstVo();
		this.contractid = bean.getContractId();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.IFCATSExternalEventVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.IFCATSExternalEventVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.IFCATSExternalEventVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getAppointmentIDIsNotNull()
	{
		return this.appointmentid != null;
	}
	public String getAppointmentID()
	{
		return this.appointmentid;
	}
	public static int getAppointmentIDMaxLength()
	{
		return 255;
	}
	public void setAppointmentID(String value)
	{
		this.isValidated = false;
		this.appointmentid = value;
	}
	public boolean getReferralIDIsNotNull()
	{
		return this.referralid != null;
	}
	public String getReferralID()
	{
		return this.referralid;
	}
	public static int getReferralIDMaxLength()
	{
		return 255;
	}
	public void setReferralID(String value)
	{
		this.isValidated = false;
		this.referralid = value;
	}
	public boolean getTransportArrangedIsNotNull()
	{
		return this.transportarranged != null;
	}
	public String getTransportArranged()
	{
		return this.transportarranged;
	}
	public static int getTransportArrangedMaxLength()
	{
		return 255;
	}
	public void setTransportArranged(String value)
	{
		this.isValidated = false;
		this.transportarranged = value;
	}
	public boolean getInterperterRequiredIsNotNull()
	{
		return this.interperterrequired != null;
	}
	public String getInterperterRequired()
	{
		return this.interperterrequired;
	}
	public static int getInterperterRequiredMaxLength()
	{
		return 255;
	}
	public void setInterperterRequired(String value)
	{
		this.isValidated = false;
		this.interperterrequired = value;
	}
	public boolean getCommentsOnTransportIsNotNull()
	{
		return this.commentsontransport != null;
	}
	public String getCommentsOnTransport()
	{
		return this.commentsontransport;
	}
	public static int getCommentsOnTransportMaxLength()
	{
		return 255;
	}
	public void setCommentsOnTransport(String value)
	{
		this.isValidated = false;
		this.commentsontransport = value;
	}
	public boolean getDocumentTypeIsNotNull()
	{
		return this.documenttype != null;
	}
	public String getDocumentType()
	{
		return this.documenttype;
	}
	public static int getDocumentTypeMaxLength()
	{
		return 255;
	}
	public void setDocumentType(String value)
	{
		this.isValidated = false;
		this.documenttype = value;
	}
	public boolean getDocumentFormatIsNotNull()
	{
		return this.documentformat != null;
	}
	public String getDocumentFormat()
	{
		return this.documentformat;
	}
	public static int getDocumentFormatMaxLength()
	{
		return 255;
	}
	public void setDocumentFormat(String value)
	{
		this.isValidated = false;
		this.documentformat = value;
	}
	public boolean getStartDateTimeIsNotNull()
	{
		return this.startdatetime != null;
	}
	public ims.framework.utils.DateTime getStartDateTime()
	{
		return this.startdatetime;
	}
	public void setStartDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.startdatetime = value;
	}
	public boolean getEndDateTimeIsNotNull()
	{
		return this.enddatetime != null;
	}
	public ims.framework.utils.DateTime getEndDateTime()
	{
		return this.enddatetime;
	}
	public void setEndDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.enddatetime = value;
	}
	public boolean getOrderIDIsNotNull()
	{
		return this.orderid != null;
	}
	public String getOrderID()
	{
		return this.orderid;
	}
	public static int getOrderIDMaxLength()
	{
		return 255;
	}
	public void setOrderID(String value)
	{
		this.isValidated = false;
		this.orderid = value;
	}
	public boolean getEventTypeIsNotNull()
	{
		return this.eventtype != null;
	}
	public String getEventType()
	{
		return this.eventtype;
	}
	public static int getEventTypeMaxLength()
	{
		return 255;
	}
	public void setEventType(String value)
	{
		this.isValidated = false;
		this.eventtype = value;
	}
	public boolean getDocumentPathIsNotNull()
	{
		return this.documentpath != null;
	}
	public String getDocumentPath()
	{
		return this.documentpath;
	}
	public static int getDocumentPathMaxLength()
	{
		return 255;
	}
	public void setDocumentPath(String value)
	{
		this.isValidated = false;
		this.documentpath = value;
	}
	public boolean getAppointmentStatusCodeIsNotNull()
	{
		return this.appointmentstatuscode != null;
	}
	public String getAppointmentStatusCode()
	{
		return this.appointmentstatuscode;
	}
	public static int getAppointmentStatusCodeMaxLength()
	{
		return 255;
	}
	public void setAppointmentStatusCode(String value)
	{
		this.isValidated = false;
		this.appointmentstatuscode = value;
	}
	public boolean getAppointmentStatusCommentIsNotNull()
	{
		return this.appointmentstatuscomment != null;
	}
	public String getAppointmentStatusComment()
	{
		return this.appointmentstatuscomment;
	}
	public static int getAppointmentStatusCommentMaxLength()
	{
		return 255;
	}
	public void setAppointmentStatusComment(String value)
	{
		this.isValidated = false;
		this.appointmentstatuscomment = value;
	}
	public boolean getAppointmentLocationCodeIsNotNull()
	{
		return this.appointmentlocationcode != null;
	}
	public String getAppointmentLocationCode()
	{
		return this.appointmentlocationcode;
	}
	public static int getAppointmentLocationCodeMaxLength()
	{
		return 255;
	}
	public void setAppointmentLocationCode(String value)
	{
		this.isValidated = false;
		this.appointmentlocationcode = value;
	}
	public boolean getAppointmentParentLocationCodeIsNotNull()
	{
		return this.appointmentparentlocationcode != null;
	}
	public String getAppointmentParentLocationCode()
	{
		return this.appointmentparentlocationcode;
	}
	public static int getAppointmentParentLocationCodeMaxLength()
	{
		return 255;
	}
	public void setAppointmentParentLocationCode(String value)
	{
		this.isValidated = false;
		this.appointmentparentlocationcode = value;
	}
	public boolean getUBRNIsNotNull()
	{
		return this.ubrn != null;
	}
	public String getUBRN()
	{
		return this.ubrn;
	}
	public static int getUBRNMaxLength()
	{
		return 255;
	}
	public void setUBRN(String value)
	{
		this.isValidated = false;
		this.ubrn = value;
	}
	public boolean getReferralCreationDateIsNotNull()
	{
		return this.referralcreationdate != null;
	}
	public ims.framework.utils.DateTime getReferralCreationDate()
	{
		return this.referralcreationdate;
	}
	public void setReferralCreationDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.referralcreationdate = value;
	}
	public boolean getPracticeNameIsNotNull()
	{
		return this.practicename != null;
	}
	public String getPracticeName()
	{
		return this.practicename;
	}
	public static int getPracticeNameMaxLength()
	{
		return 255;
	}
	public void setPracticeName(String value)
	{
		this.isValidated = false;
		this.practicename = value;
	}
	public boolean getPracticeCodeIsNotNull()
	{
		return this.practicecode != null;
	}
	public String getPracticeCode()
	{
		return this.practicecode;
	}
	public static int getPracticeCodeMaxLength()
	{
		return 255;
	}
	public void setPracticeCode(String value)
	{
		this.isValidated = false;
		this.practicecode = value;
	}
	public boolean getPracticeAddressIsNotNull()
	{
		return this.practiceaddress != null;
	}
	public ims.core.vo.PersonAddress getPracticeAddress()
	{
		return this.practiceaddress;
	}
	public void setPracticeAddress(ims.core.vo.PersonAddress value)
	{
		this.isValidated = false;
		this.practiceaddress = value;
	}
	public boolean getContractTypeIsNotNull()
	{
		return this.contracttype != null;
	}
	public ims.vo.LookupInstVo getContractType()
	{
		return this.contracttype;
	}
	public void setContractType(ims.vo.LookupInstVo value)
	{
		this.isValidated = false;
		this.contracttype = value;
	}
	public boolean getContractIdIsNotNull()
	{
		return this.contractid != null;
	}
	public String getContractId()
	{
		return this.contractid;
	}
	public static int getContractIdMaxLength()
	{
		return 255;
	}
	public void setContractId(String value)
	{
		this.isValidated = false;
		this.contractid = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof IFCATSExternalEventVo))
			return false;
		IFCATSExternalEventVo compareObj = (IFCATSExternalEventVo)obj;
		if(this.getAppointmentID() == null && compareObj.getAppointmentID() != null)
			return false;
		if(this.getAppointmentID() != null && compareObj.getAppointmentID() == null)
			return false;
		if(this.getAppointmentID() != null && compareObj.getAppointmentID() != null)
			if(!this.getAppointmentID().equals(compareObj.getAppointmentID()))
				return false;
		if(this.getReferralID() == null && compareObj.getReferralID() != null)
			return false;
		if(this.getReferralID() != null && compareObj.getReferralID() == null)
			return false;
		if(this.getReferralID() != null && compareObj.getReferralID() != null)
			if(!this.getReferralID().equals(compareObj.getReferralID()))
				return false;
		if(this.getOrderID() == null && compareObj.getOrderID() != null)
			return false;
		if(this.getOrderID() != null && compareObj.getOrderID() == null)
			return false;
		if(this.getOrderID() != null && compareObj.getOrderID() != null)
			if(!this.getOrderID().equals(compareObj.getOrderID()))
				return false;
		if(this.getEventType() == null && compareObj.getEventType() != null)
			return false;
		if(this.getEventType() != null && compareObj.getEventType() == null)
			return false;
		if(this.getEventType() != null && compareObj.getEventType() != null)
			return this.getEventType().equals(compareObj.getEventType());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		IFCATSExternalEventVo clone = new IFCATSExternalEventVo();
		
		clone.appointmentid = this.appointmentid;
		clone.referralid = this.referralid;
		clone.transportarranged = this.transportarranged;
		clone.interperterrequired = this.interperterrequired;
		clone.commentsontransport = this.commentsontransport;
		clone.documenttype = this.documenttype;
		clone.documentformat = this.documentformat;
		if(this.startdatetime == null)
			clone.startdatetime = null;
		else
			clone.startdatetime = (ims.framework.utils.DateTime)this.startdatetime.clone();
		if(this.enddatetime == null)
			clone.enddatetime = null;
		else
			clone.enddatetime = (ims.framework.utils.DateTime)this.enddatetime.clone();
		clone.orderid = this.orderid;
		clone.eventtype = this.eventtype;
		clone.documentpath = this.documentpath;
		clone.appointmentstatuscode = this.appointmentstatuscode;
		clone.appointmentstatuscomment = this.appointmentstatuscomment;
		clone.appointmentlocationcode = this.appointmentlocationcode;
		clone.appointmentparentlocationcode = this.appointmentparentlocationcode;
		clone.ubrn = this.ubrn;
		if(this.referralcreationdate == null)
			clone.referralcreationdate = null;
		else
			clone.referralcreationdate = (ims.framework.utils.DateTime)this.referralcreationdate.clone();
		clone.practicename = this.practicename;
		clone.practicecode = this.practicecode;
		if(this.practiceaddress == null)
			clone.practiceaddress = null;
		else
			clone.practiceaddress = (ims.core.vo.PersonAddress)this.practiceaddress.clone();
		clone.contracttype = this.contracttype;
		clone.contractid = this.contractid;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(IFCATSExternalEventVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A IFCATSExternalEventVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		IFCATSExternalEventVo compareObj = (IFCATSExternalEventVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getAppointmentID() == null && compareObj.getAppointmentID() != null)
				return -1;
			if(this.getAppointmentID() != null && compareObj.getAppointmentID() == null)
				return 1;
			if(this.getAppointmentID() != null && compareObj.getAppointmentID() != null)
			{
				if(caseInsensitive)
					retVal = this.getAppointmentID().toLowerCase().compareTo(compareObj.getAppointmentID().toLowerCase());
				else
					retVal = this.getAppointmentID().compareTo(compareObj.getAppointmentID());
			}
		}
		if (retVal == 0)
		{
			if(this.getReferralID() == null && compareObj.getReferralID() != null)
				return -1;
			if(this.getReferralID() != null && compareObj.getReferralID() == null)
				return 1;
			if(this.getReferralID() != null && compareObj.getReferralID() != null)
			{
				if(caseInsensitive)
					retVal = this.getReferralID().toLowerCase().compareTo(compareObj.getReferralID().toLowerCase());
				else
					retVal = this.getReferralID().compareTo(compareObj.getReferralID());
			}
		}
		if (retVal == 0)
		{
			if(this.getOrderID() == null && compareObj.getOrderID() != null)
				return -1;
			if(this.getOrderID() != null && compareObj.getOrderID() == null)
				return 1;
			if(this.getOrderID() != null && compareObj.getOrderID() != null)
			{
				if(caseInsensitive)
					retVal = this.getOrderID().toLowerCase().compareTo(compareObj.getOrderID().toLowerCase());
				else
					retVal = this.getOrderID().compareTo(compareObj.getOrderID());
			}
		}
		if (retVal == 0)
		{
			if(this.getEventType() == null && compareObj.getEventType() != null)
				return -1;
			if(this.getEventType() != null && compareObj.getEventType() == null)
				return 1;
			if(this.getEventType() != null && compareObj.getEventType() != null)
			{
				if(caseInsensitive)
					retVal = this.getEventType().toLowerCase().compareTo(compareObj.getEventType().toLowerCase());
				else
					retVal = this.getEventType().compareTo(compareObj.getEventType());
			}
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.appointmentid != null)
			count++;
		if(this.referralid != null)
			count++;
		if(this.transportarranged != null)
			count++;
		if(this.interperterrequired != null)
			count++;
		if(this.commentsontransport != null)
			count++;
		if(this.documenttype != null)
			count++;
		if(this.documentformat != null)
			count++;
		if(this.startdatetime != null)
			count++;
		if(this.enddatetime != null)
			count++;
		if(this.orderid != null)
			count++;
		if(this.eventtype != null)
			count++;
		if(this.documentpath != null)
			count++;
		if(this.appointmentstatuscode != null)
			count++;
		if(this.appointmentstatuscomment != null)
			count++;
		if(this.appointmentlocationcode != null)
			count++;
		if(this.appointmentparentlocationcode != null)
			count++;
		if(this.ubrn != null)
			count++;
		if(this.referralcreationdate != null)
			count++;
		if(this.practicename != null)
			count++;
		if(this.practicecode != null)
			count++;
		if(this.practiceaddress != null)
			count++;
		if(this.contracttype != null)
			count++;
		if(this.contractid != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 23;
	}
	protected String appointmentid;
	protected String referralid;
	protected String transportarranged;
	protected String interperterrequired;
	protected String commentsontransport;
	protected String documenttype;
	protected String documentformat;
	protected ims.framework.utils.DateTime startdatetime;
	protected ims.framework.utils.DateTime enddatetime;
	protected String orderid;
	protected String eventtype;
	protected String documentpath;
	protected String appointmentstatuscode;
	protected String appointmentstatuscomment;
	protected String appointmentlocationcode;
	protected String appointmentparentlocationcode;
	protected String ubrn;
	protected ims.framework.utils.DateTime referralcreationdate;
	protected String practicename;
	protected String practicecode;
	protected ims.core.vo.PersonAddress practiceaddress;
	protected ims.vo.LookupInstVo contracttype;
	protected String contractid;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
