//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.vo;

/**
 * Linked to OCRR.Configuration.OrderEntryTemplateComponent business object (ID: 1061100006).
 */
public class OrderEntryTemplateComponentShortVo extends ims.ocrr.configuration.vo.OrderEntryTemplateComponentRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public OrderEntryTemplateComponentShortVo()
	{
	}
	public OrderEntryTemplateComponentShortVo(Integer id, int version)
	{
		super(id, version);
	}
	public OrderEntryTemplateComponentShortVo(ims.ocrr.vo.beans.OrderEntryTemplateComponentShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.sequence = bean.getSequence();
		this.investigation = bean.getInvestigation() == null ? null : bean.getInvestigation().buildVo();
		this.orderset = bean.getOrderSet() == null ? null : bean.getOrderSet().buildVo();
		this.divider = bean.getDivider() == null ? null : ims.ocrr.vo.lookups.TemplateDividerType.buildLookup(bean.getDivider());
		this.dividerisbold = bean.getDividerIsBold();
		this.dividertext = bean.getDividerText();
		this.dividercolour = bean.getDividerColour() == null ? null : bean.getDividerColour().buildColor();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.ocrr.vo.beans.OrderEntryTemplateComponentShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.sequence = bean.getSequence();
		this.investigation = bean.getInvestigation() == null ? null : bean.getInvestigation().buildVo(map);
		this.orderset = bean.getOrderSet() == null ? null : bean.getOrderSet().buildVo(map);
		this.divider = bean.getDivider() == null ? null : ims.ocrr.vo.lookups.TemplateDividerType.buildLookup(bean.getDivider());
		this.dividerisbold = bean.getDividerIsBold();
		this.dividertext = bean.getDividerText();
		this.dividercolour = bean.getDividerColour() == null ? null : bean.getDividerColour().buildColor();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.ocrr.vo.beans.OrderEntryTemplateComponentShortVoBean bean = null;
		if(map != null)
			bean = (ims.ocrr.vo.beans.OrderEntryTemplateComponentShortVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.ocrr.vo.beans.OrderEntryTemplateComponentShortVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("SEQUENCE"))
			return getSequence();
		if(fieldName.equals("INVESTIGATION"))
			return getInvestigation();
		if(fieldName.equals("ORDERSET"))
			return getOrderSet();
		if(fieldName.equals("DIVIDER"))
			return getDivider();
		if(fieldName.equals("DIVIDERISBOLD"))
			return getDividerIsBold();
		if(fieldName.equals("DIVIDERTEXT"))
			return getDividerText();
		if(fieldName.equals("DIVIDERCOLOUR"))
			return getDividerColour();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getSequenceIsNotNull()
	{
		return this.sequence != null;
	}
	public Integer getSequence()
	{
		return this.sequence;
	}
	public void setSequence(Integer value)
	{
		this.isValidated = false;
		this.sequence = value;
	}
	public boolean getInvestigationIsNotNull()
	{
		return this.investigation != null;
	}
	public ims.ocrr.vo.InvestShortVo getInvestigation()
	{
		return this.investigation;
	}
	public void setInvestigation(ims.ocrr.vo.InvestShortVo value)
	{
		this.isValidated = false;
		this.investigation = value;
	}
	public boolean getOrderSetIsNotNull()
	{
		return this.orderset != null;
	}
	public ims.ocrr.vo.OrderSetForHelpTextVo getOrderSet()
	{
		return this.orderset;
	}
	public void setOrderSet(ims.ocrr.vo.OrderSetForHelpTextVo value)
	{
		this.isValidated = false;
		this.orderset = value;
	}
	public boolean getDividerIsNotNull()
	{
		return this.divider != null;
	}
	public ims.ocrr.vo.lookups.TemplateDividerType getDivider()
	{
		return this.divider;
	}
	public void setDivider(ims.ocrr.vo.lookups.TemplateDividerType value)
	{
		this.isValidated = false;
		this.divider = value;
	}
	public boolean getDividerIsBoldIsNotNull()
	{
		return this.dividerisbold != null;
	}
	public Boolean getDividerIsBold()
	{
		return this.dividerisbold;
	}
	public void setDividerIsBold(Boolean value)
	{
		this.isValidated = false;
		this.dividerisbold = value;
	}
	public boolean getDividerTextIsNotNull()
	{
		return this.dividertext != null;
	}
	public String getDividerText()
	{
		return this.dividertext;
	}
	public static int getDividerTextMaxLength()
	{
		return 30;
	}
	public void setDividerText(String value)
	{
		this.isValidated = false;
		this.dividertext = value;
	}
	public boolean getDividerColourIsNotNull()
	{
		return this.dividercolour != null;
	}
	public ims.framework.utils.Color getDividerColour()
	{
		return this.dividercolour;
	}
	public void setDividerColour(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.dividercolour = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.investigation != null)
		{
			if(!this.investigation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.orderset != null)
		{
			if(!this.orderset.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.sequence == null)
			listOfErrors.add("Sequence is mandatory");
		if(this.investigation != null)
		{
			String[] listOfOtherErrors = this.investigation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.orderset != null)
		{
			String[] listOfOtherErrors = this.orderset.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.dividertext != null)
			if(this.dividertext.length() > 30)
				listOfErrors.add("The length of the field [dividertext] in the value object [ims.ocrr.vo.OrderEntryTemplateComponentShortVo] is too big. It should be less or equal to 30");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		OrderEntryTemplateComponentShortVo clone = new OrderEntryTemplateComponentShortVo(this.id, this.version);
		
		clone.sequence = this.sequence;
		if(this.investigation == null)
			clone.investigation = null;
		else
			clone.investigation = (ims.ocrr.vo.InvestShortVo)this.investigation.clone();
		if(this.orderset == null)
			clone.orderset = null;
		else
			clone.orderset = (ims.ocrr.vo.OrderSetForHelpTextVo)this.orderset.clone();
		if(this.divider == null)
			clone.divider = null;
		else
			clone.divider = (ims.ocrr.vo.lookups.TemplateDividerType)this.divider.clone();
		clone.dividerisbold = this.dividerisbold;
		clone.dividertext = this.dividertext;
		if(this.dividercolour == null)
			clone.dividercolour = null;
		else
			clone.dividercolour = (ims.framework.utils.Color)this.dividercolour.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(OrderEntryTemplateComponentShortVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A OrderEntryTemplateComponentShortVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		OrderEntryTemplateComponentShortVo compareObj = (OrderEntryTemplateComponentShortVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getSequence() == null && compareObj.getSequence() != null)
				return -1;
			if(this.getSequence() != null && compareObj.getSequence() == null)
				return 1;
			if(this.getSequence() != null && compareObj.getSequence() != null)
				retVal = this.getSequence().compareTo(compareObj.getSequence());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.sequence != null)
			count++;
		if(this.investigation != null)
			count++;
		if(this.orderset != null)
			count++;
		if(this.divider != null)
			count++;
		if(this.dividerisbold != null)
			count++;
		if(this.dividertext != null)
			count++;
		if(this.dividercolour != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected Integer sequence;
	protected ims.ocrr.vo.InvestShortVo investigation;
	protected ims.ocrr.vo.OrderSetForHelpTextVo orderset;
	protected ims.ocrr.vo.lookups.TemplateDividerType divider;
	protected Boolean dividerisbold;
	protected String dividertext;
	protected ims.framework.utils.Color dividercolour;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
