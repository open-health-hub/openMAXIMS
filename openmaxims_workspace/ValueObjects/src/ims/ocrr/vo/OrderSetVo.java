//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.vo;

/**
 * Linked to OCRR.Configuration.OrderSet business object (ID: 1058100008).
 */
public class OrderSetVo extends ims.ocrr.configuration.vo.OrderSetRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public OrderSetVo()
	{
	}
	public OrderSetVo(Integer id, int version)
	{
		super(id, version);
	}
	public OrderSetVo(ims.ocrr.vo.beans.OrderSetVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.commonname = bean.getCommonName();
		this.description = bean.getDescription();
		this.component = ims.ocrr.vo.OrderSetComponentVoCollection.buildFromBeanCollection(bean.getComponent());
		this.color = bean.getColor() == null ? null : bean.getColor().buildColor();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.ocrr.vo.beans.OrderSetVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.commonname = bean.getCommonName();
		this.description = bean.getDescription();
		this.component = ims.ocrr.vo.OrderSetComponentVoCollection.buildFromBeanCollection(bean.getComponent());
		this.color = bean.getColor() == null ? null : bean.getColor().buildColor();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.ocrr.vo.beans.OrderSetVoBean bean = null;
		if(map != null)
			bean = (ims.ocrr.vo.beans.OrderSetVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.ocrr.vo.beans.OrderSetVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("NAME"))
			return getName();
		if(fieldName.equals("COMMONNAME"))
			return getCommonName();
		if(fieldName.equals("DESCRIPTION"))
			return getDescription();
		if(fieldName.equals("COMPONENT"))
			return getComponent();
		if(fieldName.equals("COLOR"))
			return getColor();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getNameIsNotNull()
	{
		return this.name != null;
	}
	public String getName()
	{
		return this.name;
	}
	public static int getNameMaxLength()
	{
		return 255;
	}
	public void setName(String value)
	{
		this.isValidated = false;
		this.name = value;
	}
	public boolean getCommonNameIsNotNull()
	{
		return this.commonname != null;
	}
	public String getCommonName()
	{
		return this.commonname;
	}
	public static int getCommonNameMaxLength()
	{
		return 255;
	}
	public void setCommonName(String value)
	{
		this.isValidated = false;
		this.commonname = value;
	}
	public boolean getDescriptionIsNotNull()
	{
		return this.description != null;
	}
	public String getDescription()
	{
		return this.description;
	}
	public static int getDescriptionMaxLength()
	{
		return 255;
	}
	public void setDescription(String value)
	{
		this.isValidated = false;
		this.description = value;
	}
	public boolean getComponentIsNotNull()
	{
		return this.component != null;
	}
	public ims.ocrr.vo.OrderSetComponentVoCollection getComponent()
	{
		return this.component;
	}
	public void setComponent(ims.ocrr.vo.OrderSetComponentVoCollection value)
	{
		this.isValidated = false;
		this.component = value;
	}
	public boolean getColorIsNotNull()
	{
		return this.color != null;
	}
	public ims.framework.utils.Color getColor()
	{
		return this.color;
	}
	public void setColor(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.color = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.component != null)
		{
			if(!this.component.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name == null || this.name.length() == 0)
			listOfErrors.add("Name is mandatory");
		else if(this.name.length() > 255)
			listOfErrors.add("The length of the field [name] in the value object [ims.ocrr.vo.OrderSetVo] is too big. It should be less or equal to 255");
		if(this.commonname == null || this.commonname.length() == 0)
			listOfErrors.add("CommonName is mandatory");
		else if(this.commonname.length() > 255)
			listOfErrors.add("The length of the field [commonname] in the value object [ims.ocrr.vo.OrderSetVo] is too big. It should be less or equal to 255");
		if(this.description == null || this.description.length() == 0)
			listOfErrors.add("Description is mandatory");
		else if(this.description.length() > 255)
			listOfErrors.add("The length of the field [description] in the value object [ims.ocrr.vo.OrderSetVo] is too big. It should be less or equal to 255");
		if(this.component != null)
		{
			String[] listOfOtherErrors = this.component.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		OrderSetVo clone = new OrderSetVo(this.id, this.version);
		
		clone.name = this.name;
		clone.commonname = this.commonname;
		clone.description = this.description;
		if(this.component == null)
			clone.component = null;
		else
			clone.component = (ims.ocrr.vo.OrderSetComponentVoCollection)this.component.clone();
		if(this.color == null)
			clone.color = null;
		else
			clone.color = (ims.framework.utils.Color)this.color.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(OrderSetVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A OrderSetVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		OrderSetVo compareObj = (OrderSetVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_OrderSet() == null && compareObj.getID_OrderSet() != null)
				return -1;
			if(this.getID_OrderSet() != null && compareObj.getID_OrderSet() == null)
				return 1;
			if(this.getID_OrderSet() != null && compareObj.getID_OrderSet() != null)
				retVal = this.getID_OrderSet().compareTo(compareObj.getID_OrderSet());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.name != null)
			count++;
		if(this.commonname != null)
			count++;
		if(this.description != null)
			count++;
		if(this.component != null)
			count++;
		if(this.color != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected String name;
	protected String commonname;
	protected String description;
	protected ims.ocrr.vo.OrderSetComponentVoCollection component;
	protected ims.framework.utils.Color color;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
