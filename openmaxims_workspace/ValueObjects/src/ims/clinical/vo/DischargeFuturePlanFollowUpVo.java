//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to eDischarge.FuturePlanFollowUp business object (ID: 1099100007).
 */
public class DischargeFuturePlanFollowUpVo extends ims.edischarge.vo.FuturePlanFollowUpRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public DischargeFuturePlanFollowUpVo()
	{
	}
	public DischargeFuturePlanFollowUpVo(Integer id, int version)
	{
		super(id, version);
	}
	public DischargeFuturePlanFollowUpVo(ims.clinical.vo.beans.DischargeFuturePlanFollowUpVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.followupinvalue = bean.getFollowUpInValue();
		this.followupinunit = bean.getFollowUpInUnit() == null ? null : ims.core.vo.lookups.TimeDaystoYears.buildLookup(bean.getFollowUpInUnit());
		this.followuphcp = bean.getFollowUpHCP() == null ? null : bean.getFollowUpHCP().buildVo();
		this.followupspecialty = bean.getFollowUpSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getFollowUpSpecialty());
		this.location = bean.getLocation() == null ? null : bean.getLocation().buildVo();
		this.hospitalfollowup = bean.getHospitalFollowUp() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getHospitalFollowUp());
		this.hospitaltofollowup = bean.getHospitalToFollowUp() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getHospitalToFollowUp().getId()), bean.getHospitalToFollowUp().getVersion());
		this.followuptype = bean.getFollowUpType() == null ? null : ims.core.vo.lookups.FollowUpType.buildLookup(bean.getFollowUpType());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.DischargeFuturePlanFollowUpVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.followupinvalue = bean.getFollowUpInValue();
		this.followupinunit = bean.getFollowUpInUnit() == null ? null : ims.core.vo.lookups.TimeDaystoYears.buildLookup(bean.getFollowUpInUnit());
		this.followuphcp = bean.getFollowUpHCP() == null ? null : bean.getFollowUpHCP().buildVo(map);
		this.followupspecialty = bean.getFollowUpSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getFollowUpSpecialty());
		this.location = bean.getLocation() == null ? null : bean.getLocation().buildVo(map);
		this.hospitalfollowup = bean.getHospitalFollowUp() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getHospitalFollowUp());
		this.hospitaltofollowup = bean.getHospitalToFollowUp() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getHospitalToFollowUp().getId()), bean.getHospitalToFollowUp().getVersion());
		this.followuptype = bean.getFollowUpType() == null ? null : ims.core.vo.lookups.FollowUpType.buildLookup(bean.getFollowUpType());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.DischargeFuturePlanFollowUpVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.DischargeFuturePlanFollowUpVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.DischargeFuturePlanFollowUpVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("FOLLOWUPINVALUE"))
			return getFollowUpInValue();
		if(fieldName.equals("FOLLOWUPINUNIT"))
			return getFollowUpInUnit();
		if(fieldName.equals("FOLLOWUPHCP"))
			return getFollowUpHCP();
		if(fieldName.equals("FOLLOWUPSPECIALTY"))
			return getFollowUpSpecialty();
		if(fieldName.equals("LOCATION"))
			return getLocation();
		if(fieldName.equals("HOSPITALFOLLOWUP"))
			return getHospitalFollowUp();
		if(fieldName.equals("HOSPITALTOFOLLOWUP"))
			return getHospitalToFollowUp();
		if(fieldName.equals("FOLLOWUPTYPE"))
			return getFollowUpType();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getFollowUpInValueIsNotNull()
	{
		return this.followupinvalue != null;
	}
	public Integer getFollowUpInValue()
	{
		return this.followupinvalue;
	}
	public void setFollowUpInValue(Integer value)
	{
		this.isValidated = false;
		this.followupinvalue = value;
	}
	public boolean getFollowUpInUnitIsNotNull()
	{
		return this.followupinunit != null;
	}
	public ims.core.vo.lookups.TimeDaystoYears getFollowUpInUnit()
	{
		return this.followupinunit;
	}
	public void setFollowUpInUnit(ims.core.vo.lookups.TimeDaystoYears value)
	{
		this.isValidated = false;
		this.followupinunit = value;
	}
	public boolean getFollowUpHCPIsNotNull()
	{
		return this.followuphcp != null;
	}
	public ims.core.vo.HcpLiteVo getFollowUpHCP()
	{
		return this.followuphcp;
	}
	public void setFollowUpHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.followuphcp = value;
	}
	public boolean getFollowUpSpecialtyIsNotNull()
	{
		return this.followupspecialty != null;
	}
	public ims.core.vo.lookups.Specialty getFollowUpSpecialty()
	{
		return this.followupspecialty;
	}
	public void setFollowUpSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.followupspecialty = value;
	}
	public boolean getLocationIsNotNull()
	{
		return this.location != null;
	}
	public ims.core.vo.LocationLiteVo getLocation()
	{
		return this.location;
	}
	public void setLocation(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.location = value;
	}
	public boolean getHospitalFollowUpIsNotNull()
	{
		return this.hospitalfollowup != null;
	}
	public ims.core.vo.lookups.YesNo getHospitalFollowUp()
	{
		return this.hospitalfollowup;
	}
	public void setHospitalFollowUp(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.hospitalfollowup = value;
	}
	public boolean getHospitalToFollowUpIsNotNull()
	{
		return this.hospitaltofollowup != null;
	}
	public ims.core.resource.place.vo.LocationRefVo getHospitalToFollowUp()
	{
		return this.hospitaltofollowup;
	}
	public void setHospitalToFollowUp(ims.core.resource.place.vo.LocationRefVo value)
	{
		this.isValidated = false;
		this.hospitaltofollowup = value;
	}
	public boolean getFollowUpTypeIsNotNull()
	{
		return this.followuptype != null;
	}
	public ims.core.vo.lookups.FollowUpType getFollowUpType()
	{
		return this.followuptype;
	}
	public void setFollowUpType(ims.core.vo.lookups.FollowUpType value)
	{
		this.isValidated = false;
		this.followuptype = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.hospitalfollowup == null)
			listOfErrors.add("HospitalFollowUp is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		DischargeFuturePlanFollowUpVo clone = new DischargeFuturePlanFollowUpVo(this.id, this.version);
		
		clone.followupinvalue = this.followupinvalue;
		if(this.followupinunit == null)
			clone.followupinunit = null;
		else
			clone.followupinunit = (ims.core.vo.lookups.TimeDaystoYears)this.followupinunit.clone();
		if(this.followuphcp == null)
			clone.followuphcp = null;
		else
			clone.followuphcp = (ims.core.vo.HcpLiteVo)this.followuphcp.clone();
		if(this.followupspecialty == null)
			clone.followupspecialty = null;
		else
			clone.followupspecialty = (ims.core.vo.lookups.Specialty)this.followupspecialty.clone();
		if(this.location == null)
			clone.location = null;
		else
			clone.location = (ims.core.vo.LocationLiteVo)this.location.clone();
		if(this.hospitalfollowup == null)
			clone.hospitalfollowup = null;
		else
			clone.hospitalfollowup = (ims.core.vo.lookups.YesNo)this.hospitalfollowup.clone();
		clone.hospitaltofollowup = this.hospitaltofollowup;
		if(this.followuptype == null)
			clone.followuptype = null;
		else
			clone.followuptype = (ims.core.vo.lookups.FollowUpType)this.followuptype.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(DischargeFuturePlanFollowUpVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A DischargeFuturePlanFollowUpVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((DischargeFuturePlanFollowUpVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((DischargeFuturePlanFollowUpVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.followupinvalue != null)
			count++;
		if(this.followupinunit != null)
			count++;
		if(this.followuphcp != null)
			count++;
		if(this.followupspecialty != null)
			count++;
		if(this.location != null)
			count++;
		if(this.hospitalfollowup != null)
			count++;
		if(this.hospitaltofollowup != null)
			count++;
		if(this.followuptype != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected Integer followupinvalue;
	protected ims.core.vo.lookups.TimeDaystoYears followupinunit;
	protected ims.core.vo.HcpLiteVo followuphcp;
	protected ims.core.vo.lookups.Specialty followupspecialty;
	protected ims.core.vo.LocationLiteVo location;
	protected ims.core.vo.lookups.YesNo hospitalfollowup;
	protected ims.core.resource.place.vo.LocationRefVo hospitaltofollowup;
	protected ims.core.vo.lookups.FollowUpType followuptype;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
