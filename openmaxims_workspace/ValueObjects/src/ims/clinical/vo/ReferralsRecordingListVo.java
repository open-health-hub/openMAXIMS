//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to clinical.ReferralsRecording business object (ID: 1072100062).
 */
public class ReferralsRecordingListVo extends ims.clinical.vo.ReferralsRecordingRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ReferralsRecordingListVo()
	{
	}
	public ReferralsRecordingListVo(Integer id, int version)
	{
		super(id, version);
	}
	public ReferralsRecordingListVo(ims.clinical.vo.beans.ReferralsRecordingListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.referralsource = bean.getReferralSource() == null ? null : ims.clinical.vo.lookups.ReferralSource.buildLookup(bean.getReferralSource());
		this.referralhcp = bean.getReferralHCP() == null ? null : bean.getReferralHCP().buildVo();
		this.datesent = bean.getDateSent() == null ? null : bean.getDateSent().buildDate();
		this.referralstatus = bean.getReferralStatus() == null ? null : ims.core.vo.lookups.CoreReferralStatus.buildLookup(bean.getReferralStatus());
		this.discipline = bean.getDiscipline() == null ? null : ims.clinical.vo.lookups.ReferralDiscipline.buildLookup(bean.getDiscipline());
		this.specialtyfunctioncode = bean.getSpecialtyFunctionCode() == null ? null : ims.clinical.vo.lookups.SpecialtyFunctionCode.buildLookup(bean.getSpecialtyFunctionCode());
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.ReferralsRecordingListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.referralsource = bean.getReferralSource() == null ? null : ims.clinical.vo.lookups.ReferralSource.buildLookup(bean.getReferralSource());
		this.referralhcp = bean.getReferralHCP() == null ? null : bean.getReferralHCP().buildVo(map);
		this.datesent = bean.getDateSent() == null ? null : bean.getDateSent().buildDate();
		this.referralstatus = bean.getReferralStatus() == null ? null : ims.core.vo.lookups.CoreReferralStatus.buildLookup(bean.getReferralStatus());
		this.discipline = bean.getDiscipline() == null ? null : ims.clinical.vo.lookups.ReferralDiscipline.buildLookup(bean.getDiscipline());
		this.specialtyfunctioncode = bean.getSpecialtyFunctionCode() == null ? null : ims.clinical.vo.lookups.SpecialtyFunctionCode.buildLookup(bean.getSpecialtyFunctionCode());
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.ReferralsRecordingListVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.ReferralsRecordingListVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.ReferralsRecordingListVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("REFERRALSOURCE"))
			return getReferralSource();
		if(fieldName.equals("REFERRALHCP"))
			return getReferralHCP();
		if(fieldName.equals("DATESENT"))
			return getDateSent();
		if(fieldName.equals("REFERRALSTATUS"))
			return getReferralStatus();
		if(fieldName.equals("DISCIPLINE"))
			return getDiscipline();
		if(fieldName.equals("SPECIALTYFUNCTIONCODE"))
			return getSpecialtyFunctionCode();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getReferralSourceIsNotNull()
	{
		return this.referralsource != null;
	}
	public ims.clinical.vo.lookups.ReferralSource getReferralSource()
	{
		return this.referralsource;
	}
	public void setReferralSource(ims.clinical.vo.lookups.ReferralSource value)
	{
		this.isValidated = false;
		this.referralsource = value;
	}
	public boolean getReferralHCPIsNotNull()
	{
		return this.referralhcp != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getReferralHCP()
	{
		return this.referralhcp;
	}
	public void setReferralHCP(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.referralhcp = value;
	}
	public boolean getDateSentIsNotNull()
	{
		return this.datesent != null;
	}
	public ims.framework.utils.Date getDateSent()
	{
		return this.datesent;
	}
	public void setDateSent(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.datesent = value;
	}
	public boolean getReferralStatusIsNotNull()
	{
		return this.referralstatus != null;
	}
	public ims.core.vo.lookups.CoreReferralStatus getReferralStatus()
	{
		return this.referralstatus;
	}
	public void setReferralStatus(ims.core.vo.lookups.CoreReferralStatus value)
	{
		this.isValidated = false;
		this.referralstatus = value;
	}
	public boolean getDisciplineIsNotNull()
	{
		return this.discipline != null;
	}
	public ims.clinical.vo.lookups.ReferralDiscipline getDiscipline()
	{
		return this.discipline;
	}
	public void setDiscipline(ims.clinical.vo.lookups.ReferralDiscipline value)
	{
		this.isValidated = false;
		this.discipline = value;
	}
	public boolean getSpecialtyFunctionCodeIsNotNull()
	{
		return this.specialtyfunctioncode != null;
	}
	public ims.clinical.vo.lookups.SpecialtyFunctionCode getSpecialtyFunctionCode()
	{
		return this.specialtyfunctioncode;
	}
	public void setSpecialtyFunctionCode(ims.clinical.vo.lookups.SpecialtyFunctionCode value)
	{
		this.isValidated = false;
		this.specialtyfunctioncode = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.vo.CareContextListVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.vo.CareContextListVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.datesent == null)
			listOfErrors.add("DateSent is mandatory");
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ReferralsRecordingListVo clone = new ReferralsRecordingListVo(this.id, this.version);
		
		if(this.referralsource == null)
			clone.referralsource = null;
		else
			clone.referralsource = (ims.clinical.vo.lookups.ReferralSource)this.referralsource.clone();
		if(this.referralhcp == null)
			clone.referralhcp = null;
		else
			clone.referralhcp = (ims.core.vo.MemberOfStaffLiteVo)this.referralhcp.clone();
		if(this.datesent == null)
			clone.datesent = null;
		else
			clone.datesent = (ims.framework.utils.Date)this.datesent.clone();
		if(this.referralstatus == null)
			clone.referralstatus = null;
		else
			clone.referralstatus = (ims.core.vo.lookups.CoreReferralStatus)this.referralstatus.clone();
		if(this.discipline == null)
			clone.discipline = null;
		else
			clone.discipline = (ims.clinical.vo.lookups.ReferralDiscipline)this.discipline.clone();
		if(this.specialtyfunctioncode == null)
			clone.specialtyfunctioncode = null;
		else
			clone.specialtyfunctioncode = (ims.clinical.vo.lookups.SpecialtyFunctionCode)this.specialtyfunctioncode.clone();
		if(this.carecontext == null)
			clone.carecontext = null;
		else
			clone.carecontext = (ims.core.vo.CareContextListVo)this.carecontext.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ReferralsRecordingListVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ReferralsRecordingListVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ReferralsRecordingListVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ReferralsRecordingListVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.referralsource != null)
			count++;
		if(this.referralhcp != null)
			count++;
		if(this.datesent != null)
			count++;
		if(this.referralstatus != null)
			count++;
		if(this.discipline != null)
			count++;
		if(this.specialtyfunctioncode != null)
			count++;
		if(this.carecontext != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected ims.clinical.vo.lookups.ReferralSource referralsource;
	protected ims.core.vo.MemberOfStaffLiteVo referralhcp;
	protected ims.framework.utils.Date datesent;
	protected ims.core.vo.lookups.CoreReferralStatus referralstatus;
	protected ims.clinical.vo.lookups.ReferralDiscipline discipline;
	protected ims.clinical.vo.lookups.SpecialtyFunctionCode specialtyfunctioncode;
	protected ims.core.vo.CareContextListVo carecontext;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
