//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to core.clinical.LimbCare business object (ID: 1072100084).
 */
public class LimbCareVo extends ims.core.clinical.vo.LimbCareRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public LimbCareVo()
	{
	}
	public LimbCareVo(Integer id, int version)
	{
		super(id, version);
	}
	public LimbCareVo(ims.clinical.vo.beans.LimbCareVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.hadpaddedarmsupportleft = bean.getHadPaddedArmSupportLeft();
		this.hadpaddedarmsupportright = bean.getHadPaddedArmSupportRight();
		this.hadleftarmfoldedacrosspatientschest = bean.getHadLeftArmFoldedAcrossPatientsChest();
		this.hadrightarmfoldedacrosspatientschest1 = bean.getHadRightArmFoldedAcrossPatientsChest1();
		this.hadleftlegdvtprophylaxsis = bean.getHadLeftLegDVTProphylaxsis();
		this.hadrightlegdvtprophylaxsis = bean.getHadRightLegDVTProphylaxsis();
		this.hadleftleggelpad = bean.getHadLeftLegGelPad();
		this.hadrightleggelpad = bean.getHadRightLegGelPad();
		this.hasrightarmsecuredbyside = bean.getHasRightArmSecuredBySide();
		this.hasleftarmsecuredbyside = bean.getHasLeftArmSecuredBySide();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.LimbCareVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.hadpaddedarmsupportleft = bean.getHadPaddedArmSupportLeft();
		this.hadpaddedarmsupportright = bean.getHadPaddedArmSupportRight();
		this.hadleftarmfoldedacrosspatientschest = bean.getHadLeftArmFoldedAcrossPatientsChest();
		this.hadrightarmfoldedacrosspatientschest1 = bean.getHadRightArmFoldedAcrossPatientsChest1();
		this.hadleftlegdvtprophylaxsis = bean.getHadLeftLegDVTProphylaxsis();
		this.hadrightlegdvtprophylaxsis = bean.getHadRightLegDVTProphylaxsis();
		this.hadleftleggelpad = bean.getHadLeftLegGelPad();
		this.hadrightleggelpad = bean.getHadRightLegGelPad();
		this.hasrightarmsecuredbyside = bean.getHasRightArmSecuredBySide();
		this.hasleftarmsecuredbyside = bean.getHasLeftArmSecuredBySide();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.LimbCareVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.LimbCareVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.LimbCareVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("HADPADDEDARMSUPPORTLEFT"))
			return getHadPaddedArmSupportLeft();
		if(fieldName.equals("HADPADDEDARMSUPPORTRIGHT"))
			return getHadPaddedArmSupportRight();
		if(fieldName.equals("HADLEFTARMFOLDEDACROSSPATIENTSCHEST"))
			return getHadLeftArmFoldedAcrossPatientsChest();
		if(fieldName.equals("HADRIGHTARMFOLDEDACROSSPATIENTSCHEST1"))
			return getHadRightArmFoldedAcrossPatientsChest1();
		if(fieldName.equals("HADLEFTLEGDVTPROPHYLAXSIS"))
			return getHadLeftLegDVTProphylaxsis();
		if(fieldName.equals("HADRIGHTLEGDVTPROPHYLAXSIS"))
			return getHadRightLegDVTProphylaxsis();
		if(fieldName.equals("HADLEFTLEGGELPAD"))
			return getHadLeftLegGelPad();
		if(fieldName.equals("HADRIGHTLEGGELPAD"))
			return getHadRightLegGelPad();
		if(fieldName.equals("HASRIGHTARMSECUREDBYSIDE"))
			return getHasRightArmSecuredBySide();
		if(fieldName.equals("HASLEFTARMSECUREDBYSIDE"))
			return getHasLeftArmSecuredBySide();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getHadPaddedArmSupportLeftIsNotNull()
	{
		return this.hadpaddedarmsupportleft != null;
	}
	public Boolean getHadPaddedArmSupportLeft()
	{
		return this.hadpaddedarmsupportleft;
	}
	public void setHadPaddedArmSupportLeft(Boolean value)
	{
		this.isValidated = false;
		this.hadpaddedarmsupportleft = value;
	}
	public boolean getHadPaddedArmSupportRightIsNotNull()
	{
		return this.hadpaddedarmsupportright != null;
	}
	public Boolean getHadPaddedArmSupportRight()
	{
		return this.hadpaddedarmsupportright;
	}
	public void setHadPaddedArmSupportRight(Boolean value)
	{
		this.isValidated = false;
		this.hadpaddedarmsupportright = value;
	}
	public boolean getHadLeftArmFoldedAcrossPatientsChestIsNotNull()
	{
		return this.hadleftarmfoldedacrosspatientschest != null;
	}
	public Boolean getHadLeftArmFoldedAcrossPatientsChest()
	{
		return this.hadleftarmfoldedacrosspatientschest;
	}
	public void setHadLeftArmFoldedAcrossPatientsChest(Boolean value)
	{
		this.isValidated = false;
		this.hadleftarmfoldedacrosspatientschest = value;
	}
	public boolean getHadRightArmFoldedAcrossPatientsChest1IsNotNull()
	{
		return this.hadrightarmfoldedacrosspatientschest1 != null;
	}
	public Boolean getHadRightArmFoldedAcrossPatientsChest1()
	{
		return this.hadrightarmfoldedacrosspatientschest1;
	}
	public void setHadRightArmFoldedAcrossPatientsChest1(Boolean value)
	{
		this.isValidated = false;
		this.hadrightarmfoldedacrosspatientschest1 = value;
	}
	public boolean getHadLeftLegDVTProphylaxsisIsNotNull()
	{
		return this.hadleftlegdvtprophylaxsis != null;
	}
	public Boolean getHadLeftLegDVTProphylaxsis()
	{
		return this.hadleftlegdvtprophylaxsis;
	}
	public void setHadLeftLegDVTProphylaxsis(Boolean value)
	{
		this.isValidated = false;
		this.hadleftlegdvtprophylaxsis = value;
	}
	public boolean getHadRightLegDVTProphylaxsisIsNotNull()
	{
		return this.hadrightlegdvtprophylaxsis != null;
	}
	public Boolean getHadRightLegDVTProphylaxsis()
	{
		return this.hadrightlegdvtprophylaxsis;
	}
	public void setHadRightLegDVTProphylaxsis(Boolean value)
	{
		this.isValidated = false;
		this.hadrightlegdvtprophylaxsis = value;
	}
	public boolean getHadLeftLegGelPadIsNotNull()
	{
		return this.hadleftleggelpad != null;
	}
	public Boolean getHadLeftLegGelPad()
	{
		return this.hadleftleggelpad;
	}
	public void setHadLeftLegGelPad(Boolean value)
	{
		this.isValidated = false;
		this.hadleftleggelpad = value;
	}
	public boolean getHadRightLegGelPadIsNotNull()
	{
		return this.hadrightleggelpad != null;
	}
	public Boolean getHadRightLegGelPad()
	{
		return this.hadrightleggelpad;
	}
	public void setHadRightLegGelPad(Boolean value)
	{
		this.isValidated = false;
		this.hadrightleggelpad = value;
	}
	public boolean getHasRightArmSecuredBySideIsNotNull()
	{
		return this.hasrightarmsecuredbyside != null;
	}
	public Boolean getHasRightArmSecuredBySide()
	{
		return this.hasrightarmsecuredbyside;
	}
	public void setHasRightArmSecuredBySide(Boolean value)
	{
		this.isValidated = false;
		this.hasrightarmsecuredbyside = value;
	}
	public boolean getHasLeftArmSecuredBySideIsNotNull()
	{
		return this.hasleftarmsecuredbyside != null;
	}
	public Boolean getHasLeftArmSecuredBySide()
	{
		return this.hasleftarmsecuredbyside;
	}
	public void setHasLeftArmSecuredBySide(Boolean value)
	{
		this.isValidated = false;
		this.hasleftarmsecuredbyside = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		LimbCareVo clone = new LimbCareVo(this.id, this.version);
		
		clone.hadpaddedarmsupportleft = this.hadpaddedarmsupportleft;
		clone.hadpaddedarmsupportright = this.hadpaddedarmsupportright;
		clone.hadleftarmfoldedacrosspatientschest = this.hadleftarmfoldedacrosspatientschest;
		clone.hadrightarmfoldedacrosspatientschest1 = this.hadrightarmfoldedacrosspatientschest1;
		clone.hadleftlegdvtprophylaxsis = this.hadleftlegdvtprophylaxsis;
		clone.hadrightlegdvtprophylaxsis = this.hadrightlegdvtprophylaxsis;
		clone.hadleftleggelpad = this.hadleftleggelpad;
		clone.hadrightleggelpad = this.hadrightleggelpad;
		clone.hasrightarmsecuredbyside = this.hasrightarmsecuredbyside;
		clone.hasleftarmsecuredbyside = this.hasleftarmsecuredbyside;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(LimbCareVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A LimbCareVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((LimbCareVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((LimbCareVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.hadpaddedarmsupportleft != null)
			count++;
		if(this.hadpaddedarmsupportright != null)
			count++;
		if(this.hadleftarmfoldedacrosspatientschest != null)
			count++;
		if(this.hadrightarmfoldedacrosspatientschest1 != null)
			count++;
		if(this.hadleftlegdvtprophylaxsis != null)
			count++;
		if(this.hadrightlegdvtprophylaxsis != null)
			count++;
		if(this.hadleftleggelpad != null)
			count++;
		if(this.hadrightleggelpad != null)
			count++;
		if(this.hasrightarmsecuredbyside != null)
			count++;
		if(this.hasleftarmsecuredbyside != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected Boolean hadpaddedarmsupportleft;
	protected Boolean hadpaddedarmsupportright;
	protected Boolean hadleftarmfoldedacrosspatientschest;
	protected Boolean hadrightarmfoldedacrosspatientschest1;
	protected Boolean hadleftlegdvtprophylaxsis;
	protected Boolean hadrightlegdvtprophylaxsis;
	protected Boolean hadleftleggelpad;
	protected Boolean hadrightleggelpad;
	protected Boolean hasrightarmsecuredbyside;
	protected Boolean hasleftarmsecuredbyside;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
