//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo.lookups;

import ims.framework.cn.data.TreeNode;
import java.util.ArrayList;
import ims.framework.utils.Image;
import ims.framework.utils.Color;

public class ApptOutcome extends ims.vo.LookupInstVo implements TreeNode
{
	private static final long serialVersionUID = 1L;

	public ApptOutcome()
	{
		super();
	}
	public ApptOutcome(int id)
	{
		super(id, "", true);
	}
	public ApptOutcome(int id, String text, boolean active)
	{
		super(id, text, active, null, null, null);
	}
	public ApptOutcome(int id, String text, boolean active, ApptOutcome parent, Image image)
	{
		super(id, text, active, parent, image);
	}
	public ApptOutcome(int id, String text, boolean active, ApptOutcome parent, Image image, Color color)
	{
		super(id, text, active, parent, image, color);
	}
	public ApptOutcome(int id, String text, boolean active, ApptOutcome parent, Image image, Color color, int order)
	{
		super(id, text, active, parent, image, color, order);
	}
	public static ApptOutcome buildLookup(ims.vo.LookupInstanceBean bean)
	{
		return new ApptOutcome(bean.getId(), bean.getText(), bean.isActive());
	}
	public String toString()
	{
		if(getText() != null)
			return getText();
		return "";
	}
	public TreeNode getParentNode()
	{
		return (ApptOutcome)super.getParentInstance();
	}
	public ApptOutcome getParent()
	{
		return (ApptOutcome)super.getParentInstance();
	}
	public void setParent(ApptOutcome parent)
	{
		super.setParentInstance(parent);
	}
	public TreeNode[] getChildren()
	{
		ArrayList children = super.getChildInstances();
		ApptOutcome[] typedChildren = new ApptOutcome[children.size()];
		for (int i = 0; i < children.size(); i++)
		{
			typedChildren[i] = (ApptOutcome)children.get(i);
		}
		return typedChildren;
	}
	public int addChild(TreeNode child)
	{
		if (child instanceof ApptOutcome)
		{
			super.addChild((ApptOutcome)child);
		}
		return super.getChildInstances().size();
	}
	public int removeChild(TreeNode child)
	{
		if (child instanceof ApptOutcome)
		{
			super.removeChild((ApptOutcome)child);
		}
		return super.getChildInstances().size();
	}
	public Image getExpandedImage()
	{
		return super.getImage();
	}
	public Image getCollapsedImage()
	{
		return super.getImage();
	}
	public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()
	{
		ApptOutcomeCollection result = new ApptOutcomeCollection();
		result.add(ADDTOWAITINGLIST);
		result.add(ADDTOPLANNEDLIST);
		result.add(ADDTOBOOKEDLIST);
		result.add(DECISIONTREATACTIVEMONITORING);
		result.add(START_OF_FIRST_DEFINITIVE_TREATMENT);
		result.add(START_ACTIVE_MONITORING_BY_PATIENT);
		result.add(START_ACTIVE_MONITORING_BY_CARE_PROF);
		result.add(PATIENT_DID_NOT_ATTEND);
		result.add(DECISION_NOT_TO_TREAT);
		result.add(PATIENT_DECLINED_OFFER);
		result.add(DECISION_TO_TREAT);
		return result;
	}
	public static ApptOutcome[] getNegativeInstances()
	{
		ApptOutcome[] instances = new ApptOutcome[11];
		instances[0] = ADDTOWAITINGLIST;
		instances[1] = ADDTOPLANNEDLIST;
		instances[2] = ADDTOBOOKEDLIST;
		instances[3] = DECISIONTREATACTIVEMONITORING;
		instances[4] = START_OF_FIRST_DEFINITIVE_TREATMENT;
		instances[5] = START_ACTIVE_MONITORING_BY_PATIENT;
		instances[6] = START_ACTIVE_MONITORING_BY_CARE_PROF;
		instances[7] = PATIENT_DID_NOT_ATTEND;
		instances[8] = DECISION_NOT_TO_TREAT;
		instances[9] = PATIENT_DECLINED_OFFER;
		instances[10] = DECISION_TO_TREAT;
		return instances;
	}
	public static String[] getNegativeInstanceNames()
	{
		String[] negativeInstances = new String[11];
		negativeInstances[0] = "ADDTOWAITINGLIST";
		negativeInstances[1] = "ADDTOPLANNEDLIST";
		negativeInstances[2] = "ADDTOBOOKEDLIST";
		negativeInstances[3] = "DECISIONTREATACTIVEMONITORING";
		negativeInstances[4] = "START_OF_FIRST_DEFINITIVE_TREATMENT";
		negativeInstances[5] = "START_ACTIVE_MONITORING_BY_PATIENT";
		negativeInstances[6] = "START_ACTIVE_MONITORING_BY_CARE_PROF";
		negativeInstances[7] = "PATIENT_DID_NOT_ATTEND";
		negativeInstances[8] = "DECISION_NOT_TO_TREAT";
		negativeInstances[9] = "PATIENT_DECLINED_OFFER";
		negativeInstances[10] = "DECISION_TO_TREAT";
		return negativeInstances;
	}
	public static ApptOutcome getNegativeInstance(String name)
	{
		if(name == null)
			return null;
		String[] negativeInstances = getNegativeInstanceNames();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].equals(name))
				return getNegativeInstances()[i];
		}
		return null;
	}
	public static ApptOutcome getNegativeInstance(Integer id)
	{
		if(id == null)
			return null;
		ApptOutcome[] negativeInstances = getNegativeInstances();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].getID() == id)
				return negativeInstances[i];
		}
		return null;
	}
	public int getTypeId()
	{
		return TYPE_ID;
	}
	public static final int TYPE_ID = 1141020;
	public static final ApptOutcome ADDTOWAITINGLIST = new ApptOutcome(-2611, "Add to Waiting List", true, null, null, Color.Default);
	public static final ApptOutcome ADDTOPLANNEDLIST = new ApptOutcome(-2633, "Add to Planned List", true, null, null, Color.Default);
	public static final ApptOutcome ADDTOBOOKEDLIST = new ApptOutcome(-2634, "Add to Booked List", true, null, null, Color.Default);
	public static final ApptOutcome DECISIONTREATACTIVEMONITORING = new ApptOutcome(-2646, "Decision to Treat following Active Monitoring", true, null, null, Color.Default);
	public static final ApptOutcome START_OF_FIRST_DEFINITIVE_TREATMENT = new ApptOutcome(-2653, "Start of First Definitive Treatment", true, null, null, Color.Default);
	public static final ApptOutcome START_ACTIVE_MONITORING_BY_PATIENT = new ApptOutcome(-2654, "Start of Active Monitoring initiated by Patient", true, null, null, Color.Default);
	public static final ApptOutcome START_ACTIVE_MONITORING_BY_CARE_PROF = new ApptOutcome(-2655, "Start of Active Monitoring initiated by Care Professional", true, null, null, Color.Default);
	public static final ApptOutcome PATIENT_DID_NOT_ATTEND = new ApptOutcome(-2656, "Patient Did not Attend", true, null, null, Color.Default);
	public static final ApptOutcome DECISION_NOT_TO_TREAT = new ApptOutcome(-2657, "Decision not to Treat or no further contact required", true, null, null, Color.Default);
	public static final ApptOutcome PATIENT_DECLINED_OFFER = new ApptOutcome(-2658, "Patient Declined offered Treatment", true, null, null, Color.Default);
	public static final ApptOutcome DECISION_TO_TREAT = new ApptOutcome(-2682, "Decision To Treat", true, null, null, Color.Default);
}
