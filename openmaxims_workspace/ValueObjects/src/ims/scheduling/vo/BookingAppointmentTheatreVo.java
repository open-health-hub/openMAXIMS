//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Booking_Appointment business object (ID: 1055100007).
 */
public class BookingAppointmentTheatreVo extends ims.scheduling.vo.Booking_AppointmentRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public BookingAppointmentTheatreVo()
	{
	}
	public BookingAppointmentTheatreVo(Integer id, int version)
	{
		super(id, version);
	}
	public BookingAppointmentTheatreVo(ims.scheduling.vo.beans.BookingAppointmentTheatreVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.appointmentdate = bean.getAppointmentDate() == null ? null : bean.getAppointmentDate().buildDate();
		this.apptstarttime = bean.getApptStartTime() == null ? null : bean.getApptStartTime().buildTime();
		this.apptendtime = bean.getApptEndTime() == null ? null : bean.getApptEndTime().buildTime();
		this.apptstatus = bean.getApptStatus() == null ? null : ims.scheduling.vo.lookups.Status_Reason.buildLookup(bean.getApptStatus());
		this.comments = bean.getComments();
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.theatrebooking = bean.getTheatreBooking() == null ? null : bean.getTheatreBooking().buildVo();
		this.apptstatushistory = ims.scheduling.vo.Appointment_StatusVoCollection.buildFromBeanCollection(bean.getApptStatusHistory());
		this.currentstatusrecord = bean.getCurrentStatusRecord() == null ? null : bean.getCurrentStatusRecord().buildVo();
		this.requiresrebook = bean.getRequiresRebook();
		this.earliestoffereddate = bean.getEarliestOfferedDate() == null ? null : bean.getEarliestOfferedDate().buildDate();
		this.customprocedureduration = bean.getCustomProcedureDuration();
		this.theatreslot = bean.getTheatreSlot() == null ? null : bean.getTheatreSlot().buildVo();
		this.changeslotfrom = bean.getChangeSlotFrom() == null ? null : bean.getChangeSlotFrom().buildVo();
		this.parentchildslot = bean.getParentChildSlot() == null ? null : bean.getParentChildSlot().buildVo();
		this.changeparentchildslotfrom = bean.getChangeParentChildSlotFrom() == null ? null : bean.getChangeParentChildSlotFrom().buildVo();
		this.appointmenttcitime = bean.getAppointmentTCITime() == null ? null : bean.getAppointmentTCITime().buildTime();
		this.pathwayclock = bean.getPathwayClock() == null ? null : new ims.pathways.vo.PathwayClockRefVo(new Integer(bean.getPathwayClock().getId()), bean.getPathwayClock().getVersion());
		this.pasevent = bean.getPASEvent() == null ? null : new ims.core.admin.pas.vo.PASEventRefVo(new Integer(bean.getPASEvent().getId()), bean.getPASEvent().getVersion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.BookingAppointmentTheatreVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.appointmentdate = bean.getAppointmentDate() == null ? null : bean.getAppointmentDate().buildDate();
		this.apptstarttime = bean.getApptStartTime() == null ? null : bean.getApptStartTime().buildTime();
		this.apptendtime = bean.getApptEndTime() == null ? null : bean.getApptEndTime().buildTime();
		this.apptstatus = bean.getApptStatus() == null ? null : ims.scheduling.vo.lookups.Status_Reason.buildLookup(bean.getApptStatus());
		this.comments = bean.getComments();
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo(map);
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.theatrebooking = bean.getTheatreBooking() == null ? null : bean.getTheatreBooking().buildVo(map);
		this.apptstatushistory = ims.scheduling.vo.Appointment_StatusVoCollection.buildFromBeanCollection(bean.getApptStatusHistory());
		this.currentstatusrecord = bean.getCurrentStatusRecord() == null ? null : bean.getCurrentStatusRecord().buildVo(map);
		this.requiresrebook = bean.getRequiresRebook();
		this.earliestoffereddate = bean.getEarliestOfferedDate() == null ? null : bean.getEarliestOfferedDate().buildDate();
		this.customprocedureduration = bean.getCustomProcedureDuration();
		this.theatreslot = bean.getTheatreSlot() == null ? null : bean.getTheatreSlot().buildVo(map);
		this.changeslotfrom = bean.getChangeSlotFrom() == null ? null : bean.getChangeSlotFrom().buildVo(map);
		this.parentchildslot = bean.getParentChildSlot() == null ? null : bean.getParentChildSlot().buildVo(map);
		this.changeparentchildslotfrom = bean.getChangeParentChildSlotFrom() == null ? null : bean.getChangeParentChildSlotFrom().buildVo(map);
		this.appointmenttcitime = bean.getAppointmentTCITime() == null ? null : bean.getAppointmentTCITime().buildTime();
		this.pathwayclock = bean.getPathwayClock() == null ? null : new ims.pathways.vo.PathwayClockRefVo(new Integer(bean.getPathwayClock().getId()), bean.getPathwayClock().getVersion());
		this.pasevent = bean.getPASEvent() == null ? null : new ims.core.admin.pas.vo.PASEventRefVo(new Integer(bean.getPASEvent().getId()), bean.getPASEvent().getVersion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.BookingAppointmentTheatreVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.BookingAppointmentTheatreVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.BookingAppointmentTheatreVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("APPOINTMENTDATE"))
			return getAppointmentDate();
		if(fieldName.equals("APPTSTARTTIME"))
			return getApptStartTime();
		if(fieldName.equals("APPTENDTIME"))
			return getApptEndTime();
		if(fieldName.equals("APPTSTATUS"))
			return getApptStatus();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		if(fieldName.equals("SESSION"))
			return getSession();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("THEATREBOOKING"))
			return getTheatreBooking();
		if(fieldName.equals("APPTSTATUSHISTORY"))
			return getApptStatusHistory();
		if(fieldName.equals("CURRENTSTATUSRECORD"))
			return getCurrentStatusRecord();
		if(fieldName.equals("REQUIRESREBOOK"))
			return getRequiresRebook();
		if(fieldName.equals("EARLIESTOFFEREDDATE"))
			return getEarliestOfferedDate();
		if(fieldName.equals("CUSTOMPROCEDUREDURATION"))
			return getCustomProcedureDuration();
		if(fieldName.equals("THEATRESLOT"))
			return getTheatreSlot();
		if(fieldName.equals("CHANGESLOTFROM"))
			return getChangeSlotFrom();
		if(fieldName.equals("PARENTCHILDSLOT"))
			return getParentChildSlot();
		if(fieldName.equals("CHANGEPARENTCHILDSLOTFROM"))
			return getChangeParentChildSlotFrom();
		if(fieldName.equals("APPOINTMENTTCITIME"))
			return getAppointmentTCITime();
		if(fieldName.equals("PATHWAYCLOCK"))
			return getPathwayClock();
		if(fieldName.equals("PASEVENT"))
			return getPASEvent();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAppointmentDateIsNotNull()
	{
		return this.appointmentdate != null;
	}
	public ims.framework.utils.Date getAppointmentDate()
	{
		return this.appointmentdate;
	}
	public void setAppointmentDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.appointmentdate = value;
	}
	public boolean getApptStartTimeIsNotNull()
	{
		return this.apptstarttime != null;
	}
	public ims.framework.utils.Time getApptStartTime()
	{
		return this.apptstarttime;
	}
	public void setApptStartTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.apptstarttime = value;
	}
	public boolean getApptEndTimeIsNotNull()
	{
		return this.apptendtime != null;
	}
	public ims.framework.utils.Time getApptEndTime()
	{
		return this.apptendtime;
	}
	public void setApptEndTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.apptendtime = value;
	}
	public boolean getApptStatusIsNotNull()
	{
		return this.apptstatus != null;
	}
	public ims.scheduling.vo.lookups.Status_Reason getApptStatus()
	{
		return this.apptstatus;
	}
	public void setApptStatus(ims.scheduling.vo.lookups.Status_Reason value)
	{
		this.isValidated = false;
		this.apptstatus = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public String getComments()
	{
		return this.comments;
	}
	public static int getCommentsMaxLength()
	{
		return 255;
	}
	public void setComments(String value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean getSessionIsNotNull()
	{
		return this.session != null;
	}
	public ims.scheduling.vo.SessionTheatreVo getSession()
	{
		return this.session;
	}
	public void setSession(ims.scheduling.vo.SessionTheatreVo value)
	{
		this.isValidated = false;
		this.session = value;
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientShort getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientShort value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getTheatreBookingIsNotNull()
	{
		return this.theatrebooking != null;
	}
	public ims.scheduling.vo.TheatreBookingLiteVo getTheatreBooking()
	{
		return this.theatrebooking;
	}
	public void setTheatreBooking(ims.scheduling.vo.TheatreBookingLiteVo value)
	{
		this.isValidated = false;
		this.theatrebooking = value;
	}
	public boolean getApptStatusHistoryIsNotNull()
	{
		return this.apptstatushistory != null;
	}
	public ims.scheduling.vo.Appointment_StatusVoCollection getApptStatusHistory()
	{
		return this.apptstatushistory;
	}
	public void setApptStatusHistory(ims.scheduling.vo.Appointment_StatusVoCollection value)
	{
		this.isValidated = false;
		this.apptstatushistory = value;
	}
	public boolean getCurrentStatusRecordIsNotNull()
	{
		return this.currentstatusrecord != null;
	}
	public ims.scheduling.vo.Appointment_StatusVo getCurrentStatusRecord()
	{
		return this.currentstatusrecord;
	}
	public void setCurrentStatusRecord(ims.scheduling.vo.Appointment_StatusVo value)
	{
		this.isValidated = false;
		this.currentstatusrecord = value;
	}
	public boolean getRequiresRebookIsNotNull()
	{
		return this.requiresrebook != null;
	}
	public Boolean getRequiresRebook()
	{
		return this.requiresrebook;
	}
	public void setRequiresRebook(Boolean value)
	{
		this.isValidated = false;
		this.requiresrebook = value;
	}
	public boolean getEarliestOfferedDateIsNotNull()
	{
		return this.earliestoffereddate != null;
	}
	public ims.framework.utils.Date getEarliestOfferedDate()
	{
		return this.earliestoffereddate;
	}
	public void setEarliestOfferedDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.earliestoffereddate = value;
	}
	public boolean getCustomProcedureDurationIsNotNull()
	{
		return this.customprocedureduration != null;
	}
	public Integer getCustomProcedureDuration()
	{
		return this.customprocedureduration;
	}
	public void setCustomProcedureDuration(Integer value)
	{
		this.isValidated = false;
		this.customprocedureduration = value;
	}
	public boolean getTheatreSlotIsNotNull()
	{
		return this.theatreslot != null;
	}
	public ims.scheduling.vo.SessionTheatreTCISlotLiteVo getTheatreSlot()
	{
		return this.theatreslot;
	}
	public void setTheatreSlot(ims.scheduling.vo.SessionTheatreTCISlotLiteVo value)
	{
		this.isValidated = false;
		this.theatreslot = value;
	}
	public boolean getChangeSlotFromIsNotNull()
	{
		return this.changeslotfrom != null;
	}
	public ims.scheduling.vo.SessionTheatreTCISlotLiteVo getChangeSlotFrom()
	{
		return this.changeslotfrom;
	}
	public void setChangeSlotFrom(ims.scheduling.vo.SessionTheatreTCISlotLiteVo value)
	{
		this.isValidated = false;
		this.changeslotfrom = value;
	}
	public boolean getParentChildSlotIsNotNull()
	{
		return this.parentchildslot != null;
	}
	public ims.scheduling.vo.SessionParentChildSlotVo getParentChildSlot()
	{
		return this.parentchildslot;
	}
	public void setParentChildSlot(ims.scheduling.vo.SessionParentChildSlotVo value)
	{
		this.isValidated = false;
		this.parentchildslot = value;
	}
	public boolean getChangeParentChildSlotFromIsNotNull()
	{
		return this.changeparentchildslotfrom != null;
	}
	public ims.scheduling.vo.SessionParentChildSlotVo getChangeParentChildSlotFrom()
	{
		return this.changeparentchildslotfrom;
	}
	public void setChangeParentChildSlotFrom(ims.scheduling.vo.SessionParentChildSlotVo value)
	{
		this.isValidated = false;
		this.changeparentchildslotfrom = value;
	}
	public boolean getAppointmentTCITimeIsNotNull()
	{
		return this.appointmenttcitime != null;
	}
	public ims.framework.utils.Time getAppointmentTCITime()
	{
		return this.appointmenttcitime;
	}
	public void setAppointmentTCITime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.appointmenttcitime = value;
	}
	public boolean getPathwayClockIsNotNull()
	{
		return this.pathwayclock != null;
	}
	public ims.pathways.vo.PathwayClockRefVo getPathwayClock()
	{
		return this.pathwayclock;
	}
	public void setPathwayClock(ims.pathways.vo.PathwayClockRefVo value)
	{
		this.isValidated = false;
		this.pathwayclock = value;
	}
	public boolean getPASEventIsNotNull()
	{
		return this.pasevent != null;
	}
	public ims.core.admin.pas.vo.PASEventRefVo getPASEvent()
	{
		return this.pasevent;
	}
	public void setPASEvent(ims.core.admin.pas.vo.PASEventRefVo value)
	{
		this.isValidated = false;
		this.pasevent = value;
	}
	/**
	* BookingAppointmentTheatreVoTCIComparator 
	*/
	/**
	* BookingAppointmentTheatreVoTCIComparator  (class definition)
	*/
	public static class BookingAppointmentTheatreVoTCIComparator implements java.util.Comparator
	{
		private int direction = 1;
		public BookingAppointmentTheatreVoTCIComparator ()
		{
			this(ims.framework.enumerations.SortOrder.ASCENDING);
		}
		public BookingAppointmentTheatreVoTCIComparator (ims.framework.enumerations.SortOrder order)
		{
			if (order == ims.framework.enumerations.SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}
		public int compare(Object obj1, Object obj2)
		{
			BookingAppointmentTheatreVo voObj1 = (BookingAppointmentTheatreVo)obj1;
			BookingAppointmentTheatreVo voObj2 = (BookingAppointmentTheatreVo)obj2;
			if (voObj1 != null && voObj2 != null)
			{	
				if (voObj1.getTheatreBooking().getTCITime() == null &&  voObj1.getApptStartTime() == null)
					return -1;
				if (voObj2.getTheatreBooking().getTCITime() == null  &&  voObj2.getApptStartTime() == null)
					return 1;			
		
				if(voObj1.getTheatreBooking().getTCITime() != null && voObj2.getTheatreBooking().getTCITime() != null)
					return direction*(voObj1.getTheatreBooking().getTCITime().getText().compareTo(voObj2.getTheatreBooking().getTCITime().getText()));
				else if(voObj1.getApptStartTime() != null && voObj2.getApptStartTime() != null)
					return direction*(voObj1.getApptStartTime().toString().compareTo(voObj2.getApptStartTime().toString()));
				else 
					return direction;	
			}
			else
				return direction;
		}
		public boolean equals(Object obj)
		{
			return false;
		}	
	}
	/**
	* getTCIComparator - retrieves a new instance of static class BookingAppointmentTheatreVoTCIComparator
	*/
	public static BookingAppointmentTheatreVoTCIComparator getTCIComparator(ims.framework.enumerations.SortOrder sortOrder)
	{
		return new BookingAppointmentTheatreVo.BookingAppointmentTheatreVoTCIComparator(sortOrder);
	}
	/**
	* BookingAppointmentTheatreVoComeInTimeComparator //WDEV-12918
	*/
	/**
	* BookingAppointmentTheatreVoComeInTimeComparator  (class definition) //WDEV-12918
	*/
	public static class BookingAppointmentTheatreVoComeInTimeComparator implements java.util.Comparator
	{
		private int direction = 1;
		public BookingAppointmentTheatreVoComeInTimeComparator ()
		{
			this(ims.framework.enumerations.SortOrder.ASCENDING);
		}
		public BookingAppointmentTheatreVoComeInTimeComparator (ims.framework.enumerations.SortOrder order)
		{
			if (order == ims.framework.enumerations.SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}
		public int compare(Object obj1, Object obj2)
		{
			BookingAppointmentTheatreVo voObj1 = (BookingAppointmentTheatreVo)obj1;
			BookingAppointmentTheatreVo voObj2 = (BookingAppointmentTheatreVo)obj2;
			if (voObj1 != null && voObj2 != null)
			{	
				if (voObj1.getAppointmentTCITime() == null &&  voObj1.getApptStartTime() == null)
					return -1;
				if (voObj2.getAppointmentTCITime() == null  &&  voObj2.getApptStartTime() == null)
					return 1;			
		
				if(voObj1.getAppointmentTCITime() != null && voObj2.getAppointmentTCITime() != null)
					return direction*(voObj1.getAppointmentTCITime().compareTo(voObj2.getAppointmentTCITime()));
				else if(voObj1.getApptStartTime() != null && voObj2.getApptStartTime() != null)
					return direction*(voObj1.getApptStartTime().compareTo(voObj2.getApptStartTime()));
				else 
					return direction;	
			}
			else
				return direction;
		}
		public boolean equals(Object obj)
		{
			return false;
		}	
	}
	/**
	* getComeInTimeComparator - retrieves a new instance of static class BookingAppointmentTheatreVoComeInTimeComparator
	*/
	public static BookingAppointmentTheatreVoComeInTimeComparator getComeInTimeComparator(ims.framework.enumerations.SortOrder sortOrder)
	{
		return new BookingAppointmentTheatreVo.BookingAppointmentTheatreVoComeInTimeComparator(sortOrder);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.session != null)
		{
			if(!this.session.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.theatrebooking != null)
		{
			if(!this.theatrebooking.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.apptstatushistory != null)
		{
			if(!this.apptstatushistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentstatusrecord != null)
		{
			if(!this.currentstatusrecord.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.parentchildslot != null)
		{
			if(!this.parentchildslot.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.changeparentchildslotfrom != null)
		{
			if(!this.changeparentchildslotfrom.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.comments != null)
			if(this.comments.length() > 255)
				listOfErrors.add("The length of the field [comments] in the value object [ims.scheduling.vo.BookingAppointmentTheatreVo] is too big. It should be less or equal to 255");
		if(this.session != null)
		{
			String[] listOfOtherErrors = this.session.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.theatrebooking != null)
		{
			String[] listOfOtherErrors = this.theatrebooking.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.apptstatushistory != null)
		{
			String[] listOfOtherErrors = this.apptstatushistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentstatusrecord != null)
		{
			String[] listOfOtherErrors = this.currentstatusrecord.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.parentchildslot != null)
		{
			String[] listOfOtherErrors = this.parentchildslot.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.changeparentchildslotfrom != null)
		{
			String[] listOfOtherErrors = this.changeparentchildslotfrom.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		BookingAppointmentTheatreVo clone = new BookingAppointmentTheatreVo(this.id, this.version);
		
		if(this.appointmentdate == null)
			clone.appointmentdate = null;
		else
			clone.appointmentdate = (ims.framework.utils.Date)this.appointmentdate.clone();
		if(this.apptstarttime == null)
			clone.apptstarttime = null;
		else
			clone.apptstarttime = (ims.framework.utils.Time)this.apptstarttime.clone();
		if(this.apptendtime == null)
			clone.apptendtime = null;
		else
			clone.apptendtime = (ims.framework.utils.Time)this.apptendtime.clone();
		if(this.apptstatus == null)
			clone.apptstatus = null;
		else
			clone.apptstatus = (ims.scheduling.vo.lookups.Status_Reason)this.apptstatus.clone();
		clone.comments = this.comments;
		if(this.session == null)
			clone.session = null;
		else
			clone.session = (ims.scheduling.vo.SessionTheatreVo)this.session.clone();
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientShort)this.patient.clone();
		if(this.theatrebooking == null)
			clone.theatrebooking = null;
		else
			clone.theatrebooking = (ims.scheduling.vo.TheatreBookingLiteVo)this.theatrebooking.clone();
		if(this.apptstatushistory == null)
			clone.apptstatushistory = null;
		else
			clone.apptstatushistory = (ims.scheduling.vo.Appointment_StatusVoCollection)this.apptstatushistory.clone();
		if(this.currentstatusrecord == null)
			clone.currentstatusrecord = null;
		else
			clone.currentstatusrecord = (ims.scheduling.vo.Appointment_StatusVo)this.currentstatusrecord.clone();
		clone.requiresrebook = this.requiresrebook;
		if(this.earliestoffereddate == null)
			clone.earliestoffereddate = null;
		else
			clone.earliestoffereddate = (ims.framework.utils.Date)this.earliestoffereddate.clone();
		clone.customprocedureduration = this.customprocedureduration;
		if(this.theatreslot == null)
			clone.theatreslot = null;
		else
			clone.theatreslot = (ims.scheduling.vo.SessionTheatreTCISlotLiteVo)this.theatreslot.clone();
		if(this.changeslotfrom == null)
			clone.changeslotfrom = null;
		else
			clone.changeslotfrom = (ims.scheduling.vo.SessionTheatreTCISlotLiteVo)this.changeslotfrom.clone();
		if(this.parentchildslot == null)
			clone.parentchildslot = null;
		else
			clone.parentchildslot = (ims.scheduling.vo.SessionParentChildSlotVo)this.parentchildslot.clone();
		if(this.changeparentchildslotfrom == null)
			clone.changeparentchildslotfrom = null;
		else
			clone.changeparentchildslotfrom = (ims.scheduling.vo.SessionParentChildSlotVo)this.changeparentchildslotfrom.clone();
		if(this.appointmenttcitime == null)
			clone.appointmenttcitime = null;
		else
			clone.appointmenttcitime = (ims.framework.utils.Time)this.appointmenttcitime.clone();
		clone.pathwayclock = this.pathwayclock;
		clone.pasevent = this.pasevent;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(BookingAppointmentTheatreVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A BookingAppointmentTheatreVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		BookingAppointmentTheatreVo compareObj = (BookingAppointmentTheatreVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getApptStartTime() == null && compareObj.getApptStartTime() != null)
				return -1;
			if(this.getApptStartTime() != null && compareObj.getApptStartTime() == null)
				return 1;
			if(this.getApptStartTime() != null && compareObj.getApptStartTime() != null)
				retVal = this.getApptStartTime().compareTo(compareObj.getApptStartTime());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.appointmentdate != null)
			count++;
		if(this.apptstarttime != null)
			count++;
		if(this.apptendtime != null)
			count++;
		if(this.apptstatus != null)
			count++;
		if(this.comments != null)
			count++;
		if(this.session != null)
			count++;
		if(this.patient != null)
			count++;
		if(this.theatrebooking != null)
			count++;
		if(this.apptstatushistory != null)
			count++;
		if(this.currentstatusrecord != null)
			count++;
		if(this.requiresrebook != null)
			count++;
		if(this.earliestoffereddate != null)
			count++;
		if(this.customprocedureduration != null)
			count++;
		if(this.theatreslot != null)
			count++;
		if(this.changeslotfrom != null)
			count++;
		if(this.parentchildslot != null)
			count++;
		if(this.changeparentchildslotfrom != null)
			count++;
		if(this.appointmenttcitime != null)
			count++;
		if(this.pathwayclock != null)
			count++;
		if(this.pasevent != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 20;
	}
	protected ims.framework.utils.Date appointmentdate;
	protected ims.framework.utils.Time apptstarttime;
	protected ims.framework.utils.Time apptendtime;
	protected ims.scheduling.vo.lookups.Status_Reason apptstatus;
	protected String comments;
	protected ims.scheduling.vo.SessionTheatreVo session;
	protected ims.core.vo.PatientShort patient;
	protected ims.scheduling.vo.TheatreBookingLiteVo theatrebooking;
	protected ims.scheduling.vo.Appointment_StatusVoCollection apptstatushistory;
	protected ims.scheduling.vo.Appointment_StatusVo currentstatusrecord;
	protected Boolean requiresrebook;
	protected ims.framework.utils.Date earliestoffereddate;
	protected Integer customprocedureduration;
	protected ims.scheduling.vo.SessionTheatreTCISlotLiteVo theatreslot;
	protected ims.scheduling.vo.SessionTheatreTCISlotLiteVo changeslotfrom;
	protected ims.scheduling.vo.SessionParentChildSlotVo parentchildslot;
	protected ims.scheduling.vo.SessionParentChildSlotVo changeparentchildslotfrom;
	protected ims.framework.utils.Time appointmenttcitime;
	protected ims.pathways.vo.PathwayClockRefVo pathwayclock;
	protected ims.core.admin.pas.vo.PASEventRefVo pasevent;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
