//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;


public class SessionSearchCriteriaVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public SessionSearchCriteriaVo()
	{
	}
	public SessionSearchCriteriaVo(ims.scheduling.vo.beans.SessionSearchCriteriaVoBean bean)
	{
		this.sessiondate = bean.getSessionDate() == null ? null : bean.getSessionDate().buildDate();
		this.sessionlocation = bean.getSessionLocation() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getSessionLocation().getId()), bean.getSessionLocation().getVersion());
		this.sessionservice = bean.getSessionService() == null ? null : new ims.core.clinical.vo.ServiceRefVo(new Integer(bean.getSessionService().getId()), bean.getSessionService().getVersion());
		// Interface field type not supported.
		// Interface field type not supported.
		this.sessiontheatretype = bean.getSessionTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getSessionTheatreType());
		this.proceduretimerequired = bean.getProcedureTimeRequired();
		this.sessionanaesthetictype = bean.getSessionAnaestheticType() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getSessionAnaestheticType());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.SessionSearchCriteriaVoBean bean)
	{
		this.sessiondate = bean.getSessionDate() == null ? null : bean.getSessionDate().buildDate();
		this.sessionlocation = bean.getSessionLocation() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getSessionLocation().getId()), bean.getSessionLocation().getVersion());
		this.sessionservice = bean.getSessionService() == null ? null : new ims.core.clinical.vo.ServiceRefVo(new Integer(bean.getSessionService().getId()), bean.getSessionService().getVersion());
		// Interface field type not supported.
		// Interface field type not supported.
		this.sessiontheatretype = bean.getSessionTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getSessionTheatreType());
		this.proceduretimerequired = bean.getProcedureTimeRequired();
		this.sessionanaesthetictype = bean.getSessionAnaestheticType() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getSessionAnaestheticType());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.SessionSearchCriteriaVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.SessionSearchCriteriaVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.SessionSearchCriteriaVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getSessionDateIsNotNull()
	{
		return this.sessiondate != null;
	}
	public ims.framework.utils.Date getSessionDate()
	{
		return this.sessiondate;
	}
	public void setSessionDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.sessiondate = value;
	}
	public boolean getSessionLocationIsNotNull()
	{
		return this.sessionlocation != null;
	}
	public ims.core.resource.place.vo.LocationRefVo getSessionLocation()
	{
		return this.sessionlocation;
	}
	public void setSessionLocation(ims.core.resource.place.vo.LocationRefVo value)
	{
		this.isValidated = false;
		this.sessionlocation = value;
	}
	public boolean getSessionServiceIsNotNull()
	{
		return this.sessionservice != null;
	}
	public ims.core.clinical.vo.ServiceRefVo getSessionService()
	{
		return this.sessionservice;
	}
	public void setSessionService(ims.core.clinical.vo.ServiceRefVo value)
	{
		this.isValidated = false;
		this.sessionservice = value;
	}
	public boolean getSessionConsultantIsNotNull()
	{
		return this.sessionconsultant != null;
	}
	public ims.vo.interfaces.IMos getSessionConsultant()
	{
		return this.sessionconsultant;
	}
	public void setSessionConsultant(ims.vo.interfaces.IMos value)
	{
		this.isValidated = false;
		this.sessionconsultant = value;
	}
	public boolean getSessionProcedureIsNotNull()
	{
		return this.sessionprocedure != null;
	}
	public ims.vo.interfaces.IGenericItem getSessionProcedure()
	{
		return this.sessionprocedure;
	}
	public void setSessionProcedure(ims.vo.interfaces.IGenericItem value)
	{
		this.isValidated = false;
		this.sessionprocedure = value;
	}
	public boolean getSessionTheatreTypeIsNotNull()
	{
		return this.sessiontheatretype != null;
	}
	public ims.scheduling.vo.lookups.TheatreType getSessionTheatreType()
	{
		return this.sessiontheatretype;
	}
	public void setSessionTheatreType(ims.scheduling.vo.lookups.TheatreType value)
	{
		this.isValidated = false;
		this.sessiontheatretype = value;
	}
	public boolean getProcedureTimeRequiredIsNotNull()
	{
		return this.proceduretimerequired != null;
	}
	public Integer getProcedureTimeRequired()
	{
		return this.proceduretimerequired;
	}
	public void setProcedureTimeRequired(Integer value)
	{
		this.isValidated = false;
		this.proceduretimerequired = value;
	}
	public boolean getSessionAnaestheticTypeIsNotNull()
	{
		return this.sessionanaesthetictype != null;
	}
	public ims.clinical.vo.lookups.AnaestheticType getSessionAnaestheticType()
	{
		return this.sessionanaesthetictype;
	}
	public void setSessionAnaestheticType(ims.clinical.vo.lookups.AnaestheticType value)
	{
		this.isValidated = false;
		this.sessionanaesthetictype = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof SessionSearchCriteriaVo))
			return false;
		SessionSearchCriteriaVo compareObj = (SessionSearchCriteriaVo)obj;
		if(this.getSessionDate() == null && compareObj.getSessionDate() != null)
			return false;
		if(this.getSessionDate() != null && compareObj.getSessionDate() == null)
			return false;
		if(this.getSessionDate() != null && compareObj.getSessionDate() != null)
			return this.getSessionDate().equals(compareObj.getSessionDate());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		SessionSearchCriteriaVo clone = new SessionSearchCriteriaVo();
		
		if(this.sessiondate == null)
			clone.sessiondate = null;
		else
			clone.sessiondate = (ims.framework.utils.Date)this.sessiondate.clone();
		clone.sessionlocation = this.sessionlocation;
		clone.sessionservice = this.sessionservice;
		clone.sessionconsultant = this.sessionconsultant;
		clone.sessionprocedure = this.sessionprocedure;
		if(this.sessiontheatretype == null)
			clone.sessiontheatretype = null;
		else
			clone.sessiontheatretype = (ims.scheduling.vo.lookups.TheatreType)this.sessiontheatretype.clone();
		clone.proceduretimerequired = this.proceduretimerequired;
		if(this.sessionanaesthetictype == null)
			clone.sessionanaesthetictype = null;
		else
			clone.sessionanaesthetictype = (ims.clinical.vo.lookups.AnaestheticType)this.sessionanaesthetictype.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(SessionSearchCriteriaVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A SessionSearchCriteriaVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		SessionSearchCriteriaVo compareObj = (SessionSearchCriteriaVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getSessionDate() == null && compareObj.getSessionDate() != null)
				return -1;
			if(this.getSessionDate() != null && compareObj.getSessionDate() == null)
				return 1;
			if(this.getSessionDate() != null && compareObj.getSessionDate() != null)
				retVal = this.getSessionDate().compareTo(compareObj.getSessionDate());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.sessiondate != null)
			count++;
		if(this.sessionlocation != null)
			count++;
		if(this.sessionservice != null)
			count++;
		if(this.sessionconsultant != null)
			count++;
		if(this.sessionprocedure != null)
			count++;
		if(this.sessiontheatretype != null)
			count++;
		if(this.proceduretimerequired != null)
			count++;
		if(this.sessionanaesthetictype != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.framework.utils.Date sessiondate;
	protected ims.core.resource.place.vo.LocationRefVo sessionlocation;
	protected ims.core.clinical.vo.ServiceRefVo sessionservice;
	protected ims.vo.interfaces.IMos sessionconsultant;
	protected ims.vo.interfaces.IGenericItem sessionprocedure;
	protected ims.scheduling.vo.lookups.TheatreType sessiontheatretype;
	protected Integer proceduretimerequired;
	protected ims.clinical.vo.lookups.AnaestheticType sessionanaesthetictype;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
