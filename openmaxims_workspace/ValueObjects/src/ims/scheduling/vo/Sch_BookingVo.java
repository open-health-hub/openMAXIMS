//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Sch_Booking business object (ID: 1055100006).
 */
public class Sch_BookingVo extends ims.scheduling.vo.Sch_BookingRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public Sch_BookingVo()
	{
	}
	public Sch_BookingVo(Integer id, int version)
	{
		super(id, version);
	}
	public Sch_BookingVo(ims.scheduling.vo.beans.Sch_BookingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.bookingcomments = bean.getBookingComments();
		this.ubrn = bean.getUBRN();
		this.referrersdsid = bean.getReferrerSdsId();
		this.referrersdsroleid = bean.getReferrerSdsRoleId();
		this.referrersdsorgid = bean.getReferrerSdsOrgId();
		this.appointments = ims.scheduling.vo.Booking_AppointmentVoCollection.buildFromBeanCollection(bean.getAppointments());
		this.sessionslotdna = bean.getSessionSlotDNA() == null ? null : bean.getSessionSlotDNA().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.Sch_BookingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.bookingcomments = bean.getBookingComments();
		this.ubrn = bean.getUBRN();
		this.referrersdsid = bean.getReferrerSdsId();
		this.referrersdsroleid = bean.getReferrerSdsRoleId();
		this.referrersdsorgid = bean.getReferrerSdsOrgId();
		this.appointments = ims.scheduling.vo.Booking_AppointmentVoCollection.buildFromBeanCollection(bean.getAppointments());
		this.sessionslotdna = bean.getSessionSlotDNA() == null ? null : bean.getSessionSlotDNA().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.Sch_BookingVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.Sch_BookingVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.Sch_BookingVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("BOOKINGCOMMENTS"))
			return getBookingComments();
		if(fieldName.equals("UBRN"))
			return getUBRN();
		if(fieldName.equals("REFERRERSDSID"))
			return getReferrerSdsId();
		if(fieldName.equals("REFERRERSDSROLEID"))
			return getReferrerSdsRoleId();
		if(fieldName.equals("REFERRERSDSORGID"))
			return getReferrerSdsOrgId();
		if(fieldName.equals("APPOINTMENTS"))
			return getAppointments();
		if(fieldName.equals("SESSIONSLOTDNA"))
			return getSessionSlotDNA();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientShort getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientShort value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getBookingCommentsIsNotNull()
	{
		return this.bookingcomments != null;
	}
	public String getBookingComments()
	{
		return this.bookingcomments;
	}
	public static int getBookingCommentsMaxLength()
	{
		return 255;
	}
	public void setBookingComments(String value)
	{
		this.isValidated = false;
		this.bookingcomments = value;
	}
	public boolean getUBRNIsNotNull()
	{
		return this.ubrn != null;
	}
	public String getUBRN()
	{
		return this.ubrn;
	}
	public static int getUBRNMaxLength()
	{
		return 100;
	}
	public void setUBRN(String value)
	{
		this.isValidated = false;
		this.ubrn = value;
	}
	public boolean getReferrerSdsIdIsNotNull()
	{
		return this.referrersdsid != null;
	}
	public String getReferrerSdsId()
	{
		return this.referrersdsid;
	}
	public static int getReferrerSdsIdMaxLength()
	{
		return 50;
	}
	public void setReferrerSdsId(String value)
	{
		this.isValidated = false;
		this.referrersdsid = value;
	}
	public boolean getReferrerSdsRoleIdIsNotNull()
	{
		return this.referrersdsroleid != null;
	}
	public String getReferrerSdsRoleId()
	{
		return this.referrersdsroleid;
	}
	public static int getReferrerSdsRoleIdMaxLength()
	{
		return 50;
	}
	public void setReferrerSdsRoleId(String value)
	{
		this.isValidated = false;
		this.referrersdsroleid = value;
	}
	public boolean getReferrerSdsOrgIdIsNotNull()
	{
		return this.referrersdsorgid != null;
	}
	public String getReferrerSdsOrgId()
	{
		return this.referrersdsorgid;
	}
	public static int getReferrerSdsOrgIdMaxLength()
	{
		return 50;
	}
	public void setReferrerSdsOrgId(String value)
	{
		this.isValidated = false;
		this.referrersdsorgid = value;
	}
	public boolean getAppointmentsIsNotNull()
	{
		return this.appointments != null;
	}
	public ims.scheduling.vo.Booking_AppointmentVoCollection getAppointments()
	{
		return this.appointments;
	}
	public void setAppointments(ims.scheduling.vo.Booking_AppointmentVoCollection value)
	{
		this.isValidated = false;
		this.appointments = value;
	}
	public boolean getSessionSlotDNAIsNotNull()
	{
		return this.sessionslotdna != null;
	}
	public ims.scheduling.vo.SessionSlotVo getSessionSlotDNA()
	{
		return this.sessionslotdna;
	}
	public void setSessionSlotDNA(ims.scheduling.vo.SessionSlotVo value)
	{
		this.isValidated = false;
		this.sessionslotdna = value;
	}
	/**
	* getApptIds
	*/
		public java.util.ArrayList getApptIds()
		{
			if(this.appointments == null || this.appointments.size() == 0)
				return null;
			
			java.util.ArrayList ids = new java.util.ArrayList();
			for(int i=0;i<this.appointments.size();i++)
				ids.add(this.appointments.get(i).getID_Booking_Appointment());
			
			return ids;
		}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.appointments != null)
		{
			if(!this.appointments.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.bookingcomments != null)
			if(this.bookingcomments.length() > 255)
				listOfErrors.add("The length of the field [bookingcomments] in the value object [ims.scheduling.vo.Sch_BookingVo] is too big. It should be less or equal to 255");
		if(this.ubrn != null)
			if(this.ubrn.length() > 100)
				listOfErrors.add("The length of the field [ubrn] in the value object [ims.scheduling.vo.Sch_BookingVo] is too big. It should be less or equal to 100");
		if(this.referrersdsid != null)
			if(this.referrersdsid.length() > 50)
				listOfErrors.add("The length of the field [referrersdsid] in the value object [ims.scheduling.vo.Sch_BookingVo] is too big. It should be less or equal to 50");
		if(this.referrersdsroleid != null)
			if(this.referrersdsroleid.length() > 50)
				listOfErrors.add("The length of the field [referrersdsroleid] in the value object [ims.scheduling.vo.Sch_BookingVo] is too big. It should be less or equal to 50");
		if(this.referrersdsorgid != null)
			if(this.referrersdsorgid.length() > 50)
				listOfErrors.add("The length of the field [referrersdsorgid] in the value object [ims.scheduling.vo.Sch_BookingVo] is too big. It should be less or equal to 50");
		if(this.appointments != null)
		{
			String[] listOfOtherErrors = this.appointments.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		Sch_BookingVo clone = new Sch_BookingVo(this.id, this.version);
		
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientShort)this.patient.clone();
		clone.bookingcomments = this.bookingcomments;
		clone.ubrn = this.ubrn;
		clone.referrersdsid = this.referrersdsid;
		clone.referrersdsroleid = this.referrersdsroleid;
		clone.referrersdsorgid = this.referrersdsorgid;
		if(this.appointments == null)
			clone.appointments = null;
		else
			clone.appointments = (ims.scheduling.vo.Booking_AppointmentVoCollection)this.appointments.clone();
		if(this.sessionslotdna == null)
			clone.sessionslotdna = null;
		else
			clone.sessionslotdna = (ims.scheduling.vo.SessionSlotVo)this.sessionslotdna.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(Sch_BookingVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A Sch_BookingVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		Sch_BookingVo compareObj = (Sch_BookingVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_Sch_Booking() == null && compareObj.getID_Sch_Booking() != null)
				return -1;
			if(this.getID_Sch_Booking() != null && compareObj.getID_Sch_Booking() == null)
				return 1;
			if(this.getID_Sch_Booking() != null && compareObj.getID_Sch_Booking() != null)
				retVal = this.getID_Sch_Booking().compareTo(compareObj.getID_Sch_Booking());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.bookingcomments != null)
			count++;
		if(this.ubrn != null)
			count++;
		if(this.referrersdsid != null)
			count++;
		if(this.referrersdsroleid != null)
			count++;
		if(this.referrersdsorgid != null)
			count++;
		if(this.appointments != null)
			count++;
		if(this.sessionslotdna != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.core.vo.PatientShort patient;
	protected String bookingcomments;
	protected String ubrn;
	protected String referrersdsid;
	protected String referrersdsroleid;
	protected String referrersdsorgid;
	protected ims.scheduling.vo.Booking_AppointmentVoCollection appointments;
	protected ims.scheduling.vo.SessionSlotVo sessionslotdna;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
