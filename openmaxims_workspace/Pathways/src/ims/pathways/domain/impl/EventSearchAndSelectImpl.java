//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.60 build 2838.16667)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.pathways.domain.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import ims.domain.DomainFactory;
import ims.pathways.domain.EventSearchAndSelectDialog;
import ims.pathways.domain.base.impl.BaseEventSearchAndSelectImpl;
import ims.pathways.vo.domain.EventLiteVoAssembler;

public class EventSearchAndSelectImpl extends BaseEventSearchAndSelectImpl implements EventSearchAndSelectDialog
{

	private static final long serialVersionUID = 1L;

	/**
	* listEvents
	*/
	public ims.pathways.vo.EventLiteVoCollection listEvents(ims.pathways.vo.EventLiteVo filter)
	{
		DomainFactory factory = getDomainFactory();
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		
		StringBuffer hql = new StringBuffer(" ");
		String query = "from Event as e1_1 ";
		String andStr = " ";
		
		if (filter == null)
		{
			hql.append(" from Event as e1_1 where e1_1.isRIE is null order by e1_1.upperName asc");
		}
		else
		{	
			hql.append("  ");
			
			if (filter.getNameIsNotNull())
			{
				hql.append(" e1_1.upperName like :name");
				names.add("name");
				values.add(filter.getName().toUpperCase() + "%");
				andStr = " and ";
			}
			if (filter.getStatusIsNotNull())
			{
				hql.append(andStr + " e1_1.status = :stat");
				names.add("stat");
				values.add(getDomLookup(filter.getStatus()));
				andStr = " and ";
			}
		}
		
		if (andStr == " and ")
			query += " where ";
	
		query += hql.toString();

		List collection = factory.find(query.toString(), names, values);
		return EventLiteVoAssembler.createEventLiteVoCollectionFromEvent(collection);
	}
}
