//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.pathways.domain.impl;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.pathways.domain.base.impl.BaseRTTStatusEventMapConfigImpl;
import ims.pathways.domain.objects.RTTStatusEventMap;
import ims.pathways.vo.EventLiteVoCollection;
import ims.pathways.vo.RTTStatusEventMapRefVo;
import ims.pathways.vo.RTTStatusEventMapVo;
import ims.pathways.vo.RTTStatusEventMapVoCollection;
import ims.pathways.vo.RTTStatusPointVo;
import ims.pathways.vo.RTTStatusPointVoCollection;
import ims.pathways.vo.domain.EventLiteVoAssembler;
import ims.pathways.vo.domain.RTTStatusEventMapVoAssembler;
import ims.pathways.vo.domain.RTTStatusPointVoAssembler;
import ims.pathways.vo.lookups.EventEncounterType;

import java.util.ArrayList;
import java.util.List;

public class RTTStatusEventMapConfigImpl extends BaseRTTStatusEventMapConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.pathways.vo.RTTStatusPointVoCollection listRTTStatusPoints()
	{
		DomainFactory fact = getDomainFactory();
		String hql = "select rt from RTTStatusPoint as rt order by rt.nationalCode asc";

		return RTTStatusPointVoAssembler.createRTTStatusPointVoCollectionFromRTTStatusPoint(fact.find(hql));
	}

	public EventLiteVoCollection listEvents(String value)
	{
		if (value == null || value != null && value.length() == 0)
			throw new DomainRuntimeException("Value passed to the search query is null");

		DomainFactory factory = getDomainFactory();
		String valuePassedToQuery = "'" + value.toUpperCase() + "%'";		
		String hqlquery ="select ev from Event as ev left join ev.status as stat where ev.upperName like " + valuePassedToQuery + " and " + "stat.id =" + String.valueOf(getDomLookup(PreActiveActiveInactiveStatus.ACTIVE).getId()) + " order by ev.upperName asc ";

		List<?> eventlist = factory.find(hqlquery);

		return EventLiteVoAssembler.createEventLiteVoCollectionFromEvent(eventlist);


	}

	public RTTStatusEventMapVo saveRTTStatusPointEvent(RTTStatusEventMapVo rttStatPointEvent) throws StaleObjectException
	{
		if (rttStatPointEvent == null)

			throw new CodingRuntimeException("Cannot save a null RTTStatusEventMapVo object.");

		if (!rttStatPointEvent.isValidated())

			throw new CodingRuntimeException("Cannot save an invalid RTTStatusEventMapVo object." );


		DomainFactory factory = getDomainFactory();

		RTTStatusEventMap statusToEventDO = RTTStatusEventMapVoAssembler.extractRTTStatusEventMap(factory, rttStatPointEvent);

		factory.save(statusToEventDO);

		return RTTStatusEventMapVoAssembler.create(statusToEventDO);
	}

	public RTTStatusEventMapVo getRTTStatusPointToEvent(RTTStatusEventMapRefVo recordRef)
	{
		if (recordRef == null || recordRef.getID_RTTStatusEventMap() == null)
		{
			throw new CodingRuntimeException("Cannot get details for a null RTTStatusEventMapVo reference");
		}
		DomainFactory factory = getDomainFactory();

		RTTStatusEventMap rttStatusEventDO = (RTTStatusEventMap) factory.getDomainObject(RTTStatusEventMap.class, recordRef.getID_RTTStatusEventMap());

		return RTTStatusEventMapVoAssembler.create(rttStatusEventDO);

	}

	public RTTStatusPointVoCollection listTargetRTTStatusPoints(RTTStatusPointVo currentRTT)
	{
		if (currentRTT == null)
		{
			return listRTTStatusPoints();
		}
		String hql = "Select targetRTT from RTTStatusPoint as rTT left join rTT.children as targetRTT where rTT.id = " + currentRTT.getID_RTTStatusPoint() + " and targetRTT.id <> rTT.id " + "order by targetRTT.nationalCode asc" ;
		
		return RTTStatusPointVoAssembler.createRTTStatusPointVoCollectionFromRTTStatusPoint(getDomainFactory().find(hql));
		
	}

	public RTTStatusEventMapVoCollection listRTTEventsMapped(EventEncounterType eventType, Integer currentRTTCode,
			Integer targetRTTCode, Boolean activeFlag, String eventName)
	{
	
		String hqlquery ="select rttevent from RTTStatusEventMap as rttevent  left join rttevent.currentRTTStatus as crtstat left join rttevent.targetRTTStatus as trtstat ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String and = " ";
		String hqlconditions = "";

		if (eventType != null)
		{
			hqlconditions+= " rttevent.encounterType = :encType";
			markers.add("encType");
			values.add(getDomLookup(eventType));
			and = " and ";
		}
		
		if (currentRTTCode != null)
		{
			hqlconditions+= and;
			hqlconditions+= " crtstat.nationalCode = :cnatCode";
			markers.add("cnatCode");
			values.add(currentRTTCode);
			and = " and ";
		}
		
		if (targetRTTCode != null)
		{
			hqlconditions+= and;
			hqlconditions+= " trtstat.nationalCode = :tnatCode";
			markers.add("tnatCode");
			values.add(targetRTTCode);
			and = " and ";
		}
		
		if (Boolean.TRUE.equals(activeFlag))
		{
			hqlconditions+= and;
			hqlconditions+= " rttevent.active = :actFlag";
			markers.add("actFlag");
			values.add(activeFlag.booleanValue());
			and = " and ";
		}
		
		if (eventName != null && eventName.length() > 0)
		{
			hqlquery+= " left join rttevent.event as evt";
			hqlconditions+= and;
			hqlconditions+= " evt.upperName like :evName";
			markers.add("evName");
			values.add(eventName.toUpperCase()+ "%");
			and = " and ";
		}

		if (markers.size()> 0)
		{
			hqlquery+= " where ";
		}

		hqlquery += hqlconditions;;

		hqlquery += " order by crtstat.nationalCode asc";

		DomainFactory factory = getDomainFactory();

		List<?> records = factory.find(hqlquery, markers, values);

		return RTTStatusEventMapVoAssembler.createRTTStatusEventMapVoCollectionFromRTTStatusEventMap(records);
	}
	
}
