//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.forms.pathwayconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnTargetsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class grdTargetsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdTargetsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColRTTMappingsReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColRTTMappingsReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColRTTMappingsOpened()
			{
				super.row.showOpened(0);
			}
			public ims.pathways.vo.PathwayTargetRTTEventVoCollection getColRTTMappings()
			{
				return (ims.pathways.vo.PathwayTargetRTTEventVoCollection)super.row.get(0);
			}
			public void setColRTTMappings(ims.pathways.vo.PathwayTargetRTTEventVoCollection value)
			{
				super.row.set(0, value);
			}
			public void setCellColRTTMappingsTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColExtMappingsReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColExtMappingsReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColExtMappingsOpened()
			{
				super.row.showOpened(1);
			}
			public ims.pathways.vo.PathwayTargetExternalEventMappingVoCollection getColExtMappings()
			{
				return (ims.pathways.vo.PathwayTargetExternalEventMappingVoCollection)super.row.get(1);
			}
			public void setColExtMappings(ims.pathways.vo.PathwayTargetExternalEventMappingVoCollection value)
			{
				super.row.set(1, value);
			}
			public void setCellColExtMappingsTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColWeekNoReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColWeekNoReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColWeekNoOpened()
			{
				super.row.showOpened(2);
			}
			public Integer getColWeekNo()
			{
				return (Integer)super.row.get(2);
			}
			public void setColWeekNo(Integer value)
			{
				super.row.set(2, value);
			}
			public void setCellColWeekNoTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColTargetReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColTargetReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColTargetOpened()
			{
				super.row.showOpened(3);
			}
			public ims.pathways.vo.TargetShortVo getColTarget()
			{
				return (ims.pathways.vo.TargetShortVo)super.row.get(3);
			}
			public void setColTarget(ims.pathways.vo.TargetShortVo value)
			{
				super.row.set(3, value);
			}
			public void setCellColTargetTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public void setColTargetDescReadOnly(boolean value)
			{
				super.row.setReadOnly(4, value);
			}
			public boolean isColTargetDescReadOnly()
			{
				return super.row.isReadOnly(4);
			}
			public void showColTargetDescOpened()
			{
				super.row.showOpened(4);
			}
			public String getColTargetDesc()
			{
				return (String)super.row.get(4);
			}
			public void setColTargetDesc(String value)
			{
				super.row.set(4, value);
			}
			public void setCellColTargetDescTooltip(String value)
			{
				super.row.setTooltip(4, value);
			}
			public void setColActivateTargetReadOnly(boolean value)
			{
				super.row.setReadOnly(5, value);
			}
			public boolean isColActivateTargetReadOnly()
			{
				return super.row.isReadOnly(5);
			}
			public void showColActivateTargetOpened()
			{
				super.row.showOpened(5);
			}
			public boolean getColActivateTarget()
			{
				return ((Boolean)super.row.get(5)).booleanValue();
			}
			public void setColActivateTarget(boolean value)
			{
				super.row.set(5, new Boolean(value));
			}
			public void setCellColActivateTargetTooltip(String value)
			{
				super.row.setTooltip(5, value);
			}
			public void setColWarningReadOnly(boolean value)
			{
				super.row.setReadOnly(6, value);
			}
			public boolean isColWarningReadOnly()
			{
				return super.row.isReadOnly(6);
			}
			public void showColWarningOpened()
			{
				super.row.showOpened(6);
			}
			public Integer getColWarning()
			{
				return (Integer)super.row.get(6);
			}
			public void setColWarning(Integer value)
			{
				super.row.set(6, value);
			}
			public void setCellColWarningTooltip(String value)
			{
				super.row.setTooltip(6, value);
			}
			public void setColStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(7, value);
			}
			public boolean isColStatusReadOnly()
			{
				return super.row.isReadOnly(7);
			}
			public void showColStatusOpened()
			{
				super.row.showOpened(7);
			}
			public ims.framework.controls.GridMutableComboBox getColStatus()
			{
				return new ims.framework.controls.GridMutableComboBox(super.row, 7);
			}
			public void setCellColStatusTooltip(String value)
			{
				super.row.setTooltip(7, value);
			}
			public ims.pathways.vo.PathwayTargetVo getValue()
			{
				return (ims.pathways.vo.PathwayTargetVo)super.row.getValue();
			}
			public void setValue(ims.pathways.vo.PathwayTargetVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdTargetsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdTargetsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdTargetsRow get(int index)
			{
				return new grdTargetsRow(super.collection.get(index));
			}
			public grdTargetsRow newRow()
			{
				return new grdTargetsRow(super.collection.newRow());
			}
			public grdTargetsRow newRow(boolean autoSelect)
			{
				return new grdTargetsRow(super.collection.newRow(autoSelect));
			}
			public grdTargetsRow newRowAt(int index)
			{
				return new grdTargetsRow(super.collection.newRowAt(index));
			}
			public grdTargetsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdTargetsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdTargetsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public void setColWeekNoCaption(String value)
			{
				this.grid.setColumnCaption(2, value);
			}
			private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
			{
				 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
			}
			public ims.pathways.vo.PathwayTargetVoCollection getValues()
			{
				ims.pathways.vo.PathwayTargetVoCollection listOfValues = new ims.pathways.vo.PathwayTargetVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.pathways.vo.PathwayTargetVo getValue()
			{
				return (ims.pathways.vo.PathwayTargetVo)super.grid.getValue();
			}
			public void setValue(ims.pathways.vo.PathwayTargetVo value)
			{
				super.grid.setValue(value);
			}
			public grdTargetsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdTargetsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdTargetsRowCollection getRows()
			{
				return new grdTargetsRowCollection(super.grid.getRows());
			}
			public grdTargetsRow getRowByValue(ims.pathways.vo.PathwayTargetVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdTargetsRow(row);
			}
			public void setColRTTMappingsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColRTTMappingsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColExtMappingsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColExtMappingsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColWeekNoHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColWeekNoHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColTargetHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColTargetHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public void setColTargetDescHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(4, value);
			}
			public String getColTargetDescHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(4);
			}
			public void setColActivateTargetHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(5, value);
			}
			public String getColActivateTargetHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(5);
			}
			public void setColWarningHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(6, value);
			}
			public String getColWarningHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(6);
			}
			public void setColStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(7, value);
			}
			public String getColStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(7);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pathway Targets:", new Integer(1), null, new Integer(0)}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 240, ims.framework.enumerations.ControlAnchoring.ALL);
			Grid m_grdTargetsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 2012), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Pathways.contextMenuPathwayTargets, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
			addControl(m_grdTargetsTemp);
			grdTargetsGrid grdTargets = (grdTargetsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTargetsGrid.class, m_grdTargetsTemp);
			grdTargets.addStringColumn("Column Header", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTargets.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTargets.addIntColumn("Week No.", 0, 0, 70, false, true, null, false, 1, true);
			grdTargets.addStringColumn("Target Name", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTargets.addStringColumn("Target Description", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTargets.addBoolColumn("Activate Target", 0, 1, 90, false, false, 0, true);
			grdTargets.addIntColumn("Warning", 0, 0, 75, false, true, null, false, 0, true);
			grdTargets.setColWarningHeaderTooltip("Indicates this target should be displayed as a warning within within X weeks of the target Date");
			grdTargets.addMutableComboBoxColumn("Status", 0, 0, -1, false, true, true, false, false, true, -1);
			super.addGrid(grdTargets);
		}
		public grdTargetsGrid grdTargets()
		{
			return (grdTargetsGrid)super.getGrid(0);
		}
	}
	public static class cmbJourneyCountTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.pathways.vo.lookups.JourneyCountType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.pathways.vo.lookups.JourneyCountType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.pathways.vo.lookups.JourneyCountType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.pathways.vo.lookups.JourneyCountType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.pathways.vo.lookups.JourneyCountType value)
		{
			return super.control.removeRow(value);
		}
		public ims.pathways.vo.lookups.JourneyCountType getValue()
		{
			return (ims.pathways.vo.lookups.JourneyCountType)super.control.getValue();
		}
		public void setValue(ims.pathways.vo.lookups.JourneyCountType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Pathways.SelectedPathway", "_cv_Pathways.SelectedPathway").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Pathways.SelectedPathway' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Pathways.contextMenuPathwayTargets = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Pathways.contextMenuPathwayTargetsADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Pathways.contextMenuPathwayTargets.add(contextMenus.Pathways.contextMenuPathwayTargetsADDItem);
		contextMenus.Pathways.contextMenuPathwayTargetsEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Pathways.contextMenuPathwayTargets.add(contextMenus.Pathways.contextMenuPathwayTargetsEDITItem);
		contextMenus.Pathways.contextMenuPathwayTargetsVIEWItem = factory.createMenuItem(startControlID.intValue() + 3, "View", true, false, new Integer(102223), false, false);
		contextMenus.Pathways.contextMenuPathwayTargets.add(contextMenus.Pathways.contextMenuPathwayTargetsVIEWItem);
		form.registerMenu(contextMenus.Pathways.contextMenuPathwayTargets);


		// Panel Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 296, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Details", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 104, 160, 344, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_customControlMosForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 7, skipContextValidation);
		//ims.framework.Control m_customControlMosControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(104), new Integer(160), new Integer(344), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 7), m_customControlMosForm, instance1 } );
		ims.framework.Control m_customControlMosControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 7), m_customControlMosForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlMosControl);
		Menu[] menus1 = m_customControlMosForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 448, 48, 384, 224, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ims.framework.FormUiLogic m_customControlMappingsForm = loader.loadComponent(104124, appForm, startControlID * 10 + 2000, anchoringHelper5.getSize(), instance2, startTabIndex.intValue() + 1010, skipContextValidation);
		//ims.framework.Control m_customControlMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(448), new Integer(48), new Integer(384), new Integer(224), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 1010), m_customControlMappingsForm, instance2 } );
		ims.framework.Control m_customControlMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 1010), m_customControlMappingsForm, instance2, Boolean.FALSE } );
		super.addControl(m_customControlMappingsControl);
		Menu[] menus2 = m_customControlMappingsForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}

		// Container Clasess
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 0, 312, 848, 272, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_ctnTargets = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_ctnTargets);
		ctnTargetsContainer ctnTargets = (ctnTargetsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnTargetsContainer.class, m_ctnTargets, factory);
		ims.framework.utils.SizeInfo m_ctnTargetsDesignSize = new ims.framework.utils.SizeInfo(848, 272);
		ims.framework.utils.SizeInfo m_ctnTargetsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper6.getWidth(), anchoringHelper6.getHeight());
		ctnTargets.setContext(form, appForm, m_ctnTargets, loader, contextMenus, startControlID, m_ctnTargetsDesignSize, m_ctnTargetsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnTargets);

		// Label Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 192, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Journey Count:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 312, 224, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "weeks", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 104, 224, 146, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referral to Treatment in:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 160, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 248, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 88, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2013), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 760, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2014), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 104, 64, 328, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 104, 32, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 104, 192, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbJourneyCountTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 2015), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.FALSE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbJourneyCountTypeTemp);
		cmbJourneyCountTypeComboBox cmbJourneyCountType = (cmbJourneyCountTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbJourneyCountTypeComboBox.class, m_cmbJourneyCountTypeTemp);
		super.addComboBox(cmbJourneyCountType);
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 104, 248, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 104, 112, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 104, 280, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 2011), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Non-standard pathway", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 104, 136, 208, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Default pathway for this Specialty", Boolean.TRUE, null}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 256, 224, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));

		// Link Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 632, 32, 168, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to Pathway Search form", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.mosquery.IComponent customControlMos()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setcustomControlMosValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setcustomControlMosVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean iscustomControlMosVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setcustomControlMosEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean iscustomControlMosEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public ims.admin.forms.taxonomymappings.IComponent customControlMappings()
	{
		return (ims.admin.forms.taxonomymappings.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
	}
	public void setcustomControlMappingsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
	}
	public void setcustomControlMappingsVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setVisible(value);
	}
	public boolean iscustomControlMappingsVisible()
	{
		return ((ims.framework.Control)super.getControl(2)).isVisible();
	}
	public void setcustomControlMappingsEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setEnabled(value);
	}
	public boolean iscustomControlMappingsEnabled()
	{
		return ((ims.framework.Control)super.getControl(2)).isEnabled();
	}
	public ctnTargetsContainer ctnTargets()
	{
		return (ctnTargetsContainer)super.getContainer(0);
	}
	public Label lblJourneyCount()
	{
		return (Label)super.getControl(5);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(12);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(13);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(14);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(15);
	}
	public TextBox txtDescription()
	{
		return (TextBox)super.getControl(16);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(17);
	}
	public cmbJourneyCountTypeComboBox cmbJourneyCountType()
	{
		return (cmbJourneyCountTypeComboBox)super.getComboBox(0);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(1);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(2);
	}
	public CheckBox chkNonStandard()
	{
		return (CheckBox)super.getControl(21);
	}
	public CheckBox chkIsDefault()
	{
		return (CheckBox)super.getControl(22);
	}
	public IntBox intNumWeeks()
	{
		return (IntBox)super.getControl(23);
	}
	public Link lnkPathway()
	{
		return (Link)super.getControl(24);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Pathways = new PathwaysForms();
		}
		public final class PathwaysForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private PathwaysForms()
			{
				PathwayTargetConfigDialog = new LocalFormName(132111);
				PathwaySearchAndSelect = new LocalFormName(132100);
			}
			public final FormName PathwayTargetConfigDialog;
			public final FormName PathwaySearchAndSelect;
		}

		public PathwaysForms Pathways;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedPathway = new ims.framework.ContextVariable("SelectedPathway", prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier + "");
			cxl_SelectedPathwayTargets = new ims.framework.ContextVariable("SelectedPathwayTargets", prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathwayTargets_" + componentIdentifier + "");
			cxl_AlreadyWithinSpeciality = new ims.framework.ContextVariable("AlreadyWithinSpeciality", prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__AlreadyWithinSpeciality_" + componentIdentifier + "");
		}
		
		public boolean getSelectedPathwayIsNotNull()
		{
			return !cxl_SelectedPathway.getValueIsNull(context);
		}
		public ims.pathways.vo.PathwayVo getSelectedPathway()
		{
			return (ims.pathways.vo.PathwayVo)cxl_SelectedPathway.getValue(context);
		}
		public void setSelectedPathway(ims.pathways.vo.PathwayVo value)
		{
			cxl_SelectedPathway.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedPathway = null;
		public boolean getSelectedPathwayTargetsIsNotNull()
		{
			return !cxl_SelectedPathwayTargets.getValueIsNull(context);
		}
		public ims.pathways.vo.PathwayTargetVoCollection getSelectedPathwayTargets()
		{
			return (ims.pathways.vo.PathwayTargetVoCollection)cxl_SelectedPathwayTargets.getValue(context);
		}
		public void setSelectedPathwayTargets(ims.pathways.vo.PathwayTargetVoCollection value)
		{
			cxl_SelectedPathwayTargets.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedPathwayTargets = null;
		public boolean getAlreadyWithinSpecialityIsNotNull()
		{
			return !cxl_AlreadyWithinSpeciality.getValueIsNull(context);
		}
		public Boolean getAlreadyWithinSpeciality()
		{
			return (Boolean)cxl_AlreadyWithinSpeciality.getValue(context);
		}
		public void setAlreadyWithinSpeciality(Boolean value)
		{
			cxl_AlreadyWithinSpeciality.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AlreadyWithinSpeciality = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public PathwaysNamespace Pathways = new PathwaysNamespace();
		public final class PathwaysNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class PathwayTargets implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int VIEW = 3;
			}
			public void disableAllPathwayTargetsMenuItems()
			{
				this.contextMenuPathwayTargetsADDItem.setEnabled(false);
				this.contextMenuPathwayTargetsEDITItem.setEnabled(false);
				this.contextMenuPathwayTargetsVIEWItem.setEnabled(false);
			}
			public void hideAllPathwayTargetsMenuItems()
			{
				this.contextMenuPathwayTargetsADDItem.setVisible(false);
				this.contextMenuPathwayTargetsEDITItem.setVisible(false);
				this.contextMenuPathwayTargetsVIEWItem.setVisible(false);
			}
			private Menu contextMenuPathwayTargets;
			public ReadOnlyMenuItem getPathwayTargetsADDItem()
			{
				return this.contextMenuPathwayTargetsADDItem;
			}
			private MenuItem contextMenuPathwayTargetsADDItem;
			public ReadOnlyMenuItem getPathwayTargetsEDITItem()
			{
				return this.contextMenuPathwayTargetsEDITItem;
			}
			private MenuItem contextMenuPathwayTargetsEDITItem;
			public ReadOnlyMenuItem getPathwayTargetsVIEWItem()
			{
				return this.contextMenuPathwayTargetsVIEWItem;
			}
			private MenuItem contextMenuPathwayTargetsVIEWItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[89];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-ID", "ID_Target");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-STATUS", "Status");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-EVENTLINKTYPE", "EventLinkType");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-TARGETDATECALCULATION", "TargetDateCalculation");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedPathway", "BO-1089100002-ID", "ID_Pathway");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Pathways.PathwayToCopy", "BO-1089100002-ID", "ID_Pathway");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier, "BO-1089100002-ID", "ID_Pathway");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier, "BO-1089100002-NAME", "Name");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier, "BO-1089100002-DESCRIPTION", "Description");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier, "BO-1089100002-STATUS", "Status");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier, "BO-1089100002-SPECIALTY", "Specialty");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier, "BO-1089100002-NUMWEEKSDAYS", "NumWeeks");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier, "BO-1089100002-JOURNEYCOUNTTYPE", "JourneyCountType");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier, "BO-1089100002-ISDEFAULT", "IsDefault");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier, "BO-1089100002-ISNON18WEEK", "IsNon18Week");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.PathwayConfiguration.__internal_x_context__SelectedPathway_" + componentIdentifier, "BO-1089100002-CONSULTANT", "Consultant");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
