//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.forms.pathwaytargetconfigdialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrMappingsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabExternalContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Specialty value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Specialty value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdEventsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdEventsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setIsParentRow(boolean value)
				{
					super.setIsParentRow(value);
				}
				public boolean isParentRow()
				{
					return super.isParentRow();
				}
				public void setExpanded(boolean value)
				{
					super.setExpanded(value);
				}
				public boolean isExpanded()
				{
					return super.isExpanded();
				}
				public void setColNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColNameOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColName(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.pathways.vo.EventLiteVo getColName()
				{
					return (ims.pathways.vo.EventLiteVo)super.row.get(0);
				}
				public void setColName(ims.pathways.vo.EventLiteVo value)
				{
					super.row.set(0, value);
				}
				public void setCellColNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColPtExMappingReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColPtExMappingReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColPtExMappingOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColPtExMapping(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.pathways.vo.PathwayTargetExternalEventMappingVo getColPtExMapping()
				{
					return (ims.pathways.vo.PathwayTargetExternalEventMappingVo)super.row.get(1);
				}
				public void setColPtExMapping(ims.pathways.vo.PathwayTargetExternalEventMappingVo value)
				{
					super.row.set(1, value);
				}
				public void setCellColPtExMappingTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColProviderReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColProviderReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColProviderOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColProvider(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColProvider()
				{
					return (String)super.row.get(2);
				}
				public void setColProvider(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColProviderTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColGroupReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColGroupReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColGroupOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColGroup(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColGroup()
				{
					return (String)super.row.get(3);
				}
				public void setColGroup(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColGroupTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColDetailReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColDetailReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColDetailOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColDetail(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColDetail()
				{
					return (String)super.row.get(4);
				}
				public void setColDetail(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColDetailTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColSpecialtyReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColSpecialtyReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColSpecialtyOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColSpecialty(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColSpecialty()
				{
					return (String)super.row.get(5);
				}
				public void setColSpecialty(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColSpecialtyTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColConsultantReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColConsultantReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColConsultantOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColConsultant(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getColConsultant()
				{
					return (String)super.row.get(6);
				}
				public void setColConsultant(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColConsultantTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColClinicCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColClinicCodeReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColClinicCodeOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForColClinicCode(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getColClinicCode()
				{
					return (String)super.row.get(7);
				}
				public void setColClinicCode(String value)
				{
					super.row.set(7, value);
				}
				public void setCellColClinicCodeTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setColDescrReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean isColDescrReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showColDescrOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForColDescr(String value)
				{
					super.row.setTooltip(8, value);
				}
				public String getColDescr()
				{
					return (String)super.row.get(8);
				}
				public void setColDescr(String value)
				{
					super.row.set(8, value);
				}
				public void setCellColDescrTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(9, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(9);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(9);
				}
				public void setTooltipForColSelect(String value)
				{
					super.row.setTooltip(9, value);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(9)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(9, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(9, value);
				}
				public ims.pathways.vo.ExternalEventMappingVo getValue()
				{
					return (ims.pathways.vo.ExternalEventMappingVo)super.row.getValue();
				}
				public void setValue(ims.pathways.vo.ExternalEventMappingVo value)
				{
					super.row.setValue(value);
				}
				public grdEventsRow getParentRow()
				{
					return super.row.getParent() == null ? null : new grdEventsRow(super.row.getParent());
				}
				public grdEventsRowCollection getRows()
				{
					if(this.collection == null)
						this.collection = new grdEventsRowCollection(super.row.getRows());
					return this.collection;
				}
				private grdEventsRowCollection collection;
			}
			public static class grdEventsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdEventsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdEventsRow get(int index)
				{
					return new grdEventsRow(super.collection.get(index));
				}
				public grdEventsRow newRow()
				{
					return new grdEventsRow(super.collection.newRow());
				}
				public grdEventsRow newRow(boolean autoSelect)
				{
					return new grdEventsRow(super.collection.newRow(autoSelect));
				}
				public grdEventsRow newRowAt(int index)
				{
					return new grdEventsRow(super.collection.newRowAt(index));
				}
				public grdEventsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdEventsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdEventsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow[] getAllRows()
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow row = getRows().get(x);
						rows.add(row);
						GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow[] result = new GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow)rows.get(x);
					}
					return result;
				}
				public GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow[] getAllRows(GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow parentRow)
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow row = parentRow.getRows().get(x);
						rows.add(row);
						GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow[] result = new GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow)rows.get(x);
					}
					return result;
				}
				public void expandAll()
				{
					expandCollapseAll(true);
				}
				public void collapseAll()
				{
					expandCollapseAll(false);
				}
				private void expandCollapseAll(boolean expand)
				{
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow row = getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void expandCollapseRow(GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow parentRow, boolean expand)
				{
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow row = parentRow.getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				public void populateTree(ims.framework.cn.data.TreeModel value)
				{
					populateTree(value, false);
				}
				public void populateTree(ims.framework.cn.data.TreeModel value, boolean displayImages)
				{
					getRows().clear();
					ims.framework.cn.data.TreeNode[] nodes = value.getRootNodes();
					for(int x = 0; x < nodes.length; x++)
					{
						populateTreeNode(null, nodes[x], displayImages);
					}
				}
				private void populateTreeNode(GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow parentRow, ims.framework.cn.data.TreeNode value, boolean displayImages)
				{
					if(ims.pathways.vo.EventLiteVo.class.isAssignableFrom(value.getClass()))
					{
						GenForm.lyrMappingsLayer.tabExternalContainer.grdEventsRow row = null;
						if(parentRow == null)
							row = getRows().newRow();
						else
							row = parentRow.getRows().newRow();
						row.setColName((ims.pathways.vo.EventLiteVo)value);
						if(displayImages)
						{
							if(value.getExpandedImage() != null)
								row.setExpandedImage(value.getExpandedImage());
							if(value.getCollapsedImage() != null)
								row.setCollapsedImage(value.getCollapsedImage());
						}
						ims.framework.cn.data.TreeNode[] nodes = value.getChildren();
						for(int x = 0; x < nodes.length; x++)
						{
							populateTreeNode(row, nodes[x], displayImages);
						}
					}
				}
				private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.pathways.vo.ExternalEventMappingVoCollection getValues()
				{
					ims.pathways.vo.ExternalEventMappingVoCollection listOfValues = new ims.pathways.vo.ExternalEventMappingVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.pathways.vo.ExternalEventMappingVo getValue()
				{
					return (ims.pathways.vo.ExternalEventMappingVo)super.grid.getValue();
				}
				public void setValue(ims.pathways.vo.ExternalEventMappingVo value)
				{
					super.grid.setValue(value);
				}
				public grdEventsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdEventsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdEventsRowCollection getRows()
				{
					return new grdEventsRowCollection(super.grid.getRows());
				}
				public grdEventsRow getRowByValue(ims.pathways.vo.ExternalEventMappingVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdEventsRow(row);
				}
				public void setColNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColPtExMappingHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColPtExMappingHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColProviderHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColProviderHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColGroupHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColGroupHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColDetailHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColDetailHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColSpecialtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColSpecialtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColConsultantHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColConsultantHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColClinicCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColClinicCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setColDescrHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getColDescrHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(9, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(9);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 285, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Display all external event mappings for specialty:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 320, 14, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.FALSE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSpecialtyTemp);
				cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
				super.addComboBox(cmbSpecialty);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 776, 192, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdEventsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdEventsTemp);
				grdEventsGrid grdEvents = (grdEventsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdEventsGrid.class, m_grdEventsTemp);
				grdEvents.addTreeColumn("Event Name", 0, 90, false, true);
				grdEvents.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEvents.addStringColumn("Prov. Sys.", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEvents.addStringColumn("Group", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEvents.addStringColumn("Detail", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEvents.addStringColumn("Specialty", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEvents.addStringColumn("Consultant", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEvents.addStringColumn("Clinic Code", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEvents.addStringColumn("Description", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEvents.addBoolColumn("Select", 0, 1, -1, false, false, 0, true);
				super.addGrid(grdEvents);
			}

			public cmbSpecialtyComboBox cmbSpecialty()
			{
				return (cmbSpecialtyComboBox)super.getComboBox(0);
			}
			public grdEventsGrid grdEvents()
			{
				return (grdEventsGrid)super.getGrid(0);
			}
		}
		public static class tabRTTEventsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdRTTEventsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdRTTEventsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setIsParentRow(boolean value)
				{
					super.setIsParentRow(value);
				}
				public boolean isParentRow()
				{
					return super.isParentRow();
				}
				public void setExpanded(boolean value)
				{
					super.setExpanded(value);
				}
				public boolean isExpanded()
				{
					return super.isExpanded();
				}
				public void setColNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColNameOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColName(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.pathways.vo.EventLiteVo getColName()
				{
					return (ims.pathways.vo.EventLiteVo)super.row.get(0);
				}
				public void setColName(ims.pathways.vo.EventLiteVo value)
				{
					super.row.set(0, value);
				}
				public void setCellColNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColProviderReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColProviderReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColProviderOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColProvider(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColProvider()
				{
					return (String)super.row.get(1);
				}
				public void setColProvider(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColProviderTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPasCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPasCodeReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPasCodeOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColPasCode(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColPasCode()
				{
					return (String)super.row.get(2);
				}
				public void setColPasCode(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColPasCodeTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColNatCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColNatCodeReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColNatCodeOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColNatCode(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColNatCode()
				{
					return (String)super.row.get(3);
				}
				public void setColNatCode(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColNatCodeTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColActionReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColActionReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColActionOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColAction(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColAction()
				{
					return (String)super.row.get(4);
				}
				public void setColAction(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColActionTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColSelect(String value)
				{
					super.row.setTooltip(5, value);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(5)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(5, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.pathways.vo.RTTEventVo getValue()
				{
					return (ims.pathways.vo.RTTEventVo)super.row.getValue();
				}
				public void setValue(ims.pathways.vo.RTTEventVo value)
				{
					super.row.setValue(value);
				}
				public grdRTTEventsRow getParentRow()
				{
					return super.row.getParent() == null ? null : new grdRTTEventsRow(super.row.getParent());
				}
				public grdRTTEventsRowCollection getRows()
				{
					if(this.collection == null)
						this.collection = new grdRTTEventsRowCollection(super.row.getRows());
					return this.collection;
				}
				private grdRTTEventsRowCollection collection;
			}
			public static class grdRTTEventsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdRTTEventsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdRTTEventsRow get(int index)
				{
					return new grdRTTEventsRow(super.collection.get(index));
				}
				public grdRTTEventsRow newRow()
				{
					return new grdRTTEventsRow(super.collection.newRow());
				}
				public grdRTTEventsRow newRow(boolean autoSelect)
				{
					return new grdRTTEventsRow(super.collection.newRow(autoSelect));
				}
				public grdRTTEventsRow newRowAt(int index)
				{
					return new grdRTTEventsRow(super.collection.newRowAt(index));
				}
				public grdRTTEventsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdRTTEventsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdRTTEventsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow[] getAllRows()
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow row = getRows().get(x);
						rows.add(row);
						GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow[] result = new GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow)rows.get(x);
					}
					return result;
				}
				public GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow[] getAllRows(GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow parentRow)
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow row = parentRow.getRows().get(x);
						rows.add(row);
						GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow[] result = new GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow)rows.get(x);
					}
					return result;
				}
				public void expandAll()
				{
					expandCollapseAll(true);
				}
				public void collapseAll()
				{
					expandCollapseAll(false);
				}
				private void expandCollapseAll(boolean expand)
				{
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow row = getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void expandCollapseRow(GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow parentRow, boolean expand)
				{
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow row = parentRow.getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				public void populateTree(ims.framework.cn.data.TreeModel value)
				{
					populateTree(value, false);
				}
				public void populateTree(ims.framework.cn.data.TreeModel value, boolean displayImages)
				{
					getRows().clear();
					ims.framework.cn.data.TreeNode[] nodes = value.getRootNodes();
					for(int x = 0; x < nodes.length; x++)
					{
						populateTreeNode(null, nodes[x], displayImages);
					}
				}
				private void populateTreeNode(GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow parentRow, ims.framework.cn.data.TreeNode value, boolean displayImages)
				{
					if(ims.pathways.vo.EventLiteVo.class.isAssignableFrom(value.getClass()))
					{
						GenForm.lyrMappingsLayer.tabRTTEventsContainer.grdRTTEventsRow row = null;
						if(parentRow == null)
							row = getRows().newRow();
						else
							row = parentRow.getRows().newRow();
						row.setColName((ims.pathways.vo.EventLiteVo)value);
						if(displayImages)
						{
							if(value.getExpandedImage() != null)
								row.setExpandedImage(value.getExpandedImage());
							if(value.getCollapsedImage() != null)
								row.setCollapsedImage(value.getCollapsedImage());
						}
						ims.framework.cn.data.TreeNode[] nodes = value.getChildren();
						for(int x = 0; x < nodes.length; x++)
						{
							populateTreeNode(row, nodes[x], displayImages);
						}
					}
				}
				private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.pathways.vo.RTTEventVoCollection getValues()
				{
					ims.pathways.vo.RTTEventVoCollection listOfValues = new ims.pathways.vo.RTTEventVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.pathways.vo.RTTEventVo getValue()
				{
					return (ims.pathways.vo.RTTEventVo)super.grid.getValue();
				}
				public void setValue(ims.pathways.vo.RTTEventVo value)
				{
					super.grid.setValue(value);
				}
				public grdRTTEventsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdRTTEventsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdRTTEventsRowCollection getRows()
				{
					return new grdRTTEventsRowCollection(super.grid.getRows());
				}
				public grdRTTEventsRow getRowByValue(ims.pathways.vo.RTTEventVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdRTTEventsRow(row);
				}
				public void setColNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColProviderHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColProviderHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPasCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPasCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColNatCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColNatCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColActionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColActionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 776, 224, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdRTTEventsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdRTTEventsTemp);
				grdRTTEventsGrid grdRTTEvents = (grdRTTEventsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRTTEventsGrid.class, m_grdRTTEventsTemp);
				grdRTTEvents.addTreeColumn("Event Name", 0, 140, false, true);
				grdRTTEvents.addStringColumn("Provider System", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdRTTEvents.addStringColumn("PAS Code", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdRTTEvents.addStringColumn("National Code", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdRTTEvents.addStringColumn("Action", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdRTTEvents.addBoolColumn("Select", 0, 1, -1, false, false, 0, true);
				super.addGrid(grdRTTEvents);
			}

			public grdRTTEventsGrid grdRTTEvents()
			{
				return (grdRTTEventsGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 312, 816, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabExternal = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"External Events", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabExternalContainer m_tabExternalContainer = (tabExternalContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabExternalContainer.class, m_tabExternal, factory);
			super.addContainer(m_tabExternal, m_tabExternalContainer);
			ims.framework.utils.SizeInfo m_tabExternalDesignSize = new ims.framework.utils.SizeInfo(816, 272);
			ims.framework.utils.SizeInfo m_tabExternalRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper5.getWidth(), anchoringHelper5.getHeight());
			m_tabExternalContainer.setContext(form, appForm, m_tabExternal, loader, form_images_local, startControlID, m_tabExternalDesignSize, m_tabExternalRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 312, 816, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabRTTEvents = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"RTT Events", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabRTTEventsContainer m_tabRTTEventsContainer = (tabRTTEventsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRTTEventsContainer.class, m_tabRTTEvents, factory);
			super.addContainer(m_tabRTTEvents, m_tabRTTEventsContainer);
			ims.framework.utils.SizeInfo m_tabRTTEventsDesignSize = new ims.framework.utils.SizeInfo(816, 272);
			ims.framework.utils.SizeInfo m_tabRTTEventsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper6.getWidth(), anchoringHelper6.getHeight());
			m_tabRTTEventsContainer.setContext(form, appForm, m_tabRTTEvents, loader, form_images_local, startControlID, m_tabRTTEventsDesignSize, m_tabRTTEventsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabExternal().setVisible(false);
			tabRTTEvents().setVisible(false);
		}
		public void settabExternalEnabled(boolean value)
		{
			tabExternal().setEnabled(value);
		}
		public void settabRTTEventsEnabled(boolean value)
		{
			tabRTTEvents().setEnabled(value);
		}
		public void showtabExternal()
		{
			tabRTTEvents().setVisible(false);
			tabExternal().setVisible(true);
		}
		public void showtabRTTEvents()
		{
			tabExternal().setVisible(false);
			tabRTTEvents().setVisible(true);
		}

		public tabExternalContainer tabExternal()
		{
			return (tabExternalContainer)super.layers.get(0);
		}
		public tabRTTEventsContainer tabRTTEvents()
		{
			return (tabRTTEventsContainer)super.layers.get(1);
		}
	}
	public static class ctnTargetSelectContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbSearchEventComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.pathways.vo.lookups.EventLinkType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.pathways.vo.lookups.EventLinkType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.pathways.vo.lookups.EventLinkType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.pathways.vo.lookups.EventLinkType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.pathways.vo.lookups.EventLinkType value)
			{
				return super.control.removeRow(value);
			}
			public ims.pathways.vo.lookups.EventLinkType getValue()
			{
				return (ims.pathways.vo.lookups.EventLinkType)super.control.getValue();
			}
			public void setValue(ims.pathways.vo.lookups.EventLinkType value)
			{
				super.control.setValue(value);
			}
		}
		public static class grdTargetsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdTargetsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColNameReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColNameReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColNameOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForColName(String value)
			{
				super.row.setTooltip(0, value);
			}
			public String getColName()
			{
				return (String)super.row.get(0);
			}
			public void setColName(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColNameTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColDescrReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColDescrReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColDescrOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForColDescr(String value)
			{
				super.row.setTooltip(1, value);
			}
			public String getColDescr()
			{
				return (String)super.row.get(1);
			}
			public void setColDescr(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColDescrTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColEventLinkReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColEventLinkReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColEventLinkOpened()
			{
				super.row.showOpened(2);
			}
			public void setTooltipForColEventLink(String value)
			{
				super.row.setTooltip(2, value);
			}
			public String getColEventLink()
			{
				return (String)super.row.get(2);
			}
			public void setColEventLink(String value)
			{
				super.row.set(2, value);
			}
			public void setCellColEventLinkTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColStatusReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColStatusOpened()
			{
				super.row.showOpened(3);
			}
			public void setTooltipForColStatus(String value)
			{
				super.row.setTooltip(3, value);
			}
			public String getColStatus()
			{
				return (String)super.row.get(3);
			}
			public void setColStatus(String value)
			{
				super.row.set(3, value);
			}
			public void setCellColStatusTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public ims.pathways.vo.TargetShortVo getValue()
			{
				return (ims.pathways.vo.TargetShortVo)super.row.getValue();
			}
			public void setValue(ims.pathways.vo.TargetShortVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdTargetsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdTargetsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdTargetsRow get(int index)
			{
				return new grdTargetsRow(super.collection.get(index));
			}
			public grdTargetsRow newRow()
			{
				return new grdTargetsRow(super.collection.newRow());
			}
			public grdTargetsRow newRow(boolean autoSelect)
			{
				return new grdTargetsRow(super.collection.newRow(autoSelect));
			}
			public grdTargetsRow newRowAt(int index)
			{
				return new grdTargetsRow(super.collection.newRowAt(index));
			}
			public grdTargetsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdTargetsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdTargetsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
			{
				super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
			}
			public ims.pathways.vo.TargetShortVoCollection getValues()
			{
				ims.pathways.vo.TargetShortVoCollection listOfValues = new ims.pathways.vo.TargetShortVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.pathways.vo.TargetShortVo getValue()
			{
				return (ims.pathways.vo.TargetShortVo)super.grid.getValue();
			}
			public void setValue(ims.pathways.vo.TargetShortVo value)
			{
				super.grid.setValue(value);
			}
			public grdTargetsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdTargetsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdTargetsRowCollection getRows()
			{
				return new grdTargetsRowCollection(super.grid.getRows());
			}
			public grdTargetsRow getRowByValue(ims.pathways.vo.TargetShortVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdTargetsRow(row);
			}
			public void setColNameHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColNameHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColDescrHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColDescrHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColEventLinkHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColEventLinkHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 384, 15, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Event Link:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 80, 13, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 456, 13, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbSearchEventTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSearchEventTemp);
			cmbSearchEventComboBox cmbSearchEvent = (cmbSearchEventComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSearchEventComboBox.class, m_cmbSearchEventTemp);
			super.addComboBox(cmbSearchEvent);
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 208, ims.framework.enumerations.ControlAnchoring.ALL);
			Grid m_grdTargetsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
			addControl(m_grdTargetsTemp);
			grdTargetsGrid grdTargets = (grdTargetsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTargetsGrid.class, m_grdTargetsTemp);
			grdTargets.addStringColumn("Target Name", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTargets.addWrapTextColumn("Target Description", 0, 0, 250, true, false, 0, true);
			grdTargets.addStringColumn("Event Link Type", 0, 0, 200, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTargets.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdTargets);
	
			// Image Buttons Controls
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 768, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 800, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		}
		public TextBox txtSearchName()
		{
			return (TextBox)super.getControl(2);
		}
		public cmbSearchEventComboBox cmbSearchEvent()
		{
			return (cmbSearchEventComboBox)super.getComboBox(0);
		}
		public grdTargetsGrid grdTargets()
		{
			return (grdTargetsGrid)super.getGrid(0);
		}
		public ImageButton imbSearch()
		{
			return (ImageButton)super.getControl(5);
		}
		public ImageButton imbClear()
		{
			return (ImageButton)super.getControl(6);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(50);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrMappingsLayer m_lyrMappingsLayer = (lyrMappingsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrMappingsLayer.class, this, factory);
		super.addLayer(m_lyrMappingsLayer);
		m_lyrMappingsLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Container Clasess
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 840, 280, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Container m_ctnTargetSelect = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, new Boolean(false)});
		addControl(m_ctnTargetSelect);
		ctnTargetSelectContainer ctnTargetSelect = (ctnTargetSelectContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnTargetSelectContainer.class, m_ctnTargetSelect, factory);
		ims.framework.utils.SizeInfo m_ctnTargetSelectDesignSize = new ims.framework.utils.SizeInfo(840, 280);
		ims.framework.utils.SizeInfo m_ctnTargetSelectRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
		ctnTargetSelect.setContext(form, appForm, m_ctnTargetSelect, loader, this.getImages(), startControlID, m_ctnTargetSelectDesignSize, m_ctnTargetSelectRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnTargetSelect);

		// Label Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 288, 462, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Select Mapping(s) that create the Event(s) linked to this Target for this Pathway", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 672, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "OK", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrMappingsLayer lyrMappings()
	{
		return (lyrMappingsLayer)super.getLayer(0);
	}
	public ctnTargetSelectContainer ctnTargetSelect()
	{
		return (ctnTargetSelectContainer)super.getContainer(0);
	}
	public Label lblMapping()
	{
		return (Label)super.getControl(3);
	}
	public Button btnOk()
	{
		return (Button)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedEventTargets = new ims.framework.ContextVariable("SelectedEventTargets", prefix + "_lv_Pathways.PathwayTargetConfigDialog.__internal_x_context__SelectedEventTargets_" + componentIdentifier + "");
		}
		
		public boolean getSelectedEventTargetsIsNotNull()
		{
			return !cxl_SelectedEventTargets.getValueIsNull(context);
		}
		public ims.pathways.vo.EventTargetShortVoCollection getSelectedEventTargets()
		{
			return (ims.pathways.vo.EventTargetShortVoCollection)cxl_SelectedEventTargets.getValue(context);
		}
		public void setSelectedEventTargets(ims.pathways.vo.EventTargetShortVoCollection value)
		{
			cxl_SelectedEventTargets.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedEventTargets = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[77];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-ID", "ID_Target");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-STATUS", "Status");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-EVENTLINKTYPE", "EventLinkType");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedTarget", "BO-1089100001-TARGETDATECALCULATION", "TargetDateCalculation");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
