//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.forms.worklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColHospNoReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColHospNoReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColHospNoOpened()
		{
			super.row.showOpened(0);
		}
		public String getColHospNo()
		{
			return (String)super.row.get(0);
		}
		public void setColHospNo(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColHospNoTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSurnameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSurnameOpened()
		{
			super.row.showOpened(1);
		}
		public String getColSurname()
		{
			return (String)super.row.get(1);
		}
		public void setColSurname(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColSurnameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColForenameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColForenameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColForenameOpened()
		{
			super.row.showOpened(2);
		}
		public String getColForename()
		{
			return (String)super.row.get(2);
		}
		public void setColForename(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColForenameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColDobReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColDobReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColDobOpened()
		{
			super.row.showOpened(3);
		}
		public String getColDob()
		{
			return (String)super.row.get(3);
		}
		public void setColDob(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColDobTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColSpecialtyReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColSpecialtyReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColSpecialtyOpened()
		{
			super.row.showOpened(4);
		}
		public String getColSpecialty()
		{
			return (String)super.row.get(4);
		}
		public void setColSpecialty(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColSpecialtyTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColTargetReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColTargetReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColTargetOpened()
		{
			super.row.showOpened(5);
		}
		public String getColTarget()
		{
			return (String)super.row.get(5);
		}
		public void setColTarget(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColTargetTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColStatusReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColStatusOpened()
		{
			super.row.showOpened(6);
		}
		public String getColStatus()
		{
			return (String)super.row.get(6);
		}
		public void setColStatus(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColStatusTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColPathwayReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColPathwayReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColPathwayOpened()
		{
			super.row.showOpened(7);
		}
		public String getColPathway()
		{
			return (String)super.row.get(7);
		}
		public void setColPathway(String value)
		{
			super.row.set(7, value);
		}
		public void setCellColPathwayTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.pathways.vo.PatientJourneyTargetVo getValue()
		{
			return (ims.pathways.vo.PatientJourneyTargetVo)super.row.getValue();
		}
		public void setValue(ims.pathways.vo.PatientJourneyTargetVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDetailsRow get(int index)
		{
			return new grdDetailsRow(super.collection.get(index));
		}
		public grdDetailsRow newRow()
		{
			return new grdDetailsRow(super.collection.newRow());
		}
		public grdDetailsRow newRow(boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdDetailsRow newRowAt(int index)
		{
			return new grdDetailsRow(super.collection.newRowAt(index));
		}
		public grdDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void setColHospNoCaption(String value)
		{
			this.grid.setColumnCaption(0, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.pathways.vo.PatientJourneyTargetVoCollection getValues()
		{
			ims.pathways.vo.PatientJourneyTargetVoCollection listOfValues = new ims.pathways.vo.PatientJourneyTargetVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.pathways.vo.PatientJourneyTargetVo getValue()
		{
			return (ims.pathways.vo.PatientJourneyTargetVo)super.grid.getValue();
		}
		public void setValue(ims.pathways.vo.PatientJourneyTargetVo value)
		{
			super.grid.setValue(value);
		}
		public grdDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDetailsRowCollection getRows()
		{
			return new grdDetailsRowCollection(super.grid.getRows());
		}
		public grdDetailsRow getRowByValue(ims.pathways.vo.PatientJourneyTargetVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDetailsRow(row);
		}
		public void setColHospNoHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColHospNoHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColForenameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColForenameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColDobHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColDobHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColSpecialtyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColSpecialtyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColTargetHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColTargetHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColPathwayHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColPathwayHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
	}
	public static class grdPathwaysRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPathwaysRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColNameOpened()
		{
			super.row.showOpened(0);
		}
		public ims.pathways.vo.PathwayLiteVo getColName()
		{
			return (ims.pathways.vo.PathwayLiteVo)super.row.get(0);
		}
		public void setColName(ims.pathways.vo.PathwayLiteVo value)
		{
			super.row.set(0, value);
		}
		public void setCellColNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.pathways.configuration.vo.PathwayRefVo getValue()
		{
			return (ims.pathways.configuration.vo.PathwayRefVo)super.row.getValue();
		}
		public void setValue(ims.pathways.configuration.vo.PathwayRefVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPathwaysRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPathwaysRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPathwaysRow get(int index)
		{
			return new grdPathwaysRow(super.collection.get(index));
		}
		public grdPathwaysRow newRow()
		{
			return new grdPathwaysRow(super.collection.newRow());
		}
		public grdPathwaysRow newRow(boolean autoSelect)
		{
			return new grdPathwaysRow(super.collection.newRow(autoSelect));
		}
		public grdPathwaysRow newRowAt(int index)
		{
			return new grdPathwaysRow(super.collection.newRowAt(index));
		}
		public grdPathwaysRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPathwaysRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPathwaysGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.pathways.configuration.vo.PathwayRefVo[] getValues()
		{
			ims.pathways.configuration.vo.PathwayRefVo[] listOfValues = new ims.pathways.configuration.vo.PathwayRefVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.pathways.configuration.vo.PathwayRefVo getValue()
		{
			return (ims.pathways.configuration.vo.PathwayRefVo)super.grid.getValue();
		}
		public void setValue(ims.pathways.configuration.vo.PathwayRefVo value)
		{
			super.grid.setValue(value);
		}
		public grdPathwaysRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPathwaysRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPathwaysRowCollection getRows()
		{
			return new grdPathwaysRowCollection(super.grid.getRows());
		}
		public grdPathwaysRow getRowByValue(ims.pathways.configuration.vo.PathwayRefVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPathwaysRow(row);
		}
		public void setColNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdTargetsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTargetsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColTargetReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTargetReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTargetOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getColTarget()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellColTargetTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColBreachStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColBreachStatusReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColBreachStatusOpened()
		{
			super.row.showOpened(1);
		}
		public ims.pathways.vo.lookups.BreachManagement getColBreachStatus()
		{
			return (ims.pathways.vo.lookups.BreachManagement)super.row.get(1);
		}
		public void setColBreachStatus(ims.pathways.vo.lookups.BreachManagement value)
		{
			super.row.set(1, value, true);
		}
		public void setCellColBreachStatusTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColWeeksReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColWeeksReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColWeeksOpened()
		{
			super.row.showOpened(2);
		}
		public Integer getColWeeks()
		{
			return (Integer)super.row.get(2);
		}
		public void setColWeeks(Integer value)
		{
			super.row.set(2, value);
		}
		public void setCellColWeeksTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTargetsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTargetsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTargetsRow get(int index)
		{
			return new grdTargetsRow(super.collection.get(index));
		}
		public grdTargetsRow newRow()
		{
			return new grdTargetsRow(super.collection.newRow());
		}
		public grdTargetsRow newRow(boolean autoSelect)
		{
			return new grdTargetsRow(super.collection.newRow(autoSelect));
		}
		public grdTargetsRow newRowAt(int index)
		{
			return new grdTargetsRow(super.collection.newRowAt(index));
		}
		public grdTargetsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTargetsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTargetsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdTargetsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTargetsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTargetsRowCollection getRows()
		{
			return new grdTargetsRowCollection(super.grid.getRows());
		}
		public grdTargetsRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTargetsRow(row);
		}
		public void setColTargetHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTargetHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColBreachStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColBreachStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox ColBreachStatusComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
		public void setColWeeksHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColWeeksHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(190);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Pathways.contextMenuWorkListJourneyTarget = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Pathways.contextMenuWorkListJourneyTargetNEW_EVENTItem = factory.createMenuItem(startControlID.intValue() + 1, "Create New Event", true, false, new Integer(102179), true, false);
		contextMenus.Pathways.contextMenuWorkListJourneyTarget.add(contextMenus.Pathways.contextMenuWorkListJourneyTargetNEW_EVENTItem);
		contextMenus.Pathways.contextMenuWorkListJourneyTargetVIEW_PAT_JOURNEYItem = factory.createMenuItem(startControlID.intValue() + 2, "View Patient Journey", true, false, new Integer(102223), true, false);
		contextMenus.Pathways.contextMenuWorkListJourneyTarget.add(contextMenus.Pathways.contextMenuWorkListJourneyTargetVIEW_PAT_JOURNEYItem);
		form.registerMenu(contextMenus.Pathways.contextMenuWorkListJourneyTarget);
		contextMenus.Pathways.contextMenuWokListPathwayTarget = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Pathways.contextMenuWokListPathwayTargetADDTARGETItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Targets", true, false, new Integer(102179), false, false);
		contextMenus.Pathways.contextMenuWokListPathwayTarget.add(contextMenus.Pathways.contextMenuWokListPathwayTargetADDTARGETItem);
		contextMenus.Pathways.contextMenuWokListPathwayTargetREMOVETARGETItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102148), false, false);
		contextMenus.Pathways.contextMenuWokListPathwayTarget.add(contextMenus.Pathways.contextMenuWokListPathwayTargetREMOVETARGETItem);
		form.registerMenu(contextMenus.Pathways.contextMenuWokListPathwayTarget);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 96, 48, 320, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_customControlMosForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 2, skipContextValidation);
		//ims.framework.Control m_customControlMosControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(96), new Integer(48), new Integer(320), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2), m_customControlMosForm, instance1 } );
		ims.framework.Control m_customControlMosControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2), m_customControlMosForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlMosControl);
		Menu[] menus1 = m_customControlMosForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 24, 18, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 48, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 757, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 96, 16, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);

		// Grid Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 200, 816, 392, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Pathways.contextMenuWorkListJourneyTarget, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdDetailsTemp);
		grdDetailsGrid grdDetails = (grdDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDetailsGrid.class, m_grdDetailsTemp);
		grdDetails.addStringColumn("Hosp No", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Surname", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Forename", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("DOB", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Specialty", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Target", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Target Status", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Pathway", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDetails);
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 424, 16, 336, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdPathwaysTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPathwaysTemp);
		grdPathwaysGrid grdPathways = (grdPathwaysGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPathwaysGrid.class, m_grdPathwaysTemp);
		grdPathways.addStringColumn("Pathway Name", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPathways.addBoolColumn("Select", 1, 1, -1, false, true, 0, true);
		super.addGrid(grdPathways);
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 96, 736, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdTargetsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Pathways.contextMenuWokListPathwayTarget, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdTargetsTemp);
		grdTargetsGrid grdTargets = (grdTargetsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTargetsGrid.class, m_grdTargetsTemp);
		grdTargets.addMutableComboBoxColumn("Target", 0, 0, 200, false, true, true, false, false, true, -1);
		grdTargets.addComboBoxColumn("Breach Status", 0, 0, 455, false, true, false, false, true, -1);
		grdTargets.addIntColumn("No. of Weeks", 0, 0, -1, false, true, null, false, 0, true);
		super.addGrid(grdTargets);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 768, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 802, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent customControlMos()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlMosValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlMosVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlMosVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlMosEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlMosEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Button btnPrint()
	{
		return (Button)super.getControl(3);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(0);
	}
	public grdDetailsGrid grdDetails()
	{
		return (grdDetailsGrid)super.getGrid(0);
	}
	public grdPathwaysGrid grdPathways()
	{
		return (grdPathwaysGrid)super.getGrid(1);
	}
	public grdTargetsGrid grdTargets()
	{
		return (grdTargetsGrid)super.getGrid(2);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(8);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(9);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Pathways = new PathwaysForms();
			Core = new CoreForms();
		}
		public final class PathwaysForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private PathwaysForms()
			{
				CreateNewEvent = new LocalFormName(132114);
				PatientJourney = new LocalFormName(132110);
			}
			public final FormName CreateNewEvent;
			public final FormName PatientJourney;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				Reports = new LocalFormName(102156);
			}
			public final FormName Reports;
		}

		public PathwaysForms Pathways;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Pathways = new ims.framework.ContextVariable("Pathways", prefix + "_lv_Pathways.Worklist.__internal_x_context__Pathways_" + componentIdentifier + "");
			cxl_Targets = new ims.framework.ContextVariable("Targets", prefix + "_lv_Pathways.Worklist.__internal_x_context__Targets_" + componentIdentifier + "");
			cxl_SearchCriteria = new ims.framework.ContextVariable("SearchCriteria", prefix + "_lv_Pathways.Worklist.__internal_x_context__SearchCriteria_" + componentIdentifier + "");
		}
		
		public boolean getPathwaysIsNotNull()
		{
			return !cxl_Pathways.getValueIsNull(context);
		}
		public ims.pathways.vo.PathwayLiteVoCollection getPathways()
		{
			return (ims.pathways.vo.PathwayLiteVoCollection)cxl_Pathways.getValue(context);
		}
		public void setPathways(ims.pathways.vo.PathwayLiteVoCollection value)
		{
			cxl_Pathways.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Pathways = null;
		public boolean getTargetsIsNotNull()
		{
			return !cxl_Targets.getValueIsNull(context);
		}
		public ims.pathways.vo.TargetConfigurationLiteVoCollection getTargets()
		{
			return (ims.pathways.vo.TargetConfigurationLiteVoCollection)cxl_Targets.getValue(context);
		}
		public void setTargets(ims.pathways.vo.TargetConfigurationLiteVoCollection value)
		{
			cxl_Targets.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Targets = null;
		public boolean getSearchCriteriaIsNotNull()
		{
			return !cxl_SearchCriteria.getValueIsNull(context);
		}
		public ims.pathways.vo.WorkListSearchCriteriaVo getSearchCriteria()
		{
			return (ims.pathways.vo.WorkListSearchCriteriaVo)cxl_SearchCriteria.getValue(context);
		}
		public void setSearchCriteria(ims.pathways.vo.WorkListSearchCriteriaVo value)
		{
			cxl_SearchCriteria.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SearchCriteria = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public PathwaysNamespace Pathways = new PathwaysNamespace();
		public final class PathwaysNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class WorkListJourneyTarget implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW_EVENT = 1;
				public static final int VIEW_PAT_JOURNEY = 2;
			}
			public void disableAllWorkListJourneyTargetMenuItems()
			{
				this.contextMenuWorkListJourneyTargetNEW_EVENTItem.setEnabled(false);
				this.contextMenuWorkListJourneyTargetVIEW_PAT_JOURNEYItem.setEnabled(false);
			}
			public void hideAllWorkListJourneyTargetMenuItems()
			{
				this.contextMenuWorkListJourneyTargetNEW_EVENTItem.setVisible(false);
				this.contextMenuWorkListJourneyTargetVIEW_PAT_JOURNEYItem.setVisible(false);
			}
			private Menu contextMenuWorkListJourneyTarget;
			public ReadOnlyMenuItem getWorkListJourneyTargetNEW_EVENTItem()
			{
				return this.contextMenuWorkListJourneyTargetNEW_EVENTItem;
			}
			private MenuItem contextMenuWorkListJourneyTargetNEW_EVENTItem;
			public ReadOnlyMenuItem getWorkListJourneyTargetVIEW_PAT_JOURNEYItem()
			{
				return this.contextMenuWorkListJourneyTargetVIEW_PAT_JOURNEYItem;
			}
			private MenuItem contextMenuWorkListJourneyTargetVIEW_PAT_JOURNEYItem;
			public final class WokListPathwayTarget implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADDTARGET = 3;
				public static final int REMOVETARGET = 4;
			}
			public void disableAllWokListPathwayTargetMenuItems()
			{
				this.contextMenuWokListPathwayTargetADDTARGETItem.setEnabled(false);
				this.contextMenuWokListPathwayTargetREMOVETARGETItem.setEnabled(false);
			}
			public void hideAllWokListPathwayTargetMenuItems()
			{
				this.contextMenuWokListPathwayTargetADDTARGETItem.setVisible(false);
				this.contextMenuWokListPathwayTargetREMOVETARGETItem.setVisible(false);
			}
			private Menu contextMenuWokListPathwayTarget;
			public ReadOnlyMenuItem getWokListPathwayTargetADDTARGETItem()
			{
				return this.contextMenuWokListPathwayTargetADDTARGETItem;
			}
			private MenuItem contextMenuWokListPathwayTargetADDTARGETItem;
			public ReadOnlyMenuItem getWokListPathwayTargetREMOVETARGETItem()
			{
				return this.contextMenuWokListPathwayTargetREMOVETARGETItem;
			}
			private MenuItem contextMenuWokListPathwayTargetREMOVETARGETItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[76];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedPatientJourneyTarget", "BO-1088100001-ID", "ID_PatientJourneyTarget");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedPatientJourneyTarget", "BO-1088100001-WEEKNUMBER", "WeekNumber");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedPatientJourneyTarget", "BO-1088100001-TARGETDATE", "TargetDate");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedPatientJourneyTarget", "BO-1088100001-TARGETCALFROMDATE", "TargetCalFromDate");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Pathways.SelectedPatientPathwayJourney", "BO-1088100000-ID", "ID_PatientPathwayJourney");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
