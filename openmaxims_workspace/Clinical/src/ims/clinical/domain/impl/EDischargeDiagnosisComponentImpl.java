//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3341.28572)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseEDischargeDiagnosisComponentImpl;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.DischargeDetailsVoCollection;
import ims.clinical.vo.domain.DischargeDetailsVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.domain.objects.PatientDiagnosis;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PatientDiagnosisEDischargeListVoCollection;
import ims.core.vo.PatientDiagnosisEDischargeVo;
import ims.core.vo.domain.PatientDiagnosisEDischargeListVoAssembler;
import ims.core.vo.domain.PatientDiagnosisEDischargeVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.edischarge.domain.objects.DischargeDetails;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class EDischargeDiagnosisComponentImpl extends BaseEDischargeDiagnosisComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* Get OPDEDVo
	*/
	public PatientDiagnosisEDischargeVo getDiagnosisVo(ims.core.clinical.vo.PatientDiagnosisRefVo patdiagrefVo)
	{
		if(patdiagrefVo == null)
			throw new DomainRuntimeException("Cannot get PatientDiagnosisVo for null PatientDiagnosisRefVo");
		
		DomainFactory factory = getDomainFactory();
		PatientDiagnosis doPatientDiagnosis = (PatientDiagnosis)factory.getDomainObject(PatientDiagnosis.class,patdiagrefVo.getID_PatientDiagnosis());
		return PatientDiagnosisEDischargeVoAssembler.create(doPatientDiagnosis);
	}

	/**
	* saveDiagnosisVo
	 * @throws UniqueKeyViolationException 
	*/
	public ims.core.vo.PatientDiagnosisEDischargeVo saveDiagnosisVo(ims.core.vo.PatientDiagnosisEDischargeVo voDiagnosis) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, UniqueKeyViolationException
	{
		// Ensure the value object has been validated
		if (!voDiagnosis.isValidated())
			throw new DomainRuntimeException("Diagnosis has not been validated");
		
		DomainFactory factory = getDomainFactory();
		PatientDiagnosis doPatDiag = PatientDiagnosisEDischargeVoAssembler.extractPatientDiagnosis(factory, voDiagnosis);
		
		factory.save(doPatDiag);
		
		return PatientDiagnosisEDischargeVoAssembler.create(doPatDiag);//Create here to avoid possible StaleObj in PMH save
	}

	/**
	* listDiagnosisComplicationsByPatient
	*/
	public PatientDiagnosisEDischargeListVoCollection listDiagnosisComplicationsByPatient(PatientRefVo voPatRef, EpisodeOfCareRefVo episodeOfCareRefVo, Boolean bPrevious, Date ccStartDate, Boolean bCopied) 
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = new String();
		hql = " select patdiag from PatientDiagnosis patdiag ";

		StringBuffer condStr = new StringBuffer();
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		condStr.append(andStr + " patdiag.careContext.episodeOfCare.careSpell.patient.id = :patientId");
		markers.add("patientId");
		values.add(voPatRef.getID_Patient());
		andStr = " and ";			

		if (episodeOfCareRefVo != null) 
		{
//			if (bCopied)
//			{
//				hql += " left join patdiag.coMorbidityForEpisodeOfCares as eps ";
//				
//				condStr.append(andStr + " eps.careContext.id = :carecontextId");
//			}
//			else
				condStr.append(andStr + " patdiag.careContext.episodeOfCare.id = :epsId");
			
			markers.add("epsId");
			values.add(episodeOfCareRefVo.getID_EpisodeOfCare());
			andStr = " and ";			
		}

		if (!bPrevious)
		{
			condStr.append(andStr + " patdiag.isPrevRelevantDiagnosis = :prevRel");
			markers.add("prevRel");
			values.add(Boolean.FALSE);

			condStr.append(andStr + " patdiag.isComorbidity = :notCommorb");
			markers.add("notCommorb");
			values.add(Boolean.FALSE);
		}

		if (bPrevious)
		{
			condStr.append(andStr + " patdiag.isComplication = :complication");
			markers.add("complication");
			values.add(Boolean.FALSE);

			if (ccStartDate != null)
			{
				condStr.append(andStr + " patdiag.careContext.startDateTime <= :ccStartDate");
				markers.add("ccStartDate");
				values.add(new DateTime(ccStartDate, new Time("23:59:59")).getJavaDate());
//				values.add(new DateTime(new Date(ccStartDate).addDay(-1), new Time("23:59:59")).getJavaDate());
			}
		}

		hql += " where ";
		hql += condStr.toString();
		return PatientDiagnosisEDischargeListVoAssembler.createPatientDiagnosisEDischargeListVoCollectionFromPatientDiagnosis(factory.find(hql,markers,values)).sort();		
	}

	public DischargeDetailsVo getDischargeDetails(CareContextRefVo careContextRefvo) 
	{
		if(careContextRefvo == null)
			throw new CodingRuntimeException("careContextRefVo Filter not provided for list call. ");

		if(careContextRefvo != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from DischargeDetails dd where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " dd.careContext.id = :careContextId");
 			markers.add("careContextId");
			values.add(careContextRefvo.getID_CareContext());
			andStr = " and ";	

			List list = factory.find(hql.toString(), markers,values);
			if(list != null && list.size() > 0)
			{ 
				DischargeDetailsVoCollection voColl = DischargeDetailsVoAssembler.createDischargeDetailsVoCollectionFromDischargeDetails(list);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}

	public DischargeDetailsVo saveDischargeDetails(DischargeDetailsVo voDischargeDetails) throws DomainInterfaceException, StaleObjectException 
	{
		if(voDischargeDetails == null)
			throw new CodingRuntimeException("DischargeDetailsVo is null");
		
		if(!voDischargeDetails.isValidated())
			throw new CodingRuntimeException("DischargeDetailsVo Value Object has not been validated");

		DomainFactory factory = getDomainFactory();
		DischargeDetails doDD = DischargeDetailsVoAssembler.extractDischargeDetails(factory, voDischargeDetails);

		factory.save(doDD);
		return DischargeDetailsVoAssembler.create(doDD);
	}

}
