//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2287.24499)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl; 

import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.LookupTree;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.LookupTreeImpl;
import ims.clinical.domain.PatientProblems;
import ims.clinical.domain.base.impl.BasePresentingProblemsImpl;
import ims.clinical.domain.objects.PresentAbsentHistoryProblems;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.clinical.vo.PatientPresentingProblemsVo;
import ims.clinical.vo.PresentAbsentHistoryProblemsVo;
import ims.clinical.vo.PresentAbsentHistoryProblemsVoCollection;
import ims.clinical.vo.ProblemConfigVo;
import ims.clinical.vo.domain.PatientPresentingProblemsVoAssembler;
import ims.clinical.vo.domain.PresentAbsentHistoryProblemsVoAssembler;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.PresProblemChecklistConfig;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.domain.impl.PresProblemChecklistConfigImpl;
import ims.clinicaladmin.vo.PresProblemChecklistConfigVo;
import ims.clinicaladmin.vo.PresProblemChecklistConfigVoCollection;
import ims.clinicaladmin.vo.domain.PresProblemChecklistConfigVoAssembler;
import ims.clinicaladmin.vo.enums.CciType;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.domain.objects.PatientProblem;
import ims.core.clinical.vo.PatientProblemRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientProblemVoCollection;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;

public class PresentingProblemsImpl extends BasePresentingProblemsImpl
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public ims.vo.LookupInstVo getMappings(ims.vo.LookupInstVo instance)
	{
		LookupTree impl = (LookupTree) getDomainImpl(LookupTreeImpl.class);
		return impl.getMappings(instance);
	}
	/**
	* listPresentingProblems
	*/
	public ClinicalProblemShortVoCollection listPresentingProblems(Specialty specialty) 
	{
		DomainFactory factory = getDomainFactory(); 
		String strHQL = "from PresProblemChecklistConfig p where p.specialty = :specialty"; 		
		List probs = factory.find(strHQL, new String[]{"specialty"}, new Object[]{getDomLookup(specialty)});	
		PresProblemChecklistConfigVoCollection voCollProblems = PresProblemChecklistConfigVoAssembler.createPresProblemChecklistConfigVoCollectionFromPresProblemChecklistConfig(probs);
				
		if (voCollProblems.size() == 0)
			return null;

		else if (voCollProblems.size() == 1)
		{
 
			voCollProblems.sort();
			ClinicalProblemShortVoCollection voCollClinicalProblems = new ClinicalProblemShortVoCollection();
			PresProblemChecklistConfigVo vo = voCollProblems.get(0);
			for (int x=0; x < vo.getPresentingProblems().size(); x++) 				
				voCollClinicalProblems.add(vo.getPresentingProblems().get(x).getPresentingProblem());

			return voCollClinicalProblems;
				
		}
		//else
			//throw new DomainRuntimeException("Data integrity violation");
		return null;
	}
 
	//WDEV-18556
	public PresentAbsentHistoryProblemsVo getHistoryProblems(
			CareContextRefVo careContextRef)	
	{
		DomainFactory factory = getDomainFactory(); 
		String strHQL = "from PresentAbsentHistoryProblems p where p.careContext.id = " + careContextRef.getID_CareContext(); 				
		List probs = factory.find(strHQL);
		PresentAbsentHistoryProblemsVoCollection vocollProblems = PresentAbsentHistoryProblemsVoAssembler.createPresentAbsentHistoryProblemsVoCollectionFromPresentAbsentHistoryProblems(probs); 
		
		if (vocollProblems != null && vocollProblems.size() > 0)
			return vocollProblems.get(0);
		else
			return null;
	}
	public PresentAbsentHistoryProblemsVo save(PresentAbsentHistoryProblemsVo voHistoryProblems) throws StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if(!voHistoryProblems.isValidated())
		{
			throw new DomainRuntimeException("History Problems Value Object has not been validated");
		}
		
		if (voHistoryProblems.getID_PresentAbsentHistoryProblems() == null)//Inserting a record
		{
			//WDEV-18556
			PresentAbsentHistoryProblemsVo voHP = getHistoryProblems(voHistoryProblems.getCareContext());
			if(voHP != null)
				throw new StaleObjectException(null, "A record exists for this clinical contact, the screen will be refreshed");
		}
			
		DomainFactory factory = getDomainFactory();		
		PresentAbsentHistoryProblems domPresentAbsentHistoryProblems = PresentAbsentHistoryProblemsVoAssembler.extractPresentAbsentHistoryProblems(factory,voHistoryProblems);
		
		try
		{
			factory.save(domPresentAbsentHistoryProblems);
		}
		catch(UnqViolationUncheckedException e)
		{
			throw new ims.domain.exceptions.UniqueKeyViolationException("A Present Absent history problem already exists for this Clinical Contact.", e);
		}
		
							
		return PresentAbsentHistoryProblemsVoAssembler.create(domPresentAbsentHistoryProblems);		
	}
	public HcpLiteVoCollection listHCPs(Hcp filter) 
	{		
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		if (filter != null && filter.getQueryNameIsNotNull())
			return impl.listHcpLiteByName(filter.getQueryName().getSurname());
		else
			return null;
	}
	public PresProblemChecklistConfigVo getPresProblemCheckListConfig(Specialty specialtyLkup) 
	{
		DomainFactory factory = getDomainFactory(); 
		
		String strHQL = "from PresProblemChecklistConfig p where p.specialty.id = " + specialtyLkup.getID(); 				
		List probs = factory.find(strHQL);
		PresProblemChecklistConfigVoCollection vocoll = PresProblemChecklistConfigVoAssembler.createPresProblemChecklistConfigVoCollectionFromPresProblemChecklistConfig(probs); 
		
		if (vocoll != null && vocoll.size() > 0)
			return vocoll.get(0);
		else
			return null;
	}
	
	public PresProblemChecklistConfigVo savePresProblemCheckListConfig(PresProblemChecklistConfigVo item) throws StaleObjectException 
	{
		PresProblemChecklistConfig impl = (PresProblemChecklistConfig)getDomainImpl(PresProblemChecklistConfigImpl.class);
		return impl.savePresProblemCheckListConfig(item);
	}
	public PatientProblemVoCollection listProblemsByEpisodeOfCare(EpisodeOfCareRefVo episodeOfCareRefVo) 
	{
		PatientProblems impl = (PatientProblems)getDomainImpl(PatientProblemsImpl.class);
		return impl.listProblemsByEpisodeOfCare(episodeOfCareRefVo);
	}
	
	public ProblemConfigVo saveProblemConfig(ProblemConfigVo voProblem) throws StaleObjectException, UniqueKeyViolationException, DomainInterfaceException 
	{
		CCIAdmin impl = (CCIAdmin)getDomainImpl(CCIAdminImpl.class);
		return (ProblemConfigVo)impl.saveCci(voProblem, CciType.PROBLEM);
	}
	
	public PatientProblemVoCollection listPatientProblemsByPatient(PatientRefVo patient)
	{
		PatientProblems impl = (PatientProblems) getDomainImpl(PatientProblemsImpl.class);
		return impl.listByPatient(patient);
	}

	public PatientPresentingProblemsVo getPatientProblems(PatientProblemRefVo voRef)
	{
		if(voRef == null)
			throw new DomainRuntimeException("Invalid record to get");
		
		return PatientPresentingProblemsVoAssembler.create((PatientProblem) getDomainFactory().getDomainObject(PatientProblem.class, voRef.getID_PatientProblem()));
	}
	
}
