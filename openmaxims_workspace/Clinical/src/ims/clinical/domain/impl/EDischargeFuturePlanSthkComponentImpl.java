//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.71 build 3943.18011)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseEDischargeFuturePlanSthkComponentImpl;
import ims.clinical.helper.EDischargeHelper;
import ims.clinical.helper.IEDischargeHelper;
import ims.clinical.vo.DischargeFuturePlanSthkVo;
import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.domain.DischargeFuturePlanSthkVoAssembler;
import ims.core.admin.domain.objects.FieldHelpText;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.domain.FieldHelpVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.edischarge.domain.objects.FuturePlan;

import java.util.ArrayList;

public class EDischargeFuturePlanSthkComponentImpl extends BaseEDischargeFuturePlanSthkComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.DischargeFuturePlanSthkVo getFuturePlan(ims.core.admin.vo.CareContextRefVo careContext)
	{
		// Check passed care context
		if (careContext == null || !careContext.getID_CareContextIsNotNull())
			throw new DomainRuntimeException("DOMAIN getFuturePlan() - Selected care context is null");

		// Build query and parameter to retrieve the record from database
		String query = "from FuturePlan as futurePlan where futurePlan.careContext.id = :ID";
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("ID");
		paramValues.add(careContext.getID_CareContext());
		
		// Query database for the record
		// Create the VO form the record database
		return DischargeFuturePlanSthkVoAssembler.create((FuturePlan) getDomainFactory().findFirst(query, paramNames, paramValues));
	}

	
	public DischargeFuturePlanSthkVo saveFuturePlan(DischargeFuturePlanSthkVo futurePlan, EDischargeSTHKSummaryVo dischargeSummary)
																													throws  StaleObjectException,
																															ForeignKeyViolationException,
																															UniqueKeyViolationException
	{
		// Check for null VO passed to save
		if (futurePlan == null)
			throw new DomainRuntimeException("DOMAIN saveFuturePlan() - Can not save a null object");
		
		// Check if the VO is validated
		if (!futurePlan.isValidated())
			throw new DomainRuntimeException("DOMAIN saveFuturePlan() - Value object to save is not validated");
		
		
		// Extract domain object needed
		DomainFactory domainFactory = getDomainFactory();
		FuturePlan futurePlanDomObj = DischargeFuturePlanSthkVoAssembler.extractFuturePlan(domainFactory, futurePlan);
		
		// Save domain object
		domainFactory.save(futurePlanDomObj);

		futurePlan = DischargeFuturePlanSthkVoAssembler.create(futurePlanDomObj);
		
		IEDischargeHelper impl = (IEDischargeHelper) getDomainImpl(EDischargeHelper.class);
		impl.updateSummaryIfRequired(futurePlan, dischargeSummary, getDomainFactory());

		// Return a refreshed version of the VO
		return futurePlan;
	}

	
	public ims.core.vo.FieldHelpVo getHintByLookupID(ims.clinicaladmin.vo.lookups.EDischargeHINT lookup)
	{
		if(lookup == null)
			throw new DomainRuntimeException("EDischargeHINT is null");

		String query = " from FieldHelpText fht where fht.field = :FLD ";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		paramNames.add("FLD");
		
		ArrayList<Object> paramValues = new ArrayList<Object>();
		paramValues.add(getDomLookup(lookup));

		return FieldHelpVoAssembler.create((FieldHelpText) getDomainFactory().findFirst(query, paramNames, paramValues));
	}


	public HcpLiteVoCollection listHCP(String hcpName) throws DomainInterfaceException
	{
		if (hcpName == null || hcpName.length() < 3)
			throw new DomainInterfaceException("Please enter at least 3 characters to search upon.");
		
		String query = " from Hcp as hcp where hcp.mos.name.upperSurname like :SNAME or hcp.mos.name.upperForename like :FNAME ORDER BY hcp.mos.name.upperSurname asc, hcp.mos.name.upperForename asc";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("SNAME");
		paramNames.add("FNAME");

		String name = "%"+hcpName.toUpperCase()+"%";//WDEV-12041
		
		paramValues.add(name);
		paramValues.add(name);
		
		return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(getDomainFactory().find(query, paramNames, paramValues));
	}


	public LocationLiteVoCollection listLocations(String locationName) throws DomainInterfaceException
	{
		if (locationName == null || locationName.length() < 3)
			throw new DomainInterfaceException("Please enter at least 3 characters to search upon.");
		
		String query = " from Location as loc where loc.upperName like :NAME AND loc.isVirtual = 0 AND loc.isActive = 1 AND loc.type.id <> :ID_SURGERY ORDER BY loc.upperName asc";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("NAME");
		paramValues.add("%"+locationName.toUpperCase()+"%");//WDEV-12041
		
		paramNames.add("ID_SURGERY");
		paramValues.add(LocationType.SURGERY.getID());
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(getDomainFactory().find(query, paramNames, paramValues));
	}
}
