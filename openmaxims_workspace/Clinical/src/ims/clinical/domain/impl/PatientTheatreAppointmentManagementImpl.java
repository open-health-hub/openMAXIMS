//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3467.22451)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ElectiveListStatus;
import ims.RefMan.domain.objects.OrderInvAppt;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.ReferralEROD;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.domain.objects.TCIOutcomeForPatientElectiveList;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.domain.CatsReferralListVoAssembler;
import ims.RefMan.vo.domain.CatsReferralVoAssembler;
import ims.RefMan.vo.lookups.AdditionalInvestigationAppointmentsStatus;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ERODStatus;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.TCIStatusChangeReason;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.domain.base.impl.BasePatientTheatreAppointmentManagementImpl;
import ims.clinical.vo.PatientTheatreBookingVo;
import ims.clinical.vo.PatientTheatreBookingVoCollection;
import ims.clinical.vo.domain.PatientTheatreBookingVoAssembler;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.domain.objects.Procedure;
import ims.core.clinical.domain.objects.Service;
import ims.core.clinical.vo.ProcedureRefVo;
import ims.core.domain.PatientSearch;
import ims.core.domain.impl.PatientSearchImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.place.domain.objects.Activity;
import ims.core.resource.place.vo.ActivityRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffShortVoAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ProcedureVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.ocrr.orderingresults.domain.objects.OrderedInvestigationStatus;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.pathways.domain.objects.PathwayClock;
import ims.pathways.domain.objects.PauseDetails;
import ims.scheduling.domain.OCSExternalEvents;
import ims.scheduling.domain.SessionAdmin;
import ims.scheduling.domain.impl.OCSExternalEventsImpl;
import ims.scheduling.domain.impl.SessionAdminImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.SessionParentChildSlot;
import ims.scheduling.domain.objects.SessionTheatreTCISlot;
import ims.scheduling.helper.CABRequests;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentShortVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.SessionServiceProcedureConsultantVo;
import ims.scheduling.vo.SessionTheatreTCISlotLiteVo;
import ims.scheduling.vo.SessionTheatreTCISlotRefVo;
import ims.scheduling.vo.domain.Booking_AppointmentShortVoAssembler;
import ims.scheduling.vo.domain.Booking_AppointmentVoAssembler;
import ims.scheduling.vo.domain.SessionParentChildSlotVoAssembler;
import ims.scheduling.vo.domain.SessionTheatreTCISlotLiteVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class PatientTheatreAppointmentManagementImpl extends BasePatientTheatreAppointmentManagementImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* searchPatients
	*/
	public ims.core.vo.PatientShortCollection searchPatients(ims.core.vo.PatientFilter filter) throws ims.domain.exceptions.DomainInterfaceException
	{
		if(filter == null)
			throw new CodingRuntimeException("parameter filter is null in method searchPatients");
		
		PatientSearch impl = (PatientSearch) getDomainImpl(PatientSearchImpl.class);
		return impl.searchPatients(filter);
	}

	public Booking_AppointmentShortVoCollection listBookingAppointmentByPatientAndDate(PatientRefVo patient, Date apptDate)
	{
		if(patient == null || patient.getID_Patient() == null)
			throw new CodingRuntimeException("patient parameter is null or id not supplied in method listBookingAppointmentByPatientAndDate");
		
		if(apptDate == null)
			throw new CodingRuntimeException("apptDate parameter is null in method listBookingAppointmentByPatientAndDate");
		
		DomainFactory factory = getDomainFactory();
		List appts = factory.find("select bookingAppt from Sch_Booking as schBook left join schBook.appointments as bookingAppt where (schBook.patient.id = :idPatient and bookingAppt.appointmentDate = :apptDate and bookingAppt.theatreBooking != null)", 
				new String[]{"idPatient","apptDate"}, new Object[]{patient.getID_Patient(), apptDate.getDate()});
		
		return Booking_AppointmentShortVoAssembler.createBooking_AppointmentShortVoCollectionFromBooking_Appointment(appts);
	}

	public Booking_AppointmentVo saveBookingAppt(PatientTheatreBookingVo appt, SessionTheatreTCISlotLiteVo sessionSlot) throws StaleObjectException
	{
		if(appt == null)
			throw new CodingRuntimeException("appt parameter is null in method saveBookingAppt");
		
		if(!appt.isValidated())
			throw new CodingRuntimeException("appt parameter has not been validated");
		
		//WDEV-9091
		if(sessionSlot != null && !sessionSlot.isValidated())
			throw new CodingRuntimeException("Session Slot is not validated.");
	
		DomainFactory factory = getDomainFactory();	
		Booking_Appointment doAppt = PatientTheatreBookingVoAssembler.extractBooking_Appointment(factory, appt);
		
		//increment slots remaining if its a cancel
		if(doAppt.getApptStatus().equals(getDomLookup(Status_Reason.CANCELLED)))
			doAppt.getSession().incrementRemainingSlots(1);
		
		List ordinvList = null;
		if(doAppt.getApptStatus().equals(getDomLookup(Status_Reason.DNA)) || doAppt.getApptStatus().equals(getDomLookup(Status_Reason.ARRIVAL)))
			ordinvList = factory.find("from OrderInvAppt ordInvAppt where ordInvAppt.appointment.id = " + doAppt.getId());
		
		if(doAppt.getApptStatus().equals(getDomLookup(Status_Reason.DNA)) || doAppt.getApptStatus().equals(getDomLookup(Status_Reason.CANCELLED)))
		{
			saveCatsReferralwithReviewStatus(factory, appt, doAppt.getApptStatus());
			if(ordinvList != null && ordinvList.size() >= 0)
			{
				Iterator it = ordinvList.iterator();
				boolean catsReferralUpdated = false;
				while(it.hasNext())
				{
					OrderInvAppt doOrderInvAppt = (OrderInvAppt) it.next();
					OCSExternalEvents impl = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class); 
					if(doAppt.getApptStatus().equals(getDomLookup(Status_Reason.DNA)))
					{
						impl.generateOrderPatientDNAEvent(new Booking_AppointmentRefVo(doOrderInvAppt.getAppointment().getId(), doOrderInvAppt.getAppointment().getVersion()), new OrderInvestigationRefVo(doOrderInvAppt.getOrderInvestigation().getId(), doOrderInvAppt.getOrderInvestigation().getVersion()));
						if(!catsReferralUpdated)
						{					
							saveCatsReferralwithAddtionalInvApptStatus(factory, doOrderInvAppt, AdditionalInvestigationAppointmentsStatus.DNA);
							catsReferralUpdated = true;
						}
						
						OrderedInvestigationStatus voOrdInvStatus = new OrderedInvestigationStatus();
						voOrdInvStatus.setChangeDateTime(new Date().getDate());
						voOrdInvStatus.setProcessedDateTime(new java.util.Date());
						voOrdInvStatus.setOrdInvStatus(getDomLookup(OrderInvStatus.HOLD_REQUESTED));
						voOrdInvStatus.setStatusReason("Patient DNA'd associated Appt");
						doOrderInvAppt.getOrderInvestigation().setOrdInvCurrentStatus(voOrdInvStatus);
						doOrderInvAppt.getOrderInvestigation().getOrdInvStatusHistory().add(voOrdInvStatus);
						factory.save(doOrderInvAppt);
					}	
				}
			}
			if(doAppt.getApptStatus().equals(getDomLookup(Status_Reason.DNA)))
			{
				if(ConfigFlag.GEN.ICAB_ENABLED.getValue())
				{
					if(doAppt.isIsCABBooking() != null && doAppt.isIsCABBooking().booleanValue())
						CABRequests.sendRequestandUpdateReferences(factory, getDomLookup(ActionRequestType.NOTIFY_DNA), doAppt, "Appt DNA Requested from Patient Appt Management");
				}
			}
			else if(doAppt.getApptStatus().equals(getDomLookup(Status_Reason.CANCELLED)))
			{
				SessionAdmin implSessionAdmin = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
				Booking_AppointmentVo voAppt = Booking_AppointmentVoAssembler.create(doAppt);
				voAppt = implSessionAdmin.cancelAppt(voAppt  , ActionRequestType.NOTIFY_APPT_CANCEL, "Patient Appointment management");
				return voAppt;
			}	
		}
		if(doAppt.getApptStatus().equals(getDomLookup(Status_Reason.ARRIVAL)))
		{
			//WDEV-6239 - last appt arrived
			if(doAppt.getSession() != null &&  doAppt.getSession().getService() != null &&  doAppt.getSession().getService().getServiceCategory() != null)
			{
				if(doAppt.getSession().getService().getServiceCategory().equals( getDomLookup(ServiceCategory.CLINICAL)))
					saveLastApptArrivedDate(factory, doAppt);
			}
			
			//WDEV-5711 - generatePatientArrivingEvent 
			OCSExternalEvents impl = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class); 
			impl.generatePatientArrivingEvent(new Booking_AppointmentRefVo(doAppt.getId(), 0), null);			
		}
		
		factory.save(doAppt);
		
		//WDEV-9091
		if(sessionSlot != null)
		{
			SessionTheatreTCISlot doSessoionSlot = SessionTheatreTCISlotLiteVoAssembler.extractSessionTheatreTCISlot(factory, sessionSlot);
			factory.save(doSessoionSlot);
		}
		
		return Booking_AppointmentVoAssembler.create(doAppt);
	}

	private void saveCatsReferralwithReviewStatus(DomainFactory factory, PatientTheatreBookingVo voAppt, LookupInstance apptStatus) throws StaleObjectException 
	{
		if(factory == null || voAppt == null || apptStatus == null)
			throw new CodingRuntimeException("all mandatory params not populated for method saveCatsReferralwithDNAStatus");
		
		List lstCatsRef = factory.find("from CatsReferral catsRef join fetch catsRef.appointments appts where appts.id = '" + voAppt.getID_Booking_Appointment() + "'");
		if(lstCatsRef != null && lstCatsRef.size() == 1)
		{
			CatsReferral doCatsRef = (CatsReferral) lstCatsRef.get(0);
			if(apptStatus.equals(getDomLookup(Status_Reason.DNA)))
				doCatsRef.setHasDNAApptsForReview(true);
			else if(apptStatus.equals(getDomLookup(Status_Reason.CANCELLED)))
				doCatsRef.setHasCancelledApptsForReview(true);
			
			factory.save(doCatsRef);
		}
	}

	private void saveLastApptArrivedDate(DomainFactory factory, Booking_Appointment doBookAppt) throws StaleObjectException
	{
		if(factory == null || doBookAppt == null)
			throw new CodingRuntimeException("all mandatory params not populated for method saveLastApptArrivedDate");
		
		List lstCatsRef = factory.find("from CatsReferral catsRef join fetch catsRef.appointments appt where appt.id = '" + doBookAppt.getId() + "'");
		if(lstCatsRef != null && lstCatsRef.size() == 1)
		{
			CatsReferral doCatsRef = (CatsReferral) lstCatsRef.get(0);
			doCatsRef.setLastApptArrivedDate(new Date().getDate());
			factory.save(doCatsRef);
		}
	}

	//WDEV-5727 update the AddtionalInvApptStatus in the CatsReferral
	private void saveCatsReferralwithAddtionalInvApptStatus(DomainFactory factory, OrderInvAppt doOrderInvAppt, AdditionalInvestigationAppointmentsStatus status) throws StaleObjectException
	{
		if(factory == null || doOrderInvAppt == null || status == null)
			throw new CodingRuntimeException("all mandatory params not populated for method saveCatsReferralwithAddtionalInvApptStatus");
		
		List lstCatsRef = factory.find("from CatsReferral catsRef join fetch catsRef.orderInvAppts ordInvAppt where ordInvAppt.id = '" + doOrderInvAppt.getId() + "'");
		if(lstCatsRef != null && lstCatsRef.size() == 1)
		{
			CatsReferral doCatsRef = (CatsReferral) lstCatsRef.get(0);
			doCatsRef.setAdditionalInvApptsStatus(getDomLookup(status));
			factory.save(doCatsRef);
		}
	}

	/**
	 * getServiceAndActivityByAppt
	 * using the BookingAppointment need to get the slot activity and the session service to facilitate rebooking
	 */
	public SessionServiceAndSlotActivityVo getServiceAndActivityByAppt(Booking_AppointmentRefVo appt)
	{
		if(appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt param or if for appt is null in method getServiceAndActivityByAppt");
	
		SessionServiceAndSlotActivityVo voServiceAndSlot = null;
		
		String hql = "select slot.activity, session.service from Session_Slot as slot left join slot.appointment as appt left join appt.session as session where (appt.id = :idAppt)";
		List items = getDomainFactory().find(hql, new String[]{"idAppt"}, new Object[]{appt.getID_Booking_Appointment()});
		if(items != null && items.size() > 0)
		{
			Iterator it = items.iterator();	
			if(it.hasNext())
			{
				Object[] item = (Object[]) it.next();
				Activity doActivity = (Activity) item[0];
				Service doService = (Service) item[1];
				
				ActivityRefVo voActivity = new ActivityRefVo(doActivity.getId(), doActivity.getVersion());
				ServiceLiteVo voService = ServiceLiteVoAssembler.create(doService);
				
				voServiceAndSlot = new SessionServiceAndSlotActivityVo();
				voServiceAndSlot.setSessionService(voService);
				voServiceAndSlot.setSlotActivity(voActivity);
			}
		}
	
		return voServiceAndSlot;
	}

	public CatsReferralListVo getCatsReferralForAppointment(Booking_AppointmentRefVo appt)
	{
		if(appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provide for getCatsReferralForAppointment");
		
		DomainFactory factory = getDomainFactory();
		List catsRefId = factory.find("select catsRef.id from CatsReferral as catsRef left join catsRef.appointments as bookAppt where (bookAppt.id = '" + appt.getID_Booking_Appointment() + "')");
		if(catsRefId != null)
		{
			Integer val = (Integer) catsRefId.get(0);
			if(val != null && val.intValue() > 0)
			{
				//	return new CatsReferralRefVo(val, 0);//wdev-11902
				return CatsReferralListVoAssembler.create((CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, val));//voReferralRef.getID_CatsReferral()));
			}
		}	
		return null;		
	}

	public void updateCatsReferralAdditionalInvStatus(CatsReferralRefVo catsReferral) throws StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.updateCatsReferralAdditionalInvStatus(catsReferral);		
	}
	
	public SessionServiceProcedureConsultantVo getServiceProcedureConsultantByAppt(PatientTheatreBookingVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getServiceProcedureConsultantByAppt");
		
		SessionServiceProcedureConsultantVo voSpc = null;
		
		Booking_Appointment doAppt = (Booking_Appointment)getDomainFactory().getDomainObject(appt);
		if(doAppt != null)
		{
			ServiceLiteVo voService = ServiceLiteVoAssembler.create(doAppt.getSession() != null ? doAppt.getSession().getService() : null);
			ProcedureLiteVo voProc = ProcedureLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getProcedure() : null);
			HcpLiteVo voMos = HcpLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getConsultant() : null);
			
			voSpc = new SessionServiceProcedureConsultantVo();
			voSpc.setService(voService);
			voSpc.setProcedure(voProc);
			voSpc.setConsultant(voMos);
		}
		
		return voSpc;
	}

	public PatientTheatreBookingVoCollection listTheatreAppointmentsByPatientAndDate(PatientRefVo patientID, Date apptDate)
	{
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = "";
		StringBuffer sb = new StringBuffer();

		String hql = "from Booking_Appointment as appt "; //WDEV-9091

		if (patientID != null)
		{
			sb.append(andStr + " appt.patient.id = :pat");
			markers.add("pat");
			values.add(patientID.getID_Patient());
			andStr = " and ";
		}

		if (apptDate != null)
		{
			sb.append(andStr + " appt.appointmentDate = :apptDate");
			markers.add("apptDate");
			values.add(apptDate.getDate());
			andStr = " and ";
		}
		sb.append(andStr + " appt.theatreBooking != null");
		andStr = " and ";
		sb.append(andStr + " appt.apptStatus = :apptBooked");
		markers.add("apptBooked");
		values.add(getDomLookup(Status_Reason.BOOKED));
	
		hql += " where ";
		hql += sb.toString();

		java.util.List<?> list = getDomainFactory().find(hql.toString(), markers, values);
		
		return PatientTheatreBookingVoAssembler.createPatientTheatreBookingVoCollectionFromBooking_Appointment(list); //WDEV-9091
		
		//WDEV - 9091
		/*
		Iterator it = list.iterator();
		PatientTheatreBookingVoCollection voColl = new PatientTheatreBookingVoCollection();
		while(it.hasNext())
		{
			
			Object[] lstItem = (Object[]) it.next();
			Booking_Appointment doOP = (Booking_Appointment)lstItem[0];
			Booking_AppointmentVo voOP = Booking_AppointmentVoAssembler.create(doOP);
			PatientTheatreBookingVo voTheatre = new PatientTheatreBookingVo(voOP.getID_Booking_Appointment(), voOP.getVersion_Booking_Appointment());
			
			voTheatre.setID_Booking_Appointment(doOP.getId());

			voTheatre.setAppointmentDate(voOP.getAppointmentDate());
			voTheatre.setApptStartTime(voOP.getApptStartTime());
			voTheatre.setApptStatus(voOP.getApptStatus());
			voTheatre.setApptStatusHistory(voOP.getApptStatusHistory());
			voTheatre.setArrivalTime(null);
			voTheatre.setSeenTime(null);
			voTheatre.setOutcome(voOP.getOutcome());
			voTheatre.setTheatreBooking(TheatreBookingLiteVoAssembler.create((TheatreBooking)lstItem[1]));
			voTheatre.setSession(voOP.getSession());
			voTheatre.setApptStatusReas(voOP.getApptStatusReas());
			voTheatre.setRequiresRebook(voOP.getRequiresRebook());
			voTheatre.setCurrentStatusRecord(voOP.getCurrentStatusRecord());

			voColl.add(voTheatre);
		}
		return voColl;
		*/
		//WDEV-9091
	}

	public ProcedureVo getProcedureLOS(ProcedureRefVo procedureRefVo) 
	{
		DomainFactory factory = getDomainFactory();
		Procedure procBo = (Procedure) factory.getDomainObject(Procedure.class, procedureRefVo.getID_Procedure().intValue());
		return ProcedureVoAssembler.create(procBo);
	}

	public Boolean isReferralAccepted(Booking_AppointmentRefVo bookingRefVo) 
	{
		if(bookingRefVo == null || bookingRefVo.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provide for isReferralAccepted");
		
		DomainFactory factory = getDomainFactory();
		List catsRef = factory.find("from CatsReferral as catsRef left join catsRef.appointments as bookAppt where (bookAppt.id = '" + bookingRefVo.getID_Booking_Appointment() + "')");
		if(catsRef != null && catsRef.size() > 0)
		{
			Iterator it = catsRef.iterator();
			Object[] lstItem = (Object[]) it.next();
			CatsReferral doCR = (CatsReferral)lstItem[0];
			CatsReferralVo voCats = CatsReferralVoAssembler.create(doCR);
			if (voCats.getCurrentStatusIsNotNull()
				&& voCats.getCurrentStatus().getReferralStatusIsNotNull())
			{
				if (   voCats.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_ACCEPTED)
					|| voCats.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED))
					return true;
			}

		}	
		return false;		
	}

	public Booking_AppointmentVo getBookingAppt(Booking_AppointmentRefVo bookingApptRefVo) 
	{
		DomainFactory factory = getDomainFactory();
		Booking_Appointment apptBo = (Booking_Appointment) factory.getDomainObject(Booking_Appointment.class, bookingApptRefVo.getID_Booking_Appointment());
		return Booking_AppointmentVoAssembler.create(apptBo);
	}

	//WDEV-9091
	public SessionTheatreTCISlotLiteVo getSessionSlot(SessionTheatreTCISlotRefVo sessionSlot) 
	{
		if(sessionSlot == null || sessionSlot.getID_SessionTheatreTCISlot() == null)
			throw new CodingRuntimeException("Can not get Session Slot on null Id.");
		
		DomainFactory factory = getDomainFactory();
		
		SessionTheatreTCISlot doSessionSlot = (SessionTheatreTCISlot) factory.getDomainObject(SessionTheatreTCISlot.class, sessionSlot.getID_SessionTheatreTCISlot());
		
		return SessionTheatreTCISlotLiteVoAssembler.create(doSessionSlot);
	}

	public SessionParentChildSlotVo getSessionParentChildSlotByAppt(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getSessionParentChildSlotByAppt");
		
		List sessSlots = getDomainFactory().find("from SessionParentChildSlot spcs where spcs.appointment.id = " + appt.getID_Booking_Appointment());
		if(sessSlots != null && sessSlots.size() == 1)
			return SessionParentChildSlotVoAssembler.create((SessionParentChildSlot) sessSlots.get(0));
		
		return null;
	}

	public void cancelTCIAndReferralEROD(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo apptRef, Boolean isProviderCancellation, Boolean isPatientCancellation) throws StaleObjectException //WDEV-18249
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method cancelReferralEROD");
		
		if(apptRef == null || apptRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("apptRef is null or id not provided in method getTheatreAppointment");
		
		Integer tciClock = null;
		
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);
		
		PatientElectiveList doPatientElectiveList = null;
		Boolean saveElectiveList = false;
		
		PathwayClock currentClock = null;
		if(doCatsReferral != null && doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
		{
			currentClock = doCatsReferral.getJourney().getCurrentClock();
		}
		
		if(currentClock != null)
		{
			String patientElectiveListQuery = "select electiveList from PatientElectiveList as electiveList left join electiveList.referral as cats left join electiveList.pathwayClock as pc where cats.id = :CatsId and pc.id = :PathwayClock";
			List<?> electiveList = factory.find(patientElectiveListQuery, new String[] {"CatsId", "PathwayClock"}, new Object[] {catsReferral.getID_CatsReferral(), currentClock.getId()});
			
			if(electiveList != null && electiveList.size() > 0 && electiveList.get(0) instanceof PatientElectiveList)
			{
				doPatientElectiveList = (PatientElectiveList) electiveList.get(0);	
			}
		}
	
		MemberOfStaff domainMOS = null;
		Object mosUser = getMosUser();
		
		if(mosUser instanceof MemberOfStaffShortVo)
		{
			domainMOS = MemberOfStaffShortVoAssembler.extractMemberOfStaff(factory,((MemberOfStaffShortVo) getMosUser()));
		}
		
		if(doPatientElectiveList != null)
		{
			ElectiveListStatus status = new ElectiveListStatus();
			status.setElectiveListStatus(getDomLookup(WaitingListStatus.REQUIRES_TCI));
			status.setAuthoringUser(domainMOS);
			status.setStatusDateTime(new java.util.Date());
			
			doPatientElectiveList.setElectiveListStatus(status);
			
			if(doPatientElectiveList.getElectiveListStatusHistory() == null)
				doPatientElectiveList.setElectiveListStatusHistory(new ArrayList());
			
			doPatientElectiveList.getElectiveListStatusHistory().add(status);
			
			TCIForPatientElectiveList doTCIDetails = doPatientElectiveList.getTCIDetails();
			
			if(doTCIDetails != null)
			{
				doPatientElectiveList.setTCIDetails(null);
			
				TCIOutcomeForPatientElectiveList newOutcome = new TCIOutcomeForPatientElectiveList();
				
				//WDEV-18249
    			if (isPatientCancellation)
    			{
    				newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2));
    			}
    			else if (isProviderCancellation)
    			{
    				if(doTCIDetails.getTCIDate() != null && (new java.util.Date()).before(doTCIDetails.getTCIDate()))
    					newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6));
    				else
    					newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7));
    				
    				//WDEV-18416 
    				if(doPatientElectiveList.getPathwayClock() != null)
        				tciClock = doPatientElectiveList.getPathwayClock().getId();
    			}
    			
				newOutcome.setChangeBy(domainMOS);
				newOutcome.setStatusDateTime(new java.util.Date());
				newOutcome.setOutcomeReason(getDomLookup(TCIStatusChangeReason.LINKEDTHEATREAPPTCANCELLED));
			
				doTCIDetails.setCurrentOutcome(newOutcome);
				if(doTCIDetails.getOutcomeHistory() == null)
					doTCIDetails.setOutcomeHistory(new ArrayList());
			
				doTCIDetails.getOutcomeHistory().add(newOutcome);
			
				if(doPatientElectiveList.getTCIHistory() == null)
					doPatientElectiveList.setTCIHistory(new ArrayList());
			
				doPatientElectiveList.getTCIHistory().add(doTCIDetails);
			}
			
			saveElectiveList = true;
		}
		
		if(Boolean.TRUE.equals(isProviderCancellation))
		{
    		if(doCatsReferral.getElectiveEROD() == null)
    			return;
    		
    		ReferralEROD doErod = null;
    		ReferralEROD elEROD = null;
    		
    		for(int i=0; i<doCatsReferral.getElectiveEROD().size(); i++)
    		{
    			if(doCatsReferral.getElectiveEROD().get(i) instanceof ReferralEROD)
    			{
    				if(((ReferralEROD) doCatsReferral.getElectiveEROD().get(i)).getPathWayClock() != null && ((ReferralEROD) doCatsReferral.getElectiveEROD().get(i)).getPathWayClock().getId().equals(tciClock))
    				{
    					doErod = (ReferralEROD) doCatsReferral.getElectiveEROD().get(i);
    					doCatsReferral.getElectiveEROD().remove(i);
    					break;
    				}
    			}
    		}
    		
    		if(doErod != null)
    		{
    			doErod.setErodStatus(getDomLookup(ERODStatus.CANCELLED));
    		
    			if(doCatsReferral.getElectiveERODHistory() == null)
    				doCatsReferral.setElectiveERODHistory(new java.util.ArrayList());
    		
    			doCatsReferral.getElectiveERODHistory().add(doErod);
    			
    			if(doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null && doCatsReferral.getJourney().getCurrentClock().getCurrentPause() != null)
    			{
    				PauseDetails currentPause = doCatsReferral.getJourney().getCurrentClock().getCurrentPause();
    				
    				if(doCatsReferral.getJourney().getCurrentClock().getPauseDetails() != null)
    				{
    					for(int i=0; i<doCatsReferral.getJourney().getCurrentClock().getPauseDetails().size(); i++)
    					{
    						PauseDetails pause = (PauseDetails) doCatsReferral.getJourney().getCurrentClock().getPauseDetails().get(i);
    						if(currentPause.equals(pause) && Boolean.TRUE.equals(pause.isActive()))
    						{
    							doCatsReferral.getJourney().getCurrentClock().getPauseDetails().remove(i);
    							break;
    						}
    					}
    				}
    				
    				currentPause.setActive(false);
    				doCatsReferral.getJourney().getCurrentClock().getPauseDetails().add(currentPause);
    			}
    		
    			factory.save(doCatsReferral);
    		}
    		
    		//WDEV-18455 
    		if (doPatientElectiveList != null && doPatientElectiveList.getEROD() != null && doPatientElectiveList.getEROD() instanceof ReferralEROD && doPatientElectiveList.getEROD().getPathWayClock().getId().equals(tciClock))
    		{
    			elEROD = (ReferralEROD) doPatientElectiveList.getEROD();
    			doPatientElectiveList.setEROD(null);
    			saveElectiveList = true;
    		}
    		
    		if (elEROD != null)
    		{
    			elEROD.setErodStatus(getDomLookup(ERODStatus.CANCELLED));
    			doPatientElectiveList.getERODHistory().add(elEROD);
    		}
		}
		
		if(saveElectiveList)
			factory.save(doPatientElectiveList);
	}
}
