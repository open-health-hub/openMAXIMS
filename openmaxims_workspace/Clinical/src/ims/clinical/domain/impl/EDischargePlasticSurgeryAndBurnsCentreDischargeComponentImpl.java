//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.71 build 3937.27059)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.clinical.domain.base.impl.BaseEDischargePlasticSurgeryAndBurnsCentreDischargeComponentImpl;
import ims.clinical.helper.EDischargeHelper;
import ims.clinical.helper.IEDischargeHelper;
import ims.clinical.vo.PlasticSurgeryAndBurnsVoCollection;
import ims.clinical.vo.domain.PlasticSurgeryAndBurnsVoAssembler;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVoCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.edischarge.domain.objects.PlasticSurgeryAndBurns;
import ims.edischarge.vo.SummaryRefVo;
import ims.framework.exceptions.CodingRuntimeException;

public class EDischargePlasticSurgeryAndBurnsCentreDischargeComponentImpl extends BaseEDischargePlasticSurgeryAndBurnsCentreDischargeComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.PlasticSurgeryAndBurnsVo getPlasticSurgeryAndBurnsVo(ims.core.admin.vo.CareContextRefVo refVoCareContext)
	{
		if (refVoCareContext == null)
			throw new CodingRuntimeException("careContextRefVo Filter not provided for list call. ");

		if (refVoCareContext != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from PlasticSurgeryAndBurns psb where ");
			String andStr = " ";

			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();

			hql.append(andStr + " psb.careContext.id = :careContextId");
			markers.add("careContextId");
			values.add(refVoCareContext.getID_CareContext());
			andStr = " and ";

			List listNotes = factory.find(hql.toString(), markers, values);
			if (listNotes != null && listNotes.size() > 0)
			{
				PlasticSurgeryAndBurnsVoCollection voColl = PlasticSurgeryAndBurnsVoAssembler.createPlasticSurgeryAndBurnsVoCollectionFromPlasticSurgeryAndBurns(listNotes);
				if (voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}

	public ims.clinical.vo.PlasticSurgeryAndBurnsVo savePlasticSurgeryAndBurnsVo(ims.clinical.vo.PlasticSurgeryAndBurnsVo voPlasticSurgeryAndBurns, SummaryRefVo summary) throws ims.domain.exceptions.StaleObjectException
	{
		if (voPlasticSurgeryAndBurns == null)
			throw new CodingRuntimeException("PlasticSurgeryAndBurns is null");

		if (!voPlasticSurgeryAndBurns.isValidated())
			throw new CodingRuntimeException("PlasticSurgeryAndBurns Value Object Alert has not been validated");

		DomainFactory factory = getDomainFactory();
		PlasticSurgeryAndBurns doPlasticSurgeryAndBurns = PlasticSurgeryAndBurnsVoAssembler.extractPlasticSurgeryAndBurns(factory, voPlasticSurgeryAndBurns);// //

		if (!voPlasticSurgeryAndBurns.getID_PlasticSurgeryAndBurnsIsNotNull())
		{
			List list = factory.find("from PlasticSurgeryAndBurns as psb where psb.careContext.id = :CONTEXTID and psb.isRIE is null", new String[] { "CONTEXTID" }, new Object[] { voPlasticSurgeryAndBurns.getCareContext().getID_CareContext() });
			if (list != null && list.size() > 0)
			{
				throw new StaleObjectException(null);
			}
		}

		factory.save(doPlasticSurgeryAndBurns);
		
		IEDischargeHelper impl = (IEDischargeHelper) getDomainImpl(EDischargeHelper.class); 
		impl.updateSummaryIfRequired(voPlasticSurgeryAndBurns, summary, factory);
		
		return PlasticSurgeryAndBurnsVoAssembler.create(doPlasticSurgeryAndBurns);
	}

	public HcpLiteVoCollection listHCPs(HcpFilter filter) {
		HcpAdmin implHcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return implHcpAdmin.listHcpLite(filter);
	}

}
