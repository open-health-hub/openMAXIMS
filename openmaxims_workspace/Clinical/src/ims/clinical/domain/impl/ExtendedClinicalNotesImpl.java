//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3853.21665)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.MosAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.MosAdminImpl;
import ims.clinical.domain.ClinicalNoteDrawing;
import ims.clinical.domain.base.impl.BaseExtendedClinicalNotesImpl;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.clinical.domain.objects.ClinicalNotes;
import ims.core.clinical.vo.ClinicalNotesRefVo;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.resource.people.domain.objects.Medic;
import ims.core.resource.people.domain.objects.Nurse;
import ims.core.resource.people.domain.objects.Therapist;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.ClinicalContactVo;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.ClinicalNotesVoCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.domain.ClinicalContactShortVoAssembler;
import ims.core.vo.domain.ClinicalNotesVoAssembler;
import ims.core.vo.domain.HcpAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.MedicVoAssembler;
import ims.core.vo.domain.NurseVoAssembler;
import ims.core.vo.domain.TherapistVoAssembler;
import ims.core.vo.lookups.ClinicalNoteType;
import ims.core.vo.lookups.SourceOfNote;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.lookups.LookupService;
import ims.framework.FormName;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAppUser;
import ims.framework.interfaces.ILocation;
import ims.framework.interfaces.ISystemLog;
import ims.reports.ReportEngine;
import ims.vo.ValueObject;

public class ExtendedClinicalNotesImpl extends BaseExtendedClinicalNotesImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* saveClinicalNotes
	*/
	public ims.core.vo.ClinicalNotesVo saveClinicalNotes(ims.core.vo.ClinicalNotesVo clinicalNotesVo) throws ims.domain.exceptions.StaleObjectException
	{
		// Ensure the value object has been validated
		if (!clinicalNotesVo.isValidated())
			throw new DomainRuntimeException("Clinical Notes has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("select p from ClinicalNotes p left join p.noteType as l1_1");
		
		if (clinicalNotesVo.getClinicalContact() == null)
		{
			ClinicalNotes doClinNotes = ClinicalNotesVoAssembler.extractClinicalNotes(factory, clinicalNotesVo);
			factory.save(doClinNotes);
			return ClinicalNotesVoAssembler.create(doClinNotes);
		}		
		if(clinicalNotesVo.getID_ClinicalNotes()== null 
			&& clinicalNotesVo.getClinicalContact().getID_ClinicalContactIsNotNull())
		{
			hql.append(" where (p.clinicalContact.id = " + clinicalNotesVo.getClinicalContact().getID_ClinicalContact() + 
							"and l1_1.id <> -882 and l1_1 <> -883)"); 
							// clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883)) 
			List<?> list = (factory.find(hql.toString()));
			
			if(list.size() > 0)
			{
				ClinicalNotesVoCollection doClinNotes = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(list);
				if (doClinNotes.get(0).getSourceOfNote() != null &&
						!(doClinNotes.get(0).getSourceOfNote().getId() == (getDomLookup(SourceOfNote.CLINICALCLINICALNOTE).getId())))
				{
					return null;
				}
				else
				{
					throw new DomainRuntimeException("A record exists for this clinical contact, the screen will be refreshed");	
				}
			}
		}
		
		
	
		
		ClinicalNotes doClinNotes = ClinicalNotesVoAssembler.extractClinicalNotes(factory, clinicalNotesVo);
		ClinicalContact doClinicalContact = getCurrentClinicalContact(clinicalNotesVo.getClinicalContact());
		doClinNotes.setClinicalContact(doClinicalContact);
		
		factory.save(doClinNotes);

		return ClinicalNotesVoAssembler.create(doClinNotes);
	}

	private ClinicalContact getCurrentClinicalContact(ClinicalContactRefVo refVo) 
	{
		if (refVo == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		ClinicalContact domClinicalContact = (ClinicalContact)factory.getDomainObject(ClinicalContact.class, refVo.getID_ClinicalContact()); 
		
		return domClinicalContact;
	}
	
	/**
	* getClinicalNotes
	*/
	public ims.core.vo.ClinicalNotesVo getClinicalNotes(ims.core.admin.vo.ClinicalContactRefVo contactVo) 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from ClinicalNotes clinnote where "); 
		String andStr = " ";
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
	
		hql.append(andStr + " clinnote.clinicalContact.id = :ccId");
			markers.add("ccId");
		values.add(contactVo.getID_ClinicalContact());
		andStr = " and ";	

		List<?> listNotes = factory.find(hql.toString(), markers,values);
		if(listNotes != null && listNotes.size() > 0)
		{ 
			ClinicalNotesVoCollection voColl = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(listNotes);
			if(voColl != null && voColl.size() > 0)
				return voColl.get(0);
		}
		return null;
	}

	public MemberOfStaffVo getMemberOfStaff(MemberOfStaffShortVo mos)
	{
		MosAdmin mosAdmin = (MosAdmin)getDomainImpl(MosAdminImpl.class);
		return mosAdmin.getMemberOfStaff(mos);
	}

	public ClinicalContactVo getClinicalContact(Integer nId) 
	{
		ClinicalNoteDrawing clinImpl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		return clinImpl.getClinicalContact(nId);
	}

	public ClinicalContactShortVo saveClinicalContact(ClinicalContactShortVo clinicalContactVo) throws StaleObjectException 
	{
		ClinicalNoteDrawing clinImpl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		return clinImpl.saveClinicalContact(clinicalContactVo);
	}
	
	public ClinicalNotesVo getClinicalNotesForContact(ClinicalContactRefVo clinicalContactRefId) 
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		return impl.getClinicalNotesForContact(clinicalContactRefId);
	}

	public ims.core.vo.ClinicalNotesVo getClinicalNote(ClinicalNotesRefVo clinicalNoteRefVo)
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		return impl.getClinicalNotes(clinicalNoteRefVo.getID_ClinicalNotes());

	}

	public ClinicalNotesVo saveClinicalNotesAndClinicalContact(ClinicalNotesVo clinicalNote, ClinicalContactShortVo clinicalContact) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException
	{
		if (clinicalNote == null)
			throw new DomainRuntimeException("Clinical Notes is null");
		// Ensure the value object has been validated
		if (!clinicalNote.isValidated())
			throw new DomainRuntimeException("Clinical Notes has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		
		//is new clinical note and is created for a clinical contact
		if (!clinicalNote.getID_ClinicalNotesIsNotNull() && clinicalNote.getClinicalContactIsNotNull())
		{
			if (!clinicalNote.getClinicalContact().getID_ClinicalContactIsNotNull())
				throw new DomainRuntimeException("The clinical contact from the clinical notes has no valid id");
			if (clinicalContact == null)
				throw new DomainRuntimeException("The clinical contact you provided should not be null ");
			if (!clinicalNote.getClinicalContact().getID_ClinicalContact().equals(clinicalContact.getID_ClinicalContact()))
				throw new DomainRuntimeException("The clinical contact you provided should be the same with the clinical contact from the clinical note ");
			
			String query = "select distinct cn.sourceOfNote.id from ClinicalNotes as cn where " +
							"(cn.clinicalContact.id = :ClinicalContact_id and " +
							"cn.noteType.id not in ("+
							ClinicalNoteType.SUMMARYATADMISSION.getID()+","+ClinicalNoteType.DISCHARGENOTE.getID()+") and cn.isRIE is null )";
			
			List<?> nodeTypes = factory.find(query, "ClinicalContact_id", clinicalNote.getClinicalContact().getID_ClinicalContact());
			
			if (nodeTypes != null && nodeTypes.size() > 0)
			{
				if (SourceOfNote.CLINICALCLINICALNOTE.getID() == ((Integer)nodeTypes.get(0)).intValue())
				{
					throw new CodingRuntimeException("A clinical note has been created by another user, the screen will be refreshed");
				}
				throw new CodingRuntimeException("ANOTHER_NOTE_FOR_CLINICAL_CONTACT");
			}
			
			//save clinicalcontact
			
			
			ClinicalContact extractClinicalContact = ClinicalContactShortVoAssembler.extractClinicalContact(factory,clinicalContact);
			// It is possible that somebody changed the clinical contact . So,  as  this is a background operation
			//we should get latest version to avoid stale.
			factory.refresh(extractClinicalContact);
			extractClinicalContact.setIsClinicalNoteCreated(Boolean.TRUE);
			factory.save(extractClinicalContact);
			
			
			
			clinicalContact = ClinicalContactShortVoAssembler.create(extractClinicalContact);
			clinicalNote.setClinicalContact(clinicalContact);
			
			
			
		}
		ClinicalNotes doClinNotes = ClinicalNotesVoAssembler.extractClinicalNotes(factory, clinicalNote);
		factory.save(doClinNotes);
		return ClinicalNotesVoAssembler.create(doClinNotes);
		
	}

	public HcpLiteVo getHcpLiteVoFOrMosID(Integer mosId) 
	{
		if (mosId == null) 
			return null;

		DomainFactory factory = getDomainFactory();
		String hql = " from Hcp h " +
		" where h.mos.id = :mosId";

		String[] names = new String[]{"mosId"};
		Object[] vals = new Object[]{mosId};
		List hcpList = factory.find(hql,names, vals);

		if (hcpList != null && hcpList.size() > 0)
			return HcpLiteVoAssembler.create((Hcp)hcpList.get(0));

		return null;
		
	}
}
