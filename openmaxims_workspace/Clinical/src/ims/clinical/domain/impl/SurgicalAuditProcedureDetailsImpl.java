//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseSurgicalAuditProcedureDetailsImpl;
import ims.clinical.domain.objects.SurgicalAuditCancelOperation;
import ims.clinical.domain.objects.SurgicalAuditOperationDetail;
import ims.clinical.domain.objects.SurgicalAuditProcedureDetails;
import ims.clinical.helper.IESurgicalAuditHelper;
import ims.clinical.helper.SurgicalAuditHelper;
import ims.clinical.vo.SurgicalAuditCancelOperationVo;
import ims.clinical.vo.SurgicalAuditOperationDetailVo;
import ims.clinical.vo.SurgicalAuditProcedureDetailsVo;
import ims.clinical.vo.domain.SurgicalAuditOperationDetailVoAssembler;
import ims.clinical.vo.domain.SurgicalAuditProcedureDetailsVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.exceptions.CodingRuntimeException;

public class SurgicalAuditProcedureDetailsImpl extends BaseSurgicalAuditProcedureDetailsImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.SurgicalAuditOperationDetailVo saveSurgicalAuditOperationDetail(ims.clinical.vo.SurgicalAuditOperationDetailVo record) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		IESurgicalAuditHelper impl = (IESurgicalAuditHelper)getDomainImpl(SurgicalAuditHelper.class);
		return impl.saveSurgicalAuditOperationDetail(record);
	}

	public ims.clinical.vo.SurgicalAuditOperationDetailVo getSurgicalAuditOperationDetail(ims.clinical.vo.SurgicalAuditOperationDetailRefVo surgicalAuditOperationDetailRef)
	{
		IESurgicalAuditHelper impl = (IESurgicalAuditHelper)getDomainImpl(SurgicalAuditHelper.class);
		return impl.getSurgicalAuditOperationDetail(surgicalAuditOperationDetailRef);

	}

	public SurgicalAuditProcedureDetailsVo saveProcedureDetails(SurgicalAuditProcedureDetailsVo surgAuditProcDetailsToSave) throws StaleObjectException
	{
		if (surgAuditProcDetailsToSave == null )
		{
			throw new CodingRuntimeException("Cannot get SurgicalAuditProcedureDetailsVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();
		
		 SurgicalAuditProcedureDetails domainSurgicalAuditProcDet = SurgicalAuditProcedureDetailsVoAssembler.extractSurgicalAuditProcedureDetails(factory, surgAuditProcDetailsToSave);
		factory.save(domainSurgicalAuditProcDet);
		return SurgicalAuditProcedureDetailsVoAssembler.create(domainSurgicalAuditProcDet);
	}

	public Boolean isStale(SurgicalAuditOperationDetailVo surgAudit)
	{
		IESurgicalAuditHelper impl = (IESurgicalAuditHelper)getDomainImpl(SurgicalAuditHelper.class);
		return impl.isStale(surgAudit);
	}

	//WDEV-15661
	public SurgicalAuditOperationDetailVo saveAndMarkAsRIE(SurgicalAuditOperationDetailVo surgAuditToSave, SurgicalAuditProcedureDetailsVo surgAuditProcedureDetails, FormName form, Integer patId, Integer careContextId, String comment) throws StaleObjectException
	{
		if (surgAuditToSave == null || surgAuditProcedureDetails==null)
		{
			throw new CodingRuntimeException("Cannot get SurgicalAuditOperationDetailVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();
		
		SurgicalAuditOperationDetail domainSurgicalAudit = SurgicalAuditOperationDetailVoAssembler.extractSurgicalAuditOperationDetail(factory, surgAuditToSave);
		factory.save(domainSurgicalAudit);
		factory.markAsRie(SurgicalAuditProcedureDetails.class, surgAuditProcedureDetails.getID_SurgicalAuditProcedureDetails(), form, patId, null, careContextId, comment);
		return SurgicalAuditOperationDetailVoAssembler.create(domainSurgicalAudit);
	}

}
