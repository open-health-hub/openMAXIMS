//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.ClinicListWithICPActions;
import ims.clinical.domain.base.impl.BaseClinicListActionSummaryImpl;
import ims.core.vo.domain.PatientShortAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.BookingAppointmentOutcomeActionsToSaveVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.domain.BookingAppointmentOutcomeActionsToSaveVoAssembler;

public class ClinicListActionSummaryImpl extends BaseClinicListActionSummaryImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.PatientShort getPatientShort(ims.core.patient.vo.PatientRefVo voPatientRef)
	{
		DomainFactory factory = getDomainFactory();
		ims.core.patient.domain.objects.Patient patBo = (ims.core.patient.domain.objects.Patient) factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, voPatientRef.getID_Patient().intValue());
		return PatientShortAssembler.create(patBo);
	}

	public ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection listOPEpisodes(ims.core.vo.IPandOPSearchCriteriaVo searchCriteria)
	{
		ClinicListWithICPActions impl = (ClinicListWithICPActions) getDomainImpl(ClinicListwithICPActionsImpl.class);
		return impl.listOPEpisodes(searchCriteria);
	}

	public ims.core.vo.LocationLiteVoCollection getActiveHospitals(ims.core.resource.people.vo.MemberOfStaffRefVo mos)
	{
		ClinicListWithICPActions impl = (ClinicListWithICPActions) getDomainImpl(ClinicListwithICPActionsImpl.class);
		return impl.getActiveHospitals(mos);
	}

	public ims.scheduling.vo.SessionShortVoCollection listClinics(Integer hospital, ims.framework.utils.Date date)
	{
		ClinicListWithICPActions impl = (ClinicListWithICPActions) getDomainImpl(ClinicListwithICPActionsImpl.class);
		return impl.listClinics(hospital, date);
	}

	public BookingAppointmentOutcomeActionsToSaveVo getOutcomeActionsForAppointment(Booking_AppointmentRefVo appointmentRef)
	{
		return BookingAppointmentOutcomeActionsToSaveVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(Booking_Appointment.class, appointmentRef.getID_Booking_Appointment()));
	}

	public void saveTasksAsComplete(BookingAppointmentOutcomeActionsToSaveVo appToSave) throws StaleObjectException
	{
		if (appToSave == null)
			throw new CodingRuntimeException("Cannot save null Appointment");

		DomainFactory factory = getDomainFactory();
		Booking_Appointment domainAppointment = BookingAppointmentOutcomeActionsToSaveVoAssembler.extractBooking_Appointment(factory, appToSave);

		factory.save(domainAppointment);

	}
}
