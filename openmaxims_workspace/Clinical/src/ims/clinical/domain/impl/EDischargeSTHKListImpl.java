//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 3952.27656)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.clinical.domain.base.impl.BaseEDischargeSTHKListImpl;
import ims.clinical.helper.EdischargeListManualClass;
import ims.clinical.vo.DischargeReportDetailVo;
import ims.clinical.vo.DischargeReportDetailVoCollection;
import ims.clinical.vo.EDischargeSTHKSummaryListVoCollection;
import ims.clinical.vo.EDischargeSearchCriteriaVo;
import ims.clinical.vo.EdischargeListSTHKManualAssemblyVo;
import ims.clinical.vo.EdischargeListSTHKManualAssemblyVoCollection;
import ims.clinical.vo.domain.DischargeReportDetailVoAssembler;
import ims.clinical.vo.domain.EDischargeSTHKSummaryListVoAssembler;
import ims.clinical.vo.lookups.EDischargeSummarySectionStatus;
import ims.clinical.vo.lookups.TTAStatus;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.people.domain.objects.Medic;
import ims.core.resource.people.vo.MedicRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.CareContextForEdischargeVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientShortCollection;
import ims.core.vo.domain.CareContextForEdischargeVoAssembler;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.MedicVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.YesNo;
import ims.domain.DomainFactory;
import ims.edischarge.domain.objects.Summary;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.util.ArrayList;
import java.util.List;

public class EDischargeSTHKListImpl extends BaseEDischargeSTHKListImpl
{
	private static final long serialVersionUID = 1L;
	
	public LocationLiteVoCollection listActiveWardsForHospitalLite(LocationRefVo hospital) 
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveWardsForHospitalLite(hospital);
	}

	public CareContextForEdischargeVo getCareContext(CareContextRefVo voRef) 
	{
		if(voRef == null ||
				voRef.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContextRefVo is null or id not provided for getCareContext");	
		
		return CareContextForEdischargeVoAssembler.create((CareContext)getDomainFactory().getDomainObject(CareContext.class, voRef.getID_CareContext()));
	}
	
	public CareContextShortVo getCareContextShort(CareContextRefVo voRef) 
	{
		if(voRef == null ||
				voRef.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContextRefVo is null or id not provided for getCareContext");	
		
		return CareContextShortVoAssembler.create((CareContext)getDomainFactory().getDomainObject(CareContext.class, voRef.getID_CareContext()));
	}
	
	public PatientShort getPatientByCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContextRefVo is null or id not provided for getPatientByCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List<?> domainObjectList = factory.find("select p from CareContext as cc left join cc.episodeOfCare as eoc left join eoc.careSpell as cs left join cs.patient as p where (cc.id = :idCareContext)", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		PatientShortCollection patient = PatientShortAssembler.createPatientShortCollectionFromPatient(domainObjectList);
		return patient != null && patient.size() > 0 ? (patient.get(0) != null ? patient.get(0) : null) : null;
	}
	
	public DischargeReportDetailVo getDischargeReportDetailsForCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContext is null or id not provided for getDischargeDetailsForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List<?> domainObjectList = factory.find("select drd from DischargeReportDetail as drd left join drd.careContext as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		DischargeReportDetailVoCollection reportDetail = DischargeReportDetailVoAssembler.createDischargeReportDetailVoCollectionFromDischargeReportDetail(domainObjectList);		
		
		return reportDetail != null && reportDetail.size() > 0 ? (reportDetail.get(0) != null ? reportDetail.get(0) : null) : null;
	}
	
	public MedicVo getMedicVo(MedicRefVo medic) 
	{
		if(medic == null || medic.getID_Hcp() == null)
			throw new CodingRuntimeException("MedicRefVo is null or id not provided for getMedicVo");
		
		return MedicVoAssembler.create((Medic) getDomainFactory().getDomainObject(medic));
	}
	
	
	public EdischargeListSTHKManualAssemblyVoCollection searchByCriteria(EDischargeSearchCriteriaVo searchCriteria) 
	{
		StringBuilder queryJoin = new StringBuilder("select  new ims.clinical.helper.EdischargeListManualClass( summ.careContext.id,  " +
				"pattitle.text, p3_1.name.surname, p3_1.name.forename, l1_1.text, hcptitle.text, m1_1.name.surname, m1_1.name.forename, p5_1.value, l3_1.name , d1_1.dateOfDischarge, l4_1.text)" +
				"from Summary as summ left join summ.careContext as cc " +
				"left join summ.dischargeDetails as d1_1 " +
				"left join cc.episodeOfCare as eoc " +
				"left join eoc.responsibleHCP as h1_1 " +
				"left join h1_1.mos as m1_1 " +
				"left join eoc.specialty as l1_1 " +
				"left join cc.pasEvent as pevt " +
				"left join cc.currentStatus as cStat " +
				"left join pevt.patient as p3_1 " +
				"left join p3_1.identifiers as p5_1 " +
				"left join p5_1.type as l2_1 " +
				"left join pevt.location as l3_1 " +
				"left join summ.dischargeLetterStatus as l4_1 " +
				"left join p3_1.name.title as pattitle " +
				"left join m1_1.name.title as hcptitle "); 
		
		
		StringBuilder conditions =  new StringBuilder();
		ArrayList<String > paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		String andStr = "";
		conditions.append("cStat.status not in (:id1) ");
		paramNames.add("id1");
		paramValues.add(getDomLookup(CareContextStatus.CANCELLED));
		andStr = " and ";
		
		if (searchCriteria.getStatusIsNotNull())
		{
			conditions.append(andStr);
			conditions.append("summ.dischargeLetterStatus.id = :Status_id ");
			paramNames.add("Status_id");
			paramValues.add(searchCriteria.getStatus().getID());
			andStr = " and ";
		}
		
		if (searchCriteria.getTTAStatusIsNotNull())
		{	
			conditions.append(andStr);
			conditions.append("summ.tTAStatus.id = :TTAStatus_id ");
			paramNames.add("TTAStatus_id");
			paramValues.add(searchCriteria.getTTAStatus().getID());
			andStr = " and ";	
		}

		if (searchCriteria.getFromDateIsNotNull()&& searchCriteria.getToDateIsNotNull())
		{
			conditions.append(andStr);
//			conditions.append("(summ.systemInformation.creationDateTime >= :fromDate and summ.systemInformation.creationDateTime < :toDate)");
			conditions.append("(summ.admissionDateTime >= :fromDate and summ.admissionDateTime < :toDate)");
			paramNames.add("fromDate");
			paramNames.add("toDate");
		//	paramValues.add(searchCriteria.getFromDate().getDate());
			paramValues.add(new DateTime(searchCriteria.getFromDate(), new Time(0,0,0)).getJavaDate());

			Date toDate = (Date)searchCriteria.getToDate().clone();
			paramValues.add(new DateTime(toDate, new Time(23,59,59)).getJavaDate());	//WDEV-12920
	//		paramValues.add(toDate.addDay(1).getDate());	
			andStr = " and ";
		}
		boolean eocAdded = false;
		boolean ccAdded = false;
		if (searchCriteria.getResponsibleHCPIsNotNull())
		{
			ccAdded = true;
		//	queryJoin.append("left join summ.careContext as cc " );
			eocAdded = true;
		//	queryJoin.append("left join summ.careContext as cc left join cc.episodeOfCare as eoc " );
			conditions.append(andStr);
			conditions.append("eoc.responsibleHCP.id = :ResponsibleHCP_id");
			paramNames.add("ResponsibleHCP_id");
			paramValues.add(searchCriteria.getResponsibleHCP().getID_Hcp());
			andStr = " and ";
			
		}
		if (searchCriteria.getWardIsNotNull())
		{
		//	if (!ccAdded)
		//		queryJoin.append("left join summ.careContext as cc " );
			
		//	queryJoin.append("left join cc.pasEvent as pevt " );

			conditions.append(andStr);
			conditions.append("pevt.location.id = :Ward_id");
			paramNames.add("Ward_id");
			paramValues.add(searchCriteria.getWard().getID_Location());
			andStr = " and ";
			
		}
		if (searchCriteria.getSpecialtyIsNotNull())
		{
		//	if (!ccAdded)
		//		queryJoin.append("left join summ.careContext as cc " );
		//	if (!eocAdded)
		//		queryJoin.append("left join cc.episodeOfCare as eoc " );
			conditions.append(andStr);
			conditions.append("eoc.specialty.id  = :Speciality_id");
			paramNames.add("Speciality_id");
			paramValues.add(searchCriteria.getSpecialty().getID());
			andStr = " and ";
		}
		if (searchCriteria.getNonCornishIsNotNull() && searchCriteria.getNonCornish())
		{
			//queryJoin.append(" , Patient as pat ");
			
		//	if (!ccAdded)
		//		queryJoin.append("left join summ.careContext as cc " );
		//	if (!eocAdded)
		//		queryJoin.append("left join cc.episodeOfCare as eoc " );
			
			//queryJoin.append(" left join pat.gp as gp left join gp.commChannels as commChannel ");
			
			conditions.append(andStr);
			conditions.append(" (eoc.careSpell.patient.id in ( select pat.id from Patient pat left join pat.gp as gp left join gp.commChannels as commChannel " + 
					"where pat.id = eoc.careSpell.patient.id and ( (gp is null) or (gp.id is not null " +
					"and (commChannel is null or commChannel not in " + 
					"(select ccs from gp as c1 left join c1.commChannels as  ccs where ccs.channelType = :eMail) ) ) ) ) )");
			
			
		//	conditions.append("pat.id = eoc.careSpell.patient.id and gp.id is not null " +
		//	"and (commChannel is null or commChannel not in (select ccs from pat.gp as c1 left join c1.commChannels as  ccs where ccs.channelType = :eMail))");
		    paramNames.add("eMail");
			paramValues.add(getDomLookup(ChannelType.EMAIL));
			andStr = " and ";	
		}
		//WDEV-11821 -Start
		if (YesNo.YES.equals(searchCriteria.getClinicaDetailsComplete()))//
		{
			conditions.append(andStr);
			conditions.append(" summ.id not in (select distinct subsumm.id  from Summary as subsumm left join " +
					"subsumm.summaryDetails as subsumdeta left join subsumdeta.progressStatus as subprogress left join subsumm.tTAStatus as ttastat  where   " +
					"(subprogress.id <> :subCompleted   or  ttastat is null or (ttastat.id <> :idNotRequied and ttastat.id <> :idTTAComplete)))) ");
			paramNames.add("subCompleted");
			paramValues.add(EDischargeSummarySectionStatus.COMPLETED.getID());
			paramNames.add("idNotRequied");
			paramNames.add("idTTAComplete");
			paramValues.add(TTAStatus.NOT_REQUIRED.getID());
			paramValues.add(TTAStatus.COMPLETED.getID());
		}
		
		
		//WDEV-11821 - End
		String hqlString = queryJoin+" where ( "+conditions+" and l2_1.id = -150) order by summ.systemInformation.creationDateTime asc";
		List<?> domObjs = getDomainFactory().find(hqlString,paramNames,paramValues);
		
		EdischargeListSTHKManualAssemblyVo voItem = null;
		EdischargeListSTHKManualAssemblyVoCollection voColl = new EdischargeListSTHKManualAssemblyVoCollection();
		for (int i = 0 ; i < domObjs.size(); i ++)
		{
			EdischargeListManualClass doSumm = (EdischargeListManualClass)domObjs.get(i);
			voItem = new EdischargeListSTHKManualAssemblyVo();
	
			voItem.setDischargeDate(doSumm.getDischargeDate() != null ? new ims.framework.utils.Date(doSumm.getDischargeDate()) : null);
			voItem.setCareContextRefVo(new CareContextRefVo(doSumm.getCareContextId(),0));
			voItem.setLetterStatus(doSumm.getLetterStatus());
			voItem.setPatientHospnum(doSumm.getPatientHospnum());
			voItem.setPatientName(doSumm.getPatientName());
			voItem.setResponsibleHCPName(doSumm.getResponsibleHcp());
			voItem.setWard(doSumm.getWard());

			if (doSumm.getDischargeDate() != null)
			{
				StringBuffer sb = new StringBuffer();
				sb.append(voItem.getDischargeDate().getYear());
				sb.append(voItem.getDischargeDate().getMonth());
				sb.append(voItem.getDischargeDate().getDay());
				voItem.setJulianDate(sb.toString());
			}
			
			voColl.add(voItem);
		}
		
		return voColl;//EDischargeSTHKSummaryListVoAssembler.createEDischargeSTHKSummaryListVoCollectionFromSummary(domObjs);	
			
	}

	public LocationLiteVo getWard(LocationRefVo voWardRef) 
	{
		if (voWardRef != null && voWardRef.getID_LocationIsNotNull())
		{	
			DomainFactory factory = getDomainFactory();
			Location domLoc = (Location) factory.getDomainObject(Location.class, voWardRef.getID_Location());
			return LocationLiteVoAssembler.create(domLoc);
		}
		return null;
	}

	//WDEV-13928
	public LocationLiteVoCollection listActiveWardsAtTheSameLevelWithWard(LocationLiteVo wardRef)
	{
		if(wardRef == null)
			throw new CodingRuntimeException("Can not get LocationLiteVo value on null wardRef.");
		
		StringBuffer hql = new StringBuffer();
	
		hql.append("select loc from Location as loc left join loc.parentLocation as parentLoc left join loc.type as type ");
		hql.append("where (loc.type.id = -85 and loc.isActive = :isActive and loc.isVirtual= :isVirtual and parentLoc.id in (select loc.parentLocation.id  from Location as loc where (loc.id = :wardID)))");
		hql.append(" order by loc.name"); //WDEV-14995
		
		DomainFactory factory = getDomainFactory();
		List<?> list = factory.find(hql.toString(), new String[] {"wardID","isActive","isVirtual"}, new Object[] {wardRef.getID_Location(),true,false});
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(list);
	}

}
