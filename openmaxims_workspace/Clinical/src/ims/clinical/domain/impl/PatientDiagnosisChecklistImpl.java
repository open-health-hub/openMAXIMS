//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.53 build 2645.24233)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import java.util.List;

import ims.clinical.domain.DiagnosisComplications;
import ims.clinical.domain.base.impl.BasePatientDiagnosisChecklistImpl;
import ims.clinical.domain.objects.PatientDiagnosisChecklist;
import ims.clinical.vo.DiagnosisListVoCollection;
import ims.clinical.vo.PatientDiagnosisChecklistVo;
import ims.clinical.vo.PatientDiagnosisChecklistVoCollection;
import ims.clinical.vo.domain.PatientDiagnosisChecklistVoAssembler;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.vo.PMHChecklistConfigVoCollection;
import ims.clinicaladmin.vo.domain.PMHChecklistConfigVoAssembler;
import ims.clinicaladmin.vo.enums.CciType;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.PatientDiagnosisListVoCollection;
import ims.core.vo.PatientDiagnosisVo;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;

public class PatientDiagnosisChecklistImpl extends BasePatientDiagnosisChecklistImpl
{

	private static final long serialVersionUID = 1L;

	public PatientDiagnosisChecklistVo savePatientDiagnosisChecklist(PatientDiagnosisChecklistVo diagnosisChecklist) throws StaleObjectException, DomainInterfaceException {
		if (!diagnosisChecklist.isValidated())
			throw new DomainRuntimeException("Patient Diagnosis Checklist has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("from PatientDiagnosisChecklist p ");
		if(diagnosisChecklist.getID_PatientDiagnosisChecklist() == null)
			hql.append(" where (p.clinicalContact.id = " + diagnosisChecklist.getClinicalContact().getID_ClinicalContact() + ")");
		else
			hql.append(" where (p.clinicalContact.id = " + diagnosisChecklist.getClinicalContact().getID_ClinicalContact() + ") and p.id <> " +  diagnosisChecklist.getID_PatientDiagnosisChecklist());
		
		List list = (factory.find(hql.toString()));
		
		if(list.size() > 0)
			throw new DomainRuntimeException("A record exists for this clinical contact, the screen will be refreshed");
		
		
		PatientDiagnosisChecklist domChecklist = PatientDiagnosisChecklistVoAssembler.extractPatientDiagnosisChecklist(factory, diagnosisChecklist);
		factory.save(domChecklist);		 
		return PatientDiagnosisChecklistVoAssembler.create(domChecklist);
	}

	public DiagnosisVo saveDiagnosis(DiagnosisVo voDiagnosis) throws StaleObjectException, UniqueKeyViolationException, DomainInterfaceException 
	{
		CCIAdmin impl = (CCIAdmin)getDomainImpl(CCIAdminImpl.class);
		return (DiagnosisVo)impl.saveCci(voDiagnosis, CciType.DIAGNOSIS);
	}
	
	public DiagnosisListVoCollection listDiagnosisBySpecialty(Specialty speciality) throws DomainInterfaceException {
		if(speciality == null)
			throw new DomainRuntimeException("Invalid Search criteria. Specialty must be supplied.");

		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("from PMHChecklistConfig p ");
		hql.append(" where (p.specialty.id = " + speciality.getId() + ")");
		PMHChecklistConfigVoCollection voPMHChecklistConfig = PMHChecklistConfigVoAssembler.createPMHChecklistConfigVoCollectionFromPMHChecklistConfig((factory.find(hql.toString())));
	
		if(voPMHChecklistConfig.size()>0)		
			return voPMHChecklistConfig.get(0).getDiagnosisList();
		else
			return null;
	}

	public PatientDiagnosisChecklistVo getPatientDiagnosisChecklistVo(ClinicalContactRefVo clinicalContact) {
		if(clinicalContact == null)
			throw new DomainRuntimeException("Invalid Search criteria. ClinicalContact must be supplied.");

		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("from PatientDiagnosisChecklist p ");
		hql.append(" where (p.clinicalContact.id = " + clinicalContact.getID_ClinicalContact() + ")");
		List list = (factory.find(hql.toString()));
		PatientDiagnosisChecklistVoCollection collPatientDiagnosisChecklist = PatientDiagnosisChecklistVoAssembler.createPatientDiagnosisChecklistVoCollectionFromPatientDiagnosisChecklist(list);
	
		if(collPatientDiagnosisChecklist==null || collPatientDiagnosisChecklist.size()==0)
			return null;
		
		return collPatientDiagnosisChecklist.get(0);
	}

	public PatientDiagnosisListVoCollection listDiagnosisListVoByPatient(PatientRefVo patient) {
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listDiagnosisComplicationsByPatient(patient);
	}

	public PatientDiagnosisVo getDiagnosisVo(PatientDiagnosisRefVo patdiagrefVo) {
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.getDiagnosisVo(patdiagrefVo);
	}
}
