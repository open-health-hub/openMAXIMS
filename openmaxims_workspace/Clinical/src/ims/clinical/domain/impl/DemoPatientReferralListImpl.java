//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.62 build 2929.28798)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseDemoPatientReferralListImpl;
import ims.clinical.vo.ReferralSearchCriteriaVo;
import ims.clinical.vo.ReferralsRecordingShortVoCollection;
import ims.clinical.vo.domain.ReferralsRecordingShortVoAssembler;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.domain.CareContextVoAssembler;
import ims.core.vo.domain.ClinicalContactShortVoAssembler;
import ims.domain.DomainFactory;

import java.util.ArrayList;
import java.util.List;

public class DemoPatientReferralListImpl extends BaseDemoPatientReferralListImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* List Referrals
	*/
	public ReferralsRecordingShortVoCollection listReferralsForPatient(ReferralSearchCriteriaVo referralCriteria) 
	{
		if(referralCriteria == null)
			throw new RuntimeException("Cannot get ReferralsRecordingVo for null referralCriteria");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from ReferralsRecording rr ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		hql.append(andStr + " rr.careContext.episodeOfCare.careSpell.patient.id = :patient");
		markers.add("patient");
		values.add(referralCriteria.getPatient().getID_Patient());			
		andStr = " and ";

		if(referralCriteria.getSpecialtyFunctionCode() != null)
		{
			hql.append(andStr + " rr.specialtyFunctionCode = :specialtyFunctionCode");
			markers.add("specialtyFunctionCode");
			values.add(getDomLookup(referralCriteria.getSpecialtyFunctionCode()));			
			andStr = " and ";
		}
		if(referralCriteria.getDisciplineIsNotNull())
		{
			hql.append(andStr + " rr.discipline = :discipline");
			markers.add("discipline");
			values.add(getDomLookup(referralCriteria.getDiscipline()));			
			andStr = " and ";
		}
		if(referralCriteria.getReferralStatus() != null)
		{
			hql.append(andStr + " rr.referralStatus = :rStat");
			markers.add("rStat");
			values.add(getDomLookup(referralCriteria.getReferralStatus()));			
			andStr = " and ";
		}
		if(referralCriteria.getReferralSource() != null)
		{
			hql.append(andStr + " rr.referralSource = :rS");
			markers.add("rS");
			values.add(getDomLookup(referralCriteria.getReferralSource()));			
			andStr = " and ";
		}
		if(referralCriteria.getReferralHCP() != null)
		{
			hql.append(andStr + " rr.referralHCP.id = :rHCP");
			markers.add("rHCP");
			values.add(referralCriteria.getReferralHCP().getID_MemberOfStaff());			
			andStr = " and ";
		}
		if(referralCriteria.getFromDateIsNotNull())
		{
			hql.append(andStr + " rr.dateSent >= :dateReceivedFrom"); 
			markers.add("dateReceivedFrom");
			values.add(referralCriteria.getFromDate().getDate());
			andStr = " and ";
		}	
		if(referralCriteria.getToDateIsNotNull())
		{
			hql.append(andStr + " rr.dateSent <= :dateReceivedTo"); 
			markers.add("dateReceivedTo");
			values.add(referralCriteria.getToDate().getDate());
			andStr = " and ";
		}	

		if (markers.size() > 0) query += " where ";
			query += hql.toString();
		
		List rrList = factory.find(query, markers, values);	
		ReferralsRecordingShortVoCollection coll = ReferralsRecordingShortVoAssembler.createReferralsRecordingShortVoCollectionFromReferralsRecording(rrList);
		if(coll != null && coll.size() > 0)
			return coll;
		else
			return null;
	}

	public CareContextVo getCareContext(CareContextRefVo careContextRefVo) 
	{
		if (careContextRefVo == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		CareContext doCareContext = (CareContext)factory.getDomainObject(CareContext.class, careContextRefVo.getID_CareContext()); 
		return CareContextVoAssembler.create(doCareContext);
	}

	public ClinicalContactShortVo getClinicalContact(ClinicalContactRefVo clinicalContactRefVo) 
	{
		if (clinicalContactRefVo == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		ClinicalContact doClinContact = (ClinicalContact)factory.getDomainObject(ClinicalContact.class, clinicalContactRefVo.getID_ClinicalContact()); 
		return ClinicalContactShortVoAssembler.create(doClinContact);
	}
}
