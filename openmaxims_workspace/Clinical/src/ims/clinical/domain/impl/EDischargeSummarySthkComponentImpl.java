//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 3952.27656)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseEDischargeSummarySthkComponentImpl;
import ims.clinical.helper.EDischargeHelper;
import ims.clinical.helper.IEDischargeHelper;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.domain.EDischargeSTHKSummaryVoAssembler;
import ims.core.admin.pas.domain.objects.AdmissionDetail;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.vo.AdmissionDetailVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.InpatientEpisodeEDischargeVo;
import ims.core.vo.domain.AdmissionDetailVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.InpatientEpisodeEDischargeVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupService;
import ims.edischarge.domain.objects.Summary;
import ims.edischarge.vo.SummaryRefVo;
import ims.framework.FormName;
import ims.framework.enumerations.PrinterScope;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAppUser;
import ims.framework.interfaces.ILocation;
import ims.framework.interfaces.IPrinter;
import ims.framework.interfaces.ISystemLog;
import ims.reports.ReportEngine;
import ims.vo.ValueObject;

import java.util.List;

public class EDischargeSummarySthkComponentImpl extends BaseEDischargeSummarySthkComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.EDischargeSTHKSummaryVo getSummaryByCareContext(ims.core.admin.vo.CareContextRefVo careContext)
	{
		if (careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext is null or id not provided in method getNeonatalByCareContext");
		
		DomainFactory factory = getDomainFactory();
		List nnItems =  factory.find("from Summary ds where ds.careContext.id = " + careContext.getID_CareContext());
		
		if(nnItems != null && nnItems.size() > 0)
			return EDischargeSTHKSummaryVoAssembler.create((Summary) nnItems.get(0));
		
		return null;
	}

	/**
	* saveSummary
	*/
	public EDischargeSTHKSummaryVo saveSummaryAndDischargeDetails(EDischargeSTHKSummaryVo summary, DischargeDetailsVo dischargeDetails) throws StaleObjectException, DomainInterfaceException
	{
		if (summary == null)
			throw new CodingRuntimeException("summary is null in method saveSummary");
		if (!summary.isValidated())
			throw new CodingRuntimeException("summary has not been validated in method saveSummary");

		if (dischargeDetails != null)
		{
			IEDischargeHelper impl = (IEDischargeHelper)getDomainImpl(EDischargeHelper.class);
			summary.setDischargeDetails(impl.saveDischargeDetails(dischargeDetails));
		}
		
		DomainFactory factory = getDomainFactory();
		Summary doSummary = EDischargeSTHKSummaryVoAssembler.extractSummary(factory, summary);
		factory.save(doSummary);

		return EDischargeSTHKSummaryVoAssembler.create(doSummary);
	}

	public HcpLiteVo getResponsibleHCPFromCareContext(CareContextRefVo careContext)
	{
		if (careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext is null or id not provided in method getResponsibleHCPFromCareContext");
		
		List items = getDomainFactory().find(" select cc.responsibleHCP from CareContext as cc where cc.id = " +  careContext.getID_CareContext());
		if(items != null && items.size() > 0)
			return HcpLiteVoAssembler.create((Hcp) items.get(0));
		
		return null;
	}

	public InpatientEpisodeEDischargeVo getInpatientEpisodeByCareContext(CareContextRefVo careContext)
	{
		if (careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext is null or id not provided in method getInpatientEpisodeByCareContext");
		
		List items = getDomainFactory().find(" select cc.pasEvent.id from CareContext as cc where cc.id = " +  careContext.getID_CareContext());
		if(items != null && items.size() > 0)
		{
			Integer eventId = (Integer) items.get(0);
		
			if(eventId!= null && eventId  > 0)
			{
				List ieItems = getDomainFactory().find(" from InpatientEpisode ie where ie.pasEvent.id = " +  eventId);
				if(ieItems != null && ieItems.size() > 0)
					return InpatientEpisodeEDischargeVoAssembler.create((InpatientEpisode) ieItems.get(0));
			}	
		}
		
		return null;
	}

	public Boolean allowChangeNeoNatalPlastics(SummaryRefVo summary) 
	{
		if(summary == null || summary.getID_Summary() == null)
			return true;
		
		DomainFactory factory = getDomainFactory();
		
		List<?> records = factory.find("from Summary as s left join s.summaryDetails as sd where s.id = :SummaryId and (sd.section.id = :SummarySection1 or sd.section.id = :SummarySection2) and (sd.progressStatus.id = :ProgressStatus1 or sd.progressStatus.id = :ProgressStatus2)", new String[] {"SummaryId", "SummarySection1", "SummarySection2", "ProgressStatus1", "ProgressStatus2"}, new Object[] {summary.getID_Summary(), ims.clinical.vo.lookups.EDischargeSummarySection.NEONATAL.getID(), ims.clinical.vo.lookups.EDischargeSummarySection.PLASTICS.getID(), ims.clinical.vo.lookups.EDischargeSummarySectionStatus.IN_PROGRESS.getID(), ims.clinical.vo.lookups.EDischargeSummarySectionStatus.COMPLETED.getID()});
		
		if(records != null && records.size() > 0)
			return false;
		
		return true;
	}

	public AdmissionDetailVo getAdmissionDetailByCareContext(CareContextRefVo voCC) 
	{
		if (voCC == null || voCC.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext is null or id not provided in method getAdmissionDetailByCareContext");
		
		List items = getDomainFactory().find(" select cc.pasEvent.id from CareContext as cc where cc.id = " +  voCC.getID_CareContext());
		if(items != null && items.size() > 0)
		{
			Integer eventId = (Integer) items.get(0);
		
			if(eventId!= null && eventId  > 0)
			{
				List ieItems = getDomainFactory().find(" from AdmissionDetail ad where ad.pasEvent.id = " +  eventId);
				if(ieItems != null && ieItems.size() > 0)
					return AdmissionDetailVoAssembler.create((AdmissionDetail) ieItems.get(0));
			}	
		}
		
		return null;
	}
}
