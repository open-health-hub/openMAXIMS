//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.53 build 2643.26724)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import java.util.List;

import ims.clinical.domain.objects.PatientProcedureChecklist;
import ims.clinical.domain.base.impl.BasePatientProcedureChecklistImpl;
import ims.clinical.vo.PatientProcedureChecklistVo;
import ims.clinical.vo.PatientProcedureChecklistVoCollection;
import ims.clinical.vo.ProcedureListVoCollection;
import ims.clinical.vo.domain.PatientProcedureChecklistVoAssembler;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.vo.PMHChecklistConfigVoCollection;
import ims.clinicaladmin.vo.domain.PMHChecklistConfigVoAssembler;
import ims.clinicaladmin.vo.enums.CciType;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.clinical.domain.Procedures;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PatientProcedureShortListVoCollection;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.ProcedureVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;

public class PatientProcedureChecklistImpl extends BasePatientProcedureChecklistImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* Save a ProcedureVo
	*/
	public PatientProcedureChecklistVo savePatienProcedureChecklist(PatientProcedureChecklistVo procedureChecklist) throws StaleObjectException 
	{
		if (!procedureChecklist.isValidated())
			throw new DomainRuntimeException("Procedure Checklist has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("from PatientProcedureChecklist p ");
		if(procedureChecklist.getID_PatientProcedureChecklist() == null)
			hql.append(" where (p.clinicalContact.id = " + procedureChecklist.getClinicalContact().getID_ClinicalContact() + ")");
		else
			hql.append(" where (p.clinicalContact.id = " + procedureChecklist.getClinicalContact().getID_ClinicalContact() + ") and p.id <> " +  procedureChecklist.getID_PatientProcedureChecklist());
		
		List list = (factory.find(hql.toString()));
		
		if(list.size() > 0)
			throw new DomainRuntimeException("A record exists for this clinical contact, the screen will be refreshed");
		
		PatientProcedureChecklist domChecklist = PatientProcedureChecklistVoAssembler.extractPatientProcedureChecklist(factory, procedureChecklist);
		factory.save(domChecklist);		 
		return PatientProcedureChecklistVoAssembler.create(domChecklist);
	}

	public ProcedureVo saveProcedure(ProcedureVo voProcedure) throws StaleObjectException, UniqueKeyViolationException, DomainInterfaceException 
	{
		CCIAdmin impl = (CCIAdmin)getDomainImpl(CCIAdminImpl.class);
		return (ProcedureVo)impl.saveCci(voProcedure, CciType.PROCEDURE);
	}
	
	public ProcedureListVoCollection listProceduresBySpecialty(ims.core.vo.lookups.Specialty speciality) throws ims.domain.exceptions.DomainInterfaceException
	{
		if(speciality == null)
			throw new DomainRuntimeException("Invalid Search criteria. Specialty must be supplied.");

		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("from PMHChecklistConfig p ");
		hql.append(" where (p.specialty.id = " + speciality.getId() + ")");
		PMHChecklistConfigVoCollection voPMHChecklistConfig = PMHChecklistConfigVoAssembler.createPMHChecklistConfigVoCollectionFromPMHChecklistConfig((factory.find(hql.toString())));
	
		if(voPMHChecklistConfig.size()>0)		
			return voPMHChecklistConfig.get(0).getProcedureList();
		else
			return null;
	}

	public PatientProcedureChecklistVo getPatientProcedureChecklistVo(ClinicalContactRefVo clinicalContact) {
		if(clinicalContact == null)
			throw new DomainRuntimeException("Invalid Search criteria. ClinicalContact must be supplied.");

		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("from PatientProcedureChecklist p ");
		hql.append(" where (p.clinicalContact.id = " + clinicalContact.getID_ClinicalContact() + ")");
		PatientProcedureChecklistVoCollection collPatientProcedureChecklist = PatientProcedureChecklistVoAssembler.createPatientProcedureChecklistVoCollectionFromPatientProcedureChecklist((factory.find(hql.toString())));
	
		if(collPatientProcedureChecklist==null || collPatientProcedureChecklist.size()==0)
			return null;
		
		return collPatientProcedureChecklist.get(0);
	}

	public PatientProcedureShortListVoCollection listProcedureShortListVoByPatient(PatientRefVo patient) {
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProcedureShortListVoByPatient(patient);
	}

	public PatientProcedureVo getProcedure(PatientProcedureRefVo patientProcedureRefVo) {
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.getProcedure(patientProcedureRefVo);
	}

}
