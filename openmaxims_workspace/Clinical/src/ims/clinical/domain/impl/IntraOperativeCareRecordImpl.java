//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.70 build 3478.14513)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.RefMan.domain.objects.SuitableForSurgeryAssessment;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.CatsReferralVoCollection;
import ims.RefMan.vo.SuitableForSurgeryAssessmentLiteVo;
import ims.RefMan.vo.domain.CatsReferralVoAssembler;
import ims.RefMan.vo.domain.SuitableForSurgeryAssessmentLiteVoAssembler;
import ims.clinical.domain.Procedures;
import ims.clinical.domain.base.impl.BaseIntraOperativeCareRecordImpl;
import ims.clinical.vo.IntraOperativeCareRecordVo;
import ims.clinical.vo.domain.IntraOperativeCareRecordVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.IntraOperativeCareRecord;
import ims.core.clinical.domain.objects.PatientProcedure;
import ims.core.clinical.vo.IntraOperativeCareRecordRefVo;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.core.domain.ADT;
import ims.core.domain.impl.ADTImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.PatientProcedureLiteVo;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.LocShortVoAssembler;
import ims.core.vo.domain.PatientProcedureLiteVoAssembler;
import ims.core.vo.domain.PatientProcedureVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.domain.hibernate3.IMSCriteria;
import ims.framework.FormName;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.Booking_AppointmentShortVo;
import ims.scheduling.vo.Booking_AppointmentShortVoCollection;
import ims.scheduling.vo.domain.Booking_AppointmentShortVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class IntraOperativeCareRecordImpl extends BaseIntraOperativeCareRecordImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.IntraOperativeCareRecordVo getIntraOperativeCareRecord(ims.core.clinical.vo.IntraOperativeDetailsRefVo intraOperativeDetails)
	{
		if (intraOperativeDetails == null || !intraOperativeDetails.getID_IntraOperativeDetailsIsNotNull())
			throw new CodingRuntimeException("intraOperativeDetails is null or id not provided in method getIntraOperativeCareRecord");

		DomainFactory factory = getDomainFactory();

		IMSCriteria criteria = new IMSCriteria(IntraOperativeCareRecord.class, factory);
		criteria.equal("this.intraOperativeDetails.id", intraOperativeDetails.getID_IntraOperativeDetails());

		List<IntraOperativeCareRecord> listIntraOperativeCareRecord = criteria.find();
		return listIntraOperativeCareRecord.size() > 0 ? IntraOperativeCareRecordVoAssembler.create((IntraOperativeCareRecord) listIntraOperativeCareRecord.get(0)) : null;
	}

	public PatientProcedureLiteVo getProcedureFromSuitableForSurgery(CareContextRefVo careContext)
	{
		if (careContext == null || !careContext.getID_CareContextIsNotNull())
			throw new CodingRuntimeException("A care context must be selected");

		DomainFactory factory = getDomainFactory();

		IMSCriteria assessmentCriteria = new IMSCriteria(SuitableForSurgeryAssessment.class, factory);
		assessmentCriteria.equal("this.careContext.id", careContext.getID_CareContext());

		List<SuitableForSurgeryAssessment> assessments = assessmentCriteria.find();

		if (assessments == null || assessments.size() == 0)
			return null;

		SuitableForSurgeryAssessmentLiteVo assessment = SuitableForSurgeryAssessmentLiteVoAssembler.create(assessments.get(0));

		if (assessment != null && assessment.getProcedureIsNotNull() && assessment.getProcedure().getID_PatientProcedureIsNotNull())
		{
			return PatientProcedureLiteVoAssembler.create((PatientProcedure) factory.getDomainObject(PatientProcedure.class, assessment.getProcedure().getID_PatientProcedure()));
		}

		return null;
	}

	public IntraOperativeCareRecordVo save(IntraOperativeCareRecordVo record, Booking_AppointmentShortVo voAppt) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException
	{
		if (record == null)
			throw new CodingRuntimeException("record is null in method save");

		if (!record.isValidated())
			throw new CodingRuntimeException("record has not been validated in method save");

		DomainFactory factory = getDomainFactory();

		IntraOperativeCareRecord domIntraOperativeCareRecord = IntraOperativeCareRecordVoAssembler.extractIntraOperativeCareRecord(factory, record);
		factory.save(domIntraOperativeCareRecord);

		// WDEV-12173
		if (voAppt != null)
		{
			Booking_Appointment doAppt = Booking_AppointmentShortVoAssembler.extractBooking_Appointment(factory, voAppt);
			List intraOPs = new ArrayList();
			Iterator it = doAppt.getIntraOperativeCareRecord().iterator();
			while (it.hasNext())
			{
				IntraOperativeCareRecord doIntra = (IntraOperativeCareRecord) it.next();
				intraOPs.add(doIntra);
			}

			intraOPs.add(domIntraOperativeCareRecord);

			if (intraOPs.size() > 0)
			{
				doAppt.getIntraOperativeCareRecord().clear();
				doAppt.setIntraOperativeCareRecord(intraOPs);

				factory.save(doAppt);
			}
		}

		IntraOperativeCareRecordVo intraOperativeCareRecord = IntraOperativeCareRecordVoAssembler.create(domIntraOperativeCareRecord);

		PatientProcedureVo patientProcedure = getProcedure(intraOperativeCareRecord.getPlannedProcedure());
		patientProcedure.setIntraOperativeRecord(intraOperativeCareRecord);

		PatientProcedure domPatientProcedure = PatientProcedureVoAssembler.extractPatientProcedure(factory, patientProcedure);

		factory.save(domPatientProcedure);
		
		
		// WDEV-13471
		// If the performed procedure hasn't the IntraOperative Care record associated, associate it now
		PatientProcedureVo patientProcedurePerformed = getProcedure(intraOperativeCareRecord.getActualProcedure());
		
		if (patientProcedurePerformed != null && !patientProcedurePerformed.getIntraOperativeRecordIsNotNull())
		{
			patientProcedurePerformed.setIntraOperativeRecord(intraOperativeCareRecord);
			
			PatientProcedure domPatientProcedurePerformed = PatientProcedureVoAssembler.extractPatientProcedure(factory, patientProcedurePerformed);
			factory.save(domPatientProcedurePerformed);
		}

		return intraOperativeCareRecord;
	}

	public PatientProcedureVo getProcedure(PatientProcedureRefVo patientProcedure)
	{
		if (patientProcedure == null || patientProcedure.getID_PatientProcedure() == null)
			throw new CodingRuntimeException("patientProcedure is null or id not provided in method getProcedure");

		DomainFactory factory = getDomainFactory();

		return PatientProcedureVoAssembler.create((PatientProcedure) factory.getDomainObject(PatientProcedure.class, patientProcedure.getID_PatientProcedure()));
	}

	public LocShortVoCollection listTheatres(LocationRefVo locRefVo)
	{
		DomainFactory factory = getDomainFactory();

		List locations;

		String hql = " from Location loc ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		condStr.append(andStr + " loc.type = :locType");
		markers.add("locType");
		values.add(getDomLookup(LocationType.THEATRE));
		andStr = " and ";

		condStr.append(andStr + " loc.isActive = :active");
		markers.add("active");
		values.add(Boolean.TRUE);
		andStr = " and ";

		condStr.append(andStr + "loc.isVirtual =:isVirtual");
		markers.add("isVirtual");
		values.add(Boolean.FALSE);

		if (locRefVo != null)
		{
			condStr.append(andStr + "loc.parentLocation.id =:parentID");
			markers.add("parentID");
			values.add(locRefVo.getID_Location());
		}
		
		if (andStr.equals(" and "))
		{
			hql += " where ";
		}

		hql += condStr.toString();
		locations = factory.find(hql, markers, values);
		return LocShortVoAssembler.createLocShortVoCollectionFromLocation(locations).sort();
	}

	public PatientProcedureVo saveProcedure(PatientProcedureVo voPatientProcedure, PatientShort patientShortVo) throws StaleObjectException, UniqueKeyViolationException
	{
		if (voPatientProcedure == null)
			throw new RuntimeException("Cannot save null PatientProcedureVo");
		if (voPatientProcedure.isValidated() == false)
			throw new RuntimeException("PatientProcedureVo is not validated");

		Procedures plannedProcedureImpl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return plannedProcedureImpl.savePlannedProcedure(voPatientProcedure, patientShortVo);

	}

	// added for WDEV-8076 - PatientProcedure BO Change
	public IntraOperativeCareRecordVo getIntraOperativeCareRecord(IntraOperativeCareRecordRefVo intraOperativeRecord)
	{
		if (intraOperativeRecord == null || !intraOperativeRecord.getID_IntraOperativeCareRecordIsNotNull())
			throw new CodingRuntimeException("intraOperativeDetails is null or id not provided in method getIntraOperativeCareRecord");

		DomainFactory factory = getDomainFactory();
		return IntraOperativeCareRecordVoAssembler.create((IntraOperativeCareRecord) factory.getDomainObject(IntraOperativeCareRecord.class, intraOperativeRecord.getID_IntraOperativeCareRecord()));
		/*
		 * IMSCriteria criteria = new IMSCriteria(IntraOperativeCareRecord.class, factory); criteria.equal("this.id", intraOperativeRecord.getID_IntraOperativeCareRecord()); //IntraOperativeCareRecord.FieldNames.ID List<IntraOperativeCareRecord> listIntraOperativeCareRecord = criteria.find(); return listIntraOperativeCareRecord.size() > 0 ? IntraOperativeCareRecordVoAssembler.create((IntraOperativeCareRecord)listIntraOperativeCareRecord.get(0)) : null;
		 */
	}

	// added for WDEV-8147
	public InpatientEpisodeVo getInpatientRecord(PatientRefVo patientRef)
	{
		if (patientRef == null)
			return null;
		return ((ADT) getDomainImpl(ADTImpl.class)).getCurrentAdmissionRecord(patientRef);
	}

	// wdev-12096
	public CatsReferralVo getCatsReferral(CareContextRefVo careContextRef)
	{
		if (careContextRef == null)
			return null;

		DomainFactory factory = getDomainFactory();

		String hql = "select c1_1 from CatsReferral as c1_1 left join c1_1.careContext as c2_1 where (c2_1.id = :refID))";

		ArrayList<String> paramNames = new ArrayList<String>();
		paramNames.add("refID");

		ArrayList<Object> paramValues = new ArrayList<Object>();
		paramValues.add(careContextRef.getID_CareContext());
		List list = factory.find(hql, paramNames, paramValues);
		if (list != null && list.size() > 0)
		{
			CatsReferralVoCollection coll = CatsReferralVoAssembler.createCatsReferralVoCollectionFromCatsReferral(list);
			if (coll != null && coll.size() > 0)
				return coll.get(0);
		}

		return null;
	}

	// -------------
	// wdev-12096
	public Booking_AppointmentShortVoCollection getBookingAppt(CatsReferralVo catsReferralvo)
	{
		if (catsReferralvo == null)
			return null;
		DomainFactory factory = getDomainFactory();
		String hql = "select b1_1 from CatsReferral as c1_1 left join c1_1.appointments as b1_1 left join b1_1.theatreBooking as t1_1 left join b1_1.apptStatus as l1_1	where (b1_1.theatreBooking is not null  and c1_1.id = :catsrefID and l1_1.id not in(" + getExcludedStatus() + ")) ";// WDEV-12178
		ArrayList<String> paramNames = new ArrayList<String>();
		paramNames.add("catsrefID");

		ArrayList<Object> paramValues = new ArrayList<Object>();
		paramValues.add(catsReferralvo.getID_CatsReferral());
		List list = factory.find(hql, paramNames, paramValues);
		if (list != null && list.size() > 0)
		{
			Booking_AppointmentShortVoCollection collVo = Booking_AppointmentShortVoAssembler.createBooking_AppointmentShortVoCollectionFromBooking_Appointment(list);
			return collVo;
		}

		return null;

	}

	private String getExcludedStatus()// WDEV-12178
	{
		return "" + Status_Reason.BOOKED.getID() + "," + Status_Reason.CANCELLED.getID() + "," + Status_Reason.DNA.getID();

	}

	public Booking_AppointmentShortVo getTheatreApptForIntraOperativeCareRecord(IntraOperativeCareRecordRefVo intraOperative)
	{
		if (intraOperative == null || intraOperative.getID_IntraOperativeCareRecord() == null)
			throw new CodingRuntimeException("intraOperative is null or id not provided in method getTheatreApptForIntraOperativeCareRecord");

		List doLstAppts = getDomainFactory().find("from Booking_Appointment appt left join fetch appt.intraOperativeCareRecord as intra where intra.id = " + intraOperative.getID_IntraOperativeCareRecord());
		if (doLstAppts != null && doLstAppts.size() == 1)
			return Booking_AppointmentShortVoAssembler.createBooking_AppointmentShortVoCollectionFromBooking_Appointment(doLstAppts).get(0);

		return null;
	}

	public void rieIntraOperativeCareRecordAndActualProcedure(IntraOperativeCareRecordVo iocr, FormName formName, Integer patientId, Integer contactId, Integer careContextId, String comment) throws StaleObjectException
	{
		// Rie both the IntraOperativeCareRecord and the actual procedure in the same transaction.
		try
		{
			// WDEV-13476
			// Also remove the link from the Planned procedure
			if (iocr.getPlannedProcedureIsNotNull())
			{
				PatientProcedure domainPlannedProcedure = (PatientProcedure) getDomainFactory().getDomainObject(PatientProcedure.class, iocr.getPlannedProcedure().getID_PatientProcedure());
				
				domainPlannedProcedure.setIntraOperativeRecord(null);
				
				getDomainFactory().save(domainPlannedProcedure);
			}

			if (iocr.getActualProcedureIsNotNull())
				markAsRie(iocr.getActualProcedure(), formName, patientId, contactId, careContextId, comment);
			markAsRie(iocr, formName, patientId, contactId, careContextId, comment);
		}
		catch (UnqViolationUncheckedException e)
		{
			// Standard RIE procedure does a get before the save so will never throw a stale.
			// But, on every RIE a new RecordedInError record is create . This bo contains an unique key (boClassId,className).
			// So this UnqViolationUncheckedException might be actually an Stale (somebody already ried this record).
			// Verify if there is an RecordedInError record(either core.clinical.PatientProcedure or core.clinical.IntraOperativeCareRecord). If yes throw Stale
			StringBuilder hql = new StringBuilder("select count(rie.id) from RecordedInError as rie where ((rie.boClassId = :iocrId and rie.className = :iocrClass)");
			String[] paramNames;
			Object[] paramValues;
			if (iocr.getActualProcedureIsNotNull())
			{
				hql.append("or  (rie.boClassId = :procId and rie.className = :procClass)");
				paramNames = new String[] { "iocrId", "iocrClass", "procId", "procClass" };
				paramValues = new Object[] { iocr.getBoId(), iocr.getBoClassName(), iocr.getActualProcedure().getBoId(), iocr.getActualProcedure().getBoClassName() };
			}
			else
			{
				paramNames = new String[] { "iocrId", "iocrClass" };
				paramValues = new Object[] { iocr.getBoId(), iocr.getBoClassName() };

			}
			hql.append(")");

			long count = getDomainFactory().countWithHQL(hql.toString(), paramNames, paramValues);
			if (count > 0)
				throw new StaleObjectException(null);

		}

	}

	public Booking_AppointmentShortVo getMostRecentOutPatientAppointment(PatientRefVo voPatientRef)
	{
		if (voPatientRef == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String hql = "from Booking_Appointment as b1	where (b1.appointmentDate <= :todayDate and b1.theatreBooking is null and b1.patient.id = :patID) order by b1.appointmentDate desc";

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("todayDate");
		paramValues.add(new Date().getDate());
		
		paramNames.add("patID");
		paramValues.add(voPatientRef.getID_Patient());
		
		List list = factory.find(hql, paramNames, paramValues);
		if (list != null && list.size() > 0)
			return Booking_AppointmentShortVoAssembler.createBooking_AppointmentShortVoCollectionFromBooking_Appointment(list).get(0);
		else
			return null;
	}

}
