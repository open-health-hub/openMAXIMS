//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3947.16317)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.helper.Keywords;
import ims.clinical.domain.base.impl.BaseEDischargeMedsSthkDialogImpl;
import ims.clinical.domain.objects.MedicationFavourtiesForHCP;
import ims.clinical.vo.MedicationFavouritesForHCPVo;
import ims.clinical.vo.MedicationFavouritesForHCPVoCollection;
import ims.clinical.vo.domain.MedicationFavouritesForHCPVoAssembler;
import ims.clinical.vo.lookups.DoseFormIndicator;
import ims.clinical.vo.lookups.DoseFormIndicatorCollection;
import ims.core.clinical.domain.objects.Medication;
import ims.core.clinical.vo.MedicationRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.MedicationFormLiteVoCollection;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.MedicationLiteVoCollection;
import ims.core.vo.MedicationRouteLiteVoCollection;
import ims.core.vo.MedicationRouteVo;
import ims.core.vo.domain.MedicationFormLiteVoAssembler;
import ims.core.vo.domain.MedicationLiteVoAssembler;
import ims.core.vo.domain.MedicationRouteLiteVoAssembler;
import ims.core.vo.domain.MedicationRouteVoAssembler;
import ims.core.vo.lookups.MedicationDoseUnitCollection;
import ims.core.vo.lookups.MedicationRoute;
import ims.core.vo.lookups.MedicationRouteCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;

import java.util.ArrayList;
import java.util.List;

public class EDischargeMedsSthkDialogImpl extends BaseEDischargeMedsSthkDialogImpl
{

	private static final long serialVersionUID = 1L;
	
	public MedicationLiteVo getMedicationLiteVo(MedicationRefVo voRef)
	{
		if(voRef == null) {
			throw new DomainRuntimeException("Invalid Medication record to get");
		}
		
		return MedicationLiteVoAssembler.create((Medication)getDomainFactory().getDomainObject(Medication.class, voRef.getID_Medication()));
	}

	public MedicationLiteVoCollection listMedicationHotlist(String text, HcpRefVo hcp) throws DomainInterfaceException//WDEV-11888//WDEV-11979
	{
		//	WDEV-11979 - Start
		String hql = "select distinct med from MedicationFavourtiesForHCP as medFav left join medFav.hCP as hcp " +
				"left join medFav.medication as med left join med.keywords as kw where " +
				"(hcp.id = :hcpId and med.isActive = 1 and medFav.isRIE is null)";
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		names.add("hcpId");
		values.add(hcp.getID_Hcp());
		return MedicationLiteVoAssembler.createMedicationLiteVoCollectionFromMedication(Keywords.searchByKeywords(getDomainFactory(), text, hql, names, values));
		//WDEV-11979 - End
		/*WDEV-11979
		String hql = "select distinct med from MedicationHotlist as medhot left join medhot.user as usr " +
				"left join medhot.hotListItem as hli left join hli.medication as med left join med.keywords as kw where" +
				"(medhot.user.id = :medicId and med.isActive = :active)" ;
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		names.add("medicId");
		values.add(hcp.getID_Hcp());
		names.add("active");
		values.add(true);
		return MedicationLiteVoAssembler.createMedicationLiteVoCollectionFromMedication(Keywords.searchByKeywords(getDomainFactory(), text, hql, names, values));
		*/
	}

	public void addMedicationToHotlist(MedicationRefVo medication, HcpRefVo hcp)//WDEV-11888//WDEV-11979
	{
		//WDEV-11979 - Start
		String sql = "select medFavs from MedicationFavourtiesForHCP as medFavs left join medFavs.hCP as hcp" +
				" left join medFavs.medication as med where (hcp.id = :hcpId and med.id = :medId and medFavs.isRIE is null )";
		List dos = getDomainFactory().find(sql,new String[]{"hcpId","medId"},new Object[]{hcp.getID_Hcp(),medication.getID_Medication()});
		MedicationFavouritesForHCPVo result = null;
		if (dos == null || dos.size()<1)
		{
			result = initFav(medication, hcp);
		}
		else
		{
			MedicationFavouritesForHCPVoCollection favs = MedicationFavouritesForHCPVoAssembler.createMedicationFavouritesForHCPVoCollectionFromMedicationFavourtiesForHCP(dos);
			if (favs!=null && favs.size() == 0)
			{
				result = initFav(medication, hcp);
			}
			else
			{
				result = favs.get(0);
				if (result.getCountIsNotNull())
				{
					result.setCount(result.getCount().intValue()+1);
				}
				else
				{
					result.setCount(1);
				}
			}
		}
		
		MedicationFavourtiesForHCP medFavBo = MedicationFavouritesForHCPVoAssembler.extractMedicationFavourtiesForHCP(getDomainFactory(), result);
		try
		{
			getDomainFactory().save(medFavBo);
		}
		catch (StaleObjectException e)
		{
			//Ignore 
			e.printStackTrace();
		}
		//WDEV-11979-End
		/*//WDEV-11979
		 * String hql = "select distinct medHotP from MedicationHotlist as medHotP where " +
				"(medHotP.id not in (select medhot.id  from MedicationHotlist as medhot left join medhot.user as user " +
				"left join medhot.hotListItem as hotItem left join hotItem.medication as medication  where " +
				"  (user.id = :medicId and medication.id = :medicationId)) and medHotP.user.id=:medicId and medHotP.isRIE is null)";//WDEV-11888
		DomainFactory df = getDomainFactory();
		List dos = df.find(hql,new String[]{"medicId","medicationId"},new Object[]{medic.getID_Hcp(),medication.getID_Medication()});
		MedicationHotlistVo vo;
		if (dos == null || dos.size() == 0)
		{
			hql = "select count(medhot.id) from MedicationHotlist as medhot left join medhot.user as medic where (medic.id = :medId and medhot.isRIE is null)";
			long recExists = df.countWithHQL(hql, new String[]{"medId"}, new Object[]{medic.getID_Hcp()});
			if (recExists>0)
				return;
			vo = new MedicationHotlistVo();
			vo.setUser(medic);
		}
		else
		{
			vo = MedicationHotlistVoAssembler.create((MedicationHotlist) dos.get(0));
		}
		if (!vo.getHotListItemIsNotNull())
		{
			vo.setHotListItem(new MedicationHotListItemVoCollection());
		}
		MedicationHotListItemVo newVo = new MedicationHotListItemVo();
		newVo.setMedication(medication);
		vo.getHotListItem().add(newVo);
		MedicationHotlist bo = MedicationHotlistVoAssembler.extractMedicationHotlist(df, vo);
		try
		{
			df.save(bo);
		}
		catch (StaleObjectException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
	}

	private MedicationFavouritesForHCPVo initFav(MedicationRefVo medication, HcpRefVo hcp)
	{
		MedicationFavouritesForHCPVo result = new MedicationFavouritesForHCPVo();
		result.setHCP(hcp);
		result.setMedication(medication);
		result.setCount(1);
		return result;
	}

	public DoseFormIndicatorCollection getForms(MedicationRefVo medication)
	{
		if (!medication.getID_MedicationIsNotNull())
			throw new DomainRuntimeException("Medication with null as id");
		String hql = "select forms from Medication as med left join med.forms as forms where (med.id = :medId)"; 
		List<?> dos = getDomainFactory().find(hql,"medId",medication.getID_Medication());
		if (dos == null || dos.size() == 0)
			return null;
		MedicationFormLiteVoCollection meds = MedicationFormLiteVoAssembler.createMedicationFormLiteVoCollectionFromMedicationForm(dos);
		DoseFormIndicatorCollection result = new DoseFormIndicatorCollection();
		for (int i = 0 ;i<meds.size() ; i++)
		{
			if (meds.get(i)!=null && meds.get(i).getFormIsNotNull())
				result.add(meds.get(i).getForm());
		}
		return result;
	}

	public MedicationRouteCollection getRoutes(MedicationRefVo medication, DoseFormIndicator form)
	{
		if (!medication.getID_MedicationIsNotNull())
			throw new DomainRuntimeException("Medication with null as id");
		String hql =  "select routes from Medication as medication left join medication.forms as forms left join forms.formRoutes as routes" +
				" left join forms.form as form where (medication.id = :medId and form.id = :formId)"; 
		List<?> dos = getDomainFactory().find(hql,new String[]{"medId","formId"},new Object[]{medication.getID_Medication(),form.getID()});
		if (dos == null || dos.size() == 0)
			return null;
		MedicationRouteLiteVoCollection routes = MedicationRouteLiteVoAssembler.createMedicationRouteLiteVoCollectionFromMedicationRoute(dos);
		MedicationRouteCollection result = new MedicationRouteCollection();
		for (int i = 0 ; i < routes.size() ; i++)
		{
			if( routes.get(i)!=null && routes.get(i).getRouteIsNotNull())
				result.add(routes.get(i).getRoute());
		}
		return result;
	}

	public MedicationDoseUnitCollection getUnits(MedicationRefVo medication, DoseFormIndicator form, MedicationRoute route)
	{
		if (!medication.getID_MedicationIsNotNull())
			throw new DomainRuntimeException("Medication with null as id");
		String hql = "select routes from Medication as medication left join medication.forms as forms left join forms.formRoutes as routes " +
				"left join routes.route as route left join forms.form as form where " +
				"(medication.id = :medId and form.id = :formId and route.id = :routeId) ";
		List<?> dos = getDomainFactory().find(hql,new String[]{"medId","formId","routeId"},new Object[]{medication.getID_Medication(),new Integer(form.getID()),new Integer(route.getID())});
		if (dos == null || dos.size() == 0)
			return null;
		MedicationRouteVo routeVo = MedicationRouteVoAssembler.create((ims.core.clinical.domain.objects.MedicationRoute) dos.get(0));
		if (routeVo==null || !routeVo.getRouteUnitsIsNotNull() )
			return null;
		MedicationDoseUnitCollection result = new MedicationDoseUnitCollection();
		for (int i = 0 ; i < routeVo.getRouteUnits().size() ; i++)
		{
			if( routeVo.getRouteUnits().get(i)!=null && routeVo.getRouteUnits().get(i).getDoseUnitIsNotNull())
				result.add(routeVo.getRouteUnits().get(i).getDoseUnit());
		}
		return result;
	}

	public MedicationLiteVoCollection listFrequentMedications(Integer count, HcpRefVo hcp)//WDEV-11979
	{
		if (hcp == null || !hcp.getID_HcpIsNotNull())
			throw new DomainRuntimeException("Provided Hcp is invalid");
		if (count == null || count < 1)
			throw new DomainRuntimeException("Count must be 1 or greater");
		
		String hql = "select medcation from MedicationFavourtiesForHCP as medFav" +
				" left join medFav.hCP as hcp left join medFav.medication as medcation where " +
				"(hcp.id = :hcpId and medFav.isRIE is null and medcation.isActive = 1) order by medFav.count desc, upper(medcation.medicationName) asc ";
		List dos = getDomainFactory().find(hql,"hcpId",(Object)hcp.getID_Hcp());
		if (dos == null || dos.size() == 0)
			return null;
		int i = 0 ;
		MedicationLiteVoCollection coll = new MedicationLiteVoCollection();
		while (coll.size() < count && i < dos.size())
		{
			coll.add(MedicationLiteVoAssembler.create((Medication) dos.get(i)));
			i++;
		}
			
		return coll;
	}

	
	

	
	
}
