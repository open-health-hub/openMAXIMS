//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.clinical.configuration.domain.objects.HospitalAtNightCutOverPointsConfig;
import ims.clinical.domain.base.impl.BaseHospitalAtNightWorklistImpl;
import ims.clinical.vo.HospitalAtNightCutOverPointsConfigVo;
import ims.clinical.vo.HospitalAtNightPatientDetailListVo;
import ims.clinical.vo.HospitalAtNightPatientDetailListVoCollection;
import ims.clinical.vo.HospitalAtNightPatientDetailRefVo;
import ims.clinical.vo.HospitalAtNightWorklistSearchVo;
import ims.clinical.vo.domain.HospitalAtNightCutOverPointsConfigVoAssembler;
import ims.clinical.vo.domain.HospitalAtNightPatientDetailListVoAssembler;
import ims.clinical.vo.lookups.HospitalAtNightPatientStatus;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocSiteRefVo;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.domain.LocSiteLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;

import java.util.ArrayList;
import java.util.List;

public class HospitalAtNightWorklistImpl extends BaseHospitalAtNightWorklistImpl
{
	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.HospitalAtNightPatientDetailListVoCollection listHospitalAtNightPatientDetails(ims.clinical.vo.HospitalAtNightWorklistSearchVo criteria)
	{
		if(new HospitalAtNightWorklistSearchVo().equals(criteria))
			throw new DomainRuntimeException("At least one search criteria must be provided");
		
		StringBuilder hqlJoins = new StringBuilder("select pd from HospitalAtNightListandDates as h left join h.patientDetails as pd left join pd.currentStatus as cs ");
		StringBuilder hqlConditions = new StringBuilder(" where ( ");
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		String and = "";
		
		boolean patientJoin = false;
		boolean statusQuery = false;
		boolean dateCriteria = false;
		
		if(criteria.getDateFromIsNotNull())
		{
			dateCriteria = true;
			hqlConditions.append(and);
			hqlConditions.append("(h.shiftEndDate >= :DateFrom");
			paramNames.add("DateFrom");
			paramValues.add(criteria.getDateFrom().getJavaDate());
			and = " and ";
		}
		
		if (criteria.getDateToIsNotNull())
		{
			dateCriteria = true;
			hqlConditions.append(and);
			hqlConditions.append("h.shiftStartDate <= :DateTo");
			paramNames.add("DateTo");
			paramValues.add(criteria.getDateTo().getJavaDate());
			and = " and ";
		}
		
		if(dateCriteria)
		{
			hqlConditions.append(")");
		}
		
		if(criteria.getNewOrActiveIsNotNull() && criteria.getNewOrActive())
		{
			hqlConditions.append(and);
			hqlConditions.append("(cs.status.id = :New or cs.status.id = :Active");
			paramNames.add("New");
			paramValues.add(HospitalAtNightPatientStatus.NEW.getID());
			paramNames.add("Active");
			paramValues.add(HospitalAtNightPatientStatus.ACTIVE.getID());
			and = " and ";
			statusQuery = true;
		}
		
		if(criteria.getCompletedIsNotNull() && criteria.getCompleted())
		{
			if(statusQuery)
				hqlConditions.append(" or ");
			else	
				hqlConditions.append(and);
			
			hqlConditions.append("cs.status.id = :Complete");
			paramNames.add("Complete");
			paramValues.add(HospitalAtNightPatientStatus.REMOVE_FROM_LIST.getID());
			and = " and ";
		}
		
		if(statusQuery)
			hqlConditions.append(")");
		
		if(criteria.getHospitalIsNotNull())
		{
			hqlJoins.append(" left join h.hospital as hosp ");
			hqlConditions.append(and);
			hqlConditions.append("hosp.id = :HospitalId");
			paramNames.add("HospitalId");
			paramValues.add(criteria.getHospital().getID_Location());
			and = " and ";
		}
		
		if(criteria.getWardIsNotNull())
		{
			hqlJoins.append(" left join pd.wardWhenPlacedOnList as ward ");
			hqlConditions.append(and);
			hqlConditions.append("ward.id = :WardId");
			paramNames.add("WardId");
			paramValues.add(criteria.getWard().getID_Location());
			and = " and ";
		}
		
		if(criteria.getTypeOfRequestIsNotNull())
		{
			hqlConditions.append(and);
			hqlConditions.append("pd.typeOfRequest.id = :TypeOfRequest");
			paramNames.add("TypeOfRequest");
			paramValues.add(criteria.getTypeOfRequest().getID());
			and = " and ";
		}
		
		if(criteria.getSurnameIsNotNull())
		{
			if(!patientJoin)
			{
				hqlJoins.append(" left join pd.patient as pat ");
				patientJoin = true;
			}
			
			hqlConditions.append(and);
			hqlConditions.append("pat.name.upperSurname like :Surname");
			paramNames.add("Surname");
			paramValues.add(formatName(criteria.getSurname()));
			and = " and ";
		}
		
		if(criteria.getForenameIsNotNull())
		{
			if(!patientJoin)
			{
				hqlJoins.append(" left join pd.patient as pat ");
				patientJoin = true;
			}
			
			hqlConditions.append(and);
			hqlConditions.append("pat.name.upperForename like :Forename");
			paramNames.add("Forename");
			paramValues.add(formatName(criteria.getForename()));
			and = " and ";
		}
		
		hqlConditions.append(" ) order by pd.requestingDateTime asc");
		
		List<?> list = getDomainFactory().find(hqlJoins.append(hqlConditions.toString()).toString(), paramNames, paramValues);
		
		HospitalAtNightPatientDetailListVoCollection coll = HospitalAtNightPatientDetailListVoAssembler.createHospitalAtNightPatientDetailListVoCollectionFromHospitalAtNightPatientDetail(list);
		
		for(HospitalAtNightPatientDetailListVo hospitalAtNightRecord : coll)
		{
			if(hospitalAtNightRecord.getPatientIsNotNull() && hospitalAtNightRecord.getPatient().getAge() == null)
			{
				hospitalAtNightRecord.getPatient().calculateAge();
			}
		}
		
		return coll;
	}

	private Object formatName(String surname)
	{
		if(surname == null)
			return null;
		
		String strSearch = surname.toUpperCase().trim();
		strSearch = strSearch.replaceAll("[^a-zA-Z]", "");
			
		strSearch += '%';
			
		return strSearch;
	}

	public LocSiteLiteVoCollection listHospitals() 
	{
		String query = "select h from HospitalAtNightCutOverPointsConfig as hc left join hc.hospital as h order by upper(h.name) asc";
		List<?> list = getDomainFactory().find(query);
		
		return LocSiteLiteVoAssembler.createLocSiteLiteVoCollectionFromLocSite(list);
	}

	public LocationLiteVoCollection listWards(LocSiteRefVo hospital)
	{
		if(hospital == null || hospital.getID_Location()== null)
			throw new CodingRuntimeException("Can not list Wards for a null Hospital Id.");
		
		OrganisationAndLocation organisationAndLocation = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return organisationAndLocation.listActiveWardsForHospitalLite(hospital);
	}
	
	private Location getHospital(Location doLocation)
	{
		if(doLocation == null)
			return null;
		
		if(doLocation instanceof Location && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
			return doLocation;
	
		while(doLocation.getParentLocation() != null) 
		{
			doLocation = doLocation.getParentLocation();
			if(doLocation instanceof Location && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
				return doLocation;
		}
		
		return null;
	}

	public LocSiteLiteVo getCurrentHospital(ILocation location) 
	{
		if(location == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		Location currentHospital = getHospital((Location) factory.getDomainObject(Location.class, location.getID()));
		
		if(currentHospital instanceof LocSite)
			return LocSiteLiteVoAssembler.create((LocSite) currentHospital);
		
		return null;
	}

	public HospitalAtNightCutOverPointsConfigVo getCurrentHospitalAtNightConfig(ILocation currentHospital) 
	{
		if(currentHospital == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		List<?> config = factory.find("from HospitalAtNightCutOverPointsConfig as h where h.hospital.id = :HospitalId", new String[] {"HospitalId"}, new Object[] {currentHospital.getID()});
		
		if(config == null || config.size() == 0)
			return null;
		
		return HospitalAtNightCutOverPointsConfigVoAssembler.create((HospitalAtNightCutOverPointsConfig) config.get(0));
	}

	public Boolean isSameStatus(HospitalAtNightPatientDetailRefVo hospitalAtNightPatientDetailsId, HospitalAtNightPatientStatus status) 
	{
		if(hospitalAtNightPatientDetailsId == null || hospitalAtNightPatientDetailsId.getID_HospitalAtNightPatientDetail() == null)
			throw new CodingRuntimeException("Cannot check the status for a null HospitalAtNightPatientDetailRefVo.");
		
		DomainFactory factory = getDomainFactory();
		
		String query = "from HospitalAtNightPatientDetail as pd where pd.id = :HospId and pd.currentStatus.status.id = :Status";
		List<?> list = factory.find(query, new String[] {"HospId", "Status"}, new Object[] {hospitalAtNightPatientDetailsId.getID_HospitalAtNightPatientDetail(), status.getID()});
		
		if(list != null && list.size() > 0)
			return true;
		
		return false;
	}
}
