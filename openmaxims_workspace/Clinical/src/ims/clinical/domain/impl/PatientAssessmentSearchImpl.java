//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.71 build 3763.19232)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.assessment.instantiation.domain.objects.PatientAssessment;
import ims.assessment.vo.PatientAssessmentListVoCollection;
import ims.assessment.vo.PatientAssessmentsFilterVo;
import ims.assessment.vo.domain.PatientAssessmentListVoAssembler;
import ims.assessment.vo.domain.PatientAssessmentVoAssembler;
import ims.clinical.domain.base.impl.BasePatientAssessmentSearchImpl;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.domain.CareContextVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.Image;
import ims.framework.utils.ImagePath;
import ims.vo.LookupInstVo;
import ims.core.vo.lookups.UserDefinedAssessmentType;

public class PatientAssessmentSearchImpl extends BasePatientAssessmentSearchImpl
{
	private static final long serialVersionUID = 1L;

	public ims.assessment.vo.PatientAssessmentVo getPatientAssessment(Integer assessmentID)
	{
		DomainFactory factory = this.getDomainFactory();
		PatientAssessment pa = (PatientAssessment)factory.getDomainObject(PatientAssessment.class, assessmentID);
		return PatientAssessmentVoAssembler.create(pa);
	}

	public PatientAssessmentListVoCollection listPatientAssessments(PatientAssessmentsFilterVo filter) {
		if(filter == null)
			throw new CodingRuntimeException("Invalid filter");
			
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		StringBuilder sbJoins = new StringBuilder("select distinct p1_1 from PatientAssessment as p1_1 left join p1_1.assessmentData.graphic as graph left join p1_1.assessmentData.userAssessment as userA");
		StringBuilder sbQuery = new StringBuilder(" where p1_1.patient.id = :Patient_id "); 
				
				
		paramNames.add("Patient_id");
		paramValues.add(filter.getPatient().getID_Patient());
		

		if ( filter.getSpecialtyIsNotNull() )
		{
			sbJoins.append(" left join p1_1.episodeOfCare as e1_1 left join e1_1.specialty as l1_1");
			sbQuery.append("and l1_1.id = :Speciality_id ");
			paramNames.add("Speciality_id");
			paramValues.add(filter.getSpecialty().getID());
		}
		if (filter.getAuthoringHCPIdIsNotNull() )
		{
			sbQuery.append("and p1_1.authoringInformation.authoringHcp.id = :HCP_id ");
			paramNames.add("HCP_id");
			paramValues.add(filter.getAuthoringHCPId().getIMosHcpId());
			
		}
		if (filter.getDateFromIsNotNull() )
		{
			sbQuery.append("and p1_1.authoringInformation.authoringDateTime >= :dateFrom ");
			paramNames.add("dateFrom");
			paramValues.add(((Date) filter.getDateFrom().clone()).addDay(0).getDate());
			
		}
		if (filter.getDateToIsNotNull())
		{
			sbQuery.append("and p1_1.authoringInformation.authoringDateTime < :dateTo ");
			paramNames.add("dateTo");
			paramValues.add(((Date) filter.getDateTo().clone()).addDay(1).getDate());
		}
		if (filter.getNameIsNotNull())
		{
			if(filter.getType()!=null){
				if(filter.getType().equals(UserDefinedAssessmentType.GRAPHICAL) 
						|| (filter.getType().getParent()!=null && filter.getType().getParent().equals(UserDefinedAssessmentType.GRAPHICAL))
						|| (filter.getType().getParent()!=null && filter.getType().getParent().getParent()!=null
								&& filter.getType().getParent().getParent().equals(UserDefinedAssessmentType.GRAPHICAL)))
					sbQuery.append("and upper(graph.name) like :nameFilter ");
				else
					sbQuery.append("and upper(userA.name) like :nameFilter ");
			}
			else
				sbQuery.append("and ((upper(graph.name) like :nameFilter) or (upper(userA.name) like :nameFilter))"); //both
			paramNames.add("nameFilter");
			paramValues.add("%" + filter.getName().toUpperCase() + "%");
		}
		if (filter.getStatusIsNotNull())
		{
			sbQuery.append("and p1_1.status.id = :status ");
			paramNames.add("status");
			paramValues.add(filter.getStatus().getId());
		}
		if (filter.getTypeIsNotNull())
		{
			if(filter.getType().equals(UserDefinedAssessmentType.GRAPHICAL) 
					|| (filter.getType().getParent()!=null && filter.getType().getParent().equals(UserDefinedAssessmentType.GRAPHICAL))
					|| (filter.getType().getParent()!=null && filter.getType().getParent().getParent()!=null
							&& filter.getType().getParent().getParent().equals(UserDefinedAssessmentType.GRAPHICAL)))
				sbQuery.append("and graph.assessmentType.id = :type ");
			else
				sbQuery.append("and userA.assessmentType.id = :type ");
			paramNames.add("type");
			paramValues.add(filter.getType().getId());
		}
		sbQuery.append(" order by p1_1.authoringInformation.authoringDateTime asc ");
		
		sbJoins.append(sbQuery.toString());
		
		sbQuery = null;
		
		List<?> domainObjects = getDomainFactory().find(sbJoins.toString(),paramNames,paramValues);
		
		sbJoins = null;
		
		if ( domainObjects == null || domainObjects.size() == 0)
			return null;
		
		return PatientAssessmentListVoAssembler.createPatientAssessmentListVoCollectionFromPatientAssessment(domainObjects);
	}

	//WDEV-12009
	public LookupInstVo  getSpecialtyByEpisodeOfCare(EpisodeOfCareRefVo episodeOfCare) 
	{
		if(episodeOfCare == null || episodeOfCare.getID_EpisodeOfCare() == null)
			return null;
		
		DomainFactory factory = this.getDomainFactory();
		EpisodeOfCare ep = (EpisodeOfCare) factory.getDomainObject(EpisodeOfCare.class, episodeOfCare.getID_EpisodeOfCare());
		LookupInstVo specialty = ep != null ? createLookupinstanceVo(ep.getSpecialty()) : null;
		
		return specialty;
	}
	
	private LookupInstVo createLookupinstanceVo(LookupInstance element)
	{
		if (element == null)
			return null;
		Image img = null;
		Image regImage = element.getImage();
		if (regImage != null)
		{
			img = new ImagePath(regImage.getImageId(), regImage.getImagePath());
		}
		LookupInstVo valueObject = new LookupInstVo(element.getId(), element.getText(), element.isActive(), null, img, element.getColor(), element.getOrder());
		LookupInstance doParent = element.getParent();
		if (doParent != null)
		{
			LookupInstVo voParent = createLookupinstanceVo(doParent);
			valueObject.setParentInstance(voParent);
		}
		return valueObject;
	}

	public CareContextShortVo getCareContextShortVoByRefVo(CareContextRefVo refVoCareContext) 
	{
		//WDEV-12009
		if(refVoCareContext == null || refVoCareContext.getID_CareContext() == null)
			return null;
		
		DomainFactory factory = this.getDomainFactory();
		CareContext cc = (CareContext)factory.getDomainObject(CareContext.class, refVoCareContext.getID_CareContext());
		return CareContextVoAssembler.create(cc);
	}
}
