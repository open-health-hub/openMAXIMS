//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This 	code was generated by Dara Hickey using IMS Development Environment (version 1.37 build 2123.24201)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.MosAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.MosAdminImpl;
import ims.assessment.domain.PatientAssessment;
import ims.assessment.domain.PatientGraphicStages;
import ims.assessment.domain.UserAssessments;
import ims.assessment.domain.impl.PatientAssessmentImpl;
import ims.assessment.domain.impl.PatientGraphicStagesImpl;
import ims.assessment.domain.impl.UserAssessmentsImpl;
import ims.assessment.instantiation.vo.PatientUserDefinedObjectRefVo;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentListVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.PatientAssessmentVoCollection;
import ims.assessment.vo.PatientUserDefinedObjectListVo;
import ims.assessment.vo.PatientUserDefinedObjectListVoCollection;
import ims.assessment.vo.PatientUserDefinedObjectVo;
import ims.assessment.vo.UserAssessmentShortVoCollection;
import ims.assessment.vo.domain.PatientAssessmentVoAssembler;
import ims.assessment.vo.domain.PatientUserDefinedObjectListVoAssembler;
import ims.core.clinical.domain.objects.ClinicalNotesAdditional;
import ims.core.clinical.domain.objects.NotingDetails;
import ims.clinical.domain.objects.OutpatientNotesOutcome;
import ims.clinical.domain.objects.SoapNote;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.clinical.domain.objects.ClinicalNotes;
import ims.core.clinical.vo.ClinicalNotesRefVo;
import ims.clinical.vo.NotingDetailsVo;
import ims.clinical.vo.NotingDetailsVoCollection;
import ims.clinical.vo.OutpatientNotesOutcomeVo;
import ims.clinical.vo.OutpatientNotesOutcomeVoCollection;
import ims.clinical.vo.domain.NotingDetailsVoAssembler;
import ims.clinical.vo.domain.OutpatientNotesOutcomeVoAssembler;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.ClinicalNotesAdditionalVo;
import ims.core.vo.ClinicalNotesAdditionalVoCollection;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.ClinicalNotesVoCollection;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.SOAPVo;
import ims.core.vo.SOAPVoCollection;
import ims.core.vo.domain.CareContextListVoAssembler;
import ims.core.vo.domain.ClinicalContactShortVoAssembler;
import ims.core.vo.domain.ClinicalContactVoAssembler;
import ims.core.vo.domain.ClinicalNotesAdditionalVoAssembler;
import ims.core.vo.domain.ClinicalNotesShortVoAssembler;
import ims.core.vo.domain.ClinicalNotesVoAssembler;
import ims.core.vo.domain.SOAPVoAssembler;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.SourceOfNote;
import ims.core.vo.lookups.UserAssessmentCategory;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.core.vo.lookups.UserDefinedAssessmentTypeCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;

public class ClinicalNoteDrawingImpl extends DomainImpl implements ims.clinical.domain.ClinicalNoteDrawing, ims.domain.impl.Transactional
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	* getClinicalNotes
	*/
	public ims.core.vo.ClinicalNotesVo getClinicalNotes(Integer nId)
	{
		if(nId != null)
		{
			DomainFactory factory = getDomainFactory();
			ClinicalNotes doClinicalNotes = (ClinicalNotes)factory.getDomainObject(ClinicalNotes.class, nId);
			return ClinicalNotesVoAssembler.create(doClinicalNotes);
		}
		return null;
	}

	/**
	* saveClinicalNotes
	*/
	public ClinicalNotesVo saveClinicalNotes(ClinicalNotesVo voClinicalNotes, ClinicalContactShortVo voClinicalContactShort, ClinicalNotesAdditionalVo voClinicalNotesAdditional) throws DomainInterfaceException, StaleObjectException //WDEV-19027
	{
		if(voClinicalNotes.isValidated() == false)
			throw new DomainRuntimeException("ClinicalNotesVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("select p from ClinicalNotes p left join p.noteType as l1_1");
		if(voClinicalNotes.getID_ClinicalNotes()== null)
		{
			hql.append(" where (p.clinicalContact.id = " + voClinicalNotes.getClinicalContact().getID_ClinicalContact() + 
							"and l1_1.id <> -882 and l1_1 <> -883)"); 
							// clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883)) 
		}
		else
		{
			hql.append(" where (p.clinicalContact.id = " + voClinicalNotes.getClinicalContact().getID_ClinicalContact() + 
							"and l1_1.id <> -882 and l1_1 <> -883 and p.id <> " +  voClinicalNotes.getID_ClinicalNotes() +")");
							//clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883))
		}
		
		List list = (factory.find(hql.toString()));
		
		if(list.size() > 0)
		{
			
			ClinicalNotesVoCollection doClinNotes = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(list);
			if (doClinNotes.get(0).getSourceOfNote() != null &&
					!(doClinNotes.get(0).getSourceOfNote().getId() == (getDomLookup(SourceOfNote.CLINICALCLINICALNOTE).getId())))
			{
				return null;
			}
			else
			{
				throw new DomainRuntimeException("A record exists for this clinical contact, the screen will be refreshed");	
			}
		}
		
		ClinicalNotes doNote = ClinicalNotesVoAssembler.extractClinicalNotes(factory, voClinicalNotes);
		ClinicalContact doClinicalContact = getCurrentClinicalContact(voClinicalNotes.getClinicalContact());
		doNote.setClinicalContact(doClinicalContact);
		
		factory.save(doNote);
		
		if(voClinicalNotesAdditional != null)
		{
			ClinicalNotesAdditional doClinNotesAdditional = ClinicalNotesAdditionalVoAssembler.extractClinicalNotesAdditional(factory, voClinicalNotesAdditional);
			doClinNotesAdditional.setClinialNotes(doNote);
			factory.save(doClinNotesAdditional);
		}
		
		return ClinicalNotesVoAssembler.create(doNote);
	}

	private ClinicalContact getCurrentClinicalContact(ClinicalContactRefVo refVo) 
	{
		if (refVo == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		ClinicalContact domClinicalContact = (ClinicalContact)factory.getDomainObject(ClinicalContact.class, refVo.getID_ClinicalContact()); 
		
		return domClinicalContact;
	}
	/**
	* listHcp
	*/
	public ims.core.vo.HcpCollection listHcp(ims.core.vo.HcpFilter filter)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHCPs(filter);		
	}

	/**
	* getClinicalContact
	*/
	public ims.core.vo.ClinicalContactVo getClinicalContact(Integer nId)
	{
		if(nId != null)
		{
			DomainFactory factory = getDomainFactory();
			ClinicalContact doClinicalContact = (ClinicalContact) factory.getDomainObject(ClinicalContact.class, nId);
			return ClinicalContactVoAssembler.create(doClinicalContact);
		}
		return null;
	}

	/**
	* getClinicalNotesAdditional
	*/
	public ims.core.vo.ClinicalNotesAdditionalVo getClinicalNotesAdditional(Integer clinicalNotesId)
	{
		if(clinicalNotesId != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from ClinicalNotesAdditional noteadd where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " noteadd.clinialNotes.id = :clinicNoteId");
 			markers.add("clinicNoteId");
			values.add(clinicalNotesId);
			andStr = " and ";	

			List listAdditional = factory.find(hql.toString(), markers,values);
			if(listAdditional != null && listAdditional.size() > 0)
			{ 
				ClinicalNotesAdditionalVoCollection voColl = ClinicalNotesAdditionalVoAssembler.createClinicalNotesAdditionalVoCollectionFromClinicalNotesAdditional(listAdditional);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}


	public void saveSOAPsVo(SOAPVo voSOAP) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException
	{
		// Ensure the value object has been validated
		if (!voSOAP.isValidated())
			throw new DomainRuntimeException("SOAP has not been validated");
		
		DomainFactory factory = getDomainFactory();
		SoapNote doSOAP = SOAPVoAssembler.extractSoapNote(factory, voSOAP);	
		CareContext doCareContext = getCurrentCareContext(voSOAP.getCareContext()); //WDEV-19027
		doSOAP.setCareContext(doCareContext);//WDEV-19027
		
		factory.save(doSOAP);
	}

	public SOAPVo getSOAPsVo(ClinicalNotesRefVo clinnoteRefVo)
	{
		if(clinnoteRefVo != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from SoapNote soapnote where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " soapnote.clinicalNote.id = :clinicNoteId");
 			markers.add("clinicNoteId");
			values.add(clinnoteRefVo.getID_ClinicalNotes());
			andStr = " and ";	

			List listSoap = factory.find(hql.toString(), markers,values);
			if(listSoap != null && listSoap.size() > 0)
			{ 
				SOAPVoCollection voColl = SOAPVoAssembler.createSOAPVoCollectionFromSoapNote(listSoap);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}

	public ClinicalNotesVo getClinicalNotesForContact(ClinicalContactRefVo clincontactRefId)
	{
		if(clincontactRefId == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Cannot get ClinicalNotesVo for null ClinicalContactRefVo");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from ClinicalNotes clinnote where "); 
		String andStr = " ";
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
	
		hql.append(andStr + " clinnote.clinicalContact.id = :clinicContactId");
		markers.add("clinicContactId");
		values.add(clincontactRefId.getID_ClinicalContact());
		andStr = " and ";	

		hql.append(andStr);
		hql.append(" clinnote.noteType = :noteType");
		markers.add("noteType");
		values.add(getDomLookup(ims.core.vo.lookups.ClinicalNoteType.CLINICALNOTE));
		hql.append(" order by clinnote.systemInformation.creationDateTime desc");
		List listNotes = factory.find(hql.toString(), markers,values);
		if(listNotes != null && listNotes.size() > 0)
		{ 
			ClinicalNotesVoCollection voColl = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(listNotes);
			if(voColl != null)
			{
				int size = voColl.size();
				if(size >= 1)
					return voColl.get(0);
			}
		}

		return null;
	}

	public ClinicalNotesVo saveClinicalNotesOnly(ClinicalNotesVo voClinicaNotes) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException
	{
		// Ensure the value object has been validated
		if (!voClinicaNotes.isValidated())
			throw new DomainRuntimeException("Clinical Notes has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("select p from ClinicalNotes p left join p.noteType as l1_1");
		if(voClinicaNotes.getID_ClinicalNotes()== null)
		{
			hql.append(" where (p.clinicalContact.id = " + voClinicaNotes.getClinicalContact().getID_ClinicalContact() + 
							"and l1_1.id <> -882 and l1_1 <> -883)"); 
							// clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883)) 
		}
		else
		{
			hql.append(" where (p.clinicalContact.id = " + voClinicaNotes.getClinicalContact().getID_ClinicalContact() + 
							"and l1_1.id <> -882 and l1_1 <> -883 and p.id <> " +  voClinicaNotes.getID_ClinicalNotes() +")");
							//clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883))
		}
		
		List list = (factory.find(hql.toString()));
		ClinicalNotesVoCollection listClinNotes = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(list);
		
		if(listClinNotes != null && listClinNotes.size() > 0)
		{
			if (listClinNotes.get(0).getSourceOfNote() != null &&
					!(listClinNotes.get(0).getSourceOfNote().getId() == (getDomLookup(SourceOfNote.CLINICALCLINICALNOTE).getId())) &&
							!(listClinNotes.get(0).getSourceOfNote().getId() == (getDomLookup(SourceOfNote.THERAPYSOAPNOTE).getId())))//WDEV-9793
			{
				return null;
			}
			else
			{
				throw new DomainRuntimeException("A record exists for this clinical contact, the screen will be refreshed");	
			}
		}
		
		ClinicalNotes doClinNotes = ClinicalNotesVoAssembler.extractClinicalNotes(factory, voClinicaNotes);
		ClinicalContact doClinicalContact = getCurrentClinicalContact(voClinicaNotes.getClinicalContact());
		doClinNotes.setClinicalContact(doClinicalContact);
		
		factory.save(doClinNotes);

		return ClinicalNotesVoAssembler.create(doClinNotes);
	}

	public MemberOfStaffVo getMemberOfStaff(MemberOfStaffShortVo mos)
	{
		MosAdmin mosAdmin = (MosAdmin)getDomainImpl(MosAdminImpl.class);
		return mosAdmin.getMemberOfStaff(mos);
	}

	public ClinicalNotesVo getClinicalNotesForCareContext(CareContextRefVo careContextRefVo) 
	{
		if(careContextRefVo != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from ClinicalNotes clinnote where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " clinnote.careContext.id = :careContextId");
 			markers.add("careContextId");
			values.add(careContextRefVo.getID_CareContext());
			andStr = " and ";	

			List listNotes = factory.find(hql.toString(), markers,values);
			if(listNotes != null && listNotes.size() > 0)
			{ 
				ClinicalNotesVoCollection voColl = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(listNotes);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}

	public HcpLiteVoCollection listMedics(String hcpName)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHcpLiteByNameAndDisciplineType(hcpName, HcpDisType.MEDICAL);
	}

	public NotingDetailsVo getNotingDetails(ClinicalContactShortVo clinicalContactRefVo) 
	{
		if(clinicalContactRefVo == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Cannot get NotingDetailsVo for null ClinicalContactRefVo");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from NotingDetails nd where "); 
		String andStr = " ";
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
	
		hql.append(andStr + " nd.clinicalContact.id = :clinicContactId");
		markers.add("clinicContactId");
		values.add(clinicalContactRefVo.getID_ClinicalContact());
		andStr = " and ";	

		List listNotes = factory.find(hql.toString(), markers,values);
		if(listNotes != null && listNotes.size() > 0)
		{ 
			NotingDetailsVoCollection voColl = NotingDetailsVoAssembler.createNotingDetailsVoCollectionFromNotingDetails(listNotes);
			if(voColl != null)
			{
				int size = voColl.size();
				if(size == 1)
					return voColl.get(0);
				else if(size > 1)
					throw new RuntimeException("More than one NotingDetailsVo exists for the current clinical contact");
			}
		}

		return null;
	}

	public NotingDetailsVo saveNotingDetails(NotingDetailsVo notingDetailVo) throws StaleObjectException 
	{
		// Ensure the value object has been validated
		if (!notingDetailVo.isValidated())
			throw new DomainRuntimeException("Noting Details has not been validated");
		
		DomainFactory factory = getDomainFactory();
		NotingDetails doNoting = NotingDetailsVoAssembler.extractNotingDetails(factory, notingDetailVo);
		CareContext doCarecontext = getCurrentCareContext(notingDetailVo.getCareContext());//WDEV-19027
		doNoting.setCareContext(doCarecontext);//WDEV-19027
		
		factory.save(doNoting);

		return NotingDetailsVoAssembler.create(doNoting);
	}

	public UserAssessmentShortVoCollection listAssessments(String name, UserAssessmentCategory category, UserDefinedAssessmentTypeCollection assessmentType, PreActiveActiveInactiveStatus status) 
	{
		UserAssessments impl = (UserAssessments)getDomainImpl(UserAssessmentsImpl.class);
		return impl.listAssessments(name,category,assessmentType,status);
	}

	public PatientAssessmentListVo savePatientAssessmentList(PatientAssessmentListVo voPatientAssessmentList) throws StaleObjectException 
	{
		PatientAssessment impl = (PatientAssessment)getDomainImpl(PatientAssessmentImpl.class);
		return impl.savePatientAssessmentList(voPatientAssessmentList);
	}

	public PatientUserDefinedObjectListVoCollection listPatientUserDefinedObjects(ClinicalContactRefVo clinicalContactRefVo) 
	{
		if(clinicalContactRefVo == null || clinicalContactRefVo.getID_ClinicalContact() == null)
			throw new RuntimeException("Cannot list PatientUserDefinedObjectList for null ClinicalContactRefVo");
	
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" select distinct pudo from PatientUserDefinedObject pudo left join pudo.patientAssessments as patAss");
		ArrayList<Serializable> values  = new ArrayList<Serializable>();
		ArrayList<String> params  = new ArrayList<String>();
		hql.append(" where patAss.clinicalContact.id = :ccId");
		params.add("ccId");
		values.add(clinicalContactRefVo.getID_ClinicalContact());
		List list = factory.find(hql.toString(), params, values);
		return PatientUserDefinedObjectListVoAssembler.createPatientUserDefinedObjectListVoCollectionFromPatientUserDefinedObject(list).sort();
	}

	public PatientUserDefinedObjectVo savePatientUserDefinedObject(PatientUserDefinedObjectVo voPatientUserDefinedObject) throws StaleObjectException 
	{
		PatientAssessment impl = (PatientAssessment)getDomainImpl(PatientAssessmentImpl.class);
		return impl.savePatientUserDefinedObject(voPatientUserDefinedObject);
	}

	public PatientUserDefinedObjectListVo getPatientUserDefinedObjectList(PatientUserDefinedObjectRefVo patientUserDefinedObjectRefVo) 
	{
		PatientAssessment impl = (PatientAssessment)getDomainImpl(PatientAssessmentImpl.class);
		return impl.getPatientUserDefinedObjectList(patientUserDefinedObjectRefVo);
	}

	public PatientUserDefinedObjectVo getPatientUserDefinedObject(PatientUserDefinedObjectRefVo patientUserDefinedObjectRefVo) 
	{
		PatientAssessment impl = (PatientAssessment)getDomainImpl(PatientAssessmentImpl.class);
		return impl.getPatientUserDefinedObject(patientUserDefinedObjectRefVo);
	}

	public PatientAssessmentVo savePatientAssessment(PatientAssessmentVo patientAssessment) throws StaleObjectException 
	{
		PatientGraphicStages impl = (PatientGraphicStages)getDomainImpl(PatientGraphicStagesImpl.class);
		return impl.savePatientAssessment(patientAssessment);
	}

	public PatientAssessmentVo getPatientAssessment(ClinicalContactRefVo clinicalContactRefVo) 
	{
		if(clinicalContactRefVo == null)
			throw new RuntimeException("Cannot get PatientAssessmentVo for null ClinicalContactRefVo");
		
		//WDEV-2432
		StringBuffer query = new StringBuffer("from PatientAssessment as p1_1 where");
		query.append(" p1_1.clinicalContact.id = :idCC");
		query.append(" and p1_1.assessmentData.graphic.assessmentType = :assessmentType");
		
		ArrayList<String> params = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		params.add("idCC");
		params.add("assessmentType");
		
		values.add(clinicalContactRefVo.getID_ClinicalContact());
		values.add(getDomLookup(UserDefinedAssessmentType.MEDICALNOTING));
	
		List list = getDomainFactory().find(query.toString(), params, values);
		PatientAssessmentVoCollection voColl = PatientAssessmentVoAssembler.createPatientAssessmentVoCollectionFromPatientAssessment(list);
		if(voColl != null && voColl.size() > 0)
			return voColl.get(0);
			
		return null;	
	}

	public GraphicAssessmentVo getActiveGraphicAssessment(UserDefinedAssessmentType type)
	{
		PatientGraphicStages impl = (PatientGraphicStages)getDomainImpl(PatientGraphicStagesImpl.class);
		return impl.getActiveGraphicAssessment(type);
	}

	public OutpatientNotesOutcomeVo getOutpatientNotesForClinicalContact(ClinicalContactRefVo clinicalContact) 
	{
		if(clinicalContact == null)
			throw new CodingRuntimeException("null clinical contact passed to getOutpatientNotesForClinicalContact() !");
		
		DomainFactory factory = getDomainFactory();
		
		List list = factory.find("from OutpatientNotesOutcome as o1_1 where	o1_1.clinicalContact.id = :CCID order by o1_1.id asc ",
				new String[] {"CCID"}, 
				new Object[] {clinicalContact.getID_ClinicalContact()});
		
		return list.size() == 0 ? null : OutpatientNotesOutcomeVoAssembler.create((OutpatientNotesOutcome)list.get(0));
	}

	public OutpatientNotesOutcomeVo saveOutpatientNotesOutcome(OutpatientNotesOutcomeVo record) throws StaleObjectException 
	{
		if(record == null)
			throw new CodingRuntimeException("null record passed to saveClinicalCorrespondence() !");

		if(!record.isValidated())
			throw new CodingRuntimeException("OutpatientNotesOutcome not validated !");

		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select p from ClinicalNotes p left join p.noteType as l1_1");
		if(record.getClinicalNote().getClinicalNote().getID_ClinicalNotes()== null)
		{
			hql.append(" where (p.clinicalContact.id = " + record.getClinicalNote().getClinicalNote().getClinicalContact().getID_ClinicalContact() + 
							"and l1_1.id <> -882 and l1_1 <> -883)"); 
							// clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883)) 
		}
		else
		{
			hql.append(" where (p.clinicalContact.id = " + record.getClinicalNote().getClinicalNote().getClinicalContact().getID_ClinicalContact() + 
							"and l1_1.id <> -882 and l1_1 <> -883 and p.id <> " +  record.getClinicalNote().getClinicalNote().getID_ClinicalNotes() +")");
							//clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883))
		}
		
		List list = (factory.find(hql.toString()));
		
		if(list.size() > 0)
		{
			
			ClinicalNotesVoCollection doClinNotes = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(list);
			if (doClinNotes.get(0).getSourceOfNote() != null &&
					!(doClinNotes.get(0).getSourceOfNote().getId() == (getDomLookup(SourceOfNote.CLINICALCLINICALNOTE).getId())))
			{
				return null;
			}
			else
			{
				throw new DomainRuntimeException("A record exists for this clinical contact, the screen will be refreshed");	
			}
		}
		
		OutpatientNotesOutcome boOutpatientNotesOutcome = OutpatientNotesOutcomeVoAssembler.extractOutpatientNotesOutcome(factory, record);
		CareContext doCareContext = getCurrentCareContext(record.getCareContext());//WDEV-19027
		boOutpatientNotesOutcome.setCareContext(doCareContext);//WDEV-19027
		
		factory.save(boOutpatientNotesOutcome);
		
		return OutpatientNotesOutcomeVoAssembler.create(boOutpatientNotesOutcome);
	}

	public ClinicalContactShortVo saveClinicalContact(ClinicalContactShortVo clinicalContactVo) throws StaleObjectException 
	{
		if(clinicalContactVo != null &&
				clinicalContactVo.isValidated() == false)
			throw new DomainRuntimeException("clinicalContactVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		ClinicalContact doClinContact;
		
		doClinContact = ClinicalContactShortVoAssembler.extractClinicalContact(factory, clinicalContactVo);
		factory.save(doClinContact);
		
		return ClinicalContactShortVoAssembler.create(doClinContact);
	}

	public OutpatientNotesOutcomeVo getOutpatientNotesOutcomeForClinicalNote(ClinicalNotesRefVo clinnoteRefVo) 
	{
		DomainFactory factory = getDomainFactory();
		if(clinnoteRefVo != null)
		{
			StringBuffer hql = new StringBuffer(" from OutpatientNotesOutcome opnote where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " opnote.clinicalNote.clinicalNote.id = :refid");
 			markers.add("refid");
			values.add(clinnoteRefVo.getID_ClinicalNotes());
			andStr = " and ";	

			List listNotes = factory.find(hql.toString(), markers,values);
			if(listNotes != null && listNotes.size() > 0)
			{ 
				OutpatientNotesOutcomeVoCollection voColl = OutpatientNotesOutcomeVoAssembler.createOutpatientNotesOutcomeVoCollectionFromOutpatientNotesOutcome(listNotes);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		
		return null;
	}
	
	public ims.core.vo.CareContextListVo getCareContextShort(Integer id)
	{
		if(id != null)
		{
			DomainFactory factory = getDomainFactory();
			CareContext doCareContext = (CareContext)factory.getDomainObject(CareContext.class, id);
			return CareContextListVoAssembler.create(doCareContext);
		}
		return null;
	}
	
	public ims.core.vo.ClinicalNotesShortVo getClinicalNotesShort(Integer id)
	{
		if(id != null)
		{
			DomainFactory factory = getDomainFactory();
			ClinicalNotes doCareContext = (ClinicalNotes)factory.getDomainObject(ClinicalNotes.class, id);
			return ClinicalNotesShortVoAssembler.create(doCareContext);
		}
		return null;
	}

	public NotingDetailsVo getClinicalNoting(ClinicalContactRefVo clinicalContactRef)
	{
		if(clinicalContactRef == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Cannot get ClinicalNotingVo for null ClinicalContactRefVo");
		
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from NotingDetails noting where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " noting.clinicalContact.id = :clinicContactId");
			markers.add("clinicContactId");
			values.add(clinicalContactRef.getID_ClinicalContact());
			andStr = " and ";	
		
			List listNotes = factory.find(hql.toString(), markers,values);
			if(listNotes != null && listNotes.size() > 0)
			{ 
				NotingDetailsVoCollection voColl = NotingDetailsVoAssembler.createNotingDetailsVoCollectionFromNotingDetails(listNotes);
				if(voColl != null)
				{
					int size = voColl.size();
					if(size == 1)
						return voColl.get(0);
					else if(size > 1)
						throw new RuntimeException("More than one NotingDetails exists for the current clinical contact");
				}
			}

			return null;
	}

	//WDEV-19027
	public NotingDetailsVo getNotingDetailsForCareContext(CareContextRefVo careContextRef)
	{
		if(careContextRef == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Cannot get NotingDetailsVo for null CareContext");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from NotingDetails nd where "); 
		String andStr = " ";
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
	
		hql.append(andStr + " nd.careContext.id = :careContextId");
		markers.add("careContextId");
		values.add(careContextRef.getID_CareContext());
		andStr = " and ";	

		List listNotes = factory.find(hql.toString(), markers,values);
		if(listNotes != null && listNotes.size() > 0)
		{ 
			NotingDetailsVoCollection voColl = NotingDetailsVoAssembler.createNotingDetailsVoCollectionFromNotingDetails(listNotes);
			if(voColl != null)
			{
				int size = voColl.size();
				if(size == 1)
					return voColl.get(0);
				else if(size > 1)
					throw new RuntimeException("More than one NotingDetailsVo exists for the current clinical contact");
			}
		}

		return null;
	}

	//WDEV-19027
	public PatientUserDefinedObjectListVoCollection listPatientUserDefinedObjectsForCareContext(CareContextRefVo careContextRef)
	{
		if(careContextRef == null || careContextRef.getID_CareContext() == null)
			throw new RuntimeException("Cannot list PatientUserDefinedObjectList for null CareContext");
	
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" select distinct pudo from PatientUserDefinedObject pudo left join pudo.patientAssessments as patAss");
		ArrayList<Serializable> values  = new ArrayList<Serializable>();
		ArrayList<String> params  = new ArrayList<String>();
		hql.append(" where patAss.careContext.id = :ccId");
		params.add("ccId");
		values.add(careContextRef.getID_CareContext());
		List list = factory.find(hql.toString(), params, values);
		return PatientUserDefinedObjectListVoAssembler.createPatientUserDefinedObjectListVoCollectionFromPatientUserDefinedObject(list).sort();
	}

	//WDEV-19027
	public PatientAssessmentVo getPatientAssessmentForCareContext(CareContextRefVo careContextRef)
	{
		if(careContextRef == null)
			throw new RuntimeException("Cannot get PatientAssessmentVo for null CareContext");

		StringBuffer query = new StringBuffer("from PatientAssessment as p1_1 where");
		query.append(" p1_1.careContext.id = :idCC");
		query.append(" and p1_1.assessmentData.graphic.assessmentType = :assessmentType");
		
		ArrayList<String> params = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		params.add("idCC");
		params.add("assessmentType");
		
		values.add(careContextRef.getID_CareContext());
		values.add(getDomLookup(UserDefinedAssessmentType.MEDICALNOTING));
	
		List list = getDomainFactory().find(query.toString(), params, values);
		PatientAssessmentVoCollection voColl = PatientAssessmentVoAssembler.createPatientAssessmentVoCollectionFromPatientAssessment(list);
		if(voColl != null && voColl.size() > 0)
			return voColl.get(0);
			
		return null;
	}

	//WDEV-19027
	public OutpatientNotesOutcomeVo getOutpatientNotesForCareContext(CareContextRefVo careContextRef)
	{
		if(careContextRef == null)
			throw new CodingRuntimeException("null clinical contact passed to getOutpatientNotesForClinicalContact() !");
		
		DomainFactory factory = getDomainFactory();
		
		List list = factory.find("from OutpatientNotesOutcome as o1_1 where	o1_1.careContext.id = :CCID order by o1_1.id asc ",
				new String[] {"CCID"}, 
				new Object[] {careContextRef.getID_CareContext()});
		
		return list.size() == 0 ? null : OutpatientNotesOutcomeVoAssembler.create((OutpatientNotesOutcome)list.get(0));
	}

	//WDEV-19027
	public ClinicalNotesVo saveClinicalNotesForCareContext(ClinicalNotesVo voClinicalNotes, CareContextRefVo voCareContext, ClinicalNotesAdditionalVo voClinicalNotesAdditional) throws DomainInterfaceException, StaleObjectException
	{
		if(voClinicalNotes.isValidated() == false)
			throw new DomainRuntimeException("ClinicalNotesVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("select p from ClinicalNotes p left join p.noteType as l1_1");
		if(voClinicalNotes.getID_ClinicalNotes()== null)
		{
			hql.append(" where (p.careContext.id = " + voClinicalNotes.getCareContext().getID_CareContext() +   //WDEV-19027
							"and l1_1.id <> -882 and l1_1 <> -883)"); 
							// clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883)) 
		}
		else
		{
			hql.append(" where (p.careContext.id = " + voClinicalNotes.getCareContext().getID_CareContext() +   //WDEV-19027
							"and l1_1.id <> -882 and l1_1 <> -883 and p.id <> " +  voClinicalNotes.getID_ClinicalNotes() +")");
							//clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883))
		}
		
		List list = (factory.find(hql.toString()));
		
		if(list.size() > 0)
		{
			
			ClinicalNotesVoCollection doClinNotes = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(list);
			if (doClinNotes.get(0).getSourceOfNote() != null &&
					!(doClinNotes.get(0).getSourceOfNote().getId() == (getDomLookup(SourceOfNote.CLINICALCLINICALNOTE).getId())))
			{
				return null;
			}
			else
			{
				throw new DomainRuntimeException("A record exists for this Care Context, the screen will be refreshed");	
			}
		}
		
		ClinicalNotes doNote = ClinicalNotesVoAssembler.extractClinicalNotes(factory, voClinicalNotes);
		CareContext doCareContext = getCurrentCareContext(voClinicalNotes.getCareContext()); //WDEV-19027
		doNote.setCareContext(doCareContext);//WDEV-19027
		
		factory.save(doNote);
		
		if(voClinicalNotesAdditional != null)
		{
			ClinicalNotesAdditional doClinNotesAdditional = ClinicalNotesAdditionalVoAssembler.extractClinicalNotesAdditional(factory, voClinicalNotesAdditional);
			doClinNotesAdditional.setClinialNotes(doNote);
			factory.save(doClinNotesAdditional);
		}
		
		return ClinicalNotesVoAssembler.create(doNote);
	}

	//WDEV-19027
	private CareContext getCurrentCareContext(CareContextRefVo careContextRefVo)   
	{
		if (careContextRefVo == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		CareContext domCareContext = (CareContext)factory.getDomainObject(CareContext.class, careContextRefVo.getID_CareContext());  //WDEV-19027  
		
		return domCareContext;
	}

	//WDEV-19027
	public ClinicalNotesVo saveClinicalNotesOnlyForCareContext(ClinicalNotesVo voClinicaNotes) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException
	{
		// Ensure the value object has been validated
		if (!voClinicaNotes.isValidated())
			throw new DomainRuntimeException("Clinical Notes has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("select p from ClinicalNotes p left join p.noteType as l1_1");
		if(voClinicaNotes.getID_ClinicalNotes()== null)
		{
			hql.append(" where (p.careContext.id = " + voClinicaNotes.getCareContext().getID_CareContext() + 
							"and l1_1.id <> -882 and l1_1 <> -883)"); 
							// clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883)) 
		}
		else
		{
			hql.append(" where (p.careContext.id = " + voClinicaNotes.getCareContext().getID_CareContext() + 
							"and l1_1.id <> -882 and l1_1 <> -883 and p.id <> " +  voClinicaNotes.getID_ClinicalNotes() +")");
							//clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883))
		}
		
		List list = (factory.find(hql.toString()));
		ClinicalNotesVoCollection listClinNotes = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(list);
		
		if(listClinNotes != null && listClinNotes.size() > 0)
		{
			if (listClinNotes.get(0).getSourceOfNote() != null &&
					!(listClinNotes.get(0).getSourceOfNote().getId() == (getDomLookup(SourceOfNote.CLINICALCLINICALNOTE).getId())) &&
							!(listClinNotes.get(0).getSourceOfNote().getId() == (getDomLookup(SourceOfNote.THERAPYSOAPNOTE).getId())))//WDEV-9793
			{
				return null;
			}
			else
			{
				throw new DomainRuntimeException("A record exists for this Care Context, the screen will be refreshed");	
			}
		}
		
		ClinicalNotes doClinNotes = ClinicalNotesVoAssembler.extractClinicalNotes(factory, voClinicaNotes);
		CareContext doCareContext = getCurrentCareContext(voClinicaNotes.getCareContext()); //WDEV-19027
		doClinNotes.setCareContext(doCareContext);//WDEV-19027
		
		factory.save(doClinNotes);

		return ClinicalNotesVoAssembler.create(doClinNotes);
	}

	public OutpatientNotesOutcomeVo saveOutpatientNotesOutcomePerCareContext(OutpatientNotesOutcomeVo record) throws StaleObjectException
	{
		if(record == null)
			throw new CodingRuntimeException("null record passed to saveClinicalCorrespondence() !");

		if(!record.isValidated())
			throw new CodingRuntimeException("OutpatientNotesOutcome not validated !");

		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select p from ClinicalNotes p left join p.noteType as l1_1");
		if(record.getClinicalNote().getClinicalNote().getID_ClinicalNotes()== null)
		{
			hql.append(" where (p.careContext.id = " + record.getClinicalNote().getClinicalNote().getCareContext().getID_CareContext() + 
							"and l1_1.id <> -882 and l1_1 <> -883)"); 
							// clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883)) 
		}
		else
		{
			hql.append(" where (p.careContext.id = " + record.getClinicalNote().getClinicalNote().getCareContext().getID_CareContext() + 
							"and l1_1.id <> -882 and l1_1 <> -883 and p.id <> " +  record.getClinicalNote().getClinicalNote().getID_ClinicalNotes() +")");
							//clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883))
		}
		
		List list = (factory.find(hql.toString()));
		
		if(list.size() > 0)
		{
			
			ClinicalNotesVoCollection doClinNotes = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(list);
			if (doClinNotes.get(0).getSourceOfNote() != null &&
					!(doClinNotes.get(0).getSourceOfNote().getId() == (getDomLookup(SourceOfNote.CLINICALCLINICALNOTE).getId())))
			{
				return null;
			}
			else
			{
				throw new DomainRuntimeException("A record exists for this Care context, the screen will be refreshed");	
			}
		}
		
		OutpatientNotesOutcome boOutpatientNotesOutcome = OutpatientNotesOutcomeVoAssembler.extractOutpatientNotesOutcome(factory, record);
		CareContext doCareContext = getCurrentCareContext(record.getCareContext());//WDEV-19027
		boOutpatientNotesOutcome.setCareContext(doCareContext);//WDEV-19027
		
		factory.save(boOutpatientNotesOutcome);
		
		return OutpatientNotesOutcomeVoAssembler.create(boOutpatientNotesOutcome);
	}
}
