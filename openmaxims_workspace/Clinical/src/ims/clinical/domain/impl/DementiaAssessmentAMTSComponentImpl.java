//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4696.13908)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.clinical.domain.DementiaAssessmentForm;
import ims.clinical.domain.base.impl.BaseDementiaAssessmentAMTSComponentImpl;
import ims.clinical.vo.DementiaVo;
import ims.clinical.vo.domain.DementiaVoAssembler;
import ims.clinicaladmin.vo.domain.DementiaTermConfigVoAssembler;
import ims.core.admin.domain.objects.DementiaTermConfig;
import ims.core.clinical.domain.objects.Dementia;
import ims.core.clinical.vo.DementiaRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class DementiaAssessmentAMTSComponentImpl extends BaseDementiaAssessmentAMTSComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinicaladmin.vo.DementiaTermConfigVo getHintByLookupID(ims.clinicaladmin.vo.lookups.DementiaTermConfig volookup)
	{
		if( volookup == null)
			throw new CodingRuntimeException("DementiaTermConfig is null");

		DomainFactory factory = getDomainFactory();
		 

		
		String hql = " from DementiaTermConfig as d1_1 	where ( d1_1.field.id =:fld )"; 

		List list = factory.find(hql,new String[]{"fld"}, new Object[]{volookup.getID()});

		if (list != null && list.size() > 0)
		{
			DementiaTermConfig doDementiaTermConfig = (DementiaTermConfig)list.get(0);
			return DementiaTermConfigVoAssembler.create(doDementiaTermConfig);
		}
		return null;
	}

	public DementiaVo saveDementia(DementiaVo voDementia) throws DomainInterfaceException, StaleObjectException
	{
		if(voDementia == null)
			throw new CodingRuntimeException("DementiaVo is null");
		
		if(!voDementia.isValidated())
			throw new CodingRuntimeException("DementiaVo Value Object has not been validated");

		DomainFactory factory = getDomainFactory();
		Dementia doD = DementiaVoAssembler.extractDementia(factory, voDementia);

		factory.save(doD);
		return DementiaVoAssembler.create(doD);
	}

	public DementiaVo getDementia(DementiaRefVo dementiaRef)
	{
		DementiaAssessmentForm demDO = (DementiaAssessmentForm)getDomainImpl(DementiaAssessmentFormImpl.class);
		return demDO.getDementia(dementiaRef);
	}

}
