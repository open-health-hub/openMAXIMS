//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.70 build 3531.24156)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import ims.RefMan.domain.objects.SuitableForSurgeryAssessment;
import ims.RefMan.vo.SuitableForSurgeryAssessmentLiteVo;
import ims.RefMan.vo.domain.SuitableForSurgeryAssessmentLiteVoAssembler;
import ims.clinical.domain.Procedures;
import ims.clinical.domain.base.impl.BaseCataractIntraOperativeCareRecordImpl;
import ims.clinical.vo.IntraOperativeCareRecordVo;
import ims.clinical.vo.domain.IntraOperativeCareRecordVoAssembler;
import ims.clinicaladmin.vo.MedicationHotlistVo;
import ims.clinicaladmin.vo.MedicationHotlistVoCollection;
import ims.clinicaladmin.vo.domain.MedicationHotlistVoAssembler;
import ims.core.clinical.domain.objects.IntraOperativeCareRecord;
import ims.core.clinical.domain.objects.PatientProcedure;
import ims.core.clinical.vo.IntraOperativeCareRecordRefVo;
import ims.core.domain.ADT;
import ims.core.domain.impl.ADTImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.MedicationLiteVoCollection;
import ims.core.vo.PatientProcedureLiteVo;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.LocShortVoAssembler;
import ims.core.vo.domain.MedicationLiteVoAssembler;
import ims.core.vo.domain.PatientProcedureLiteVoAssembler;
import ims.core.vo.domain.PatientProcedureVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.hibernate3.IMSCriteria;
import ims.framework.exceptions.CodingRuntimeException;

public class CataractIntraOperativeCareRecordImpl extends BaseCataractIntraOperativeCareRecordImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.IntraOperativeCareRecordVo getIntraOperativeCareRecord(ims.core.clinical.vo.IntraOperativeDetailsRefVo intraOperativeDetails)
	{
		if (intraOperativeDetails == null || !intraOperativeDetails.getID_IntraOperativeDetailsIsNotNull())
			throw new CodingRuntimeException("intraOperativeDetails is null or id not provided in method getIntraOperativeCareRecord");
		
		DomainFactory factory = getDomainFactory();
		
		IMSCriteria criteria = new IMSCriteria(IntraOperativeCareRecord.class, factory);	
		criteria.equal("this.intraOperativeDetails.id", intraOperativeDetails.getID_IntraOperativeDetails());
		
		List<IntraOperativeCareRecord> listIntraOperativeCareRecord = criteria.find();
		return listIntraOperativeCareRecord.size() > 0 ? IntraOperativeCareRecordVoAssembler.create((IntraOperativeCareRecord)listIntraOperativeCareRecord.get(0)) : null;
		
	}

	public ims.core.vo.PatientProcedureLiteVo getProcedureFromSuitableForSurgery(ims.core.admin.vo.CareContextRefVo careContext)
	{
		if (careContext == null || !careContext.getID_CareContextIsNotNull())
			throw new CodingRuntimeException("A care context must be selected");
		
		DomainFactory factory = getDomainFactory();
		
		IMSCriteria assessmentCriteria = new IMSCriteria(SuitableForSurgeryAssessment.class, factory);
		assessmentCriteria.equal("this.careContext.id", careContext.getID_CareContext());
		
		List<SuitableForSurgeryAssessment> assessments = assessmentCriteria.find();
		
		if (assessments == null || assessments.size() == 0)
			return null;
		
		SuitableForSurgeryAssessmentLiteVo assessment = SuitableForSurgeryAssessmentLiteVoAssembler.create(assessments.get(0));
		
		if(assessment != null && assessment.getProcedureIsNotNull() && assessment.getProcedure().getID_PatientProcedureIsNotNull())
		{
			return PatientProcedureLiteVoAssembler.create((PatientProcedure) factory.getDomainObject(PatientProcedure.class, assessment.getProcedure().getID_PatientProcedure()));
		}
		
		return null;
	}

	public ims.clinical.vo.IntraOperativeCareRecordVo save(ims.clinical.vo.IntraOperativeCareRecordVo record) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (record == null)
			throw new CodingRuntimeException("record is null in method save");
		
		if (!record.isValidated())
			throw new CodingRuntimeException("record has not been validated in method save");
		
		
		DomainFactory factory = getDomainFactory();
		
		IntraOperativeCareRecord domIntraOperativeCareRecord = IntraOperativeCareRecordVoAssembler.extractIntraOperativeCareRecord(factory, record);
		
		factory.save(domIntraOperativeCareRecord);
		
		
		IntraOperativeCareRecordVo intraOperativeCareRecord = IntraOperativeCareRecordVoAssembler.create(domIntraOperativeCareRecord);
		
		PatientProcedureVo patientProcedure = getProcedure(intraOperativeCareRecord.getPlannedProcedure());
		patientProcedure.setIntraOperativeRecord(intraOperativeCareRecord);
		
		PatientProcedure domPatientProcedure = PatientProcedureVoAssembler.extractPatientProcedure(factory, patientProcedure);
		
		factory.save(domPatientProcedure);
		
		return intraOperativeCareRecord;
	}

	public ims.core.vo.PatientProcedureVo getProcedure(ims.core.clinical.vo.PatientProcedureRefVo patientProcedure)
	{
		if (patientProcedure == null || patientProcedure.getID_PatientProcedure() == null)
			throw new CodingRuntimeException("patientProcedure is null or id not provided in method getProcedure");
		
		DomainFactory factory = getDomainFactory();
		
		return PatientProcedureVoAssembler.create((PatientProcedure) factory.getDomainObject(PatientProcedure.class, patientProcedure.getID_PatientProcedure()));
	}

	public ims.core.vo.LocShortVoCollection listTheatres()
	{
		DomainFactory factory = getDomainFactory();
		
		List locations;

		String hql = " from Location loc ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		condStr.append(andStr + " loc.type = :locType");
		markers.add("locType");
		values.add(getDomLookup(LocationType.THEATRE));
		andStr = " and ";
		
		condStr.append(andStr + " loc.isActive = :active");
		markers.add("active");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		condStr.append(andStr + "loc.isVirtual =:isVirtual");
		markers.add("isVirtual");
		values.add(Boolean.FALSE);

		if (andStr.equals(" and "))
		{
			hql += " where ";
		}

		hql += condStr.toString();
		locations = factory.find(hql, markers, values);
		return LocShortVoAssembler.createLocShortVoCollectionFromLocation(locations).sort();
	}

	
	public MedicationLiteVoCollection listMedicationsForSpeciality(
			Specialty speciality) {
		if (speciality == null) return null;
		DomainFactory factory = getDomainFactory();
		String condStr = "select m3_1 from MedicationHotlist as m1_1 left";
		condStr += " join m1_1.hotListItem as m2_1 left join " ;
		condStr += "m2_1.medication as m3_1 left join m1_1.specialty ";
		condStr +="as l1_1 where (m3_1.isActive = 1 and m1_1.specialty.id = :speciality)";
		ArrayList<String> markers = new  ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		markers.add("speciality");
		values.add(speciality.getID());
		return MedicationLiteVoAssembler.createMedicationLiteVoCollectionFromMedication(factory.find(condStr,markers,values));
	}

	
	public IntraOperativeCareRecordVo getIntraOperativeCareRecord(
			IntraOperativeCareRecordRefVo intraOperativeRecord) {
		if (intraOperativeRecord==null || !intraOperativeRecord.getID_IntraOperativeCareRecordIsNotNull() )
			throw new CodingRuntimeException("intraOperativeRecord is null or id is null");
		DomainFactory factory = getDomainFactory();
		return IntraOperativeCareRecordVoAssembler.create((IntraOperativeCareRecord)factory.getDomainObject(IntraOperativeCareRecord.class,intraOperativeRecord.getID_IntraOperativeCareRecord()));
	}

	
	public PatientProcedureVo saveProcedure(PatientProcedureVo voPatientProcedure, PatientShort patientShortVo) throws StaleObjectException, UniqueKeyViolationException {
		if(voPatientProcedure == null)
			throw new RuntimeException("Cannot save null PatientProcedureVo");
		if(voPatientProcedure.isValidated() == false)
			throw new RuntimeException("PatientProcedureVo is not validated");
		
		Procedures plannedProcedureImpl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return plannedProcedureImpl.savePlannedProcedure(voPatientProcedure, patientShortVo);
		
	}

	public InpatientEpisodeVo getInpatientRecord(PatientRefVo patientRef) {
		if (patientRef == null ) return null;
		return ((ADT)getDomainImpl(ADTImpl.class)).getCurrentAdmissionRecord(patientRef);
	}
}
