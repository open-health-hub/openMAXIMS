//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3763.19232)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseOtherAssessmentImpl;
import ims.clinical.vo.domain.OtherAssessmentSummaryVoAssembler;
import ims.core.clinical.domain.objects.OtherAssessmentSummary;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;

import java.util.List;

public class OtherAssessmentImpl extends BaseOtherAssessmentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* Lists all other assessments for current care context
	*/
	public ims.clinical.vo.OtherAssessmentSummaryVoCollection listOtherAssessments(ims.core.admin.vo.CareContextRefVo careContextRef)
	{
		if (!careContextRef.getID_CareContextIsNotNull())
		{
			throw new DomainRuntimeException("Invalid care context specified . It has a null id");
		}
		String query = "from OtherAssessmentSummary as oas where (oas.careContext.id = :CareContext_id) order by oas.assessmentDate asc ";
		List<?> objects = getDomainFactory().find(query,"CareContext_id",careContextRef.getID_CareContext());
		if (objects == null || objects.size() == 0)
			return null;
		return OtherAssessmentSummaryVoAssembler.createOtherAssessmentSummaryVoCollectionFromOtherAssessmentSummary(objects);
	}

	/**
	* Saves an other assessment sumary record
	*/
	public ims.clinical.vo.OtherAssessmentSummaryVo save(ims.clinical.vo.OtherAssessmentSummaryVo record) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (record == null)
			throw new DomainRuntimeException("OtherAssessmentSummaryVo must be not null.");
		if (!record.isValidated())
			throw new DomainRuntimeException("OtherAssessmentSummaryVo must be validated");
		
		DomainFactory domainFactory = getDomainFactory();
		OtherAssessmentSummary doRecord = OtherAssessmentSummaryVoAssembler.extractOtherAssessmentSummary(domainFactory,record);
		domainFactory.save(doRecord);
		return OtherAssessmentSummaryVoAssembler.create(doRecord);
	}
}
