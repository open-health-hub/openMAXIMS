//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.base.impl.BaseSurgicalAuditPreOperationChecksImpl;
import ims.clinical.domain.objects.SurgicalAuditOperationDetail;
import ims.clinical.domain.objects.SurgicalAuditPreOpChecks;
import ims.clinical.helper.IESurgicalAuditHelper;
import ims.clinical.helper.SurgicalAuditHelper;
import ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection;
import ims.clinical.vo.SurgicalAuditOperationDetailRefVo;
import ims.clinical.vo.SurgicalAuditOperationDetailVo;
import ims.clinical.vo.SurgicalAuditPreOpChecksRefVo;
import ims.clinical.vo.SurgicalAuditPreOpChecksVo;
import ims.clinical.vo.domain.PatientProcedureForSurgicalAuditPreOpChecksVoAssembler;
import ims.clinical.vo.domain.SurgicalAuditOperationDetailVoAssembler;
import ims.clinical.vo.domain.SurgicalAuditPreOpChecksVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.people.domain.objects.Medic;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocSiteRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.MedicVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class SurgicalAuditPreOperationChecksImpl extends BaseSurgicalAuditPreOperationChecksImpl
{

	private static final long serialVersionUID = 1L;

	public SurgicalAuditOperationDetailVo save(SurgicalAuditOperationDetailVo surgicalAuditDetailToSave) throws StaleObjectException, UniqueKeyViolationException
	{
		IESurgicalAuditHelper impl = (IESurgicalAuditHelper)getDomainImpl(SurgicalAuditHelper.class);
		return impl.saveSurgicalAuditOperationDetail(surgicalAuditDetailToSave);
	}

	public SurgicalAuditOperationDetailVo getSurgicalAuditOperationDetail(SurgicalAuditOperationDetailRefVo surgicalAuditOpDetRef)
	{
		IESurgicalAuditHelper impl = (IESurgicalAuditHelper)getDomainImpl(SurgicalAuditHelper.class);
		return impl.getSurgicalAuditOperationDetail(surgicalAuditOpDetRef);
	}

	public Boolean areNoSurgicalAuditOperationDetail(CareContextRefVo careContextRef)
	{
		//method used to return true if for a specific Care Context a new record could be created.
		//the method will return false if for a specific care context, there are records with currentStatus: Left Holding Bay, Left Operating Theatre and Entered Operating Theatre. In this cases New Button should be hidden
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get SurgicalAuditOperationDetailVoCollection on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer();
		//hql.append("select count(surgAudit.id) from SurgicalAuditOperationDetail as surgAudit where surgAudit.careContext.id = :careContextID and (surgAudit.operationCancelled is null or surgAudit.operationCancelled = 0) ");
		hql.append("select count(surgAudit.id) from SurgicalAuditOperationDetail as surgAudit left join surgAudit.currentStatus as currentStatus  where surgAudit.careContext.id = :careContextID and (currentStatus.operationStatus.id = -2383 or currentStatus.operationStatus.id = -2384 or currentStatus.operationStatus.id = -2389) ");

		Object[] count = factory.find(hql.toString(), new String[] { "careContextID" }, new Object[] { careContextRef.getID_CareContext()}).toArray();

		if(count != null && count.length > 0)
		 if (((Long) count[0]).intValue()>0)	
			return false;
		
		return true;
	}

	public PatientProcedureForSurgicalAuditPreOpChecksVoCollection listProcedures(SurgicalAuditPreOpChecksRefVo surgicalAuditPreOpChecksRef)
	{	
		if (surgicalAuditPreOpChecksRef == null || surgicalAuditPreOpChecksRef.getID_SurgicalAuditPreOpChecks() == null)
		{
			throw new CodingRuntimeException("Cannot get PatientProcedureForSurgicalAuditPreOpChecksVoCollection on null Id for surgicalAuditPreOpChecksRef ");
		}

		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer();
		hql.append("select procedures from SurgicalAuditPreOpChecks as surgAuditPreOP left join surgAuditPreOP.plannedProcedures as procedures where surgAuditPreOP.id = :surgPreOpId order by procedures.procedureDescription asc ");

		List<?> list = factory.find(hql.toString(), new String[] { "surgPreOpId" }, new Object[] { surgicalAuditPreOpChecksRef.getID_SurgicalAuditPreOpChecks()});

		return PatientProcedureForSurgicalAuditPreOpChecksVoAssembler.createPatientProcedureForSurgicalAuditPreOpChecksVoCollectionFromPatientProcedure(list);
	
	}

	public LocationLiteVoCollection listActiveLocationsAtTheSameLevelWithLocation(LocationRefVo locationRef)
	{
		IESurgicalAuditHelper impl = (IESurgicalAuditHelper)getDomainImpl(SurgicalAuditHelper.class);
		return impl.listActiveLocationsAtTheSameLevelWithLocation(locationRef);	
	}

	public LocationLiteVoCollection listLocationsByParentLocation(LocationRefVo locationRef)
	{			
		IESurgicalAuditHelper impl = (IESurgicalAuditHelper)getDomainImpl(SurgicalAuditHelper.class);
		return impl.listLocationsByParentLocation(locationRef);
	}

	public Boolean isStale(SurgicalAuditOperationDetailVo surgAudit)
	{
		IESurgicalAuditHelper impl = (IESurgicalAuditHelper)getDomainImpl(SurgicalAuditHelper.class);
		return impl.isStale(surgAudit);	
	}

	public MedicVo getMedic(HcpRefVo hcpRef)
	{
		if (hcpRef == null || hcpRef.getID_Hcp() == null)
		{
			throw new CodingRuntimeException("Cannot get MedicVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		Medic domainSurgicalAudit = (Medic) factory.getDomainObject(Medic.class, hcpRef.getID_Hcp());

		return MedicVoAssembler.create(domainSurgicalAudit);
	}

	public LocationLiteVo getLocationLiteVo(LocSiteRefVo locSiteRef)
	{
		IESurgicalAuditHelper impl = (IESurgicalAuditHelper)getDomainImpl(SurgicalAuditHelper.class);
		return impl.getLocationLiteVo(locSiteRef);
	}

	public SurgicalAuditPreOpChecksVo saveSurgicalAuditPreOpChecks(SurgicalAuditPreOpChecksVo surgAuditPreOpChecksToSave) throws StaleObjectException
	{
		if (surgAuditPreOpChecksToSave == null )
		{
			throw new CodingRuntimeException("Cannot get SurgicalAuditOperationDetailVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();
		
		 SurgicalAuditPreOpChecks domainSurgicalAuditPreOpChecks = SurgicalAuditPreOpChecksVoAssembler.extractSurgicalAuditPreOpChecks(factory, surgAuditPreOpChecksToSave);
		factory.save(domainSurgicalAuditPreOpChecks);
		return SurgicalAuditPreOpChecksVoAssembler.create(domainSurgicalAuditPreOpChecks);
	}

	//wdev-15750
	public LocationLiteVo getLocationLite(LocationRefVo locRef) 
	{
		DomainFactory factory = getDomainFactory();
		Location doLocation = (Location)factory.getDomainObject(Location.class, locRef.getID_Location());
		return getHospital(doLocation);
	}
	private LocationLiteVo getHospital(Location doLocation)
	{
		if( doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
			return LocationLiteVoAssembler.create(doLocation);

		while(doLocation.getParentLocation() != null)
		{
			doLocation = doLocation.getParentLocation();
			if( doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
				return LocationLiteVoAssembler.create(doLocation);
		}

		return null;
	}

}
