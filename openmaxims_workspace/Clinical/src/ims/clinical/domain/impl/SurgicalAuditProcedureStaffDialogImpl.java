//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.clinical.domain.base.impl.BaseSurgicalAuditProcedureStaffDialogImpl;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.NurseVoCollection;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.MedicLiteVoAssembler;
import ims.core.vo.domain.NurseVoAssembler;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.MedicGrade;
import ims.domain.DomainFactory;


public class SurgicalAuditProcedureStaffDialogImpl extends BaseSurgicalAuditProcedureStaffDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.LocationLiteVo getLocationLite(ims.core.resource.place.vo.LocationRefVo locRef)
	{
		DomainFactory factory = getDomainFactory();
		Location doLocation = (Location)factory.getDomainObject(Location.class, locRef.getID_Location());
		return getHospital(doLocation);

	}
	private LocationLiteVo getHospital(Location doLocation)
	{
		if( doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
			return LocationLiteVoAssembler.create(doLocation);

		while(doLocation.getParentLocation() != null)
		{
			doLocation = doLocation.getParentLocation();
			if( doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
				return LocationLiteVoAssembler.create(doLocation);
		}

		return null;
	}
	
	public NurseVoCollection getNurses(LocationRefVo locRef, HcpDisType hcpType) 
	{
		if( (locRef == null || locRef.getID_Location() == null) && hcpType == null)
		return null;
	
		DomainFactory factory = getDomainFactory();
		List nurses = factory.find("select n1_1	from Nurse as n1_1 left join n1_1.mos as m1_1 left join m1_1.locations as h1_1 left join h1_1.location as l1_1 left join n1_1.hcpType as l2_1 where (h1_1.location.id =:idLoc  and n1_1.hcpType.id =:idHcpType and n1_1.isActive = 1)", new String[] {"idLoc","idHcpType"}, new Object[] {locRef.getID_Location(),getDomLookup(hcpType).getId()});
		 
		 
		if (nurses != null && nurses.size() > 0)
			return NurseVoAssembler.createNurseVoCollectionFromNurse(nurses);
		
	
		return null;
	}
	
	public MedicLiteVoCollection getMedics(LocationRefVo locRef,HcpDisType hcpType, HcpDisType medicType, MedicGrade medicGrade) //WDEV-15691
	{
		if( (locRef == null || locRef.getID_Location() == null) && hcpType == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		String prepend = " where ";
		
	
		
		StringBuffer hql = new StringBuffer("select m1_1 from Medic as m1_1 left join m1_1.mos as m2_1 left join m2_1.locations as h1_1 left join h1_1.location as l1_1 left join m1_1.hcpType as l2_1 left join m1_1.medicType as l3_1 ");
		if (locRef != null)
		{
			hql.append(prepend + " l1_1.id= :idLocation ");
			names.add("idLocation");
			values.add(locRef.getID_Location());
			prepend = " and ";
		}		
		if (hcpType != null )
		{
			hql.append(prepend + " m1_1.hcpType.id =:idHcpType");
			names.add("idHcpType");
			values.add(getDomLookup(hcpType).getId());
			prepend = " and ";
		}
		if( medicType != null)
		{
			hql.append(prepend + " m1_1.medicType.id =:idMedicType");
			names.add("idMedicType");
			values.add(getDomLookup(medicType).getId());
		}
		
		//WDEV-15691
		if( medicGrade != null)
		{
			hql.append(prepend + " m1_1.grade.id =:idMedicGrade");
			names.add("idMedicGrade");
			values.add(getDomLookup(medicGrade).getId());
		}
		
		hql.append(" and m1_1.isActive = 1");
		
		
		List medics = factory.find(hql.toString(), names, values); 
 
		 
		if (medics != null && medics.size() > 0)
			return MedicLiteVoAssembler.createMedicLiteVoCollectionFromMedic(medics);
			
		
		return null;
		
	}
	
	//WDEV-15691
	public HcpLiteVoCollection getOtheDisciplineHcp(LocationRefVo locationRef, HcpDisType hcpDisType)
	{
		if( (locationRef == null || locationRef.getID_Location() == null) && hcpDisType == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		List <?> hcp = factory.find("select hcp	from Hcp as hcp left join hcp.mos as mos left join mos.locations as locs left join locs.location as loc where (loc.id =:idLoc  and hcp.hcpType.id =:idHcpType and hcp.isActive = 1 ) order by mos.name.upperSurname asc, mos.name.upperForename asc ", new String[] {"idLoc","idHcpType"}, new Object[] {locationRef.getID_Location(),getDomLookup(hcpDisType).getId()}); 
		 
		if (hcp != null && hcp.size() > 0)
			return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(hcp);
	
		return null;
	}
	
}
