//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 50202.1231)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;
 
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.clinical.domain.PastMedicalHistory;
import ims.clinical.vo.lookups.PatientProcedureOutcome;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.vo.enums.CciType;
import ims.core.clinical.domain.objects.PatientCharacteristic;
import ims.core.clinical.domain.objects.PatientProcedure;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientCharacteristicVoCollection;
import ims.core.vo.PatientPastMedicalHistoryVo;
import ims.core.vo.PatientProcedureShortVoCollection;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.PatientProcedureVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.domain.PatientCharacteristicVoAssembler;
import ims.core.vo.domain.PatientProcedureVoAssembler;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.vo.interfaces.IGenericItem;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class PatientProceduresImpl extends DomainImpl implements ims.clinical.domain.PatientProcedures, ims.domain.impl.Transactional
{
	private static final long	serialVersionUID	= 1L;

	/**
	 * will call procedure List Impl to list procedures
	 * @throws DomainInterfaceException 
	 */
	public ProcedureLiteVoCollection listProcedures(String filter) throws DomainInterfaceException
	{
		CCIAdmin impl = (CCIAdmin)getDomainImpl(CCIAdminImpl.class);
		ProcedureLiteVoCollection coll = new ProcedureLiteVoCollection();
		IGenericItem[] items = impl.listIGenericItems(filter, CciType.PROCEDURE, true);
		if (items != null)
		{
			for ( int i = 0; i < items.length; i++)
			{
				coll.add((ProcedureLiteVo)items[i]);
			}
			return coll;
		}
		return null;
	}

	public PatientProcedureVoCollection listClinicalContactProcedures(ClinicalContactShortVo voClinicalContactShort, CareContextShortVo careContext)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from PatientProcedure t ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (careContext != null)
		{
			hql.append(andStr + " t.careContext.id = :ccid");
			markers.add("ccid");
			values.add(careContext.getID_CareContext());
			andStr = " and ";
		}
		else if (voClinicalContactShort != null)
		{
			hql.append(andStr + " t.clinicalContact.id = :rcc");
			markers.add("rcc");
			values.add(new Boolean(true));
			andStr = " and ";

		}

		hql.append(andStr + " t.procedureStatus = :perf");
		markers.add("perf");
		values.add(getDomLookup(PatientProcedureStatus.PERFORMED));
		andStr = " and ";

		if (markers.size() > 0)
			query += " where t.class is null  and";
		query += hql.toString();

		List patientProcedureList = factory.find(query, markers, values);
		return PatientProcedureVoAssembler.createPatientProcedureVoCollectionFromPatientProcedure(patientProcedureList).sort();

	}

	public PatientProcedureVo savePatientProcedure(PatientProcedureVo patientProcedure, PatientRefVo voPatRef) throws StaleObjectException, UniqueKeyViolationException
	{
		if (!patientProcedure.isValidated())
			throw new DomainRuntimeException("PatientProcedureVo not validated");

		DomainFactory factory = getDomainFactory();

		PatientProcedure doPatientProcedure = PatientProcedureVoAssembler.extractPatientProcedure(factory, patientProcedure);

		factory.save(doPatientProcedure);
		// come back to, now in past medical history
		// domRootClinicalContact.getPatientProcedures().add(doPatientProcedure);

		// associate with core clinical
		
		// bi-directional association
		PatientCharacteristic doCharacteristic;
		Iterator it = doPatientProcedure.getInsertedDevices().iterator();
		while (it.hasNext())
		{
			doCharacteristic = (PatientCharacteristic) it.next();
			doCharacteristic.setInsertionProcedure(doPatientProcedure);
		}

		Iterator it1 = doPatientProcedure.getRemovedDevices().iterator();
		while (it1.hasNext())
		{
			doCharacteristic = (PatientCharacteristic) it1.next();
			doCharacteristic.setRemovalProcedure(doPatientProcedure);
		}

	
		//Need to get latest from DB so timestamp is up todate for possible PMH record save.
		patientProcedure = PatientProcedureVoAssembler.create(doPatientProcedure);//WDEV-1027	
		
		if (patientProcedure.getSignifProcIsNotNull() && patientProcedure.getSignifProc().booleanValue())
		{	//Save a PMH Procedure record.
			PatientPastMedicalHistoryVo voPMH = new PatientPastMedicalHistoryVo();

			PastMedicalHistory implPMH = (PastMedicalHistory) getDomainImpl(PastMedicalHistoryImpl.class);
			voPMH = implPMH.getPastMedicalHistory(voPatRef);
		
			if (voPMH == null)
				voPMH = new PatientPastMedicalHistoryVo();
			
			PatientProcedureShortVoCollection voProcColl = voPMH.getProcedure();
			if (voProcColl == null)
				voProcColl = new PatientProcedureShortVoCollection();
			
			voProcColl.add(patientProcedure);
			voPMH.setProcedure(voProcColl);
			String[] arrErrors = voPMH.validate();
			if( arrErrors != null)
			{
				return patientProcedure; //TODO review all this.
//				throw new DomainRuntimeException("PMH not validated correctly");
			}
				
			implPMH.savePMH(voPMH);
			
		}

		return patientProcedure;
	}

	public HcpLiteVoCollection listHcpLiteByName(String hcpName)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(hcpName);

	}

	public PatientCharacteristicVoCollection listCharchteristic(PatientProcedureRefVo currentProcedureRefVo, PatientRefVo patientRefVo)
	{
		DomainFactory factory = getDomainFactory();

		if (currentProcedureRefVo != null && currentProcedureRefVo.getID_PatientProcedure() != null)
		{
			List list = factory.find("from PatientCharacteristic pc where pc.careContext.episodeOfCare.careSpell.patient.id = :patid and pc.insertionProcedure.id != :id and pc.isRemoved = :isRemoved and pc.isActive = :isActive", 
				new String[]{"patid", "id", "isRemoved", "isActive"}, 
				new Object[]{patientRefVo.getID_Patient(), currentProcedureRefVo.getID_PatientProcedure(), Boolean.FALSE, Boolean.TRUE});
			
			return PatientCharacteristicVoAssembler.createPatientCharacteristicVoCollectionFromPatientCharacteristic(list).sort();	
		}
		else
		{
			List list = factory.find("from PatientCharacteristic pc where pc.careContext.episodeOfCare.careSpell.patient.id = :patid and pc.isRemoved = :isRemoved and pc.isActive = :isActive", 
					new String[]{"patid", "isRemoved", "isActive"}, 
					new Object[]{patientRefVo.getID_Patient(), Boolean.FALSE, Boolean.TRUE});
			
			return PatientCharacteristicVoAssembler.createPatientCharacteristicVoCollectionFromPatientCharacteristic(list).sort();	
		}
	}

	public PatientProcedureVo getPatientProcedure(PatientProcedureRefVo procedureRef)
	{
		if (procedureRef == null || !procedureRef.getID_PatientProcedureIsNotNull())
			return null;
		
		return PatientProcedureVoAssembler.create((PatientProcedure) getDomainFactory().getDomainObject(PatientProcedure.class, procedureRef.getID_PatientProcedure()));
	}

}
