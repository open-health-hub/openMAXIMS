//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.clinical.configuration.domain.objects.SurgicalOperationDetailsConfig;
import ims.clinical.domain.base.impl.BaseOperationDetailsConfigImpl;
import ims.clinicaladmin.vo.SurgicalOperationDetailsConfigVo;
import ims.clinicaladmin.vo.domain.SurgicalOperationDetailsConfigVoAssembler;
import ims.core.clinical.vo.ProcedureRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class OperationDetailsConfigImpl extends BaseOperationDetailsConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.HcpLiteVoCollection listHCP(String filter) throws DomainInterfaceException
	{
		/*DomainFactory factory = getDomainFactory();
		IMSCriteria imsc=new IMSCriteria(Hcp.class,factory);
		imsc.join("this.mos", "mos");
		imsc.like("mos.name.surname", filter + "%");
		List<Hcp> hcps=imsc.find();
		if (hcps.size()>0)
			return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(hcps);
		return null;*/
		if (filter == null)
			throw new DomainInterfaceException("Name Filter must be not null");
		HcpAdmin hcpAdminImpl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdminImpl.listHcpLiteByName(filter);
	}

	public ProcedureLiteVoCollection listProcedures(HcpLiteVo hcp,String text) 
	{
		if (hcp == null || !hcp.getID_HcpIsNotNull())
			throw new CodingRuntimeException("Provided hcp is null or doesn't have an id");
		
		String hql = "select distinct proc from ConsultantProcedureCategory as cpc left join cpc.categoryProcedures " +
				"as cp left join cp.procedures as proc where (proc.isActive = 1 and proc.id is not null  and cpc.performingHCP.id = :Hcp_Id ";
		ArrayList<String> pN =new ArrayList<String>();
		ArrayList<Object> pV = new ArrayList<Object>();
		pN.add("Hcp_Id");
		pV.add(hcp.getID_Hcp());
		if (text != null)
		{
			hql+=" and UPPER(proc.procedureName) like :name";
			pN.add("name");
			pV.add("%"+text.toUpperCase()+"%");
		}
		hql+=")";
		List<?> procedures=getDomainFactory().find(hql,pN,pV);
		
		if (procedures != null && procedures.size()>0)
			return ProcedureLiteVoAssembler.createProcedureLiteVoCollectionFromProcedure(procedures);
		return null;
	}

	public SurgicalOperationDetailsConfigVo getSUrgicalOperationDetailsConfig(HcpRefVo hcp, ProcedureRefVo procedure) //WDEV-12111
	{
		String hql = "select sodc from SurgicalOperationDetailsConfig as sodc left join sodc.procedureReference as proc left join sodc.surgeon as hcp"; 
		String where = "proc.id = :procId";
		ArrayList<String> pN = new ArrayList<String>();
		ArrayList<Object> pV = new ArrayList<Object>();
		pN.add("procId");
		pV.add(procedure.getID_Procedure());
		if (hcp!=null)
		{
			where+=" and hcp.id = :hcpId";
			pN.add("hcpId");
			pV.add(hcp.getID_Hcp());
		}
		else
		{
			where+=" and hcp is null";
		}
			
		hql +=" where ("+where+")";
		List HCPvo =getDomainFactory().find(hql,pN,pV);
		if(HCPvo.size() > 0)
			return SurgicalOperationDetailsConfigVoAssembler.create((SurgicalOperationDetailsConfig) HCPvo.get(0));
		return null;
	}

	public SurgicalOperationDetailsConfigVo saveSurgicalOperationDetailConfig(SurgicalOperationDetailsConfigVo surrgicalOpDetailConfig)
			throws DomainInterfaceException, StaleObjectException,
			UniqueKeyViolationException 
	{
		if(surrgicalOpDetailConfig == null)
			throw new CodingRuntimeException("DischargeDetailsVo is null");
		
		if(!surrgicalOpDetailConfig.isValidated())
			throw new CodingRuntimeException("DischargeDetailsVo Value Object has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		//WDEV-12142
		//If new record , verify if another record exists (force soe) 
		if (!surrgicalOpDetailConfig.getID_SurgicalOperationDetailsConfigIsNotNull())
		{
    		String hql = "select count(sodc.id) from SurgicalOperationDetailsConfig as sodc where  (sodc.procedureReference.id = :procId  and ";
    		ArrayList<String> pN = new ArrayList<String>();
    		ArrayList<Object> pV = new ArrayList<Object>();
    		pN.add("procId");
    		pV.add(surrgicalOpDetailConfig.getProcedureReference().getID_Procedure());
    		if (surrgicalOpDetailConfig.getSurgeonIsNotNull())
    		{
    			hql+="sodc.surgeon.id = :surgeonId) ";
    			pN.add("surgeonId");
    			pV.add(surrgicalOpDetailConfig.getSurgeon().getID_Hcp());
    		}
    		else
    		{
    			hql +="sodc.surgeon is null )";
    		}
    		String[] paramN = new String[pN.size()];
    		pN.toArray(paramN);
    		long count = factory.countWithHQL(hql, paramN,pV.toArray());
    		if (count > 0)
    			throw new StaleObjectException(null);
		}
		
		
		SurgicalOperationDetailsConfig doDD = SurgicalOperationDetailsConfigVoAssembler.extractSurgicalOperationDetailsConfig(factory, surrgicalOpDetailConfig);

		factory.save(doDD);
		return SurgicalOperationDetailsConfigVoAssembler.create(doDD);
	}

	public ProcedureLiteVoCollection listAllProcedures(String text)
	{
		String hql = "from Procedure as proc where (upper(proc.procedureName) like :name and proc.isActive = 1) order by upper(proc.procedureName) asc";
		List<?> find = getDomainFactory().find(hql,"name",text==null?"%":"%"+text.toUpperCase()+"%");
		if (find == null || find.size() == 0)
			return null;
		return ProcedureLiteVoAssembler.createProcedureLiteVoCollectionFromProcedure(find);
	}
}
