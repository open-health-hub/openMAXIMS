//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.configuration.domain.objects.HospitalAtNightCutOverPointsConfig;
import ims.clinical.domain.base.impl.BaseHospitalAtNightCutOffPointsConfigImpl;
import ims.clinical.vo.HospitalAtNightCutOffPointsConfigVo;
import ims.clinical.vo.domain.HospitalAtNightCutOffPointsConfigVoAssembler;
import ims.core.vo.domain.LocSiteLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;

public class HospitalAtNightCutOffPointsConfigImpl extends BaseHospitalAtNightCutOffPointsConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.HospitalAtNightCutOffPointsConfigVoCollection listHospitalsConfig()
	{
		DomainFactory factory = getDomainFactory();
		String query = "from HospitalAtNightCutOverPointsConfig as h1_1 order by UPPER(h1_1.hospital.name) asc  ";

		return HospitalAtNightCutOffPointsConfigVoAssembler.createHospitalAtNightCutOffPointsConfigVoCollectionFromHospitalAtNightCutOverPointsConfig(factory.find(query));
	}

	public ims.clinical.vo.HospitalAtNightCutOffPointsConfigVo getHospitalConfig(ims.clinical.configuration.vo.HospitalAtNightCutOverPointsConfigRefVo hospitalConfigId) throws StaleObjectException
	{
		if (hospitalConfigId == null || hospitalConfigId.getID_HospitalAtNightCutOverPointsConfig() == null)
			throw new CodingRuntimeException("Cannot get HospitalAtNightCutOffPointsConfigBTVo on null Id.");

		DomainFactory factory = getDomainFactory();

		HospitalAtNightCutOverPointsConfig domainHospital = (HospitalAtNightCutOverPointsConfig) factory.getDomainObject(HospitalAtNightCutOverPointsConfig.class, hospitalConfigId.getID_HospitalAtNightCutOverPointsConfig());
		
		if (domainHospital == null)
			throw new StaleObjectException(domainHospital);
		
		return HospitalAtNightCutOffPointsConfigVoAssembler.create(domainHospital);
	}

	public ims.clinical.vo.HospitalAtNightCutOffPointsConfigVo saveHospitalAtNight(ims.clinical.vo.HospitalAtNightCutOffPointsConfigVo hospitalConfig) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (hospitalConfig == null)
			throw new CodingRuntimeException("Cannot save null hospitalConfig");

		if (!hospitalConfig.isValidated())
			throw new DomainRuntimeException("HospitalVo Not Validated.");

		try
		{

			DomainFactory factory = getDomainFactory();
			HospitalAtNightCutOverPointsConfig domainHospital = HospitalAtNightCutOffPointsConfigVoAssembler.extractHospitalAtNightCutOverPointsConfig(factory, hospitalConfig);

			factory.save(domainHospital);

			return HospitalAtNightCutOffPointsConfigVoAssembler.create(domainHospital);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("Hospital already exists in the system.", e);
		}
	}

	public ims.core.vo.LocSiteLiteVoCollection listHospital(String hospitalName)
	{
		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		if (hospitalName == null || (hospitalName != null && hospitalName.trim().length() == 0))
			throw new DomainRuntimeException("String for search is null.");

		String hospNameLite = hospitalName != null ? hospitalName.toUpperCase() + "%" : "%%";

		StringBuffer hql = new StringBuffer();

		hql.append(" select hosp from LocSite as hosp left join hosp.type as hosptype");
		hql.append(" where hosp.name like :HospNam and hosp.isActive = 1 and hosp.isVirtual = 0 and hosptype.id=:HospType");
		hql.append(" and hosp.id not in (select h1_1.hospital.id  from HospitalAtNightCutOverPointsConfig as h1_1)"); //WDEV-14022 
		hql.append(" order by UPPER(hosp.name) asc");

		markers.add("HospNam");
		markers.add("HospType");
		values.add(hospNameLite);
		values.add(LocationType.HOSP.getID());

		return LocSiteLiteVoAssembler.createLocSiteLiteVoCollectionFromLocSite(factory.find(hql.toString(), markers, values));

	}

//	@Override
	public void deleteHospitalConfig(HospitalAtNightCutOffPointsConfigVo hospitalConfig) throws ForeignKeyViolationException
	{
		if (hospitalConfig == null)
			throw new CodingRuntimeException("Cannot delete null hospitalConfig");

		try
		{
			DomainFactory factory = getDomainFactory();
			HospitalAtNightCutOverPointsConfig domainHospital = HospitalAtNightCutOffPointsConfigVoAssembler.extractHospitalAtNightCutOverPointsConfig(factory, hospitalConfig);

			factory.delete(domainHospital);

		}
		catch (ForeignKeyViolationException e)
		{
			throw new ForeignKeyViolationException("Hospital configuration is used in the system.", e);
		}

	}

//	@Override
	public Boolean isStale(HospitalAtNightCutOffPointsConfigVo selectedHospitalConfig)
	{

		DomainFactory factory = getDomainFactory();
		HospitalAtNightCutOverPointsConfig domainHospital = (HospitalAtNightCutOverPointsConfig) factory.getDomainObject(HospitalAtNightCutOverPointsConfig.class, selectedHospitalConfig.getID_HospitalAtNightCutOverPointsConfig());

		if (domainHospital == null)
		{
			return true;
		}

		if (domainHospital.getVersion() > selectedHospitalConfig.getVersion_HospitalAtNightCutOverPointsConfig())
		{
			return true;
		}

		return false;
	}

}
