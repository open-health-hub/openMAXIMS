//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.70 build 3467.22451)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.FitForSurgeryAssesment;
import ims.RefMan.domain.objects.OutpatientPreAssessment;
import ims.RefMan.domain.objects.SuitableForSurgeryAssessment;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.FitForSurgeryAssesmentVo;
import ims.RefMan.vo.OutpatientPreAssessmentVo;
import ims.RefMan.vo.SuitableForSurgeryAssessmentLiteVo;
import ims.RefMan.vo.SuitableForSurgeryAssessmentLiteVoCollection;
import ims.RefMan.vo.SuitableForSurgeryAssessmentRefVo;
import ims.RefMan.vo.domain.CatsReferralListVoAssembler;
import ims.RefMan.vo.domain.CatsReferralWizardVoAssembler;
import ims.RefMan.vo.domain.ContractConfigForReferralDetailsComponentVoAssembler;
import ims.RefMan.vo.domain.FitForSurgeryAssesmentVoAssembler;
import ims.RefMan.vo.domain.OutpatientPreAssessmentVoAssembler;
import ims.RefMan.vo.domain.SuitableForSurgeryAssessmentLiteVoAssembler;
import ims.clinical.domain.ClinicalDiAssociations;
import ims.clinical.domain.FitForSurgeryAssessment;
import ims.clinical.domain.base.impl.BaseSuitableforSurgeryAssessmentImpl;
import ims.clinical.vo.catsReferralLiteVo;
import ims.clinical.vo.catsReferralLiteVoCollection;
import ims.clinical.vo.domain.catsReferralLiteVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.DomainFactory;
import ims.domain.DomainFactory.ORDERMODE;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.hibernate3.IMSCriteria;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;

import java.util.List;

public class SuitableforSurgeryAssessmentImpl extends BaseSuitableforSurgeryAssessmentImpl
{

	private static final long serialVersionUID = 1L;


	//wdev-13765 (added parameter catsReferralLiteVo referralRecord to saveAssessment method)
	public ims.RefMan.vo.SuitableForSurgeryAssessmentLiteVo saveAssessment(ims.RefMan.vo.SuitableForSurgeryAssessmentLiteVo assessment,catsReferralLiteVo referralRecord) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.ForeignKeyViolationException, ims.domain.exceptions.UniqueKeyViolationException
	{
		// Check for a provided VO
		if (assessment == null)
			throw new DomainInterfaceException("Can not save an empty assessment");
		
		// Check for a validated VO
		if (!assessment.isValidated())
			throw new CodingRuntimeException("Logical Error - Validate VO before saving");
		
		// Get domain factory
		DomainFactory factory = getDomainFactory();

		// Extract & save domain object
		SuitableForSurgeryAssessment assessmentDOM = SuitableForSurgeryAssessmentLiteVoAssembler.extractSuitableForSurgeryAssessment(factory, assessment);
		factory.save(assessmentDOM);
		
		// Get assessment VO
		SuitableForSurgeryAssessmentLiteVo assessmentVO = SuitableForSurgeryAssessmentLiteVoAssembler.create(assessmentDOM);
		
		
		// Get OutpatientPreAssessment
		OutpatientPreAssessmentVo outpatientPreAssessment = getOutpatientPreAssessment(assessment.getCareContext());
		
		// If OutpatientPreAssessment doesn't - exist create one
		if (outpatientPreAssessment == null)
		{
			outpatientPreAssessment = new OutpatientPreAssessmentVo();
			outpatientPreAssessment.setCareContext(assessment.getCareContext());
		}
		
		// Set OutpatientPreAssessment suitable for surgery field
		outpatientPreAssessment.setSuitableForSurgeryAssessment(assessmentVO);
		
		// Extract & save OutpatientPreAssessment
		OutpatientPreAssessment outpatientPreAssessmenDOM = OutpatientPreAssessmentVoAssembler.extractOutpatientPreAssessment(factory, outpatientPreAssessment);
		factory.save(outpatientPreAssessmenDOM);
		//wdev-13765
		if(referralRecord != null)
		{
			CatsReferral domainObject =  catsReferralLiteVoAssembler.extractCatsReferral(factory, referralRecord);		
			factory.save(domainObject);
		}
		//------
		
		
		//Update the CatsReferral.sSuitableForSurgery attribute if not marked as Procedure performed // wdev-10195
		//WDEV-11692
		updateSuitableForSurgery(assessmentVO.getCareContext(), assessmentVO.getSuitableForSurgery(),assessment.getID_SuitableForSurgeryAssessment() == null, assessmentVO.getProcedurePerformed(), assessmentVO.getSuitableForSurgeryDate());

		
		
		
		// Return the saved VO
		return assessmentVO;
	}

	@SuppressWarnings("unchecked")
	private void updateSuitableForSurgery(CareContextRefVo voCC, YesNoUnknown suitableForSurgery, boolean bNewRecord, Boolean bProcPerformed, Date suitableForSurgeryDate ) throws StaleObjectException
	{
		CatsReferral domainObject;
		if(voCC != null)
		{
			DomainFactory factory = getDomainFactory();

			// Define filter criteria
			IMSCriteria criteria = new IMSCriteria(CatsReferral.class, factory);
			criteria.equal("this.careContext.id", voCC.getID_CareContext());

			List<CatsReferral> crList = criteria.find();
		
			if (crList == null || crList.size() == 0)
				return;
						
			CatsReferralListVo voCats = CatsReferralListVoAssembler.create(crList.get(0));
			voCats.setIsSuitableForSurgery(suitableForSurgery.equals(YesNoUnknown.YES) ? true : false);
				
			if (bProcPerformed)
			{
				voCats.setIsSuitableForSurgery(null);
				voCats.setIsFitForSurgery(null);//wdev-11865
			}
				
			if (bNewRecord)
			{
				voCats.setHasTheatreAppt(null);//wdev-10196
				
				//wdev-11865
				FitForSurgeryAssessment ffs = (FitForSurgeryAssessment) getDomainImpl(FitForSurgeryAssessmentImpl.class);//wdev-11865
				CareContextShortVo voTempCC = new CareContextShortVo();//wdev-11865
				voTempCC.setID_CareContext(voCats.getCareContext().getID_CareContext());//wdev-11865
				if (ffs.getFitForSurgery(voTempCC) == null) //wdev-11865
					voCats.setIsFitForSurgery(null);//wdev-10280
			}

			//WDEV-11692
			voCats.setSuitableForSurgeryDate(suitableForSurgeryDate);
			
			domainObject = CatsReferralListVoAssembler.extractCatsReferral(factory, voCats);
			factory.save(domainObject);
		}
	}

	@SuppressWarnings("unchecked")
	private OutpatientPreAssessmentVo getOutpatientPreAssessment(CareContextRefVo careContext)
	{
		if (careContext == null || !careContext.getID_CareContextIsNotNull())
			throw new CodingRuntimeException("Care context null or not provided");
		
		// Get domain factory
		DomainFactory factory = getDomainFactory();
		
		// Define filter criteria
		IMSCriteria criteria = new IMSCriteria(OutpatientPreAssessment.class, factory);
		criteria.equal("this.careContext.id", careContext.getID_CareContext());

		// Query for outpatietnPreAssessment
		List<OutpatientPreAssessment> outpatientPreAssessmentList = criteria.find();
	
		if (outpatientPreAssessmentList == null || outpatientPreAssessmentList.size() == 0)
			return null;
		
		return OutpatientPreAssessmentVoAssembler.create(outpatientPreAssessmentList.get(0));
	}

	public SuitableForSurgeryAssessmentLiteVoCollection listAssessments(CareContextRefVo careContextRefVo) throws DomainInterfaceException 
	{
		// Check parameters
		if (careContextRefVo == null || !careContextRefVo.getID_CareContextIsNotNull())
			throw new DomainInterfaceException("A care context must be selected");
		
		// Get domain factory
		DomainFactory factory = getDomainFactory();
		
		// Define filter criteria
		IMSCriteria assessmentCriteria = new IMSCriteria(SuitableForSurgeryAssessment.class, factory);
		assessmentCriteria.equal("this.careContext.id", careContextRefVo.getID_CareContext());
		// WDEv-11639
		assessmentCriteria.addOrder("this.authoringInformation.authoringDateTime", ORDERMODE.DESC);
		
		return SuitableForSurgeryAssessmentLiteVoAssembler.createSuitableForSurgeryAssessmentLiteVoCollectionFromSuitableForSurgeryAssessment(assessmentCriteria.find());
	}

	public SuitableForSurgeryAssessmentLiteVo getAssessment(SuitableForSurgeryAssessmentRefVo assessRefVo) throws DomainInterfaceException 
	{
		// Check parameters
		if (assessRefVo == null || !assessRefVo.getID_SuitableForSurgeryAssessmentIsNotNull())
			throw new DomainInterfaceException("An Assessment must be selected");
		
		// Get domain factory
		DomainFactory factory = getDomainFactory();
		
		// Define filter criteria
		IMSCriteria assessmentCriteria = new IMSCriteria(SuitableForSurgeryAssessment.class, factory);
		assessmentCriteria.equal("this.id", assessRefVo.getID_SuitableForSurgeryAssessment());
		
		// Query for the records
		List<SuitableForSurgeryAssessment> assessments = assessmentCriteria.find();
		
		if (assessments == null || assessments.size() == 0)
			return null;
		
		SuitableForSurgeryAssessmentLiteVoCollection assessmentVoCollection = SuitableForSurgeryAssessmentLiteVoAssembler.createSuitableForSurgeryAssessmentLiteVoCollectionFromSuitableForSurgeryAssessment(assessments);
		
		if (assessmentVoCollection == null || assessmentVoCollection.size() == 0)
			return null;
		
		return assessmentVoCollection.get(0);
	}

	

	//wdev-13765
	public catsReferralLiteVo getCatsReferral(CareContextRefVo careContextRef) 
	{
		 
		String hql = "select c1_1 from CatsReferral as c1_1 left join c1_1.careContext as c2_1 where (c2_1.id = :careContextId)";
		List dos = getDomainFactory().find(hql,new String[]{"careContextId"},new Object[]{careContextRef.getID_CareContext()});
		if (dos != null || dos.size() > 0)
		{
			catsReferralLiteVoCollection tempColl = catsReferralLiteVoAssembler.createcatsReferralLiteVoCollectionFromCatsReferral(dos);
			if(tempColl != null && tempColl.size() > 0)
			{
				return tempColl.get(0);
			}
		}
		
		return null;
	
	}

}
