//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.65 build 3210.27143)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.clinical.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.MosAdmin;
import ims.admin.domain.impl.MosAdminImpl;
import ims.clinical.domain.ClinicalNoteDrawing;
import ims.clinical.domain.ClinicalNotes;
import ims.clinical.domain.base.impl.BaseTherapiesNoteImpl;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.vo.ClinicalNotesRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.ClinicalNotesVoCollection;
import ims.core.vo.domain.CareContextVoAssembler;
import ims.core.vo.domain.ClinicalNotesVoAssembler;
import ims.domain.DomainFactory;

public class TherapiesNoteImpl extends BaseTherapiesNoteImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* saveClinicalNotes
	*/
	public ims.core.vo.ClinicalNotesVo saveClinicalNotes(ims.core.vo.ClinicalNotesVo clinicalNotesVo) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		ClinicalNotes impl = (ClinicalNotes) getDomainImpl(ClinicalNotesImpl.class);
		return impl.saveClinicalNotes(clinicalNotesVo);
	}

	/**
	* Save the SOAPVo
	*/
	public void saveSOAPsVo(ims.core.vo.SOAPVo voSOAP) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing) getDomainImpl(ClinicalNoteDrawingImpl.class);
		impl.saveSOAPsVo(voSOAP);
	}

	/**
	* Get SOAPVo
	*/
	public ims.core.vo.SOAPVo getSOAPsVo(ims.core.clinical.vo.ClinicalNotesRefVo clinnoteRefVo)
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing) getDomainImpl(ClinicalNoteDrawingImpl.class);
		return impl.getSOAPsVo(clinnoteRefVo);
	}

	/**
	* getMemberOfStaff
	*/
	public ims.core.vo.MemberOfStaffVo getMemberOfStaff(ims.core.vo.MemberOfStaffShortVo mos)
	{
		MosAdmin mosAdmin = (MosAdmin)getDomainImpl(MosAdminImpl.class);
		return mosAdmin.getMemberOfStaff(mos);
	}

	/**
	* getClinicalNotesForCareContext
	*/
	public ims.core.vo.ClinicalNotesVo getClinicalNotesForCareContext(ims.core.admin.vo.CareContextRefVo careContxetRefVo)
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		CareContextShortVo voCCShort = new CareContextShortVo();
		voCCShort.setID_CareContext(careContxetRefVo.getID_CareContext());
		return impl.getClinicalNotesForCareContext(voCCShort);
	}

	public CareContextVo getCurrentCareContext(CareContextRefVo careContextRefVo) 
	{
		DomainFactory factory = getDomainFactory();
		CareContext doCC = (CareContext) factory.getDomainObject(CareContext.class, careContextRefVo.getID_CareContext());
		return (CareContextVoAssembler.create(doCC));
	}

	public ClinicalNotesVo getClinicalNote(ClinicalNotesRefVo clinicalNoteRefVo) 
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);
		return impl.getClinicalNotes(clinicalNoteRefVo.getID_ClinicalNotes());
	}
	
	//WDEV-13939
	public ClinicalNotesVoCollection getAllClinicalNotesForCareContext(CareContextRefVo careContextRefVo)
	{
		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer hql = new StringBuffer();
		
		hql.append(" select notes from ClinicalNotes as notes left join notes.careContext as cc where (cc.id=:ID and notes.isDerivedNote = 1)");
		hql.append(" order by notes.id desc");

		markers.add("ID");
		values.add(careContextRefVo.getID_CareContext());

		return ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(factory.find(hql.toString(), markers, values));
	}
}
