//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.domain.CatsReferralBreachDatesVoAssembler;
import ims.clinical.domain.ClinicListWithICPActions;
import ims.clinical.domain.base.impl.BaseClinicListNotesPullingImpl;
import ims.clinical.vo.ClinicalNotesPullingSearchCriteriaVo;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.icp.vo.OutpatientEpisodeWithICPInfoVo;
import ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection;
import ims.icp.vo.domain.OutpatientEpisodeWithICPInfoVoAssembler;
import ims.icp.vo.domain.PatientICPLiteVoAssembler;
import ims.icps.instantiation.domain.objects.PatientICP;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.Iterator;

public class ClinicListNotesPullingImpl extends BaseClinicListNotesPullingImpl
{

	private static final long serialVersionUID = 1L;

	public OutpatientEpisodeWithICPInfoVoCollection listOPEpisodes(ClinicalNotesPullingSearchCriteriaVo searchCriteria)
	{
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer query = new StringBuffer();

		query.append("SELECT icp, appts, apptTrackStatus");
		query.append(", referral");
		query.append(" FROM PatientICP AS icp RIGHT JOIN icp.appointments AS appts LEFT JOIN appts.apptTrackingStatusHistory AS apptTrackStatus LEFT JOIN icp.careContext AS icpContext");
		query.append(", CatsReferral AS referral LEFT JOIN referral.appointments AS refAppt");
		
		query.append(" WHERE ");
		query.append(" refAppt.id = appts.id AND ");
		query.append(" (apptTrackStatus.id is null or ");
		query.append(" apptTrackStatus.id = (select max(th.id) from Booking_Appointment as ba join ba.apptTrackingStatusHistory as th where ba.id = appts.id))");

		if (searchCriteria.getClinicIsNotNull())
		{
			query.append(" and appts.session.id = :clinic");
			markers.add("clinic");
			values.add(searchCriteria.getClinic().getID_Sch_Session());
		}
		else
		{
			query.append(" and ( appts.session.schLocation.id = :idHosp or appts.session.schLocation.parentLocation.id = :idHosp)");
			markers.add("idHosp");
			values.add(searchCriteria.getHospital().getID_Location());

			query.append(" and appts.session.sessionDate = :sessionDate");
			markers.add("sessionDate");
			values.add(searchCriteria.getDate().getDate());

			query.append(" and appts.session.isActive = :isActive");
			markers.add("isActive");
			values.add(Boolean.TRUE);

			query.append(" and appts.session.isTheatreSession = :falseTheatre");
			markers.add("falseTheatre");
			values.add(Boolean.FALSE);
		}
		
		query.append(" and appts.apptStatus.id != :CAN_ID ");
		
		markers.add("CAN_ID");
		values.add(Status_Reason.CANCELLED.getID());
		
		java.util.List list = getDomainFactory().find(query.toString(), markers, values, 500);
		Iterator it = list.iterator();
		OutpatientEpisodeWithICPInfoVoCollection voColl = new OutpatientEpisodeWithICPInfoVoCollection();

		while (it.hasNext())
		{
			Object[] lstItem = (Object[]) it.next();
			
			Booking_Appointment doOP = (Booking_Appointment) lstItem[1];
			
			// Populate database mapped fields
			OutpatientEpisodeWithICPInfoVo voOPEpis = OutpatientEpisodeWithICPInfoVoAssembler.create(doOP);
			
			// Set ICP Information
			if (lstItem[0] instanceof PatientICP)
			{
				PatientICP domPatientICP = (PatientICP) lstItem[0];
				
				voOPEpis.setICPInfo(PatientICPLiteVoAssembler.create(domPatientICP));
			}
			
			//Get the CatsReferral for this appointment
			if (lstItem[3] instanceof CatsReferral)
			{
				voOPEpis.setReferral(CatsReferralBreachDatesVoAssembler.create((CatsReferral) lstItem[3]));
			}
			
			voColl.add(voOPEpis);
		}
		
		return voColl;
	}
	
	public ims.core.vo.LocationLiteVoCollection getActiveHospitals(ims.core.resource.people.vo.MemberOfStaffRefVo mos)
	{
		ClinicListWithICPActions impl = (ClinicListWithICPActions) getDomainImpl(ClinicListwithICPActionsImpl.class);
		return impl.getActiveHospitals(mos);
	}

	public ims.scheduling.vo.SessionShortVoCollection listClinics(Integer hospital, ims.framework.utils.Date date)
	{
		ClinicListWithICPActions impl = (ClinicListWithICPActions) getDomainImpl(ClinicListwithICPActionsImpl.class);
		return impl.listClinics(hospital, date);
	}

	public void saveCaseNote(ims.scheduling.vo.Booking_AppointmentRefVo appToSave) throws ims.domain.exceptions.StaleObjectException
	{
		if (appToSave == null)
			throw new CodingRuntimeException("Cannot get Appointment on null Id.");
		
		DomainFactory factory = getDomainFactory();
		
		Booking_Appointment domAppt = (Booking_Appointment)  factory.getDomainObject(appToSave);
		
		if (Boolean.TRUE.equals(domAppt.isCaseNotesPulled()))
			return;
		
		domAppt.setCaseNotesPulled(true);
		
		factory.save(domAppt);
	}
}
