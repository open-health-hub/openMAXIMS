//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.surgicalopnotesgeneraldetailscc;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbAnaestheticGivenComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.AnaestheticType value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.AnaestheticType getValue()
		{
			return (ims.clinical.vo.lookups.AnaestheticType)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.AnaestheticType value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbOpSurgeonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdDiagnosisRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDiagnosisRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnNameOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnName()
		{
			return (String)super.row.get(0);
		}
		public void setColumnName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getColumnDescription()
		{
			return (String)super.row.get(1);
		}
		public void setColumnDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnPrimaryReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnPrimaryReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnPrimaryOpened()
		{
			super.row.showOpened(2);
		}
		public boolean getColumnPrimary()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setColumnPrimary(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellColumnPrimaryTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.clinical.vo.PatientDiagnosisOpNotesVo getValue()
		{
			return (ims.clinical.vo.PatientDiagnosisOpNotesVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.PatientDiagnosisOpNotesVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDiagnosisRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDiagnosisRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDiagnosisRow get(int index)
		{
			return new grdDiagnosisRow(super.collection.get(index));
		}
		public grdDiagnosisRow newRow()
		{
			return new grdDiagnosisRow(super.collection.newRow());
		}
		public grdDiagnosisRow newRow(boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRow(autoSelect));
		}
		public grdDiagnosisRow newRowAt(int index)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index));
		}
		public grdDiagnosisRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDiagnosisGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.clinical.vo.PatientDiagnosisOpNotesVoCollection getValues()
		{
			ims.clinical.vo.PatientDiagnosisOpNotesVoCollection listOfValues = new ims.clinical.vo.PatientDiagnosisOpNotesVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.PatientDiagnosisOpNotesVo getValue()
		{
			return (ims.clinical.vo.PatientDiagnosisOpNotesVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.PatientDiagnosisOpNotesVo value)
		{
			super.grid.setValue(value);
		}
		public grdDiagnosisRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDiagnosisRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDiagnosisRowCollection getRows()
		{
			return new grdDiagnosisRowCollection(super.grid.getRows());
		}
		public grdDiagnosisRow getRowByValue(ims.clinical.vo.PatientDiagnosisOpNotesVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDiagnosisRow(row);
		}
		public void setColumnNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnPrimaryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnPrimaryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdAssistantsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAssistantsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setSurgeonReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isSurgeonReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showSurgeonOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getSurgeon()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellSurgeonTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setTextReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isTextReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showTextOpened()
		{
			super.row.showOpened(1);
		}
		public String getText()
		{
			return (String)super.row.get(1);
		}
		public void setText(String value)
		{
			super.row.set(1, value);
		}
		public void setCellTextTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public Integer getValue()
		{
			return (Integer)super.row.getValue();
		}
		public void setValue(Integer value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAssistantsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAssistantsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAssistantsRow get(int index)
		{
			return new grdAssistantsRow(super.collection.get(index));
		}
		public grdAssistantsRow newRow()
		{
			return new grdAssistantsRow(super.collection.newRow());
		}
		public grdAssistantsRow newRow(boolean autoSelect)
		{
			return new grdAssistantsRow(super.collection.newRow(autoSelect));
		}
		public grdAssistantsRow newRowAt(int index)
		{
			return new grdAssistantsRow(super.collection.newRowAt(index));
		}
		public grdAssistantsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAssistantsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAssistantsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public Integer[] getValues()
		{
			Integer[] listOfValues = new Integer[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public Integer getValue()
		{
			return (Integer)super.grid.getValue();
		}
		public void setValue(Integer value)
		{
			super.grid.setValue(value);
		}
		public grdAssistantsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAssistantsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAssistantsRowCollection getRows()
		{
			return new grdAssistantsRowCollection(super.grid.getRows());
		}
		public grdAssistantsRow getRowByValue(Integer value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAssistantsRow(row);
		}
		public void setSurgeonHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getSurgeonHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setTextHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getTextHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdProceduresRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProceduresRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnNameOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnName()
		{
			return (String)super.row.get(0);
		}
		public void setColumnName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getColumnDescription()
		{
			return (String)super.row.get(1);
		}
		public void setColumnDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnPrimaryReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnPrimaryReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnPrimaryOpened()
		{
			super.row.showOpened(2);
		}
		public boolean getColumnPrimary()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setColumnPrimary(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellColumnPrimaryTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.core.vo.PatientProcedureSurgicalOpVo getValue()
		{
			return (ims.core.vo.PatientProcedureSurgicalOpVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientProcedureSurgicalOpVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProceduresRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProceduresRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProceduresRow get(int index)
		{
			return new grdProceduresRow(super.collection.get(index));
		}
		public grdProceduresRow newRow()
		{
			return new grdProceduresRow(super.collection.newRow());
		}
		public grdProceduresRow newRow(boolean autoSelect)
		{
			return new grdProceduresRow(super.collection.newRow(autoSelect));
		}
		public grdProceduresRow newRowAt(int index)
		{
			return new grdProceduresRow(super.collection.newRowAt(index));
		}
		public grdProceduresRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProceduresRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProceduresGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.PatientProcedureSurgicalOpVoCollection getValues()
		{
			ims.core.vo.PatientProcedureSurgicalOpVoCollection listOfValues = new ims.core.vo.PatientProcedureSurgicalOpVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientProcedureSurgicalOpVo getValue()
		{
			return (ims.core.vo.PatientProcedureSurgicalOpVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientProcedureSurgicalOpVo value)
		{
			super.grid.setValue(value);
		}
		public grdProceduresRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProceduresRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProceduresRowCollection getRows()
		{
			return new grdProceduresRowCollection(super.grid.getRows());
		}
		public grdProceduresRow getRowByValue(ims.core.vo.PatientProcedureSurgicalOpVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProceduresRow(row);
		}
		public void setColumnNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnPrimaryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnPrimaryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}

	public static class GroupOperationRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 264, 48, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Emergency", startTabIndex.intValue() + 3);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 160, 48, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Elective", startTabIndex.intValue() + 2);
		}
		public void setText(GroupOperationEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupOperationEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupOperationEnumeration.None;
				case 0: return GroupOperationEnumeration.rdoEmergency;
				case 1: return GroupOperationEnumeration.rdoElective;
			}
			return null;
		}
		public void setValue(GroupOperationEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupOperationEnumeration.None.id);
		}
		public boolean isEnabled(GroupOperationEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupOperationEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupOperationEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupOperationEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupOperationEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupOperationEnumeration None = new GroupOperationEnumeration(-1);
		public static GroupOperationEnumeration rdoEmergency = new GroupOperationEnumeration(0);
		public static GroupOperationEnumeration rdoElective = new GroupOperationEnumeration(1);
		private GroupOperationEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupOperationEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedProcedure();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(800, 536);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.contextMenuProcedure = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuProcedureADDItem = factory.createMenuItem(startControlID.intValue() + 10, "New Procedure", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200006)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureADDItem);
		contextMenus.contextMenuProcedureUPDATEItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit Procedure", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200007)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureUPDATEItem);
		contextMenus.contextMenuProcedurePERFORMEDItem = factory.createMenuItem(startControlID.intValue() + 12, "Mark Procedure as Performed", true, false, new Integer(102209), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200009)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedurePERFORMEDItem);
		contextMenus.contextMenuProcedureVIEWASSOCIATIONSItem = factory.createMenuItem(startControlID.intValue() + 13, "View Associations", true, false, new Integer(102266), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200010)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureVIEWASSOCIATIONSItem);
		contextMenus.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 14, "New Intra Operative Details", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200001)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 15, "View\\Edit Intra Operative Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200002)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 16, "New Cataract Intra Operative Details", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200003)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 17, "View\\Edit Cataract Intra Operative Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200004)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureRIEItem = factory.createMenuItem(startControlID.intValue() + 18, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200005)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureRIEItem);
		contextMenus.contextMenuProcedureCANCELItem = factory.createMenuItem(startControlID.intValue() + 19, "Mark Procedure as Cancelled", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200011)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureCANCELItem);
		form.registerMenu(contextMenus.contextMenuProcedure);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 20, "New Diagnosis", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3090001)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 21, "Edit Diagnosis", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3090002)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 22, "View Diagnosis", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3090003)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem = factory.createMenuItem(startControlID.intValue() + 23, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3090004)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 784, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 584, 70, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccConsultantAnaesthetistForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 1007, skipContextValidation);
		//ims.framework.Control m_ccConsultantAnaesthetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(584), new Integer(70), new Integer(208), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1007), m_ccConsultantAnaesthetistForm, instance1 } );
		ims.framework.Control m_ccConsultantAnaesthetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1007), m_ccConsultantAnaesthetistForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccConsultantAnaesthetistControl);
		Menu[] menus1 = m_ccConsultantAnaesthetistForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 584, 46, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccPrincipalAnaesthetistForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper5.getSize(), instance2, startTabIndex.intValue() + 6, skipContextValidation);
		//ims.framework.Control m_ccPrincipalAnaesthetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(584), new Integer(46), new Integer(208), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 6), m_ccPrincipalAnaesthetistForm, instance2 } );
		ims.framework.Control m_ccPrincipalAnaesthetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 6), m_ccPrincipalAnaesthetistForm, instance2, Boolean.FALSE } );
		super.addControl(m_ccPrincipalAnaesthetistControl);
		Menu[] menus2 = m_ccPrincipalAnaesthetistForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 408, 96, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Given:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 408, 72, 145, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant Anaesthetist:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 408, 48, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Principal Anaesthetist:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 408, 23, 167, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated date of discharge:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 160, 72, 11, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "  ", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 32, 48, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Operation:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 32, 72, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 32, 96, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Operating Surgeon:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 32, 23, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 640, 360, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 2015), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 717, 360, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2017), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 360, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2013), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 584, 21, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 160, 21, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 584, 94, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAnaestheticGivenTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAnaestheticGivenTemp);
		cmbAnaestheticGivenComboBox cmbAnaestheticGiven = (cmbAnaestheticGivenComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaestheticGivenComboBox.class, m_cmbAnaestheticGivenTemp);
		super.addComboBox(cmbAnaestheticGiven);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 160, 94, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbOpSurgeonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbOpSurgeonTemp);
		qmbOpSurgeonComboBox qmbOpSurgeon = (qmbOpSurgeonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbOpSurgeonComboBox.class, m_qmbOpSurgeonTemp);
		super.addComboBox(qmbOpSurgeon);

		// Grid Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 392, 784, 136, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDiagnosisTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 2019), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuEDischargeDiagnosisEtcDiagnosisMenu, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDiagnosisTemp);
		grdDiagnosisGrid grdDiagnosis = (grdDiagnosisGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisGrid.class, m_grdDiagnosisTemp);
		grdDiagnosis.addStringColumn("Diagnosis Name", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDiagnosis.addStringColumn("Diagnosis Description", 0, 0, 400, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDiagnosis.addBoolColumn("Primary", 0, 0, -1, true, false, 0, true);
		super.addGrid(grdDiagnosis);
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 24, 128, 752, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdAssistantsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 2010), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAssistantsTemp);
		grdAssistantsGrid grdAssistants = (grdAssistantsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAssistantsGrid.class, m_grdAssistantsTemp);
		grdAssistants.addMutableComboBoxColumn("Assistant(s)", 0, 0, 500, false, true, true, false, true, true, -1);
		grdAssistants.addStringColumn("   ", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAssistants);
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 784, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 2011), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuProcedure, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdProceduresTemp);
		grdProceduresGrid grdProcedures = (grdProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProceduresGrid.class, m_grdProceduresTemp);
		grdProcedures.addStringColumn("Procedure Name", 0, 0, 350, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProcedures.addStringColumn("Procedure Description", 0, 0, 350, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProcedures.addBoolColumn("Primary", 0, 0, -1, false, true, 0, true);
		super.addGrid(grdProcedures);

		// RadioButton Controls
		RadioButton tmpGroupOperation = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGroupOperation);
		GroupOperationRadioButton GroupOperation = (GroupOperationRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupOperationRadioButton.class, tmpGroupOperation);
		GroupOperation.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupOperation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.mosquery.IComponent ccConsultantAnaesthetist()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccConsultantAnaesthetistValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccConsultantAnaesthetistVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccConsultantAnaesthetistVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccConsultantAnaesthetistEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccConsultantAnaesthetistEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccPrincipalAnaesthetist()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
	}
	public void setccPrincipalAnaesthetistValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
	}
	public void setccPrincipalAnaesthetistVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setVisible(value);
	}
	public boolean isccPrincipalAnaesthetistVisible()
	{
		return ((ims.framework.Control)super.getControl(2)).isVisible();
	}
	public void setccPrincipalAnaesthetistEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setEnabled(value);
	}
	public boolean isccPrincipalAnaesthetistEnabled()
	{
		return ((ims.framework.Control)super.getControl(2)).isEnabled();
	}
	public Label lblConsultant()
	{
		return (Label)super.getControl(7);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(12);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(13);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(14);
	}
	public DateControl dteEstimatedDateOfDischarge()
	{
		return (DateControl)super.getControl(15);
	}
	public DateControl dteDate()
	{
		return (DateControl)super.getControl(16);
	}
	public cmbAnaestheticGivenComboBox cmbAnaestheticGiven()
	{
		return (cmbAnaestheticGivenComboBox)super.getComboBox(0);
	}
	public qmbOpSurgeonComboBox qmbOpSurgeon()
	{
		return (qmbOpSurgeonComboBox)super.getComboBox(1);
	}
	public grdDiagnosisGrid grdDiagnosis()
	{
		return (grdDiagnosisGrid)super.getGrid(0);
	}
	public grdAssistantsGrid grdAssistants()
	{
		return (grdAssistantsGrid)super.getGrid(1);
	}
	public grdProceduresGrid grdProcedures()
	{
		return (grdProceduresGrid)super.getGrid(2);
	}
	public GroupOperationRadioButton GroupOperation()
	{
		return (GroupOperationRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Core = new CoreForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ConsultantProcedureHotlistDialog = new LocalFormName(104132);
				PatientDiagnosisDialog = new LocalFormName(123176);
				SurgicalOPNotesGeneralDetailsCC = new LocalFormName(123171);
			}
			public final FormName ConsultantProcedureHotlistDialog;
			public final FormName PatientDiagnosisDialog;
			public final FormName SurgicalOPNotesGeneralDetailsCC;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}

		public ClinicalForms Clinical;
		public CoreForms Core;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentOPNote = new ims.framework.ContextVariable("CurrentOPNote", prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__CurrentOPNote_" + componentIdentifier + "");
			cxl_SelectedProcedure = new ims.framework.ContextVariable("SelectedProcedure", prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__SelectedProcedure_" + componentIdentifier + "");
			cxl_ReadOnly = new ims.framework.ContextVariable("ReadOnly", prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ReadOnly_" + componentIdentifier + "");
			cxl_ProcedureToBeRIE = new ims.framework.ContextVariable("ProcedureToBeRIE", prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier + "");
		}
		
		public boolean getCurrentOPNoteIsNotNull()
		{
			return !cxl_CurrentOPNote.getValueIsNull(context);
		}
		public ims.clinical.vo.SurgicalOperationNotesGeneralDetailsVo getCurrentOPNote()
		{
			return (ims.clinical.vo.SurgicalOperationNotesGeneralDetailsVo)cxl_CurrentOPNote.getValue(context);
		}
		public void setCurrentOPNote(ims.clinical.vo.SurgicalOperationNotesGeneralDetailsVo value)
		{
			cxl_CurrentOPNote.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentOPNote = null;
		public boolean getSelectedProcedureIsNotNull()
		{
			return !cxl_SelectedProcedure.getValueIsNull(context);
		}
		public ims.core.vo.PatientProcedureSurgicalOpVo getSelectedProcedure()
		{
			return (ims.core.vo.PatientProcedureSurgicalOpVo)cxl_SelectedProcedure.getValue(context);
		}
		public void setSelectedProcedure(ims.core.vo.PatientProcedureSurgicalOpVo value)
		{
			cxl_SelectedProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedProcedure = null;
		public boolean getReadOnlyIsNotNull()
		{
			return !cxl_ReadOnly.getValueIsNull(context);
		}
		public Boolean getReadOnly()
		{
			return (Boolean)cxl_ReadOnly.getValue(context);
		}
		public void setReadOnly(Boolean value)
		{
			cxl_ReadOnly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReadOnly = null;
		public boolean getProcedureToBeRIEIsNotNull()
		{
			return !cxl_ProcedureToBeRIE.getValueIsNull(context);
		}
		public ims.core.vo.PatientProcedureSurgicalOpVo getProcedureToBeRIE()
		{
			return (ims.core.vo.PatientProcedureSurgicalOpVo)cxl_ProcedureToBeRIE.getValue(context);
		}
		public void setProcedureToBeRIE(ims.core.vo.PatientProcedureSurgicalOpVo value)
		{
			cxl_ProcedureToBeRIE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ProcedureToBeRIE = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class Procedure implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 10;
			public static final int UPDATE = 11;
			public static final int PERFORMED = 12;
			public static final int VIEWASSOCIATIONS = 13;
			public static final int NEWINTRAOPERATIVEDETAILS = 14;
			public static final int EDITINTRAOPERATIVEDETAILS = 15;
			public static final int NEWCATARACTINTRAOPERATIVEDETAILS = 16;
			public static final int EDITCATARACTINTRAOPERATIVEDETAILS = 17;
			public static final int RIE = 18;
			public static final int CANCEL = 19;
		}
		public void disableAllProcedureMenuItems()
		{
			this.contextMenuProcedureADDItem.setEnabled(false);
			this.contextMenuProcedureUPDATEItem.setEnabled(false);
			this.contextMenuProcedurePERFORMEDItem.setEnabled(false);
			this.contextMenuProcedureVIEWASSOCIATIONSItem.setEnabled(false);
			this.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureRIEItem.setEnabled(false);
			this.contextMenuProcedureCANCELItem.setEnabled(false);
		}
		public void hideAllProcedureMenuItems()
		{
			this.contextMenuProcedureADDItem.setVisible(false);
			this.contextMenuProcedureUPDATEItem.setVisible(false);
			this.contextMenuProcedurePERFORMEDItem.setVisible(false);
			this.contextMenuProcedureVIEWASSOCIATIONSItem.setVisible(false);
			this.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureRIEItem.setVisible(false);
			this.contextMenuProcedureCANCELItem.setVisible(false);
		}
		private Menu contextMenuProcedure;
		public ReadOnlyMenuItem getProcedureADDItem()
		{
			return this.contextMenuProcedureADDItem;
		}
		private MenuItem contextMenuProcedureADDItem;
		public ReadOnlyMenuItem getProcedureUPDATEItem()
		{
			return this.contextMenuProcedureUPDATEItem;
		}
		private MenuItem contextMenuProcedureUPDATEItem;
		public ReadOnlyMenuItem getProcedurePERFORMEDItem()
		{
			return this.contextMenuProcedurePERFORMEDItem;
		}
		private MenuItem contextMenuProcedurePERFORMEDItem;
		public ReadOnlyMenuItem getProcedureVIEWASSOCIATIONSItem()
		{
			return this.contextMenuProcedureVIEWASSOCIATIONSItem;
		}
		private MenuItem contextMenuProcedureVIEWASSOCIATIONSItem;
		public ReadOnlyMenuItem getProcedureNEWINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureEDITINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureRIEItem()
		{
			return this.contextMenuProcedureRIEItem;
		}
		private MenuItem contextMenuProcedureRIEItem;
		public MenuItem getProcedureCANCELItem()
		{
			return this.contextMenuProcedureCANCELItem;
		}
		private MenuItem contextMenuProcedureCANCELItem;
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class EDischargeDiagnosisEtcDiagnosisMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW_DIAGNOSIS = 20;
				public static final int EDIT_DIAGNOSIS = 21;
				public static final int VIEW_DIAGNOSIS = 22;
				public static final int RIE = 23;
			}
			public void disableAllEDischargeDiagnosisEtcDiagnosisMenuMenuItems()
			{
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem.setEnabled(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem.setEnabled(false);
			}
			public void hideAllEDischargeDiagnosisEtcDiagnosisMenuMenuItems()
			{
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem.setVisible(false);
				this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem.setVisible(false);
			}
			private Menu contextMenuEDischargeDiagnosisEtcDiagnosisMenu;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcDiagnosisMenuNEW_DIAGNOSISItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcDiagnosisMenuEDIT_DIAGNOSISItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcDiagnosisMenuVIEW_DIAGNOSISItem;
			public ReadOnlyMenuItem getEDischargeDiagnosisEtcDiagnosisMenuRIEItem()
			{
				return this.contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisEtcDiagnosisMenuRIEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[106];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedProcedure", "BO-1003100019-LOS", "LOS");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-ISCOMORBIDITY", "IsComorbidity");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1003100106-ID", "ID_SurgicalOperationNotes");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1003100106-CARECONTEXT", "CareContext");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1003100106-ANAESTHETICGIVEN", "AnaestheticGiven");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1003100106-ESTIMATEDDATEOFDISCHARGE", "EstimatedDateOfDischarge");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__SelectedProcedure_" + componentIdentifier, "BO-1003100017-ID", "ID_PatientProcedure");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__SelectedProcedure_" + componentIdentifier, "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__SelectedProcedure_" + componentIdentifier, "BO-1003100017-PROCDATE", "ProcDate");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__SelectedProcedure_" + componentIdentifier, "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__SelectedProcedure_" + componentIdentifier, "BO-1003100017-CARECONTEXT", "CareContext");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__SelectedProcedure_" + componentIdentifier, "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__SelectedProcedure_" + componentIdentifier, "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__SelectedProcedure_" + componentIdentifier, "BO-1003100017-PROCEDUREURGENCY", "ProcedureUrgency");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__SelectedProcedure_" + componentIdentifier, "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-ID", "ID_PatientProcedure");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-PROCDATE", "ProcDate");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-CARECONTEXT", "CareContext");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-PROCEDUREURGENCY", "ProcedureUrgency");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalOPNotesGeneralDetailsCC.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
