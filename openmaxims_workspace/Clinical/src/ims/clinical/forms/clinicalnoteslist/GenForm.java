//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.clinicalnoteslist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrSearcFilterLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabRecordingHcpContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbHcpStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ClinicalNotesStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ClinicalNotesStatus getValue()
				{
					return (ims.core.vo.lookups.ClinicalNotesStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ClinicalNotesStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbHcpRecComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.Hcp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.Hcp value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.Hcp getValue()
				{
					return (ims.core.vo.Hcp)super.control.getValue();
				}
				public void setValue(ims.core.vo.Hcp value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 544, 18, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 344, 18, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 50, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 576, 16, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 400, 16, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 112, 48, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbHcpStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbHcpStatusTemp);
				cmbHcpStatusComboBox cmbHcpStatus = (cmbHcpStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHcpStatusComboBox.class, m_cmbHcpStatusTemp);
				super.addComboBox(cmbHcpStatus);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 112, 16, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbHcpRecTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbHcpRecTemp);
				qmbHcpRecComboBox qmbHcpRec = (qmbHcpRecComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHcpRecComboBox.class, m_qmbHcpRecTemp);
				super.addComboBox(qmbHcpRec);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 344, 48, 216, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Only View Notes Requiring Validation", Boolean.FALSE, null}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 760, 10, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 728, 10, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for Clinical Notes matching 'Search Criteria' ", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public DateControl dteHcpTo()
			{
				return (DateControl)super.getControl(4);
			}
			public DateControl dteHcpFrom()
			{
				return (DateControl)super.getControl(5);
			}
			public cmbHcpStatusComboBox cmbHcpStatus()
			{
				return (cmbHcpStatusComboBox)super.getComboBox(0);
			}
			public qmbHcpRecComboBox qmbHcpRec()
			{
				return (qmbHcpRecComboBox)super.getComboBox(1);
			}
			public CheckBox chkAuthValidation()
			{
				return (CheckBox)super.getControl(8);
			}
			public ImageButton imbClearHcp()
			{
				return (ImageButton)super.getControl(9);
			}
			public ImageButton imbSearchHcp()
			{
				return (ImageButton)super.getControl(10);
			}
		}
		public static class tabRecordingUserContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class qmbUserRecComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.MemberOfStaffShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.MemberOfStaffShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.MemberOfStaffShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.MemberOfStaffShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.MemberOfStaffShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.MemberOfStaffShortVo getValue()
				{
					return (ims.core.vo.MemberOfStaffShortVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.MemberOfStaffShortVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 344, 16, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 544, 16, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording User:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 400, 16, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 576, 16, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 120, 16, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbUserRecTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbUserRecTemp);
				qmbUserRecComboBox qmbUserRec = (qmbUserRecComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbUserRecComboBox.class, m_qmbUserRecTemp);
				super.addComboBox(qmbUserRec);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 120, 48, 224, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Only View Notes Requiring Validation", Boolean.FALSE, null}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 760, 10, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 728, 10, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for Clinical Notes matching 'Search Criteria' ", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public DateControl dteUserFrom()
			{
				return (DateControl)super.getControl(3);
			}
			public DateControl dteUserTo()
			{
				return (DateControl)super.getControl(4);
			}
			public qmbUserRecComboBox qmbUserRec()
			{
				return (qmbUserRecComboBox)super.getComboBox(0);
			}
			public CheckBox chkRecValidation()
			{
				return (CheckBox)super.getControl(6);
			}
			public ImageButton imbClearUser()
			{
				return (ImageButton)super.getControl(7);
			}
			public ImageButton imbSearchUser()
			{
				return (ImageButton)super.getControl(8);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 816, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabRecordingHcp = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Search By Authoring HCP", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabRecordingHcpContainer m_tabRecordingHcpContainer = (tabRecordingHcpContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRecordingHcpContainer.class, m_tabRecordingHcp, factory);
			super.addContainer(m_tabRecordingHcp, m_tabRecordingHcpContainer);
			ims.framework.utils.SizeInfo m_tabRecordingHcpDesignSize = new ims.framework.utils.SizeInfo(816, 104);
			ims.framework.utils.SizeInfo m_tabRecordingHcpRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
			m_tabRecordingHcpContainer.setContext(form, appForm, m_tabRecordingHcp, loader, form_images_local, contextMenus, startControlID, m_tabRecordingHcpDesignSize, m_tabRecordingHcpRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 816, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabRecordingUser = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Search By Recording User", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabRecordingUserContainer m_tabRecordingUserContainer = (tabRecordingUserContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRecordingUserContainer.class, m_tabRecordingUser, factory);
			super.addContainer(m_tabRecordingUser, m_tabRecordingUserContainer);
			ims.framework.utils.SizeInfo m_tabRecordingUserDesignSize = new ims.framework.utils.SizeInfo(816, 104);
			ims.framework.utils.SizeInfo m_tabRecordingUserRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
			m_tabRecordingUserContainer.setContext(form, appForm, m_tabRecordingUser, loader, form_images_local, contextMenus, startControlID, m_tabRecordingUserDesignSize, m_tabRecordingUserRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabRecordingHcp().setVisible(false);
			tabRecordingUser().setVisible(false);
		}
		public void settabRecordingHcpEnabled(boolean value)
		{
			tabRecordingHcp().setEnabled(value);
		}
		public void settabRecordingUserEnabled(boolean value)
		{
			tabRecordingUser().setEnabled(value);
		}
		public void showtabRecordingHcp()
		{
			tabRecordingUser().setVisible(false);
			tabRecordingHcp().setVisible(true);
		}
		public void showtabRecordingUser()
		{
			tabRecordingHcp().setVisible(false);
			tabRecordingUser().setVisible(true);
		}

		public tabRecordingHcpContainer tabRecordingHcp()
		{
			return (tabRecordingHcpContainer)super.layers.get(0);
		}
		public tabRecordingUserContainer tabRecordingUser()
		{
			return (tabRecordingUserContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.HcpLiteVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.HcpLiteVo' of the global context variable 'Core.RecordingHCP' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalNotesVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalNotesVo' of the global context variable 'Clinical.CurrentClinicalNote' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuClinicalNoting = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuClinicalNotingADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102149), true, false);
		contextMenus.contextMenuClinicalNoting.add(contextMenus.contextMenuClinicalNotingADDItem);
		contextMenus.contextMenuClinicalNotingEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuClinicalNoting.add(contextMenus.contextMenuClinicalNotingEDITItem);
		contextMenus.contextMenuClinicalNotingVALIDATEItem = factory.createMenuItem(startControlID.intValue() + 3, "Validate", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuClinicalNoting.add(contextMenus.contextMenuClinicalNotingVALIDATEItem);
		contextMenus.contextMenuClinicalNotingCORRECTItem = factory.createMenuItem(startControlID.intValue() + 4, "Correct", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuClinicalNoting.add(contextMenus.contextMenuClinicalNotingCORRECTItem);
		contextMenus.contextMenuClinicalNotingVIEWItem = factory.createMenuItem(startControlID.intValue() + 5, "View", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuClinicalNoting.add(contextMenus.contextMenuClinicalNotingVIEWItem);
		contextMenus.contextMenuClinicalNotingREVIEWItem = factory.createMenuItem(startControlID.intValue() + 6, "Review", true, false, new Integer(102222), true, false);
		contextMenus.contextMenuClinicalNoting.add(contextMenus.contextMenuClinicalNotingREVIEWItem);
		contextMenus.contextMenuClinicalNotingSTATUS_HISTItem = factory.createMenuItem(startControlID.intValue() + 7, "View Note Corrections", true, false, new Integer(102253), true, false);
		contextMenus.contextMenuClinicalNoting.add(contextMenus.contextMenuClinicalNotingSTATUS_HISTItem);
		form.registerMenu(contextMenus.contextMenuClinicalNoting);


		// Layer Clasess
		lyrSearcFilterLayer m_lyrSearcFilterLayer = (lyrSearcFilterLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSearcFilterLayer.class, this, factory);
		super.addLayer(m_lyrSearcFilterLayer);
		m_lyrSearcFilterLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 608, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total : 0", new Integer(1), null, new Integer(0)}));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 136, 816, 464, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuClinicalNoting, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrSearcFilterLayer lyrSearcFilter()
	{
		return (lyrSearcFilterLayer)super.getLayer(0);
	}
	public Label lblTotal()
	{
		return (Label)super.getControl(2);
	}
	public DynamicGrid dyngrdNotes()
	{
		return (DynamicGrid)super.getControl(3);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Therapies = new TherapiesForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ClinicalNoting = new LocalFormName(122138);
				ClinicalNoteDrawing = new LocalFormName(102177);
				ClinicalNotesDialog = new LocalFormName(102176);
				ClinicalNotes = new LocalFormName(102158);
				ClinicalNotesList = new LocalFormName(122137);
				ClinicalNoteHistoryDialog = new LocalFormName(123100);
				ClinicalNoteDrawingDialog = new LocalFormName(102175);
				TherapiesNoteDialog = new LocalFormName(134132);
			}
			public final FormName ClinicalNoting;
			public final FormName ClinicalNoteDrawing;
			public final FormName ClinicalNotesDialog;
			public final FormName ClinicalNotes;
			public final FormName ClinicalNotesList;
			public final FormName ClinicalNoteHistoryDialog;
			public final FormName ClinicalNoteDrawingDialog;
			public final FormName TherapiesNoteDialog;
		}
		public final class TherapiesForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private TherapiesForms()
			{
				SOAPNoteDialog = new LocalFormName(112149);
			}
			public final FormName SOAPNoteDialog;
		}

		public ClinicalForms Clinical;
		public TherapiesForms Therapies;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				ClinicalTeam = new ImageHelper(103150, "Images/Admin/Users-3.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClinicalTeam;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				CareSpell = new ImageHelper(102253, "Images/Core/CareSpell.gif", new Integer(16), new Integer(16));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image CareSpell;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ClinicalNoteVoForClinicalContact = new ims.framework.ContextVariable("ClinicalNoteVoForClinicalContact", prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier + "");
		}
		
		public boolean getClinicalNoteVoForClinicalContactIsNotNull()
		{
			return !cxl_ClinicalNoteVoForClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalNotesVo getClinicalNoteVoForClinicalContact()
		{
			return (ims.core.vo.ClinicalNotesVo)cxl_ClinicalNoteVoForClinicalContact.getValue(context);
		}
		public void setClinicalNoteVoForClinicalContact(ims.core.vo.ClinicalNotesVo value)
		{
			cxl_ClinicalNoteVoForClinicalContact.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClinicalNoteVoForClinicalContact = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class ClinicalNoting implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
			public static final int EDIT = 2;
			public static final int VALIDATE = 3;
			public static final int CORRECT = 4;
			public static final int VIEW = 5;
			public static final int REVIEW = 6;
			public static final int STATUS_HIST = 7;
		}
		public void disableAllClinicalNotingMenuItems()
		{
			this.contextMenuClinicalNotingADDItem.setEnabled(false);
			this.contextMenuClinicalNotingEDITItem.setEnabled(false);
			this.contextMenuClinicalNotingVALIDATEItem.setEnabled(false);
			this.contextMenuClinicalNotingCORRECTItem.setEnabled(false);
			this.contextMenuClinicalNotingVIEWItem.setEnabled(false);
			this.contextMenuClinicalNotingREVIEWItem.setEnabled(false);
			this.contextMenuClinicalNotingSTATUS_HISTItem.setEnabled(false);
		}
		public void hideAllClinicalNotingMenuItems()
		{
			this.contextMenuClinicalNotingADDItem.setVisible(false);
			this.contextMenuClinicalNotingEDITItem.setVisible(false);
			this.contextMenuClinicalNotingVALIDATEItem.setVisible(false);
			this.contextMenuClinicalNotingCORRECTItem.setVisible(false);
			this.contextMenuClinicalNotingVIEWItem.setVisible(false);
			this.contextMenuClinicalNotingREVIEWItem.setVisible(false);
			this.contextMenuClinicalNotingSTATUS_HISTItem.setVisible(false);
		}
		private Menu contextMenuClinicalNoting;
		public MenuItem getClinicalNotingADDItem()
		{
			return this.contextMenuClinicalNotingADDItem;
		}
		private MenuItem contextMenuClinicalNotingADDItem;
		public MenuItem getClinicalNotingEDITItem()
		{
			return this.contextMenuClinicalNotingEDITItem;
		}
		private MenuItem contextMenuClinicalNotingEDITItem;
		public MenuItem getClinicalNotingVALIDATEItem()
		{
			return this.contextMenuClinicalNotingVALIDATEItem;
		}
		private MenuItem contextMenuClinicalNotingVALIDATEItem;
		public MenuItem getClinicalNotingCORRECTItem()
		{
			return this.contextMenuClinicalNotingCORRECTItem;
		}
		private MenuItem contextMenuClinicalNotingCORRECTItem;
		public MenuItem getClinicalNotingVIEWItem()
		{
			return this.contextMenuClinicalNotingVIEWItem;
		}
		private MenuItem contextMenuClinicalNotingVIEWItem;
		public MenuItem getClinicalNotingREVIEWItem()
		{
			return this.contextMenuClinicalNotingREVIEWItem;
		}
		private MenuItem contextMenuClinicalNotingREVIEWItem;
		public MenuItem getClinicalNotingSTATUS_HISTItem()
		{
			return this.contextMenuClinicalNotingSTATUS_HISTItem;
		}
		private MenuItem contextMenuClinicalNotingSTATUS_HISTItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[101];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTETYPE", "NoteType");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEW", "ForReview");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-NOTETYPE", "NoteType");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-DISCIPLINE", "Discipline");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-CARECONTEXT", "CareContext");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNotesList.__internal_x_context__ClinicalNoteVoForClinicalContact_" + componentIdentifier, "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
