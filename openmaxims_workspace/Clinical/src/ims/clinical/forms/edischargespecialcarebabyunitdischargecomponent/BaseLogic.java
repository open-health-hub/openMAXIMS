//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.edischargespecialcarebabyunitdischargecomponent;

public abstract class BaseLogic extends Handlers implements IComponent
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.clinical.domain.EDischargeSpecialCareBabyUnitDischargeComponent.class;
	}
	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form, ims.clinical.domain.EDischargeSpecialCareBabyUnitDischargeComponent domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	public void setMode(ims.framework.enumerations.FormMode mode)
	{
		form.setMode(mode);
	}
	public ims.framework.enumerations.FormMode getMode()
	{
		return form.getMode();
	}
	protected final void oncmbHowAdministeredValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbHowAdministered().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MedicationRoute existingInstance = (ims.core.vo.lookups.MedicationRoute)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbHowAdministeredLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.MedicationRoute)
		{
			ims.core.vo.lookups.MedicationRoute instance = (ims.core.vo.lookups.MedicationRoute)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbHowAdministeredLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MedicationRoute existingInstance = (ims.core.vo.lookups.MedicationRoute)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbHowAdministered().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbHowAdministeredLookup()
	{
		this.form.cmbHowAdministered().clear();
		ims.core.vo.lookups.MedicationRouteCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMedicationRoute(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbHowAdministered().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbHowAdministeredLookupValue(int id)
	{
		ims.core.vo.lookups.MedicationRoute instance = ims.core.vo.lookups.LookupHelper.getMedicationRouteInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbHowAdministered().setValue(instance);
	}
	protected final void defaultcmbHowAdministeredLookupValue()
	{
		this.form.cmbHowAdministered().setValue((ims.core.vo.lookups.MedicationRoute)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.MedicationRoute.class, engine.getFormName().getID(), ims.core.vo.lookups.MedicationRoute.TYPE_ID));
	}
	protected final void oncmbFeedingValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbFeeding().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.pci.vo.lookups.BreastFeedingStatus existingInstance = (ims.pci.vo.lookups.BreastFeedingStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbFeedingLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.pci.vo.lookups.BreastFeedingStatus)
		{
			ims.pci.vo.lookups.BreastFeedingStatus instance = (ims.pci.vo.lookups.BreastFeedingStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbFeedingLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.pci.vo.lookups.BreastFeedingStatus existingInstance = (ims.pci.vo.lookups.BreastFeedingStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbFeeding().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbFeedingLookup()
	{
		this.form.cmbFeeding().clear();
		ims.pci.vo.lookups.BreastFeedingStatusCollection lookupCollection = ims.pci.vo.lookups.LookupHelper.getBreastFeedingStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbFeeding().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbFeedingLookupValue(int id)
	{
		ims.pci.vo.lookups.BreastFeedingStatus instance = ims.pci.vo.lookups.LookupHelper.getBreastFeedingStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbFeeding().setValue(instance);
	}
	protected final void defaultcmbFeedingLookupValue()
	{
		this.form.cmbFeeding().setValue((ims.pci.vo.lookups.BreastFeedingStatus)domain.getLookupService().getDefaultInstance(ims.pci.vo.lookups.BreastFeedingStatus.class, engine.getFormName().getID(), ims.pci.vo.lookups.BreastFeedingStatus.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.chkComplete().setValue(false);
		this.form.dteSecondPKUtestdate().setValue(null);
		this.form.dteFirstPKUTestDate().setValue(null);
		this.form.cmbHowAdministered().setValue(null);
		this.form.decDischargeWeight().setValue(null);
		this.form.decBithWeight().setValue(null);
		this.form.intLenght().setValue(null);
		this.form.intApgar1().setValue(null);
		this.form.intApgar5().setValue(null);
		this.form.cmbFeeding().setValue(null);
		this.form.intGestation().setValue(null);
	}
	protected void populateScreenFromData(ims.clinical.vo.NeonatalVo value)
	{
		clearScreen();
		if(value == null)
			return;

		if(value.getIsCompleteIsNotNull())
			this.form.chkComplete().setValue(value.getIsComplete().booleanValue());
		this.form.dteSecondPKUtestdate().setValue(value.getSecondPKUTestDateIsNotNull() ? value.getSecondPKUTestDate() : null);
		this.form.dteFirstPKUTestDate().setValue(value.getFirstPKUTestDateIsNotNull() ? value.getFirstPKUTestDate() : null);
		this.form.cmbHowAdministered().setValue(value.getRouteIsNotNull() ? value.getRoute() : null);
		this.form.decDischargeWeight().setValue(value.getDischargeWeightIsNotNull() ? value.getDischargeWeight() : null);
		this.form.decBithWeight().setValue(value.getBirthWeightIsNotNull() ? value.getBirthWeight() : null);
		this.form.intLenght().setValue(value.getLengthIsNotNull() ? value.getLength() : null);
		this.form.intApgar1().setValue(value.getApgar1MinuteIsNotNull() ? value.getApgar1Minute() : null);
		this.form.intApgar5().setValue(value.getApgar5MinuteIsNotNull() ? value.getApgar5Minute() : null);
		this.form.cmbFeeding().setValue(value.getFeedingIsNotNull() ? value.getFeeding() : null);
		this.form.intGestation().setValue(value.getGestationWeeksIsNotNull() ? value.getGestationWeeks() : null);
	}
	protected ims.clinical.vo.NeonatalVo populateDataFromScreen(ims.clinical.vo.NeonatalVo value)
	{
		if(value == null)
			value = new ims.clinical.vo.NeonatalVo();

		value.setIsComplete(new Boolean(this.form.chkComplete().getValue()));
		value.setSecondPKUTestDate(this.form.dteSecondPKUtestdate().getValue());
		value.setFirstPKUTestDate(this.form.dteFirstPKUTestDate().getValue());
		value.setRoute(this.form.cmbHowAdministered().getValue());
		value.setDischargeWeight(this.form.decDischargeWeight().getValue());
		value.setBirthWeight(this.form.decBithWeight().getValue());
		value.setLength(this.form.intLenght().getValue());
		value.setApgar1Minute(this.form.intApgar1().getValue());
		value.setApgar5Minute(this.form.intApgar5().getValue());
		value.setFeeding(this.form.cmbFeeding().getValue());
		value.setGestationWeeks(this.form.intGestation().getValue());

		return value;
	}
	protected ims.clinical.vo.NeonatalVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.clinical.vo.NeonatalVo());
	}
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.clinical.domain.EDischargeSpecialCareBabyUnitDischargeComponent domain;
}
