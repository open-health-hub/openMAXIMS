//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.edischargespecialcarebabyunitdischargecomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbHowAdministeredComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.MedicationRoute value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.MedicationRoute value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.MedicationRoute value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.MedicationRoute value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.MedicationRoute value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.MedicationRoute getValue()
		{
			return (ims.core.vo.lookups.MedicationRoute)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.MedicationRoute value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbFeedingComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.pci.vo.lookups.BreastFeedingStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.pci.vo.lookups.BreastFeedingStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.pci.vo.lookups.BreastFeedingStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.pci.vo.lookups.BreastFeedingStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.pci.vo.lookups.BreastFeedingStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.pci.vo.lookups.BreastFeedingStatus getValue()
		{
			return (ims.pci.vo.lookups.BreastFeedingStatus)super.control.getValue();
		}
		public void setValue(ims.pci.vo.lookups.BreastFeedingStatus value)
		{
			super.control.setValue(value);
		}
	}

	public static class GroupHealthVisitorRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 248, 104, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "No", startTabIndex.intValue() + 1010);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 200, 104, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Yes", startTabIndex.intValue() + 1009);
		}
		public void setText(GroupHealthVisitorEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupHealthVisitorEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupHealthVisitorEnumeration.None;
				case 0: return GroupHealthVisitorEnumeration.rdoVisitorNo;
				case 1: return GroupHealthVisitorEnumeration.rdoVisitorYes;
			}
			return null;
		}
		public void setValue(GroupHealthVisitorEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupHealthVisitorEnumeration.None.id);
		}
		public boolean isEnabled(GroupHealthVisitorEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupHealthVisitorEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupHealthVisitorEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupHealthVisitorEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupHealthVisitorEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupHealthVisitorEnumeration None = new GroupHealthVisitorEnumeration(-1);
		public static GroupHealthVisitorEnumeration rdoVisitorNo = new GroupHealthVisitorEnumeration(0);
		public static GroupHealthVisitorEnumeration rdoVisitorYes = new GroupHealthVisitorEnumeration(1);
		private GroupHealthVisitorEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupHealthVisitorEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupMidwifeRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 248, 64, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "No", startTabIndex.intValue() + 1008);
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 200, 64, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Yes", startTabIndex.intValue() + 1007);
		}
		public void setText(GroupMidwifeEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupMidwifeEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupMidwifeEnumeration.None;
				case 0: return GroupMidwifeEnumeration.rdoMidwifeNo;
				case 1: return GroupMidwifeEnumeration.rdoMidwifeYes;
			}
			return null;
		}
		public void setValue(GroupMidwifeEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupMidwifeEnumeration.None.id);
		}
		public boolean isEnabled(GroupMidwifeEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupMidwifeEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupMidwifeEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupMidwifeEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupMidwifeEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupMidwifeEnumeration None = new GroupMidwifeEnumeration(-1);
		public static GroupMidwifeEnumeration rdoMidwifeNo = new GroupMidwifeEnumeration(0);
		public static GroupMidwifeEnumeration rdoMidwifeYes = new GroupMidwifeEnumeration(1);
		private GroupMidwifeEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupMidwifeEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupVitaminKRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 248, 208, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "No", startTabIndex.intValue() + 1013);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 200, 208, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Yes", startTabIndex.intValue() + 1012);
		}
		public void setText(GroupVitaminKEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupVitaminKEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupVitaminKEnumeration.None;
				case 0: return GroupVitaminKEnumeration.rdoVitaminKGivenNo;
				case 1: return GroupVitaminKEnumeration.rdoVitaminKGivenYes;
			}
			return null;
		}
		public void setValue(GroupVitaminKEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupVitaminKEnumeration.None.id);
		}
		public boolean isEnabled(GroupVitaminKEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupVitaminKEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupVitaminKEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupVitaminKEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupVitaminKEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupVitaminKEnumeration None = new GroupVitaminKEnumeration(-1);
		public static GroupVitaminKEnumeration rdoVitaminKGivenNo = new GroupVitaminKEnumeration(0);
		public static GroupVitaminKEnumeration rdoVitaminKGivenYes = new GroupVitaminKEnumeration(1);
		private GroupVitaminKEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupVitaminKEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedInstance();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 432, 336, 400, 144, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Metrics", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 336, 392, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Apgar", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 200, 16, 312, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccDischargingNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper9.getSize(), instance1, startTabIndex.intValue() + 5, skipContextValidation);
		//ims.framework.Control m_ccDischargingNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(200), new Integer(16), new Integer(312), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 5), m_ccDischargingNurseForm, instance1 } );
		ims.framework.Control m_ccDischargingNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 5), m_ccDischargingNurseForm, instance1, Boolean.TRUE } );
		super.addControl(m_ccDischargingNurseControl);
		Menu[] menus1 = m_ccDischargingNurseForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 296, 208, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 296, 104, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 296, 64, 10, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 488, 282, 115, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "2nd PKU Test Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 528, 210, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Route:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 24, 18, 165, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharging Midwife/Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 24, 104, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Health Visitor Required:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 24, 64, 177, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Community Midwife Required:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 688, 370, 19, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Kg", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 448, 370, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Birth Weight :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 688, 402, 27, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "cms", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 448, 402, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Length :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 688, 434, 19, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Kg", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 448, 434, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Discharge Weight :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 40, 402, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Apgar at 5 minutes :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 40, 370, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Apgar at 1 minute :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 768, 16, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Weeks", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 24, 144, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Feeding :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 24, 282, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "1st PKU Test Date :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 24, 208, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Vitamin K Given:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 528, 16, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Gestation :", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 757, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1030), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 675, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 24, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 24, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 608, 280, 152, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 200, 280, 157, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 608, 208, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbHowAdministeredTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbHowAdministeredTemp);
		cmbHowAdministeredComboBox cmbHowAdministered = (cmbHowAdministeredComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHowAdministeredComboBox.class, m_cmbHowAdministeredTemp);
		super.addComboBox(cmbHowAdministered);
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 200, 144, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbFeedingTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbFeedingTemp);
		cmbFeedingComboBox cmbFeeding = (cmbFeedingComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFeedingComboBox.class, m_cmbFeedingTemp);
		super.addComboBox(cmbFeeding);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 757, 568, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 1024), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Complete", Boolean.FALSE, null}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 568, 400, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 200, 368, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 200, 400, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 608, 16, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));

		// DecimalBox Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 568, 432, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.TRUE}));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 568, 368, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.TRUE}));

		// RadioButton Controls
		RadioButton tmpGroupHealthVisitor = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGroupHealthVisitor);
		GroupHealthVisitorRadioButton GroupHealthVisitor = (GroupHealthVisitorRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupHealthVisitorRadioButton.class, tmpGroupHealthVisitor);
		GroupHealthVisitor.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupHealthVisitor);
		RadioButton tmpGroupMidwife = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGroupMidwife);
		GroupMidwifeRadioButton GroupMidwife = (GroupMidwifeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupMidwifeRadioButton.class, tmpGroupMidwife);
		GroupMidwife.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupMidwife);
		RadioButton tmpGroupVitaminK = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupVitaminK);
		GroupVitaminKRadioButton GroupVitaminK = (GroupVitaminKRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupVitaminKRadioButton.class, tmpGroupVitaminK);
		GroupVitaminK.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupVitaminK);

		// Horizontal Line Controls
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 24, 176, 808, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 24, 320, 808, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 24, 248, 808, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
	}


	public ims.core.forms.mosquery.IComponent ccDischargingNurse()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
	}
	public void setccDischargingNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
	}
	public void setccDischargingNurseVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setVisible(value);
	}
	public boolean isccDischargingNurseVisible()
	{
		return ((ims.framework.Control)super.getControl(2)).isVisible();
	}
	public void setccDischargingNurseEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setEnabled(value);
	}
	public boolean isccDischargingNurseEnabled()
	{
		return ((ims.framework.Control)super.getControl(2)).isEnabled();
	}
	public Label lblViitaminK()
	{
		return (Label)super.getControl(3);
	}
	public Label lblHealth()
	{
		return (Label)super.getControl(4);
	}
	public Label lblMidwife()
	{
		return (Label)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(24);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(25);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(26);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(27);
	}
	public DateControl dteSecondPKUtestdate()
	{
		return (DateControl)super.getControl(28);
	}
	public DateControl dteFirstPKUTestDate()
	{
		return (DateControl)super.getControl(29);
	}
	public cmbHowAdministeredComboBox cmbHowAdministered()
	{
		return (cmbHowAdministeredComboBox)super.getComboBox(0);
	}
	public cmbFeedingComboBox cmbFeeding()
	{
		return (cmbFeedingComboBox)super.getComboBox(1);
	}
	public CheckBox chkComplete()
	{
		return (CheckBox)super.getControl(32);
	}
	public IntBox intLenght()
	{
		return (IntBox)super.getControl(33);
	}
	public IntBox intApgar1()
	{
		return (IntBox)super.getControl(34);
	}
	public IntBox intApgar5()
	{
		return (IntBox)super.getControl(35);
	}
	public IntBox intGestation()
	{
		return (IntBox)super.getControl(36);
	}
	public DecimalBox decDischargeWeight()
	{
		return (DecimalBox)super.getControl(37);
	}
	public DecimalBox decBithWeight()
	{
		return (DecimalBox)super.getControl(38);
	}
	public GroupHealthVisitorRadioButton GroupHealthVisitor()
	{
		return (GroupHealthVisitorRadioButton)super.getRadioButton(0);
	}
	public GroupMidwifeRadioButton GroupMidwife()
	{
		return (GroupMidwifeRadioButton)super.getRadioButton(1);
	}
	public GroupVitaminKRadioButton GroupVitaminK()
	{
		return (GroupVitaminKRadioButton)super.getRadioButton(2);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
			cxl_STHKSummary = new ims.framework.ContextVariable("STHKSummary", prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__STHKSummary_" + componentIdentifier + "");
			cxl_LastEvent = new ims.framework.ContextVariable("LastEvent", prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__LastEvent_" + componentIdentifier + "");
		}
		
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.clinical.vo.NeonatalVo getSelectedInstance()
		{
			return (ims.clinical.vo.NeonatalVo)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.clinical.vo.NeonatalVo value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
		public boolean getSTHKSummaryIsNotNull()
		{
			return !cxl_STHKSummary.getValueIsNull(context);
		}
		public ims.edischarge.vo.SummaryRefVo getSTHKSummary()
		{
			return (ims.edischarge.vo.SummaryRefVo)cxl_STHKSummary.getValue(context);
		}
		public void setSTHKSummary(ims.edischarge.vo.SummaryRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'STHKSummary' RefVo context variable.");
			if(value == null)
				cxl_STHKSummary.setValue(context, null);
			else
				cxl_STHKSummary.setValue(context, new ims.edischarge.vo.SummaryRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_STHKSummary = null;
		public boolean getLastEventIsNotNull()
		{
			return !cxl_LastEvent.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.EDischargeLastEvent getLastEvent()
		{
			return (ims.clinical.vo.enums.EDischargeLastEvent)cxl_LastEvent.getValue(context);
		}
		public void setLastEvent(ims.clinical.vo.enums.EDischargeLastEvent value)
		{
			cxl_LastEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastEvent = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[89];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-ID", "ID_NeoNatal");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-CARECONTEXT", "CareContext");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-DISCHARGINGNURSE", "DischargingNurse");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-GESTATIONWEEKS", "GestationWeeks");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-ISMIDWIFE", "IsMidwife");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-ISHEALTHVISITOR", "IsHealthVisitor");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-FEEDING", "Feeding");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-ISVITAMINKGIVEN", "IsVitaminKGiven");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-ROUTE", "Route");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-_1STPKUTESTDATE", "FirstPKUTestDate");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-_2NDPKUTESTDATE", "SecondPKUTestDate");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-APGAR1MINUTE", "Apgar1Minute");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-APGAR5MINUTE", "Apgar5Minute");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-BIRTHWEIGHT", "BirthWeight");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-LENGTH", "Length");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-DISCHARGEWEIGHT", "DischargeWeight");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1099100013-ISCOMPLETE", "IsComplete");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeSpecialCareBabyUnitDischargeComponent.__internal_x_context__STHKSummary_" + componentIdentifier, "BO-1099100018-ID", "ID_Summary");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
