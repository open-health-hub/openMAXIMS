//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3922.16454)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.edischargespecialcarebabyunitdischargecomponent;

import ims.clinical.forms.edischargespecialcarebabyunitdischargecomponent.GenForm.GroupHealthVisitorEnumeration;
import ims.clinical.forms.edischargespecialcarebabyunitdischargecomponent.GenForm.GroupMidwifeEnumeration;
import ims.clinical.forms.edischargespecialcarebabyunitdischargecomponent.GenForm.GroupVitaminKEnumeration;
import ims.clinical.vo.NeonatalVo;
import ims.clinical.vo.enums.EDischargeLastEvent;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.StaleObjectException;
import ims.edischarge.vo.SummaryRefVo;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	/**
	 * Component interface methods
	 */
	
	public void initialise()
	{
		setRequiredLabels();
		
		form.ccDischargingNurse().initialize(MosType.HCP, HcpDisType.NURSING);
		form.ccDischargingNurse().isRequired(Boolean.TRUE);
		form.setMode(FormMode.VIEW);
		open();
	}
	
	public void initialise(SummaryRefVo voSTHKSummary)
	{
		form.getLocalContext().setSTHKSummary(voSTHKSummary);
		initialise();
	}
	

	public void setReadOnly()
	{
		form.setMode(FormMode.VIEW);
		form.btnNew().setEnabled(false);
		form.btnEdit().setEnabled(false);
	}

	public void clearLastEvent()
	{
		form.getLocalContext().setLastEvent(null);
	}
	
	public EDischargeLastEvent getLastEvent()
	{
		return form.getLocalContext().getLastEvent();
	}
	/**
	 * End Component interface methods
	 */
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		
	}
	
	public void open()
	{
		clearScreen();
		form.getLocalContext().setSelectedInstance(domain.getNeonatalByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		populateScreenFromData(form.getLocalContext().getSelectedInstance());
		updateControlState();
	}

	private void setRequiredLabels()
	{
		form.lblHealth().setTextColor(ims.framework.utils.Color.Red);
		form.lblMidwife().setTextColor(ims.framework.utils.Color.Red);
		form.lblViitaminK().setTextColor(ims.framework.utils.Color.Red);
	}
	
	private void updateControlState()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			if(form.getLocalContext().getSelectedInstance() == null)
			{
				form.btnNew().setVisible(true);
				form.btnEdit().setVisible(false);
			}
			else
			{
				form.btnNew().setVisible(false);
				form.btnEdit().setVisible(true);
			}
			form.cmbHowAdministered().setEnabled(false);
		}
		else
		{
			form.btnNew().setVisible(false);
			form.btnEdit().setVisible(false);
			
			if(form.GroupVitaminK().getValue().equals(GroupVitaminKEnumeration.rdoVitaminKGivenYes))
				form.cmbHowAdministered().setEnabled(true);
			else
				form.cmbHowAdministered().setEnabled(false);
		}
	}

	@Override
	protected void clearScreen()
	{
		super.clearScreen();
		form.ccDischargingNurse().clear();
		form.GroupHealthVisitor().setValue(GroupHealthVisitorEnumeration.None);
		form.GroupMidwife().setValue(GroupMidwifeEnumeration.None);
		form.GroupVitaminK().setValue(GroupVitaminKEnumeration.None);
	}

	@Override
	protected NeonatalVo populateDataFromScreen(NeonatalVo value)
	{
		value = super.populateDataFromScreen(value);
		
		value.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if(!form.GroupHealthVisitor().getValue().equals(GroupHealthVisitorEnumeration.None))
			value.setIsHealthVisitor(form.GroupHealthVisitor().getValue().equals(GroupHealthVisitorEnumeration.rdoVisitorYes));
		if(!form.GroupMidwife().getValue().equals(GroupMidwifeEnumeration.None))
			value.setIsMidwife(form.GroupMidwife().getValue().equals(GroupMidwifeEnumeration.rdoMidwifeYes));
		if(!form.GroupVitaminK().getValue().equals(GroupVitaminKEnumeration.None))
			value.setIsVitaminKGiven(form.GroupVitaminK().getValue().equals(GroupVitaminKEnumeration.rdoVitaminKGivenYes));
		
		value.setDischargingNurse(form.ccDischargingNurse().getValue());
		
		return value;
	}

	@Override
	protected void populateScreenFromData(NeonatalVo value)
	{
		if(value == null)
			return;
			
		super.populateScreenFromData(value);
		
		if(value.getIsHealthVisitorIsNotNull())
			form.GroupHealthVisitor().setValue(value.getIsHealthVisitor() ? GroupHealthVisitorEnumeration.rdoVisitorYes : GroupHealthVisitorEnumeration.rdoVisitorNo);
		if(value.getIsMidwifeIsNotNull())
			form.GroupMidwife().setValue(value.getIsMidwife() ? GroupMidwifeEnumeration.rdoMidwifeYes : GroupMidwifeEnumeration.rdoMidwifeNo);
		if(value.getIsVitaminKGivenIsNotNull())
			form.GroupVitaminK().setValue(value.getIsVitaminKGiven() ? GroupVitaminKEnumeration.rdoVitaminKGivenYes : GroupVitaminKEnumeration.rdoVitaminKGivenNo);
		
		form.ccDischargingNurse().setValue(value.getDischargingNurse());
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		clearScreen();
		setMode(FormMode.EDIT);
	}
	
	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		setMode(FormMode.EDIT);
	}

	@Override
	protected void onRadioButtonGroupVitaminKValueChanged() throws PresentationLogicException
	{
		updateControlState();
		//clear Data
		if(form.GroupVitaminK().getValue().equals(GroupVitaminKEnumeration.rdoVitaminKGivenNo))
			form.cmbHowAdministered().setValue(null);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		setMode(FormMode.VIEW);
		open();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedInstance(populateDataFromScreen(form.getLocalContext().getSelectedInstance()));
		if(save())
		{
			setMode(FormMode.VIEW);
			open();
		}
	}

	private String[] addScreenErrorsToVOErrors(ArrayList screenErrors, String[] arrErrors)
	{
		String[] arrAllErrors = null;

		if (arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);

			int i = 0;
			for (int p = screenErrors.size(); p < arrAllErrors.length; p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}
		else
		{
			if (screenErrors.size() > 0)
			{
				arrAllErrors = new String[screenErrors.size()];

				for (int i = 0; i < screenErrors.size(); i++)
					arrAllErrors[i] = (String) screenErrors.get(i);
			}
		}

		return arrAllErrors;
	}

	private boolean save()
	{
		NeonatalVo voNeonatal = form.getLocalContext().getSelectedInstance();
		
		ArrayList<String> screenErrors = new ArrayList<String>();
		
		if (form.ccDischargingNurse().getValue() == null)
			screenErrors.add("Discharging Midwife/Nurse is a mandatory item.");
		if (form.GroupVitaminK().getValue().equals(GroupVitaminKEnumeration.rdoVitaminKGivenYes)
			&& form.cmbHowAdministered().getValue() == null)
			screenErrors.add("Route for Vitamin K is a mandatory item.");

		String[] arrErrors = voNeonatal.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, arrErrors);
		if(arrScreenAndVoErrors != null)
		{
			engine.showErrors(arrScreenAndVoErrors);
			return false;
		}
		
		try
		{
			domain.saveNeonatal(voNeonatal, form.getLocalContext().getSTHKSummary());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
			setMode(FormMode.VIEW);
			open();
			form.fireCustomControlValueChanged();
			return false;
		}
		
		form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
		form.fireCustomControlValueChanged();
		return true;
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}
}
