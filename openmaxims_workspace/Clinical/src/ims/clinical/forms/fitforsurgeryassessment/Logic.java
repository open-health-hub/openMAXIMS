//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.70 build 3467.22451)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.fitforsurgeryassessment;

import ims.RefMan.vo.FitForSurgeryAssesmentVo;
import ims.RefMan.vo.FitForSurgeryAssessmentLiteVo;
import ims.RefMan.vo.FitForSurgeryAssessmentLiteVoCollection;
import ims.RefMan.vo.FitForSurgeryCommentVo;
import ims.RefMan.vo.FitForSurgeryCommentVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.MedicVo;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridColumnCollection;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.BookingAppointmentForFitForSurgeryAssessmentVo;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final Integer COLUMN_AHCP = new Integer(-2);
	private static final Integer COLUMN_ADTE = new Integer(-1);
	private static final Integer COLUMN_COMMENTS = new Integer(-3);

	private static final int COLUMN_AHCPWIDTH = 200;
	private static final int COLUMN_ADTEWIDTH = 150;
	private static final int COLUMN_COMMENTSWIDTH = -1;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();

		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		boolean isMyRecord = !form.getLocalContext().getCurrentRecordIsNotNull() || (form.getLocalContext().getCurrentRecord().getAuthoringInformationIsNotNull() && form.getLocalContext().getCurrentRecord().getAuthoringInformation().getAuthoringHcpIsNotNull() && form.getLocalContext().getCurrentRecord().getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getLoggedInHcp()));

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnNew().setVisible(true);
			// ------------------------------------------------------------------------------
			// form.btnNew().setEnabled(!form.getLocalContext().getCurrentRecordIsNotNull());
			// ------------------------------------------------------------------------------
			form.btnEdit().setVisible(form.getLocalContext().getCurrentRecordIsNotNull());
			form.btnEdit().setEnabled(form.getLocalContext().getCurrentRecordIsNotNull());
		}
		else
		{
			form.ccAuthInfo().setEnabledDateTime(false);
			form.ccAuthInfo().setEnabledAuthoringHCP(form.ccAuthInfo().getValue() == null || !form.ccAuthInfo().getValue().getAuthoringHcpIsNotNull());
			form.richTextCom().setEnabled(isMyRecord);
		}
		// ------------------------------
		if (engine.isRIEMode() == true)
		{
			form.btnNew().setEnabled(false);
			form.btnEdit().setEnabled(false);
		}
		// --------------------------------
		Boolean asaScore = form.getLocalContext().getisAnaesthetistIsNotNull() && form.getLocalContext().getisAnaesthetist();

		form.lblASAScore().setVisible(asaScore);
		form.intAsaScore().setVisible(asaScore);
		form.intAsaScore().setEnabled(form.getMode().equals(FormMode.EDIT) && asaScore);

		form.lblReason().setVisible(!form.chkFitForSurgery().getValue());
		form.lblReasonSec().setVisible(!form.chkFitForSurgery().getValue());
		form.cmbReason().setVisible(!form.chkFitForSurgery().getValue());
		form.cmbReason().setEnabled(form.getMode().equals(FormMode.EDIT) && !form.chkFitForSurgery().getValue());

		form.getContextMenus().Clinical.getSuitableForSurgeryCommentsAddCommentItem().setVisible(form.getMode().equals(FormMode.EDIT));

		boolean isMyRecordinGrid = false;
		if (form.dyngrdComments().getValue() instanceof FitForSurgeryCommentVo)
		{
			FitForSurgeryCommentVo comment = (FitForSurgeryCommentVo) form.dyngrdComments().getValue();
			isMyRecordinGrid = comment.getAuthoringInformationIsNotNull() && comment.getAuthoringInformation().getAuthoringHcpIsNotNull() && comment.getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getLoggedInHcp());
		}
		form.getContextMenus().Clinical.getSuitableForSurgeryCommentsEditCommentItem().setVisible(form.getMode().equals(FormMode.EDIT) && isMyRecordinGrid);
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	private void newInstance()
	{
		clearInstanceControls();

		form.getLocalContext().setCurrentRecord(null);
		form.ccAuthInfo().initializeComponent();

		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	private void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			open();
		}
	}

	private boolean save() throws PresentationLogicException
	{
		try
		{
			FitForSurgeryAssesmentVo record = populateInstanceData(form.getLocalContext().getCurrentRecord());
			
			//WDEV-11692 - starts here
			if(record.getOPDAppt() == null)
			{
				BookingAppointmentForFitForSurgeryAssessmentVo currentAppointment = domain.getLatestAppointment(form.getGlobalContext().Core.getPatientShort());
				
				if(currentAppointment == null)
					currentAppointment = form.getGlobalContext().Clinical.getAppointmentForFitForSurgery();
				
				if(currentAppointment == null)
				{
					engine.open(form.getForms().Clinical.PatientAppointmentsDialog);
					return false;
				}
				
				record.setOPDAppt(currentAppointment);
			}
			//WDEV-11692 - ends here
			
			String errors[] = record.validate();

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			FitForSurgeryAssesmentVo tempsave = domain.save(record);
			form.getLocalContext().setCurrentRecord(tempsave);

			return true;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
	}

	private FitForSurgeryAssesmentVo populateInstanceData(FitForSurgeryAssesmentVo fitForSurgeryAssesmentVo)
	{
		// WDEV-11669 - Changed the way CareContext gets recorded
		if (fitForSurgeryAssesmentVo == null)
		{
			fitForSurgeryAssesmentVo = new FitForSurgeryAssesmentVo();
			fitForSurgeryAssesmentVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}

		fitForSurgeryAssesmentVo.setAuthoringInformation(form.ccAuthInfo().getValue());
		fitForSurgeryAssesmentVo.setASAScore(form.intAsaScore().getValue());
		fitForSurgeryAssesmentVo.setFitForSurgery(form.chkFitForSurgery().getValue());
		fitForSurgeryAssesmentVo.setNotFitReason(form.cmbReason().getValue());
		fitForSurgeryAssesmentVo.setComments(form.richTextCom().getValue());
		
		fitForSurgeryAssesmentVo.setFitComments(populateGridDataFromScreen());

		// WDEV-11669
		fitForSurgeryAssesmentVo.setAnaestheticType(form.cmbAnaesthetic().getValue());

		return fitForSurgeryAssesmentVo;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Populate record browser
		populateRecordBrowser(domain.listAssessments(form.getGlobalContext().Core.getCurrentCareContext()));

		// Reselect local context
		form.getLocalContext().setCurrentRecord(domain.getAssessment(form.recbrAssessments().getValue()));
		// Populate instance controls with selected fir for surgery
		populateInstanceControls(form.getLocalContext().getCurrentRecord());

		form.setMode(FormMode.VIEW);
	}

	private void populateInstanceControls(FitForSurgeryAssesmentVo fitForSurgery)
	{
		clearInstanceControls();

		if (fitForSurgery == null)
			return;

		form.ccAuthInfo().setValue(fitForSurgery.getAuthoringInformationIsNotNull() ? fitForSurgery.getAuthoringInformation() : null);
		form.intAsaScore().setValue(fitForSurgery.getASAScoreIsNotNull() ? fitForSurgery.getASAScore() : null);
		form.chkFitForSurgery().setValue(fitForSurgery.getFitForSurgery());
		form.cmbReason().setValue(fitForSurgery.getNotFitReasonIsNotNull() ? fitForSurgery.getNotFitReason() : null);
		form.richTextCom().setValue(fitForSurgery.getCommentsIsNotNull() ? fitForSurgery.getComments() : null);
		populateGridScreenFromData(fitForSurgery.getFitComments());
		
		// WDEV-11669
		form.cmbAnaesthetic().setValue(fitForSurgery.getAnaestheticType());
	}

	private void clearInstanceControls()
	{
		form.ccAuthInfo().setValue(null);
		form.intAsaScore().setValue(null);
		form.chkFitForSurgery().setValue(null);
		form.cmbReason().setValue(null);
		form.richTextCom().setValue(null);
		form.dyngrdComments().getRows().clear();
		
		// WDEV-11669
		form.cmbAnaesthetic().setValue(null);
	}

	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		super.initialize();
		// -------------------------------------------
		form.getLocalContext().setCurrentRecord(null);
		// -------------------------------------------
		form.ccAuthInfo().setIsRequiredPropertyToControls(true);

		form.getLocalContext().setisAnaesthetist(false);

		Object medic = domain.getHcpUser();

		if (medic instanceof MedicVo)
		{
			if (((MedicVo) medic).getMedicTypeIsNotNull() && ((MedicVo) medic).getMedicType().equals(HcpDisType.ANAESTHETIST))
			{
				form.getLocalContext().setisAnaesthetist(true);
			}
		}
		form.getLocalContext().setLoggedInHcp(medic instanceof HcpRefVo ? (HcpRefVo) medic : null);

		initGridComments();
	}

	private void initGridComments()
	{
		form.dyngrdComments().clear();
		DynamicGridColumnCollection columns = form.dyngrdComments().getColumns();
		DynamicGridColumn newColumn = columns.newColumn("Authoring Date/Time", COLUMN_ADTE, true);
		newColumn.setWidth(COLUMN_ADTEWIDTH);

		newColumn = columns.newColumn("Authoring HCP", COLUMN_AHCP, true);
		newColumn.setWidth(COLUMN_AHCPWIDTH);

		newColumn = columns.newColumn("Comments", COLUMN_COMMENTS, true);
		newColumn.setWidth(COLUMN_COMMENTSWIDTH);
		newColumn.setCanGrow(true);

		form.dyngrdComments().setSelectable(true);
	}

	private FitForSurgeryCommentVoCollection populateGridDataFromScreen()
	{
		if (form.dyngrdComments().getRows().size() == 0)
			return null;
		FitForSurgeryCommentVoCollection result = new FitForSurgeryCommentVoCollection();
		for (int i = 0; i < form.dyngrdComments().getRows().size(); i++)
		{
			result.add((FitForSurgeryCommentVo) form.dyngrdComments().getRows().get(i).getValue());
		}
		return result;
	}

	private void populateGridScreenFromData(FitForSurgeryCommentVoCollection comments)
	{
		form.dyngrdComments().getRows().clear();
		if (comments == null)
			return;
		comments.sort(new Comparator<FitForSurgeryCommentVo>()
		{

			public int compare(FitForSurgeryCommentVo o1, FitForSurgeryCommentVo o2)
			{
				return o2.getAuthoringInformation().getAuthoringDateTime().compareTo(o1.getAuthoringInformation().getAuthoringDateTime());
			}
		});
		for (int i = 0; i < comments.size(); i++)
		{
			addUpdateRow(null, comments.get(i));
		}

	}

	private void addUpdateRow(DynamicGridRow row, FitForSurgeryCommentVo comment)
	{
		if (comment == null)
			return;
		if (row == null)
			row = createNewRow();

		DynamicGrid grid = form.dyngrdComments();
		DynamicGridColumn column = null;
		if (comment.getAuthoringInformationIsNotNull())
		{
			column = grid.getColumns().getByIdentifier(COLUMN_ADTE);
			row.getCells().get(column).setValue(comment.getAuthoringInformation().getAuthoringDateTime());
			column = grid.getColumns().getByIdentifier(COLUMN_AHCP);
			row.getCells().get(column).setValue(comment.getAuthoringInformation().getAuthoringHcpIsNotNull() ? comment.getAuthoringInformation().getAuthoringHcp().getIHcpName() : "");
		}
		column = grid.getColumns().getByIdentifier(COLUMN_COMMENTS);
		row.getCells().get(column).setValue(comment.getComment());
		row.setValue(comment);

	}

	private DynamicGridRow createNewRow()
	{
		return createNewRow(null);

	}

	private DynamicGridRow createNewRow(DynamicGridRow beforeRow)
	{

		DynamicGridRow newRow;
		if (beforeRow == null)
		{
			newRow = form.dyngrdComments().getRows().newRow();
		}
		else
		{
			newRow = form.dyngrdComments().getRows().newRowBefore(beforeRow);
		}
		newRow.setReadOnly(true);
		DynamicGridColumnCollection columns = form.dyngrdComments().getColumns();
		DynamicGridCell newCell = newRow.getCells().newCell(columns.getByIdentifier(COLUMN_AHCP), DynamicCellType.STRING);
		newCell.setReadOnly(true);
		newCell = newRow.getCells().newCell(columns.getByIdentifier(COLUMN_ADTE), DynamicCellType.DATETIME);
		newCell.setReadOnly(true);
		newCell = newRow.getCells().newCell(columns.getByIdentifier(COLUMN_COMMENTS), DynamicCellType.WRAPTEXT);
		newCell.setReadOnly(true);

		return newRow;
	}

	@Override
	protected void onChkFitForSurgeryValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		if (!form.cmbReason().getVisible())
			form.cmbReason().setValue(null);
	}

	protected void onRecbrAssessmentsValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setCurrentRecord(domain.getAssessment(form.recbrAssessments().getValue()));

		populateInstanceControls(form.getLocalContext().getCurrentRecord());

		updateControlsState();
	}

	private void populateRecordBrowser(FitForSurgeryAssessmentLiteVoCollection assessmentList) throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear record browser
		form.recbrAssessments().clear();

		if (assessmentList == null)
			return;

		// Add assessments to record browser
		for (FitForSurgeryAssessmentLiteVo assessment : assessmentList)
		{
			StringBuffer displayInfo = new StringBuffer();

			if (assessment == null || !assessment.getAuthoringInformationIsNotNull())
				continue;

			displayInfo.append(assessment.getAuthoringInformation().getAuthoringDateTimeIsNotNull() ? assessment.getAuthoringInformation().getAuthoringDateTime().toString(true) : "");
			displayInfo.append(" - ");
			displayInfo.append(assessment.getAuthoringInformation().getAuthoringHcpIsNotNull() ? assessment.getAuthoringInformation().getAuthoringHcp().toString() : "");

			form.recbrAssessments().newRow(assessment, displayInfo.toString());
		}

		// Select appropriate record
		if (form.getLocalContext().getCurrentRecordIsNotNull())
		{
			form.recbrAssessments().setValue(form.getLocalContext().getCurrentRecord());
		}
		else if (assessmentList.size() > 0)
		{
			form.recbrAssessments().setValue(assessmentList.get(0));
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.SuitableForSurgeryComments.AddComment:
				doAddComment();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.SuitableForSurgeryComments.EditComment:
				doEditComment();
			default:
				break;
		}

	}

	private void doEditComment()
	{
		form.getGlobalContext().Clinical.setSelectedFitForSurgeryComment((FitForSurgeryCommentVo) form.dyngrdComments().getValue());
		engine.open(form.getForms().Clinical.FitForSurgeryComment);
	}

	private void doAddComment()
	{
		form.getGlobalContext().Clinical.setSelectedFitForSurgeryComment(null);
		form.dyngrdComments().setValue(null);
		engine.open(form.getForms().Clinical.FitForSurgeryComment);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Clinical.FitForSurgeryComment) && result.equals(DialogResult.OK))
		{

			DynamicGridRow row = form.dyngrdComments().getSelectedRow();
			FitForSurgeryCommentVo comment = form.getGlobalContext().Clinical.getSelectedFitForSurgeryComment();
			if (row == null && form.dyngrdComments().getRows().size() > 0)
				row = createNewRow(getWhereToInsert(comment.getAuthoringInformation().getAuthoringDateTime(), 0, form.dyngrdComments().getRows().size() - 1));

			addUpdateRow(row, comment);
			form.dyngrdComments().setValue(null);
			form.dyngrdComments().setValue(comment);
		}
		
		//WDEV-11692 - starts here
		if(formName.equals(form.getForms().Clinical.PatientAppointmentsDialog) && DialogResult.OK.equals(result))
		{
			if(save())
				open();
		}

		updateControlsState();
	}

	@Override
	protected void onDyngrdCommentsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();

	}

	private DynamicGridRow getWhereToInsert(DateTime date, int start, int end)
	{
		// Binary Search to find the position of the new comment in grid

		int pivot = (end - start) / 2 + start;

		DynamicGridRow pivotRow = form.dyngrdComments().getRows().get(pivot);
		DateTime value = ((FitForSurgeryCommentVo) pivotRow.getValue()).getAuthoringInformation().getAuthoringDateTime();

		if (date.equals(value))
			return pivotRow;

		if (end - start <= 0)
		{
			DynamicGridRow endRow = form.dyngrdComments().getRows().get(end);
			if (date.isGreaterThan(((FitForSurgeryCommentVo) endRow.getValue()).getAuthoringInformation().getAuthoringDateTime()))
				return endRow;
			else
				return null;
		}

		if (date.isGreaterThan(value))
			return getWhereToInsert(date, start, pivot);
		else
			return getWhereToInsert(date, pivot + 1, end);

	}
}
