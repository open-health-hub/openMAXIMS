//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Dara Hickey using IMS Development Environment (version 1.37 build 2123.24201)
//Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.clinicalnotedrawing;

import ims.assessment.configuration.vo.UserDefinedObjectComponentRefVo;
import ims.assessment.vo.GraphicAssessmentShortVo;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentDataListVo;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentListVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.PatientAssessmentVoCollection;
import ims.assessment.vo.PatientGraphicAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentVoCollection;
import ims.assessment.vo.PatientUserDefinedObjectListVo;
import ims.assessment.vo.PatientUserDefinedObjectListVoCollection;
import ims.assessment.vo.PatientUserDefinedObjectVo;
import ims.assessment.vo.UserAssessmentLiteVo;
import ims.assessment.vo.UserDefinedObjectComponentVo;
import ims.assessment.vo.UserDefinedObjectListVo;
import ims.clinical.vo.NotingDetailsVo;
import ims.clinical.vo.OutpatientNotesOutcomeVo;
import ims.clinical.vo.SoapNoteVo;
import ims.clinical.vo.lookups.OpdFollowUp;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ClinicalNotesRefVo;
import ims.core.forms.authoringinfo.IComponent;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalNoteStatusVo;
import ims.core.vo.ClinicalNoteStatusVoCollection;
import ims.core.vo.ClinicalNotesShortVo;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.DrawingGraphicImageVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.SOAPVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.lookups.ClinicalNoteType;
import ims.core.vo.lookups.ClinicalNotesStatus;
import ims.core.vo.lookups.ClinicalNotingMode;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PatientAssessmentStatusReasonCollection;
import ims.core.vo.lookups.SourceOfNote;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	// Dynamic Grid Column Identifiers
	private static final Integer	HEADER_COLUMN			= new Integer(-1);
	private static final Integer	STATUS_COLUMN			= new Integer(-2);
	private static final Integer	REASON_COLUMN			= new Integer(-3);
	private static final Integer	HELP_URL_COLUMN			= new Integer(-4);
	private static final Integer	AUTHORING_COLUMN		= new Integer(-5);

	// Dynamic Grid Column Width
	private static final int		HEADER_COLUMN_WIDTH		= 350;
	private static final int		STATUS_COLUMN_WIDTH		= 110;
	private static final int		REASON_COLUMN_WIDTH		= 120;
	private static final int		HELP_URL_COLUMN_WIDTH	= 50;
	private static final int		AUTHORING_COLUMN_WIDTH	= -1;

	// private static final String
	private static final String		PROBLEMS_SUBJECTIVE		= "-1";
	private static final String		PROBLEMS_OBJECTIVE		= "-2";
	private static final String		DIAGNOSIS				= "-3";
	private static final String		PROCEDURES				= "-4";
	private static final String		OP_PROBLEMS				= "-5";
	private static final String		OP_MEDICATION			= "-6";
	private static final String		OP_DIAGNOSIS			= "-7";
	private static final String		OP_SURGERY				= "-8";

	private void open() throws FormOpenException
	{
		form.lyrTabs().tabOPDNote().customControlReviewedOP().ignoreComponentReadonlyFlag(Boolean.TRUE);
		clearScreen();
		displayClinicalInfo();
		clearContext();

		form.setMode(FormMode.VIEW);
		checkLoggedInUser();

		// WDEV-2301
		if (checkForAssessment())
			return;

		if (checkClinicalNoteForCurrentClinicalNote())
			return;

		if (checkClinicalNoteForCurrentCareContext())
			return;

		openNotingDetails();
	}

	private void checkForDiscipline()
	{
		MemberOfStaffShortVo mos = null;
		if (getDisciplineForLoggedInUser(form.getGlobalContext().Clinical.getCurrentClinicalNote()) != null)
			mos = getDisciplineForLoggedInUser(form.getGlobalContext().Clinical.getCurrentClinicalNote());
		else
		{
			engine.showMessage("No Discipline is available. Please choose an authoring user.");
			return;
		}

		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsTranscribedIsNotNull())
		{
			if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getDisciplineIsNotNull() && mos.getHcpIsNotNull())
			{
				//if (!form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcp().getHcpType().equals(mos.getHcp().getHcpType()) && (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() && !form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT) || form.getGlobalContext().Clinical.getReturnToFormMode() == null))
				if(form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfoIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcpIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcp().getHcpTypeIsNotNull())
					  if (!form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcp().getHcpType().equals(mos.getHcp().getHcpType()) && (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() && !FormMode.EDIT.equals(form.getGlobalContext().Clinical.getReturnToFormMode()) || form.getGlobalContext().Clinical.getReturnToFormMode() == null))

				{
					if (form.lyrTabs().tabClinicalNotes().isHeaderVisible())
					{
						form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(false);
						form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(false);
					}
					if (form.lyrTabs().tabOPDNote().isHeaderVisible())
					{
						form.lyrTabs().tabOPDNote().btnNewOPClinicalNote().setVisible(false);
						form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(false);
					}
				}
			}
			// Non HCP
			else
			{
				if (form.getMode().equals(FormMode.VIEW) && domain.getHcpLiteUser() == null)
				{

					if (form.lyrTabs().tabClinicalNotes().isHeaderVisible())
					{
						form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(false);
						form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(false);
					}
					if (form.lyrTabs().tabOPDNote().isHeaderVisible())
					{
						form.lyrTabs().tabOPDNote().btnNewOPClinicalNote().setVisible(false);
						form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(false);
					}

					if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatusIsNotNull() && !(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.ACTIVE) || form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.CORRECTED)))
					{
						if (form.lyrTabs().tabClinicalNotes().isHeaderVisible())
						{
							form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(true);
						}
						if (form.lyrTabs().tabOPDNote().isHeaderVisible())
						{
							form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(true);
						}
					}
				}
			}
		}
	}

	private boolean checkForAssessment()
	{
		if (engine.getPreviousNonDialogFormName() != null && (engine.getPreviousNonDialogFormName().equals(form.getForms().Assessment.UserAssessmentInstantiationWithComponent) || engine.getPreviousNonDialogFormName().equals(form.getForms().Assessment.GraphicAssessmentInstantiation)))
		{
			openAssessment();
			return true;
		}
		return false;
	}

	private boolean checkClinicalNoteForCurrentCareContext() throws FormOpenException
	{
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && domain.getHcpUser()!=null) //WDEV-19027  //temporary
		{
			ClinicalNotesVo voNote = domain.getClinicalNotesForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			if (voNote != null)
			{
				if (voNote.getSourceOfNote() == null)
					throw new FormOpenException("There is a clinical note of a different type already recorded on the system for this clincal contact");
				if (voNote.getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP))
				{
					openClinicalNotes();
					checkForDiscipline();
				}
					
				else if ( voNote.getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP))
				{
					checkForDiscipline();
					openOPClinicalNotes();
				}
				else throw new FormOpenException("There is a clinical note of a different type already recorded on the system for this clincal contact");
					
				return true;
			}
			return false;
		}
		return false;
	}

	private boolean checkClinicalNoteForCurrentClinicalNote() throws FormOpenException
	{
		if (engine.getFormName() != null && form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getSourceOfNoteIsNotNull() && domain.getHcpUser()!=null) //WDEV-19027  //temporary
		{
			
				if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP))
				{
					openClinicalNotes();
					checkForDiscipline();
				}
				else if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP))
				{
					checkForDiscipline();
					openOPClinicalNotes();
				}
				else
					throw new FormOpenException("There is a clinical note of a different type already recorded on the system for this clincal contact");
			
				return true;
		}
		return false;
	}

	private void initialiseScreenControls()
	{
		form.lyrTabs().tabClinicalNotes().chkForReview().setVisible(true);
		form.lyrTabs().tabClinicalNotes().cmbDiscipline().setVisible(true);
		form.lyrTabs().tabClinicalNotes().lblDiscipline().setVisible(true);
		form.lyrTabs().tabClinicalNotes().setcustomControlReviewedVisible(false);
		form.lyrTabs().tabClinicalNotes().chkMarkAsReviewed().setVisible(false);
	}

	private void initialiseOPScreenControls()
	{
		form.lyrTabs().tabOPDNote().chkForReviewOP().setVisible(true);
		form.lyrTabs().tabOPDNote().cmbDisciplineOP().setVisible(true);
		form.lyrTabs().tabOPDNote().lblDisciplineOP().setVisible(true);
		form.lyrTabs().tabOPDNote().setcustomControlReviewedOPVisible(false);
		form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().setVisible(false);
	}

	private boolean returnContextType()
	{
		ContextType contexType = form.getGlobalContext().Core.getCurrentCareContext().getContext();

		if (contexType.equals(ContextType.INPATIENT))
			return true;

		return false;
	}

	private void checkLoggedInUser()
	{
		if (domain.getHcpUser() == null)
		{
			if (returnContextType())
			{
				form.lyrTabs().tabClinicalNotes().setHeaderVisible(true);
				form.lyrTabs().tabClinicalNotes().setHeaderEnabled(false);
				form.lyrTabs().tabOPDNote().setHeaderVisible(false);
			}
			else if (!returnContextType())
			{
				form.lyrTabs().tabClinicalNotes().setHeaderVisible(false);
				form.lyrTabs().tabOPDNote().setHeaderVisible(true);
				form.lyrTabs().tabOPDNote().setHeaderEnabled(false);
			}

			NotingDetailsVo voNote = domain.getNotingDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext()); //WDEV-19027 
			if (voNote != null)
			{
				if ((voNote.getIsDictatedIsNotNull() && voNote.getIsDictated().booleanValue()) || (voNote.getIsWrittenIsNotNull() && voNote.getIsWritten().booleanValue()))
				{
					if (returnContextType())
						form.lyrTabs().tabClinicalNotes().setHeaderEnabled(true);
					else if (!returnContextType())
						form.lyrTabs().tabOPDNote().setHeaderEnabled(true);
				}
			}
		}
	}

	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		if (form.getGlobalContext().Core.getCurrentCareContext() == null)  //WDEV-19027 
			throw new FormOpenException("Form cannot be loaded without a Care context");

		// WDEV-2511
		if (domain.getMosUser() == null)
			throw new FormOpenException("The User Account is not linked to a HCP or Member of Staff, this form will not be active. Please contact the System Administrator.");

		setCurrentClinicalNote();
		initialise();
		open();
	}

	private void initialise()
	{
		form.lyrTabs().tabClinicalNotes().customControlReviewed().ignoreComponentReadonlyFlag(Boolean.TRUE);
		form.lyrTabs().tabOPDNote().customControlReviewedOP().ignoreComponentReadonlyFlag(Boolean.TRUE);

		form.lyrTabs().tabAssessment().setHeaderVisible(true);
		form.lyrTabs().tabDrawing().setHeaderVisible(true);
		form.lyrTabs().tabDetails().setHeaderVisible(true);

		if (returnContextType())
		{
			form.lyrTabs().tabClinicalNotes().setHeaderVisible(true);
			form.lyrTabs().tabClinicalNotes().setHeaderEnabled(true);
			form.lyrTabs().tabOPDNote().setHeaderVisible(false);

		}
		else if (!returnContextType())
		{
			form.lyrTabs().tabClinicalNotes().setHeaderVisible(false);
			form.lyrTabs().tabOPDNote().setHeaderVisible(true);
			form.lyrTabs().tabOPDNote().setHeaderEnabled(true);
		}

		form.lyrTabs().showtabDetails();

		form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().setValue(null);

		showHideIPTranscribedControls(false);
		showHideOPTranscribedControls(false);

		loadAvalilableImages();
	}

	private void showHideIPTranscribedControls(boolean bShow)
	{
		form.lyrTabs().tabClinicalNotes().lblTransByIP().setVisible(bShow);
		form.lyrTabs().tabClinicalNotes().lblTransDTIP().setVisible(bShow);
		form.lyrTabs().tabClinicalNotes().dtimTransByIP().setVisible(bShow);
		form.lyrTabs().tabClinicalNotes().qmbTransIP().setVisible(bShow);

		form.lyrTabs().tabClinicalNotes().dtimTransByIP().setEnabled(false);
		form.lyrTabs().tabClinicalNotes().qmbTransIP().setEnabled(false);
	}

	private void showHideOPTranscribedControls(boolean bShow)
	{
		form.lyrTabs().tabOPDNote().lblTransByOP().setVisible(bShow);
		form.lyrTabs().tabOPDNote().lblTransDTOP().setVisible(bShow);
		form.lyrTabs().tabOPDNote().dtimTransDTOP().setVisible(bShow);
		form.lyrTabs().tabOPDNote().qmbTransByOP().setVisible(bShow);

		form.lyrTabs().tabOPDNote().dtimTransDTOP().setEnabled(false);
		form.lyrTabs().tabOPDNote().qmbTransByOP().setEnabled(false);
	}

	private void displayClinicalInfo()
	{
		ClinicalNotesVo voClinicalNotes = new ClinicalNotesVo();
		form.getLocalContext().setClinicalNotes(voClinicalNotes);
	}

	private void clearScreen()
	{
		form.lyrTabs().tabOPDNote().richTextInstructions().setValue(null);
		form.lyrTabs().tabOPDNote().richTextObjective().setValue(null);
		form.lyrTabs().tabOPDNote().richTextPlan().setValue(null);
	}

	private void displayError(String error)
	{
		engine.showMessage(error);
	}

	private void clearContext()
	{
		form.getGlobalContext().COE.SkinBodyChart.setFindingsVO(null);
		form.getGlobalContext().COE.SkinBodyChart.setSkinAssessmentVO(null);
		form.getGlobalContext().ProtoTemp.setClinicalNoteDrawingReturnFormName(null);
		form.getGlobalContext().ProtoTemp.setCliniacalNoteDrawingText(null);
		
		form.getLocalContext().setSOAPVo(null);
	}

	protected void onFormModeChanged()
	{
		form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().setIsRequiredPropertyToControls(FormMode.EDIT.equals(form.getMode()));//WDEV-16524
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (form.lyrTabs().tabClinicalNotes().isVisible() == true)
			{
				if (!isDialog())
				{
					makeLinksClinicalNoteEnable(true);
				}
				else
				{
					makeLinksClinicalNoteEnable(false);
					isBtnCNCloseVisible(false);
				}
			}
			if (form.lyrTabs().tabOPDNote().isVisible() == true)
			{
				if (!isDialog())
					makeLinksOPClinicalNoteEnable(true);
				else
				{
					makeLinksOPClinicalNoteEnable(false);
					isBtnOPCloseVisible(false);
				}
				form.lyrTabs().tabOPDNote().customControlOPAuthoring().setIsRequiredPropertyToControls(true);
				form.lyrTabs().tabOPDNote().customControlReviewedOP().setIsRequiredPropertyToControls(true);
			}
		}
		else
		{
			if (form.lyrTabs().tabDrawing().isVisible())
			{
				form.lyrTabs().tabDrawing().customGraphic().setReadOnly(Boolean.TRUE);
				form.lyrTabs().tabDrawing().customGraphic().setEnabled(Boolean.TRUE);
			}

			if (!isDialog())
			{
				isBtnCNCloseVisible(false);
				isBtnOPCloseVisible(false);
			}
			else
			{
				if (form.lyrTabs().tabClinicalNotes().isVisible())
					isBtnCNCloseVisible(true);
				if (form.lyrTabs().tabOPDNote().isVisible())
					isBtnOPCloseVisible(true);
			}

		}
		enableContextMenu();

		if (form.lyrTabs().tabOPDNote().isVisible())
			enableFollowUpInstructions();

		if (form.lyrTabs().tabClinicalNotes().isVisible() == true)
		{
			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCPIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTimeIsNotNull())
			{
				setCustomReviewed(Boolean.FALSE);
				form.lyrTabs().tabClinicalNotes().chkMarkAsReviewed().setEnabled(false);

				form.lyrTabs().tabClinicalNotes().cmbStatusIP().setEnabled(false);

				AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
				voAuthoringInformation.setAuthoringHcp(form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCP());
				voAuthoringInformation.setAuthoringDateTime(form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTime());
				form.lyrTabs().tabClinicalNotes().customControlReviewed().setValue(voAuthoringInformation);
			}
			else
			{
				form.lyrTabs().tabClinicalNotes().chkForReview().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);

				if (form.getMode().equals(FormMode.EDIT))
				{
					if (form.lyrTabs().tabClinicalNotes().chkForReview().getValue() == false)
						form.lyrTabs().tabClinicalNotes().cmbDiscipline().setEnabled(false);
					else
						form.lyrTabs().tabClinicalNotes().cmbDiscipline().setEnabled(true);
				}
				else
				{
					form.lyrTabs().tabClinicalNotes().cmbDiscipline().setEnabled(false);
				}

				// form.lyrTabs().tabClinicalNotes().cmbStatusIP().setEnabled(true);

				form.lyrTabs().tabClinicalNotes().cmbStatusIP().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
				// form.lyrTabs().tabClinicalNotes().cmbDiscipline().setEnabled(form.getMode().equals(FormMode.EDIT)
				// ? true : false);
				form.lyrTabs().tabClinicalNotes().setcustomControlReviewedEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
				form.lyrTabs().tabClinicalNotes().chkMarkAsReviewed().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
			}

			// If is in Correct Mode disable chkForReview and cmbDiscipline
			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
			{
				// In Correct mode
				if (correctModeIP(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus()))
				{
					form.lyrTabs().tabClinicalNotes().chkForReview().setEnabled(false);
					form.lyrTabs().tabClinicalNotes().cmbDiscipline().setEnabled(false);
					form.lyrTabs().tabClinicalNotes().cmbStatusIP().setEnabled(false);
				}
				else
				{
					if (form.getMode().equals(FormMode.EDIT))
					{
						// TODO
						if (form.getGlobalContext().Clinical.getCurrentClinicalNote() != null //wdev-9481
							&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() 
							&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
						{
							form.lyrTabs().tabClinicalNotes().cmbStatusIP().setEnabled(false);
						}
						else
							form.lyrTabs().tabClinicalNotes().cmbStatusIP().setEnabled(true);
					}
					else
						form.lyrTabs().tabClinicalNotes().cmbStatusIP().setEnabled(false);
				}
			}
		}

		if (form.lyrTabs().tabOPDNote().isVisible() == true)
		{
			if (form.getLocalContext().getCurrentOPNoteIsNotNull())
			{
				OutpatientNotesOutcomeVo voOutpatientNotesOutcome = form.getLocalContext().getCurrentOPNote();

				if (voOutpatientNotesOutcome.getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getForReviewIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getReviewingHCPIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getReviewingDateTimeIsNotNull())

				{

					setCustomReviewedOP(Boolean.FALSE);
					form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().setEnabled(false);

					form.lyrTabs().tabOPDNote().cmbStatusOP().setEnabled(false);

					AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
					voAuthoringInformation.setAuthoringHcp(form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCP());
					voAuthoringInformation.setAuthoringDateTime(form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTime());
					form.lyrTabs().tabOPDNote().customControlReviewedOP().setValue(voAuthoringInformation);
				}
				else
				{
					form.lyrTabs().tabOPDNote().chkForReviewOP().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);

					if (form.lyrTabs().tabOPDNote().chkForReviewOP().getValue() == false)
						form.lyrTabs().tabOPDNote().cmbDisciplineOP().setEnabled(false);
					else
						form.lyrTabs().tabClinicalNotes().cmbDiscipline().setEnabled(true);

					form.lyrTabs().tabOPDNote().cmbStatusOP().setEnabled(true);

					// form.lyrTabs().tabOPDNote().cmbDisciplineOP().setEnabled(form.getMode().equals(FormMode.EDIT)
					// ? true : false);
					form.lyrTabs().tabOPDNote().setcustomControlReviewedOPEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
					form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);

				}

				// If is in Correct Mode disable chkForReviewOP and
				// cmbDisciplineOP
				if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
				{
					// In Correct mode
					if (correctModeOP(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus()))
					{
						form.lyrTabs().tabOPDNote().chkForReviewOP().setEnabled(false);
						form.lyrTabs().tabOPDNote().cmbDisciplineOP().setEnabled(false);
						form.lyrTabs().tabOPDNote().cmbStatusOP().setEnabled(false);
					}
					else
					{
						if (form.getMode().equals(FormMode.EDIT))
						{
							// TODO
							if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
							{
								form.lyrTabs().tabOPDNote().cmbStatusOP().setEnabled(false);
							}
							else
								form.lyrTabs().tabOPDNote().cmbStatusOP().setEnabled(true);
						}
						else
						{
							form.lyrTabs().tabOPDNote().cmbStatusOP().setEnabled(false);
							form.lyrTabs().tabOPDNote().cmbDisciplineOP().setEnabled(false);
						}
					}

				}
			}
			else
			{
				form.lyrTabs().tabOPDNote().chkForReviewOP().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
				form.lyrTabs().tabOPDNote().cmbDisciplineOP().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
				form.lyrTabs().tabOPDNote().setcustomControlReviewedOPEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
				form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
				form.lyrTabs().tabOPDNote().cmbStatusOP().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
			}
		}
		
		form.lyrTabs().tabClinicalNotes().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()) && domain.getHcpUser()!=null);//WDEV-19027  //temporary 
		form.lyrTabs().tabOPDNote().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()) && domain.getHcpUser()!=null);//WDEV-19027  //temporary 
	}

	private void showTabClinicalNote()
	{
		form.lyrTabs().tabAssessment().setHeaderVisible(false);
		form.lyrTabs().tabClinicalNotes().setHeaderVisible(true);
		form.lyrTabs().tabDetails().setHeaderVisible(false);
		form.lyrTabs().tabDrawing().setHeaderVisible(false);
		form.lyrTabs().tabOPDNote().setHeaderVisible(false);
	}

	private void showTabOPClinicalNote()
	{
		form.lyrTabs().tabAssessment().setHeaderVisible(false);
		form.lyrTabs().tabClinicalNotes().setHeaderVisible(false);
		form.lyrTabs().tabDetails().setHeaderVisible(false);
		form.lyrTabs().tabDrawing().setHeaderVisible(false);
		form.lyrTabs().tabOPDNote().setHeaderVisible(true);
	}

	private void showAllTabs()
	{
		form.lyrTabs().tabAssessment().setHeaderVisible(true);
		form.lyrTabs().tabClinicalNotes().setHeaderVisible(true);
		form.lyrTabs().tabDetails().setHeaderVisible(true);
		form.lyrTabs().tabDrawing().setHeaderVisible(true);
		form.lyrTabs().tabOPDNote().setHeaderVisible(true);
	}

	protected void onlyrTabsTabChanged(LayerBridge tab)
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
		if (tab.getCaption().compareToIgnoreCase("Noting Details") == 0)
			openNotingDetails();

		if (tab.getCaption().compareToIgnoreCase("Clinical Notes") == 0)
			openClinicalNotes();

		if (tab.getCaption().compareToIgnoreCase("Graphic Annotation") == 0)
			openDrawing();

		if (tab.getCaption().compareToIgnoreCase("Assessments") == 0)
			openAssessment();

		if (tab.getCaption().compareToIgnoreCase("OP Clinical Notes") == 0)
			openOPClinicalNotes();
		}
	}

	
	private PatientUserDefinedObjectVo populatePatientAssessmentFromUserDefinedObject(ims.assessment.vo.UserDefinedObjectVo voUserDefinedObject)
	{
		if (voUserDefinedObject == null)
			throw new CodingRuntimeException("No UserDefinedObjectVo provided");

		PatientUserDefinedObjectVo voPatientUserDefinedObject = new PatientUserDefinedObjectVo();
		voPatientUserDefinedObject.setUserDefinedObject(voUserDefinedObject);

		for (int i = 0; i < voUserDefinedObject.getComponents().size(); i++)
		{
			PatientAssessmentVo voPatientAssessment = new PatientAssessmentVo();
			
			//WDEV-11721
			voPatientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
			
			//WDEV-11526 //WDEV-19027
			voPatientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			voPatientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voPatientAssessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);
			voPatientAssessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);

			AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
			voAuthoringInformation.setAuthoringDateTime(new DateTime());
			if (domain.getHcpUser() != null)
			{
				HcpLiteVo authoringHcp = (HcpLiteVo) domain.getHcpLiteUser();
				if (authoringHcp != null)
					voAuthoringInformation.setAuthoringHcp(authoringHcp);
			}
			voPatientAssessment.setAuthoringInformation(voAuthoringInformation);

			// Patient Assessment Data
			PatientAssessmentDataVo voPatientAssessmentData = new PatientAssessmentDataVo();
			voPatientAssessmentData.setGraphic(voUserDefinedObject.getComponents().get(i).getGraphic());
			voPatientAssessmentData.setUserAssessment(voUserDefinedObject.getComponents().get(i).getUserAssessment());
			voPatientAssessment.setAssessmentData(voPatientAssessmentData);

			// Patient Assessment Collection
			if (voPatientUserDefinedObject.getPatientAssessments() == null)
				voPatientUserDefinedObject.setPatientAssessments(new PatientAssessmentVoCollection());
			voPatientUserDefinedObject.getPatientAssessments().add(voPatientAssessment);
		}

		return voPatientUserDefinedObject;
	}

	private PatientUserDefinedObjectVo savePatientAssessment(PatientUserDefinedObjectVo voPatientUserDefindeObject) throws PresentationLogicException
	{
		String[] errors = voPatientUserDefindeObject.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return null;
		}

		try
		{
			voPatientUserDefindeObject = domain.savePatientUserDefinedObject(voPatientUserDefindeObject);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return null;
		}

		return voPatientUserDefindeObject;
	}

	private UserDefinedObjectComponentVo getEditedComponent(PatientUserDefinedObjectVo voPatientUserDefinedObject)
	{
		DynamicGridRow row = form.lyrTabs().tabAssessment().dyngrdAssessments().getSelectedRow();
		PatientAssessmentListVo voPatientAssessmentList = getSelectedPatientAssessment(row);
		return getAssessmentConfig().getEditedComponent(voPatientUserDefinedObject, voPatientAssessmentList);
	}

	private ims.assessment.helper.AssessmentConfig getAssessmentConfig()
	{
		return new ims.assessment.helper.AssessmentConfig();
	}

	private PatientAssessmentListVo getSelectedPatientAssessment(DynamicGridRow row)
	{
		if (row == null)
			return null;

		Object value = row.getValue();
		if (value instanceof PatientAssessmentListVo)
			return (PatientAssessmentListVo) value;

		return null;
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (result.equals(ims.framework.enumerations.DialogResult.OK) || formName.equals(form.getForms().Clinical.MedicationMultipleDoses_Dialog))
		{
			if (formName.equals(form.getForms().Assessment.UserDefinedFormSelect))
			{
				ims.assessment.vo.UserDefinedObjectVo voUserDefinedObject = form.getGlobalContext().Core.getUserDefinedObjectSelected();
				if (voUserDefinedObject != null)
				{
					PatientUserDefinedObjectVo voPatientUserDefinedObject = populatePatientAssessmentFromUserDefinedObject(voUserDefinedObject);
					voPatientUserDefinedObject = savePatientAssessment(voPatientUserDefinedObject);
					if (voPatientUserDefinedObject != null)
					{
						PatientUserDefinedObjectListVo voPatientUserDefinedObjectList = domain.getPatientUserDefinedObjectList(voPatientUserDefinedObject);
						addNewPatientAssessment(voPatientUserDefinedObjectList, true);
					}
				}
			}

			if (formName.equals(form.getForms().Clinical.DiagnosisComplications_Dialog) || formName.equals(form.getForms().Clinical.Procedures_Dialog) || formName.equals(form.getForms().Clinical.PatientProblems_Dialog) || formName.equals(form.getForms().Clinical.MedicationMultipleDoses_Dialog))
			{
				checkReturnToForm();
			}
		}

	}

	protected void onLnkObjectiveProblemClick() throws PresentationLogicException
	{
		openDialog(PROBLEMS_OBJECTIVE);
	}

	protected void onLnkSubjectiveProblemClick() throws PresentationLogicException
	{
		openDialog(PROBLEMS_SUBJECTIVE);
	}

	protected void onLnkAnalysisDiagnosisClick() throws PresentationLogicException
	{
		openDialog(DIAGNOSIS);
	}

	protected void onLnkSurgeryClick() throws PresentationLogicException
	{
		openDialog(PROCEDURES);
	}

	protected void onBtnUpdateSOAPClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);

		showHideCustomComponent(form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring(), Boolean.FALSE, false);

		setTextBoxControls(true);

		/*
		 * if(form.getGlobalContext().Core.getClinicalNotingModeIsNotNull() &&
		 * form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW))
		 * setTextBoxControls(false);
		 */
		form.lyrTabs().tabAssessment().setHeaderEnabled(false);
		form.lyrTabs().tabClinicalNotes().setHeaderEnabled(true);
		form.lyrTabs().tabOPDNote().setHeaderEnabled(false);
		form.lyrTabs().tabDetails().setHeaderEnabled(false);
		form.lyrTabs().tabDrawing().setHeaderEnabled(false);
		isBtnCNCloseVisible(false);

		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.UPDATE);
		// TODO
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() && validationIPMode(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus()))
		{
			form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.VALIDATE);
		}
	}

	private void disableCustomAuthoring()
	{
		form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().setEnabledAuthoringHCP(Boolean.FALSE);
		form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().setEnabledDateTime(Boolean.FALSE);
	}

	protected void showHideCustomComponent(IComponent customControl, Boolean isEnabled, boolean initialize)
	{
		if (customControl != null)
		{
			customControl.setEnabledAuthoringHCP(isEnabled);
			customControl.setEnabledDateTime(isEnabled);
			customControl.setIsRequiredPropertyToControls(true);
		}

		if (customControl != null && initialize != false)
		{
			customControl.initializeComponent();
		}
	}

	protected void onBtnNewSOAPClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		setTextBoxControls(true);
		form.getLocalContext().setSOAPVo(null);
		form.getLocalContext().setClinicalNotes(null);

		clearSOAPScreen();

		AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
		voAuthoringInformation.setAuthoringDateTime(new DateTime());
		if (domain.getHcpUser() != null)
		{
			HcpLiteVo authoringHcp = (HcpLiteVo) domain.getHcpLiteUser();
			if (authoringHcp != null)
				voAuthoringInformation.setAuthoringHcp(authoringHcp);
			form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().setValue(voAuthoringInformation);

			showHideIPTranscribedControls(false);

			fillIPStatusNew();
		}
		else
		// No a HCP
		{
			//WDEV-19027
			if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().getResponsibleHCPIsNotNull())
				voAuthoringInformation.setAuthoringHcp((HcpLiteVo) form.getGlobalContext().Core.getCurrentCareContext().getResponsibleHCP());//WDEV-19027
			form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().setValue(voAuthoringInformation);

			showHideIPTranscribedControls(true);
			form.lyrTabs().tabClinicalNotes().dtimTransByIP().setValue(new DateTime());
			if (domain.getMosUser() != null)
			{
				form.lyrTabs().tabClinicalNotes().qmbTransIP().newRow(domain.getMosUser().toString(), domain.getMosUser().toString());
				form.lyrTabs().tabClinicalNotes().qmbTransIP().setValue(domain.getMosUser().toString());
			}

			fillIPStatusPreValidation();
		}

		form.lyrTabs().tabAssessment().setHeaderEnabled(false);
		form.lyrTabs().tabClinicalNotes().setHeaderEnabled(true);
		form.lyrTabs().tabOPDNote().setHeaderEnabled(false);
		form.lyrTabs().tabDetails().setHeaderEnabled(false);
		form.lyrTabs().tabDrawing().setHeaderEnabled(false);

	}

	private void fillIPStatusPreValidation()
	{
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().clear();
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().newRow(ClinicalNotesStatus.PREVALIDATION, ClinicalNotesStatus.PREVALIDATION.getText());
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().newRow(ClinicalNotesStatus.DRAFT, ClinicalNotesStatus.DRAFT.getText());
	}

	private void fillIPStatusNew()
	{
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().clear();
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().newRow(ClinicalNotesStatus.ACTIVE, ClinicalNotesStatus.ACTIVE.getText());
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().newRow(ClinicalNotesStatus.DRAFT, ClinicalNotesStatus.DRAFT.getText());
	}

	private void fillIPStatusCorrect()
	{
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().clear();
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().newRow(ClinicalNotesStatus.ACTIVE, ClinicalNotesStatus.ACTIVE.getText());
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().newRow(ClinicalNotesStatus.CORRECTED, ClinicalNotesStatus.CORRECTED.getText());
	}

	private void fillIPStatusValidation()
	{
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().clear();
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().newRow(ClinicalNotesStatus.PREVALIDATION, ClinicalNotesStatus.PREVALIDATION.getText());
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().newRow(ClinicalNotesStatus.ACTIVE, ClinicalNotesStatus.ACTIVE.getText());
	}

	private void clearSOAPScreen()
	{
		form.lyrTabs().tabClinicalNotes().txtSubjective().setValue(null);
		form.lyrTabs().tabClinicalNotes().txtObjective().setValue(null);
		form.lyrTabs().tabClinicalNotes().txtAnalysis().setValue(null);
		form.lyrTabs().tabClinicalNotes().txtPlan().setValue(null);
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().setValue(null);
	}

	protected void onBtnCancelSOAPClick() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
	
		openClinicalNotes();

		enableAllTabs();
		if (isDialog())
			onBtnOPCloseClick();
	}

	private String[] getUiErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.lyrTabs().tabClinicalNotes().isHeaderVisible())
		{
			// wdev-2163
			if (form.lyrTabs().tabClinicalNotes().txtSubjective().getValue() == null && form.lyrTabs().tabClinicalNotes().txtObjective().getValue() == null && form.lyrTabs().tabClinicalNotes().txtAnalysis().getValue() == null && form.lyrTabs().tabClinicalNotes().txtPlan().getValue() == null)
			{
				errors.add("'SOAP' is mandatory");
			}

			if (form.lyrTabs().tabClinicalNotes().cmbStatusIP().getValue() == null)
			{
				errors.add("'Status' is mandatory");
			}

			if (form.lyrTabs().tabClinicalNotes().chkForReview().getValue() == true)
			{
				if (form.lyrTabs().tabClinicalNotes().cmbDiscipline().getValue() == null)
				{
					// form.lyrTabs().tabClinicalNotes().chkForReview().setValue(false);
					errors.add("If 'For Review' is checked 'Discipline' is mandatory");
				}
			}
		}

		if (form.lyrTabs().tabOPDNote().isHeaderVisible())
		{
			if (form.lyrTabs().tabOPDNote().richTextObjective().getValue() == "")
			{
				if (form.lyrTabs().tabOPDNote().richTextPlan().getValue() == "")
				{
					if (form.lyrTabs().tabOPDNote().richTextInstructions().getValue() == "")
						errors.add("'Objective' or 'Plan' or 'Instructions' is mandatory");
				}
			}

			if (form.lyrTabs().tabOPDNote().cmbStatusOP().getValue() == null)
			{
				// TODO
				errors.add("'Status' is mandatory");
				setPreviosStatus();
			}

			if (form.lyrTabs().tabOPDNote().chkForReviewOP().getValue() == true)
			{
				if (form.lyrTabs().tabOPDNote().cmbDisciplineOP().getValue() == null)
				{
					// form.lyrTabs().tabOPDNote().chkForReviewOP().setValue(false);
					errors.add("If 'For Review' is checked 'Discipline' is mandatory");
				}
			}
		}

		if (errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Clinical Note record", searchErrors);
			return searchErrors;
		}
		return null;
	}

	private void setPreviosStatus()
	{
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull())
		{
			ClinicalNotesStatus status = form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus();
			form.lyrTabs().tabOPDNote().cmbStatusOP().setValue(status);
		}
	}

	protected void onBtnSaveSOAPClick() throws PresentationLogicException //WDEV-19027
	{
		// Save Clinical Notes
		ClinicalNotesVo voClinicalNote = form.getLocalContext().getClinicalNotes();
		if (voClinicalNote == null)
			voClinicalNote = new ClinicalNotesVo();

		voClinicalNote.setInHospitalReport(Boolean.FALSE);

		MemberOfStaffVo fullVo = null;
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo) domain.getMosUser();
		if (mos != null)
			fullVo = domain.getMemberOfStaff(mos);

		if (fullVo != null)
		{
			if (fullVo.getHcpIsNotNull() && fullVo.getHcp() instanceof MedicVo)
			{
				MedicVo voMedic = (MedicVo) fullVo.getHcp();
				if (voMedic.getHcpTypeIsNotNull() && form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue() != null && form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcpIsNotNull() && voMedic.getHcpType().equals(form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp().getHcpType()))
					voClinicalNote.setDiscipline(voMedic.getHcpType());
				else if (voMedic.getHcpTypeIsNotNull() && form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue() != null && form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp() != null && !voMedic.getHcpType().equals(form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp().getHcpType()))
					voClinicalNote.setDiscipline(form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp().getHcpType());
				else
				{
					if (form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue() != null 
							&& form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcpIsNotNull())
					{
						//TODO Should discipline be mandatory; not so in VO
						form.lyrTabs().tabClinicalNotes().cmbDiscipline().setEnabled(true);
						engine.showMessage("Please select a Discipline type for the logged in user.");
						return;
					}
				}
			}
			else
			{
				if (form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue()!=null && form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcpIsNotNull())
					voClinicalNote.setDiscipline(form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp().getHcpType());
				else
				{
					engine.showMessage("No Discipline is available. Please choose an authoring user.");
					return;
				}
			}
		}
		else
		{
			engine.showMessage("Member of Staff is Null.");
			return;
		}

		if (voClinicalNote.getRecordingUser() == null)
			voClinicalNote.setRecordingUser(mos);
		if (voClinicalNote.getRecordingDateTime() == null)
			voClinicalNote.setRecordingDateTime(new DateTime());
		
		if (!voClinicalNote.getCareContextIsNotNull())
			voClinicalNote.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		voClinicalNote.setAuthoringInfo(form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue());

		if (!voClinicalNote.getIsTranscribedIsNotNull())
		{
			if (domain.getHcpUser() == null)
				voClinicalNote.setIsTranscribed(new Boolean(true));
			else
				voClinicalNote.setIsTranscribed(new Boolean(false));
		}

		voClinicalNote.setForReview(new Boolean(form.lyrTabs().tabClinicalNotes().chkForReview().getValue()));
		if (form.lyrTabs().tabClinicalNotes().chkForReview().getValue())
			voClinicalNote.setForReviewDiscipline(form.lyrTabs().tabClinicalNotes().cmbDiscipline().getValue());
		else
			voClinicalNote.setForReviewDiscipline(null);

		if (form.lyrTabs().tabClinicalNotes().iscustomControlReviewedVisible())
		{
			voClinicalNote.setReviewingDateTime(form.lyrTabs().tabClinicalNotes().customControlReviewed().getValue() != null && form.lyrTabs().tabClinicalNotes().customControlReviewed().getValue().getAuthoringDateTimeIsNotNull() ? form.lyrTabs().tabClinicalNotes().customControlReviewed().getValue().getAuthoringDateTime() : null);
			voClinicalNote.setReviewingHCP(form.lyrTabs().tabClinicalNotes().customControlReviewed().getValue() != null && form.lyrTabs().tabClinicalNotes().customControlReviewed().getValue().getAuthoringHcpIsNotNull() ? form.lyrTabs().tabClinicalNotes().customControlReviewed().getValue().getAuthoringHcp() : null);
		}

		SOAPVo voSOAP = form.getLocalContext().getSOAPVo();
		if (voSOAP == null)
			voSOAP = new SOAPVo();

		voSOAP.setSubjectiveNote(form.lyrTabs().tabClinicalNotes().txtSubjective().getValue() != null ? form.lyrTabs().tabClinicalNotes().txtSubjective().getValue() : "");
		voSOAP.setObjectiveNote(form.lyrTabs().tabClinicalNotes().txtObjective().getValue() != null ? form.lyrTabs().tabClinicalNotes().txtObjective().getValue() : "");
		voSOAP.setAnalysisNote(form.lyrTabs().tabClinicalNotes().txtAnalysis().getValue() != null ? form.lyrTabs().tabClinicalNotes().txtAnalysis().getValue() : "");
		voSOAP.setPlanNote(form.lyrTabs().tabClinicalNotes().txtPlan().getValue() != null ? form.lyrTabs().tabClinicalNotes().txtPlan().getValue() : "");

		// WDEV-1107 ii)This notetype should be also saved
		if (!voClinicalNote.getNoteTypeIsNotNull())
			voClinicalNote.setNoteType(ClinicalNoteType.CLINICALNOTE);

		// Save old Status to check for active
		ClinicalNoteStatusVo voPreviousStat = voClinicalNote.getCurrentStatus();
		ClinicalNoteStatusVo voStat = new ClinicalNoteStatusVo();
		voStat.setStatus(form.lyrTabs().tabClinicalNotes().cmbStatusIP().getValue());
		voStat.setDateTime(new DateTime());
		voStat.setMOS(mos != null ? mos : null);

		/*
		 * //In Correct mode, HCP ok and either Active or Correct then be sure
		 * status saved is Corrected if (correctModeIP(voPreviousStat)) {
		 * voStat.setStatus(ClinicalNotesStatus.CORRECTED);
		 * voClinicalNote.setIsCorrected(new Boolean(true)); }
		 */

		voClinicalNote.setCurrentStatus(voStat);

		/*
		 * //If old Status is Active and loggedin user == authoring
		 * user......need to save the old Note in the status history if
		 * (correctModeIP(voPreviousStat)&&
		 * form.getGlobalContext().Core.getClinicalNotingModeIsNotNull() &&
		 * !form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW))
		 * //In Correct mode {
		 * voStat.setClinicalNote(voClinicalNote.getClinicalNote());
		 * voClinicalNote.setStatusHistory(addStatusToCollection(voClinicalNote.getStatusHistory(),
		 * voStat)); }
		 */

		boolean isReviewed = false;

		if (form.getGlobalContext().Core.getClinicalNotingModeIsNotNull())
			isReviewed = form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW);

		if (correctModeIP(voPreviousStat) && !isReviewed && !voClinicalNote.getClinicalNote().equals(voSOAP.getRichTextString())) // In
		// Correct
		// mode)
		// //In
		// Correct
		// mode
		{
			voStat.setClinicalNote(voClinicalNote.getClinicalNote());
			voClinicalNote.setStatusHistory(addStatusToCollection(voClinicalNote.getStatusHistory(), voStat));
			voStat.setStatus(ClinicalNotesStatus.CORRECTED);
			voClinicalNote.setIsCorrected(new Boolean(true));

			if (!voClinicalNote.getDisciplineIsNotNull())
			{
				if (form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue() != null && form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcpIsNotNull() && form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp().getHcpTypeIsNotNull())
				{
					HcpDisType hcpType = form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp().getHcpType();
					voClinicalNote.setDiscipline(hcpType);
				}
			}
		}

		if (form.getGlobalContext().Core.getClinicalNotingModeIsNotNull() && form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.VALIDATE))
		{
			voStat.setClinicalNote(voClinicalNote.getClinicalNote());
			voStat.setStatus(ClinicalNotesStatus.ACTIVE);
			// voClinicalNote.setIsCorrected(new Boolean(true));
		}

		voClinicalNote.setClinicalNote(voSOAP.getRichTextString());

		voClinicalNote.setIsDerivedNote(Boolean.TRUE);
		voClinicalNote.setSourceOfNote(SourceOfNote.CLINICALNOTEDRAWINGIP);

		String[] uiErrors = getUiErrors();
		String[] errors = voClinicalNote.validate(uiErrors);
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}

		boolean clinicalContacttobeSaved = false;
		if (voClinicalNote.getID_ClinicalNotes() == null)
			clinicalContacttobeSaved = true;

		try
		{
			voClinicalNote = domain.saveClinicalNotesOnlyForCareContext(voClinicalNote); //WDEV-19027
		}
		catch (StaleObjectException sox)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			onFormOpen();
			return;
		}
		catch (UniqueKeyViolationException ue)
		{
			engine.showMessage(ue.getMessage());
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			onFormOpen();
			return;
		}

		if (voClinicalNote == null)
			throw new FormOpenException("There is a clinical note of a different type already recorded on the system for this clincal contact");

		// Now Save SOAP
		if (voClinicalNote != null)
		{
			voSOAP.setClinicalNote(voClinicalNote);
		}
		
		if (!voSOAP.getCareContextIsNotNull())
			voSOAP.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		errors = voSOAP.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}

		try
		{
			domain.saveSOAPsVo(voSOAP);
		}
		catch (StaleObjectException sox)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		catch (UniqueKeyViolationException ue)
		{
			engine.showMessage(ue.getMessage());
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		/* WDEV-19027
		if (clinicalContacttobeSaved)
			saveClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		*/
		
		if (voClinicalNote != null)
		{
			form.getGlobalContext().Core.setClinicalNotesShort(domain.getClinicalNotesShort(voClinicalNote.getID_ClinicalNotes()));
			form.getGlobalContext().Clinical.setCurrentClinicalNote(voClinicalNote);
		}

		form.setMode(FormMode.VIEW);
		openClinicalNotes();
		enableAllTabs();

		if (isDialog())
		{
			onBtnCancelSOAPClick();
			onBtnCNCloseClick();
		}
	}

	/*//WDEV-19027
	private void saveClinicalContact(ClinicalContactShortVo currentClinicalContact)
	{
		currentClinicalContact.setIsClinicalNoteCreated(new Boolean(true));
		String[] errors = currentClinicalContact.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		try
		{
			form.getGlobalContext().Core.setCurrentClinicalContact(domain.saveClinicalContact(currentClinicalContact));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}

	*/
	
	private ClinicalNoteStatusVoCollection addStatusToCollection(ClinicalNoteStatusVoCollection statusHistory, ClinicalNoteStatusVo voStat)
	{
		ClinicalNoteStatusVoCollection voColl = statusHistory;
		if (voColl == null)
			voColl = new ClinicalNoteStatusVoCollection();
		voColl.add(voStat);

		return voColl;
	}

	private void setCurrentClinicalNote()
	{
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()) //WDEV-19027
		{
			ClinicalNotesVo clinicalNotesForContact;
			if(isDialog() && form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
			{
				clinicalNotesForContact = domain.getClinicalNotesForCareContext(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCareContext());  //WDEV-19027
			}
			else
			{
				CareContextShortVo currentCareContext = form.getGlobalContext().Core.getCurrentCareContext(); //WDEV-19027 
				clinicalNotesForContact = domain.getClinicalNotesForCareContext(currentCareContext); //WDEV-19027 
			}

			if (clinicalNotesForContact != null)
			{
				ClinicalNotesShortVo clinicalNotesShort = domain.getClinicalNotesShort(clinicalNotesForContact.getID_ClinicalNotes());

				if (clinicalNotesShort != null)
					form.getGlobalContext().Clinical.setCurrentClinicalNote(domain.getClinicalNotes(clinicalNotesShort.getID_ClinicalNotes()));
				else
					form.getGlobalContext().Clinical.setCurrentClinicalNote(null);
			}
			else
			{
				form.getGlobalContext().Clinical.setCurrentClinicalNote(null);
			}
		}
	}

	private void openDrawing()
	{
		form.setMode(FormMode.VIEW);

		clearDrawingScreen();

		form.getLocalContext().setPatientAssessment(null);

		PatientAssessmentVo patientAssessmentVo = domain.getPatientAssessmentForCareContext(form.getGlobalContext().Core.getCurrentCareContext());  //WDEV-19027

		form.getLocalContext().setPatientAssessment(patientAssessmentVo);

		form.lyrTabs().tabDrawing().customGraphic().setPatientAssessment(patientAssessmentVo);

		enableHelpUrlImage(patientAssessmentVo != null && patientAssessmentVo.getAssessmentData().getGraphicFindingsIsNotNull() ? patientAssessmentVo.getAssessmentData().getGraphic().getHelpUrl() : null);

		if (patientAssessmentVo != null)
			form.lyrTabs().tabDrawing().customAuthoringInfo().setValue(patientAssessmentVo.getAuthoringInformationIsNotNull() ? patientAssessmentVo.getAuthoringInformation() : null);

		updateDrawingButtonStatus();

		form.lyrTabs().tabDrawing().setHeaderVisible(true);

		if (patientAssessmentVo != null && patientAssessmentVo.getAssessmentData() != null && patientAssessmentVo.getAssessmentData().getGraphicFindings() != null && patientAssessmentVo.getAssessmentData().getGraphicFindings().size() > 0 && patientAssessmentVo.getAssessmentData().getGraphicFindings().get(0) != null)
		{
			form.lyrTabs().tabDrawing().cmbGraphicAdnotationImage().setValue(patientAssessmentVo.getAssessmentData().getGraphicFindings().get(0).getGraphicImage());
		}
		else
		{
			form.lyrTabs().tabDrawing().cmbGraphicAdnotationImage().setValue(null);
		}
	}

	private void clearDrawingScreen()
	{
		form.lyrTabs().tabDrawing().customGraphic().setPatientAssessment(null);
		form.lyrTabs().tabDrawing().customAuthoringInfo().setValue(null);
		form.lyrTabs().tabDrawing().cmbGraphicAdnotationImage().setValue(null);
	}

	private void updateDrawingButtonStatus()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.lyrTabs().tabDrawing().btnUpdateGraphic().setVisible(false);
			form.lyrTabs().tabDrawing().btnNewGraphic().setVisible(true);

			if (form.getLocalContext().getPatientAssessment() != null)
			{
				form.lyrTabs().tabDrawing().btnUpdateGraphic().setVisible(true);
				form.lyrTabs().tabDrawing().btnNewGraphic().setVisible(false);

			}

			form.lyrTabs().tabDrawing().setVisible(true);
			form.lyrTabs().tabDrawing().cmbGraphicAdnotationImage().setEnabled(false);// form.getLocalContext().getPatientAssessment()
			// !=
			// null);
		}
		else
			form.lyrTabs().tabDrawing().cmbGraphicAdnotationImage().setEnabled(form.getLocalContext().getPatientAssessment() == null);

	}

	private void openAssessment()
	{
		form.lyrTabs().showtabAssessment();

		initDynAssessmentGrid();

		form.setMode(FormMode.VIEW);
		form.lyrTabs().tabAssessment().dyngrdAssessments().getRows().clear();
		PatientUserDefinedObjectListVoCollection voColl = domain.listPatientUserDefinedObjectsForCareContext(form.getGlobalContext().Core.getCurrentCareContext());  //WDEV-19027
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			displayAssessmentRecords(voColl.get(i));
		}
	}

	private void displayAssessmentRecords(PatientUserDefinedObjectListVo voPatUserDefinedObjectList)
	{
		if (voPatUserDefinedObjectList == null || voPatUserDefinedObjectList.getPatientAssessments() == null)
			return;

		addNewPatientAssessment(voPatUserDefinedObjectList, voPatUserDefinedObjectList.equals(form.getGlobalContext().Assessment.getPatientUserDefinedObject()));
	}

	private void addNewPatientAssessment(PatientUserDefinedObjectListVo voPatUserDefinedObjectList, boolean expand)
	{
		if (voPatUserDefinedObjectList == null)
			return;

		DynamicGridRow rowParent = form.lyrTabs().tabAssessment().dyngrdAssessments().getRows().newRow();

		rowParent.setValue(voPatUserDefinedObjectList);
		rowParent.setExpanded(expand);
		DynamicGridCell parent_cell = rowParent.getCells().get(getDynGridColumn(HEADER_COLUMN));
		if (parent_cell == null)
			parent_cell = rowParent.getCells().newCell(getDynGridColumn(HEADER_COLUMN), DynamicCellType.STRING);
		parent_cell.setReadOnly(true);
		parent_cell.setValue(getHeaderText(voPatUserDefinedObjectList.getUserDefinedObject()));

		voPatUserDefinedObjectList.getPatientAssessments().sort();
		for (int i = 0; i < voPatUserDefinedObjectList.getPatientAssessments().size(); i++)
		{
			PatientAssessmentListVo voPatientAssessmentList = voPatUserDefinedObjectList.getPatientAssessments().get(i);
			if (voPatientAssessmentList.getAssessmentDataIsNotNull())
			{
				PatientAssessmentDataListVo voPatientAssessmentData = voPatientAssessmentList.getAssessmentData();
				DynamicGridRow childRow = rowParent.getRows().newRow();
				childRow.setSelectable(true);
				childRow.setExpanded(expand);
				childRow.setReadOnly(false);
				Image childImage = getImage(voPatientAssessmentData);
				childRow.setExpandedImage(childImage);
				childRow.setCollapsedImage(childImage);
				childRow.setValue(voPatientAssessmentList);

				DynamicGridCell child_cell = childRow.getCells().get(getDynGridColumn(HEADER_COLUMN));
				if (child_cell == null)
					child_cell = childRow.getCells().newCell(getDynGridColumn(HEADER_COLUMN), DynamicCellType.STRING);
				child_cell.setReadOnly(true);
				child_cell.setValue(getChildText(voPatientAssessmentData));
				child_cell.setIdentifier(voPatientAssessmentData);

				DynamicGridCell child_stat_cell = childRow.getCells().get(getDynGridColumn(STATUS_COLUMN));
				if (child_stat_cell == null)
				{
					child_stat_cell = childRow.getCells().newCell(getDynGridColumn(STATUS_COLUMN), DynamicCellType.ENUMERATION);
					populateStatusCell(child_stat_cell);
				}
				child_stat_cell.setAutoPostBack(true);
				child_stat_cell.setReadOnly(true);
				child_stat_cell.setValue(voPatientAssessmentList.getStatus());

				DynamicGridCell child_reason_cell = childRow.getCells().get(getDynGridColumn(REASON_COLUMN));
				if (child_reason_cell == null)
				{
					child_reason_cell = childRow.getCells().newCell(getDynGridColumn(REASON_COLUMN), DynamicCellType.ENUMERATION);
					populateReasonCell(child_reason_cell, voPatientAssessmentList.getStatus());
				}
				child_reason_cell.setReadOnly(true);
				child_reason_cell.setValue(voPatientAssessmentList.getStatusReason());

				Image imgLink = form.getImages().Core.Information;
				String helpUrl = null;
				if (voPatientAssessmentData.getUserAssessmentIsNotNull())
					helpUrl = voPatientAssessmentData.getUserAssessment().getHelpURL();

				if (voPatientAssessmentData.getGraphicIsNotNull())
					helpUrl = voPatientAssessmentData.getGraphic().getHelpUrl();

				if (helpUrl != null && helpUrl.length() > 0)
				{
					DynamicGridCell help_url_cell = childRow.getCells().get(getDynGridColumn(HELP_URL_COLUMN));
					if (help_url_cell == null)
					{
						help_url_cell = childRow.getCells().newCell(getDynGridColumn(HELP_URL_COLUMN), DynamicCellType.IMAGEBUTTON);
					}
					help_url_cell.setValue(imgLink);
					help_url_cell.setTooltip(helpUrl);
					help_url_cell.setIdentifier(helpUrl);
					help_url_cell.setReadOnly(false);
					help_url_cell.setAutoPostBack(true);
				}

				DynamicGridCell authoring_cell = childRow.getCells().get(getDynGridColumn(AUTHORING_COLUMN));
				if (authoring_cell == null)
				{
					authoring_cell = childRow.getCells().newCell(getDynGridColumn(AUTHORING_COLUMN), DynamicCellType.STRING);
				}
				String auhtoringInfo = voPatientAssessmentList.getAuthoringInformationIsNotNull() ? voPatientAssessmentList.getAuthoringInfo().toString(", ") : "";
				authoring_cell.setValue(auhtoringInfo);
				authoring_cell.setTooltip(auhtoringInfo);
				authoring_cell.setReadOnly(true);
			}
		}
		form.lyrTabs().tabAssessment().dyngrdAssessments().getRows().expandAll();
	}

	private Image getImage(PatientAssessmentDataListVo voPatientAssessmentData)
	{
		if (voPatientAssessmentData != null)
		{
			if (voPatientAssessmentData.getUserAssessmentIsNotNull())
				return form.getImages().Core.TextBox;

			if (voPatientAssessmentData.getGraphicIsNotNull())
				return form.getImages().Admin.Color;
		}
		return null;
	}

	private void initDynAssessmentGrid()
	{
		form.lyrTabs().tabAssessment().dyngrdAssessments().clear();

		DynamicGridColumn column_parent = form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().getByIdentifier(HEADER_COLUMN);
		if (column_parent == null)
			column_parent = form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().newColumn("Patient Assessment", HEADER_COLUMN);
		column_parent.setWidth(HEADER_COLUMN_WIDTH);

		DynamicGridColumn column_status = form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().getByIdentifier(STATUS_COLUMN);
		if (column_status == null)
			column_status = form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().newColumn("Status", STATUS_COLUMN);
		column_status.setWidth(STATUS_COLUMN_WIDTH);

		DynamicGridColumn column_reason = form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().getByIdentifier(REASON_COLUMN);
		if (column_reason == null)
			column_reason = form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().newColumn("Reason", REASON_COLUMN);
		column_reason.setWidth(REASON_COLUMN_WIDTH);

		DynamicGridColumn column_url_help = form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().getByIdentifier(HELP_URL_COLUMN);
		if (column_url_help == null)
			column_url_help = form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().newColumn("URL", HELP_URL_COLUMN);
		column_url_help.setWidth(HELP_URL_COLUMN_WIDTH);
		column_url_help.setCanGrow(false);
		column_url_help.setHeaderAlignment(Alignment.CENTER);
		column_url_help.setAlignment(Alignment.CENTER);

		DynamicGridColumn column_authoring = form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().getByIdentifier(AUTHORING_COLUMN);
		if (column_authoring == null)
			column_authoring = form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().newColumn("Authoring Information", AUTHORING_COLUMN);
		column_authoring.setWidth(AUTHORING_COLUMN_WIDTH);
		column_authoring.setCanGrow(false);
	}

	private DynamicGridColumn getDynGridColumn(Integer identifier)
	{
		return form.lyrTabs().tabAssessment().dyngrdAssessments().getColumns().getByIdentifier(identifier);
	}

	private String getChildText(PatientAssessmentDataListVo voPatientAssessmentData)
	{
		if (voPatientAssessmentData != null)
		{
			StringBuffer text = new StringBuffer();
			if (voPatientAssessmentData.getUserAssessmentIsNotNull())
			{
				UserAssessmentLiteVo userAssessment = voPatientAssessmentData.getUserAssessment();
				text.append(userAssessment.getName());
				text.append(" - (");
				if (userAssessment.getAssessmentTypeIsNotNull())
				{
					if (userAssessment.getAssessmentType().equals(UserDefinedAssessmentType.USERDEFINEDDATASHEET))
						text.append("Non Scoring ");
					else if (userAssessment.getAssessmentType().equals(UserDefinedAssessmentType.ASSESSMENTTOOL))
						text.append("Scoring ");
				}
				text.append("Assessment)");

				return text.toString();
			}
			else if (voPatientAssessmentData.getGraphicIsNotNull())
			{
				GraphicAssessmentShortVo voGraphic = voPatientAssessmentData.getGraphic();
				text.append(voGraphic.getName());
				text.append(" - (Graphical Assessment");
				if (voGraphic.getAssessmentTypeIsNotNull())
				{
					if (voGraphic.getAssessmentType().equals(UserDefinedAssessmentType.ANNOTATEDIMAGEWITHQUESTIONS))
						text.append(" with Questions");
				}
				text.append(")");
				return text.toString();

			}
		}
		return "";
	}

	private void populateStatusCell(DynamicGridCell status_cell)
	{
		status_cell.getItems().clear();
		PatientAssessmentStatusReasonCollection voColl = ims.core.vo.lookups.LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if (voColl.get(i).getParent() == null)
				status_cell.getItems().newItem(voColl.get(i));
		}
	}

	private String getHeaderText(UserDefinedObjectListVo voUserDefinedObjectList)
	{
		if (voUserDefinedObjectList != null)
		{
			StringBuffer text = new StringBuffer();
			if (voUserDefinedObjectList.getNameIsNotNull())
			{
				text.append("  ");
				text.append("Name: ");
				text.append(voUserDefinedObjectList.getName());
			}
			return text.toString();
		}

		return "";
	}

	private void populateReasonCell(DynamicGridCell reason_cell, PatientAssessmentStatusReason parent)
	{
		reason_cell.getItems().clear();
		PatientAssessmentStatusReasonCollection voColl = ims.core.vo.lookups.LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if (voColl.get(i).getParent() != null && voColl.get(i).getParent().equals(parent))
				reason_cell.getItems().newItem(voColl.get(i));
		}
	}

	boolean isPatientAssessmentDataSelected()
	{
		DynamicGridRow row = form.lyrTabs().tabAssessment().dyngrdAssessments().getSelectedRow();

		if (row == null)
			return false;

		if (getSelectedPatientAssessment(row) != null)
			return true;

		return false;
	}

	private boolean isDataAdded()
	{
		PatientAssessmentListVo voPatientAssessmentList = getSelectedPatientAssessment(form.lyrTabs().tabAssessment().dyngrdAssessments().getSelectedRow());
		return voPatientAssessmentList != null && voPatientAssessmentList.getAssessmentDataIsNotNull() && (voPatientAssessmentList.getAssessmentData().getGraphicIsNotNull() || voPatientAssessmentList.getAssessmentData().getUserAssessmentIsNotNull()) && voPatientAssessmentList.getAuthoringInformationIsNotNull();
	}

	private boolean isGraphicAssessmentData()
	{
		PatientAssessmentDataListVo voPatientAssessmentData = getSelectedPatientAssessmentData();
		return voPatientAssessmentData != null && voPatientAssessmentData.getGraphicIsNotNull();
	}

	private boolean isNotCompleted()
	{
		PatientAssessmentListVo voPatientAssessmentList = getSelectedPatientAssessment(form.lyrTabs().tabAssessment().dyngrdAssessments().getSelectedRow());
		return voPatientAssessmentList != null && (voPatientAssessmentList.getStatus() == null || !voPatientAssessmentList.getStatus().equals(PatientAssessmentStatusReason.COMPLETED));
	}

	private boolean isUserAssessmentData()
	{
		PatientAssessmentDataListVo voPatientAssessmentData = getSelectedPatientAssessmentData();
		return voPatientAssessmentData != null && voPatientAssessmentData.getUserAssessmentIsNotNull();
	}

	private PatientAssessmentDataListVo getSelectedPatientAssessmentData()
	{
		DynamicGridRow row = form.lyrTabs().tabAssessment().dyngrdAssessments().getSelectedRow();
		if (row != null)
		{
			PatientAssessmentListVo voPatientAssessmentList = getSelectedPatientAssessment(row);
			if (voPatientAssessmentList != null)
			{
				return voPatientAssessmentList.getAssessmentData();
			}
		}

		return null;
	}

	private PatientAssessmentListVo getPatientAssessmentFromGrid()
	{
		DynamicGridRow row = form.lyrTabs().tabAssessment().dyngrdAssessments().getSelectedRow();
		if (row != null)
		{
			return getSelectedPatientAssessment(row);
		}

		return null;
	}

	private String getChildName(PatientAssessmentDataListVo voPatientAssessmentData)
	{
		if (voPatientAssessmentData != null)
		{
			if (voPatientAssessmentData.getUserAssessmentIsNotNull())
			{
				return voPatientAssessmentData.getUserAssessment().getName();
			}
			else if (voPatientAssessmentData.getGraphicIsNotNull())
			{
				return voPatientAssessmentData.getGraphic().getName();
			}
		}
		return null;
	}

	private void enableContextMenu()
	{
		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		boolean allowEditPatientAssessment = false;// viewMode &&
		// isPatientUserDefinedObjectSelected(form.dyngrdAssessments().getSelectedRow());
		boolean allowEditPatientAssessmentData = viewMode && isPatientAssessmentDataSelected();
		boolean allowViewGraphic = allowEditPatientAssessmentData && isDataAdded() && isGraphicAssessmentData();
		boolean allowEditGraphic = allowViewGraphic && isNotCompleted();
		boolean allowAddGraphic = allowEditPatientAssessmentData && !isDataAdded() && isGraphicAssessmentData();
		boolean allowViewUserAssessment = allowEditPatientAssessmentData && isDataAdded() && isUserAssessmentData();
		boolean allowEditUserAssessment = allowViewUserAssessment && isNotCompleted();
		boolean allowAddUserAssessment = allowEditPatientAssessmentData && !isDataAdded() && isUserAssessmentData();

		form.getContextMenus().getPatientAssessmentAddItem().setVisible(viewMode);
		form.getContextMenus().getPatientAssessmentUpdateItem().setVisible(allowEditPatientAssessment);

		String childName = getChildName(getSelectedPatientAssessmentData());
		if (childName != null)
		{
			String newLabel = "New '" + childName + "'";
			String editLabel = "Edit '" + childName + "'";
			String viewLabel = "View '" + childName + "'";

			form.getContextMenus().getPatientAssessmentAddGraphicAssessmentItem().setText(newLabel);
			form.getContextMenus().getPatientAssessmentUpdateGraphicAssessmentItem().setText(editLabel);
			form.getContextMenus().getPatientAssessmentViewGraphicAssessmentItem().setText(viewLabel);

			form.getContextMenus().getPatientAssessmentAddUserAssessmentItem().setText(newLabel);
			form.getContextMenus().getPatientAssessmentUpdateUserAssessmentItem().setText(editLabel);
			form.getContextMenus().getPatientAssessmentViewUserAssessmentItem().setText(viewLabel);
		}

		form.getContextMenus().getPatientAssessmentAddGraphicAssessmentItem().setVisible(allowAddGraphic);
		form.getContextMenus().getPatientAssessmentUpdateGraphicAssessmentItem().setVisible(allowEditGraphic);
		form.getContextMenus().getPatientAssessmentViewGraphicAssessmentItem().setVisible(allowViewGraphic);

		form.getContextMenus().getPatientAssessmentAddUserAssessmentItem().setVisible(allowAddUserAssessment);
		form.getContextMenus().getPatientAssessmentUpdateUserAssessmentItem().setVisible(allowEditUserAssessment);
		form.getContextMenus().getPatientAssessmentViewUserAssessmentItem().setVisible(allowViewUserAssessment);
	}

	private void openClinicalNotes()
	{
		clearClinicalNotes();
		initialiseScreenControls();
		form.setMode(FormMode.VIEW);

		form.lyrTabs().tabClinicalNotes().cmbStatusIP().setEnabled(false);

		form.lyrTabs().showtabClinicalNotes();
		form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setText("Edit");

		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
		{
			//WDEV-9481
			form.getGlobalContext().Clinical.setCurrentClinicalNote(domain.getClinicalNotes(form.getGlobalContext().Clinical.getCurrentClinicalNote().getID_ClinicalNotes()));
			
			displayClinicalNote(form.getGlobalContext().Clinical.getCurrentClinicalNote());

			if (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() && form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT))
			{
				form.setMode(FormMode.EDIT);

				if (form.getGlobalContext().Core.getClinicalNotingModeIsNotNull() && form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW))
				{
					if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatusIsNotNull())
					{
						/*
						 * if
						 * (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().getText().equals("Requires
						 * Validation") ||
						 * form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().getText().equals("Active") ||
						 * form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().getText().equals("Corrected"))
						 */
						setIpTransBy(false);
					}

					form.lyrTabs().tabClinicalNotes().chkForReview().setVisible(false);
					form.lyrTabs().tabClinicalNotes().cmbDiscipline().setVisible(false);
					form.lyrTabs().tabClinicalNotes().lblDiscipline().setVisible(false);
					form.lyrTabs().tabClinicalNotes().setcustomControlReviewedVisible(true);
					form.lyrTabs().tabClinicalNotes().customControlReviewed().setLabels(AuthoringLabelType.REVIEWING);
					form.lyrTabs().tabClinicalNotes().chkMarkAsReviewed().setVisible(true);
					form.lyrTabs().tabClinicalNotes().chkMarkAsReviewed().setValue(true);

					try
					{
						onChkMarkAsReviewedValueChanged();
					}
					catch (PresentationLogicException e)
					{
						e.printStackTrace();
					}

					if (!form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCPIsNotNull() && !form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTimeIsNotNull())
					{

						form.lyrTabs().tabClinicalNotes().customControlReviewed().setEnabledAuthoringHCP(Boolean.TRUE);
						form.lyrTabs().tabClinicalNotes().customControlReviewed().setEnabledDateTime(Boolean.TRUE);
					}

					setTextBoxControls(false);
				}

				if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCPIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTimeIsNotNull())
				{
					setCustomReviewed(Boolean.FALSE);
					form.lyrTabs().tabClinicalNotes().chkMarkAsReviewed().setEnabled(false);

					AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
					voAuthoringInformation.setAuthoringHcp(form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCP());
					voAuthoringInformation.setAuthoringDateTime(form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTime());
					form.lyrTabs().tabClinicalNotes().customControlReviewed().setValue(voAuthoringInformation);
					setIpTransBy(false);
				}

				form.lyrTabs().tabClinicalNotes().btnCNClose().setEnabled(false);
			}
			else
			{
				if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCPIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTimeIsNotNull())
					setIpTransBy(false);

				//form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(false);
				//form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setEnabled(false);

				//form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(false);
				//form.lyrTabs().tabClinicalNotes().btnNewSOAP().setEnabled(false);
			}
		}
		else if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull() || form.getGlobalContext().Clinical.getDialogFormNameIsNotNull())  //WDEV-19027
		{
			ClinicalNotesVo voClinicalNote = domain.getClinicalNotesForCareContext(form.getGlobalContext().Core.getCurrentCareContext());

			if (voClinicalNote != null)
			{
				displayClinicalNote(voClinicalNote);

				enableLinks(voClinicalNote);
			}
			else
			{
				form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(true);
				form.lyrTabs().tabClinicalNotes().btnNewSOAP().setEnabled(true);

				form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(false);
				form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setEnabled(false);
				enableLinks(voClinicalNote);

			}

			checkReturnToForm();
		}
		else
		{
			form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(true);
			form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setEnabled(false);

			form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(true);
			form.lyrTabs().tabClinicalNotes().btnNewSOAP().setEnabled(false);
		}
		// TODO
		// If its a transcribed record, a non-HCP user and has been moved on in
		// status make the screen R/O fo the logged in use.
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsTranscribedIsNotNull()
		// &&
		// form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsTranscribed().booleanValue()
		&& domain.getHcpLiteUser() == null)
		{
			if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() && !form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT) && !form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
			{
				form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(false);
				form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(false);
			}
			if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() && form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
			{
				form.lyrTabs().tabClinicalNotes().cmbStatusIP().setEnabled(false);
			}
		}

		/*
		 * MemberOfStaffShortVo mos = null; if
		 * (getDisciplineForLoggedInUser(form.getGlobalContext().Clinical.getCurrentClinicalNote()) !=
		 * null) mos =
		 * getDisciplineForLoggedInUser(form.getGlobalContext().Clinical.getCurrentClinicalNote());
		 * else engine.showMessage("no discipline");
		 * 
		 * if
		 * (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() &&
		 * form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsTranscribedIsNotNull() ) {
		 * if
		 * (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() &&
		 * form.getGlobalContext().Clinical.getCurrentClinicalNote().getDisciplineIsNotNull() &&
		 * !form.getGlobalContext().Clinical.getCurrentClinicalNote().getForReviewDiscipline().equals(mos.getHcp().getHcpType())) {
		 * form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(false);
		 * form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(false); } }
		 */

		if (isDialog())
		{
			showTabClinicalNote();
			//ClinicalNotesVo voClinicalNote = domain.getClinicalNotesForContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			ClinicalNotesVo voClinicalNote;
			if(form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
				voClinicalNote = domain.getClinicalNotesForContact(form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContact());
			else
				voClinicalNote = domain.getClinicalNotesForCareContext(form.getGlobalContext().Core.getCurrentCareContext());  //WDEV-19027

			if (form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT))
			{
				isBtnCNCloseVisible(false);

				showHideCustomComponent(form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring(), Boolean.FALSE, false);

				if (form.getGlobalContext().Core.getClinicalNotingModeIsNotNull() && form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW))
					setTextBoxControls(false);
				else
					setTextBoxControls(true);

				form.lyrTabs().tabAssessment().setHeaderEnabled(false);
				form.lyrTabs().tabClinicalNotes().setHeaderEnabled(true);
				form.lyrTabs().tabDetails().setHeaderEnabled(false);
				form.lyrTabs().tabDrawing().setHeaderEnabled(false);
				isBtnCNCloseVisible(false);

				if (correctModeIP(voClinicalNote.getCurrentStatus()))
				{
					// In Correct mode
					form.lyrTabs().tabClinicalNotes().chkForReview().setEnabled(false);
					form.lyrTabs().tabClinicalNotes().cmbDiscipline().setEnabled(false);
				}
			}

			if (form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.VIEW))
			{
				isBtnCNCloseVisible(true);

				if (correctModeIP(voClinicalNote.getCurrentStatus()))
				{
					// In Correct mode
					form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(true);
					form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(false);
					form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setText("Correct");
				}
				else
				{
					form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(false);
				}
				// TODO
				if (validationIPMode(voClinicalNote.getCurrentStatus()))
				{
					form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(true);
					form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(false);
					form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setText("Validate");
				}
			}
			if (form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.VIEW) && form.getGlobalContext().Core.getClinicalNotingMode() == null && form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
				form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(false);

		}
	}

	private MemberOfStaffShortVo getDisciplineForLoggedInUser(ClinicalNotesVo clinicalNotesVo)
	{
		MemberOfStaffVo fullVo = null;
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo) domain.getMosUser();
		if (mos != null)
			fullVo = domain.getMemberOfStaff(mos);

		if (fullVo != null)
		{
			if (fullVo.getHcpIsNotNull() && fullVo.getHcp() instanceof MedicVo)
			{
				MedicVo voMedic = (MedicVo) fullVo.getHcp();
				if (voMedic.getHcpTypeIsNotNull())
					clinicalNotesVo.setDiscipline(voMedic.getHcpType());
				else
				{
					engine.showMessage("Please select a Discipline type for the logged in user.");
					return null;
				}
			}
			return mos;
		}
		else
		{
			engine.showMessage("Member of Staff is Null.");
			return null;
		}
	}

	private void setTextBoxControls(boolean isEnabled)
	{
		form.lyrTabs().tabClinicalNotes().txtAnalysis().setEnabled(isEnabled);
		form.lyrTabs().tabClinicalNotes().txtObjective().setEnabled(isEnabled);
		form.lyrTabs().tabClinicalNotes().txtPlan().setEnabled(isEnabled);
		form.lyrTabs().tabClinicalNotes().txtSubjective().setEnabled(isEnabled);
	}

	private void displayClinicalNote(ClinicalNotesVo voClinicalNote)
	{
		if (voClinicalNote.getIsDerivedNoteIsNotNull() && voClinicalNote.getIsDerivedNote().equals(Boolean.TRUE))
		{
			// Its a SOAP Clinical Note
			form.getLocalContext().setClinicalNotes(voClinicalNote);

			if (voClinicalNote.getAuthoringInfoIsNotNull())
				form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().setValue(voClinicalNote.getAuthoringInfo());

			if (voClinicalNote.getIsTranscribedIsNotNull() && voClinicalNote.getIsTranscribed().booleanValue())
			{
				form.lyrTabs().tabClinicalNotes().dtimTransByIP().setValue(voClinicalNote.getSystemInfo().getCreationDateTime());
				form.lyrTabs().tabClinicalNotes().qmbTransIP().newRow(voClinicalNote.getSystemInfo().getCreationUser(), voClinicalNote.getSystemInfo().getCreationUser());
				form.lyrTabs().tabClinicalNotes().qmbTransIP().setValue(voClinicalNote.getSystemInfo().getCreationUser());

				showHideIPTranscribedControls(true);
			}

			ClinicalNotesRefVo voClinNotesRef = new ClinicalNotesRefVo();
			voClinNotesRef.setID_ClinicalNotes(voClinicalNote.getID_ClinicalNotes());

			if (voClinicalNote.getForReviewIsNotNull() && voClinicalNote.getForReview().booleanValue())
			{
				form.lyrTabs().tabClinicalNotes().chkForReview().setValue(voClinicalNote.getForReview().booleanValue());
				form.lyrTabs().tabClinicalNotes().cmbDiscipline().setValue(voClinicalNote.getForReviewDiscipline());

				form.lyrTabs().tabClinicalNotes().chkForReview().setVisible(true);
				form.lyrTabs().tabClinicalNotes().cmbDiscipline().setVisible(true);
				form.lyrTabs().tabClinicalNotes().lblDiscipline().setVisible(true);
				form.lyrTabs().tabClinicalNotes().setcustomControlReviewedVisible(false);
				form.lyrTabs().tabClinicalNotes().chkMarkAsReviewed().setVisible(false);

				if (voClinicalNote.getReviewingHCPIsNotNull() || voClinicalNote.getReviewingDateTimeIsNotNull())
				{
					AuthoringInformationVo voReview = new AuthoringInformationVo();
					voReview.setAuthoringDateTime(voClinicalNote.getReviewingDateTime());
					voReview.setAuthoringHcp(voClinicalNote.getReviewingHCP());
					form.lyrTabs().tabClinicalNotes().customControlReviewed().setValue(voReview);

					form.lyrTabs().tabClinicalNotes().chkForReview().setVisible(false);
					form.lyrTabs().tabClinicalNotes().cmbDiscipline().setVisible(false);
					form.lyrTabs().tabClinicalNotes().lblDiscipline().setVisible(false);
					form.lyrTabs().tabClinicalNotes().setcustomControlReviewedVisible(true);
					form.lyrTabs().tabClinicalNotes().customControlReviewed().setLabels(AuthoringLabelType.REVIEWING);
					form.lyrTabs().tabClinicalNotes().chkMarkAsReviewed().setVisible(true);
					form.lyrTabs().tabClinicalNotes().chkMarkAsReviewed().setValue(true);
				}
			}

			SOAPVo voSOAP = domain.getSOAPsVo(voClinNotesRef);
			if (voSOAP != null)
			{
				form.getLocalContext().setSOAPVo(voSOAP);

				form.lyrTabs().tabClinicalNotes().txtSubjective().setValue(voSOAP.getSubjectiveNoteIsNotNull() ? voSOAP.getSubjectiveNote() : "");
				form.lyrTabs().tabClinicalNotes().txtObjective().setValue(voSOAP.getObjectiveNoteIsNotNull() ? voSOAP.getObjectiveNote() : "");
				form.lyrTabs().tabClinicalNotes().txtAnalysis().setValue(voSOAP.getAnalysisNoteIsNotNull() ? voSOAP.getAnalysisNote() : "");
				form.lyrTabs().tabClinicalNotes().txtPlan().setValue(voSOAP.getPlanNoteIsNotNull() ? voSOAP.getPlanNote() : "");
			}
			boolean canEdit = (domain.getHcpLiteUser()!=null && domain.getHcpLiteUser().equals(voClinicalNote.getAuthoringInfo().getAuthoringHcp()) && ClinicalNotesStatus.DRAFT.equals(voClinicalNote.getCurrentStatus().getStatus())) || !ClinicalNotesStatus.DRAFT.equals(voClinicalNote.getCurrentStatus().getStatus());
			form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(true);
			form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setEnabled(canEdit);

			fillIPStatusCombo(voClinicalNote);

			if (form.lyrTabs().tabClinicalNotes().cmbStatusIP().getValues().size() == 0)
				form.lyrTabs().tabClinicalNotes().cmbStatusIP().newRow(voClinicalNote.getCurrentStatus().getStatus(), voClinicalNote.getCurrentStatus().getStatus().getText());

			form.lyrTabs().tabClinicalNotes().cmbStatusIP().setValue(voClinicalNote.getCurrentStatusIsNotNull() ? voClinicalNote.getCurrentStatus().getStatus() : null);

			form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(false);
			form.lyrTabs().tabClinicalNotes().btnNewSOAP().setEnabled(false);
		}
		else
		{
			// Disable the tab
			form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setVisible(false);
			form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setEnabled(false);

			form.lyrTabs().tabClinicalNotes().btnNewSOAP().setVisible(false);
			form.lyrTabs().tabClinicalNotes().btnNewSOAP().setEnabled(false);
		}
	}

	private void fillIPStatusCombo(ClinicalNotesVo voClinicalNote)
	{
		if (voClinicalNote != null)
		{
			// In Correct mode, HCP ok and either Active or Correct
			if (correctModeIP(voClinicalNote.getCurrentStatus()))
			{
				form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setText("Correct");

				fillIPStatusCorrect();
			}
			// Requires Validation
			else if (voClinicalNote.getCurrentStatus().getStatusIsNotNull() && voClinicalNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
			{

				if (domain.getHcpLiteUser() != null)
					form.lyrTabs().tabClinicalNotes().btnUpdateSOAP().setText("Validate");
				fillIPStatusValidation();
			}
			// Draft, HCP OK
			else if (voClinicalNote.getCurrentStatus().getStatusIsNotNull() && voClinicalNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT) && domain.getHcpLiteUser() != null && testIpDiscipline())
			// domain.getHcpLiteUser().equals(form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp()))
			{
				fillIPStatusNew();
			}
			// Draft, HCP not OK
			else if (voClinicalNote.getCurrentStatus().getStatusIsNotNull() && voClinicalNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT) && domain.getHcpLiteUser() == null)
			{
				fillIPStatusPreValidation();
			}
		}
	}

	private boolean testIpDiscipline()
	{
		MemberOfStaffVo fullVo = null;
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo) domain.getMosUser();
		if (mos != null)
			fullVo = domain.getMemberOfStaff(mos);

		if (fullVo != null)
		{
			if (fullVo.getHcpIsNotNull())
			{
				if (fullVo.getHcp().getHcpTypeIsNotNull())
				{
					if (form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue() != null && form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcpIsNotNull() && form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp().getHcpTypeIsNotNull())
					{
						if (form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp().getHcpType().equals(fullVo.getHcp().getHcpType()))
							return true;
					}
				}
			}
		}
		return false;
	}

	private boolean correctModeIP(ClinicalNoteStatusVo currentStatus)
	{
		if (currentStatus != null && currentStatus.getStatusIsNotNull() && (currentStatus.getStatus().equals(ClinicalNotesStatus.ACTIVE) || currentStatus.getStatus().equals(ClinicalNotesStatus.CORRECTED)) && domain.getHcpLiteUser() != null && testIpDiscipline())
			// domain.getHcpLiteUser().equals(form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp()))
			return true;
		else
			return false;
	}

	private boolean validationIPMode(ClinicalNoteStatusVo currentStatus)
	{
		if (currentStatus != null && currentStatus.getStatusIsNotNull() && (currentStatus.getStatus().equals(ClinicalNotesStatus.PREVALIDATION)) && domain.getHcpLiteUser() != null && testIpDiscipline())
			// domain.getHcpLiteUser().equals(form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().getValue().getAuthoringHcp()))
			return true;
		else
			return false;
	}

	private boolean validationOPMode(ClinicalNoteStatusVo currentStatus)
	{
		if (currentStatus != null && currentStatus.getStatusIsNotNull() && (currentStatus.getStatus().equals(ClinicalNotesStatus.PREVALIDATION)) && domain.getHcpLiteUser() != null && testOpDiscipline())
			// domain.getHcpLiteUser().equals(form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue().getAuthoringHcp()))
			return true;
		else
			return false;
	}

	private boolean testOpDiscipline()
	{
		MemberOfStaffVo fullVo = null;
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo) domain.getMosUser();
		if (mos != null)
			fullVo = domain.getMemberOfStaff(mos);

		if (fullVo != null)
		{
			if (fullVo.getHcpIsNotNull())
			{
				if (fullVo.getHcp().getHcpTypeIsNotNull())
				{
					if (form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue() != null && form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue().getAuthoringHcpIsNotNull() && form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue().getAuthoringHcp().getHcpTypeIsNotNull())
					{
						if (form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue().getAuthoringHcp().getHcpType().equals(fullVo.getHcp().getHcpType()))
							return true;
					}
				}
			}
		}
		return false;
	}

	private void enableLinks(ClinicalNotesVo voClinicalNote)
	{
		if (form.getMode().equals(FormMode.VIEW))
			return;

		boolean bEnable = true;
		if (voClinicalNote == null)
			bEnable = true;
		else if (voClinicalNote.getIsDerivedNoteIsNotNull() && voClinicalNote.getIsDerivedNote().equals(Boolean.TRUE))
			bEnable = true;
		else
			bEnable = false;

		makeLinksClinicalNoteEnable(bEnable);
	}

	private void makeLinksClinicalNoteEnable(boolean bEnable)
	{
		form.lyrTabs().tabClinicalNotes().lnkAnalysisDiagnosis().setEnabled(bEnable);
		form.lyrTabs().tabClinicalNotes().lnkObjectiveProblem().setEnabled(bEnable);
		form.lyrTabs().tabClinicalNotes().lnkSubjectiveProblem().setEnabled(bEnable);
		form.lyrTabs().tabClinicalNotes().lnkSurgery().setEnabled(bEnable);
	}

	private void makeLinksOPClinicalNoteEnable(boolean bEnable)
	{
		form.lyrTabs().tabOPDNote().lnkOPDiagnosis().setEnabled(bEnable);
		form.lyrTabs().tabOPDNote().lnkOPManagementMedication().setEnabled(bEnable);
		form.lyrTabs().tabOPDNote().lnkOPProblem().setEnabled(bEnable);
		form.lyrTabs().tabOPDNote().lnkOPSurgery().setEnabled(bEnable);
	}

	private void openNotingDetails()
	{
		clearNotingDetails();
		form.setMode(FormMode.VIEW);

		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())  //WDEV-19027
		{
			fillSummaryGrid();

			NotingDetailsVo voNote = domain.getNotingDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext());//WDEV-19027
			if (voNote != null)
			{
				form.getLocalContext().setSelectedNotingDetailsVo(voNote);

				GenForm.lyrTabsLayer.tabDetailsContainer.grdNotingDetailsRow row = form.lyrTabs().tabDetails().grdNotingDetails().getRowByValue("Dictated");
				if (row != null)
					row.setcolSelect(voNote.getIsDictatedIsNotNull() ? voNote.getIsDictated().booleanValue() : false);

				row = form.lyrTabs().tabDetails().grdNotingDetails().getRowByValue("Written");
				if (row != null)
					row.setcolSelect(voNote.getIsWrittenIsNotNull() ? voNote.getIsWritten().booleanValue() : false);

				row = form.lyrTabs().tabDetails().grdNotingDetails().getRowByValue("Typed");
				if (row != null)
					row.setcolSelect(voNote.getIsTypedIsNotNull() ? voNote.getIsTyped().booleanValue() : false);

				form.lyrTabs().tabDetails().btnUpdateNoting().setVisible(true);
				form.lyrTabs().tabDetails().btnUpdateNoting().setEnabled(true);

				form.lyrTabs().tabDetails().btnNewNoting().setVisible(true);
				form.lyrTabs().tabDetails().btnNewNoting().setEnabled(false);
			}
			else
			{
				form.lyrTabs().tabDetails().btnNewNoting().setVisible(true);
				form.lyrTabs().tabDetails().btnNewNoting().setEnabled(true);

				form.lyrTabs().tabDetails().btnUpdateNoting().setVisible(false);
				form.lyrTabs().tabDetails().btnUpdateNoting().setEnabled(false);
			}
		}
		else
		{
			form.lyrTabs().tabDetails().btnUpdateNoting().setVisible(true);
			form.lyrTabs().tabDetails().btnUpdateNoting().setEnabled(false);

			form.lyrTabs().tabDetails().btnNewNoting().setVisible(true);
			form.lyrTabs().tabDetails().btnNewNoting().setEnabled(false);
		}
	}

	private void fillSummaryGrid()
	{
		form.lyrTabs().tabDetails().grdSummary().getRows().clear();

		// Check for OutPatientCliicalNotes
		OutpatientNotesOutcomeVo voOutpatientNotesOutcome = null;
		if (!returnContextType())
		{
			if (form.getLocalContext().getCurrentOPNote() == null)
				voOutpatientNotesOutcome = domain.getOutpatientNotesForCareContext(form.getGlobalContext().Core.getCurrentCareContext());//WDEV-19027
		}

		GenForm.lyrTabsLayer.tabDetailsContainer.grdSummaryRow rowSummary = null;
		if (form.getLocalContext().getCurrentOPNote() != null || voOutpatientNotesOutcome != null)
		{
			rowSummary = form.lyrTabs().tabDetails().grdSummary().getRows().newRow();
			rowSummary.setSummaryDetail("Out-patient Clinical note recorded.");
		}

		if (returnContextType())
		{
			// Check For IP ClinicalNotes
			ClinicalNotesVo voClinicalNote = domain.getClinicalNotesForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			if (voClinicalNote != null)
			{
				rowSummary = form.lyrTabs().tabDetails().grdSummary().getRows().newRow();
				rowSummary.setSummaryDetail("In-patient Clinical note recorded.");
			}
		}

		// Check For a Graphical Assessment
		PatientAssessmentVo patientAssessmentVo = domain.getPatientAssessmentForCareContext(form.getGlobalContext().Core.getCurrentCareContext());  //WDEV-19027
		if (patientAssessmentVo != null)
		{
			rowSummary = form.lyrTabs().tabDetails().grdSummary().getRows().newRow();
			rowSummary.setSummaryDetail("Graphical annotation recorded.");
		}

		// Check for an Assessment
		PatientUserDefinedObjectListVoCollection voColl = domain.listPatientUserDefinedObjectsForCareContext(form.getGlobalContext().Core.getCurrentCareContext());  //WDEV-19027
		if (voColl != null && voColl.size() > 0)
		{
			rowSummary = form.lyrTabs().tabDetails().grdSummary().getRows().newRow();
			rowSummary.setSummaryDetail("Assessment recorded.");
		}
	}

	private void clearNotingDetails()
	{
		loadNotingLookups();
	}

	private void loadNotingLookups()
	{
		form.lyrTabs().tabDetails().grdNotingDetails().getRows().clear();
		GenForm.lyrTabsLayer.tabDetailsContainer.grdNotingDetailsRow row = form.lyrTabs().tabDetails().grdNotingDetails().getRows().newRow();
		row.setcolClinicalNote("Dictated");
		row.setValue("Dictated");
		row = form.lyrTabs().tabDetails().grdNotingDetails().getRows().newRow();
		row.setcolClinicalNote("Written");
		row.setValue("Written");
		row = form.lyrTabs().tabDetails().grdNotingDetails().getRows().newRow();
		row.setcolClinicalNote("Typed");
		row.setValue("Typed");
	}

	private void clearClinicalNotes()
	{
		form.lyrTabs().tabClinicalNotes().customControlClinicalNotesAuthoiring().setValue(null);

		form.lyrTabs().tabClinicalNotes().txtSubjective().setValue("");
		form.lyrTabs().tabClinicalNotes().txtObjective().setValue("");
		form.lyrTabs().tabClinicalNotes().txtAnalysis().setValue("");
		form.lyrTabs().tabClinicalNotes().txtPlan().setValue("");
		form.lyrTabs().tabClinicalNotes().cmbStatusIP().setValue(null);
	}

	protected void onBtnNewNotingClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);

		form.lyrTabs().tabAssessment().setHeaderEnabled(false);
		form.lyrTabs().tabClinicalNotes().setHeaderEnabled(false);
		form.lyrTabs().tabOPDNote().setHeaderEnabled(false);
		form.lyrTabs().tabDetails().setHeaderEnabled(true);
		form.lyrTabs().tabDrawing().setHeaderEnabled(false);
	}

	protected void onBtnUpdateNotingClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);

		form.lyrTabs().tabAssessment().setHeaderEnabled(false);
		form.lyrTabs().tabClinicalNotes().setHeaderEnabled(false);
		form.lyrTabs().tabOPDNote().setHeaderEnabled(false);
		form.lyrTabs().tabDetails().setHeaderEnabled(true);
		form.lyrTabs().tabDrawing().setHeaderEnabled(false);
	}

	protected void onBtnSaveNotingClick() throws PresentationLogicException
	{
		if (saveNotingDetails())
		{
			openNotingDetails();
			enableAllTabs();
		}
	}

	private void enableAllTabs()
	{
		form.lyrTabs().tabAssessment().setHeaderEnabled(true);
		form.lyrTabs().tabClinicalNotes().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()) && domain.getHcpUser()!=null);//WDEV-19027 //temporary 
		form.lyrTabs().tabDetails().setHeaderEnabled(true);
		form.lyrTabs().tabDrawing().setHeaderEnabled(true);
		form.lyrTabs().tabOPDNote().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()) && domain.getHcpUser()!=null);//WDEV-19027   //temporary 
	}

	private boolean saveNotingDetails()
	{
		NotingDetailsVo record = populateNotingDetailsDataFromScreen(form.getLocalContext().getSelectedNotingDetailsVo());

		String[] errors = record.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);

			return false;
		}

		try
		{
			record = domain.saveNotingDetails(record);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedNotingDetailsVo(record);
			openNotingDetails();
			return false;
		}
		catch (DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			form.getLocalContext().setSelectedNotingDetailsVo(record);
			openNotingDetails();
			return false;
		}

		form.getLocalContext().setSelectedNotingDetailsVo(record);

		return true;
	}

	private NotingDetailsVo populateNotingDetailsDataFromScreen(NotingDetailsVo selectedNotingDetailsVo)  //WDEV-19027
	{
		if (selectedNotingDetailsVo == null)
			selectedNotingDetailsVo = new NotingDetailsVo();

		if (!selectedNotingDetailsVo.getCareContextIsNotNull())
			selectedNotingDetailsVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		GenForm.lyrTabsLayer.tabDetailsContainer.grdNotingDetailsRow row = form.lyrTabs().tabDetails().grdNotingDetails().getRowByValue("Dictated");
		if (row != null && row.getcolSelect())
			selectedNotingDetailsVo.setIsDictated(new Boolean(true));
		else
			selectedNotingDetailsVo.setIsDictated(new Boolean(false));

		row = form.lyrTabs().tabDetails().grdNotingDetails().getRowByValue("Written");
		if (row != null && row.getcolSelect())
			selectedNotingDetailsVo.setIsWritten(new Boolean(true));
		else
			selectedNotingDetailsVo.setIsWritten(new Boolean(false));

		row = form.lyrTabs().tabDetails().grdNotingDetails().getRowByValue("Typed");
		if (row != null && row.getcolSelect())
			selectedNotingDetailsVo.setIsTyped(new Boolean(true));
		else
			selectedNotingDetailsVo.setIsTyped(new Boolean(false));

		return selectedNotingDetailsVo;
	}

	protected void onBtnCancelNotingClick() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		openNotingDetails();

		enableAllTabs();

	}

	protected void onBtnUpdateGraphicClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		updateDrawingButtonStatus();
		form.lyrTabs().tabDrawing().customGraphic().setEnabled(Boolean.TRUE);
		form.lyrTabs().tabDrawing().customGraphic().setReadOnly(Boolean.FALSE);
		form.lyrTabs().tabDrawing().customAuthoringInfo().setIsRequiredPropertyToControls(true);

		form.lyrTabs().tabAssessment().setHeaderEnabled(false);
		form.lyrTabs().tabClinicalNotes().setHeaderEnabled(false);
		form.lyrTabs().tabOPDNote().setHeaderEnabled(false);
		form.lyrTabs().tabDetails().setHeaderEnabled(false);
		form.lyrTabs().tabDrawing().setHeaderEnabled(true);
	}

	private void loadAvalilableImages()
	{
		form.lyrTabs().tabDrawing().cmbGraphicAdnotationImage().clear();

		GraphicAssessmentVo graphicAssessment = domain.getActiveGraphicAssessment(UserDefinedAssessmentType.MEDICALNOTING);
		if (graphicAssessment == null)
			return;

		for (int i = 0; i < graphicAssessment.getImages().size(); i++)
		{
			DrawingGraphicImageVo image = graphicAssessment.getImages().get(i);
			if (image != null)
			{
				form.lyrTabs().tabDrawing().cmbGraphicAdnotationImage().newRow(image, image.getImageName() == null ? "Untitled" : image.getImageName());
			}
		}
	}

	protected void onBtnNewGraphicClick() throws PresentationLogicException
	{
		clearScreen();
		form.lyrTabs().tabDrawing().customGraphic().clearScreen();

		form.lyrTabs().tabDrawing().customAuthoringInfo().initializeComponent();// wdev-1915
		form.lyrTabs().tabDrawing().customAuthoringInfo().setIsRequiredPropertyToControls(true);
		form.setMode(FormMode.EDIT);

		updateDrawingButtonStatus();
		enableHelpUrlBtnFromConfig();
		form.lyrTabs().tabAssessment().setHeaderEnabled(false);
		form.lyrTabs().tabClinicalNotes().setHeaderEnabled(false);
		form.lyrTabs().tabOPDNote().setHeaderEnabled(false);
		form.lyrTabs().tabDetails().setHeaderEnabled(false);
		form.lyrTabs().tabDrawing().setHeaderEnabled(true);
	}

	private void enableHelpUrlBtnFromConfig()
	{
		GraphicAssessmentVo graphicAssessment = domain.getActiveGraphicAssessment(UserDefinedAssessmentType.MEDICALNOTING);
		enableHelpUrlImage(graphicAssessment != null ? graphicAssessment.getHelpUrl() : null);
	}

	protected void onBtnCancelGraphicClick() throws PresentationLogicException
	{
		openDrawing();
		enableAllTabs();
	}

	boolean checkDrawingInputData(PatientAssessmentVo patientAssessment)
	{
		if (patientAssessment.getAssessmentData() == null || patientAssessment.getAssessmentData().getGraphicFindings() == null || patientAssessment.getAssessmentData().getGraphicFindings().size() == 0)
		{
			engine.showMessage("Please add at least one finding !");
			return false;
		}

		AuthoringInformationVo authoringInfo = form.lyrTabs().tabDrawing().customAuthoringInfo().getValue();
		if (authoringInfo == null)
		{
			engine.showMessage("Please enter Authoring HCP and Authoring Date/Time !");
			return false;
		}
		if (authoringInfo.getAuthoringHcp() == null)
		{
			engine.showMessage("Please enter Authoring HCP !");
			return false;
		}
		if (authoringInfo.getAuthoringDateTime() == null)
		{
			engine.showMessage("Please enter Authoring Date/Time !");
			return false;
		}

		return true;
	}

	protected void onBtnSaveGraphicClick() throws PresentationLogicException
	{
		if (form.lyrTabs().tabDrawing().cmbGraphicAdnotationImage().getValue() == null)
		{
			engine.showMessage("You must select a Body Map before saving.");
			form.lyrTabs().tabDrawing().cmbGraphicAdnotationImage().setFocus();
			return;
		}
		if (saveDrawing())
		{
			openDrawing();

			enableAllTabs();
		}
	}

	private boolean saveDrawing() throws FormOpenException  //WDEV-19027
	{
		PatientAssessmentVo patientAssessment = form.lyrTabs().tabDrawing().customGraphic().getPatientAssessment();

		patientAssessment.setAuthoringInformation(form.lyrTabs().tabDrawing().customAuthoringInfo().getValue());

		//WDEV-11721
		if(!patientAssessment.getPatientIsNotNull())
			patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		//WDEV-11526 - starts here
		if (!patientAssessment.getEpisodeOfCareIsNotNull())
			patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		//WDEV-11526 - ends here
		
		if (!patientAssessment.getCareContextIsNotNull())
			patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		if (checkDrawingInputData(patientAssessment) == false)
			return false;

		String[] errors = patientAssessment.validate();

		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			patientAssessment = domain.savePatientAssessment(patientAssessment);
			form.getLocalContext().setPatientAssessment(patientAssessment);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setPatientAssessment(patientAssessment);
			open();
			return false;
		}

		return true;
	}

	protected void onDyngrdAssessmentsCellValueChanged(DynamicGridCell cell)
	{
		// Refresh Reason Column
		DynamicGridColumn col = cell.getColumn();
		if (col != null && col.getIdentifier().equals(STATUS_COLUMN))
		{
			DynamicGridRow row = cell.getRow();
			if (row != null)
			{
				DynamicGridCell reasonCell = row.getCells().get(getDynGridColumn(REASON_COLUMN));
				Object statusValue = cell.getValue();
				if (reasonCell != null)
				{
					if (statusValue instanceof PatientAssessmentStatusReason)
						populateReasonCell(reasonCell, (PatientAssessmentStatusReason) statusValue);
				}
				else
				{
					reasonCell.getItems().clear();
				}
			}
		}
	}

	protected void onDyngrdAssessmentsRowSelectionChanged(DynamicGridRow row)
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			PatientAssessmentListVo voPatientAssessmentList = getSelectedPatientAssessment(row);
			form.getLocalContext().setVoPatientAssessment(voPatientAssessmentList);
			enableContextMenu();
		}
	}

	private void addPatientAssessment()
	{
		newInstance();
	}

	private void updatePatientAssessment()
	{
		updateInstance();
	}

	public void updateInstance()
	{
		form.getLocalContext().setVoPatientAssessment(getSelectedPatientAssessment(form.lyrTabs().tabAssessment().dyngrdAssessments().getSelectedRow()));
		form.setMode(FormMode.EDIT);
	}

	public void newInstance()
	{
		engine.open(form.getForms().Assessment.UserDefinedFormSelect);
	}

	private PatientUserDefinedObjectListVo getParentPatientUserDefinedObjectList()
	{
		DynamicGridRow row = form.lyrTabs().tabAssessment().dyngrdAssessments().getSelectedRow();
		if (row != null && row.getParent() != null)
		{
			Object value = row.getParent().getValue();
			if (value instanceof PatientUserDefinedObjectListVo)
				return (PatientUserDefinedObjectListVo) value;
		}

		return null;
	}

	private void updateGraphicAssessment(boolean editComponent)
	{
		PatientUserDefinedObjectListVo voPatientUserDefinedObjectList = getParentPatientUserDefinedObjectList();
		if (voPatientUserDefinedObjectList == null)
		{
			displayError("Please select a Patient User Defined Object");
			return;
		}
		PatientAssessmentListVo voPatientAssessmentList = getPatientAssessmentFromGrid();
		if (voPatientAssessmentList == null)
		{
			displayError("Please select a Patient Assessment");
			return;
		}
		PatientAssessmentDataListVo voPatientAssessmentData = voPatientAssessmentList.getAssessmentData();
		if (voPatientAssessmentData == null)
		{
			displayError("Please select a Graphic Patient Assessment Data");
			return;
		}
		PatientUserDefinedObjectVo voPatientUserDefinedObjectVo = domain.getPatientUserDefinedObject(voPatientUserDefinedObjectList);
		UserDefinedObjectComponentRefVo editedComponent = getEditedComponent(voPatientUserDefinedObjectVo);
		if (editedComponent == null)
		{
			displayError("Please select a User Defined Object Component");
			return;
		}

		form.getGlobalContext().Clinical.PatientAssessment.setEditComponent(new Boolean(editComponent));
		form.getGlobalContext().Clinical.PatientAssessment.setEditedComponent(editedComponent);
		form.getGlobalContext().Clinical.PatientAssessment.setSelectedAssessment(voPatientAssessmentList);
		form.getGlobalContext().Assessment.setPatientUserDefinedObject(voPatientUserDefinedObjectVo);
		// WDEV-2301
		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());

		engine.open(form.getForms().Assessment.GraphicAssessmentInstantiation);
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PatientAssessment.Add :
				addPatientAssessment();
			break;

			case GenForm.ContextMenus.PatientAssessment.Update :
				updatePatientAssessment();
			break;

			case GenForm.ContextMenus.PatientAssessment.AddGraphicAssessment :
				updateGraphicAssessment(true);
			break;

			case GenForm.ContextMenus.PatientAssessment.UpdateGraphicAssessment :
				updateGraphicAssessment(true);
			break;

			case GenForm.ContextMenus.PatientAssessment.ViewGraphicAssessment :
				updateGraphicAssessment(false);
			break;

			case GenForm.ContextMenus.PatientAssessment.AddUserAssessment :
				updateUserAssessment(true);
			break;

			case GenForm.ContextMenus.PatientAssessment.UpdateUserAssessment :
				updateUserAssessment(true);
			break;

			case GenForm.ContextMenus.PatientAssessment.ViewUserAssessment :
				updateUserAssessment(false);
			break;
		}
	}

	private void updateUserAssessment(boolean updateAssessment)
	{
		PatientUserDefinedObjectListVo voPatientUserDefinedObjectList = getParentPatientUserDefinedObjectList();
		if (voPatientUserDefinedObjectList == null)
		{
			displayError("Please select a Patient User Defined Object");
			return;
		}
		PatientAssessmentListVo voPatientAssessmentList = getPatientAssessmentFromGrid();
		if (voPatientAssessmentList == null)
		{
			displayError("Please select a Patient Assessment");
			return;
		}

		PatientAssessmentDataListVo voPatientAssessmentData = voPatientAssessmentList.getAssessmentData();
		if (voPatientAssessmentData == null)
		{
			displayError("Please select a Patient Assessment Data");
			return;
		}

		PatientUserDefinedObjectVo voPatientUserDefinedObjectVo = domain.getPatientUserDefinedObject(voPatientUserDefinedObjectList);
		UserDefinedObjectComponentRefVo editedComponent = getEditedComponent(voPatientUserDefinedObjectVo);
		if (editedComponent == null)
		{
			displayError("Please select a User Defined Object Component");
			return;
		}
		form.getGlobalContext().Clinical.PatientAssessment.setEditComponent(new Boolean(updateAssessment));
		form.getGlobalContext().Clinical.PatientAssessment.setEditedComponent(editedComponent);
		form.getGlobalContext().Clinical.PatientAssessment.setSelectedAssessment(voPatientAssessmentList);
		form.getGlobalContext().Assessment.setPatientUserDefinedObject(voPatientUserDefinedObjectVo);

		form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());// form.getForms().Clinical.ClinicalNoteDrawing);

		engine.open(form.getForms().Assessment.UserAssessmentInstantiationWithComponent);
	}

	private void openDialog(String link)
	{
		if (link.equals(PROBLEMS_SUBJECTIVE))
		{
			form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
			form.getGlobalContext().Clinical.setReturnToFormCDISubjectiveProblem(Boolean.TRUE);
			form.getGlobalContext().Clinical.setReturnToFormCDITitle("Problem: ");
			engine.open(form.getForms().Clinical.PatientProblems_Dialog);
		}

		if (link.equals(PROBLEMS_OBJECTIVE))
		{
			form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
			form.getGlobalContext().Clinical.setReturnToFormCDISubjectiveProblem(Boolean.FALSE);
			form.getGlobalContext().Clinical.setReturnToFormCDITitle("Problem: ");
			engine.open(form.getForms().Clinical.PatientProblems_Dialog);
		}

		if (link.equals(DIAGNOSIS))
		{
			form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
			form.getGlobalContext().Clinical.setReturnToFormCDITitle("Diagnosis / Complication: ");
			engine.open(form.getForms().Clinical.DiagnosisComplications_Dialog);
		}

		if (link.equals(PROCEDURES))
		{
			form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
			form.getGlobalContext().Clinical.setReturnToFormCDITitle("Procedure: ");
			engine.open(form.getForms().Clinical.Procedures_Dialog);
		}

		if (link.equals(OP_PROBLEMS))
		{
			form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
			form.getGlobalContext().Clinical.setReturnToFormCDITitle("Problem: ");
			engine.open(form.getForms().Clinical.PatientProblems_Dialog);
		}

		if (link.equals(OP_MEDICATION))
		{
			form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
			form.getGlobalContext().Clinical.setReturnToFormCDITitle("Medication: ");
			engine.open(form.getForms().Clinical.MedicationMultipleDoses_Dialog);
		}

		if (link.equals(OP_DIAGNOSIS))
		{
			form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
			form.getGlobalContext().Clinical.setReturnToFormCDITitle("Diagnosis / Complication: ");
			engine.open(form.getForms().Clinical.DiagnosisComplications_Dialog);
		}

		if (link.equals(OP_SURGERY))
		{
			form.getGlobalContext().Clinical.setReturnToFormName(engine.getFormName());
			form.getGlobalContext().Clinical.setReturnToFormCDITitle("Procedure: ");
			engine.open(form.getForms().Clinical.Procedures_Dialog);
		}
	}

	protected void onCmbFollowUpValueChanged() throws PresentationLogicException
	{
		enableFollowUpInstructions(true);
	}

	private void enableFollowUpInstructions()
	{
		enableFollowUpInstructions(false);
	}

	private void enableFollowUpInstructions(boolean clearControls)
	{
		if (form.getMode().equals(FormMode.EDIT) && !(form.getGlobalContext().Core.getClinicalNotingModeIsNotNull() && form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW)))
		{
			OpdFollowUp followUp = form.lyrTabs().tabOPDNote().cmbFollowUp().getValue();
			boolean enablefollowUpControls = true;
			if (followUp != null && followUp.equals(OpdFollowUp.DISCHARGEDFROMCLINIC))
				enablefollowUpControls = false;

			form.lyrTabs().tabOPDNote().cmbReview().setEnabled(enablefollowUpControls);
			form.lyrTabs().tabOPDNote().intReview().setEnabled(enablefollowUpControls);
			form.lyrTabs().tabOPDNote().richTextInstructions().setEnabled(enablefollowUpControls);
			if (enablefollowUpControls == false && clearControls)
			{
				form.lyrTabs().tabOPDNote().cmbReview().setValue(null);
				form.lyrTabs().tabOPDNote().intReview().setValue(null);
				form.lyrTabs().tabOPDNote().richTextInstructions().setValue("");
				form.lyrTabs().tabOPDNote().cmbReview().setFocus();
			}
		}
	}

	protected void onBtnCancelOPNotesClick() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		openOPClinicalNotes();
		enableAllTabs();
		if (isDialog())
			onBtnOPCloseClick();
	}

	private void openOPClinicalNotes()
	{
		form.setMode(FormMode.VIEW);
		clearScreen();

		form.lyrTabs().showtabOPDNote();
		form.lyrTabs().tabOPDNote().lnkOPManagementMedication().setVisible(false);

		initialiseOPScreenControls();

		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull() || form.getGlobalContext().Clinical.getDialogFormNameIsNotNull())  ////WDEV-19027
		{
			OutpatientNotesOutcomeVo voOutpatientNotesOutcome;
			if(isDialog() && form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
				voOutpatientNotesOutcome = domain.getOutpatientNotesForCareContext(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCareContext());  //WDEV-19027
			else
				voOutpatientNotesOutcome = domain.getOutpatientNotesForCareContext(form.getGlobalContext().Core.getCurrentCareContext());  //WDEV-19027
			form.getLocalContext().setCurrentOPNote(voOutpatientNotesOutcome);

			form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setText("Edit");

			if (voOutpatientNotesOutcome == null)
			{
				form.lyrTabs().tabOPDNote().btnNewOPClinicalNote().setVisible(true);
				form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(false);
			}
			else
			{
				
				form.lyrTabs().tabOPDNote().btnNewOPClinicalNote().setVisible(false);
				form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(true);
			

				// In Correct mode
				if (correctModeOP(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus()))
					form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setText("Correct");

				displayOPNoteRecord(voOutpatientNotesOutcome);

				if (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() && form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT))
				{
					form.setMode(FormMode.EDIT);
					form.lyrTabs().tabOPDNote().cmbFollowUp().setEnabled(true);

					if (form.getGlobalContext().Core.getClinicalNotingModeIsNotNull() && form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW))
					{
						if (voOutpatientNotesOutcome.getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatusIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus().getStatusIsNotNull())
						{
							/*
							 * if
							 * (voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus().getStatus().getText().equals("Requires
							 * Validation") ||
							 * voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus().getStatus().getText().equals("Active"))
							 */
							setOpTransBy(false);
							form.lyrTabs().tabOPDNote().cmbFollowUp().setEnabled(false);
						}

						form.lyrTabs().tabOPDNote().chkForReviewOP().setVisible(false);
						form.lyrTabs().tabOPDNote().cmbDisciplineOP().setVisible(false);
						form.lyrTabs().tabOPDNote().lblDisciplineOP().setVisible(false);
						form.lyrTabs().tabOPDNote().setcustomControlReviewedOPVisible(true);
						form.lyrTabs().tabOPDNote().customControlReviewedOP().setLabels(AuthoringLabelType.REVIEWING);
						form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().setVisible(true);
						form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().setValue(true);

						try
						{
							onChkMarkAsReviewedOPValueChanged();
						}
						catch (PresentationLogicException e)
						{
							e.printStackTrace();
						}

						if (!form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCPIsNotNull() && !form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTimeIsNotNull())
						{
							form.lyrTabs().tabOPDNote().customControlReviewedOP().setEnabledAuthoringHCP(Boolean.TRUE);
							form.lyrTabs().tabOPDNote().customControlReviewedOP().setEnabledDateTime(Boolean.TRUE);
						}

						setRichBoxControls(false);
					}

					if (voOutpatientNotesOutcome.getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getForReviewIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getReviewingHCPIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getReviewingDateTimeIsNotNull())

					{
						setCustomReviewedOP(Boolean.FALSE);
						form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().setEnabled(false);

						AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
						voAuthoringInformation.setAuthoringHcp(form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingHCP());
						voAuthoringInformation.setAuthoringDateTime(form.getGlobalContext().Clinical.getCurrentClinicalNote().getReviewingDateTime());
						form.lyrTabs().tabOPDNote().customControlReviewedOP().setValue(voAuthoringInformation);

						setOpTransBy(false);
					}

					form.lyrTabs().tabOPDNote().btnOPClose().setEnabled(false);

				}
				else
				{
					if (voOutpatientNotesOutcome.getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getForReviewIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getReviewingHCPIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getReviewingDateTimeIsNotNull())
						setOpTransBy(false);
					
					boolean isDraft = voOutpatientNotesOutcome.getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull() 
					&& voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatusIsNotNull()
					&& ClinicalNotesStatus.DRAFT.equals(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus().getStatus());
			
					boolean canEdit = ((isDraft && voOutpatientNotesOutcome.getClinicalNote().getAuthoringInformation().getAuthoringHcp().equals(domain.getHcpLiteUser())) || !isDraft);
					
					form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(true);
					form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setEnabled(canEdit);

					form.lyrTabs().tabOPDNote().btnNewOPClinicalNote().setVisible(false);
					form.lyrTabs().tabOPDNote().btnNewOPClinicalNote().setEnabled(false);
				}
			}
		}
		checkReturnToForm();

		updateOPNotingButtonsStatus();

		if (isDialog())
		{
			showTabOPClinicalNote();
			//OutpatientNotesOutcomeVo voOutpatientNotesOutcome = domain.getOutpatientNotesForClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			OutpatientNotesOutcomeVo voOutpatientNotesOutcome;
			if(form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
				voOutpatientNotesOutcome = domain.getOutpatientNotesForCareContext(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCareContext()); //WDEV-19027
			else
				voOutpatientNotesOutcome = domain.getOutpatientNotesForCareContext(form.getGlobalContext().Core.getCurrentCareContext());  //WDEV-19027
			

			if (form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT))
			{
				isBtnOPCloseVisible(false);

				showHideCustomComponent(form.lyrTabs().tabOPDNote().customControlOPAuthoring(), Boolean.FALSE, false);

				setRichBoxControls(true);
				updateOPNotingButtonsStatus();

				if (form.getGlobalContext().Core.getClinicalNotingModeIsNotNull() && form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW))
					setRichBoxControls(false);

				form.lyrTabs().tabAssessment().setHeaderEnabled(false);
				form.lyrTabs().tabOPDNote().setHeaderEnabled(true);
				form.lyrTabs().tabDetails().setHeaderEnabled(false);
				form.lyrTabs().tabDrawing().setHeaderEnabled(false);
			}

			if (form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.VIEW))
			{
				isBtnOPCloseVisible(true);
				if (form.lyrTabs().tabOPDNote().isVisible() == true)
				{
					if (correctModeOP(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus()))
					{
						// In Correct mode
						form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(true);
						form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setText("Correct");
					}

					if (validationOPMode(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus()))
					{
						form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(true);
						form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setText("Validate");
					}
					//else
					//{
					//  form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(false); 
					//}
					  
					 
				}
				if (form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.VIEW) && form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotingMode() == null)
					form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(false); 	
			}
		}
	}

	private void setOpTransBy(boolean isVisible)
	{
		form.lyrTabs().tabOPDNote().lblTransByOP().setVisible(isVisible);
		form.lyrTabs().tabOPDNote().lblTransDTOP().setVisible(isVisible);
		form.lyrTabs().tabOPDNote().qmbTransByOP().setVisible(isVisible);
		form.lyrTabs().tabOPDNote().dtimTransDTOP().setVisible(isVisible);
	}

	private void setIpTransBy(boolean isVisible)
	{
		form.lyrTabs().tabClinicalNotes().lblTransByIP().setVisible(isVisible);
		form.lyrTabs().tabClinicalNotes().lblTransDTIP().setVisible(isVisible);
		form.lyrTabs().tabClinicalNotes().qmbTransIP().setVisible(isVisible);
		form.lyrTabs().tabClinicalNotes().dtimTransByIP().setVisible(isVisible);
	}

	private void setRichBoxControls(boolean isEnabled)
	{
		form.lyrTabs().tabOPDNote().richTextObjective().setEnabled(isEnabled);
		form.lyrTabs().tabOPDNote().richTextInstructions().setEnabled(isEnabled);
		form.lyrTabs().tabOPDNote().richTextPlan().setEnabled(isEnabled);
	}

	private void displayOPNoteRecord(OutpatientNotesOutcomeVo voOutpatientNotesOutcome)
	{
		if (voOutpatientNotesOutcome.getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull())
		{
			form.lyrTabs().tabOPDNote().customControlOPAuthoring().setValue(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getAuthoringInfoIsNotNull() ? voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getAuthoringInfo() : null);

			if (voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getIsTranscribedIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getIsTranscribed().booleanValue())
			{
				form.lyrTabs().tabOPDNote().dtimTransDTOP().setValue(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getSystemInfo().getCreationDateTime());
				form.lyrTabs().tabOPDNote().qmbTransByOP().newRow(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getSystemInfo().getCreationUser(), voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getSystemInfo().getCreationUser());
				form.lyrTabs().tabOPDNote().qmbTransByOP().setValue(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getSystemInfo().getCreationUser());

				showHideOPTranscribedControls(true);
			}
		}

		form.lyrTabs().tabOPDNote().richTextInstructions().setValue(voOutpatientNotesOutcome.getInstructionNextClinic());

		if (voOutpatientNotesOutcome.getClinicalNoteIsNotNull())
		{
			form.lyrTabs().tabOPDNote().richTextObjective().setValue(voOutpatientNotesOutcome.getClinicalNote().getObjectiveNote());
			form.lyrTabs().tabOPDNote().richTextPlan().setValue(voOutpatientNotesOutcome.getClinicalNote().getPlanNote());

			fillOPStatusCombo(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote());
			if (form.lyrTabs().tabOPDNote().cmbStatusOP().getValues().size() == 0)
				form.lyrTabs().tabOPDNote().cmbStatusOP().newRow(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus().getStatus(), voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus().getStatus().getText());

			form.lyrTabs().tabOPDNote().cmbStatusOP().setValue(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatusIsNotNull() ? voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus().getStatus() : null);
		}

		if (voOutpatientNotesOutcome.getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getForReviewIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getForReview().booleanValue())
		{
			form.lyrTabs().tabOPDNote().chkForReviewOP().setValue(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getForReview().booleanValue());
			form.lyrTabs().tabOPDNote().cmbDisciplineOP().setValue(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getForReviewDiscipline());

			form.lyrTabs().tabOPDNote().chkForReviewOP().setVisible(true);
			form.lyrTabs().tabOPDNote().cmbDisciplineOP().setVisible(true);
			form.lyrTabs().tabOPDNote().lblDisciplineOP().setVisible(true);
			form.lyrTabs().tabOPDNote().setcustomControlReviewedOPVisible(false);
			form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().setVisible(false);

			if (voOutpatientNotesOutcome.getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getReviewingHCPIsNotNull() && voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getReviewingDateTimeIsNotNull())
			{
				AuthoringInformationVo voReview = new AuthoringInformationVo();
				voReview.setAuthoringDateTime(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getReviewingDateTime());
				voReview.setAuthoringHcp(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getReviewingHCP());
				form.lyrTabs().tabOPDNote().customControlReviewedOP().setValue(voReview);

				form.lyrTabs().tabOPDNote().chkForReviewOP().setVisible(false);
				form.lyrTabs().tabOPDNote().cmbDisciplineOP().setVisible(false);
				form.lyrTabs().tabOPDNote().lblDisciplineOP().setVisible(false);
				form.lyrTabs().tabOPDNote().setcustomControlReviewedOPVisible(true);
				form.lyrTabs().tabOPDNote().customControlReviewedOP().setLabels(AuthoringLabelType.REVIEWING);
				form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().setVisible(true);
				form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().setValue(true);
			}
		}

		form.lyrTabs().tabOPDNote().cmbFollowUp().setValue(voOutpatientNotesOutcome.getOutcome());
		form.lyrTabs().tabOPDNote().cmbReview().setValue(voOutpatientNotesOutcome.getReviewinUnits());
		form.lyrTabs().tabOPDNote().intReview().setValue(voOutpatientNotesOutcome.getReviewIn());
	}

	private void fillOPStatusCombo(ClinicalNotesVo clinicalNote)
	{
		if (clinicalNote != null && clinicalNote.getCurrentStatusIsNotNull())
		{
			if (correctModeOP(clinicalNote.getCurrentStatus())) // In Correct
			// mode, HCP ok
			// and either
			// Active or
			// Correct
			{
				form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setText("Correct");

				fillOPStatusCorrect();
			}
			else if (clinicalNote.getCurrentStatus().getStatusIsNotNull() // Requires
					// Validation
					&& clinicalNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
			{
				if (domain.getHcpLiteUser() != null)
					form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setText("Validate");
				fillOPStatusValidation();
			}
			else if (clinicalNote.getCurrentStatus().getStatusIsNotNull() // Draft,
					// HCP
					// OK
					&& clinicalNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT) && domain.getHcpLiteUser() != null && testOpDiscipline())
			// domain.getHcpLiteUser().equals(form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue().getAuthoringHcp()))
			{
				fillOPStatusNew();
			}
			else if (clinicalNote.getCurrentStatus().getStatusIsNotNull() // Draft,
					// HCP
					// not
					// OK
					&& clinicalNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT) && domain.getHcpLiteUser() == null)
			{
				fillOPStatusPreValidation();
			}
		}
	}
	
	private void updateOPNotingButtonsStatus()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			if (form.getLocalContext().getCurrentOPNoteIsNotNull())
			{
				form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(true);
				form.lyrTabs().tabOPDNote().btnNewOPClinicalNote().setVisible(false);
			}
			else
			{
				form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(false);
				form.lyrTabs().tabOPDNote().btnNewOPClinicalNote().setVisible(true);
			}
		}

		// If its a transcribed record, a non-HCP user and has been moved on in
		// status make the screen R/O fo the logged in use.
		if (form.getLocalContext().getCurrentOPNoteIsNotNull() && form.getLocalContext().getCurrentOPNote().getClinicalNote().getClinicalNote().getIsTranscribedIsNotNull() && form.getLocalContext().getCurrentOPNote().getClinicalNote().getClinicalNote().getIsTranscribed().booleanValue() && domain.getHcpLiteUser() == null)
		{
			if (form.getLocalContext().getCurrentOPNote().getClinicalNote().getClinicalNote().getCurrentStatusIsNotNull() && !form.getLocalContext().getCurrentOPNote().getClinicalNote().getClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT) && !form.getLocalContext().getCurrentOPNote().getClinicalNote().getClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
			{
				form.lyrTabs().tabOPDNote().btnUpdateOPNotes().setVisible(false);
				form.lyrTabs().tabOPDNote().btnNewOPClinicalNote().setVisible(false);
			}
		}
	}

	private void checkReturnToForm()
	{
		// If we have been away form this form and are back....check to see if
		// there is anything to diaplay
		if (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull() && !returnContextType())
		{
			if (form.getGlobalContext().Clinical.getReturnToFormCDIDescriptionIsNotNull())
			{
				if (engine.getPreviousNonDialogFormName() != null)
				{
					StringBuffer sb = new StringBuffer();
					if (((engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.DiagnosisComplications) || (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientProblems)) || (form.getGlobalContext().Clinical.getDialogFormNameIsNotNull() && (form.getGlobalContext().Clinical.getDialogFormName().equals(form.getForms().Clinical.DiagnosisComplications_Dialog) || form.getGlobalContext().Clinical.getDialogFormName().equals(form.getForms().Clinical.PatientProblems_Dialog))))))
					{
						if (form.lyrTabs().tabOPDNote().richTextObjective().getValue() != null)
							sb.append(form.lyrTabs().tabOPDNote().richTextObjective().getValue());
						sb.append("<br>");
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDITitle());
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDIDescription());
						form.lyrTabs().tabOPDNote().richTextObjective().setValue(sb.toString());
					}

					if (((engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.Procedures)) || (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.MedicationOnAdmission))) || ((form.getGlobalContext().Clinical.getDialogFormName().equals(form.getForms().Clinical.Procedures_Dialog)) || (form.getGlobalContext().Clinical.getDialogFormName().equals(form.getForms().Clinical.MedicationMultipleDoses_Dialog))))
					{
						if (form.lyrTabs().tabOPDNote().richTextPlan().getValue() != null)
							sb.append(form.lyrTabs().tabOPDNote().richTextPlan().getValue());
						sb.append("<br>");
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDITitle());
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDIDescription());
						form.lyrTabs().tabOPDNote().richTextPlan().setValue(sb.toString());
					}
				}
			}
			if (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() && form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT))
				form.setMode(FormMode.EDIT);

			form.getGlobalContext().Clinical.setReturnToFormCDIDescription(null);
			form.getGlobalContext().Clinical.setReturnToFormMode(null);
			form.getGlobalContext().Clinical.setReturnToFormName(null);
			form.getGlobalContext().Clinical.setReturnToFormCDISubjectiveProblem(null);
		}
		else if (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull() && returnContextType())
		{
			if (form.getGlobalContext().Clinical.getReturnToFormCDIDescriptionIsNotNull())
			{
				if (engine.getPreviousNonDialogFormName() != null)
				{
					StringBuffer sb = new StringBuffer();

					// Return from Dialog
					if (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.DiagnosisComplications) || (form.getGlobalContext().Clinical.getDialogFormNameIsNotNull() && form.getGlobalContext().Clinical.getDialogFormName().equals(form.getForms().Clinical.DiagnosisComplications_Dialog)))
					{
						if (form.lyrTabs().tabClinicalNotes().txtAnalysis().getValue() != null)
							sb.append(form.lyrTabs().tabClinicalNotes().txtAnalysis().getValue());
						sb.append("\n");
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDITitle());
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDIDescription());
						form.lyrTabs().tabClinicalNotes().txtAnalysis().setValue(sb.toString());
					}

					if ((engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientProblems) || (form.getGlobalContext().Clinical.getDialogFormNameIsNotNull() && form.getGlobalContext().Clinical.getDialogFormName().equals(form.getForms().Clinical.PatientProblems_Dialog))) && (form.getGlobalContext().Clinical.getReturnToFormCDISubjectiveProblemIsNotNull()) && (form.getGlobalContext().Clinical.getReturnToFormCDISubjectiveProblem().booleanValue()))

					{
						if (form.lyrTabs().tabClinicalNotes().txtSubjective().getValue() != null)
							sb.append(form.lyrTabs().tabClinicalNotes().txtSubjective().getValue());
						sb.append("\n");
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDITitle());
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDIDescription());
						form.lyrTabs().tabClinicalNotes().txtSubjective().setValue(sb.toString());
					}

					if ((engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientProblems) || (form.getGlobalContext().Clinical.getDialogFormNameIsNotNull() && form.getGlobalContext().Clinical.getDialogFormName().equals(form.getForms().Clinical.PatientProblems_Dialog))) && (form.getGlobalContext().Clinical.getReturnToFormCDISubjectiveProblemIsNotNull()) && (!form.getGlobalContext().Clinical.getReturnToFormCDISubjectiveProblem().booleanValue()))
					{
						if (form.lyrTabs().tabClinicalNotes().txtObjective().getValue() != null)
							sb.append(form.lyrTabs().tabClinicalNotes().txtObjective().getValue());
						sb.append("\n");
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDITitle());
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDIDescription());
						form.lyrTabs().tabClinicalNotes().txtObjective().setValue(sb.toString());
					}

					if (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.Procedures) || (form.getGlobalContext().Clinical.getDialogFormNameIsNotNull() && form.getGlobalContext().Clinical.getDialogFormName().equals(form.getForms().Clinical.Procedures_Dialog)))
					{
						if (form.lyrTabs().tabClinicalNotes().txtPlan().getValue() != null)
							sb.append(form.lyrTabs().tabClinicalNotes().txtPlan().getValue());
						sb.append("\n");
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDITitle());
						sb.append(form.getGlobalContext().Clinical.getReturnToFormCDIDescription());
						form.lyrTabs().tabClinicalNotes().txtPlan().setValue(sb.toString());
					}
				}
			}
			if (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() && form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.EDIT))
				form.setMode(FormMode.EDIT);

			form.getGlobalContext().Clinical.setReturnToFormCDIDescription(null);
			form.getGlobalContext().Clinical.setReturnToFormCDITitle(null);
			form.getGlobalContext().Clinical.setReturnToFormMode(null);
			form.getGlobalContext().Clinical.setReturnToFormName(null);
			form.getGlobalContext().Clinical.setReturnToFormCDISubjectiveProblem(null);
		}
	}
	
	protected void onBtnUpdateOPNotesClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);

		showHideCustomComponent(form.lyrTabs().tabOPDNote().customControlOPAuthoring(), Boolean.FALSE, false);

		setRichBoxControls(true);
		form.lyrTabs().tabOPDNote().cmbFollowUp().setEnabled(true);
		updateOPNotingButtonsStatus();

		form.lyrTabs().tabAssessment().setHeaderEnabled(false);
		form.lyrTabs().tabClinicalNotes().setHeaderEnabled(false);
		form.lyrTabs().tabOPDNote().setHeaderEnabled(true);
		form.lyrTabs().tabDetails().setHeaderEnabled(false);
		form.lyrTabs().tabDrawing().setHeaderEnabled(false);
		//---------------------------------
		form.lyrTabs().tabOPDNote().customControlOPAuthoring().setEnabledAuthoringHCP(true);
		form.lyrTabs().tabOPDNote().customControlOPAuthoring().setEnabledDateTime(true);
		form.lyrTabs().tabOPDNote().customControlOPAuthoring().setIsRequiredPropertyToControls(true);
		//-----------------------------------
		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.UPDATE);
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() && validationOPMode(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus()))
		{
			form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.VALIDATE);
		}
	}

	protected void onBtnNewOPClinicalNoteClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		setRichBoxControls(true);
		form.lyrTabs().tabOPDNote().cmbFollowUp().setEnabled(true);
		AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
		voAuthoring.setAuthoringDateTime(new DateTime());
		voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		form.lyrTabs().tabOPDNote().customControlOPAuthoring().setValue(voAuthoring);

		AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
		voAuthoringInformation.setAuthoringDateTime(new DateTime());
		if (domain.getHcpUser() != null)
		{
			HcpLiteVo authoringHcp = (HcpLiteVo) domain.getHcpLiteUser();
			if (authoringHcp != null)
				voAuthoringInformation.setAuthoringHcp(authoringHcp);
			form.lyrTabs().tabOPDNote().customControlOPAuthoring().setValue(voAuthoringInformation);

			showHideOPTranscribedControls(false);

			fillOPStatusNew();
		}
		// No a HCP
		else
		{
			if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().getResponsibleHCPIsNotNull())
				voAuthoringInformation.setAuthoringHcp((HcpLiteVo) form.getGlobalContext().Core.getCurrentCareContext().getResponsibleHCP()); //WDEV-19027
			form.lyrTabs().tabOPDNote().customControlOPAuthoring().setValue(voAuthoringInformation);
			showHideOPTranscribedControls(true);
			form.lyrTabs().tabOPDNote().dtimTransDTOP().setValue(new DateTime());

			if (domain.getMosUser() != null)
			{
				form.lyrTabs().tabOPDNote().qmbTransByOP().newRow(domain.getMosUser().toString(), domain.getMosUser().toString());
				form.lyrTabs().tabOPDNote().qmbTransByOP().setValue(domain.getMosUser().toString());
			}

			fillOPStatusPreValidation();
		}

		updateOPNotingButtonsStatus();

		form.lyrTabs().tabAssessment().setHeaderEnabled(false);
		form.lyrTabs().tabClinicalNotes().setHeaderEnabled(false);
		form.lyrTabs().tabOPDNote().setHeaderEnabled(true);
		form.lyrTabs().tabDetails().setHeaderEnabled(false);
		form.lyrTabs().tabDrawing().setHeaderEnabled(false);
	}

	private void fillOPStatusPreValidation()
	{
		form.lyrTabs().tabOPDNote().cmbStatusOP().clear();
		form.lyrTabs().tabOPDNote().cmbStatusOP().newRow(ClinicalNotesStatus.PREVALIDATION, ClinicalNotesStatus.PREVALIDATION.getText());
		form.lyrTabs().tabOPDNote().cmbStatusOP().newRow(ClinicalNotesStatus.DRAFT, ClinicalNotesStatus.DRAFT.getText());
	}

	private void fillOPStatusNew()
	{
		form.lyrTabs().tabOPDNote().cmbStatusOP().clear();
		form.lyrTabs().tabOPDNote().cmbStatusOP().newRow(ClinicalNotesStatus.ACTIVE, ClinicalNotesStatus.ACTIVE.getText());
		form.lyrTabs().tabOPDNote().cmbStatusOP().newRow(ClinicalNotesStatus.DRAFT, ClinicalNotesStatus.DRAFT.getText());
	}

	private void fillOPStatusCorrect()
	{
		form.lyrTabs().tabOPDNote().cmbStatusOP().clear();
		form.lyrTabs().tabOPDNote().cmbStatusOP().newRow(ClinicalNotesStatus.ACTIVE, ClinicalNotesStatus.ACTIVE.getText());
		form.lyrTabs().tabOPDNote().cmbStatusOP().newRow(ClinicalNotesStatus.CORRECTED, ClinicalNotesStatus.CORRECTED.getText());
	}

	private void fillOPStatusValidation()
	{
		form.lyrTabs().tabOPDNote().cmbStatusOP().clear();
		form.lyrTabs().tabOPDNote().cmbStatusOP().newRow(ClinicalNotesStatus.PREVALIDATION, ClinicalNotesStatus.PREVALIDATION.getText());
		form.lyrTabs().tabOPDNote().cmbStatusOP().newRow(ClinicalNotesStatus.ACTIVE, ClinicalNotesStatus.ACTIVE.getText());
	}

	protected void onBtnSaveOPNotesClick() throws PresentationLogicException
	{
		if (saveOPNotes())
		{
			openOPClinicalNotes();
			enableAllTabs();

			if (isDialog())
			{
				onBtnCancelOPNotesClick();
				onBtnOPCloseClick();
			}
		}
	}

	private boolean saveOPNotes() throws FormOpenException
	{
		OutpatientNotesOutcomeVo voOutpatientNotesOutcome = form.getLocalContext().getCurrentOPNote();

		if (voOutpatientNotesOutcome == null)
			voOutpatientNotesOutcome = new OutpatientNotesOutcomeVo();

		if (populateDataFromScreen(voOutpatientNotesOutcome) == false)
			return false;

		if ((voOutpatientNotesOutcome.getCareContext() == null) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()))
			voOutpatientNotesOutcome.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		boolean clinicalContacttobeSaved = false;
		if (voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getID_ClinicalNotes() == null)
			clinicalContacttobeSaved = true;

		String[] uiErrors = getUiErrors();
		String[] errors = voOutpatientNotesOutcome.validate(uiErrors);
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			voOutpatientNotesOutcome = domain.saveOutpatientNotesOutcomePerCareContext(voOutpatientNotesOutcome); //WDEV-19027
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			onFormOpen();
			return false;
		}

		if (voOutpatientNotesOutcome == null)
			throw new FormOpenException("There is a clinical note of a different type already recorded on the system for this clincal contact");

		/*  WDEV-19027
		if (clinicalContacttobeSaved)
			saveClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		*/

		if (voOutpatientNotesOutcome.getClinicalNote().getClinicalNoteIsNotNull())
			form.getGlobalContext().Clinical.setCurrentClinicalNote(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote());

		return true;
	}

	private boolean populateDataFromScreen(OutpatientNotesOutcomeVo voOutpatientNotesOutcome) //WDEV-19027
	{
		//WDEV-16961 
		if (form.lyrTabs().tabOPDNote().customControlOPAuthoring().getErrors() != null) 
		{
			engine.showMessage(form.lyrTabs().tabOPDNote().customControlOPAuthoring().getErrors()); 
			return false;
		}

		if (form.lyrTabs().tabOPDNote().cmbStatusOP().getValue() == null)
		{
			engine.showMessage("Status is a mandatory field!");
			return false;
		}

		if (voOutpatientNotesOutcome.getClinicalNote() == null)
			voOutpatientNotesOutcome.setClinicalNote(new SoapNoteVo());

		if (voOutpatientNotesOutcome.getClinicalNote().getClinicalNote() == null)
			voOutpatientNotesOutcome.getClinicalNote().setClinicalNote(new ClinicalNotesVo());

		voOutpatientNotesOutcome.getClinicalNote().setAuthoringInformation(form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue());

		if ((voOutpatientNotesOutcome.getClinicalNote().getCareContext() == null) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()))
			voOutpatientNotesOutcome.getClinicalNote().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		voOutpatientNotesOutcome.setInstructionNextClinic(form.lyrTabs().tabOPDNote().richTextInstructions().getValue() != null ? form.lyrTabs().tabOPDNote().richTextInstructions().getValue() : "");
		voOutpatientNotesOutcome.getClinicalNote().setObjectiveNote(form.lyrTabs().tabOPDNote().richTextObjective().getValue() != null ? form.lyrTabs().tabOPDNote().richTextObjective().getValue() : "");
		voOutpatientNotesOutcome.getClinicalNote().setPlanNote(form.lyrTabs().tabOPDNote().richTextPlan().getValue() != null ? form.lyrTabs().tabOPDNote().richTextPlan().getValue() : "");

		voOutpatientNotesOutcome.setOutcome(form.lyrTabs().tabOPDNote().cmbFollowUp().getValue());
		voOutpatientNotesOutcome.setReviewinUnits(form.lyrTabs().tabOPDNote().cmbReview().getValue());
		voOutpatientNotesOutcome.setReviewIn(form.lyrTabs().tabOPDNote().intReview().getValue());

		if ((voOutpatientNotesOutcome.getCareContext() == null) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()))
			voOutpatientNotesOutcome.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		if ((voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCareContext() == null) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()))
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setAuthoringInfo(form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue());

		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setIsDerivedNote(Boolean.TRUE);

		if (!voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getIsTranscribedIsNotNull())
		{
			if (domain.getHcpUser() == null)
				voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setIsTranscribed(new Boolean(true));
			else
				voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setIsTranscribed(new Boolean(false));
		}

		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setSourceOfNote(SourceOfNote.CLINICALNOTEDRAWINGOP);

		if (!voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getNoteTypeIsNotNull())
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setNoteType(ClinicalNoteType.CLINICALNOTE);

		if (!voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getDisciplineIsNotNull())
		{
			if (form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue() != null && form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue().getAuthoringHcpIsNotNull() && form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue().getAuthoringHcp().getHcpTypeIsNotNull())
			{
				HcpDisType hcpType = form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue().getAuthoringHcp().getHcpType();
				voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setDiscipline(hcpType);
			}
		}

		// Save old Status to check for active
		ClinicalNoteStatusVo voPreviousStat = voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getCurrentStatus();

		ClinicalNoteStatusVo voStat = new ClinicalNoteStatusVo();
		voStat.setStatus(form.lyrTabs().tabOPDNote().cmbStatusOP().getValue());
		voStat.setDateTime(new DateTime());
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo) domain.getMosUser();
		voStat.setMOS(mos != null ? mos : null);

		if (voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getRecordingUser() == null)
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setRecordingUser(mos);
		if (voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getRecordingDateTime() == null)
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setRecordingDateTime(new DateTime());

		StringBuffer sb = new StringBuffer();
		sb.append("<b>Objective Note</b><br>");
		sb.append(form.lyrTabs().tabOPDNote().richTextObjective().getValue());
		sb.append("<br><br><b>Plan Note</b><br>");
		sb.append(form.lyrTabs().tabOPDNote().richTextPlan().getValue());

		boolean isReviewed = false;

		if (form.getGlobalContext().Core.getClinicalNotingModeIsNotNull())
			isReviewed = form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.REVIEW);

		if (correctModeOP(voPreviousStat) && !isReviewed && !voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getClinicalNote().equals(sb.toString())) // In
		// Correct
		// mode
		{
			voStat.setClinicalNote(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getClinicalNote());
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setStatusHistory(addStatusToCollection(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getStatusHistory(), voStat));
			voStat.setStatus(ClinicalNotesStatus.CORRECTED);
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setIsCorrected(new Boolean(true));
		}

		if (form.getGlobalContext().Core.getClinicalNotingModeIsNotNull() && form.getGlobalContext().Core.getClinicalNotingMode().equals(ClinicalNotingMode.VALIDATE))
		{
			voStat.setClinicalNote(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().getClinicalNote());
			voStat.setStatus(ClinicalNotesStatus.ACTIVE);
		}

		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setCurrentStatus(voStat);

		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setClinicalNote(sb.toString());

		voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setForReview(new Boolean(form.lyrTabs().tabOPDNote().chkForReviewOP().getValue()));
		if (form.lyrTabs().tabOPDNote().chkForReviewOP().getValue())
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setForReviewDiscipline(form.lyrTabs().tabOPDNote().cmbDisciplineOP().getValue());
		else
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setForReviewDiscipline(null);

		if (form.lyrTabs().tabOPDNote().iscustomControlReviewedOPVisible())
		{
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setReviewingDateTime(form.lyrTabs().tabOPDNote().customControlReviewedOP().getValue() != null && form.lyrTabs().tabOPDNote().customControlReviewedOP().getValue().getAuthoringDateTimeIsNotNull() ? form.lyrTabs().tabOPDNote().customControlReviewedOP().getValue().getAuthoringDateTime() : null);
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setReviewingHCP(form.lyrTabs().tabOPDNote().customControlReviewedOP().getValue() != null && form.lyrTabs().tabOPDNote().customControlReviewedOP().getValue().getAuthoringHcpIsNotNull() ? form.lyrTabs().tabOPDNote().customControlReviewedOP().getValue().getAuthoringHcp() : null);
		}

		return true;
	}

	private boolean correctModeOP(ClinicalNoteStatusVo voPreviousStat)
	{
		if (voPreviousStat != null && voPreviousStat.getStatusIsNotNull() && (voPreviousStat.getStatus().equals(ClinicalNotesStatus.ACTIVE) || voPreviousStat.getStatus().equals(ClinicalNotesStatus.CORRECTED)) && domain.getHcpLiteUser() != null && testOpDiscipline())
			// domain.getHcpLiteUser().equals(form.lyrTabs().tabOPDNote().customControlOPAuthoring().getValue().getAuthoringHcp()))
			return true;
		else
			return false;
	}

	protected void onCmbGraphicAdnotationImageValueChanged() throws PresentationLogicException  //WDEV-19027
	{ 
		
		GraphicAssessmentVo graphicAssessment = domain.getActiveGraphicAssessment(UserDefinedAssessmentType.MEDICALNOTING);

		if (graphicAssessment == null)
		{
			engine.showMessage("There is no active Assessment configured !");
			return;
		}

		PatientAssessmentVo patientAssessment = new PatientAssessmentVo();

		//WDEV-11721
		patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		//WDEV-11526
		patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		patientAssessment.setStatus(PatientAssessmentStatusReason.INPROGRESS);
		
		patientAssessment.setIsCurrentForType(Boolean.TRUE);
		patientAssessment.setAssessmentData(new PatientAssessmentDataVo());

		patientAssessment.getAssessmentData().setGraphic(graphicAssessment);
		patientAssessment.getAssessmentData().setGraphicFindings(new PatientGraphicAssessmentVoCollection());

		if (graphicAssessment.getImagesIsNotNull())
		{
			PatientGraphicAssessmentVo patientGraphicAssessmentVo = new PatientGraphicAssessmentVo();
			patientGraphicAssessmentVo.setGraphicImage(form.lyrTabs().tabDrawing().cmbGraphicAdnotationImage().getValue());
			patientAssessment.getAssessmentData().getGraphicFindings().add(patientGraphicAssessmentVo);
		}

		form.lyrTabs().tabDrawing().customGraphic().clearScreen();

		form.lyrTabs().tabDrawing().customGraphic().setEnabled(Boolean.TRUE);
		form.lyrTabs().tabDrawing().customGraphic().setReadOnly(Boolean.FALSE);
		form.lyrTabs().tabDrawing().customGraphic().setPatientAssessment(patientAssessment);

		form.getLocalContext().setPatientAssessment(patientAssessment);
	}

	protected void onDtimTransByIPValueChanged() throws PresentationLogicException
	{

	}

	protected void onLnkOPDiagnosisClick() throws PresentationLogicException
	{
		openDialog(OP_DIAGNOSIS);
	}

	protected void onLnkOPManagementMedicationClick() throws PresentationLogicException
	{
		openDialog(OP_MEDICATION);
	}

	protected void onLnkOPProblemClick() throws PresentationLogicException
	{
		openDialog(OP_PROBLEMS);
	}

	protected void onLnkOPSurgeryClick() throws PresentationLogicException
	{
		openDialog(OP_SURGERY);
	}

	private void isBtnCNCloseVisible(boolean value)
	{
		form.lyrTabs().tabClinicalNotes().btnCNClose().setEnabled(value);
		form.lyrTabs().tabClinicalNotes().btnCNClose().setVisible(value);
	}

	private void isBtnOPCloseVisible(boolean value)
	{
		form.lyrTabs().tabOPDNote().btnOPClose().setEnabled(value);
		form.lyrTabs().tabOPDNote().btnOPClose().setVisible(value);
	}

	private boolean isDialog()
	{
		return engine.isDialog();
	}

	protected void onBtnCNCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	protected void onBtnOPCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	protected void onChkMarkAsReviewedValueChanged() throws PresentationLogicException
	{
		if (form.lyrTabs().tabClinicalNotes().chkMarkAsReviewed().getValue() == true)
		{
			setCustomReviewed(Boolean.TRUE);
			form.lyrTabs().tabClinicalNotes().customControlReviewed().initializeComponent();
		}
		else
		{
			setCustomReviewed(Boolean.FALSE);
			form.lyrTabs().tabClinicalNotes().customControlReviewed().setValue(null);
		}
	}

	private void setCustomReviewed(Boolean isEnabled)
	{
		form.lyrTabs().tabClinicalNotes().customControlReviewed().setEnabledAuthoringHCP(isEnabled);
		form.lyrTabs().tabClinicalNotes().customControlReviewed().setEnabledDateTime(isEnabled);
	}

	protected void onChkForReviewValueChanged() throws PresentationLogicException
	{
		if (form.lyrTabs().tabClinicalNotes().chkForReview().getValue() == true)
		{
			form.lyrTabs().tabClinicalNotes().cmbDiscipline().setEnabled(true);
		}
		else
		{
			form.lyrTabs().tabClinicalNotes().cmbDiscipline().setEnabled(false);
			form.lyrTabs().tabClinicalNotes().cmbDiscipline().setValue(null);
		}
	}

	protected void onChkForReviewOPValueChanged() throws PresentationLogicException
	{
		if (form.lyrTabs().tabOPDNote().chkForReviewOP().getValue() == true)
		{
			form.lyrTabs().tabOPDNote().cmbDisciplineOP().setEnabled(true);
		}
		else
		{
			form.lyrTabs().tabOPDNote().cmbDisciplineOP().setEnabled(false);
			form.lyrTabs().tabOPDNote().cmbDisciplineOP().setValue(null);
		}
	}

	protected void onChkMarkAsReviewedOPValueChanged() throws PresentationLogicException
	{
		if (form.lyrTabs().tabOPDNote().chkMarkAsReviewedOP().getValue() == true)
		{
			setCustomReviewedOP(Boolean.TRUE);
			form.lyrTabs().tabOPDNote().customControlReviewedOP().initializeComponent();
		}
		else
		{
			setCustomReviewedOP(Boolean.FALSE);
			form.lyrTabs().tabOPDNote().customControlReviewedOP().setValue(null);
		}
	}

	private void setCustomReviewedOP(Boolean isEnabled)
	{
		form.lyrTabs().tabOPDNote().customControlReviewedOP().setEnabledAuthoringHCP(isEnabled);
		form.lyrTabs().tabOPDNote().customControlReviewedOP().setEnabledDateTime(isEnabled);
	}

	protected void onImbURLClick() throws PresentationLogicException
	{
		String tooltip = form.lyrTabs().tabDrawing().imbURL().getTooltip();

		if (tooltip != null && tooltip.length() > 0)
		{
			engine.openUrl(tooltip);
		}
		else
		{
			engine.showMessage("No help was associated with this assessment");
		}
	}

	private void enableHelpUrlImage(String url)
	{
		/*
		 * PatientAssessmentVo assessment =
		 * form.getLocalContext().getPatientAssessment(); boolean
		 * enableHelpUrlButton = assessment != null &&
		 * assessment.getAssessmentDataIsNotNull() &&
		 * assessment.getAssessmentData().getGraphicIsNotNull() &&
		 * assessment.getAssessmentData().getGraphic().getHelpUrlIsNotNull() &&
		 * assessment.getAssessmentData().getGraphic().getHelpUrl().trim().length() >
		 * 0;
		 */
		boolean enable = url != null && url.length() > 0;

		form.lyrTabs().tabDrawing().imbURL().setEnabled(enable);
		if (enable)
			form.lyrTabs().tabDrawing().imbURL().setTooltip(url);
	}

	protected void onDyngrdAssessmentsCellButtonClicked(DynamicGridCell cell)
	{
		if (cell != null)
		{
			if (cell.getColumn() != null && cell.getColumn().equals(getDynGridColumn(HELP_URL_COLUMN)))
			{
				if (cell.getIdentifier() != null)
				{
					Object identifier = cell.getIdentifier();
					if (identifier instanceof String)
					{
						engine.openUrl((String) identifier);
					}
				}
			}
		}
	}

	@Override
	protected void onRIEDialogClosed(DialogResult result) throws PresentationLogicException  //WDEV-19027
	{
		if(DialogResult.OK.equals(result) || DialogResult.YES.equals(result))
		{
			ClinicalNotesVo clinicalNotes = form.getGlobalContext().Clinical.getCurrentClinicalNote();
			clinicalNotes.setIsRIE(true);
			
			clinicalNotes.validate();
			
			Integer patientId=null, contactId=null, careContextId=null;
			
			if (form.getGlobalContext().Core.getPatientShortIsNotNull())
				patientId = form.getGlobalContext().Core.getPatientShort().getID_Patient();
			
			if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
				careContextId = form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext();
			
			try 
			{
				domain.markAsRie(clinicalNotes, engine.getFormName(), patientId, contactId, careContextId, "");
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				onFormOpen();
				return;
			}
		}
	}
}
