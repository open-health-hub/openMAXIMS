//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.clinicalnotedrawing;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTabsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSummaryRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSummaryRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setSummaryDetailReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isSummaryDetailReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showSummaryDetailOpened()
				{
					super.row.showOpened(0);
				}
				public String getSummaryDetail()
				{
					return (String)super.row.get(0);
				}
				public void setSummaryDetail(String value)
				{
					super.row.set(0, value);
				}
				public void setCellSummaryDetailTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSummaryRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSummaryRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSummaryRow get(int index)
				{
					return new grdSummaryRow(super.collection.get(index));
				}
				public grdSummaryRow newRow()
				{
					return new grdSummaryRow(super.collection.newRow());
				}
				public grdSummaryRow newRow(boolean autoSelect)
				{
					return new grdSummaryRow(super.collection.newRow(autoSelect));
				}
				public grdSummaryRow newRowAt(int index)
				{
					return new grdSummaryRow(super.collection.newRowAt(index));
				}
				public grdSummaryRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSummaryRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSummaryGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdSummaryRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSummaryRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSummaryRowCollection getRows()
				{
					return new grdSummaryRowCollection(super.grid.getRows());
				}
				public grdSummaryRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSummaryRow(row);
				}
				public void setSummaryDetailHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getSummaryDetailHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public static class grdNotingDetailsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdNotingDetailsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolClinicalNoteReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolClinicalNoteReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolClinicalNoteOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolClinicalNote()
				{
					return (String)super.row.get(0);
				}
				public void setcolClinicalNote(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolClinicalNoteTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getcolSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdNotingDetailsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdNotingDetailsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdNotingDetailsRow get(int index)
				{
					return new grdNotingDetailsRow(super.collection.get(index));
				}
				public grdNotingDetailsRow newRow()
				{
					return new grdNotingDetailsRow(super.collection.newRow());
				}
				public grdNotingDetailsRow newRow(boolean autoSelect)
				{
					return new grdNotingDetailsRow(super.collection.newRow(autoSelect));
				}
				public grdNotingDetailsRow newRowAt(int index)
				{
					return new grdNotingDetailsRow(super.collection.newRowAt(index));
				}
				public grdNotingDetailsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdNotingDetailsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdNotingDetailsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdNotingDetailsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdNotingDetailsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdNotingDetailsRowCollection getRows()
				{
					return new grdNotingDetailsRowCollection(super.grid.getRows());
				}
				public grdNotingDetailsRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdNotingDetailsRow(row);
				}
				public void setcolClinicalNoteHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolClinicalNoteHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 88, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 656, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 744, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 400, 32, 400, 456, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				Grid m_grdSummaryTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSummaryTemp);
				grdSummaryGrid grdSummary = (grdSummaryGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSummaryGrid.class, m_grdSummaryTemp);
				grdSummary.addStringColumn("Summary", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSummary);
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 368, 456, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdNotingDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdNotingDetailsTemp);
				grdNotingDetailsGrid grdNotingDetails = (grdNotingDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdNotingDetailsGrid.class, m_grdNotingDetailsTemp);
				grdNotingDetails.addStringColumn("Clinical Note", 0, 0, 280, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdNotingDetails.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdNotingDetails);
			}

			public Button btnNewNoting()
			{
				return (Button)super.getControl(0);
			}
			public Button btnUpdateNoting()
			{
				return (Button)super.getControl(1);
			}
			public Button btnSaveNoting()
			{
				return (Button)super.getControl(2);
			}
			public Button btnCancelNoting()
			{
				return (Button)super.getControl(3);
			}
			public grdSummaryGrid grdSummary()
			{
				return (grdSummaryGrid)super.getGrid(0);
			}
			public grdNotingDetailsGrid grdNotingDetails()
			{
				return (grdNotingDetailsGrid)super.getGrid(1);
			}
		}
		public static class tabClinicalNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDisciplineComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.HcpDisType getValue()
				{
					return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.HcpDisType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbStatusIPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ClinicalNotesStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ClinicalNotesStatus getValue()
				{
					return (ims.core.vo.lookups.ClinicalNotesStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ClinicalNotesStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbTransIPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 392, 24, 368, 56, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ims.framework.FormUiLogic m_customControlReviewedForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper7.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_customControlReviewedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(392), new Integer(24), new Integer(368), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(-1), m_customControlReviewedForm, instance1 } );
				ims.framework.Control m_customControlReviewedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(-1), m_customControlReviewedForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlReviewedControl);
				Menu[] menus1 = m_customControlReviewedForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 368, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customControlClinicalNotesAuthoiringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper8.getSize(), instance2, startTabIndex.intValue() + 12, skipContextValidation);
				//ims.framework.Control m_customControlClinicalNotesAuthoiringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(8), new Integer(8), new Integer(368), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 12), m_customControlClinicalNotesAuthoiringForm, instance2 } );
				ims.framework.Control m_customControlClinicalNotesAuthoiringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 12), m_customControlClinicalNotesAuthoiringForm, instance2, Boolean.FALSE } );
				super.addControl(m_customControlClinicalNotesAuthoiringControl);
				Menu[] menus2 = m_customControlClinicalNotesAuthoiringForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 408, 512, 59, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Discipline :", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 400, 40, 161, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transcribed Date and Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 400, 16, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transcribed by:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 512, 45, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 400, 312, 33, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Plan:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 400, 80, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Analysis:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 80, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Subjective:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 312, 62, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Objective:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 352, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2030), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 734, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1024), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 653, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 400, 104, 408, 200, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, new Integer(4000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 400, 328, 408, 176, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, new Integer(4000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 328, 360, 176, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(4000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 104, 360, 200, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, new Integer(4000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 568, 40, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 472, 512, 136, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbDisciplineTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDisciplineTemp);
				cmbDisciplineComboBox cmbDiscipline = (cmbDisciplineComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDisciplineComboBox.class, m_cmbDisciplineTemp);
				super.addComboBox(cmbDiscipline);
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 72, 512, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbStatusIPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbStatusIPTemp);
				cmbStatusIPComboBox cmbStatusIP = (cmbStatusIPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusIPComboBox.class, m_cmbStatusIPTemp);
				super.addComboBox(cmbStatusIP);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 568, 16, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_qmbTransIPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbTransIPTemp);
				qmbTransIPComboBox qmbTransIP = (qmbTransIPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbTransIPComboBox.class, m_qmbTransIPTemp);
				super.addComboBox(qmbTransIP);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 400, 8, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Mark As Reviewed", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 288, 512, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"For Review", Boolean.TRUE, null}));
		
				// Link Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 88, 312, 56, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,"Problems", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 96, 80, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Problems", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 464, 80, 136, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Diagnosis / Complications", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 448, 312, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,"Procedures", Boolean.FALSE, null}));
			}

			public ims.core.forms.authoringinfo.IComponent customControlReviewed()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlReviewedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlReviewedVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlReviewedVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlReviewedEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlReviewedEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent customControlClinicalNotesAuthoiring()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlClinicalNotesAuthoiringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlClinicalNotesAuthoiringVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlClinicalNotesAuthoiringVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlClinicalNotesAuthoiringEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlClinicalNotesAuthoiringEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblDiscipline()
			{
				return (Label)super.getControl(2);
			}
			public Label lblTransDTIP()
			{
				return (Label)super.getControl(3);
			}
			public Label lblTransByIP()
			{
				return (Label)super.getControl(4);
			}
			public Button btnCNClose()
			{
				return (Button)super.getControl(10);
			}
			public Button btnUpdateSOAP()
			{
				return (Button)super.getControl(11);
			}
			public Button btnNewSOAP()
			{
				return (Button)super.getControl(12);
			}
			public Button btnCancelSOAP()
			{
				return (Button)super.getControl(13);
			}
			public Button btnSaveSOAP()
			{
				return (Button)super.getControl(14);
			}
			public TextBox txtAnalysis()
			{
				return (TextBox)super.getControl(15);
			}
			public TextBox txtPlan()
			{
				return (TextBox)super.getControl(16);
			}
			public TextBox txtObjective()
			{
				return (TextBox)super.getControl(17);
			}
			public TextBox txtSubjective()
			{
				return (TextBox)super.getControl(18);
			}
			public DateTimeControl dtimTransByIP()
			{
				return (DateTimeControl)super.getControl(19);
			}
			public cmbDisciplineComboBox cmbDiscipline()
			{
				return (cmbDisciplineComboBox)super.getComboBox(0);
			}
			public cmbStatusIPComboBox cmbStatusIP()
			{
				return (cmbStatusIPComboBox)super.getComboBox(1);
			}
			public qmbTransIPComboBox qmbTransIP()
			{
				return (qmbTransIPComboBox)super.getComboBox(2);
			}
			public CheckBox chkMarkAsReviewed()
			{
				return (CheckBox)super.getControl(23);
			}
			public CheckBox chkForReview()
			{
				return (CheckBox)super.getControl(24);
			}
			public Link lnkObjectiveProblem()
			{
				return (Link)super.getControl(25);
			}
			public Link lnkSubjectiveProblem()
			{
				return (Link)super.getControl(26);
			}
			public Link lnkAnalysisDiagnosis()
			{
				return (Link)super.getControl(27);
			}
			public Link lnkSurgery()
			{
				return (Link)super.getControl(28);
			}
		}
		public static class tabOPDNoteContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDisciplineOPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.HcpDisType getValue()
				{
					return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.HcpDisType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbStatusOPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ClinicalNotesStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ClinicalNotesStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ClinicalNotesStatus getValue()
				{
					return (ims.core.vo.lookups.ClinicalNotesStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ClinicalNotesStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbFollowUpComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.OpdFollowUp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.OpdFollowUp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.OpdFollowUp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.OpdFollowUp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.OpdFollowUp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.OpdFollowUp getValue()
				{
					return (ims.clinical.vo.lookups.OpdFollowUp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.OpdFollowUp value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbReviewComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.ReviewInDuration value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.ReviewInDuration getValue()
				{
					return (ims.clinical.vo.lookups.ReviewInDuration)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.ReviewInDuration value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbTransByOPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 440, 24, 368, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customControlReviewedOPForm = loader.loadComponent(102228, appForm, startControlID * 10 + 3000, anchoringHelper36.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_customControlReviewedOPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(440), new Integer(24), new Integer(368), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_customControlReviewedOPForm, instance1 } );
				ims.framework.Control m_customControlReviewedOPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1038),  new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_customControlReviewedOPForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlReviewedOPControl);
				Menu[] menus1 = m_customControlReviewedOPForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 424, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customControlOPAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 4000, anchoringHelper37.getSize(), instance2, startTabIndex.intValue() + 1028, skipContextValidation);
				//ims.framework.Control m_customControlOPAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(0), new Integer(8), new Integer(424), new Integer(56), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1028), m_customControlOPAuthoringForm, instance2 } );
				ims.framework.Control m_customControlOPAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1040),  new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1028), m_customControlOPAuthoringForm, instance2, Boolean.FALSE } );
				super.addControl(m_customControlOPAuthoringControl);
				Menu[] menus2 = m_customControlOPAuthoringForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 384, 512, 59, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Discipline :", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 424, 40, 161, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transcribed Date and Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 424, 16, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transcribed by:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 512, 45, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 192, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 316, 320, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Review in:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 320, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Follow Up Details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 344, 164, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Instructions For Next Clinic:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 8, 72, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assessment:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 352, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 4057), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 652, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 2051), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 736, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 2050), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 8, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 8, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 592, 40, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 2032), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 448, 512, 136, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbDisciplineOPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDisciplineOPTemp);
				cmbDisciplineOPComboBox cmbDisciplineOP = (cmbDisciplineOPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDisciplineOPComboBox.class, m_cmbDisciplineOPTemp);
				super.addComboBox(cmbDisciplineOP);
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 64, 512, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbStatusOPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 2049), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbStatusOPTemp);
				cmbStatusOPComboBox cmbStatusOP = (cmbStatusOPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusOPComboBox.class, m_cmbStatusOPTemp);
				super.addComboBox(cmbStatusOP);
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 116, 320, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbFollowUpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 2045), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbFollowUpTemp);
				cmbFollowUpComboBox cmbFollowUp = (cmbFollowUpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFollowUpComboBox.class, m_cmbFollowUpTemp);
				super.addComboBox(cmbFollowUp);
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 436, 320, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbReviewTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 2047), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReviewTemp);
				cmbReviewComboBox cmbReview = (cmbReviewComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReviewComboBox.class, m_cmbReviewTemp);
				super.addComboBox(cmbReview);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 592, 16, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_qmbTransByOPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 2029), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbTransByOPTemp);
				qmbTransByOPComboBox qmbTransByOP = (qmbTransByOPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbTransByOPComboBox.class, m_qmbTransByOPTemp);
				super.addComboBox(qmbTransByOP);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 288, 512, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"For Review", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 448, 8, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Mark As Reviewed", Boolean.TRUE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 388, 320, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 2046), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// Link Controls
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 184, 192, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 2042), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Medication", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 96, 72, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 2034), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Problems", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 184, 72, 160, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 2036), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Diagnosis / Complications", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 96, 192, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 2040), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Procedures", Boolean.FALSE, null}));
		
				// Rich Text Controls
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 8, 368, 810, 136, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 2048), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.FALSE, new Integer(4000)} ));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 8, 216, 810, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 2044), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, new Integer(4000)} ));
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 810, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 2038), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, new Integer(4000)} ));
			}

			public ims.core.forms.authoringinfo.IComponent customControlReviewedOP()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlReviewedOPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlReviewedOPVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlReviewedOPVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlReviewedOPEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlReviewedOPEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent customControlOPAuthoring()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlOPAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlOPAuthoringVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlOPAuthoringVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlOPAuthoringEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlOPAuthoringEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblDisciplineOP()
			{
				return (Label)super.getControl(2);
			}
			public Label lblTransDTOP()
			{
				return (Label)super.getControl(3);
			}
			public Label lblTransByOP()
			{
				return (Label)super.getControl(4);
			}
			public Button btnOPClose()
			{
				return (Button)super.getControl(11);
			}
			public Button btnSaveOPNotes()
			{
				return (Button)super.getControl(12);
			}
			public Button btnCancelOPNotes()
			{
				return (Button)super.getControl(13);
			}
			public Button btnUpdateOPNotes()
			{
				return (Button)super.getControl(14);
			}
			public Button btnNewOPClinicalNote()
			{
				return (Button)super.getControl(15);
			}
			public DateTimeControl dtimTransDTOP()
			{
				return (DateTimeControl)super.getControl(16);
			}
			public cmbDisciplineOPComboBox cmbDisciplineOP()
			{
				return (cmbDisciplineOPComboBox)super.getComboBox(0);
			}
			public cmbStatusOPComboBox cmbStatusOP()
			{
				return (cmbStatusOPComboBox)super.getComboBox(1);
			}
			public cmbFollowUpComboBox cmbFollowUp()
			{
				return (cmbFollowUpComboBox)super.getComboBox(2);
			}
			public cmbReviewComboBox cmbReview()
			{
				return (cmbReviewComboBox)super.getComboBox(3);
			}
			public qmbTransByOPComboBox qmbTransByOP()
			{
				return (qmbTransByOPComboBox)super.getComboBox(4);
			}
			public CheckBox chkForReviewOP()
			{
				return (CheckBox)super.getControl(22);
			}
			public CheckBox chkMarkAsReviewedOP()
			{
				return (CheckBox)super.getControl(23);
			}
			public IntBox intReview()
			{
				return (IntBox)super.getControl(24);
			}
			public Link lnkOPManagementMedication()
			{
				return (Link)super.getControl(25);
			}
			public Link lnkOPProblem()
			{
				return (Link)super.getControl(26);
			}
			public Link lnkOPDiagnosis()
			{
				return (Link)super.getControl(27);
			}
			public Link lnkOPSurgery()
			{
				return (Link)super.getControl(28);
			}
			public RichTextControl richTextInstructions()
			{
				return (RichTextControl)super.getControl(29);
			}
			public RichTextControl richTextPlan()
			{
				return (RichTextControl)super.getControl(30);
			}
			public RichTextControl richTextObjective()
			{
				return (RichTextControl)super.getControl(31);
			}
		}
		public static class tabDrawingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbGraphicAdnotationImageComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.DrawingGraphicImageVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.DrawingGraphicImageVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.DrawingGraphicImageVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.DrawingGraphicImageVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.DrawingGraphicImageVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.DrawingGraphicImageVo getValue()
				{
					return (ims.core.vo.DrawingGraphicImageVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.DrawingGraphicImageVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 344, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 5000, anchoringHelper68.getSize(), instance1, startTabIndex.intValue() + 2054, skipContextValidation);
				//ims.framework.Control m_customAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(8), new Integer(8), new Integer(344), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2054), m_customAuthoringInfoForm, instance1 } );
				ims.framework.Control m_customAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1072),  new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2054), m_customAuthoringInfoForm, instance1, Boolean.FALSE } );
				super.addControl(m_customAuthoringInfoControl);
				Menu[] menus1 = m_customAuthoringInfoForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 808, 464, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customGraphicForm = loader.loadComponent(127104, appForm, startControlID * 10 + 6000, anchoringHelper69.getSize(), instance2, startTabIndex.intValue() + 3056, skipContextValidation);
				//ims.framework.Control m_customGraphicControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(8), new Integer(80), new Integer(808), new Integer(464), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3056), m_customGraphicForm, instance2 } );
				ims.framework.Control m_customGraphicControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1074),  new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3056), m_customGraphicForm, instance2, Boolean.FALSE } );
				super.addControl(m_customGraphicControl);
				Menu[] menus2 = m_customGraphicForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 368, 51, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Help URL: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 368, 16, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Image:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 8, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 2053), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 8, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 2052), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 744, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 4059), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 664, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 4061), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 432, 16, 384, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbGraphicAdnotationImageTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 3055), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbGraphicAdnotationImageTemp);
				cmbGraphicAdnotationImageComboBox cmbGraphicAdnotationImage = (cmbGraphicAdnotationImageComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGraphicAdnotationImageComboBox.class, m_cmbGraphicAdnotationImageTemp);
				super.addComboBox(cmbGraphicAdnotationImage);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 432, 46, 26, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.InfoEnabled24, form_images_local.Core.InfoDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.core.forms.authoringinfo.IComponent customAuthoringInfo()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomAuthoringInfoVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomAuthoringInfoVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomAuthoringInfoEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomAuthoringInfoEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.assessment.forms.graphicassessmentcomponent.IComponent customGraphic()
			{
				return (ims.assessment.forms.graphicassessmentcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomGraphicValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomGraphicVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomGraphicVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomGraphicEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomGraphicEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblURL()
			{
				return (Label)super.getControl(2);
			}
			public Button btnUpdateGraphic()
			{
				return (Button)super.getControl(4);
			}
			public Button btnNewGraphic()
			{
				return (Button)super.getControl(5);
			}
			public Button btnCancelGraphic()
			{
				return (Button)super.getControl(6);
			}
			public Button btnSaveGraphic()
			{
				return (Button)super.getControl(7);
			}
			public cmbGraphicAdnotationImageComboBox cmbGraphicAdnotationImage()
			{
				return (cmbGraphicAdnotationImageComboBox)super.getComboBox(0);
			}
			public ImageButton imbURL()
			{
				return (ImageButton)super.getControl(9);
			}
		}
		public static class tabAssessmentContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 568, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 4063), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuPatientAssessment, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdAssessments()
			{
				return (DynamicGrid)super.getControl(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Noting Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
			super.addContainer(m_tabDetails, m_tabDetailsContainer);
			ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper79.getWidth(), anchoringHelper79.getHeight());
			m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, form_images_local, contextMenus, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClinicalNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinical Notes", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabClinicalNotesContainer m_tabClinicalNotesContainer = (tabClinicalNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClinicalNotesContainer.class, m_tabClinicalNotes, factory);
			super.addContainer(m_tabClinicalNotes, m_tabClinicalNotesContainer);
			ims.framework.utils.SizeInfo m_tabClinicalNotesDesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tabClinicalNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper80.getWidth(), anchoringHelper80.getHeight());
			m_tabClinicalNotesContainer.setContext(form, appForm, m_tabClinicalNotes, loader, form_images_local, contextMenus, startControlID, m_tabClinicalNotesDesignSize, m_tabClinicalNotesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOPDNote = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"OP Clinical Notes", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOPDNoteContainer m_tabOPDNoteContainer = (tabOPDNoteContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOPDNoteContainer.class, m_tabOPDNote, factory);
			super.addContainer(m_tabOPDNote, m_tabOPDNoteContainer);
			ims.framework.utils.SizeInfo m_tabOPDNoteDesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tabOPDNoteRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper81.getWidth(), anchoringHelper81.getHeight());
			m_tabOPDNoteContainer.setContext(form, appForm, m_tabOPDNote, loader, form_images_local, contextMenus, startControlID, m_tabOPDNoteDesignSize, m_tabOPDNoteRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDrawing = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Graphic Annotation", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDrawingContainer m_tabDrawingContainer = (tabDrawingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDrawingContainer.class, m_tabDrawing, factory);
			super.addContainer(m_tabDrawing, m_tabDrawingContainer);
			ims.framework.utils.SizeInfo m_tabDrawingDesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tabDrawingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper82.getWidth(), anchoringHelper82.getHeight());
			m_tabDrawingContainer.setContext(form, appForm, m_tabDrawing, loader, form_images_local, contextMenus, startControlID, m_tabDrawingDesignSize, m_tabDrawingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAssessment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Assessments", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAssessmentContainer m_tabAssessmentContainer = (tabAssessmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAssessmentContainer.class, m_tabAssessment, factory);
			super.addContainer(m_tabAssessment, m_tabAssessmentContainer);
			ims.framework.utils.SizeInfo m_tabAssessmentDesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tabAssessmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper83.getWidth(), anchoringHelper83.getHeight());
			m_tabAssessmentContainer.setContext(form, appForm, m_tabAssessment, loader, form_images_local, contextMenus, startControlID, m_tabAssessmentDesignSize, m_tabAssessmentRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabDetails().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabOPDNote().setVisible(false);
			tabDrawing().setVisible(false);
			tabAssessment().setVisible(false);
		}
		public void settabDetailsEnabled(boolean value)
		{
			tabDetails().setEnabled(value);
		}
		public void settabClinicalNotesEnabled(boolean value)
		{
			tabClinicalNotes().setEnabled(value);
		}
		public void settabOPDNoteEnabled(boolean value)
		{
			tabOPDNote().setEnabled(value);
		}
		public void settabDrawingEnabled(boolean value)
		{
			tabDrawing().setEnabled(value);
		}
		public void settabAssessmentEnabled(boolean value)
		{
			tabAssessment().setEnabled(value);
		}
		public void showtabDetails()
		{
			tabClinicalNotes().setVisible(false);
			tabOPDNote().setVisible(false);
			tabDrawing().setVisible(false);
			tabAssessment().setVisible(false);
			tabDetails().setVisible(true);
		}
		public void showtabClinicalNotes()
		{
			tabDetails().setVisible(false);
			tabOPDNote().setVisible(false);
			tabDrawing().setVisible(false);
			tabAssessment().setVisible(false);
			tabClinicalNotes().setVisible(true);
		}
		public void showtabOPDNote()
		{
			tabDetails().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabDrawing().setVisible(false);
			tabAssessment().setVisible(false);
			tabOPDNote().setVisible(true);
		}
		public void showtabDrawing()
		{
			tabDetails().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabOPDNote().setVisible(false);
			tabAssessment().setVisible(false);
			tabDrawing().setVisible(true);
		}
		public void showtabAssessment()
		{
			tabDetails().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabOPDNote().setVisible(false);
			tabDrawing().setVisible(false);
			tabAssessment().setVisible(true);
		}

		public tabDetailsContainer tabDetails()
		{
			return (tabDetailsContainer)super.layers.get(0);
		}
		public tabClinicalNotesContainer tabClinicalNotes()
		{
			return (tabClinicalNotesContainer)super.layers.get(1);
		}
		public tabOPDNoteContainer tabOPDNote()
		{
			return (tabOPDNoteContainer)super.layers.get(2);
		}
		public tabDrawingContainer tabDrawing()
		{
			return (tabDrawingContainer)super.layers.get(3);
		}
		public tabAssessmentContainer tabAssessment()
		{
			return (tabAssessmentContainer)super.layers.get(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.HcpLiteVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.HcpLiteVo' of the global context variable 'Core.RecordingHCP' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalNotesVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalNotesVo' of the global context variable 'Clinical.CurrentClinicalNote' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSOAPVo();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuPatientAssessment = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuPatientAssessmentAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Search/Select Assessment from Favourites", true, false, new Integer(102164), true, false);
		contextMenus.contextMenuPatientAssessment.add(contextMenus.contextMenuPatientAssessmentAddItem);
		contextMenus.contextMenuPatientAssessmentUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Patient Assessment", true, false, new Integer(102150), true, true);
		contextMenus.contextMenuPatientAssessment.add(contextMenus.contextMenuPatientAssessmentUpdateItem);
		contextMenus.contextMenuPatientAssessmentAddGraphicAssessmentItem = factory.createMenuItem(startControlID.intValue() + 3, "New Graphical Assessment", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuPatientAssessment.add(contextMenus.contextMenuPatientAssessmentAddGraphicAssessmentItem);
		contextMenus.contextMenuPatientAssessmentUpdateGraphicAssessmentItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit Graphical Assessment", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuPatientAssessment.add(contextMenus.contextMenuPatientAssessmentUpdateGraphicAssessmentItem);
		contextMenus.contextMenuPatientAssessmentViewGraphicAssessmentItem = factory.createMenuItem(startControlID.intValue() + 5, "View Graphical Assessment", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuPatientAssessment.add(contextMenus.contextMenuPatientAssessmentViewGraphicAssessmentItem);
		contextMenus.contextMenuPatientAssessmentAddUserAssessmentItem = factory.createMenuItem(startControlID.intValue() + 6, "New Structured Assessment", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuPatientAssessment.add(contextMenus.contextMenuPatientAssessmentAddUserAssessmentItem);
		contextMenus.contextMenuPatientAssessmentUpdateUserAssessmentItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit Structured Assessment", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuPatientAssessment.add(contextMenus.contextMenuPatientAssessmentUpdateUserAssessmentItem);
		contextMenus.contextMenuPatientAssessmentViewUserAssessmentItem = factory.createMenuItem(startControlID.intValue() + 8, "View Structured Assessment", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuPatientAssessment.add(contextMenus.contextMenuPatientAssessmentViewUserAssessmentItem);
		form.registerMenu(contextMenus.contextMenuPatientAssessment);


		// Layer Clasess
		lyrTabsLayer m_lyrTabsLayer = (lyrTabsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTabsLayer.class, this, factory);
		super.addLayer(m_lyrTabsLayer);
		m_lyrTabsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrTabsLayer lyrTabs()
	{
		return (lyrTabsLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Nursing = new NursingForms();
			COE = new COEForms();
			SpinalInjuries = new SpinalInjuriesForms();
			ProtoTemp = new ProtoTempForms();
			Clinical = new ClinicalForms();
			Assessment = new AssessmentForms();
			OCRR = new OCRRForms();
		}
		public final class NursingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingForms()
			{
				SkinReviewDialog = new LocalFormName(101143);
				SkinReview = new LocalFormName(101142);
			}
			public final FormName SkinReviewDialog;
			public final FormName SkinReview;
		}
		public final class COEForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEForms()
			{
				AssessSkin = new LocalFormName(101112);
			}
			public final FormName AssessSkin;
		}
		public final class SpinalInjuriesForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SpinalInjuriesForms()
			{
				NurAssessmentSkin = new LocalFormName(105114);
			}
			public final FormName NurAssessmentSkin;
		}
		public final class ProtoTempForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ProtoTempForms()
			{
				Diagnosis = new LocalFormName(122100);
				ProblemList = new LocalFormName(122105);
				Procedure = new LocalFormName(122101);
				ReferralServices = new LocalFormName(122110);
			}
			public final FormName Diagnosis;
			public final FormName ProblemList;
			public final FormName Procedure;
			public final FormName ReferralServices;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ClinicalNoteDrawing = new LocalFormName(102177);
				DiagnosisComplications = new LocalFormName(123117);
				PatientProblems = new LocalFormName(123120);
				Procedures = new LocalFormName(123119);
				MedicationOnAdmission = new LocalFormName(122126);
				OutPatientsTreatmentPlan = new LocalFormName(122120);
				DiagnosisComplications_Dialog = new LocalFormName(123130);
				Procedures_Dialog = new LocalFormName(123134);
				PatientProblems_Dialog = new LocalFormName(123129);
				MedicationOnAdmission_Dialog = new LocalFormName(122178);
				MedicationMultipleDoses_Dialog = new LocalFormName(122179);
			}
			public final FormName ClinicalNoteDrawing;
			public final FormName DiagnosisComplications;
			public final FormName PatientProblems;
			public final FormName Procedures;
			public final FormName MedicationOnAdmission;
			public final FormName OutPatientsTreatmentPlan;
			public final FormName DiagnosisComplications_Dialog;
			public final FormName Procedures_Dialog;
			public final FormName PatientProblems_Dialog;
			public final FormName MedicationOnAdmission_Dialog;
			public final FormName MedicationMultipleDoses_Dialog;
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				UserAssessmentInstantiationWithComponent = new LocalFormName(127108);
				UserDefinedFormSelect = new LocalFormName(102208);
				GraphicAssessmentInstantiation = new LocalFormName(102211);
			}
			public final FormName UserAssessmentInstantiationWithComponent;
			public final FormName UserDefinedFormSelect;
			public final FormName GraphicAssessmentInstantiation;
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				MyOrder = new LocalFormName(116111);
			}
			public final FormName MyOrder;
		}

		public NursingForms Nursing;
		public COEForms COE;
		public SpinalInjuriesForms SpinalInjuries;
		public ProtoTempForms ProtoTemp;
		public ClinicalForms Clinical;
		public AssessmentForms Assessment;
		public OCRRForms OCRR;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			COE = new COEImages();
			GeneralMedical = new GeneralMedicalImages();
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class COEImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEImages()
			{
				Blue = new ImageHelper(101100, "Images/COE/blue12x12.gif", new Integer(12), new Integer(12));
				BlueViolet = new ImageHelper(101101, "Images/COE/violet12x12.gif", new Integer(12), new Integer(12));
				BodyChart = new ImageHelper(101110, "Images/COE/Body_new_colour.gif", new Integer(325), new Integer(325));
				DarkCyan = new ImageHelper(101102, "Images/COE/darkcyan12x12.gif", new Integer(12), new Integer(12));
				Hotpink = new ImageHelper(101103, "Images/COE/Hotpink.gif", new Integer(12), new Integer(12));
				LightSeaGreen = new ImageHelper(101104, "Images/COE/LightSeaGreen.gif", new Integer(12), new Integer(12));
				LightSkyBlue = new ImageHelper(101105, "Images/COE/lightblue12x12.gif", new Integer(12), new Integer(12));
				Orange = new ImageHelper(101106, "Images/COE/orange12x12.gif", new Integer(12), new Integer(12));
				Red = new ImageHelper(101107, "Images/COE/Red.gif", new Integer(12), new Integer(12));
				Turquoise = new ImageHelper(101108, "Images/COE/Turquoise.gif", new Integer(12), new Integer(12));
				Yellow = new ImageHelper(101109, "Images/COE/Yellow.gif", new Integer(12), new Integer(12));
			}
			public final ims.framework.utils.Image Blue;
			public final ims.framework.utils.Image BlueViolet;
			public final ims.framework.utils.Image BodyChart;
			public final ims.framework.utils.Image DarkCyan;
			public final ims.framework.utils.Image Hotpink;
			public final ims.framework.utils.Image LightSeaGreen;
			public final ims.framework.utils.Image LightSkyBlue;
			public final ims.framework.utils.Image Orange;
			public final ims.framework.utils.Image Red;
			public final ims.framework.utils.Image Turquoise;
			public final ims.framework.utils.Image Yellow;
		}
		public final class GeneralMedicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private GeneralMedicalImages()
			{
				Blank = new ImageHelper(109101, "Images/GeneralMedical/Blank.gif", new Integer(336), new Integer(336));
				Lungs = new ImageHelper(109102, "Images/GeneralMedical/Lung.gif", new Integer(224), new Integer(224));
				Crepe = new ImageHelper(109104, "Images/GeneralMedical/crepes.jpg", new Integer(16), new Integer(16));
				Wheeze = new ImageHelper(109103, "Images/GeneralMedical/wheeze2.jpg", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Blank;
			public final ims.framework.utils.Image Lungs;
			public final ims.framework.utils.Image Crepe;
			public final ims.framework.utils.Image Wheeze;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Color = new ImageHelper(103120, "Images/Admin/Color.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Color;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				TextBox = new ImageHelper(102240, "Images/Core/Textbox.gif", new Integer(16), new Integer(16));
				Information = new ImageHelper(102217, "Images/Core/Information.gif", new Integer(16), new Integer(16));
				InformationDisabled = new ImageHelper(102297, "Images/Core/Information_disabled.gif", new Integer(16), new Integer(16));
				InfoDisabled24 = new ImageHelper(102512, "Images/Core/info_disabled_24.png", new Integer(24), new Integer(24));
				InfoEnabled24 = new ImageHelper(102511, "Images/Core/info_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image TextBox;
			public final ims.framework.utils.Image Information;
			public final ims.framework.utils.Image InformationDisabled;
			public final ims.framework.utils.Image InfoDisabled24;
			public final ims.framework.utils.Image InfoEnabled24;
		}
		public final COEImages COE;
		public final GeneralMedicalImages GeneralMedical;
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ClinicalNotes = new ims.framework.ContextVariable("ClinicalNotes", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier + "");
			cxl_SkinAssCollection = new ims.framework.ContextVariable("SkinAssCollection", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SkinAssCollection_" + componentIdentifier + "");
			cxl_PreviousSkinAssessment = new ims.framework.ContextVariable("PreviousSkinAssessment", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PreviousSkinAssessment_" + componentIdentifier + "");
			cxl_ImageLoaded = new ims.framework.ContextVariable("ImageLoaded", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ImageLoaded_" + componentIdentifier + "");
			cxl_CurrentVersionNo = new ims.framework.ContextVariable("CurrentVersionNo", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentVersionNo_" + componentIdentifier + "");
			cxl_SOAPVo = new ims.framework.ContextVariable("SOAPVo", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SOAPVo_" + componentIdentifier + "");
			cxl_SelectedNotingDetailsVo = new ims.framework.ContextVariable("SelectedNotingDetailsVo", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SelectedNotingDetailsVo_" + componentIdentifier + "");
			cxl_PatientAssessment = new ims.framework.ContextVariable("PatientAssessment", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier + "");
			cxl_CurrentAssessment = new ims.framework.ContextVariable("CurrentAssessment", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier + "");
			cxl_VoPatientAssessment = new ims.framework.ContextVariable("VoPatientAssessment", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier + "");
			cxl_CurrentOPNote = new ims.framework.ContextVariable("CurrentOPNote", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentOPNote_" + componentIdentifier + "");
			cxl_RIE = new ims.framework.ContextVariable("RIE", prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__RIE_" + componentIdentifier + "");
		}
		
		public boolean getClinicalNotesIsNotNull()
		{
			return !cxl_ClinicalNotes.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalNotesVo getClinicalNotes()
		{
			return (ims.core.vo.ClinicalNotesVo)cxl_ClinicalNotes.getValue(context);
		}
		public void setClinicalNotes(ims.core.vo.ClinicalNotesVo value)
		{
			cxl_ClinicalNotes.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClinicalNotes = null;
		public boolean getSkinAssCollectionIsNotNull()
		{
			return !cxl_SkinAssCollection.getValueIsNull(context);
		}
		public ims.nursing.vo.SkinAssessmentCollection getSkinAssCollection()
		{
			return (ims.nursing.vo.SkinAssessmentCollection)cxl_SkinAssCollection.getValue(context);
		}
		public void setSkinAssCollection(ims.nursing.vo.SkinAssessmentCollection value)
		{
			cxl_SkinAssCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SkinAssCollection = null;
		public boolean getPreviousSkinAssessmentIsNotNull()
		{
			return !cxl_PreviousSkinAssessment.getValueIsNull(context);
		}
		public ims.nursing.vo.SkinAssessment getPreviousSkinAssessment()
		{
			return (ims.nursing.vo.SkinAssessment)cxl_PreviousSkinAssessment.getValue(context);
		}
		public void setPreviousSkinAssessment(ims.nursing.vo.SkinAssessment value)
		{
			cxl_PreviousSkinAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousSkinAssessment = null;
		public boolean getImageLoadedIsNotNull()
		{
			return !cxl_ImageLoaded.getValueIsNull(context);
		}
		public Boolean getImageLoaded()
		{
			return (Boolean)cxl_ImageLoaded.getValue(context);
		}
		public void setImageLoaded(Boolean value)
		{
			cxl_ImageLoaded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ImageLoaded = null;
		public boolean getCurrentVersionNoIsNotNull()
		{
			return !cxl_CurrentVersionNo.getValueIsNull(context);
		}
		public Integer getCurrentVersionNo()
		{
			return (Integer)cxl_CurrentVersionNo.getValue(context);
		}
		public void setCurrentVersionNo(Integer value)
		{
			cxl_CurrentVersionNo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentVersionNo = null;
		public boolean getSOAPVoIsNotNull()
		{
			return !cxl_SOAPVo.getValueIsNull(context);
		}
		public ims.core.vo.SOAPVo getSOAPVo()
		{
			return (ims.core.vo.SOAPVo)cxl_SOAPVo.getValue(context);
		}
		public void setSOAPVo(ims.core.vo.SOAPVo value)
		{
			cxl_SOAPVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SOAPVo = null;
		public boolean getSelectedNotingDetailsVoIsNotNull()
		{
			return !cxl_SelectedNotingDetailsVo.getValueIsNull(context);
		}
		public ims.clinical.vo.NotingDetailsVo getSelectedNotingDetailsVo()
		{
			return (ims.clinical.vo.NotingDetailsVo)cxl_SelectedNotingDetailsVo.getValue(context);
		}
		public void setSelectedNotingDetailsVo(ims.clinical.vo.NotingDetailsVo value)
		{
			cxl_SelectedNotingDetailsVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedNotingDetailsVo = null;
		public boolean getPatientAssessmentIsNotNull()
		{
			return !cxl_PatientAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getPatientAssessment()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_PatientAssessment.getValue(context);
		}
		public void setPatientAssessment(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_PatientAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientAssessment = null;
		public boolean getCurrentAssessmentIsNotNull()
		{
			return !cxl_CurrentAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getCurrentAssessment()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_CurrentAssessment.getValue(context);
		}
		public void setCurrentAssessment(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_CurrentAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentAssessment = null;
		public boolean getVoPatientAssessmentIsNotNull()
		{
			return !cxl_VoPatientAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentListVo getVoPatientAssessment()
		{
			return (ims.assessment.vo.PatientAssessmentListVo)cxl_VoPatientAssessment.getValue(context);
		}
		public void setVoPatientAssessment(ims.assessment.vo.PatientAssessmentListVo value)
		{
			cxl_VoPatientAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VoPatientAssessment = null;
		public boolean getCurrentOPNoteIsNotNull()
		{
			return !cxl_CurrentOPNote.getValueIsNull(context);
		}
		public ims.clinical.vo.OutpatientNotesOutcomeVo getCurrentOPNote()
		{
			return (ims.clinical.vo.OutpatientNotesOutcomeVo)cxl_CurrentOPNote.getValue(context);
		}
		public void setCurrentOPNote(ims.clinical.vo.OutpatientNotesOutcomeVo value)
		{
			cxl_CurrentOPNote.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentOPNote = null;
		public boolean getRIEIsNotNull()
		{
			return !cxl_RIE.getValueIsNull(context);
		}
		public ims.vo.ValueObject getRIE()
		{
			return (ims.vo.ValueObject)cxl_RIE.getValue(context);
		}
		public void setRIE(ims.vo.ValueObject value)
		{
			cxl_RIE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RIE = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class PatientAssessment implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int AddGraphicAssessment = 3;
			public static final int UpdateGraphicAssessment = 4;
			public static final int ViewGraphicAssessment = 5;
			public static final int AddUserAssessment = 6;
			public static final int UpdateUserAssessment = 7;
			public static final int ViewUserAssessment = 8;
		}
		public void disableAllPatientAssessmentMenuItems()
		{
			this.contextMenuPatientAssessmentAddItem.setEnabled(false);
			this.contextMenuPatientAssessmentUpdateItem.setEnabled(false);
			this.contextMenuPatientAssessmentAddGraphicAssessmentItem.setEnabled(false);
			this.contextMenuPatientAssessmentUpdateGraphicAssessmentItem.setEnabled(false);
			this.contextMenuPatientAssessmentViewGraphicAssessmentItem.setEnabled(false);
			this.contextMenuPatientAssessmentAddUserAssessmentItem.setEnabled(false);
			this.contextMenuPatientAssessmentUpdateUserAssessmentItem.setEnabled(false);
			this.contextMenuPatientAssessmentViewUserAssessmentItem.setEnabled(false);
		}
		public void hideAllPatientAssessmentMenuItems()
		{
			this.contextMenuPatientAssessmentAddItem.setVisible(false);
			this.contextMenuPatientAssessmentUpdateItem.setVisible(false);
			this.contextMenuPatientAssessmentAddGraphicAssessmentItem.setVisible(false);
			this.contextMenuPatientAssessmentUpdateGraphicAssessmentItem.setVisible(false);
			this.contextMenuPatientAssessmentViewGraphicAssessmentItem.setVisible(false);
			this.contextMenuPatientAssessmentAddUserAssessmentItem.setVisible(false);
			this.contextMenuPatientAssessmentUpdateUserAssessmentItem.setVisible(false);
			this.contextMenuPatientAssessmentViewUserAssessmentItem.setVisible(false);
		}
		private Menu contextMenuPatientAssessment;
		public MenuItem getPatientAssessmentAddItem()
		{
			return this.contextMenuPatientAssessmentAddItem;
		}
		private MenuItem contextMenuPatientAssessmentAddItem;
		public MenuItem getPatientAssessmentUpdateItem()
		{
			return this.contextMenuPatientAssessmentUpdateItem;
		}
		private MenuItem contextMenuPatientAssessmentUpdateItem;
		public MenuItem getPatientAssessmentAddGraphicAssessmentItem()
		{
			return this.contextMenuPatientAssessmentAddGraphicAssessmentItem;
		}
		private MenuItem contextMenuPatientAssessmentAddGraphicAssessmentItem;
		public MenuItem getPatientAssessmentUpdateGraphicAssessmentItem()
		{
			return this.contextMenuPatientAssessmentUpdateGraphicAssessmentItem;
		}
		private MenuItem contextMenuPatientAssessmentUpdateGraphicAssessmentItem;
		public MenuItem getPatientAssessmentViewGraphicAssessmentItem()
		{
			return this.contextMenuPatientAssessmentViewGraphicAssessmentItem;
		}
		private MenuItem contextMenuPatientAssessmentViewGraphicAssessmentItem;
		public MenuItem getPatientAssessmentAddUserAssessmentItem()
		{
			return this.contextMenuPatientAssessmentAddUserAssessmentItem;
		}
		private MenuItem contextMenuPatientAssessmentAddUserAssessmentItem;
		public MenuItem getPatientAssessmentUpdateUserAssessmentItem()
		{
			return this.contextMenuPatientAssessmentUpdateUserAssessmentItem;
		}
		private MenuItem contextMenuPatientAssessmentUpdateUserAssessmentItem;
		public MenuItem getPatientAssessmentViewUserAssessmentItem()
		{
			return this.contextMenuPatientAssessmentViewUserAssessmentItem;
		}
		private MenuItem contextMenuPatientAssessmentViewUserAssessmentItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[231];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.SelectedSkinAssessment", "BO-1003100002-ID", "ID_Assessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.SelectedSkinAssessment", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.SelectedSkinAssessment", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.SelectedSkinAssessment", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.SelectedSkinAssessment", "BO-1016100003-ISSKININTACT", "IsSkinIntact");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.SkinAssessmentVO", "BO-1003100002-ID", "ID_Assessment");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.SkinAssessmentVO", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.SkinAssessmentVO", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.SkinAssessmentVO", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.SkinAssessmentVO", "BO-1016100003-ISSKININTACT", "IsSkinIntact");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-ID", "ID_SkinAssessmentFindings");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-WOUNDTYPE", "WoundType");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-SITEIMAGE", "SiteImage");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-SITENAME", "SiteName");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-SITEDETAILS", "SiteDetails");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-HOWLONGISITPRESENT", "HowLongIsItPresent");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-PRESSURESOREGRADE", "PressureSoreGrade");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-LENGTH", "Length");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-WIDTH", "Width");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-DEPTH", "Depth");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-WOUNDBED", "WoundBed");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-SURROUNDINGSKIN", "SurroundingSkin");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-EXUDATEAMOUNT", "ExudateAmount");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-EXUDATETYPE", "ExudateType");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-ODOUR", "Odour");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-PAIN", "Pain");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-INFECTIONSUSPECTED", "InfectionSuspected");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-SWABTAKEN", "SwabTaken");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-WOUNDTRACED", "WoundTraced");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-CLEANSEDWITH", "CleansedWith");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-PRIMARYDRESSING", "PrimaryDressing");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-SECONDARYDRESSING", "SecondaryDressing");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-FREQUENCYOFCHANGE", "FrequencyOfChange");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-COMMENT", "Comment");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-ISDISCONTINUEDASSESS", "IsDiscontinuedAssess");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.FindingsVO", "BO-1016100005-ISCONTINUEDASSESSMENT", "IsContinuedAssessment");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.ReadOnlyAssessment", "BO-1003100002-ID", "ID_Assessment");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.ReadOnlyAssessment", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.ReadOnlyAssessment", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.ReadOnlyAssessment", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_COE.SkinBodyChart.ReadOnlyAssessment", "BO-1016100003-ISSKININTACT", "IsSkinIntact");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-ID", "ID_AssessmentComponent");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-ISCOMPLETE", "IsComplete");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-COPY", "Copy");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-COMPONENTTYPE", "ComponentType");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-ID", "ID_Assessment");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTTYPE", "AssessmentType");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTSTATUS", "AssessmentStatus");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-DATETIMECOMPLETE", "DateTimeComplete");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-ID", "ID_SoapNote");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-SUBJECTIVENOTE", "SubjectiveNote");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-OBJECTIVENOTE", "ObjectiveNote");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-ANALYSISNOTE", "AnalysisNote");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-PLANNOTE", "PlanNote");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-CLINICALNOTE", "ClinicalNote");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-CARECONTEXT", "CareContext");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTETYPE", "NoteType");
			fields[133] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[134] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[135] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[136] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEW", "ForReview");
			fields[137] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[138] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[139] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[140] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[141] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[142] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[143] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.UserDefinedObjectSelected", "BO-1028100004-ID", "ID_UserDefinedObject");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.UserDefinedObjectSelected", "BO-1028100004-NAME", "Name");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.UserDefinedObjectSelected", "BO-1028100004-OBJECTTYPE", "ObjectType");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Core.UserDefinedObjectSelected", "BO-1028100004-ACTIVESTATUS", "ActiveStatus");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Assessment.PatientUserDefinedObject", "BO-1085100000-ID", "ID_PatientUserDefinedObject");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientAssessment.EditedComponent", "BO-1028100005-ID", "ID_UserDefinedObjectComponent");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientAssessment.SelectedAssessment", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-NOTETYPE", "NoteType");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-DISCIPLINE", "Discipline");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-FORREVIEW", "ForReview");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-CARECONTEXT", "CareContext");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__ClinicalNotes_" + componentIdentifier, "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PreviousSkinAssessment_" + componentIdentifier, "BO-1003100002-ID", "ID_Assessment");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PreviousSkinAssessment_" + componentIdentifier, "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PreviousSkinAssessment_" + componentIdentifier, "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PreviousSkinAssessment_" + componentIdentifier, "BO-1003100002-CARECONTEXT", "CareContext");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PreviousSkinAssessment_" + componentIdentifier, "BO-1016100003-ISSKININTACT", "IsSkinIntact");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SOAPVo_" + componentIdentifier, "BO-1072100036-ID", "ID_SoapNote");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SOAPVo_" + componentIdentifier, "BO-1072100036-SUBJECTIVENOTE", "SubjectiveNote");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SOAPVo_" + componentIdentifier, "BO-1072100036-OBJECTIVENOTE", "ObjectiveNote");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SOAPVo_" + componentIdentifier, "BO-1072100036-ANALYSISNOTE", "AnalysisNote");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SOAPVo_" + componentIdentifier, "BO-1072100036-PLANNOTE", "PlanNote");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SOAPVo_" + componentIdentifier, "BO-1072100036-CLINICALNOTE", "ClinicalNote");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SOAPVo_" + componentIdentifier, "BO-1072100036-CARECONTEXT", "CareContext");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SelectedNotingDetailsVo_" + componentIdentifier, "BO-1072100021-ID", "ID_NotingDetails");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SelectedNotingDetailsVo_" + componentIdentifier, "BO-1072100021-CLINICALCONTACT", "ClinicalContact");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SelectedNotingDetailsVo_" + componentIdentifier, "BO-1072100021-CARECONTEXT", "CareContext");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SelectedNotingDetailsVo_" + componentIdentifier, "BO-1072100021-CLINICALNOTE", "ClinicalNote");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SelectedNotingDetailsVo_" + componentIdentifier, "BO-1072100021-ISWRITTEN", "IsWritten");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SelectedNotingDetailsVo_" + componentIdentifier, "BO-1072100021-ISDICTATED", "IsDictated");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__SelectedNotingDetailsVo_" + componentIdentifier, "BO-1072100021-ISTYPED", "IsTyped");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentAssessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__VoPatientAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1072100046-ID", "ID_OutpatientNotesOutcome");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1072100046-INSTRUCTIONNEXTCLINIC", "InstructionNextClinic");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1072100046-OUTCOME", "Outcome");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1072100046-REVIEWIN", "ReviewIn");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1072100046-REVIEWINUNITS", "ReviewinUnits");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1072100046-CARECONTEXT", "CareContext");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.ClinicalNoteDrawing.__internal_x_context__CurrentOPNote_" + componentIdentifier, "BO-1072100046-CLINICALCONTACT", "ClinicalContact");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
