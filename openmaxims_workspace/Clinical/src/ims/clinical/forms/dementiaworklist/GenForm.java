//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.dementiaworklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.DementiaWorklistStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.DementiaWorklistStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.DementiaWorklistStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.DementiaWorklistStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.DementiaWorklistStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.DementiaWorklistStatus getValue()
		{
			return (ims.core.vo.lookups.DementiaWorklistStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.DementiaWorklistStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbIDTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PatIdType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PatIdType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PatIdType getValue()
		{
			return (ims.core.vo.lookups.PatIdType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PatIdType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocSiteLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocSiteLiteVo getValue()
		{
			return (ims.core.vo.LocSiteLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocSiteLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.clinical.vo.DementiaWorklistSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.clinical.vo.DementiaWorklistSearchCriteriaVo' of the global context variable 'Clinical.DementiaWorklistSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(155);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Timers
		timers = new Timers();
		timers.timerRefresh = factory.createTimer(0, 10, false);
		form.addTimer(timers.timerRefresh);

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuDementiaWorklistMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuVIEWItem = factory.createMenuItem(startControlID.intValue() + 1, "View", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940005)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuVIEWItem);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940010)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuEDITItem);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuSTEP1Item = factory.createMenuItem(startControlID.intValue() + 3, "Record Step 1", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940001)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuSTEP1Item);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuSTEP2Item = factory.createMenuItem(startControlID.intValue() + 4, "Record Step 2", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940002)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuSTEP2Item);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuSTEP3Item = factory.createMenuItem(startControlID.intValue() + 5, "Step 3 / Referral", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940003)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuSTEP3Item);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuRECORD_FOLLOWUP_AMTSItem = factory.createMenuItem(startControlID.intValue() + 6, "Record Follow-up AMTS", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940006)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuRECORD_FOLLOWUP_AMTSItem);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuEXCLUDE_FROM_DEMENTIA_SCREENINGItem = factory.createMenuItem(startControlID.intValue() + 7, "Exclude From Dementia Screening", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940007)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuEXCLUDE_FROM_DEMENTIA_SCREENINGItem);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuCONFIRM_PATIENTItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm patient will be put on Dementia Pathway", true, false, new Integer(102209), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940004)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuCONFIRM_PATIENTItem);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuRIE_REMOVE_FROM_WORKLISTItem = factory.createMenuItem(startControlID.intValue() + 9, "RIE -  Remove from Worklist", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940008)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuRIE_REMOVE_FROM_WORKLISTItem);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP1Item = factory.createMenuItem(startControlID.intValue() + 10, "Correct Completion Date - Step 1", true, false, new Integer(102266), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940011)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP1Item);
		contextMenus.Clinical.contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP2Item = factory.createMenuItem(startControlID.intValue() + 11, "Correct Completion Date - Step 2", true, false, new Integer(102266), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4940012)))
			contextMenus.Clinical.contextMenuDementiaWorklistMenu.add(contextMenus.Clinical.contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP2Item);
		form.registerMenu(contextMenus.Clinical.contextMenuDementiaWorklistMenu);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 104, 83, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_ccConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 5, skipContextValidation);
		//ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(104), new Integer(83), new Integer(296), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 5), m_ccConsultantForm, instance1 } );
		ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 5), m_ccConsultantForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccConsultantControl);
		Menu[] menus1 = m_ccConsultantForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 400, 141, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Only:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 400, 129, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Inpatients", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 738, 141, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Confirmed:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 643, 141, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Confirmed:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 738, 129, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Delirium", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 512, 141, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Entries:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 643, 129, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Dementia", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 512, 129, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Include Excluded", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 52, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission Date", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 133, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Worklist Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 400, 109, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Birth:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 400, 10, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Surname:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 400, 34, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Forename:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 400, 85, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient ID Value:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 400, 60, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient ID Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 109, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 85, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 236, 58, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital :", new Integer(1), null, new Integer(0)}));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 512, 8, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 512, 32, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 512, 83, 185, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 256, 56, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 104, 56, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// PartialDateBox Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 512, 107, 185, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Invalid date entered", Boolean.FALSE, Boolean.FALSE}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 104, 107, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 104, 131, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 512, 58, 185, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbIDTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.FALSE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbIDTypeTemp);
		cmbIDTypeComboBox cmbIDType = (cmbIDTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIDTypeComboBox.class, m_cmbIDTypeTemp);
		super.addComboBox(cmbIDType);
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 104, 8, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 104, 32, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbWardTemp);
		qmbWardComboBox qmbWard = (qmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbWardComboBox.class, m_qmbWardTemp);
		super.addComboBox(qmbWard);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 463, 133, 14, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 801, 133, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 610, 133, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 706, 133, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 168, 832, 456, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Clinical.contextMenuDementiaWorklistMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 810, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.TimerStartEnabled24, this.getImages().Core.TimerStartDisabled24, "Click button to start the automatic refresh", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 777, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 744, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccConsultant()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccConsultantVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccConsultantVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccConsultantEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccConsultantEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Label lbl6()
	{
		return (Label)super.getControl(15);
	}
	public Label lbl8()
	{
		return (Label)super.getControl(16);
	}
	public TextBox txtSurname()
	{
		return (TextBox)super.getControl(22);
	}
	public TextBox txtForename()
	{
		return (TextBox)super.getControl(23);
	}
	public TextBox txtIDValue()
	{
		return (TextBox)super.getControl(24);
	}
	public DateControl dteTo()
	{
		return (DateControl)super.getControl(25);
	}
	public DateControl dteFrom()
	{
		return (DateControl)super.getControl(26);
	}
	public PartialDateBox pdtDOB()
	{
		return (PartialDateBox)super.getControl(27);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(0);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(1);
	}
	public cmbIDTypeComboBox cmbIDType()
	{
		return (cmbIDTypeComboBox)super.getComboBox(2);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(3);
	}
	public qmbWardComboBox qmbWard()
	{
		return (qmbWardComboBox)super.getComboBox(4);
	}
	public CheckBox chkInpatientOnly()
	{
		return (CheckBox)super.getControl(33);
	}
	public CheckBox chkDelirum()
	{
		return (CheckBox)super.getControl(34);
	}
	public CheckBox chkExclude()
	{
		return (CheckBox)super.getControl(35);
	}
	public CheckBox chkDementiaConfirmed()
	{
		return (CheckBox)super.getControl(36);
	}
	public DynamicGrid dyngrdPatients()
	{
		return (DynamicGrid)super.getControl(37);
	}
	public ImageButton imbRefresh()
	{
		return (ImageButton)super.getControl(38);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(39);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(40);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				DementiaAssessmentForm = new LocalFormName(123259);
				DementiaAssessmentFormDialog = new LocalFormName(123264);
				DementiaExcludefromDementiaScreeningDialog = new LocalFormName(123267);
				DementiaCorrectCompletionDateStep2Dialog = new LocalFormName(123266);
				DementiaCorrectCompletionDateStep1Dialog = new LocalFormName(123265);
				DementiaRIEConfirmationDialog = new LocalFormName(123268);
				DementiaWorklist = new LocalFormName(123258);
				DementiaConfirmPatientWillBePutOnDementiaPathwayDialog = new LocalFormName(123269);
			}
			public final FormName DementiaAssessmentForm;
			public final FormName DementiaAssessmentFormDialog;
			public final FormName DementiaExcludefromDementiaScreeningDialog;
			public final FormName DementiaCorrectCompletionDateStep2Dialog;
			public final FormName DementiaCorrectCompletionDateStep1Dialog;
			public final FormName DementiaRIEConfirmationDialog;
			public final FormName DementiaWorklist;
			public final FormName DementiaConfirmPatientWillBePutOnDementiaPathwayDialog;
		}

		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
			Clinical = new ClinicalImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				TimerStartDisabled24 = new ImageHelper(102310, "Images/Core/sinc_disabled_24x24.png", new Integer(24), new Integer(24));
				TimerStartEnabled24 = new ImageHelper(102308, "Images/Core/sinc_24x24.png", new Integer(24), new Integer(24));
				TimerStopEnabled24 = new ImageHelper(102309, "Images/Core/close_24x24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image TimerStartDisabled24;
			public final ims.framework.utils.Image TimerStartEnabled24;
			public final ims.framework.utils.Image TimerStopEnabled24;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				InProgress = new ImageHelper(116129, "Images/OCRR/Inprogress.gif", new Integer(16), new Integer(16));
				Requested = new ImageHelper(116117, "Images/OCRR/EMail-Forward.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image InProgress;
			public final ims.framework.utils.Image Requested;
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				Delirium_ribbon16 = new ImageHelper(123171, "Images/Clinical/dilirium_ribbon16.png", new Integer(16), new Integer(16));
				Dementia16 = new ImageHelper(123172, "Images/Clinical/dementia16.png", new Integer(16), new Integer(16));
				DementiaNew = new ImageHelper(123173, "Images/Clinical/dementia_newa.png", new Integer(16), new Integer(16));
				DeleriumNew = new ImageHelper(123174, "Images/Clinical/delerium_new.jpg", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Delirium_ribbon16;
			public final ims.framework.utils.Image Dementia16;
			public final ims.framework.utils.Image DementiaNew;
			public final ims.framework.utils.Image DeleriumNew;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
		public final ClinicalImages Clinical;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_WasTimerOn = new ims.framework.ContextVariable("WasTimerOn", prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__WasTimerOn_" + componentIdentifier + "");
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
			cxl_DOBSortOrder = new ims.framework.ContextVariable("DOBSortOrder", prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__DOBSortOrder_" + componentIdentifier + "");
			cxl_ConsultantSortOrder = new ims.framework.ContextVariable("ConsultantSortOrder", prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__ConsultantSortOrder_" + componentIdentifier + "");
			cxl_AdmissionDateSortOrder = new ims.framework.ContextVariable("AdmissionDateSortOrder", prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__AdmissionDateSortOrder_" + componentIdentifier + "");
			cxl_StatusSortOrder = new ims.framework.ContextVariable("StatusSortOrder", prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__StatusSortOrder_" + componentIdentifier + "");
			cxl_HoursToBreachSortOrder = new ims.framework.ContextVariable("HoursToBreachSortOrder", prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__HoursToBreachSortOrder_" + componentIdentifier + "");
			cxl_IconSortOrder = new ims.framework.ContextVariable("IconSortOrder", prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__IconSortOrder_" + componentIdentifier + "");
			cxl_DDSortOrder = new ims.framework.ContextVariable("DDSortOrder", prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__DDSortOrder_" + componentIdentifier + "");
		}
		
		public boolean getWasTimerOnIsNotNull()
		{
			return !cxl_WasTimerOn.getValueIsNull(context);
		}
		public Boolean getWasTimerOn()
		{
			return (Boolean)cxl_WasTimerOn.getValue(context);
		}
		public void setWasTimerOn(Boolean value)
		{
			cxl_WasTimerOn.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasTimerOn = null;
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.clinical.vo.DementiaForWorklistVo getSelectedInstance()
		{
			return (ims.clinical.vo.DementiaForWorklistVo)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.clinical.vo.DementiaForWorklistVo value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
		public boolean getDOBSortOrderIsNotNull()
		{
			return !cxl_DOBSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getDOBSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_DOBSortOrder.getValue(context);
		}
		public void setDOBSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_DOBSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DOBSortOrder = null;
		public boolean getConsultantSortOrderIsNotNull()
		{
			return !cxl_ConsultantSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getConsultantSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_ConsultantSortOrder.getValue(context);
		}
		public void setConsultantSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_ConsultantSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConsultantSortOrder = null;
		public boolean getAdmissionDateSortOrderIsNotNull()
		{
			return !cxl_AdmissionDateSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getAdmissionDateSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_AdmissionDateSortOrder.getValue(context);
		}
		public void setAdmissionDateSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_AdmissionDateSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AdmissionDateSortOrder = null;
		public boolean getStatusSortOrderIsNotNull()
		{
			return !cxl_StatusSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getStatusSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_StatusSortOrder.getValue(context);
		}
		public void setStatusSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_StatusSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_StatusSortOrder = null;
		public boolean getHoursToBreachSortOrderIsNotNull()
		{
			return !cxl_HoursToBreachSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getHoursToBreachSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_HoursToBreachSortOrder.getValue(context);
		}
		public void setHoursToBreachSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_HoursToBreachSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HoursToBreachSortOrder = null;
		public boolean getIconSortOrderIsNotNull()
		{
			return !cxl_IconSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getIconSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_IconSortOrder.getValue(context);
		}
		public void setIconSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_IconSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IconSortOrder = null;
		public boolean getDDSortOrderIsNotNull()
		{
			return !cxl_DDSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getDDSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_DDSortOrder.getValue(context);
		}
		public void setDDSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_DDSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DDSortOrder = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class DementiaWorklistMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int VIEW = 1;
				public static final int EDIT = 2;
				public static final int STEP1 = 3;
				public static final int STEP2 = 4;
				public static final int STEP3 = 5;
				public static final int RECORD_FOLLOWUP_AMTS = 6;
				public static final int EXCLUDE_FROM_DEMENTIA_SCREENING = 7;
				public static final int CONFIRM_PATIENT = 8;
				public static final int RIE_REMOVE_FROM_WORKLIST = 9;
				public static final int CORRECT_CCOMPLETION_DATE_STEP1 = 10;
				public static final int CORRECT_CCOMPLETION_DATE_STEP2 = 11;
			}
			public void disableAllDementiaWorklistMenuMenuItems()
			{
				this.contextMenuDementiaWorklistMenuVIEWItem.setEnabled(false);
				this.contextMenuDementiaWorklistMenuEDITItem.setEnabled(false);
				this.contextMenuDementiaWorklistMenuSTEP1Item.setEnabled(false);
				this.contextMenuDementiaWorklistMenuSTEP2Item.setEnabled(false);
				this.contextMenuDementiaWorklistMenuSTEP3Item.setEnabled(false);
				this.contextMenuDementiaWorklistMenuRECORD_FOLLOWUP_AMTSItem.setEnabled(false);
				this.contextMenuDementiaWorklistMenuEXCLUDE_FROM_DEMENTIA_SCREENINGItem.setEnabled(false);
				this.contextMenuDementiaWorklistMenuCONFIRM_PATIENTItem.setEnabled(false);
				this.contextMenuDementiaWorklistMenuRIE_REMOVE_FROM_WORKLISTItem.setEnabled(false);
				this.contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP1Item.setEnabled(false);
				this.contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP2Item.setEnabled(false);
			}
			public void hideAllDementiaWorklistMenuMenuItems()
			{
				this.contextMenuDementiaWorklistMenuVIEWItem.setVisible(false);
				this.contextMenuDementiaWorklistMenuEDITItem.setVisible(false);
				this.contextMenuDementiaWorklistMenuSTEP1Item.setVisible(false);
				this.contextMenuDementiaWorklistMenuSTEP2Item.setVisible(false);
				this.contextMenuDementiaWorklistMenuSTEP3Item.setVisible(false);
				this.contextMenuDementiaWorklistMenuRECORD_FOLLOWUP_AMTSItem.setVisible(false);
				this.contextMenuDementiaWorklistMenuEXCLUDE_FROM_DEMENTIA_SCREENINGItem.setVisible(false);
				this.contextMenuDementiaWorklistMenuCONFIRM_PATIENTItem.setVisible(false);
				this.contextMenuDementiaWorklistMenuRIE_REMOVE_FROM_WORKLISTItem.setVisible(false);
				this.contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP1Item.setVisible(false);
				this.contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP2Item.setVisible(false);
			}
			private Menu contextMenuDementiaWorklistMenu;
			public ReadOnlyMenuItem getDementiaWorklistMenuVIEWItem()
			{
				return this.contextMenuDementiaWorklistMenuVIEWItem;
			}
			private MenuItem contextMenuDementiaWorklistMenuVIEWItem;
			public ReadOnlyMenuItem getDementiaWorklistMenuEDITItem()
			{
				return this.contextMenuDementiaWorklistMenuEDITItem;
			}
			private MenuItem contextMenuDementiaWorklistMenuEDITItem;
			public ReadOnlyMenuItem getDementiaWorklistMenuSTEP1Item()
			{
				return this.contextMenuDementiaWorklistMenuSTEP1Item;
			}
			private MenuItem contextMenuDementiaWorklistMenuSTEP1Item;
			public ReadOnlyMenuItem getDementiaWorklistMenuSTEP2Item()
			{
				return this.contextMenuDementiaWorklistMenuSTEP2Item;
			}
			private MenuItem contextMenuDementiaWorklistMenuSTEP2Item;
			public ReadOnlyMenuItem getDementiaWorklistMenuSTEP3Item()
			{
				return this.contextMenuDementiaWorklistMenuSTEP3Item;
			}
			private MenuItem contextMenuDementiaWorklistMenuSTEP3Item;
			public ReadOnlyMenuItem getDementiaWorklistMenuRECORD_FOLLOWUP_AMTSItem()
			{
				return this.contextMenuDementiaWorklistMenuRECORD_FOLLOWUP_AMTSItem;
			}
			private MenuItem contextMenuDementiaWorklistMenuRECORD_FOLLOWUP_AMTSItem;
			public ReadOnlyMenuItem getDementiaWorklistMenuEXCLUDE_FROM_DEMENTIA_SCREENINGItem()
			{
				return this.contextMenuDementiaWorklistMenuEXCLUDE_FROM_DEMENTIA_SCREENINGItem;
			}
			private MenuItem contextMenuDementiaWorklistMenuEXCLUDE_FROM_DEMENTIA_SCREENINGItem;
			public ReadOnlyMenuItem getDementiaWorklistMenuCONFIRM_PATIENTItem()
			{
				return this.contextMenuDementiaWorklistMenuCONFIRM_PATIENTItem;
			}
			private MenuItem contextMenuDementiaWorklistMenuCONFIRM_PATIENTItem;
			public ReadOnlyMenuItem getDementiaWorklistMenuRIE_REMOVE_FROM_WORKLISTItem()
			{
				return this.contextMenuDementiaWorklistMenuRIE_REMOVE_FROM_WORKLISTItem;
			}
			private MenuItem contextMenuDementiaWorklistMenuRIE_REMOVE_FROM_WORKLISTItem;
			public ReadOnlyMenuItem getDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP1Item()
			{
				return this.contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP1Item;
			}
			private MenuItem contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP1Item;
			public ReadOnlyMenuItem getDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP2Item()
			{
				return this.contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP2Item;
			}
			private MenuItem contextMenuDementiaWorklistMenuCORRECT_CCOMPLETION_DATE_STEP2Item;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}


	public final class Timers implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private Timer timerRefresh;
		public Timer gettimerRefresh()
		{
			return timerRefresh;
		}
		public void enableAll()
		{
			timerRefresh.setEnabled(true);
		}
		public void disableAll()
		{
			timerRefresh.setEnabled(false);
		}
	}
	private Timers timers;
	public Timers getTimers()
	{
		return this.timers;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[101];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ID", "ID_Patient");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SEX", "Sex");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOB", "Dob");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOD", "Dod");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-RELIGION", "Religion");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISACTIVE", "IsActive");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SCN", "SCN");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-ID", "ID_DementiaConfiguration");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-AGE", "Age");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-EXCLUDEFAIRPERIOD", "ExcludeFAIRPeriod");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-STEPONEPERIOD", "StepOnePeriod");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-REMOVETIMEPERIOD", "RemoveTimePeriod");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-AMTSTHRESHOLDSCORE", "AMTSThresholdScore");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-ID", "ID_Dementia");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-BREACHDATETIME", "BreachDateTime");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-AGEONADMISSION", "AgeOnAdmission");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-DEMENTIACONFIRMED", "DementiaConfirmed");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-DELIRIUMCONFIRMED", "DeliriumConfirmed");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-DISCHARGEDATETIME", "DischargeDateTime");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-STEPONEFIND", "StepOneFind");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-STEPTWOASSESS", "StepTwoAssess");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-CONFIRMEDPATIENTPUTONDEMENTIAPATHWAY", "ConfirmedPatientPutOnDementiaPathway");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100117-ISEXCLUDEDFROMWORKLIST", "IsExcludedFromWorklist");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
