//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2385.22037)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.clinicalcoding;

import ims.clinical.vo.ClinicalCodingVo;
import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ProblemConfigVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.clinicaladmin.vo.CancerImagingHotlistItemVo;
import ims.clinicaladmin.vo.DiagnosisHotlistItemVo;
import ims.clinicaladmin.vo.ProblemHotlistItemVo;
import ims.clinicaladmin.vo.ProcedureHotlistItemVo;
import ims.clinicaladmin.vo.ProcedureHotlistShortVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AllergenVo;
import ims.core.vo.CancerImagingEventLiteVo;
import ims.core.vo.CancerImagingEventVo;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.MedicationVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureVo;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.IItem;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.vo.ValueObject;
import ims.vo.ValueObjectCollection;
import ims.vo.interfaces.IClinicalCodingValue;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int NO_CODE_ITEM_SELECTED_ID = -1;
	private static final int SEARCH_ALL_ITEMS_SELECTED_ID = -2;
	private static final String	NO_CODE_ITEM_SELECTED	= "No Suitable Term Found";		
	private static final String	SEARCH_ALL_ITEM_SELECTED = "Search all ";
	
	public boolean taxonomySearchEnabled = ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue();
	
	
	protected void onQmbCodingItemValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		codingItemValueChanged();
	
	}	

	
	protected void onQmbCodingItemTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		codingItemTextSubmitted(value,true);//WDEV-11979
	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.TaxonomySearch) && result.equals(DialogResult.OK))
			taxonomySearchOK();	
	}
	
	
	protected void onImbSearchClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Core.TaxonomySearch);		
	}
		
	private void codingItemValueChanged() 
	{		
		CodingItem item = getCodingItemFromVo(form.qmbCodingItem().getValue());
		boolean bSearchAllSelected = false;
		
		if (form.getLocalContext().getParentEditing().booleanValue() && item != null)
		{
			if ( item.iItemID != null && (item.iItemID.intValue()!= NO_CODE_ITEM_SELECTED_ID ) && (item.iItemID.intValue()!= SEARCH_ALL_ITEMS_SELECTED_ID ) )
			{
				form.txtDescription().setValue(item.strItem);				
				
				if (form.getLocalContext().getCodingLookupTypeIsNotNull() && form.getLocalContext().getCodingLookupType().equals(CodingItemType.MEDICATION))
				{
					form.qmbCodingItem().setEnabled(true);
					form.txtDescription().setEnabled(false);
				}
				else
					form.txtDescription().setEnabled(true);	
				
				form.getLocalContext().setNoValueFound(false);
			}
			else if ( item.iItemID != null && (item.iItemID.intValue() == NO_CODE_ITEM_SELECTED_ID  || item.iItemID.intValue() == SEARCH_ALL_ITEMS_SELECTED_ID))
			{
				form.txtDescription().setEnabled(true);
				form.qmbCodingItem().setEnabled(false);			
				form.getLocalContext().setNoValueFound(true);
				form.txtDescription().setValue("");			
			}
			else if (item.iItemID != null && (item.iItemID.intValue() == SEARCH_ALL_ITEMS_SELECTED_ID ) )
				bSearchAllSelected = true; 
			else if (item.iItemID != null)
				form.txtDescription().setValue(form.getLocalContext().getCodingItemTextSubmitted());
			else if (item.iItemID == null)
			{
				form.qmbCodingItem().setEnabled(true);//WDEV-11929
				form.txtDescription().setValue("");
			}
		}						
		form.getLocalContext().setboolSearchAllSelected(new Boolean(bSearchAllSelected));			
		//enableDescription();
	}
	
	private void codingItemTextSubmitted(String value,Boolean showOpened) 	//WDEV-11979
	{
		form.qmbCodingItem().clear();
		
		form.getLocalContext().setCodingItemTextSubmitted(value);
		ValueObjectCollection voCollItems = listCodingItems(value);
		
		if (voCollItems != null && voCollItems.getItems() != null)
		{
			IItem[] items = voCollItems.getItems();
			for (int i=0; i < items.length; i++)
			{
				Object item = items[i];
				if (item == null) 
					continue;
				
				addItemRow(item);
			}
		
			if(!form.getLocalContext().getDisableNoTermFoundItem() && !form.getLocalContext().getTaxonomyRestricted() && form.getLocalContext().getCodingLookupTypeIsNotNull() && !form.getLocalContext().getCodingLookupType().equals(CodingItemType.MEDICATION))					
				addGenericNOItemRow();
			
			
			//Add Generic NO Item Row for Medication
			if (form.getLocalContext().getCodingLookupTypeIsNotNull() && form.getLocalContext().getCodingLookupType().equals(CodingItemType.MEDICATION))
			{
				addGenericNOItemRow();
			}
			
			if (form.getLocalContext().getboolHotlist().booleanValue() == true 
					&& form.getLocalContext().getboolSearchAllSelected().equals(Boolean.FALSE))
				addGenericSEARCHItemRow();
	
			
			if(form.getLocalContext().getTaxonomyRestricted())
			{
				form.txtDescription().setEnabled(false);
				if(value == null || !value.equals("%")) //WDEV-11979
				{
					if (showOpened != null && showOpened)//WDEV-11979
						form.qmbCodingItem().showOpened();
				}
			
			}
			else
			{
				form.txtDescription().setEnabled(true);
				if (showOpened != null && showOpened)//WDEV-11979
					form.qmbCodingItem().showOpened();		

			}
				
			form.qmbCodingItem().setEditedText(value);		
		}		
		
		if (value != null)
			codingItemValueChanged();
		else
			form.qmbCodingItem().setEnabled(true);
	}
	
	private void taxonomySearchOK() 
	{
		TaxonomyMap taxonomyMap = form.getGlobalContext().Core.getTaxonomyMap();
		if (taxonomyMap != null)
		{
			TaxonomyMapCollection collTaxonomyMap = new TaxonomyMapCollection();
			collTaxonomyMap.add(taxonomyMap);					

			CodingItemType lkpCodingType = form.getLocalContext().getCodingLookupType();
			if(lkpCodingType!=null)
				if (lkpCodingType.equals(CodingItemType.ALLERGY))
					newAllergen(taxonomyMap);
				if (lkpCodingType.equals(CodingItemType.DIAGNOSIS) || lkpCodingType.equals(CodingItemType.FAMILY_HISTORY))
					newDiagnosis(taxonomyMap);
				else if (lkpCodingType.equals(CodingItemType.PROBLEM))		
					newProblem(taxonomyMap);
				if (lkpCodingType.equals(CodingItemType.PROCEDURE))
					newProcedure(taxonomyMap);
				if (lkpCodingType.equals(CodingItemType.IMAGING_EVENT))
					newImagingEvent(taxonomyMap);
				else if (lkpCodingType.equals(CodingItemType.MEDICATION))
					newMedication(taxonomyMap);
		}

		form.qmbCodingItem().setEnabled(false);
		if(form.getLocalContext().getTaxonomyRestricted())
		{
			form.txtDescription().setEnabled(false);
		}
		else
		{
			form.txtDescription().setEnabled(true);
		}
	}
	
	
	private void newImagingEvent(TaxonomyMap taxonomyMap)
	{
		// Create New Cancer Imaging Event
		CancerImagingEventVo voImagingEvent = new CancerImagingEventVo();
		voImagingEvent.setImagingEventName(taxonomyMap.getDescription());
		voImagingEvent.setTaxonomyMap(new TaxonomyMapCollection());
		voImagingEvent.setIsActive(new Boolean(true));

		String[] errors = voImagingEvent.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}

		try
		{
			voImagingEvent = domain.saveCancerImagingEventVo(voImagingEvent);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		catch (UniqueKeyViolationException e)
		{
			voImagingEvent = domain.getImagingEventByName(voImagingEvent.getImagingEventName());
		}
		
		if (voImagingEvent != null && voImagingEvent.getID_CancerImagingEventIsNotNull())
		{
			form.qmbCodingItem().clear();
			form.qmbCodingItem().newRow(voImagingEvent, voImagingEvent.getImagingEventName());
			form.qmbCodingItem().setValue(voImagingEvent);		
			form.txtDescription().setValue(voImagingEvent.getImagingEventName());
		}
	}

	/**
	 * Interrogated the combo box associated with this control
	 * @return
	 */
	private CodingItem getCodingItemFromVo(ValueObject voItem) 
	{
		CodingItem codingItem = new CodingItem();		
		CodingItemType lkpCodingType = form.getLocalContext().getCodingLookupType(); 
	
		if (lkpCodingType.equals(CodingItemType.ALLERGY))
		{
			AllergenVo voAllergen = (AllergenVo)voItem;
			codingItem.iItemID = voAllergen == null ? null : voAllergen.getID_Allergen();
			codingItem.strItem = voAllergen == null ? null : voAllergen.getAllergenName();
			codingItem.voCodingItem = voAllergen;
		}
		else if (lkpCodingType.equals(CodingItemType.DIAGNOSIS) || lkpCodingType.equals(CodingItemType.FAMILY_HISTORY))
		{
			DiagLiteVo voDiagnosis = getDiagnosis(voItem);			
			codingItem.iItemID =  voDiagnosis == null ? null : voDiagnosis.getID_Diagnosis();
			codingItem.strItem = voDiagnosis == null ? null : voDiagnosis.getDiagnosisName();
			codingItem.voCodingItem = voDiagnosis;
		}
		else if (lkpCodingType.equals(CodingItemType.PROBLEM) )
		{
			ClinicalProblemShortVo voProblem = getProblem(voItem); 			
			codingItem.iItemID = voProblem == null ? null : voProblem.getID_ClinicalProblem();
			codingItem.strItem = voProblem == null ? null : voProblem.getPCName();
			codingItem.voCodingItem = voProblem;
		}		
		else if (lkpCodingType.equals(CodingItemType.PROCEDURE))
		{
			ProcedureLiteVo voProcedure = getProcedure(voItem); 						
			codingItem.iItemID  = voProcedure == null ? null : voProcedure.getID_Procedure();
			codingItem.strItem = voProcedure == null ? null : new String(voProcedure.getProcedureName());
			codingItem.voCodingItem = voProcedure;			
		}
		else if (lkpCodingType.equals(CodingItemType.IMAGING_EVENT))
		{
			CancerImagingEventLiteVo voImagingEvent = getImagingEvent(voItem); 						
			codingItem.iItemID = voImagingEvent == null ? null : voImagingEvent.getID_CancerImagingEvent();
			codingItem.strItem = voImagingEvent == null ? null : new String(voImagingEvent.getImagingEventName());
			codingItem.voCodingItem = voImagingEvent;			
		}
		else if (lkpCodingType.equals(CodingItemType.MEDICATION))
		{
			MedicationLiteVo voMedication = (MedicationLiteVo)voItem;
			codingItem.iItemID = voMedication == null ? null : voMedication.getID_Medication();
			codingItem.strItem = voMedication == null ? null : voMedication.getMedicationName();
			codingItem.voCodingItem = voMedication;
		}
		
		return codingItem;
		
	}

	private CancerImagingEventLiteVo getImagingEvent(ValueObject voItem) 
	{
		CancerImagingEventLiteVo voImagingEvent = null;
		
		if (voItem instanceof CancerImagingHotlistItemVo)
		{
			CancerImagingHotlistItemVo hotlistItem = (CancerImagingHotlistItemVo)voItem;
			voImagingEvent = hotlistItem.getCancerImagingEvent();
		}
		else if (voItem instanceof CancerImagingEventLiteVo)
			voImagingEvent = ((CancerImagingEventLiteVo)voItem);
		
		return voImagingEvent;
	}

	private DiagLiteVo getDiagnosis(ValueObject voItem) 
	{
		DiagLiteVo voDiagnosis = null;
		
		if (voItem instanceof DiagnosisHotlistItemVo)
		{
			DiagnosisHotlistItemVo hotlistItem = (DiagnosisHotlistItemVo)voItem;
			voDiagnosis = hotlistItem.getDiagnosis();			
		}	
		else if (voItem instanceof DiagLiteVo)
			voDiagnosis = ((DiagLiteVo)voItem);

		return voDiagnosis;
	}

	private ClinicalProblemShortVo getProblem(ValueObject voItem) 
	{
		ClinicalProblemShortVo voProblem = null;
		
		if (voItem instanceof ProblemHotlistItemVo)
		{
			ProblemHotlistItemVo hotlistItem = (ProblemHotlistItemVo)voItem;
			voProblem = hotlistItem.getProblem();			
		}	
		else if (voItem instanceof ClinicalProblemShortVo)
			voProblem = ((ClinicalProblemShortVo)voItem);

		return voProblem;
	}

	private ProcedureLiteVo getProcedure(ValueObject voItem) 
	{
		ProcedureLiteVo voProcedure = null;
		
		if (voItem instanceof ProcedureHotlistShortVo)
		{
			ProcedureHotlistItemVo hotlistItem = (ProcedureHotlistItemVo)voItem;
			voProcedure = hotlistItem.getProcedure();
		}
		else if (voItem instanceof ProcedureLiteVo)
			voProcedure = ((ProcedureLiteVo)voItem);
		
		return voProcedure;
	}

	private void enableDescription() 
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			if(form.getLocalContext().getTaxonomyRestricted() || !form.getLocalContext().getEnableDescriptionField())
				form.txtDescription().setEnabled(false);
			else
				form.txtDescription().setEnabled(form.qmbCodingItem().getValue() != null);
		}
	}
		
	public void clear() 
	{
		form.qmbCodingItem().clear();
		form.txtDescription().setValue(null);
		form.txtDescription().setEnabled(false);			
	}

	private void addItemRow(Object item) 
	{
		if (item instanceof AllergenVo)
		{
			AllergenVo voAllergen = (AllergenVo)item;
			form.qmbCodingItem().newRow(voAllergen, voAllergen.getAllergenName(), voAllergen.getIsActiveIsNotNull() && !voAllergen.getIsActive().booleanValue() ? Color.Gray : Color.Default);
		}
		
		else if (item instanceof DiagLiteVo)
		{
			DiagLiteVo voDiagnosis = (DiagLiteVo)item;
			form.qmbCodingItem().newRow(voDiagnosis, voDiagnosis.getDiagnosisName(), voDiagnosis.getIsActiveIsNotNull() && !voDiagnosis.getIsActive().booleanValue() ? Color.Gray : Color.Default);
		}								
		
		else if (item instanceof ClinicalProblemShortVo)
		{
			ClinicalProblemShortVo voProblem = (ClinicalProblemShortVo)item;
			form.qmbCodingItem().newRow(voProblem, voProblem.getPCName(), voProblem.getIsActiveIsNotNull() && !voProblem.getIsActive().booleanValue() ? Color.Gray : Color.Default);					
		}
		
		else if (item instanceof ProcedureLiteVo)				
		{				
			ProcedureLiteVo voProcedure = (ProcedureLiteVo)item;
			form.qmbCodingItem().newRow(voProcedure, voProcedure.getProcedureName(), voProcedure.getIsActiveIsNotNull() && !voProcedure.getIsActive().booleanValue() ? Color.Gray : Color.Default);
		}
		
		else if (item instanceof MedicationLiteVo)
		{
			MedicationLiteVo voMedication = (MedicationLiteVo)item;
			form.qmbCodingItem().newRow(voMedication, voMedication.getMedicationName(), voMedication.getIsActiveIsNotNull() && !voMedication.getIsActive().booleanValue() ? Color.Gray : Color.Default);
		}

		else if (item instanceof CancerImagingEventLiteVo)
		{
			CancerImagingEventLiteVo voCIE = (CancerImagingEventLiteVo)item;
			form.qmbCodingItem().newRow(voCIE, voCIE.getImagingEventName(), voCIE.getIsActiveIsNotNull() && !voCIE.getIsActive().booleanValue() ? Color.Gray : Color.Default);
		}
	}

	private void addGenericNOItemRow()
	{
		addGenericRow(false);
	}

	private void addGenericSEARCHItemRow()
	{
		addGenericRow(true);
	}
	
	private void addGenericRow(boolean bAll) 
	{				
		CodingItemType lkpCodingType = form.getLocalContext().getCodingLookupType();
		if (lkpCodingType.equals(CodingItemType.ALLERGY))		
		{
			AllergenVo voAllergen = getGenericRowAllergen(bAll);
			form.qmbCodingItem().newRow(voAllergen, voAllergen.getAllergenName(), Color.Red);												
		}
		else if (lkpCodingType.equals(CodingItemType.DIAGNOSIS) || lkpCodingType.equals(CodingItemType.FAMILY_HISTORY))
		{
			DiagnosisVo voDiagnosis = getGenericRowDiagnosis(bAll);
			form.qmbCodingItem().newRow(voDiagnosis, voDiagnosis.getDiagnosisName(), Color.Red);						
		}
		else if (lkpCodingType.equals(CodingItemType.PROBLEM))		
		{
			ClinicalProblemShortVo voProblem = getGenericRowProblem(bAll);
			form.qmbCodingItem().newRow(voProblem, voProblem.getPCName(), Color.Red);						
		}
		else if (lkpCodingType.equals(CodingItemType.PROCEDURE))
		{
			ProcedureLiteVo voProcedure = getGenericRowProcedure(bAll);
			form.qmbCodingItem().newRow(voProcedure, voProcedure.getProcedureName(), Color.Red);			
		}
		else if (lkpCodingType.equals(CodingItemType.IMAGING_EVENT))
		{
			CancerImagingEventLiteVo voImagingEvent = getGenericRowImagingEvent(bAll);
			form.qmbCodingItem().newRow(voImagingEvent, voImagingEvent.getImagingEventName(), Color.Red);			
		}
		else if (lkpCodingType.getId() == CodingItemType.MEDICATION.getId() && (form.imbSearch().isVisible() || engine.getFormName().getID() == 123215)) //WDEV-13956
		{
			MedicationLiteVo voMedication = getGenericRowMedicationConfig(bAll);
			form.qmbCodingItem().newRow(voMedication, voMedication.getMedicationName(), Color.Red);								
		}
	}

	private ValueObjectCollection listCodingItems(String value) 
	{
		//WDEV-11888-Start
		if (form.getLocalContext().getCustomSearchProviderIsNotNull())
		{
			try
			{
			ValueObjectCollection listCodingItems = form.getLocalContext().getCustomSearchProvider().listCodingItems(value);
			
			return listCodingItems;
			}
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return null;
			}		
		}
		//WDEV-11888-End
		CodingItemType lkpCodingType = form.getLocalContext().getCodingLookupType();
		
		boolean bHotlist = form.getLocalContext().getboolHotlistIsNotNull() ? form.getLocalContext().getboolHotlist().booleanValue() : false;

		ValueObjectCollection voCollItems = null;
		
		try
		{
			if (CodingItemType.ALLERGY.equals(lkpCodingType))		//wdev-13429		
			{ 
				voCollItems = domain.listAllergens(value).sort(); 
			}
			else if (CodingItemType.DIAGNOSIS.equals(lkpCodingType) || CodingItemType.FAMILY_HISTORY.equals(lkpCodingType))  //wdev-13429
			{
				if (bHotlist)
					voCollItems = domain.listHotListDiagnosis(value, form.getLocalContext().getSpecialty()).sort();
				else
					voCollItems = domain.listDiagnosisLiteVo(value).sort(); 
			}
			else if (CodingItemType.PROBLEM.equals(lkpCodingType))		//wdev-13429
			{
				if (bHotlist)
					voCollItems = domain.listHotlistProblemsShort(value, form.getLocalContext().getSpecialty()).sort(); 
				else
					voCollItems = domain.listConfiguredProblemsShort(value, Boolean.TRUE).sort();
			}
			else if (CodingItemType.PROCEDURE.equals(lkpCodingType))	//wdev-13429
			{
				if (bHotlist)
					voCollItems = domain.listHotlistProcedureShort(value, form.getLocalContext().getSpecialty()).sort();				
				else
					voCollItems = domain.listProcLiteVo(value).sort();
			}
			else if (CodingItemType.IMAGING_EVENT.equals(lkpCodingType))	//wdev-13429
			{
				if (bHotlist)
					voCollItems = domain.listHotlistImagingEventsLite(value, form.getLocalContext().getSpecialty()).sort();				
				else
					voCollItems = domain.listImagingEventsLite(value).sort();
			}
			else if (lkpCodingType != null && lkpCodingType.getId() == CodingItemType.MEDICATION.getId())
			{
				if (bHotlist)
					voCollItems = domain.listHotlistMedication(value, form.getLocalContext().getSpecialty()).sort();				
				else
					voCollItems = domain.listMedications(value).sort();
				
			}
		}

		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return null;
		}		
		
		return voCollItems;
	}
	
		
	private AllergenVo getGenericRowAllergen(boolean bAll)
	{
		AllergenVo voAllergen = new AllergenVo();
		if (bAll)
		{
			voAllergen.setID_Allergen(new Integer(SEARCH_ALL_ITEMS_SELECTED_ID));
			voAllergen.setAllergenName(SEARCH_ALL_ITEM_SELECTED + "Allergies");
		}
		else
		{
			voAllergen.setID_Allergen(new Integer(NO_CODE_ITEM_SELECTED_ID));
			voAllergen.setAllergenName(NO_CODE_ITEM_SELECTED);
		}	
		
		return voAllergen;
	}

	private DiagnosisVo getGenericRowDiagnosis(boolean bAll)
	{
		DiagnosisVo voDiagnosis = new DiagnosisVo();
		
		if (bAll)		
		{
			voDiagnosis.setID_Diagnosis((new Integer(SEARCH_ALL_ITEMS_SELECTED_ID)));
			voDiagnosis.setDiagnosisName(SEARCH_ALL_ITEM_SELECTED + "Diagnoses");
		}
		else
		{
			voDiagnosis.setID_Diagnosis(new Integer(NO_CODE_ITEM_SELECTED_ID));
			voDiagnosis.setDiagnosisName(NO_CODE_ITEM_SELECTED);			
		}

		return voDiagnosis;
	}	
		
	
	private ClinicalProblemShortVo getGenericRowProblem(boolean bAll)
	{
		ClinicalProblemShortVo voProblemConfig = new ClinicalProblemShortVo();
		if (bAll)
		{
			voProblemConfig.setID_ClinicalProblem(new Integer(SEARCH_ALL_ITEMS_SELECTED_ID));
			voProblemConfig.setPCName(SEARCH_ALL_ITEM_SELECTED + "Problems");			
		}
		else
		{
			voProblemConfig.setID_ClinicalProblem(new Integer(NO_CODE_ITEM_SELECTED_ID));
			voProblemConfig.setPCName(NO_CODE_ITEM_SELECTED);
		}
		return voProblemConfig;
	}

	private ProcedureLiteVo getGenericRowProcedure(boolean bAll)
	{
		ProcedureLiteVo voProcedure = new ProcedureLiteVo();

		if (bAll)
		{
			voProcedure.setID_Procedure(new Integer(SEARCH_ALL_ITEMS_SELECTED_ID));
			voProcedure.setProcedureName(SEARCH_ALL_ITEM_SELECTED + "Procedures");
		}
		else
		{
			voProcedure.setID_Procedure(new Integer(NO_CODE_ITEM_SELECTED_ID));
			voProcedure.setProcedureName(NO_CODE_ITEM_SELECTED);
		}
		
		return voProcedure;
	}
	
	private MedicationLiteVo getGenericRowMedicationConfig(boolean bAll)
	{
		MedicationLiteVo voMedicationConfig = new MedicationLiteVo();
		
		if (bAll)
		{
			voMedicationConfig.setID_Medication(new Integer(SEARCH_ALL_ITEMS_SELECTED_ID));
			voMedicationConfig.setMedicationName(SEARCH_ALL_ITEM_SELECTED + "Medications");
		}
		else
		{
			voMedicationConfig.setID_Medication(new Integer(NO_CODE_ITEM_SELECTED_ID));
			voMedicationConfig.setMedicationName(NO_CODE_ITEM_SELECTED);
		}
		return voMedicationConfig;
	}
			
	

		public void setSpecialty(Specialty lkpSpecialty) 
		{
			form.getLocalContext().setSpecialty(lkpSpecialty);		
		}

		public ValueObject getSelectedItem() 
		{
			return form.qmbCodingItem().getValue();
		}
		
		public String getDescription() 
		{
			return form.txtDescription().getValue();
		}
		
		
		public Boolean isAllSelected() 
		{

			if (form.qmbCodingItem().getValue() == null)
				return new Boolean(false);
			
			Boolean bRet = new Boolean(false);
			CodingItemType lkpCodingType = form.getLocalContext().getCodingLookupType();
			
			if (lkpCodingType.equals(CodingItemType.ALLERGY))
			{
				AllergenVo voAllergen = (AllergenVo) form.qmbCodingItem().getValue();
				bRet = voAllergen.getID_Allergen().intValue() == SEARCH_ALL_ITEMS_SELECTED_ID ? Boolean.TRUE : Boolean.FALSE;
			}
			else if (lkpCodingType.equals(CodingItemType.DIAGNOSIS) || lkpCodingType.equals(CodingItemType.FAMILY_HISTORY))
			{
				DiagLiteVo voDiagnosis = (DiagLiteVo) form.qmbCodingItem().getValue();
				bRet = voDiagnosis.getID_Diagnosis().intValue() == SEARCH_ALL_ITEMS_SELECTED_ID ? Boolean.TRUE : Boolean.FALSE;
			}
			else if (lkpCodingType.equals(CodingItemType.PROBLEM))		
			{
				ClinicalProblemShortVo voProblem = (ClinicalProblemShortVo) form.qmbCodingItem().getValue();
				bRet = voProblem.getID_ClinicalProblem().intValue() == SEARCH_ALL_ITEMS_SELECTED_ID ? Boolean.TRUE : Boolean.FALSE; 			
			}
			else if (lkpCodingType.equals(CodingItemType.PROCEDURE))
			{
				ProcedureLiteVo voProcedure = (ProcedureLiteVo) form.qmbCodingItem().getValue();
				bRet = voProcedure.getID_Procedure().intValue() == SEARCH_ALL_ITEMS_SELECTED_ID ? Boolean.TRUE : Boolean.FALSE; 
			}
			else if (lkpCodingType.equals(CodingItemType.IMAGING_EVENT))
			{
				CancerImagingEventLiteVo voImagingEvent =  (CancerImagingEventLiteVo) form.qmbCodingItem().getValue();
				bRet = voImagingEvent.getID_CancerImagingEvent().intValue() == SEARCH_ALL_ITEMS_SELECTED_ID ? Boolean.TRUE : Boolean.FALSE; 
			}
			else if (lkpCodingType.equals(CodingItemType.MEDICATION))
			{
				MedicationLiteVo voMedication = (MedicationLiteVo) form.qmbCodingItem().getValue();  
				bRet = voMedication.getID_Medication().intValue() == SEARCH_ALL_ITEMS_SELECTED_ID ? Boolean.TRUE : Boolean.FALSE;
			}
			return bRet;
		}

		public Boolean isNoSuitableTermFound()
		{
			if (form.qmbCodingItem().getValue() == null)
				return Boolean.FALSE;
			
			CodingItem codingItem = getCodingItemFromVo(form.qmbCodingItem().getValue());
			
			if (codingItem.iItemID != null && codingItem.iItemID.intValue() == NO_CODE_ITEM_SELECTED_ID)
				return Boolean.TRUE;
			
			return Boolean.FALSE;
		}

		public Boolean getParentEditing() 
		{
			return form.getLocalContext().getParentEditing();
		}
	
		public void setParentEditing(Boolean bEditing) 
		{
			if(form.getLocalContext().getTaxonomyRestricted()==null)
			{
				form.getLocalContext().setTaxonomyRestricted(ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue());
				
			}
			form.getLocalContext().setParentEditing(bEditing);
			form.qmbCodingItem().setEnabled(form.getLocalContext().getParentEditing().booleanValue() && addingNew());
			if(ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue()&& form.getLocalContext().getTaxonomyRestricted() == ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue())
			{
				form.imbSearch().setVisible(false);
				form.txtDescription().setEnabled(false);
			}
			else if(form.getLocalContext().getTaxonomyRestricted()== false && ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue()== true) 
			{
				form.imbSearch().setVisible(true);
				form.imbSearch().setEnabled(form.getLocalContext().getParentEditing().booleanValue() && addingNew());
				form.txtDescription().setEnabled(true);
			}
			/*else if(form.getLocalContext().getTaxonomyRestricted()== false && ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue()== false)
			{
				
				form.imbSearch().setVisible(true);
				form.imbSearch().setEnabled(form.getLocalContext().getParentEditing().booleanValue() && addingNew());
				form.txtDescription().setEnabled(true);
			
			}*/
			else
			{
				form.imbSearch().setEnabled(form.getLocalContext().getParentEditing().booleanValue() && addingNew());
				form.txtDescription().setEnabled(form.getLocalContext().getParentEditing().booleanValue() && !addingNew());
			}
		}
		
		public void setParentEditing(Boolean bEditing, Boolean bEnabled)
		{
			if (bEnabled != null && Boolean.TRUE.equals(form.getLocalContext().getParentEditing()))
			{
				if (bEditing.equals(Boolean.TRUE))
				{
					form.getLocalContext().setParentEditing(bEditing);
					form.qmbCodingItem().setEnabled(true);
					if(form.getLocalContext().getTaxonomyRestricted())
					{
						form.imbSearch().setVisible(false);
						form.txtDescription().setEnabled(false);
					}
					else
					{
						form.imbSearch().setEnabled(true);
						form.txtDescription().setEnabled(true);
					}
				}
			}
		}
		
		private boolean addingNew()
		{
			boolean bRet = false;
			CodingItem codingItem = getCodingItemFromVo(form.qmbCodingItem().getValue());
			
			if (codingItem == null || codingItem.iItemID == null)
				bRet = true;
			else 
				bRet = false;
		
			return bRet;
		}

		public void setSelectedItem(ValueObject voSelectedItem) throws CodingRuntimeException 
		{		
			checkInstanceType(form.getLocalContext().getCodingLookupType(), voSelectedItem);

			CodingItem codingItem = new CodingItem();
			if (voSelectedItem == null)
			{
				ValueObject vo = getDefaultItem();
				codingItem = getCodingItemFromVo(vo);
			}
			else
				codingItem = getCodingItemFromVo(voSelectedItem);
			
			Color col = null;
			if (codingItem.iItemID != null && codingItem.iItemID.intValue() < 0)  
			{
				if (form.getMode().equals(FormMode.EDIT))
					col = Color.Red;
				else
					col = Color.Gray;
			}
			else
			{
				col = Color.Black;				
			}
			
			form.qmbCodingItem().newRow(codingItem.voCodingItem, codingItem.strItem, col);			
			form.qmbCodingItem().setValue(codingItem.voCodingItem);			
		}


		private ValueObject getDefaultItem() 
		{
			if(form.getLocalContext().getTaxonomyRestricted())
				return null;

			ValueObject voRet = null;
			CodingItemType lkpCodingType = form.getLocalContext().getCodingLookupType();

			if (lkpCodingType.equals(CodingItemType.ALLERGY))
				voRet = getGenericRowAllergen(false);
			else if (lkpCodingType.equals(CodingItemType.DIAGNOSIS)  || lkpCodingType.equals(CodingItemType.FAMILY_HISTORY))
				voRet = getGenericRowDiagnosis(false);
			else if (lkpCodingType.equals(CodingItemType.PROBLEM))
				voRet = getGenericRowProblem(false);
			else if (lkpCodingType.equals(CodingItemType.PROCEDURE))
				voRet = getGenericRowProcedure(false);
			else if (lkpCodingType.equals(CodingItemType.IMAGING_EVENT))
				voRet = getGenericRowImagingEvent(false);
			else if (lkpCodingType.equals(CodingItemType.MEDICATION))
				voRet = getGenericRowMedicationConfig(false);
			
			return voRet;
		}

		private CancerImagingEventLiteVo getGenericRowImagingEvent(boolean bAll) 
		{
			CancerImagingEventLiteVo voImagingEvent = new CancerImagingEventLiteVo();

			if (bAll)
			{
				voImagingEvent.setID_CancerImagingEvent(new Integer(SEARCH_ALL_ITEMS_SELECTED_ID));
				voImagingEvent.setImagingEventName(SEARCH_ALL_ITEM_SELECTED + "Modalities");
			}
			else
			{
				voImagingEvent.setID_CancerImagingEvent(new Integer(NO_CODE_ITEM_SELECTED_ID));
				voImagingEvent.setImagingEventName(NO_CODE_ITEM_SELECTED);
			}
			
			return voImagingEvent;
		}

		public void setDescription(String strDescription) 
		{
			form.txtDescription().setValue(strDescription);		
		}


		private void newAllergen(TaxonomyMap taxonomyMap )	
		{
			AllergenVo voAllergen = new AllergenVo();
			voAllergen.setAllergenName(taxonomyMap.getDescription());
			voAllergen.setIsActive(new Boolean(true));

			String[] errors = voAllergen.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}

			try
			{
				voAllergen = domain.saveAllergenVo(voAllergen);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				voAllergen = domain.getAllergenByName(voAllergen.getAllergenName());
			}
						
			if (voAllergen != null && voAllergen.getID_Allergen() != null)
			{
				form.qmbCodingItem().clear();
				form.qmbCodingItem().newRow(voAllergen, voAllergen.getAllergenName());
				form.qmbCodingItem().setValue(voAllergen);		
				form.txtDescription().setValue(voAllergen.getAllergenName());						
			}
		}
		
		private void newDiagnosis(TaxonomyMap taxonomyMap )	
		{
			DiagnosisVo voDiagnosis = new DiagnosisVo();
			voDiagnosis.setDiagnosisName(taxonomyMap.getDescription());
			voDiagnosis.setTaxonomyMap(new TaxonomyMapCollection());
			voDiagnosis.setIsActive(Boolean.TRUE);

			String[] errors = voDiagnosis.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}

			try
			{
				voDiagnosis = domain.saveDiagnosisVo(voDiagnosis);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				voDiagnosis = domain.getDiagnosisByName(voDiagnosis.getDiagnosisName());
			}
				

			if (voDiagnosis != null && voDiagnosis.getID_Diagnosis() != null)
			{
				form.qmbCodingItem().clear();
				form.qmbCodingItem().newRow(voDiagnosis, voDiagnosis.getDiagnosisName());
				form.qmbCodingItem().setValue(voDiagnosis);		
				form.txtDescription().setValue(voDiagnosis.getDiagnosisName());
			}
		}

		private void newProcedure(TaxonomyMap taxonomyMap ) 
		{		
			// Create New Procedure
			ProcedureVo voProcedure = new ProcedureVo();
			voProcedure.setProcedureName(taxonomyMap.getDescription());
			voProcedure.setTaxonomyMap(new TaxonomyMapCollection());
			voProcedure.setIsActive(new Boolean(true));

			String[] errors = voProcedure.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}

			try
			{
				voProcedure = domain.saveProcedureVo(voProcedure);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				voProcedure = domain.getProcedureByName(voProcedure.getProcedureName());
			}
			
			if (voProcedure != null && voProcedure.getID_Procedure() != null)
			{
				form.qmbCodingItem().clear();
				form.qmbCodingItem().newRow(voProcedure, voProcedure.getProcedureName());
				form.qmbCodingItem().setValue(voProcedure);		
				form.txtDescription().setValue(voProcedure.getProcedureName());
			}
		}
		
		private void newMedication(TaxonomyMap taxonomyMap )	
		{
			MedicationVo voMedicationConfig = new MedicationVo();
			voMedicationConfig.setMedicationName(taxonomyMap.getDescription());
			voMedicationConfig.setTaxonomyMap(new TaxonomyMapCollection());
			voMedicationConfig.setIsActive(Boolean.TRUE);

			String[] errors = voMedicationConfig.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}

			try
			{
				voMedicationConfig = domain.saveConfigVo(voMedicationConfig);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				voMedicationConfig = domain.getMedicationByName(voMedicationConfig.getMedicationName());
			}

			if (voMedicationConfig != null && voMedicationConfig.getID_Medication() != null)
			{
				form.qmbCodingItem().clear();			
				form.qmbCodingItem().newRow(voMedicationConfig, voMedicationConfig.getMedicationName());
				form.qmbCodingItem().setValue(voMedicationConfig);		
				form.txtDescription().setValue(voMedicationConfig.getMedicationName());
			}
						
		}

		private void newProblem(TaxonomyMap taxonomyMap)
		{
			ProblemConfigVo voProblemConfig = new ProblemConfigVo();
			voProblemConfig.setPCName(taxonomyMap.getDescription());
			voProblemConfig.setTaxonomyMap(new TaxonomyMapCollection());
			voProblemConfig.setIsActive(Boolean.TRUE);

			String[] errors = voProblemConfig.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}

			try
			{
				voProblemConfig = domain.saveConfigVo(voProblemConfig);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				voProblemConfig = domain.getProblemByName(voProblemConfig.getPCName());
			} 

			if (voProblemConfig != null && voProblemConfig != null)
			{
				form.qmbCodingItem().clear();
				ClinicalProblemShortVo voProblem = new ClinicalProblemShortVo();
				voProblem.setID_ClinicalProblem(voProblemConfig.getID_ClinicalProblem());
				voProblem.setPCName(voProblemConfig.getPCName());
				voProblem.setIsActive(voProblemConfig.getIsActive());
				
				form.qmbCodingItem().newRow(voProblem, voProblem.getPCName());
				form.qmbCodingItem().setValue(voProblem);		
				form.txtDescription().setValue(voProblemConfig.getPCName());
			}
		}

	private void checkInstanceType(CodingItemType lkpCodingType, ValueObject vo) throws CodingRuntimeException
	{
		if (lkpCodingType == null || vo == null)
			return;
	
		if (lkpCodingType.equals(CodingItemType.ALLERGY))				
		{
			if (!(vo instanceof AllergenVo))
				throw new CodingRuntimeException("Lookup Type / Vo Mismatch : Allergen lookup and non AllergenVo");							
		}
		else if (lkpCodingType.equals(CodingItemType.DIAGNOSIS) || lkpCodingType.equals(CodingItemType.FAMILY_HISTORY))  
		{
			if (!(vo instanceof DiagLiteVo))
				throw new CodingRuntimeException("Lookup Type / Vo Mismatch : Diagnosis lookup and non DiagLiteVo");
						
		}
		else if (lkpCodingType.equals(CodingItemType.PROBLEM))		
		{
			if (!(vo instanceof ClinicalProblemShortVo))
				throw new CodingRuntimeException("Lookup Type / Vo Mismatch : Problem lookup and non ClinicalProblemShortVo");
		}
		else if (lkpCodingType.equals(CodingItemType.PROCEDURE))
		{
			if (!(vo instanceof ProcedureLiteVo))
				throw new CodingRuntimeException("Lookup Type / Vo Mismatch : Procedure lookup and non ProcedureLiteVo");
		}
		else if (lkpCodingType.equals(CodingItemType.IMAGING_EVENT))
		{
			if (!(vo instanceof CancerImagingEventLiteVo))
				throw new CodingRuntimeException("Lookup Type / Vo Mismatch : Cancer Imaging Event lookup and non ProcedureLiteVo");
		}
		else if (lkpCodingType.equals(CodingItemType.MEDICATION)) 
		{
			if (!(vo instanceof MedicationLiteVo))
				throw new CodingRuntimeException("Lookup Type / Vo Mismatch : Medication lookup and non MedicationLiteVo");
				
		}
 
	}

	public void search() 
	{	
		codingItemTextSubmitted(form.getLocalContext().getCodingItemTextSubmitted(),true);//WDEV-11979
	}

	protected void onFormOpen() throws PresentationLogicException 
	{
		form.getLocalContext().setDisableNoTermFoundItem(ConfigFlag.UI.DISABLE_NO_SUITABLE_TERM_FOUND_ITEM.getValue());		
		
		form.getLocalContext().setTaxonomyRestricted(ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue());
		if(!ConfigFlag.UI.RESTRICT_TAXONOMY_ACCESS.getValue()&& ConfigFlag.UI.DISABLE_NO_SUITABLE_TERM_FOUND_ITEM.getValue())
		{
		
		form.getLocalContext().setDisableNoTermFoundItem(false);
		
		}
		open();
	}


	private void open()
	{
		form.getLocalContext().setboolSearchAllSelected(new Boolean(false));	
		form.txtDescription().setEnabled(false);
		
		
		form.imbSearch().setVisible(!(form.getLocalContext().getTaxonomyRestricted()));
		
	}

	public void setSearchAllSelected(Boolean bSearchAllSelected) 
	{
		form.getLocalContext().setboolSearchAllSelected(bSearchAllSelected);		
	}


	public IClinicalCodingValue getValue() 
	{
		if (form.qmbCodingItem().getValue() != null && form.txtDescription().getValue() != null )
		{
			if (form.getLocalContext().getCodingLookupTypeIsNotNull() &&
					form.getLocalContext().getCodingLookupType().equals(CodingItemType.MEDICATION))
			{
				if (Boolean.FALSE.equals(form.getLocalContext().getEnableDescriptionField()))
				{					
					if( form.getLocalContext().getNoValueFoundIsNotNull() && form.getLocalContext().getNoValueFound())
					{
						return null;
					}
				}
			}
			ClinicalCodingVo vo = new ClinicalCodingVo();
			vo.setIClinicalCodingValue(form.qmbCodingItem().getValue());
			vo.setIClinicalCodingValueDescription(form.txtDescription().getValue() == null ? "" : form.txtDescription().getValue());
			return vo;
		}
		
		return null;
	}

	public void setValue(IClinicalCodingValue iCCI) 
	{
		if(iCCI == null)
		{
			clear();
			return;
		}
		
		setSelectedItem(iCCI.getIClinicalCodingValue());
		form.txtDescription().setValue(iCCI.getIClinicalCodingValueDescription());
	}


	public class CodingItem
	{
		String strItem;
		Integer iItemID;
		ValueObject voCodingItem;
		
		CodingItem(){};
		
		CodingItem(String s, Integer i, ValueObject vo)
		{
			strItem = s;
			iItemID = i;
			voCodingItem = vo;
		}		
		
	}

	
		public void setCodingItemType(CodingItemType lkpCodingItemType) 
		{
			form.getLocalContext().setCodingLookupType(lkpCodingItemType);
		//	form.lblDescription().setValue(lkpCodingItemType.getIItemText() + " Description:");
		}
	
		public void setCodingItemType(CodingItemType lkpCodingItemType,	Boolean enableDescriptionField) 
		{		
			form.getLocalContext().setCodingLookupType(lkpCodingItemType);
			form.getLocalContext().setEnableDescriptionField(enableDescriptionField);
		}

		public CodingItemType getCodingItemType() 
		{
			return form.getLocalContext().getCodingLookupType();
		}
		
		public Boolean getHotlist() 
		{
			return form.getLocalContext().getboolHotlist();
		}
		
		public void setHotlist(Boolean bHotlist) 
		{
			form.getLocalContext().setboolHotlist(bHotlist);
			
			form.getLocalContext().setCustomSearchProvider(null);//WDEV-11888
			
			CodingItem item = getCodingItemFromVo(form.qmbCodingItem().getValue());
			boolean bSearchAllSelected = false;
			if (item != null)
			{
				if (item.iItemID != null && (item.iItemID.intValue() == SEARCH_ALL_ITEMS_SELECTED_ID ) )
					bSearchAllSelected = true; 
			}						
			form.getLocalContext().setboolSearchAllSelected(new Boolean(bSearchAllSelected));
			
		}
	
		public void setFocus()
		{
			form.qmbCodingItem().setFocus();
		}
	
		public void setClinicalTermMandatory(Boolean isMandatory)
		{
			form.qmbCodingItem().setRequired(isMandatory != null ? isMandatory.booleanValue() : false);
		}
	
		public void setDescriptionMandatory(Boolean isMandatory)
		{
			form.txtDescription().setRequired(isMandatory != null ? isMandatory.booleanValue() : false);
		}

		public void search(String value)
		{
		
			codingItemTextSubmitted(value,true);//WDEV-11979
			
			
		}

		public void setTaxonomySearch(Boolean value)
		{
			form.getLocalContext().setTaxonomyRestricted(value);
			open();
		}

		public void setEnabled(Boolean value)
		{
			if(value == true)
			{
				form.qmbCodingItem().setEnabled(value);
				form.txtDescription().setEnabled(value);
				form.imbSearch().setEnabled(value);
			}
			else if (value == false)
			{
				form.qmbCodingItem().setEnabled(value);
				form.imbSearch().setEnabled(value);
				form.txtDescription().setEnabled(value);
				
			}
			
		}


		public void populateTerms(Boolean value)
		{
			if(value)
			{
				search("%%");
				return;
			}
			
			form.qmbCodingItem().clear();
			
			form.getLocalContext().setCodingItemTextSubmitted("%%%");
			ValueObjectCollection voCollItems = listCodingItems("%%%");
			
			if (voCollItems != null && voCollItems.getItems() != null)
			{
				IItem[] items = voCollItems.getItems();
				for (int i=0; i < items.length; i++)
				{
					Object item = items[i];
					if (item == null) 
						continue;
					
					addItemRow(item);
				}
			
				if( ! form.getLocalContext().getDisableNoTermFoundItem()&& ! form.getLocalContext().getTaxonomyRestricted())
					addGenericNOItemRow();
				
				if (form.getLocalContext().getboolHotlist().booleanValue() == true 
						&& form.getLocalContext().getboolSearchAllSelected().equals(Boolean.FALSE))
					addGenericSEARCHItemRow();
		
					
			}		
			
		}


	
		public void setIsRequired(Boolean value) {
			// TODO Auto-generated method stub
			if (value!=null)
				{
				form.qmbCodingItem().setRequired(value);
				form.txtDescription().setRequired(value);
				}
			
		}
		//WDEV-11888 - Start
		public interface IClinicalCodingCustomHotlistProvider
		{
			public ValueObjectCollection listCodingItems(String value) throws DomainInterfaceException;
		}


		public void setCustomHotlist(IClinicalCodingCustomHotlistProvider hotlistProvider)
		{
			form.getLocalContext().setCustomSearchProvider(hotlistProvider);
		}
		//WDEV-11888 - End


		public void search(Boolean showOpened)
		{
			codingItemTextSubmitted(null, showOpened);
			
		}
		
		//wdev-12819
		public void showOpened() 
		{
			
			form.qmbCodingItem().showOpened();
			
		}

		public void removeNoSuitableTermItem(CodingItemType lkpCodingType) {
			if (lkpCodingType.equals(CodingItemType.ALLERGY))				
			{
				AllergenVo voAllergen = new AllergenVo();
				voAllergen.setID_Allergen(new Integer(NO_CODE_ITEM_SELECTED_ID));
				voAllergen.setAllergenName(NO_CODE_ITEM_SELECTED);
				form.qmbCodingItem().removeRow(voAllergen);							
			}
			else if (lkpCodingType.equals(CodingItemType.DIAGNOSIS) || lkpCodingType.equals(CodingItemType.FAMILY_HISTORY))  
			{
				DiagnosisVo voDiagnosis = new DiagnosisVo();
				voDiagnosis.setID_Diagnosis(new Integer(NO_CODE_ITEM_SELECTED_ID));
				voDiagnosis.setDiagnosisName(NO_CODE_ITEM_SELECTED);			
				form.qmbCodingItem().removeRow(voDiagnosis);
							
			}
			else if (lkpCodingType.equals(CodingItemType.PROBLEM))		
			{
				ClinicalProblemShortVo voProblemConfig = new ClinicalProblemShortVo();
				voProblemConfig.setID_ClinicalProblem(new Integer(NO_CODE_ITEM_SELECTED_ID));
				voProblemConfig.setPCName(NO_CODE_ITEM_SELECTED);
				form.qmbCodingItem().removeRow(voProblemConfig);
			}
			else if (lkpCodingType.equals(CodingItemType.PROCEDURE))
			{
				ProcedureLiteVo voProcedure = new ProcedureLiteVo();
				voProcedure.setID_Procedure(new Integer(NO_CODE_ITEM_SELECTED_ID));
				voProcedure.setProcedureName(NO_CODE_ITEM_SELECTED);
				form.qmbCodingItem().removeRow(voProcedure);
			}
			else if (lkpCodingType.equals(CodingItemType.IMAGING_EVENT))
			{
				CancerImagingEventLiteVo voImagingEvent = new CancerImagingEventLiteVo();
				voImagingEvent.setID_CancerImagingEvent(new Integer(NO_CODE_ITEM_SELECTED_ID));
				voImagingEvent.setImagingEventName(NO_CODE_ITEM_SELECTED);
				form.qmbCodingItem().removeRow(voImagingEvent);
			}
			else if (lkpCodingType.equals(CodingItemType.MEDICATION)) 
			{
				MedicationLiteVo voMedicationConfig = new MedicationLiteVo();
				voMedicationConfig.setID_Medication(new Integer(NO_CODE_ITEM_SELECTED_ID));
				voMedicationConfig.setMedicationName(NO_CODE_ITEM_SELECTED);
				form.qmbCodingItem().removeRow(voMedicationConfig);
					
			}
		}
	//WDEV-13956
	public void hideTaxonomySearch()
		{
			form.imbSearch().setVisible(false);		
		}

		
}
