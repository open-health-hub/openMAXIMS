//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.rchtsurgicaloperationnotes;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.clinical.domain.RCHTSurgicalOperationNotes.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.clinical.domain.RCHTSurgicalOperationNotes domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmb2ValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabPage1().cmb2().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.CareSpelltoEpisodeRelationship existingInstance = (ims.core.vo.lookups.CareSpelltoEpisodeRelationship)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmb2Lookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.CareSpelltoEpisodeRelationship)
		{
			ims.core.vo.lookups.CareSpelltoEpisodeRelationship instance = (ims.core.vo.lookups.CareSpelltoEpisodeRelationship)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmb2Lookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.CareSpelltoEpisodeRelationship existingInstance = (ims.core.vo.lookups.CareSpelltoEpisodeRelationship)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabPage1().cmb2().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmb2Lookup()
	{
		this.form.lyr1().tabPage1().cmb2().clear();
		ims.core.vo.lookups.CareSpelltoEpisodeRelationshipCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getCareSpelltoEpisodeRelationship(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabPage1().cmb2().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmb2LookupValue(int id)
	{
		ims.core.vo.lookups.CareSpelltoEpisodeRelationship instance = ims.core.vo.lookups.LookupHelper.getCareSpelltoEpisodeRelationshipInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabPage1().cmb2().setValue(instance);
	}
	protected final void defaultcmb2LookupValue()
	{
		this.form.lyr1().tabPage1().cmb2().setValue((ims.core.vo.lookups.CareSpelltoEpisodeRelationship)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.CareSpelltoEpisodeRelationship.class, engine.getFormName().getID(), ims.core.vo.lookups.CareSpelltoEpisodeRelationship.TYPE_ID));
	}
	protected final void oncmb1ValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabPage1().cmb1().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ContactLocation existingInstance = (ims.core.vo.lookups.ContactLocation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmb1Lookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ContactLocation)
		{
			ims.core.vo.lookups.ContactLocation instance = (ims.core.vo.lookups.ContactLocation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmb1Lookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ContactLocation existingInstance = (ims.core.vo.lookups.ContactLocation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabPage1().cmb1().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmb1Lookup()
	{
		this.form.lyr1().tabPage1().cmb1().clear();
		ims.core.vo.lookups.ContactLocationCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getContactLocation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabPage1().cmb1().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmb1LookupValue(int id)
	{
		ims.core.vo.lookups.ContactLocation instance = ims.core.vo.lookups.LookupHelper.getContactLocationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabPage1().cmb1().setValue(instance);
	}
	protected final void defaultcmb1LookupValue()
	{
		this.form.lyr1().tabPage1().cmb1().setValue((ims.core.vo.lookups.ContactLocation)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ContactLocation.class, engine.getFormName().getID(), ims.core.vo.lookups.ContactLocation.TYPE_ID));
	}
	protected final void oncmb3ValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabPage1().cmb3().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmb3Lookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Specialty)
		{
			ims.core.vo.lookups.Specialty instance = (ims.core.vo.lookups.Specialty)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmb3Lookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabPage1().cmb3().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmb3Lookup()
	{
		this.form.lyr1().tabPage1().cmb3().clear();
		ims.core.vo.lookups.SpecialtyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSpecialty(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabPage1().cmb3().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmb3LookupValue(int id)
	{
		ims.core.vo.lookups.Specialty instance = ims.core.vo.lookups.LookupHelper.getSpecialtyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabPage1().cmb3().setValue(instance);
	}
	protected final void defaultcmb3LookupValue()
	{
		this.form.lyr1().tabPage1().cmb3().setValue((ims.core.vo.lookups.Specialty)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Specialty.class, engine.getFormName().getID(), ims.core.vo.lookups.Specialty.TYPE_ID));
	}
	protected final void oncmb4ValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabPage1().cmb4().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ContextType existingInstance = (ims.core.vo.lookups.ContextType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmb4Lookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ContextType)
		{
			ims.core.vo.lookups.ContextType instance = (ims.core.vo.lookups.ContextType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmb4Lookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ContextType existingInstance = (ims.core.vo.lookups.ContextType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabPage1().cmb4().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmb4Lookup()
	{
		this.form.lyr1().tabPage1().cmb4().clear();
		ims.core.vo.lookups.ContextTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getContextType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabPage1().cmb4().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmb4LookupValue(int id)
	{
		ims.core.vo.lookups.ContextType instance = ims.core.vo.lookups.LookupHelper.getContextTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabPage1().cmb4().setValue(instance);
	}
	protected final void defaultcmb4LookupValue()
	{
		this.form.lyr1().tabPage1().cmb4().setValue((ims.core.vo.lookups.ContextType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ContextType.class, engine.getFormName().getID(), ims.core.vo.lookups.ContextType.TYPE_ID));
	}
	protected final void oncmb5ValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().tabPage1().cmb5().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.CareSpelltoEpisodeRelationship existingInstance = (ims.core.vo.lookups.CareSpelltoEpisodeRelationship)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmb5Lookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.CareSpelltoEpisodeRelationship)
		{
			ims.core.vo.lookups.CareSpelltoEpisodeRelationship instance = (ims.core.vo.lookups.CareSpelltoEpisodeRelationship)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmb5Lookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.CareSpelltoEpisodeRelationship existingInstance = (ims.core.vo.lookups.CareSpelltoEpisodeRelationship)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().tabPage1().cmb5().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmb5Lookup()
	{
		this.form.lyr1().tabPage1().cmb5().clear();
		ims.core.vo.lookups.CareSpelltoEpisodeRelationshipCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getCareSpelltoEpisodeRelationship(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().tabPage1().cmb5().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmb5LookupValue(int id)
	{
		ims.core.vo.lookups.CareSpelltoEpisodeRelationship instance = ims.core.vo.lookups.LookupHelper.getCareSpelltoEpisodeRelationshipInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().tabPage1().cmb5().setValue(instance);
	}
	protected final void defaultcmb5LookupValue()
	{
		this.form.lyr1().tabPage1().cmb5().setValue((ims.core.vo.lookups.CareSpelltoEpisodeRelationship)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.CareSpelltoEpisodeRelationship.class, engine.getFormName().getID(), ims.core.vo.lookups.CareSpelltoEpisodeRelationship.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.clinical.domain.RCHTSurgicalOperationNotes domain;
}
