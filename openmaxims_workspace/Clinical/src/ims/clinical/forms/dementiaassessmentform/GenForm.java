//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.dementiaassessmentform;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrStepsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageStep1Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 808, 593, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccStep1FindForm = loader.loadComponent(123260, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
				//ims.framework.Control m_ccStep1FindControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(0), new Integer(808), new Integer(593), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_ccStep1FindForm, instance1 } );
				ims.framework.Control m_ccStep1FindControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_ccStep1FindForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccStep1FindControl);
				Menu[] menus1 = m_ccStep1FindForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.dementiaassessmentfindcomponent.IComponent ccStep1Find()
			{
				return (ims.clinical.forms.dementiaassessmentfindcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccStep1FindValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccStep1FindVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccStep1FindVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccStep1FindEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccStep1FindEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageStep2Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 808, 560, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccAMTSForm = loader.loadComponent(123261, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1002, skipContextValidation);
				//ims.framework.Control m_ccAMTSControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(8), new Integer(0), new Integer(808), new Integer(560), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1002), m_ccAMTSForm, instance1 } );
				ims.framework.Control m_ccAMTSControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1002), m_ccAMTSForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAMTSControl);
				Menu[] menus1 = m_ccAMTSForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 360, 566, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 2003), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public ims.clinical.forms.dementiaassessmentamtscomponent.IComponent ccAMTS()
			{
				return (ims.clinical.forms.dementiaassessmentamtscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccAMTSValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccAMTSVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccAMTSVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccAMTSEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccAMTSEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnClose()
			{
				return (Button)super.getControl(1);
			}
		}
		public static class tabPageFollowUpContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class recbrAMTSRecordBrowser extends RecordBrowserBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.DementiaAssessAndInvestigateVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.DementiaAssessAndInvestigateVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.DementiaAssessAndInvestigateVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.DementiaAssessAndInvestigateVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public void newRow(int index, ims.clinical.vo.DementiaAssessAndInvestigateVo value, String text)
				{
					super.control.newRow(index, value, text);
				}
				public void newRow(int index, ims.clinical.vo.DementiaAssessAndInvestigateVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(index, value, text, image);
				}
				public void newRow(int index, ims.clinical.vo.DementiaAssessAndInvestigateVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, textColor);
				}
				public void newRow(int index, ims.clinical.vo.DementiaAssessAndInvestigateVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, image, textColor);
				}
				public ims.clinical.vo.DementiaAssessAndInvestigateVo getValue()
				{
					return (ims.clinical.vo.DementiaAssessAndInvestigateVo)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.DementiaAssessAndInvestigateVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 528, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccAMTSFollowUpForm = loader.loadComponent(123261, appForm, startControlID * 10 + 3000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 2005, skipContextValidation);
				//ims.framework.Control m_ccAMTSFollowUpControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(8), new Integer(32), new Integer(808), new Integer(528), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2005), m_ccAMTSFollowUpForm, instance1 } );
				ims.framework.Control m_ccAMTSFollowUpControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2005), m_ccAMTSFollowUpForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAMTSFollowUpControl);
				Menu[] menus1 = m_ccAMTSFollowUpForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 360, 566, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 3006), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// RecordBrowser Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				RecordBrowser m_recbrAMTSTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 2004), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
				addControl(m_recbrAMTSTemp);
				recbrAMTSRecordBrowser recbrAMTS = (recbrAMTSRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrAMTSRecordBrowser.class, m_recbrAMTSTemp);
				super.addRecordBrowser(recbrAMTS);
			}

			public ims.clinical.forms.dementiaassessmentamtscomponent.IComponent ccAMTSFollowUp()
			{
				return (ims.clinical.forms.dementiaassessmentamtscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccAMTSFollowUpValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccAMTSFollowUpVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccAMTSFollowUpVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccAMTSFollowUpEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccAMTSFollowUpEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnCloseFollowUp()
			{
				return (Button)super.getControl(1);
			}
			public recbrAMTSRecordBrowser recbrAMTS()
			{
				return (recbrAMTSRecordBrowser)super.getRecordBrowser(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageStep1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Step 1: Find", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageStep1Container m_tabPageStep1Container = (tabPageStep1Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageStep1Container.class, m_tabPageStep1, factory);
			super.addContainer(m_tabPageStep1, m_tabPageStep1Container);
			ims.framework.utils.SizeInfo m_tabPageStep1DesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabPageStep1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper7.getWidth(), anchoringHelper7.getHeight());
			m_tabPageStep1Container.setContext(form, appForm, m_tabPageStep1, loader, startControlID, m_tabPageStep1DesignSize, m_tabPageStep1RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageStep2 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Step 2: Assess & Investigate", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageStep2Container m_tabPageStep2Container = (tabPageStep2Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageStep2Container.class, m_tabPageStep2, factory);
			super.addContainer(m_tabPageStep2, m_tabPageStep2Container);
			ims.framework.utils.SizeInfo m_tabPageStep2DesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabPageStep2RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper8.getWidth(), anchoringHelper8.getHeight());
			m_tabPageStep2Container.setContext(form, appForm, m_tabPageStep2, loader, startControlID, m_tabPageStep2DesignSize, m_tabPageStep2RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageFollowUp = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Follow-Up AMTS", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageFollowUpContainer m_tabPageFollowUpContainer = (tabPageFollowUpContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageFollowUpContainer.class, m_tabPageFollowUp, factory);
			super.addContainer(m_tabPageFollowUp, m_tabPageFollowUpContainer);
			ims.framework.utils.SizeInfo m_tabPageFollowUpDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabPageFollowUpRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
			m_tabPageFollowUpContainer.setContext(form, appForm, m_tabPageFollowUp, loader, startControlID, m_tabPageFollowUpDesignSize, m_tabPageFollowUpRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageStep1().setVisible(false);
			tabPageStep2().setVisible(false);
			tabPageFollowUp().setVisible(false);
		}
		public void settabPageStep1Enabled(boolean value)
		{
			tabPageStep1().setEnabled(value);
		}
		public void settabPageStep2Enabled(boolean value)
		{
			tabPageStep2().setEnabled(value);
		}
		public void settabPageFollowUpEnabled(boolean value)
		{
			tabPageFollowUp().setEnabled(value);
		}
		public void showtabPageStep1()
		{
			tabPageStep2().setVisible(false);
			tabPageFollowUp().setVisible(false);
			tabPageStep1().setVisible(true);
		}
		public void showtabPageStep2()
		{
			tabPageStep1().setVisible(false);
			tabPageFollowUp().setVisible(false);
			tabPageStep2().setVisible(true);
		}
		public void showtabPageFollowUp()
		{
			tabPageStep1().setVisible(false);
			tabPageStep2().setVisible(false);
			tabPageFollowUp().setVisible(true);
		}

		public tabPageStep1Container tabPageStep1()
		{
			return (tabPageStep1Container)super.layers.get(0);
		}
		public tabPageStep2Container tabPageStep2()
		{
			return (tabPageStep2Container)super.layers.get(1);
		}
		public tabPageFollowUpContainer tabPageFollowUp()
		{
			return (tabPageFollowUpContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrStepsLayer m_lyrStepsLayer = (lyrStepsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrStepsLayer.class, this, factory);
		super.addLayer(m_lyrStepsLayer);
		m_lyrStepsLayer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyrStepsLayer lyrSteps()
	{
		return (lyrStepsLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				DementiaAssessmentFormDialog = new LocalFormName(123264);
			}
			public final FormName DementiaAssessmentFormDialog;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_selectedDementia = new ims.framework.ContextVariable("selectedDementia", prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier + "");
		}
		
		public boolean getselectedDementiaIsNotNull()
		{
			return !cxl_selectedDementia.getValueIsNull(context);
		}
		public ims.clinical.vo.DementiaVo getselectedDementia()
		{
			return (ims.clinical.vo.DementiaVo)cxl_selectedDementia.getValue(context);
		}
		public void setselectedDementia(ims.clinical.vo.DementiaVo value)
		{
			cxl_selectedDementia.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedDementia = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[103];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-ID", "ID_DementiaConfiguration");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-AGE", "Age");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-EXCLUDEFAIRPERIOD", "ExcludeFAIRPeriod");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-STEPONEPERIOD", "StepOnePeriod");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-REMOVETIMEPERIOD", "RemoveTimePeriod");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Admin.DementiaConfiguration", "BO-1004100057-AMTSTHRESHOLDSCORE", "AMTSThresholdScore");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-ID", "ID_DementiaAssessAndInvestigate");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-Q1AGE", "Q1Age");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-Q2DOB", "Q2DOB");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-Q3CURRENTYEAR", "Q3CurrentYear");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-Q4CURRENTTIME", "Q4CurrentTime");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-Q5NAMEOFHOSPITAL", "Q5NameOfHospital");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-Q6RECOGNISEPEOPLE", "Q6RecognisePeople");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-Q7YEARWW2ENDED", "Q7YearWW2Ended");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-Q8MONARCH", "Q8Monarch");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-Q9COUNTBACKWARDS", "Q9CountBackwards");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-Q10RECALL", "Q10Recall");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-AMTSSCORE", "AMTSScore");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-CONFIRMTRUSTSPROTOCOL", "ConfirmTrustsProtocol");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Clinical.AMTSRecordToView", "BO-1003100119-CONFIRMMEDICATIONREVIEW", "ConfirmMedicationReview");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-ID", "ID_Dementia");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-PATIENT", "Patient");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-BREACHDATETIME", "BreachDateTime");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-AGEONADMISSION", "AgeOnAdmission");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-DISCHARGEDATETIME", "DischargeDateTime");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-DEMENTIACONFIRMED", "DementiaConfirmed");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-DELIRIUMCONFIRMED", "DeliriumConfirmed");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-AMTSSCORE", "AMTSScore");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-CONFIRMEDPATIENTPUTONDEMENTIAPATHWAY", "ConfirmedPatientPutOnDementiaPathway");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-ADMISSIONDETAIL", "AdmissionDetail");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DementiaAssessmentForm.__internal_x_context__selectedDementia_" + componentIdentifier, "BO-1003100117-ISEXCLUDEDFROMWORKLIST", "IsExcludedFromWorklist");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
