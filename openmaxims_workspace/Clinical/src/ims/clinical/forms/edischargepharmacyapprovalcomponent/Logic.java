//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3922.16454)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.edischargepharmacyapprovalcomponent;

import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.TTAMedicationAndPharmacyVo;
import ims.clinical.vo.TTAMedicationDetailVo;
import ims.clinical.vo.TTAMedicationDetailVoCollection;
import ims.clinical.vo.TTAStatusVo;
import ims.clinical.vo.TTAStatusVoCollection;
import ims.clinical.vo.enums.EDischargeComponentStatus;
import ims.clinical.vo.enums.EDischargeLastEvent;
import ims.clinical.vo.enums.EDischargeMedsContextMenu;
import ims.clinical.vo.lookups.TTAStatus;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IMos;

public class Logic extends BaseLogic
{
	private static final String TICK_BOX = "TICK_BOX";
	private static final String INSTRUCTION = "INSTRUCTION";
	private static final String COMMENTS = "COMMENTS";
	private static final String COMM_DATE = "COMM_DATE";
	private static final String FORMM = "FORM";
	private static final String FREQUENCY = "FREQUENCY";
	private static final String ROUTE = "ROUTE";
	private static final String DOSE = "DOSE";
	private static final String MEDICATION = "MEDICATION";
	private static final String UNSUSPENDED = "Un-Suspend";   	//wdev-13848
	private static final String SUSPENDED	= "Suspended";		//wdev-13848
	private static final String UNAPPROVE	= "Un-Approve";		//wdev-13848
	private static final String APPROVE		= "Approve";		//wdev-13848
	
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		
	}
	
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		setEditMode();		
		updateContextMenuStatus();		
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		// WDEV-12224 - Refresh the screen
		open();
	}
	
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if(save())		
			open();
	}

	private boolean save() 
	{
		TTAMedicationAndPharmacyVo record = populateDataFromScreen(form.getLocalContext().getEditedRecordIsNotNull() ? (TTAMedicationAndPharmacyVo) form.getLocalContext().getEditedRecord().clone() : null);
		if (record == null)
			return false;
		
		String[] errors = record.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			record = domain.save(record, form.getLocalContext().getSummary());
			form.getLocalContext().setEditedRecord(record);			
		}		
		catch (DomainInterfaceException e) 
		{			
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();//WDEV-13523
			return false;
		}
		catch (UniqueKeyViolationException e) 
		{			
			
			engine.showMessage("A medication with the same name already exists. Please select it instead of creating a new one");
			return false;
		}
		
		open();
		
		form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
		form.fireCustomControlValueChanged();
		
		return true;
	}
	
	@Override
	protected void onBtnApproveClick() throws PresentationLogicException 
	{
		form.getContextMenus().Clinical.hideAllEDischargeMedsSthkMenuMenuItems();
		form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewItem().setVisible((form.getMode().equals(FormMode.VIEW) ? true: false) && form.dyngrdMedication().getSelectedRow() != null ? true : false);
		
		
		if (form.btnApprove().getText().equals(APPROVE))
		{			
			if (form.dyngrdMedication().getRows().size() == 0)
			{
				form.getLocalContext().setPharmApproveConfirmMsgBoxId(engine.showMessage("The medication grid doesn't contain any records!\nAre you sure you want to approve?", "Please confirm", MessageButtons.YESNO, MessageIcon.QUESTION));
				return;
			}

			// Update the 'Last Updating Pharmacist' field
			// - will only be updated if the current user is a HCP
			updateLastUpdatingPharmacist();
			
			doApprove();
		}
		else if (form.btnApprove().getText().equals(UNAPPROVE))
		{
			TTAMedicationAndPharmacyVo currentRecord = form.getLocalContext().getEditedRecord();		
			TTAStatusVoCollection statusHistory = currentRecord.getTTAStatusHistory().sort(SortOrder.DESCENDING);
			TTAStatusVo newStatus = null;
			for (int i = 0; i < statusHistory.size(); i++) 
			{
				if (statusHistory.get(i).equals(currentRecord.getCurrentTTAStatus()))
				{
					continue;
				}
				else
				{
					if (statusHistory.get(i).getStatus().equals(TTAStatus.SUBMITTED) || statusHistory.get(i).getStatus().equals(TTAStatus.RESUBMITTED))
					{
						newStatus = statusHistory.get(i); 
						
						updateStatus(newStatus.getStatus());										

						// Update the 'Last Updating Pharmacist' field
						// - will only be updated if the current user is a HCP
						updateLastUpdatingPharmacist();
						
						if (save())
						{																	
							form.btnApprove().setText(APPROVE);
							manageStatus(form.getLocalContext().getEditedRecord());
						}
	
						break;
					}
				}						
			}		
		}
	}
	
	private void updateStatus(TTAStatus status)
	{
		if(status == null)
		{
			form.getLocalContext().setCurrentStatus(null);
			return;
		}
				
		TTAStatusVo newStatus = null;
		if (form.getLocalContext().getEditedRecordIsNotNull() && form.getLocalContext().getEditedRecord().getCurrentTTAStatusIsNotNull() && form.getLocalContext().getEditedRecord().getCurrentTTAStatus().getStatus().equals(status))
		{
			form.getLocalContext().setCurrentStatus(form.getLocalContext().getEditedRecord().getCurrentTTAStatus());
			return;
		}
			
		newStatus = new TTAStatusVo();
		MemberOfStaffShortVo user = (MemberOfStaffShortVo) domain.getMosUser();
		if (user != null)
		{			
			newStatus.setAuthoringUser(user);
			newStatus.setStatusDateTime(new DateTime());
		}	
		newStatus.setStatus(status);			
		
		if (status.equals(TTAStatus.REJECTED))
		{
			newStatus.setReasonForRejection(form.getGlobalContext().Clinical.geteDischargePharmacyApprovalRejectReason());
		}
		if (status.equals(TTAStatus.SUSPENDED))
		{
			newStatus.setReasonForSuspension(form.getGlobalContext().Clinical.geteDischargePharmacyApprovalSuspendedReason());
		}
		
		form.txt1().setValue(status.getText());
		
		form.getLocalContext().setCurrentStatus(newStatus);
	}
	
	@Override
	protected void onBtnRejectClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Clinical.EDischargePharmacyApprovalRejectDialog);		
	}
	@Override
	protected void onBtnTTADispensedClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Clinical.TTADispenseDialog);	
	}
	@Override
	protected void onBtnJACClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Clinical.JACDialog);	
	}
	@Override
	protected void onBtnPrintRequestClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Clinical.TTAPrintDialog);		
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{		
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeMedsSthkMenu.New:
			{
				form.getGlobalContext().Clinical.setEDischargeMeds(null);
				engine.open(form.getForms().Clinical.EDischargeMedsSthkDialog, new Object[]{EDischargeMedsContextMenu.NEW, new Boolean(true)});
			}
			break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeMedsSthkMenu.Edit:
			{
				form.getGlobalContext().Clinical.setEDischargeMeds(form.getLocalContext().getEditedMedicalRecord());
				engine.open(form.getForms().Clinical.EDischargeMedsSthkDialog, new Object[]{EDischargeMedsContextMenu.EDIT, new Boolean(true)});
			}
			break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeMedsSthkMenu.Remove:
			{								
				TTAMedicationAndPharmacyVo 	currentRecord = form.getLocalContext().getEditedRecord();
				if(currentRecord != null && currentRecord.getTTAMedicationsIsNotNull())
				{
					TTAMedicationDetailVoCollection medColl = currentRecord.getTTAMedications();
					medColl.remove((TTAMedicationDetailVo)form.dyngrdMedication().getSelectedRow().getValue());
					currentRecord.setTTAMedications(medColl);
					form.getLocalContext().setEditedRecord(currentRecord);					
				}
				
				form.dyngrdMedication().getRows().remove(form.dyngrdMedication().getSelectedRow());

				// Update the 'Last Updating Pharmacist' field
				// - will only be updated if the current user is a HCP
				updateLastUpdatingPharmacist();
				
				updateContextMenuStatus();
			}		
			break;
			case GenForm.ContextMenus.ClinicalNamespace.EDischargeMedsSthkMenu.View:
			{				
				form.getGlobalContext().Clinical.setEDischargeMeds(form.getLocalContext().getEditedMedicalRecord());
				engine.open(form.getForms().Clinical.EDischargeMedsSthkDialog, new Object[]{EDischargeMedsContextMenu.EDIT, new Boolean(true), FormMode.VIEW});
			}
			break;
		}
	}
	@Override
	protected void onBtnSuspendedClick() throws PresentationLogicException 
	{
		if (form.btnSuspended().getText().equals(SUSPENDED))
		{
			engine.open(form.getForms().Clinical.EDischargePharmacyApprovalSuspendedDialog);			
		}
		else if (form.btnSuspended().getText().equals(UNSUSPENDED))       //wdev-13848
		{
			// Update the 'Last Updating Pharmacist' field
			// - will only be updated if the current user is a HCP
			updateLastUpdatingPharmacist();
			
			TTAMedicationAndPharmacyVo currentRecord = form.getLocalContext().getEditedRecord();		
			TTAStatusVoCollection statusHistory = currentRecord.getTTAStatusHistory().sort(SortOrder.DESCENDING);
			TTAStatusVo newStatus = null;
			for (int i = 0; i < statusHistory.size(); i++) 
			{
				if (statusHistory.get(i).equals(currentRecord.getCurrentTTAStatus()))
					continue;
				else
				{
					newStatus = statusHistory.get(i); 
					
					updateStatus(newStatus.getStatus());										
					if (save())
					{											
						form.getLocalContext().setMedicationStatusToBeSet(EDischargeComponentStatus.EDITABLE);
						form.btnSuspended().setText(SUSPENDED);
						manageStatus(form.getLocalContext().getEditedRecord());
					}

					break;
				}						
			}		
		}
	}

	/**
	 * Function used to update the 'Last updating pharmacist' on screen field
	 * Will only update the control if the current user is an HCP
	 */
	private void updateLastUpdatingPharmacist()
	{
		if (domain.getHcpLiteUser() != null)
		{
			form.ccResponsablePharmacist().setValue((IMos) domain.getHcpLiteUser());
		}
	}
	
	private boolean canApprove()
	{
		return engine.hasRight(AppRight.PHARMACY_CAN_APPROVE);			
	}
	private boolean canSuspend()
	{
		return engine.hasRight(AppRight.PHARMACY_CAN_SUSPENDED);			
	}
	private boolean canReject()
	{
		return engine.hasRight(AppRight.PHARMACY_CAN_REJECT);			
	}
	private boolean canPrintRequest()
	{
		return engine.hasRight(AppRight.PHARMACY_CAN_PRINT_REQUEST);			
	}
	private boolean canEnterPharmacy()
	{
		return engine.hasRight(AppRight.PHARMACY_CAN_ENTER_PHARMACY_SYSTEM_DETAILS);			
	}
	private boolean canDispensedTTA()
	{
		return engine.hasRight(AppRight.PHARMACY_CAN_DISPENSED_TTA);			
	}
	private boolean canFinalCheck()
	{
		return engine.hasRight(AppRight.PHARMACY_CAN_DO_FINAL_CHECKS);			
	}
	
	private void manageButtons(TTAStatus status) 
	{	
		
		
		
		if (status != null)
		{
			if (status.equals(TTAStatus.SUSPENDED))
			{
				form.btnApprove().setEnabled(false);
				form.btnSuspended().setEnabled(false);
				form.btnPrintRequest().setEnabled(false);
				form.btnJAC().setEnabled(false);
				form.btnTTADispensed().setEnabled(false);
				form.btnFinalChecks().setEnabled(false);
			}
			else if (status.equals(TTAStatus.APPROVED))
			{
				form.btnApprove().setEnabled(true);
				form.btnSuspended().setEnabled(canSuspend());
				form.btnPrintRequest().setEnabled(true);
				form.btnJAC().setEnabled(true);
				form.btnTTADispensed().setEnabled(true);
				form.btnFinalChecks().setEnabled(false);
			}
			else
			{
				form.btnApprove().setEnabled(true);
				form.btnSuspended().setEnabled(canSuspend());
				form.btnPrintRequest().setEnabled(true);
				form.btnJAC().setEnabled(true);
				form.btnTTADispensed().setEnabled(true);
				form.btnFinalChecks().setEnabled(true);
			}
		}
	}

	@Override
	protected void onBtnStatusHistoryClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Clinical.EDischargeTTAStatusHistoryDialog);
		engine.open(form.getForms().Clinical.EDischargeTTAStatusHistoryDialog, new Object[]{form.getLocalContext().getEditedRecordIsNotNull() ? form.getLocalContext().getEditedRecord().getTTAStatusHistory() : null});
	}
	
	private void updateButtonsStatus(boolean recordExist)
	{
		form.btnEdit().setVisible(recordExist);
	}
	
	private void updateContextMenuStatus()
	{
		boolean isEditMode = form.getMode().equals(FormMode.EDIT ) ? true : false;
		boolean isHcp = form.getLocalContext().getIsHcpIsNotNull() && form.getLocalContext().getIsHcp();//	WDEV-13479
		
		form.getContextMenus().Clinical.getEDischargeMedsSthkMenuNewItem().setVisible(isEditMode && isHcp);//	WDEV-13479
		form.getContextMenus().Clinical.getEDischargeMedsSthkMenuEditItem().setVisible(isEditMode && (form.dyngrdMedication().getSelectedRow() != null ? true : false) && isHcp);//	WDEV-13479
		form.getContextMenus().Clinical.getEDischargeMedsSthkMenuRemoveItem().setVisible(isEditMode && (form.dyngrdMedication().getSelectedRow() != null ? true : false) && isHcp);//	WDEV-13479
		form.getContextMenus().Clinical.getEDischargeMedsSthkMenuViewItem().setVisible(!isEditMode && form.dyngrdMedication().getSelectedRow() != null ? true : false);
	}
	
	private void setViewMode()
	{
		form.setMode(FormMode.VIEW);
	}
	
	private void setEditMode()
	{
		form.setMode(FormMode.EDIT);
	}
	
	private void clearScreen() 
	{			
		form.decBodyWeight().setValue(null);
		form.ccOrderingClin().setValue(null);
		form.dtim1().setValue(null);
		form.txt1().setValue(null);
		form.txt2().setValue(null);
		form.txtRejectionReason().setValue(null);
		form.txtClinicalCommentsToPharmacy().setValue(null);
		form.dyngrdMedication().getRows().clear();
	}	
	
	private void open()
	{
		setViewMode();
		clearScreen();		
		
		TTAMedicationAndPharmacyVo currentRecord = domain.getTTAMedicationAndPharmacy(form.getGlobalContext().Core.getCurrentCareContext());
		form.getLocalContext().setEditedRecord(currentRecord);
		populateScreenFromData(currentRecord);
		
		updateButtonsStatus(currentRecord != null ?  true : false);
		updateContextMenuStatus();
		manageStatus(currentRecord);
	}
	
	private void clearLocalContexts() 
	{
		form.getLocalContext().setCurrentStatus(null);
		form.getLocalContext().setEditedMedicalRecord(null);
		form.getLocalContext().setEditedRecord(null);
		form.getLocalContext().setMedicationStatusToBeSet(null);
	}

	private void clearGlobalContexts() 
	{		
		form.getGlobalContext().Clinical.setEDischargeMeds(null);
		form.getGlobalContext().Clinical.seteDischargePharmacyApprovalRejectReason(null);
		form.getGlobalContext().Clinical.seteDischargePharmacyApprovalSuspendedReason(null);
	}

	private void manageStatus(TTAMedicationAndPharmacyVo currentRecord) 
	{		
		if (currentRecord != null && currentRecord.getCurrentTTAStatusIsNotNull())
		{
			 TTAStatus currentStatus = currentRecord.getCurrentTTAStatus().getStatus();
			 if (currentStatus.equals(TTAStatus.DRAFT))
			 {
				form.btnApprove().setEnabled(false);
				form.btnSuspended().setEnabled(false);
				form.btnPrintRequest().setEnabled(false);
				form.btnReject().setEnabled(false);
				form.btnJAC().setEnabled(false);
				form.btnTTADispensed().setEnabled(false);
				form.btnFinalChecks().setEnabled(false);
				
				form.btnEdit().setVisible(false);
			 }
			 else if (currentStatus.equals(TTAStatus.SUSPENDED))
			 {
				form.btnSuspended().setText(UNSUSPENDED);     //wdev-13848
				
				form.btnApprove().setEnabled(false);
				form.btnSuspended().setEnabled(true && canSuspend());
				form.btnPrintRequest().setEnabled(false);
				form.btnReject().setEnabled(false);
				form.btnJAC().setEnabled(false);
				form.btnTTADispensed().setEnabled(false);
				form.btnFinalChecks().setEnabled(false);
				
				form.btnEdit().setVisible(false);
			 }
			 else if (currentStatus.equals(TTAStatus.REJECTED))
			 {
				form.btnApprove().setEnabled(false);
				form.btnSuspended().setEnabled(false);				
				form.btnPrintRequest().setEnabled(false);
				form.btnReject().setEnabled(false);
				form.btnJAC().setEnabled(false);
				form.btnTTADispensed().setEnabled(false);
				form.btnFinalChecks().setEnabled(false);
				
				form.btnEdit().setVisible(false);
			 }
			 else if (currentStatus.equals(TTAStatus.APPROVED))
			 {
				form.btnApprove().setText(UNAPPROVE);
				
				if( form.btnSuspended().getText() != null && form.btnSuspended().getText().equals(UNSUSPENDED))   	//wdev-13848
					form.btnSuspended().setText(SUSPENDED);														//wdev-13848
				
				form.btnApprove().setEnabled(true && canApprove());
				form.btnSuspended().setEnabled(true && canSuspend());				
				form.btnPrintRequest().setEnabled(true && canPrintRequest());
				form.btnReject().setEnabled(false);
				form.btnJAC().setEnabled(true && canEnterPharmacy());
				form.btnTTADispensed().setEnabled(true && canDispensedTTA());
				form.btnFinalChecks().setEnabled(false);
				
				form.btnEdit().setVisible(false);
			 }
			 else if (currentStatus.equals(TTAStatus.SUBMITTED))
			 {				 
				 if( form.btnApprove().getText() != null && form.btnApprove().getText().equals(UNAPPROVE))  	//wdev-13848
					 form.btnApprove().setText(APPROVE); 														//wdev-13848
				 
				form.btnApprove().setEnabled(true && canApprove());
				form.btnSuspended().setEnabled(true && canSuspend());
				form.btnReject().setEnabled(true && canReject());
				form.btnPrintRequest().setEnabled(false);
				form.btnJAC().setEnabled(false);
				form.btnTTADispensed().setEnabled(false);
				form.btnFinalChecks().setEnabled(false);
			 }
			 else if (currentStatus.equals(TTAStatus.RESUBMITTED))
			 {
				 if( form.btnApprove().getText() != null && form.btnApprove().getText().equals(UNAPPROVE))   //wdev-13848
					 form.btnApprove().setText(APPROVE);														//wdev-13848	 
				 
				 
				form.btnApprove().setEnabled(true && canApprove());
				form.btnSuspended().setEnabled(true && canSuspend());
				form.btnReject().setEnabled(true && canReject());
				form.btnPrintRequest().setEnabled(false);
				form.btnJAC().setEnabled(false);
				form.btnTTADispensed().setEnabled(false);
				form.btnFinalChecks().setEnabled(false);
			 }
			 else if (currentStatus.equals(TTAStatus.TTA_DOCKET_PRINTED))
			 {
				form.btnApprove().setText(UNAPPROVE); 
				form.btnApprove().setEnabled(true && canApprove());
				form.btnSuspended().setEnabled(true && canSuspend());
				form.btnReject().setEnabled(false);
				form.btnPrintRequest().setEnabled(false);
				form.btnJAC().setEnabled(true && canEnterPharmacy());
				form.btnTTADispensed().setEnabled(true && canDispensedTTA());
				form.btnFinalChecks().setEnabled(true && canFinalCheck());
				
				form.btnEdit().setVisible(false);//WDEV-12699
			 }
			 else if (currentStatus.equals(TTAStatus.AWAITING_DISPENSING))
			 {
				form.btnApprove().setText(UNAPPROVE);
				
				if( form.btnSuspended().getText() != null && form.btnSuspended().getText().equals(UNSUSPENDED))   	//wdev-13848
					form.btnSuspended().setText(SUSPENDED);														//wdev-13848
				
				form.btnApprove().setEnabled(true && canApprove());
				form.btnSuspended().setEnabled(true && canSuspend());
				form.btnReject().setEnabled(false);
				form.btnPrintRequest().setEnabled(false);
				form.btnJAC().setEnabled(false);
				form.btnTTADispensed().setEnabled(true && canDispensedTTA());
				form.btnFinalChecks().setEnabled(true && canFinalCheck());
				
				form.btnEdit().setVisible(false);//WDEV-12699
			 }
			 else if (currentStatus.equals(TTAStatus.AWAITING_FINAL_CHECKS))
			 {
				form.btnApprove().setText(UNAPPROVE); 
				form.btnApprove().setEnabled(true && canApprove());
				form.btnSuspended().setEnabled(true && canSuspend());
				form.btnReject().setEnabled(false);
				form.btnPrintRequest().setEnabled(false);
				form.btnJAC().setEnabled(false);
				form.btnTTADispensed().setEnabled(false);
				form.btnFinalChecks().setEnabled(true && canFinalCheck());
				
				form.btnEdit().setVisible(false);//WDEV-12699
			 }			
			 else if (currentStatus.equals(TTAStatus.COMPLETED))
			 {
				form.btnApprove().setText(UNAPPROVE);
				form.btnApprove().setEnabled(false);
				form.btnSuspended().setEnabled(false);
				form.btnReject().setEnabled(false);
				form.btnPrintRequest().setEnabled(false);
				form.btnJAC().setEnabled(false);
				form.btnTTADispensed().setEnabled(false);
				form.btnFinalChecks().setEnabled(false);
				
				form.btnEdit().setVisible(false);
			 }
		}
	}

	private TTAMedicationAndPharmacyVo populateDataFromScreen(TTAMedicationAndPharmacyVo record)
	{
		if (record == null)
			record = new TTAMedicationAndPharmacyVo();
		
		record.setBodyWeightKg(form.decBodyWeight().getValue());
		record.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		record.setClinicalCommentsToPharmacy(form.txtClinicalCommentsToPharmacy().getValue());
		record.setClinicianBleepNo(form.txt2().getValue());
		
		record.setResponsiblePharmacist(form.ccResponsablePharmacist().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccResponsablePharmacist().getValue() : null);//WDEV-13734
				
		IMos iHcp = form.ccOrderingClin().getValue();
		if (iHcp != null)
		{
			HcpLiteVo hcp = domain.getHcp((HcpRefVo) iHcp);
			record.setOrderingClinician(hcp);
		}
		
		record.setOrderingDateTime(form.dtim1().getValue());
		record.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		TTAMedicationDetailVoCollection medColl = record.getTTAMedications();
		if (medColl == null) {
			medColl = new TTAMedicationDetailVoCollection();
		}
		else {
			medColl.clear();
		}
		
		for (int i = 0; i < form.dyngrdMedication().getRows().size(); i++) 
		{
			TTAMedicationDetailVo medication = (TTAMedicationDetailVo) form.dyngrdMedication().getRows().get(i).getValue();
			
			//start WDEV-15023
			if (medication.getMedicationIsNotNull())
			{
				Integer idMedication = medication.getMedication().getID_Medication();
				
				if (idMedication != null && idMedication.intValue() < 0)
				{
					medication.setMedication(null);
				}
			}
			// end
			
			medColl.add(medication);
		}		
		
		record.setTTAMedications(medColl);
		record.setTTAStatusHistory(setTTAStatusHistory(record));		
		record.setCurrentTTAStatus(form.getLocalContext().getCurrentStatus());
		
		//form.getLocalContext().setEditedRecord(record); // Why?
		
		return record;
	}

	private TTAStatusVoCollection setTTAStatusHistory (TTAMedicationAndPharmacyVo record) 
	{
		TTAStatusVoCollection statusHistory = record.getTTAStatusHistory();
		if(statusHistory == null) {
			statusHistory = new TTAStatusVoCollection();
		}
							
		if (form.getLocalContext().getCurrentStatusIsNotNull())
		{
			if (Boolean.FALSE.equals(statusHistory.contains(form.getLocalContext().getCurrentStatus())))
				statusHistory.add(form.getLocalContext().getCurrentStatus());									
		}	
		
		return statusHistory;
	}
	
	private void populateScreenFromData(TTAMedicationAndPharmacyVo currentRecord) 
	{	
		if (currentRecord == null)
			return;
		
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			form.dteEDD().setValue(form.getGlobalContext().Core.getCurrentCareContext().getEstimatedDischargeDate());
		
		form.ccResponsablePharmacist().setValue(currentRecord.getResponsiblePharmacist());	//WDEV-13479
		
		form.decBodyWeight().setValue(currentRecord.getBodyWeightKg());
		form.txtClinicalCommentsToPharmacy().setValue(currentRecord.getClinicalCommentsToPharmacy());
		form.ccOrderingClin().setValue(currentRecord.getOrderingClinician());
		form.dtim1().setValue(currentRecord.getOrderingDateTime());
		form.txt2().setValue(currentRecord.getClinicianBleepNo());
		//TTA Status
		if (currentRecord.getCurrentTTAStatusIsNotNull())
		{
			TTAStatusVo currentStatus = currentRecord.getCurrentTTAStatus();
			form.getLocalContext().setCurrentStatus(currentStatus);
			
			form.txt1().setValue(currentStatus.getStatus().toString());
			form.txtRejectionReason().setValue(currentStatus.getReasonForRejection());
		}
		
		if (currentRecord.getTTAMedicationsIsNotNull() && currentRecord.getTTAMedications().size() > 0)
		{
			currentRecord.getTTAMedications().sort(SortOrder.DESCENDING);
			for (int i = 0; i < currentRecord.getTTAMedications().size(); i++) 
			{
				addDynamicGridMedicationRow(currentRecord.getTTAMedications().get(i));
			}
		}
	}
	
	private DynamicGridColumn getCol(String identifier) 
	{
		return form.dyngrdMedication().getColumns().getByIdentifier(identifier);
	}	
	private void addDynamicGridMedicationRow(TTAMedicationDetailVo record) 
	{
		DynamicGridRow row = form.dyngrdMedication().getRows().newRow();		
				
		DynamicGridColumn col = getCol(MEDICATION);
		if(col == null) 
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell medicationCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		medicationCell.setValue(record.getOtherMedicationTextIsNotNull() ? record.getOtherMedicationText() : null); //WDEV-14407
		medicationCell.setTooltip(record.getOtherMedicationTextIsNotNull() ? record.getOtherMedicationText() : null); 
		//medicationCell.setValue(record.getMedicationIsNotNull() ? record.getMedication().getMedicationName() : null); 
		//medicationCell.setTooltip(record.getMedicationIsNotNull() ? record.getMedication().getMedicationName() : null); 
		
		if (record.getMedicationIsNotNull() && record.getMedication().getIsControlledDrugIsNotNull() && record.getMedication().getIsControlledDrug())
			row.setBackColor(ConfigFlag.UI.CONTROLLED_DRUG_COLOR.getValue());		
		
		col = getCol(DOSE);
		if(col == null) 
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell doseCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		doseCell.setValue(record.getDoseValueIsNotNull() ? formatDose(record.getDoseValue().toString()) + (record.getDoseUnitIsNotNull()?" "+record.getDoseUnit().getText() : (record.getUnitTextIsNotNull()?" "+record.getUnitText():"")):null);
		doseCell.setTooltip(record.getDoseValueIsNotNull() ? formatDose(record.getDoseValue().toString()) + (record.getDoseUnitIsNotNull()?" "+record.getDoseUnit().getText() : (record.getUnitTextIsNotNull()?" "+record.getUnitText():"")):null); //WDEV-13052
		
		col = getCol(ROUTE);
		if(col == null) 
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell routeCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		routeCell.setValue(record.getRouteIsNotNull() ? record.getRoute().getText() : null);
		routeCell.setTooltip(record.getRouteIsNotNull() ? record.getRoute().getText() : null);
		
		col = getCol(FREQUENCY);
		if(col == null) 
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell frequencyCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		frequencyCell.setValue(record.getFrequencyUnitIsNotNull()  ? record.getFrequencyUnit().getText() : null);//WDEV-12223
		frequencyCell.setTooltip(record.getFrequencyUnitIsNotNull()  ? record.getFrequencyUnit().getText() : null);//WDEV-12223
		
		col = getCol(FORMM);
		if(col == null) 
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell formCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		formCell.setValue(record.getFormIsNotNull() ? record.getForm().getText() : null);
		formCell.setTooltip(record.getFormIsNotNull() ? record.getForm().getText() : null);
		
		col = getCol(COMM_DATE);
		if(col == null) 
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell commDateCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		commDateCell.setValue(record.getCommencedDateIsNotNull() ? record.getCommencedDate().toString() : null);
		commDateCell.setTooltip(record.getCommencedDateIsNotNull() ? record.getCommencedDate().toString() : null);

		col = getCol(COMMENTS);
		if(col == null) 
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell commentsCell = row.getCells().newCell(col, DynamicCellType.IMAGE);
		commentsCell.setValue(record.getClinicalCommentsForPharmacyIsNotNull() ? form.getImages().OCRR.Investigation : null);
		commentsCell.setTooltip(record.getClinicalCommentsForPharmacyIsNotNull() ? record.getClinicalCommentsForPharmacy() : null);
		
		col = getCol(INSTRUCTION);
		if(col == null) 
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell instructionsCell = row.getCells().newCell(col, DynamicCellType.IMAGE);
		instructionsCell.setValue(record.getMedicationInstructionsForPatientIsNotNull() ? form.getImages().OCRR.UpdatedResult : null);
		instructionsCell.setTooltip(record.getMedicationInstructionsForPatientIsNotNull() ? record.getMedicationInstructionsForPatient() : null);

		col = getCol(TICK_BOX);
		if(col == null) 
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell tickboxCell = row.getCells().newCell(col, DynamicCellType.BOOL);	
		tickboxCell.setValue(false);
		
		row.setValue(record);
	}
	
	//WDEV-13052 if only zeros after decimal point display integer
	private String formatDose(String dose) {
		
		boolean bDecimal = false;
				
		for(int j=dose.length()-1; j>0; j--)
		{
			
			if(Character.getNumericValue(dose.charAt(j))!=0 && Character.isDigit(dose.charAt(j)))
				bDecimal = true;
			if(!Character.isDigit(dose.charAt(j)))
				break;				
		}
		
		if(!bDecimal){
			Integer i;
			Float fDose = new Float(dose);
			i=fDose.intValue();				
			dose = i.toString();	
		}
		return dose;
	}
	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{		
		if (formName.equals(form.getForms().Clinical.EDischargeMedsSthkDialog))
		{			
			if (result.equals(DialogResult.OK))
			{
				if (FormMode.EDIT.equals(form.getMode()))
				{
					// Update the 'Last Updating Pharmacist' field
					// - will only be updated if the current user is a HCP
					updateLastUpdatingPharmacist();
				}
				
				TTAMedicationDetailVo record = form.getGlobalContext().Clinical.getEDischargeMeds();
				if (record == null) {
					return;
				}
				
				//WDEV-11472 form.getLocalContext().setEditedMedicalRecord(record);				
				
				TTAMedicationAndPharmacyVo 	currentRecord = form.getLocalContext().getEditedRecord();
				if (currentRecord == null)
					currentRecord = new TTAMedicationAndPharmacyVo();
				
				TTAMedicationDetailVoCollection medColl = currentRecord.getTTAMedications();
				
				if (medColl == null) {										
					medColl = new TTAMedicationDetailVoCollection();
				}
				
				if (medColl.contains(record)) {
					medColl.set(medColl.indexOf(record), record);
				}
				else {
					medColl.add(record);
				}
					
				medColl.sort(SortOrder.DESCENDING);
				form.dyngrdMedication().getRows().clear();
				for (int i = 0; i < medColl.size(); i++) 
				{
					addDynamicGridMedicationRow(medColl.get(i));
				}
				form.dyngrdMedication().setValue(record);//WDEV-11472
				
				form.getLocalContext().setEditedMedicalRecord(record);//WDEV-11472
				currentRecord.setTTAMedications(medColl);
				form.getLocalContext().setEditedRecord(currentRecord);		
				updateContextMenuStatus();
			}
		}
		else if (formName.equals(form.getForms().Clinical.EDischargePharmacyApprovalRejectDialog))
		{	
			if (result.equals(DialogResult.OK))
			{
				// Update the 'Last Updating Pharmacist' field
				// - will only be updated if the current user is a HCP
				updateLastUpdatingPharmacist();
				
				form.txtRejectionReason().setValue(form.getGlobalContext().Clinical.geteDischargePharmacyApprovalRejectReason());			
				updateStatus(TTAStatus.REJECTED);						
				if (save())
				{
					form.btnEdit().setVisible(false);					
					form.getLocalContext().setMedicationStatusToBeSet(EDischargeComponentStatus.EDITABLE);
				}
				
				setViewMode();
				manageStatus(form.getLocalContext().getEditedRecord());				
			}
		}
		else if (formName.equals(form.getForms().Clinical.EDischargePharmacyApprovalSuspendedDialog))
		{	
			if (result.equals(DialogResult.OK))
			{							
				// Update the 'Last Updating Pharmacist' field
				// - will only be updated if the current user is a HCP
				updateLastUpdatingPharmacist();
				
				updateStatus(TTAStatus.SUSPENDED);			

				if (save())
				{
					form.btnSuspended().setText(UNSUSPENDED);
					form.btnEdit().setVisible(false);					
					form.getLocalContext().setMedicationStatusToBeSet(EDischargeComponentStatus.EDITABLE);					

					manageButtons(TTAStatus.SUSPENDED);
				}
				
				setViewMode();
				manageStatus(form.getLocalContext().getEditedRecord());
			}			
		}
		else if (formName.equals(form.getForms().Clinical.TTAPrintDialog))
		{	
			if (result.equals(DialogResult.OK))
			{							
				form.getLocalContext().setCurrentStatus(form.getGlobalContext().Clinical.geteDischargePharmacyApprovalTTADockedPrinted());				
				if (save())
				{
					form.btnEdit().setVisible(false);										
				}
			}
			setViewMode();
			manageStatus(form.getLocalContext().getEditedRecord());
			
			form.getGlobalContext().Clinical.seteDischargePharmacyApprovalTTADockedPrinted(null);
		}
		else if (formName.equals(form.getForms().Clinical.TTADispenseDialog))
		{	
			if (result.equals(DialogResult.OK))
			{							
				form.getLocalContext().setCurrentStatus(form.getGlobalContext().Clinical.geteDischargePharmacyApprovalTTADispense());				
				if (save())
				{
					form.btnEdit().setVisible(false);										
				}
			}
			setViewMode();
			manageStatus(form.getLocalContext().getEditedRecord());
		}
		else if (formName.equals(form.getForms().Clinical.JACDialog))
		{	
			if (result.equals(DialogResult.OK))
			{							
				form.getLocalContext().setCurrentStatus(form.getGlobalContext().Clinical.geteDischargePharmacyApprovalTTAPharmacySystemDetails());				
				if (save())
				{
					form.btnEdit().setVisible(false);										
				}
			}
			setViewMode();
			manageStatus(form.getLocalContext().getEditedRecord());
			
			form.getGlobalContext().Clinical.seteDischargePharmacyApprovalTTAPharmacySystemDetails(null);
		}
	}	

	private void initializeDynamicGridMedication()
	{
		form.dyngrdMedication().clear();
		form.dyngrdMedication().setSelectable(true);		
		
		DynamicGridColumn collMedication = form.dyngrdMedication().getColumns().newColumn("Medication Name", true);
		collMedication.setWidth(190);	
		//collMedication.setSortMode(SortMode.AUTOMATIC);	WDEV-13098
		collMedication.setReadOnly(true);
		collMedication.setIdentifier(new String(MEDICATION));

		DynamicGridColumn collForm = form.dyngrdMedication().getColumns().newColumn("Form", true);
		collForm.setWidth(120);		
		collForm.setReadOnly(true);
		collForm.setIdentifier(new String(FORMM));	
		
		DynamicGridColumn collRoute = form.dyngrdMedication().getColumns().newColumn("Route", true);
		collRoute.setWidth(100);	
		collRoute.setReadOnly(true);
		collRoute.setIdentifier(new String(ROUTE));
		
		DynamicGridColumn collDose = form.dyngrdMedication().getColumns().newColumn("Dose", true);
		collDose.setWidth(130);	
		collDose.setReadOnly(true);
		collDose.setIdentifier(new String(DOSE));
		
		
		DynamicGridColumn collFrequency = form.dyngrdMedication().getColumns().newColumn("Frequency", true);
		collFrequency.setWidth(100);
		collFrequency.setReadOnly(true);
		collFrequency.setIdentifier(new String(FREQUENCY));
		
			
			
		DynamicGridColumn collCommDate = form.dyngrdMedication().getColumns().newColumn("Comm Date", true);
		collCommDate.setWidth(70);
		collCommDate.setReadOnly(true);
		collCommDate.setIdentifier(new String(COMM_DATE));		
		
		DynamicGridColumn collComments = form.dyngrdMedication().getColumns().newColumn("", true);
		collComments.setWidth(24);	
		collComments.setReadOnly(true);
		collComments.setIdentifier(new String(COMMENTS));
		
		DynamicGridColumn collInstructions = form.dyngrdMedication().getColumns().newColumn("", true);
		collInstructions.setWidth(24);	
		collInstructions.setReadOnly(true);
		collInstructions.setIdentifier(new String(INSTRUCTION));
		
		DynamicGridColumn collTickBox = form.dyngrdMedication().getColumns().newColumn("", true);
		collTickBox.setWidth(-1);	
		collTickBox.setReadOnly(false);		
		collTickBox.setIdentifier(new String(TICK_BOX));
	}
	
	public void initialize() 
	{
		Object hcp = domain.getHcpLiteUser();//	WDEV-13479
		form.getLocalContext().setIsHcp(hcp instanceof HcpLiteVo);//	WDEV-13479
		
		form.ccOrderingClin().initialize(MosType.HCP);
		form.ccResponsablePharmacist().initialize(MosType.HCP);
		initializeDynamicGridMedication();
		
		clearGlobalContexts();
		clearLocalContexts();
		
		open();		
	}

	public EDischargeComponentStatus getStatus() {
		// TODO Auto-generated method stub
		return null;
	}

	public void setReadOnly() 
	{	
		form.btnApprove().setEnabled(false);
		form.btnSuspended().setEnabled(false);
		form.btnReject().setEnabled(false);
		form.btnPrintRequest().setEnabled(false);
		form.btnJAC().setEnabled(false);
		form.btnTTADispensed().setEnabled(false);
		form.btnFinalChecks().setEnabled(false);
				
		form.btnEdit().setEnabled(false);
	}

	public EDischargeLastEvent getLastEvent()
	{
		return form.getLocalContext().getLastEvent();
	}

	public void clearLastEvent()
	{
		form.getLocalContext().setLastEvent(null);
	}
	
	public EDischargeComponentStatus getMedicationStatusToBeSet() 
	{
		return form.getLocalContext().getMedicationStatusToBeSet();
	}

	@Override
	protected void onFormModeChanged() 
	{	
		if (form.getMode().equals(FormMode.VIEW))
		{
			manageStatus(form.getLocalContext().getEditedRecord());
		}
	}

	@Override
	protected void onBtnFinalChecksClick() throws PresentationLogicException 
	{					
		updateStatus(TTAStatus.COMPLETED);				
		if (save())
		{
			form.btnEdit().setVisible(false);					
		
		}
		
		setViewMode();
		manageStatus(form.getLocalContext().getEditedRecord());
	}

	public void initialize(EDischargeSTHKSummaryVo summary) 
	{	
		form.getLocalContext().setSummary(summary);
		initialize();
	}

	@Override
	protected void onDyngrdMedicationRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{	
		form.getLocalContext().setEditedMedicalRecord((TTAMedicationDetailVo) row.getValue());
		updateContextMenuStatus();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getPharmApproveConfirmMsgBoxIdIsNotNull() 
				&& form.getLocalContext().getPharmApproveConfirmMsgBoxId().intValue() == messageBoxId 
				&& DialogResult.YES.equals(result))
		{
			doApprove();
		}
		
	}

	private void doApprove()
	{
		updateStatus(TTAStatus.APPROVED);			
		if (save())
		{
			form.btnEdit().setVisible(false);
			manageButtons(TTAStatus.APPROVED);
			form.btnApprove().setText(UNAPPROVE);
		}
		
	}	
}
