//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.71 build 3939.14042)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.edischargeclinicalinfosthkcomponent;

import java.util.ArrayList;
import java.util.Comparator;

import ims.clinical.forms.edischargeclinicalinfosthkcomponent.GenForm.grdAlertsRow;
import ims.clinical.forms.edischargeclinicalinfosthkcomponent.GenForm.grdOtherResultsRow;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.enums.EDischargeLastEvent;
import ims.clinical.vo.lookups.EDischargeSummarySection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.DischargeClinicalInformationSTHKVo;
import ims.core.vo.PatientAlertCollection;
import ims.core.vo.PatientAlertLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.edischarge.vo.SummaryRefVo;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.ocrr.vo.OrderInvestigationBookingVo;
import ims.ocrr.vo.OrderInvestigationBookingVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
		if(domain.hasDiagnosis(form.getGlobalContext().Core.getEpisodeofCareShort()))
			form.chkNoDiagnosis().setEnabled(false);
		else
			form.chkNoDiagnosis().setEnabled(true);
		if(domain.hasComplications(form.getGlobalContext().Core.getEpisodeofCareShort()))
			form.chkNoComplications().setEnabled(false);
		else
			form.chkNoComplications().setEnabled(true);
		if(domain.hasComorbidity(form.getGlobalContext().Core.getEpisodeofCareShort()))
			form.chkNoCoMorbidity().setEnabled(false);
		else
			form.chkNoCoMorbidity().setEnabled(true);
		
		setSchoolControls();
		DischargeClinicalInformationSTHKVo voClinInfo = form.getLocalContext().getSelectedRecord();
		populatePatientAlerts(voClinInfo==null);
		makeAlertsSelectionsAndAddInactivatedItems();
		//listAllResultsForTimePeriod(voClinInfo==null);	WDEV-13262
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
	}
	
	private void makeAlertsSelectionsAndAddInactivatedItems() {
		if(form.getLocalContext().getSelectedRecordIsNotNull()){
			PatientAlertLiteVoCollection coll = form.getLocalContext().getSelectedRecord().getPatientAlerts();
			for(int i = 0 ; coll!=null && i < coll.size() ; i++)
			{
				boolean bFound = false;
				for(int j = 0 ; j < form.grdAlerts().getRows().size() ; j++)
				{
					grdAlertsRow row = form.grdAlerts().getRows().get(j);
					if(coll.get(i).equals(row.getValue())){
						row.setColInclude(Boolean.TRUE);
						bFound = true;
					}
				}
				if(!bFound){
					grdAlertsRow row = form.grdAlerts().getRows().newRow();
					row.setColAlert(coll.get(i).getAlertType().getText());
					row.setColInclude(Boolean.TRUE);
					row.setValue(coll.get(i));
				}
			}
		}		
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();		

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
	}
		
	private void populatePatientAlerts(boolean bNew) {
		PatientAlertCollection voColl = domain.listPatientAlerts(form.getGlobalContext().Core.getPatientShort(), Boolean.TRUE);
		
		form.grdAlerts().getRows().clear();
		form.grdAlerts().setValue(null); //used to clear selection in grid bug					
		
		if(voColl != null)
		{			
			grdAlertsRow row = null;
			for(int i=0;i<voColl.size();i++)
			{
				row = form.grdAlerts().getRows().newRow();
				row.setColAlert(voColl.get(i).getAlertType().getText());
				if(bNew)
					row.setColInclude(true);
				row.setValue(voColl.get(i));
			}
		}		
		
	}
	private void populateDD(DischargeDetailsVo voDD)
	{
		form.getLocalContext().setCurrentDischargeDetails(voDD);

		if (voDD != null)
		{
			form.chkNoCoMorbidity().setValue(voDD.getHasNoComorbidities());
			form.chkNoComplications().setValue(voDD.getHasNoComplications());
			form.chkNoDiagnosis().setValue(voDD.getHasNoDiagnosis());
		}
	}
	
	public boolean save() throws PresentationLogicException 
	{
		ArrayList<String> screenErrors = new ArrayList<String>();
		
		if (form.txtSummaryofInpatientEpisode().getValue() == null)
			screenErrors.add("Summary of Inpatient Episode is a mandatory item.");
		if (form.txtRelevantTreatmentsETC().getValue() == null)
			screenErrors.add("Relevant Treatments and Changes Made to Treatments is a mandatory item.");
		
		DischargeClinicalInformationSTHKVo voClinInfo = populateDataFromScreen();
		
		boolean hasDiagnosis = domain.hasDiagnosis(form.getGlobalContext().Core.getEpisodeofCareShort());
		boolean diagnosisCompleted = diagnosisCompleted(hasDiagnosis);
		if(voClinInfo.getIsCompleteIsNotNull() && voClinInfo.getIsComplete() && !diagnosisCompleted)
			screenErrors.add("Diagnosis must be completed before marking Clinical Info as completed.");
					
		String[] arrErrors = voClinInfo.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, arrErrors);
		
		
		if (arrScreenAndVoErrors.length == 0)
		{
			//WDEV-11817 - Start
			
			if (voClinInfo.getIsCompleteIsNotNull() && voClinInfo.getIsComplete() && !domain.isSectionComplete(form.getLocalContext().getSTHKSummary(), EDischargeSummarySection.DIAGNOSIS) && !hasComplicationsComorbidityInfo() && !isDiagnosisConfirmed())
			{
				form.getLocalContext().setDiagnosisConfirmMsgBoxId(engine.showMessage("Please confirm that diagnosis is complete", "Confirmation", MessageButtons.YESNO, MessageIcon.QUESTION));
				return false;
			}	
			//WDEV-11817 - End
			
			try
			{
				voClinInfo = domain.saveClinicalInfo(voClinInfo, form.getLocalContext().getSTHKSummary());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

				form.setMode(FormMode.VIEW);
				open();
				
				form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
				
				form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
				form.fireCustomControlValueChanged();
			
				return false;
			}
		}
		else
		{
			engine.showErrors("Error", arrScreenAndVoErrors);
			return false;
		}
		
		saveDiagnosisDetails(); //WDEV-12847
		
		form.setMode(FormMode.VIEW);			
		form.getLocalContext().setSelectedRecord(voClinInfo);
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
		form.fireCustomControlValueChanged();
	
		return true;
	}
	
	private String[] addScreenErrorsToVOErrors(ArrayList screenErrors, String[] arrErrors)
	{
		String[] arrAllErrors = null;

		if (arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);

			int i = 0;
			for (int p = screenErrors.size(); p < arrAllErrors.length; p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}
		else
		{
			arrAllErrors = new String[screenErrors.size()];

			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);
		}

		return arrAllErrors;
	}
	
	private boolean saveDiagnosisDetails()
	{
		DischargeDetailsVo voDD = form.getLocalContext().getCurrentDischargeDetails();
		if (voDD == null)
		{
			throw new CodingRuntimeException("Saved is tried when edischarge has not been started");
		}
		voDD.setHasNoComorbidities(form.chkNoCoMorbidity().getValue());
		voDD.setHasNoComplications(form.chkNoComplications().getValue());
		voDD.setHasNoDiagnosis(form.chkNoDiagnosis().getValue());
		//WDEV-11414
		voDD.setIsDiagnosisComplete(form.chkComplete().getValue()); //WDEV-12847

		// Validate Vo
		String[] errors = voDD.validate();

		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			voDD = domain.saveDischargeDetails(voDD, form.getLocalContext().getSTHKSummary());
		}
		catch (StaleObjectException sox)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showErrors(new String[] { e.getMessage() });
			return false;
		}
		form.getLocalContext().setCurrentDischargeDetails(voDD);

		return true;
	}
	
	private boolean diagnosisCompleted(boolean hasDiagnosis) {

		if((!form.chkNoDiagnosis().getValue() && !hasDiagnosis))
			return false;
		if (!form.chkComplete().getValue())//WDEV-12784
		{	
			//If currently Check Complete is unticked but we previously had a Clinical Info complete, also change the status of diagnosis
			return !domain.isSectionComplete(form.getLocalContext().getSTHKSummary(), EDischargeSummarySection.CLINICALINFO);
		}
		
		//WDEV-11817if(!form.chkNoCoMorbidity().getValue() && !domain.hasComorbidity(form.getGlobalContext().Core.getEpisodeofCareShort()))
		//WDEV-11817	return false;
		//WDEV-11817if(!form.chkNoComplications().getValue() && !domain.hasComplications(form.getGlobalContext().Core.getEpisodeofCareShort()))
		//WDEV-11817	return false;
				
		return true;
	}
	private boolean hasComplicationsComorbidityInfo()//WDEV-11817
	{
		if(!form.chkNoCoMorbidity().getValue() && !domain.hasComorbidity(form.getGlobalContext().Core.getEpisodeofCareShort()))
			return false;
		if(!form.chkNoComplications().getValue() && !domain.hasComplications(form.getGlobalContext().Core.getEpisodeofCareShort()))
			return false;
		return true;
	}

	private DischargeClinicalInformationSTHKVo populateDataFromScreen() 
	{
		DischargeClinicalInformationSTHKVo voClinInfo = null;
		if (form.getLocalContext().getSelectedRecordIsNotNull())
			voClinInfo = form.getLocalContext().getSelectedRecord();
		else
			voClinInfo = new DischargeClinicalInformationSTHKVo();

		if (voClinInfo.getCareContext() == null)
			voClinInfo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voClinInfo.setReasonForAdmissionAndPresentingComplaints(form.txtReasonAdmissionPresentingComplaints().getValue());
		voClinInfo.setRelevantInfectionsRisksWarnings(form.txtRelInfections().getValue());
		voClinInfo.setSummaryOfInpatientEpisode(form.txtSummaryofInpatientEpisode().getValue());
		voClinInfo.setRelevantInvsAndResults(form.txtRelevantInvestigationResults().getValue());
		voClinInfo.setPendingResultsComments(form.txtPendingResultsComments().getValue());
		voClinInfo.setRelevantTreatments(form.txtRelevantTreatmentsETC().getValue());
		voClinInfo.setAdditionalComments(form.txtAdditionalComments().getValue());
		voClinInfo.setSchoolNursery(form.txtSchoolNursery().getValue());
		voClinInfo.setIsComplete(form.chkComplete().getValue());
		
		OrderInvestigationBookingVoCollection voColl = new OrderInvestigationBookingVoCollection();
		for (int i = 0 ; i < form.grdOtherResults().getRows().size() ; i++)
		{
			if (form.grdOtherResults().getRows().get(i).getColInclude())
				voColl.add(form.grdOtherResults().getRows().get(i).getValue());
		}
		voClinInfo.setResults(voColl);
		PatientAlertLiteVoCollection collPatientAlertLiteVo = new PatientAlertLiteVoCollection();
		for (int i = 0 ; i < form.grdAlerts().getRows().size() ; i++)
		{
			if (form.grdAlerts().getRows().get(i).getColInclude())
				collPatientAlertLiteVo.add(form.grdAlerts().getRows().get(i).getValue());
		}
		voClinInfo.setPatientAlerts(collPatientAlertLiteVo);
		
		return voClinInfo;
	}

	public void open()
	{
		DischargeDetailsVo voDD = domain.getDischargeDetails(form.getGlobalContext().Core.getCurrentCareContext());
		populateDD(voDD);
		
		DischargeClinicalInformationSTHKVo voClinInfo = domain.getClinicalInfo(form.getGlobalContext().Core.getCurrentCareContext());

		form.getLocalContext().setSelectedRecord(voClinInfo);
		populatePatientAlerts(voClinInfo==null);
		populateScreenFromData(voClinInfo);
		
		setSchoolControls();
		manageReadOnly();
	}

	private void listAllResultsForTimePeriod(boolean bNew) 
	{
		OrderInvestigationBookingVoCollection voColl = domain.listPendingResults(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext()); //WDEV-13046	domain.listInvestigationResults(form.getGlobalContext().Core.getPatientShort(), ConfigFlag.UI.EDISCHARGE_RESULTS_NUM_DAYS.getValue());
		for(int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			boolean bFound = false;
			for(int j = 0 ; j < form.grdOtherResults().getRows().size() ; j++)
			{
				if (voColl.get(i).equals(form.grdOtherResults().getRows().get(j).getValue()))
				{
					bFound = true;
					break;
				}
			}
			
			if ( ! bFound 
				&&voColl.get(i).getInvestigationIsNotNull()
				&& voColl.get(i).getInvestigation().getInvestigationIndexIsNotNull()
				&& voColl.get(i).getInvestigation().getInvestigationIndex().getNameIsNotNull())
			{
				grdOtherResultsRow row = form.grdOtherResults().getRows().newRow();
				row.setColInvestigation(voColl.get(i).getInvestigation().getInvestigationIndex().getName());
				//if(bNew)	WDEV-13046
				//	row.setColInclude(true);	WDEV-13046
				row.setValue(voColl.get(i));
			}
		}
		
	}
	private void populateScreenFromData(DischargeClinicalInformationSTHKVo voClinInfo)
	{
		clearInstanceControls();
		
		if (voClinInfo == null)
		{
			listAllResultsForTimePeriod(voClinInfo == null);	//WDEV-13262
			return;
		}
		
		form.txtReasonAdmissionPresentingComplaints().setValue(voClinInfo.getReasonForAdmissionAndPresentingComplaints());
		form.txtRelInfections().setValue(voClinInfo.getRelevantInfectionsRisksWarnings());
		form.txtSummaryofInpatientEpisode().setValue(voClinInfo.getSummaryOfInpatientEpisode());
		form.txtRelevantInvestigationResults().setValue(voClinInfo.getRelevantInvsAndResults());
		form.txtPendingResultsComments().setValue(voClinInfo.getPendingResultsComments());
		form.txtRelevantTreatmentsETC().setValue(voClinInfo.getRelevantTreatments());
		form.txtAdditionalComments().setValue(voClinInfo.getAdditionalComments());
		form.txtSchoolNursery().setValue(voClinInfo.getSchoolNursery());
		
		
		form.chkComplete().setValue(voClinInfo.getIsComplete());
		
		for(int i = 0 ; voClinInfo.getPatientAlertsIsNotNull() && i < voClinInfo.getPatientAlerts().size() ; i++)
		{
			grdAlertsRow row = form.grdAlerts().getRows().newRow();
			row.setColAlert(voClinInfo.getPatientAlerts().get(i).getAlertType().getText());
			row.setColInclude(Boolean.TRUE);
			row.setValue(voClinInfo.getPatientAlerts().get(i));
		}
		
		sortByOrderedDate(voClinInfo.getResults());	//WDEV-13046
		for(int i = 0 ; voClinInfo.getResultsIsNotNull() && i < voClinInfo.getResults().size() ; i++)
		{
			grdOtherResultsRow row = form.grdOtherResults().getRows().newRow();
			row.setColInvestigation(voClinInfo.getResults().get(i).getInvestigationIsNotNull() && voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndexIsNotNull() ? voClinInfo.getResults().get(i).getInvestigation().getInvestigationIndex().getName() : "");
			row.setColInclude(Boolean.TRUE);
			row.setValue(voClinInfo.getResults().get(i));
		}
		
		listAllResultsForTimePeriod(voClinInfo == null); //WDEV-13262
	}
	
	//WDEV-13046
	private void sortByOrderedDate(OrderInvestigationBookingVoCollection results) 
	{
		if(results == null)
			return;
		
		results.sort(new OrderedDateTime(SortOrder.DESCENDING));	
	}
	
	public void initializeComponent()
	{
		form.getLocalContext().setbInitialised(null);
		form.getLocalContext().setisReadonly(false);
	}
	
	public void clearInstanceControls()
	{
		form.txtReasonAdmissionPresentingComplaints().setValue(null);
		form.txtRelInfections().setValue(null);
		form.txtSummaryofInpatientEpisode().setValue(null);
		form.txtRelevantInvestigationResults().setValue(null);
		form.txtAdditionalComments().setValue(null);
		form.txtRelevantTreatmentsETC().setValue(null);
		form.txtAdditionalComments().setValue(null);
		form.txtSchoolNursery().setValue(null);
		
		form.grdAlerts().getRows().clear();
		form.grdAlerts().setValue(null);
		form.grdOtherResults().getRows().clear();
		form.grdOtherResults().setValue(null);
		
		form.chkComplete().setValue(null);//WDEV-12045
		form.txtPendingResultsComments().setValue(null);	//wdev-11502
		
	}
	public void initialise(SummaryRefVo summary)
	{
		form.getLocalContext().setSTHKSummary(summary);
		form.getLocalContext().setisReadonly(false);
		form.setMode(FormMode.VIEW);
		if (form.getLocalContext().getbInitialised() == null)
		{
			initializeComponent();
			form.getLocalContext().setbInitialised(Boolean.TRUE);
		}
				
		open();
	}

	private void setSchoolControls() {
		if(ageLessThanOrEqualToConfig(ConfigFlag.UI.SCHOOL_NURSERY_ON_CLINICAL_INFORMATION_IS_VISIBLE_FOR_PATIENTS_TO_AGE.getValue())){
			form.lblSchoolNursey().setVisible(true);
			form.txtSchoolNursery().setVisible(true);
			form.txtSchoolNursery().setEnabled(form.getMode().equals(FormMode.EDIT));
		}
		else{
			form.lblSchoolNursey().setVisible(false);
			form.txtSchoolNursery().setVisible(false);
		}
				
	}
	private boolean ageLessThanOrEqualToConfig(int configAge) {
		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		PatientShort voPatientShort = form.getGlobalContext().Core.getPatientShort();
		DateTime careContextDateTime = voCareContext.getStartDateTime();
		
		if(careContextDateTime!=null)
			if(calculateAgeAtCareContextDate(voPatientShort.getDob(), careContextDateTime.getDate()) <= configAge)
				return true;
		
		return false;
	}
	
	private int calculateAgeAtCareContextDate(PartialDate dob, Date dateCareContext) {
		int age = 0;
		if(dateCareContext!=null && dob!=null){
			
			Date dateOfbirth = null; 
			dateOfbirth = dob.toDate();
			//WDEV-11421 complete partial date
			if(dateOfbirth==null)
				dateOfbirth = new Date(dob.getYear(),01,01);
			
			age = dateCareContext.yearDiff(dateOfbirth);
		}
		
		return age;
	}
	public void setReadOnly() 
	{
		form.setMode(FormMode.VIEW);
		form.btnEdit().setEnabled(false);
	}

	private void manageReadOnly() 
	{
		if (form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(true);

		if (form.getLocalContext().getisReadonlyIsNotNull()
			&& form.getLocalContext().getisReadonly()
			&& form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);
	}
	public void clearLastEvent() {
		form.getLocalContext().setLastEvent(null);		
	}
	public EDischargeLastEvent getLastEvent()
	{
		return form.getLocalContext().getLastEvent();
	}
	@Override
	protected void onFormModeChanged() {
		updateControlState();		
	}
	private void updateControlState() {
		
	}
	@Override//WDEV-11817
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getDiagnosisConfirmMsgBoxIdIsNotNull() &&
				form.getLocalContext().getDiagnosisConfirmMsgBoxId().intValue()==messageBoxId && 
					DialogResult.YES.equals(result))
		{
			form.getLocalContext().setDiagnosisConfirmed(true);
			if (save())
				open();
			form.getLocalContext().setDiagnosisConfirmed(false);
		}
		
	}
	
	//WDEV-11817
	private boolean isDiagnosisConfirmed()
	{
		return form.getLocalContext().getDiagnosisConfirmedIsNotNull() && form.getLocalContext().getDiagnosisConfirmed();
	}
	
	//WDEV-13046
	protected class OrderedDateTime implements	Comparator<OrderInvestigationBookingVo> 
	{
		private int direction = 1;
		
		public OrderedDateTime() 
		{
			this(SortOrder.ASCENDING);
		}
		
		public OrderedDateTime(SortOrder order) 
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}

		public int compare(OrderInvestigationBookingVo order1, OrderInvestigationBookingVo order2) 
		{
			DateTime date1 = null;
			DateTime date2 = null;
			
			if(order1 != null)
				date1 = order1.getDisplayDateTime();
			
			if(order2 != null)
				date2 = order2.getDisplayDateTime();
			
			if(date1 == null)
				return -1*direction;
			
			if(date2 == null)
				return direction;
			
			return date1.compareTo(date2)*direction;
		}
	}
}
