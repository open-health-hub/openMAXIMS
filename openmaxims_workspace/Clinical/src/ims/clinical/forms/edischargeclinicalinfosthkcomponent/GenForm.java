//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.edischargeclinicalinfosthkcomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdOtherResultsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdOtherResultsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColInvestigationReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColInvestigationReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColInvestigationOpened()
		{
			super.row.showOpened(0);
		}
		public String getColInvestigation()
		{
			return (String)super.row.get(0);
		}
		public void setColInvestigation(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColInvestigationTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColIncludeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColIncludeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColIncludeOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColInclude()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColInclude(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColIncludeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.ocrr.vo.OrderInvestigationBookingVo getValue()
		{
			return (ims.ocrr.vo.OrderInvestigationBookingVo)super.row.getValue();
		}
		public void setValue(ims.ocrr.vo.OrderInvestigationBookingVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdOtherResultsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdOtherResultsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdOtherResultsRow get(int index)
		{
			return new grdOtherResultsRow(super.collection.get(index));
		}
		public grdOtherResultsRow newRow()
		{
			return new grdOtherResultsRow(super.collection.newRow());
		}
		public grdOtherResultsRow newRow(boolean autoSelect)
		{
			return new grdOtherResultsRow(super.collection.newRow(autoSelect));
		}
		public grdOtherResultsRow newRowAt(int index)
		{
			return new grdOtherResultsRow(super.collection.newRowAt(index));
		}
		public grdOtherResultsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdOtherResultsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdOtherResultsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.ocrr.vo.OrderInvestigationBookingVoCollection getValues()
		{
			ims.ocrr.vo.OrderInvestigationBookingVoCollection listOfValues = new ims.ocrr.vo.OrderInvestigationBookingVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ocrr.vo.OrderInvestigationBookingVo getValue()
		{
			return (ims.ocrr.vo.OrderInvestigationBookingVo)super.grid.getValue();
		}
		public void setValue(ims.ocrr.vo.OrderInvestigationBookingVo value)
		{
			super.grid.setValue(value);
		}
		public grdOtherResultsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdOtherResultsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdOtherResultsRowCollection getRows()
		{
			return new grdOtherResultsRowCollection(super.grid.getRows());
		}
		public grdOtherResultsRow getRowByValue(ims.ocrr.vo.OrderInvestigationBookingVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdOtherResultsRow(row);
		}
		public void setColInvestigationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColInvestigationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColIncludeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColIncludeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdAlertsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAlertsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColAlertReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColAlertReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColAlertOpened()
		{
			super.row.showOpened(0);
		}
		public String getColAlert()
		{
			return (String)super.row.get(0);
		}
		public void setColAlert(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColAlertTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColIncludeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColIncludeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColIncludeOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColInclude()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColInclude(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColIncludeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.PatientAlertLiteVo getValue()
		{
			return (ims.core.vo.PatientAlertLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientAlertLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAlertsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAlertsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAlertsRow get(int index)
		{
			return new grdAlertsRow(super.collection.get(index));
		}
		public grdAlertsRow newRow()
		{
			return new grdAlertsRow(super.collection.newRow());
		}
		public grdAlertsRow newRow(boolean autoSelect)
		{
			return new grdAlertsRow(super.collection.newRow(autoSelect));
		}
		public grdAlertsRow newRowAt(int index)
		{
			return new grdAlertsRow(super.collection.newRowAt(index));
		}
		public grdAlertsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAlertsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAlertsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.PatientAlertLiteVoCollection getValues()
		{
			ims.core.vo.PatientAlertLiteVoCollection listOfValues = new ims.core.vo.PatientAlertLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientAlertLiteVo getValue()
		{
			return (ims.core.vo.PatientAlertLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientAlertLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdAlertsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAlertsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAlertsRowCollection getRows()
		{
			return new grdAlertsRowCollection(super.grid.getRows());
		}
		public grdAlertsRow getRowByValue(ims.core.vo.PatientAlertLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAlertsRow(row);
		}
		public void setColAlertHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColAlertHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColIncludeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColIncludeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 592, 264, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 75, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Alerts:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 448, 75, 233, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Relevant Infections, Risk and Warnings:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 300, 264, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pending Results:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 6, 291, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Admission and  Presenting Complaints:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 446, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Additional Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 374, 322, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Relevant Treatments and Changes Made to Treatments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 264, 214, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Relevant Investigations and Results:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 182, 181, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Summary of Inpatient Episode:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 488, 468, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "School/Nursery:", new Integer(1), null, new Integer(0)}));

		// Hint Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 144, 446, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Hint.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "de88898f-4e50-4953-aa33-558beefab2dc"}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 408, 264, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Hint.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "2b79b230-09d4-445e-88b2-ef92cda2f936"}));

		// Button Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 678, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 757, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 600, 466, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 448, 96, 384, 80, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 288, 288, 80, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(3500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 392, 824, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 592, 288, 240, 80, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 824, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 824, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 466, 464, 70, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 757, 576, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Complete", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 600, 520, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"No Diagnosis", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 600, 504, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"No Co-Morbidity", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 600, 488, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"No Complications", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 300, 288, 288, 80, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdOtherResultsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdOtherResultsTemp);
		grdOtherResultsGrid grdOtherResults = (grdOtherResultsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOtherResultsGrid.class, m_grdOtherResultsTemp);
		grdOtherResults.addStringColumn("Investigation", 0, 0, 200, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdOtherResults.addBoolColumn("Include", 0, 0, -1, false, false, 0, true);
		super.addGrid(grdOtherResults);
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 432, 80, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdAlertsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAlertsTemp);
		grdAlertsGrid grdAlerts = (grdAlertsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAlertsGrid.class, m_grdAlertsTemp);
		grdAlerts.addStringColumn("Alert", 0, 0, 300, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAlerts.addBoolColumn("Include", 0, 0, -1, false, false, 0, true);
		super.addGrid(grdAlerts);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblSchoolNursey()
	{
		return (Label)super.getControl(9);
	}
	public Hint hint2()
	{
		return (Hint)super.getControl(10);
	}
	public Hint hint1()
	{
		return (Hint)super.getControl(11);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(12);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(13);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(14);
	}
	public TextBox txtSchoolNursery()
	{
		return (TextBox)super.getControl(15);
	}
	public TextBox txtRelInfections()
	{
		return (TextBox)super.getControl(16);
	}
	public TextBox txtRelevantInvestigationResults()
	{
		return (TextBox)super.getControl(17);
	}
	public TextBox txtRelevantTreatmentsETC()
	{
		return (TextBox)super.getControl(18);
	}
	public TextBox txtPendingResultsComments()
	{
		return (TextBox)super.getControl(19);
	}
	public TextBox txtReasonAdmissionPresentingComplaints()
	{
		return (TextBox)super.getControl(20);
	}
	public TextBox txtSummaryofInpatientEpisode()
	{
		return (TextBox)super.getControl(21);
	}
	public TextBox txtAdditionalComments()
	{
		return (TextBox)super.getControl(22);
	}
	public CheckBox chkComplete()
	{
		return (CheckBox)super.getControl(23);
	}
	public CheckBox chkNoDiagnosis()
	{
		return (CheckBox)super.getControl(24);
	}
	public CheckBox chkNoCoMorbidity()
	{
		return (CheckBox)super.getControl(25);
	}
	public CheckBox chkNoComplications()
	{
		return (CheckBox)super.getControl(26);
	}
	public grdOtherResultsGrid grdOtherResults()
	{
		return (grdOtherResultsGrid)super.getGrid(0);
	}
	public grdAlertsGrid grdAlerts()
	{
		return (grdAlertsGrid)super.getGrid(1);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Information = new ImageHelper(102217, "Images/Core/Information.gif", new Integer(16), new Integer(16));
				InfoEnabled24 = new ImageHelper(102511, "Images/Core/info_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Information;
			public final ims.framework.utils.Image InfoEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_bInitialised = new ims.framework.ContextVariable("bInitialised", prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__bInitialised_" + componentIdentifier + "");
			cxl_isReadonly = new ims.framework.ContextVariable("isReadonly", prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__isReadonly_" + componentIdentifier + "");
			cxl_CurrentDischargeDetails = new ims.framework.ContextVariable("CurrentDischargeDetails", prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier + "");
			cxl_STHKSummary = new ims.framework.ContextVariable("STHKSummary", prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__STHKSummary_" + componentIdentifier + "");
			cxl_LastEvent = new ims.framework.ContextVariable("LastEvent", prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__LastEvent_" + componentIdentifier + "");
			cxl_DiagnosisConfirmed = new ims.framework.ContextVariable("DiagnosisConfirmed", prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__DiagnosisConfirmed_" + componentIdentifier + "");
			cxl_DiagnosisConfirmMsgBoxId = new ims.framework.ContextVariable("DiagnosisConfirmMsgBoxId", prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__DiagnosisConfirmMsgBoxId_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.core.vo.DischargeClinicalInformationSTHKVo getSelectedRecord()
		{
			return (ims.core.vo.DischargeClinicalInformationSTHKVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.core.vo.DischargeClinicalInformationSTHKVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getbInitialisedIsNotNull()
		{
			return !cxl_bInitialised.getValueIsNull(context);
		}
		public Boolean getbInitialised()
		{
			return (Boolean)cxl_bInitialised.getValue(context);
		}
		public void setbInitialised(Boolean value)
		{
			cxl_bInitialised.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bInitialised = null;
		public boolean getisReadonlyIsNotNull()
		{
			return !cxl_isReadonly.getValueIsNull(context);
		}
		public Boolean getisReadonly()
		{
			return (Boolean)cxl_isReadonly.getValue(context);
		}
		public void setisReadonly(Boolean value)
		{
			cxl_isReadonly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isReadonly = null;
		public boolean getCurrentDischargeDetailsIsNotNull()
		{
			return !cxl_CurrentDischargeDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.DischargeDetailsVo getCurrentDischargeDetails()
		{
			return (ims.clinical.vo.DischargeDetailsVo)cxl_CurrentDischargeDetails.getValue(context);
		}
		public void setCurrentDischargeDetails(ims.clinical.vo.DischargeDetailsVo value)
		{
			cxl_CurrentDischargeDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentDischargeDetails = null;
		public boolean getSTHKSummaryIsNotNull()
		{
			return !cxl_STHKSummary.getValueIsNull(context);
		}
		public ims.edischarge.vo.SummaryRefVo getSTHKSummary()
		{
			return (ims.edischarge.vo.SummaryRefVo)cxl_STHKSummary.getValue(context);
		}
		public void setSTHKSummary(ims.edischarge.vo.SummaryRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'STHKSummary' RefVo context variable.");
			if(value == null)
				cxl_STHKSummary.setValue(context, null);
			else
				cxl_STHKSummary.setValue(context, new ims.edischarge.vo.SummaryRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_STHKSummary = null;
		public boolean getLastEventIsNotNull()
		{
			return !cxl_LastEvent.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.EDischargeLastEvent getLastEvent()
		{
			return (ims.clinical.vo.enums.EDischargeLastEvent)cxl_LastEvent.getValue(context);
		}
		public void setLastEvent(ims.clinical.vo.enums.EDischargeLastEvent value)
		{
			cxl_LastEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastEvent = null;
		public boolean getDiagnosisConfirmedIsNotNull()
		{
			return !cxl_DiagnosisConfirmed.getValueIsNull(context);
		}
		public Boolean getDiagnosisConfirmed()
		{
			return (Boolean)cxl_DiagnosisConfirmed.getValue(context);
		}
		public void setDiagnosisConfirmed(Boolean value)
		{
			cxl_DiagnosisConfirmed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DiagnosisConfirmed = null;
		public boolean getDiagnosisConfirmMsgBoxIdIsNotNull()
		{
			return !cxl_DiagnosisConfirmMsgBoxId.getValueIsNull(context);
		}
		public Integer getDiagnosisConfirmMsgBoxId()
		{
			return (Integer)cxl_DiagnosisConfirmMsgBoxId.getValue(context);
		}
		public void setDiagnosisConfirmMsgBoxId(Integer value)
		{
			cxl_DiagnosisConfirmMsgBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DiagnosisConfirmMsgBoxId = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[100];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-ID", "ID_DischargeClinicalInformation");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-CARECONTEXT", "CareContext");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-PRESENTINGCOMPLAINTS", "PresentingComplaints");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-SUMMARYOFADMISSION", "SummaryOfAdmission");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-INVESTIGATIONCOMMENTS", "InvestigationComments");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-RELEVANTTREATMENTS", "RelevantTreatments");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-ADDITIONALCOMMENTS", "AdditionalComments");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-REASONFORADMISSIONANDPRESENTINGCOMPLAINTS", "ReasonForAdmissionAndPresentingComplaints");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-RELEVANTINFECTIONSRISKSWARNINGS", "RelevantInfectionsRisksWarnings");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-SUMMARYOFINPATIENTEPISODE", "SummaryOfInpatientEpisode");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-RELEVANTINVSANDRESULTS", "RelevantInvsAndResults");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-PENDINGRESULTSCOMMENTS", "PendingResultsComments");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-RELEVANTTREATMENTSANDCHANGES", "RelevantTreatmentsAndChanges");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-SCHOOLNURSERY", "SchoolNursery");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1072100071-ISCOMPLETE", "IsComplete");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-ID", "ID_DischargeDetails");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-CARECONTEXT", "CareContext");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DATEOFDISCHARGE", "DateOfDischarge");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DISCHARGEMETHOD", "DischargeMethod");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DISCHARGEDESTINATION", "DischargeDestination");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DISCHARGELETTERSTATUS", "DischargeLetterStatus");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-HASNOCOMPLICATIONS", "HasNoComplications");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-HASNOCOMORBIDITIES", "HasNoComorbidities");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DISCHARGINGSPECIALTY", "DischargingSpecialty");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-DISCHARGESUPPLEMENTARYLETTERSTATUS", "DischargeSupplementaryLetterStatus");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-HASNODIAGNOSIS", "HasNoDiagnosis");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-METHODOFDISCHARGE", "MethodOfDischarge");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__CurrentDischargeDetails_" + componentIdentifier, "BO-1099100001-ISDIAGNOSISCOMPLETE", "IsDiagnosisComplete");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeClinicalInfoSTHKComponent.__internal_x_context__STHKSummary_" + componentIdentifier, "BO-1099100018-ID", "ID_Summary");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
