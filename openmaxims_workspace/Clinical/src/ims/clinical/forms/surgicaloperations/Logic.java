//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 50208.1400)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.surgicaloperations;

import ims.clinical.forms.surgicaloperations.BaseLogic;
import ims.clinical.forms.surgicaloperations.GenForm;
import ims.clinical.forms.surgicaloperations.GenForm.grdAssistantsRow;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientCharacteristicVo;
import ims.core.vo.PatientCharacteristicVoCollection;
import ims.core.vo.PatientSurgicalOperationVo;
import ims.core.vo.PatientSurgicalOperationVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.lookups.PatientCharacteresticType;
import ims.core.vo.lookups.SourceofInformation;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.PartialDate;
import ims.configuration.gen.ConfigFlag;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.customControlAuthoring().setIsRequiredPropertyToControls(true);
		open();
	}
	
	private void open() 
	{
		form.btnUpdate().setEnabled(false);
		this.clearScreen();
		form.getLocalContext().setSurgicalOperation(null);
		populateOperationsGrid();
		setRemoveMenuVisibilities();
		form.setMode(FormMode.VIEW);
	}	
	
	private void populateOperationsGrid() 
	{
		form.grdOperations().getRows().clear();
		
		PatientSurgicalOperationVoCollection voCollOperations = domain.listCareContextSurgicalOperations(form.getGlobalContext().Core.getCurrentCareContext(),engine.isRIEMode());
		if(voCollOperations != null)
		{
			GenForm.grdOperationsRow row = null;
			for(int i=0;i<voCollOperations.size();i++)
			{
				row = form.grdOperations().getRows().newRow();
				if(voCollOperations.get(i).getProcDateIsNotNull())
					row.setcolDate(voCollOperations.get(i).getProcDate().toString());
				if(voCollOperations.get(i).getProcedure() != null)
					row.setcolProcedure(voCollOperations.get(i).getProcedure().getProcedureName());
					
				//28/10/2005 - Bug reported - Location not saved
				if(voCollOperations.get(i).getLocationIsNotNull())
					row.setcolLocation(voCollOperations.get(i).getLocation());
							
				row.setValue(voCollOperations.get(i));
			}
		}		
		
	}

	protected void onQmbProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		if(value != null)
		{
			ProcedureLiteVoCollection procColl = new ProcedureLiteVoCollection();
			try {
				procColl = domain.listProcedures(value);
			} catch (DomainInterfaceException e) {
				engine.showMessage(e.getMessage());
			}
			if(procColl!=null)
			{	
				for (int i = 0; i < procColl.size(); i++)
				{
					ProcedureLiteVo proc = procColl.get(i);
					form.qmbProcedure().newRow(proc, proc.getProcedureName());			
				}
				if (procColl.size() == 1)
				{
					form.qmbProcedure().setValue(procColl.get(0));
				}
				else if (procColl.size() > 1)
				{
					form.qmbProcedure().showOpened();		
				}
			}
		}
	}
	
	protected void onGridOperationsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnUpdate().setEnabled(true);
		populateScreenFromData(form.grdOperations().getValue());
		form.getLocalContext().setSurgicalOperation(form.grdOperations().getValue());
	}
	
	protected void onQmbPerfByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
	 	  form.qmbPerfBy().clear();
			
		  HcpLiteVoCollection hcpColl = domain.listHcpLiteByName(value);
		
		if(hcpColl != null)
		{
		  for (int i = 0; i < hcpColl.size(); i++)
		  {
			    HcpLiteVo hcp = hcpColl.get(i);
			    form.qmbPerfBy().newRow(hcp, hcp.toString());			
		   }
		
		   if (hcpColl.size() == 1)
		   {
			    form.qmbPerfBy().setValue(hcpColl.get(0));
		    }
		    else if (hcpColl.size() > 1)
		   {
			form.qmbPerfBy().showOpened();		
		   }
		}
	}
	
	protected PatientSurgicalOperationVo populateDataFromScreen(PatientSurgicalOperationVo value) 
	{
		value = super.populateDataFromScreen(value);	
		
		value.setAuthoringInformation(form.customControlAuthoring().getValue());
		//Inserted
		value.setInsertedDevices(new ims.core.vo.PatientCharacteristicVoCollection());
		if(value !=null)
		{
			for(int x = 0; x < form.grdImpDevIns().getRows().size(); x++)
			{
				PatientCharacteristicVo rowValue = form.grdImpDevIns().getRows().get(x).getValue();
				if ( form.grdImpDevIns().getRows().get(x).getColumn1() != null)
				{
					if(rowValue == null)
						rowValue = new ims.core.vo.PatientCharacteristicVo();
					
					if(rowValue.getCareContext()== null)
						rowValue.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					
					
					if(rowValue.getPatient()== null)
						rowValue.setPatient(form.getGlobalContext().Core.getPatientShort());
					
					
					rowValue.setCharacteresticType(PatientCharacteresticType.IMPLANTEDDEVICE);
					if(rowValue.getDateInserted() == null)
						rowValue.setDateInserted(new Date());
						
					rowValue.setIsRemoved(Boolean.FALSE);
					rowValue.setImplantedDevice(form.grdImpDevIns().getRows().get(x).getColumn1());
					rowValue.setIsActive(Boolean.TRUE);
					if(value.getInsertedDevicesIsNotNull())
					{
						if (value.getInsertedDevices().add(rowValue) == false)//It is already in the collection so need to update it.
						{
							int nIndex = value.getInsertedDevices().indexOf(rowValue);
							value.getInsertedDevices().set(nIndex, rowValue);
						}
					}
				}
			}
		}
		
		//Now check Inserted grid for anything that was Removed.
		if(value.getInsertedDevices() != null)
		{
			PatientCharacteristicVoCollection voColl = value.getInsertedDevices();
			for(int i = 0; i < voColl.size(); i++)
			{
				PatientCharacteristicVo voPatChar = voColl.get(i);
				boolean bFound = false;
				
				for(int j = 0; j < form.grdImpDevIns().getRows().size(); j++)
				{
					//Look for a match in the Grid and the Collection, if there is not one the Coll entry was removed Mark it as such
					if (   (voPatChar.getID_PatientCharacteristicIsNotNull()) 
						&& (form.grdImpDevIns().getRows().get(j).getValue() != null)
						&& (form.grdImpDevIns().getRows().get(j).getValue().getID_PatientCharacteristicIsNotNull())
						&& (voPatChar.getID_PatientCharacteristic().equals(form.grdImpDevIns().getRows().get(j).getValue().getID_PatientCharacteristic())) )
						bFound = true;
					
					if (form.grdImpDevIns().getRows().get(j).getValue() == null)//New row and so mark as found
						bFound = true;
				}
				if ((bFound == false) && (voPatChar.getID_PatientCharacteristicIsNotNull()) )
				{
					voPatChar.setIsActive(Boolean.FALSE);
					
					voColl.set(i, voPatChar);
					value.setInsertedDevices(voColl);
				}
			}
		}
		
		//Removed	
		value.setRemovedDevices(new ims.core.vo.PatientCharacteristicVoCollection());
		for(int x = 0; x < form.grdImpDevRem().getRows().size(); x++)
		{
			PatientCharacteristicVo rowValue = (PatientCharacteristicVo) form.grdImpDevRem().getRows().get(x).getColumn1().getValue();
			
			if(rowValue != null)
			{
				rowValue.setCharacteresticType(PatientCharacteresticType.IMPLANTEDDEVICE);
				if(rowValue.getDateRemoved() == null)
					rowValue.setDateRemoved(new Date());

				rowValue.setIsRemoved(Boolean.TRUE);
				rowValue.setImplantedDevice(((PatientCharacteristicVo)form.grdImpDevRem().getRows().get(x).getColumn1().getValue()).getImplantedDevice());
				rowValue.setIsActive(Boolean.TRUE);
				if(value.getRemovedDevicesIsNotNull())
				{
					if (value.getRemovedDevices().add(rowValue) == false)//It is already in the collection so need to update it.
					{
						int nIndex = value.getRemovedDevices().indexOf(rowValue);
						value.getRemovedDevices().set(nIndex, rowValue);
					}
				}
			}
		}
		
		//Now check Removed grid for anything that was Removed.
		if(value.getRemovedDevices() != null)
		{
			PatientCharacteristicVoCollection voColl = value.getRemovedDevices();
			for(int i = 0; i < voColl.size(); i++)
			{
				PatientCharacteristicVo voPatChar = voColl.get(i);
				boolean bFound = false;
				
				for(int j = 0; j < form.grdImpDevRem().getRows().size(); j++)
				{
					//Look for a match in the Grid and the Collection, if there is not one the Coll entry was removed Mark it as such
					if (   (voPatChar.getID_PatientCharacteristicIsNotNull()) 
						&& (form.grdImpDevRem().getRows().get(j).getValue() != null)
						&& (form.grdImpDevRem().getRows().get(j).getValue().getID_PatientCharacteristicIsNotNull())
						&& (voPatChar.getID_PatientCharacteristic().equals(form.grdImpDevRem().getRows().get(j).getValue().getID_PatientCharacteristic())) )
						bFound = true;

					if (form.grdImpDevRem().getRows().get(j).getValue() == null)//New row and so mark as found
						bFound = true;
				}
				if ((bFound == false) && (voPatChar.getID_PatientCharacteristicIsNotNull()) )
				{
					voPatChar.setIsRemoved(Boolean.FALSE);
					
					voColl.set(i, voPatChar);
					value.setRemovedDevices(voColl);
				}
			}
		}
		
		
			
		HcpLiteVoCollection collHcpLiteVo = new HcpLiteVoCollection();
		if(value!=null)
		{
			for(int i=0;i<form.grdAssistants().getRows().size();i++)
			{
				HcpLiteVo hcpLiteVo = new HcpLiteVo();
				if(form.grdAssistants().getRows().get(i).getColHcp().getValue()!= null){
					hcpLiteVo = (HcpLiteVo) form.grdAssistants().getRows().get(i).getColHcp().getValue();
					collHcpLiteVo.add(hcpLiteVo);
				}
			}
			
			value.setAssistants(collHcpLiteVo);
			
			value.setPeformedBy(form.qmbPerfBy().getValue());
			value.setProcedure(form.qmbProcedure().getValue());
			value.setNurse(form.qmbNurse().getValue());
			value.setAnaesthetist(form.qmbAnaes().getValue());
			value.setLocation(form.txtSurgicalOpLoc().getValue());
			//Info Source cannot be null, its not going on the screen, so putting it in here.
			value.setInfoSource(SourceofInformation.CORRESPONDENCE);
		}
		//TODO : associated clinical notes (ask koc)
		return value;
	}

	protected void populateScreenFromData(PatientSurgicalOperationVo value) 
	{
		super.populateScreenFromData(value);
		
		form.qmbProcedure().clear();
		if(value.getProcedure() != null)
		{
			form.qmbProcedure().newRow(value.getProcedure(), value.getProcedure().getProcedureName());
			form.qmbProcedure().setValue(value.getProcedure());
		}	
		
		form.qmbPerfBy().clear();
		if(value.getPeformedBy() != null)
		{
			form.qmbPerfBy().newRow(value.getPeformedBy(), value.getPeformedBy().toString());
			form.qmbPerfBy().setValue(value.getPeformedBy());
		}	
		
		if(value.getLocationIsNotNull())
			form.txtSurgicalOpLoc().setValue(value.getLocation());
		
		form.qmbAnaes().clear();
		if(value.getAnaesthetist() != null)
		{
			form.qmbAnaes().newRow(value.getAnaesthetist(), value.getAnaesthetist().toString());
			form.qmbAnaes().setValue(value.getAnaesthetist());
		}	
		
		form.qmbNurse().clear();
		if(value.getNurse() != null)
		{
			form.qmbNurse().newRow(value.getNurse(), value.getNurse().toString());
			form.qmbNurse().setValue(value.getNurse());
		}	
		
		form.customControlAuthoring().setValue(value.getAuthoringInformation());
		

		//Inserted
		if(value.getInsertedDevices() != null)
		{
			GenForm.grdImpDevInsRow row;
			for(int x = 0; x < value.getInsertedDevices().size(); x++)
			{
				if(value.getInsertedDevices().get(x).getIsActive().booleanValue())
				{
					row = form.grdImpDevIns().getRows().newRow();
					row.setValue(value.getInsertedDevices().get(x));
					row.setColumn1(value.getInsertedDevices().get(x).getImplantedDevice());
				}
			}
		}
		
		//Removed
		if(value.getRemovedDevices() != null)
		{
			GenForm.grdImpDevRemRow row;
			for(int x = 0; x < value.getRemovedDevices().size(); x++)
			{
				if(value.getRemovedDevices().get(x).getIsRemoved().booleanValue())
				{
					row = form.grdImpDevRem().getRows().newRow();
					row.setValue(value.getRemovedDevices().get(x));
					row.getColumn1().newRow(value.getRemovedDevices().get(x), value.getRemovedDevices().get(x).getImplantedDevice());
					row.getColumn1().setValue(value.getRemovedDevices().get(x));
				}
			}
		}

		//other hcps
		if(value.getAssistants() != null)
		{
			GenForm.grdAssistantsRow row;
			for(int x=0;x<value.getAssistants().size(); x++)
			{
				row = form.grdAssistants().getRows().newRow();
				row.setValue(value.getAssistants().get(x));
				row.getColHcp().newRow(value.getAssistants().get(x), value.getAssistants().get(x).toString());
				row.getColHcp().setValue(value.getAssistants().get(x));
			}
		}
		
		//TODO : associated clinical notes (ask koc)
	}
	
	protected void clearScreen() 
	{
		super.clearScreen();
		
		form.grdImpDevIns().getRows().clear();
		form.grdImpDevRem().getRows().clear();
		form.grdAssistants().getRows().clear();
		form.qmbProcedure().setValue(null);
		form.qmbPerfBy().setValue(null);
		form.qmbAnaes().setValue(null);
		form.qmbNurse().setValue(null);
		form.txtSurgicalOpLoc().setValue(null);
		form.customControlAuthoring().setValue(null);
	}

	protected void onBtnNewClick() throws PresentationLogicException 
	{
		this.clearScreen();
		
		form.customControlAuthoring().initializeComponent();
		form.setcustomControlAuthoringEnabled(true);
		form.grdOperations().setValue(null);
		form.pdtProcedure().setValue(new PartialDate(new Date()));
		form.btnUpdate().setEnabled(false);
		form.getLocalContext().setSurgicalOperation(new PatientSurgicalOperationVo());
		form.setMode(FormMode.EDIT);
		
		
	}

	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.btnUpdate().setEnabled(false);
		form.setMode(FormMode.EDIT);
		if (form.customControlAuthoring().getValue()==null)
		{
			form.setcustomControlAuthoringEnabled(true);
		}
	}

	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		open();
		form.setMode(FormMode.VIEW);
	}

	/**
	 * check UI business logic rules and returns errors as String[]
	 * @param  arrErrorsUI
	 * @return String[]
	 */		
	public String[] validateUIRules()
	{
		java.util.ArrayList listOfErrors = new java.util.ArrayList();		
		
		//Check to see the Performing HCP is not in the Assistants collection
		for(int i=0 ; i < form.grdAssistants().getRows().size() ; i++)
		{
			HcpLiteVo voHcpLite = (HcpLiteVo) form.grdAssistants().getRows().get(i).getColHcp().getValue();
		//24/04/2008 - Bug reported - Null Pointer Exception 
			if(voHcpLite!=null && (form.qmbPerfBy().getValue())!=null && (form.qmbPerfBy().getValue().getIMosId())!= null )
			{
				if(voHcpLite.getID_Hcp().equals(form.qmbPerfBy().getValue().getIMosId()))
				{
					listOfErrors.add("You cannot enter your Performing HCP in the Assistants grid. Please update your entry and save again.");
					break;
				}
			}
			
		}		
		if (form.customControlAuthoring().getErrors()!=null)
		{
			listOfErrors.add(form.customControlAuthoring().getErrors());
		}
		
		int errorCount = listOfErrors.size();

		if(errorCount == 0)
		{
			return null;
		}
		
		String[] result = new String[errorCount];
		listOfErrors.toArray(result);
		
		return result;
	}
	
	/**
	 * gather screen data into local context vo and save updating the local context vo
	 * returns true for successful save
	 * @return boolean
	 */	
	public boolean save()
	{
		PatientSurgicalOperationVo voOperation = form.getLocalContext().getSurgicalOperation();
		
		voOperation = this.populateDataFromScreen(voOperation);
		
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			voOperation.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull()){
			CareContextShortVo cc = form.getGlobalContext().Core.getCurrentCareContext();
			voOperation.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voOperation.setEpisodeOfCare(cc.getEpisodeOfCare());
		}
		voOperation.setProcedureDescription(voOperation.getProcedureIsNotNull()?voOperation.getProcedure().getProcedureName():null);
			
		String[] arrErrors = voOperation.validate(validateUIRules());		
		if( arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
				
		try 
		{
			try 
			{
				voOperation = domain.savePatientSurgicalOperation(voOperation, form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext());				
			}
			catch (UniqueKeyViolationException e) 
			{
				engine.showMessage(e.getMessage());
				open();
				return false;
			}			
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if ( ! validateAllHcpFieldsForDuplicate())
			return;
		
		if (save())
			open();
	}

	private boolean validateAllHcpFieldsForDuplicate()
	{
		StringBuffer sb = new StringBuffer();
		
		HcpLiteVoCollection collHcpLiteVo = new HcpLiteVoCollection();
		for(int i = 0 ; i < form.grdAssistants().getRows().size() ; i++)
		{
			HcpLiteVo hcpLiteVo = new HcpLiteVo();
			if(form.grdAssistants().getRows().get(i).getColHcp().getValue()!= null)
				hcpLiteVo = (HcpLiteVo) form.grdAssistants().getRows().get(i).getColHcp().getValue();
			
			collHcpLiteVo.add(hcpLiteVo);
		}
		
		if (collHcpLiteVo.size() > 0)
		{
			if (form.qmbPerfBy().getValue() != null && collHcpLiteVo.contains(((HcpLiteVo)form.qmbPerfBy().getValue())))
				sb.append("The Performed By is also in the Assistants list.\n\n");
			
			if (form.qmbNurse().getValue() != null && collHcpLiteVo.contains(form.qmbNurse().getValue()))
				sb.append("The Nurse is also in the Assistants list.\n\n");
			
			if (form.qmbAnaes().getValue() != null && collHcpLiteVo.contains(form.qmbAnaes().getValue()))
				sb.append("The Anaesthetist is also in the Assistants list.\n\n");
		}
		
		//Anaes vs Nurse
		if (form.qmbNurse().getValue() != null 
			&& form.qmbAnaes().getValue() != null
			&& form.qmbNurse().getValue().equals(form.qmbAnaes().getValue()))
			sb.append("The Nurse and the Anaesthetist are the same person.\n\n");

		//Anaes vs Perf
		if (form.qmbAnaes().getValue() != null 
			&& form.qmbPerfBy().getValue() != null
			&& form.qmbAnaes().getValue().equals((HcpLiteVo)form.qmbPerfBy().getValue()))
			sb.append("The Performed By and the Anaesthetist are the same person.\n\n");

		//Nurse vs Perf
		if (form.qmbNurse().getValue() != null 
			&& form.qmbPerfBy().getValue() != null
			&& form.qmbNurse().getValue().equals((HcpLiteVo)form.qmbPerfBy().getValue()))
			sb.append("The Nurse and the Performed By are the same person.\n\n");

		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString());
			return false;
		}
		return true;
		
	}

	protected void onQmbAnaesTextSubmited(String value) throws PresentationLogicException 
	{
		form.qmbAnaes().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name  = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
	
		HcpLiteVoCollection hcpColl = domain.listHcpLiteByName(value);
		for (int i = 0; i < hcpColl.size(); i++)
		{
			HcpLiteVo hcp = hcpColl.get(i);
			form.qmbAnaes().newRow(hcp, hcp.toString());			
		}
		if (hcpColl.size() == 1)
		{
			form.qmbAnaes().setValue(hcpColl.get(0));
		}
		else if (hcpColl.size() > 1)
		{
			form.qmbAnaes().showOpened();		
		}				
	}

	protected void onQmbNurseTextSubmited(String value) throws PresentationLogicException 
	{
		form.qmbNurse().clear();
		
		HcpLiteVoCollection hcpColl = domain.listHcpLiteByName(value);
		for (int i = 0; i < hcpColl.size(); i++)
		{
			HcpLiteVo hcp = hcpColl.get(i);
			form.qmbNurse().newRow(hcp, hcp.toString());			
		}
		if (hcpColl.size() == 1)
		{
			form.qmbNurse().setValue(hcpColl.get(0));
		}
		else if (hcpColl.size() > 1)
		{
			form.qmbNurse().showOpened();		
		}		
	}
	

	protected void onImbAddInsertedClick() 
	{
		newInserted();
	}

	private void newInserted() 
	{
		GenForm.grdImpDevInsRow row = form.grdImpDevIns().getRows().newRow();
		row.setValue(new PatientCharacteristicVo());
	}

	
	protected void onImbAddAssistantsClick() 
	{
		newAssistant();
	}

	private void newAssistant() {
		form.grdAssistants().getRows().newRow(true);
	}

	protected void onImbRemoveInsertedClick() 
	{
		removeInserted();
	}

	private void removeInserted() 
	{
		if(form.grdImpDevIns().getSelectedRowIndex() > -1)
			form.grdImpDevIns().getRows().remove(form.grdImpDevIns().getSelectedRowIndex());
	}
	
	protected void onImbRemoveAssistantsClick() 
	{
		removeAsistant();
	}

	private void removeAsistant() {
		if(form.grdAssistants().getSelectedRowIndex() > -1)
			form.grdAssistants().getRows().remove(form.grdAssistants().getSelectedRowIndex());
	}

	protected void onImbAddRemovedClick() 
	{
		newRemoved();
	}

	private void newRemoved() 
	{
		PatientCharacteristicVoCollection voCharColl = listCharacteristic();
		
		if(voCharColl.size() == 0)
		{
			engine.showMessage("No Devices Exist");	
		}
		
		GenForm.grdImpDevRemRow row = null;
		for(int i=0;i<voCharColl.size();i++)
		{
			if(i == 0)
				row = form.grdImpDevRem().getRows().newRow();
			
			row.getColumn1().newRow(voCharColl.get(i), voCharColl.get(i).getImplantedDevice());
		}
	}

	private PatientCharacteristicVoCollection listCharacteristic() 
	{
		return domain.listCharchteristic(form.getGlobalContext().Core.getPatientShort(), form.getLocalContext().getSurgicalOperation());
	}

	protected void onImbRemoveRemovedClick() 
	{
		removeRemoved();
	}

	private void removeRemoved() 
	{
		if(form.grdImpDevRem().getSelectedRowIndex() > -1)
			form.grdImpDevRem().getRows().remove(form.grdImpDevRem().getSelectedRowIndex());
	}

	protected void onGrdAssistantsGridQueryComboBoxTextSubmited(int column, grdAssistantsRow row, String text) throws PresentationLogicException 
	{
		HcpLiteVoCollection collHcps = domain.listHcpLiteByName(text);
		
		row.getColHcp().clear();
		row.getColHcp().setValue(null);
		
		if(collHcps == null)
			return;

		for(int i=0;i<collHcps.size();i++)
			row.getColHcp().newRow(collHcps.get(i),collHcps.get(i).toString());					
	
		if (collHcps.size() == 1)
			row.getColHcp().setValue(collHcps.get(0));
		else if(collHcps.size() > 1)
			row.getColHcp().showOpened();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (sender.equals(form.grdAssistants()))
			mnuAssistants(menuItemID);
		else if (sender.equals(form.grdImpDevIns()))
			mnuImpDevIns(menuItemID);
		else if (sender.equals(form.grdImpDevRem()))
			mnuImpDevRem(menuItemID);
		setRemoveMenuVisibilities();
	}

	private void mnuImpDevIns(int menuItemID) 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ImplantDevicesAddGrid.ADD:
				newInserted();
				break;
			case GenForm.ContextMenus.ImplantDevicesAddGrid.REMOVE:
				removeInserted();
				break;
		}		
	}

	private void mnuImpDevRem(int menuItemID) 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ImplantDevicesRemoveGrid.ADD:
				newRemoved();
				break;
			case GenForm.ContextMenus.ImplantDevicesRemoveGrid.REMOVE:
				removeRemoved();
				break;				
		}		
	}
	
	private void mnuAssistants(int menuItemID) {
		switch (menuItemID)
		{
			case GenForm.ContextMenus.HcpGrid.ADD:
				newAssistant();
				break;
			case GenForm.ContextMenus.HcpGrid.REMOVE:
				removeAsistant();
				break;					
		}
	}

	protected void onFormModeChanged() 
	{
		boolean bVisible = form.getMode().equals(FormMode.EDIT);
		
		form.getContextMenus().getHcpGridADDItem().setVisible(bVisible);		
		form.getContextMenus().getImplantDevicesAddGridADDItem().setVisible(bVisible);		
		form.getContextMenus().getImplantDevicesRemoveGridADDItem().setVisible(bVisible);
	}

	protected void onGrdAssistantsSelectionChanged() throws PresentationLogicException 
	{
		setHcpRemoveMenuVisibility();
	}

	private void setHcpRemoveMenuVisibility() 
	{
		boolean bVisible = 	form.grdAssistants().getSelectedRowIndex() != -1 && 
							form.getMode().equals(FormMode.EDIT);	   
		form.getContextMenus().getHcpGridREMOVEItem().setVisible(bVisible);		
	}

	protected void onGrdImpDevInsSelectionChanged() throws PresentationLogicException 
	{
		setInsImpDevRemoveMenuVisibility();		
	}

	private void setInsImpDevRemoveMenuVisibility() 
	{
		boolean bVisible = 	form.grdImpDevIns().getSelectedRowIndex() != -1 && 
							form.getMode().equals(FormMode.EDIT);	   
		form.getContextMenus().getImplantDevicesAddGridREMOVEItem().setVisible(bVisible);				
	}

	protected void onGrdImpDevRemSelectionChanged() throws PresentationLogicException 
	{
		setRemImpDevRemoveMenuVisibility();		
	}

	private void setRemImpDevRemoveMenuVisibility() 
	{
		boolean bVisible = 	form.grdImpDevRem().getSelectedRowIndex() != -1 && 
							form.getMode().equals(FormMode.EDIT);	   
		form.getContextMenus().getImplantDevicesRemoveGridREMOVEItem().setVisible(bVisible);						
	}
	
	
	private void setRemoveMenuVisibilities()
	{
		setHcpRemoveMenuVisibility();
		setInsImpDevRemoveMenuVisibility();
		setRemImpDevRemoveMenuVisibility();
	}
}
