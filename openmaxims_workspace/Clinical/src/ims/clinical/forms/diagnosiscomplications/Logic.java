//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.44 build 2245.22719)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.diagnosiscomplications;

import ims.admin.vo.AppUserShortVo;
import ims.admin.vo.AppUserVo;
import ims.clinical.forms.diagnosiscomplications.GenForm.grdDiagnosisRow;
import ims.clinical.forms.diagnosiscomplications.GenForm.ctnDetailsContainer.GroupSelectionEnumeration;
import ims.clinical.vo.ClinicalDIAssociationVoCollection;
import ims.clinical.vo.PatientDiagnosisStatusVo;
import ims.clinical.vo.PatientDiagnosisStatusVoCollection;
import ims.clinical.vo.lookups.CDIAssociationDescription;
import ims.clinical.vo.lookups.CodingItemType;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.vo.CSPrimaryDiagnosisVo;
import ims.core.vo.CSPrimaryDiagnosisVoCollection;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientDiagnosisListVo;
import ims.core.vo.PatientDiagnosisListVoCollection;
import ims.core.vo.PatientDiagnosisVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.SourceofInformationCollection;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.framework.utils.PartialDate;
import ims.vo.interfaces.IClinicalCodingValue;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final String	WARNING			= "Warning";
	private static final String	INVALID_RECORD	= "Invalid record";

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		initializeCustomControl();
		open();
		postInitialize();
		updateControlsState(); 
	}

	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		if ((form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull()) && (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())))
			isBtnCloseVisible(isDialog());
		else
		{
			isBtnCloseVisible(false);
			form.getGlobalContext().Clinical.setReturnToFormName(null);
		}
		setDateValidation();
		setHcpSearchComponentsSettings();

		setContextMenu();

		updateContextMenus();
		loadSourceOfInfoCombo();
		clearGlobalContextVariables();

		form.ctnDetails().btnAssociations().setImage(form.getImages().Core.AssociationsLHS);
	}

	private void setDateValidation()
	{
		//form.ctnDetails().dteOnset().setNoFutureDates();
	}
	public String[] validateUIRules()
	{
		ArrayList<String> errorsList = new ArrayList<String>();
		Date onSetDate = form.ctnDetails().dteOnset().getValue();
		if (onSetDate!=null && onSetDate.isGreaterThan(new Date()))
		{
			errorsList.add("The Onset Date cannot be in the future");
		}
		PartialDate diagnosisDate = form.ctnDetails().pdtDateDiagnosed().getValue();
		if (diagnosisDate != null && diagnosisDate.isGreaterThan(new Date()))
			{
				form.ctnDetails().pdtDateDiagnosed().setFocus();
				errorsList.add("The Date Diagnosed cannot be in the future"); // WDEV-17713 
			}
		

		if (form.ctnDetails().chkResolved().getValue())
		{
			//String resolvedByError = form.ctnDetails().customControlResolved().getError("Resolved By");
			String resolvedByError = form.ctnDetails().customControlMos().getError("Resolved By");
			if (resolvedByError != null)
			{
				errorsList.add(resolvedByError);
			}

			if (form.ctnDetails().dteResolved().getValue() == null)
			{
				errorsList.add("Please select Resolved Date");
			}
		}
		//start WDEV-13958
		if (form.ctnDetails().customControlCodingItem().getSelectedItem() == null)
		{
			errorsList.add("Please select a Clinical Term");
		}
		//end
		
		//if(form.ctnDetails().customControlAuthoring().getValue().getAuthoringDateTime() == null || form.ctnDetails().customControlAuthoring().getValue().getAuthoringHcp() == null)
		//	errorsList.add("Authoring HCP and Authoring Date Time are mandatory.");
		if (errorsList.size()==0)
			return null;
		String [] errors = new String[errorsList.size()];
		errorsList.toArray(errors);
		return errors;
			
	}
	private void setHcpSearchComponentsSettings()
	{
		//form.ctnDetails().customControlResolved().setIsRequiredProperty(Boolean.TRUE);
		//form.ctnDetails().customControlResolved().setHcpSearchType(HCPSearchType.MEDIC);
		
		//WDEV-5193
		//form.ctnDetails().customControlMos().isRequired(true); WDEV-14329 
		form.ctnDetails().customControlMos().initialize(MosType.MEDIC);
	}

	private void loadSourceOfInfoCombo()
	{
		SourceofInformationCollection collStatus = ims.core.vo.lookups.LookupHelper.getSourceofInformation(domain.getLookupService());
		form.ctnDetails().cmbSourceOfInfo().clear();
		for (int i = 0; i < collStatus.size(); i++)
		{
			if (!collStatus.get(i).equals(SourceofInformation.CLINICALCONTACT))
			{
				form.ctnDetails().cmbSourceOfInfo().newRow(collStatus.get(i), collStatus.get(i).getText());
			}
		}

	}

	private String getResponsibleHCP(CareContextLiteVo voCareContext)
	{
		String strHCP = new String("Responsible HCP not known");
		if (voCareContext != null)
			if (voCareContext.getEpisodeOfCareIsNotNull())
				if (voCareContext.getEpisodeOfCare().getResponsibleHCPIsNotNull())
					if (voCareContext.getEpisodeOfCare().getResponsibleHCP().getMosIsNotNull())
						if (voCareContext.getEpisodeOfCare().getResponsibleHCP().getMos().getNameIsNotNull())
							strHCP = voCareContext.getEpisodeOfCare().getResponsibleHCP().getMos().getName().toString();

		return strHCP;
	}

	private void setFormMode(FormMode view)
	{
		form.setMode(view);
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{

		if (formName.equals(form.getForms().Clinical.ClinicalDiAssociations) && result.equals(DialogResult.OK))
		{
			// Set the complication checkbox when "is a complication of" negative is set in the Clinical DIAssociations
			if (!form.ctnDetails().chkComplication().getValue() && isAtLeastOneComplication())
			{
				form.ctnDetails().chkComplication().setValue(true);
			}
		}
		if (formName.equals(form.getForms().Clinical.PatientDiagnosisChecklistDialog))
			open();

	}

	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			isBtnCloseVisible(isDialog());
		}
		else
		{
			isBtnCloseVisible(false);
			form.ctnDetails().chkPMH().setEnabled(form.ctnDetails().chkPMH().getValue() == false);

			PatientDiagnosisVo voPatientDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
			boolean newRecord = voPatientDiagnosis == null || voPatientDiagnosis.getID_PatientDiagnosis() == null;
			form.ctnDetails().setcustomControlAuthoringEnabled(newRecord);
		}

		enableChkResolved();
		updateControlsState();
	}

	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onGrdDiagnosisSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		grdDiagnosisSelectionChanged();
	}

	private void grdDiagnosisSelectionChanged()
	{
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);

		if (form.grdDiagnosis().getValue() != null)
		{
			form.ctnDetails().setCollapsed(false);
			PatientDiagnosisListVo voPatDiagShort = form.grdDiagnosis().getValue();
			PatientDiagnosisVo voPatDiag = domain.getDiagnosisVo(voPatDiagShort);

			if (voPatDiag != null && voPatDiag.getStatusHistoryIsNotNull())
				// WDEV-2535
				setTooltip(voPatDiag);
			else
				setTooltip(null);

			populateInstanceControls(voPatDiag);
			boolean isPrimaryDiagnosis = isPrimaryDiagnosisActive(voPatDiagShort);
			form.ctnDetails().chkPrimaryDiagnosis().setValue(isPrimaryDiagnosis);
			form.getContextMenus().getPastMedicalHistoryLinkingItem().setVisible(!isPrimaryDiagnosis);
			form.getLocalContext().setSelectedPatientDiagnosisVo(voPatDiag);
		}

		updateControlsState();
		updateContextMenus();
	}

	private void populateInstanceControls(PatientDiagnosisVo voPatDiag)
	{
		clearInstanceControls();

		if (voPatDiag.getCareContextIsNotNull()) //WDEV-14461
		form.ctnDetails().lblResponsibleHCP().setValue(getResponsibleHCP(voPatDiag.getCareContext()));
		else form.ctnDetails().lblResponsibleHCP().setValue(form.getGlobalContext().Core.getEpisodeofCareShort().getHcpDisplayString()); //WDEV-14461

		if (voPatDiag.getSysInfo() != null)
		{
			//wdev-13002
			AppUserVo tempUserVo = new AppUserVo();
			tempUserVo.setUsername(voPatDiag.getSysInfo().getCreationUser());
			AppUserShortVo tempUserShortVo = domain.getAppUser(tempUserVo);
			form.ctnDetails().qmbRecordingUser().setEditedText(tempUserShortVo != null ? tempUserShortVo.getUserRealName():null);
			//-------------
			//form.ctnDetails().qmbRecordingUser().setEditedText(voPatDiag.getSysInfo().getCreationUser());

			if (voPatDiag.getSysInfo().getCreationDateTime() != null)
				form.ctnDetails().dtimRecordingDateTime().setValue(voPatDiag.getSysInfo().getCreationDateTime());
		}

		form.ctnDetails().customControlCodingItem().setValue(voPatDiag);

		form.ctnDetails().cmbLaterality().setValue(voPatDiag.getDiagLateralityIsNotNull() ? voPatDiag.getDiagLaterality() : null);
		form.ctnDetails().txtSite().setValue(voPatDiag.getSiteTextIsNotNull() ? voPatDiag.getSiteText() : "");
		form.ctnDetails().pdtDateDiagnosed().setValue(voPatDiag.getDiagnosedDateIsNotNull() ? voPatDiag.getDiagnosedDate() : null);
		form.ctnDetails().dteOnset().setValue(voPatDiag.getDateOnsetIsNotNull() ? voPatDiag.getDateOnset() : null);
		form.ctnDetails().chkResolved().setValue(voPatDiag.getIsResolvedIsNotNull() ? voPatDiag.getIsResolved().booleanValue() : false);
		form.ctnDetails().dteResolved().setValue(voPatDiag.getDateResolvedIsNotNull() ? voPatDiag.getDateResolved() : null);
		form.ctnDetails().chkComplication().setValue(voPatDiag.getIsComplicationIsNotNull() ? voPatDiag.getIsComplication().booleanValue() : false);
		form.ctnDetails().chklistInformed().setValues(voPatDiag.getInformedOfDiagnosis());
		form.ctnDetails().chkCancerDiagnosis().setValue(voPatDiag.getIsCancerDiagnosisIsNotNull() ? voPatDiag.getIsCancerDiagnosis().booleanValue() : false);// wdev-3256

		form.ctnDetails().cmbStatus().setValue(voPatDiag.getCurrentStatusIsNotNull() ? voPatDiag.getCurrentStatus().getStatus() : null);// wdev-1511
		form.ctnDetails().customControlAuthoring().setValue(voPatDiag.getAuthoringInfo());
		
		form.ctnDetails().chkPrimaryDiagnosis().setValue(false);
		if (voPatDiag.getPrimaryForCareSpellsIsNotNull())
		{
			for (int i = 0; i < voPatDiag.getPrimaryForCareSpells().size(); i++)
			{
				if ((voPatDiag.getPrimaryForCareSpells().get(i).getCareContextIsNotNull()) && (voPatDiag.getPrimaryForCareSpells().get(i).getCareContext().getEpisodeOfCareIsNotNull()) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()) && (form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull()) && (voPatDiag.getPrimaryForCareSpells().get(i).getCareContext().getEpisodeOfCare().getID_EpisodeOfCare().equals(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getID_EpisodeOfCare())))
					form.ctnDetails().chkPrimaryDiagnosis().setValue(true);
			}
		}

		form.ctnDetails().chkPMH().setValue(voPatDiag.getIsPMHIsNotNull() ? voPatDiag.getIsPMH().booleanValue() : false);
		if (voPatDiag.getSourceofInformationIsNotNull() && !voPatDiag.getSourceofInformation().equals(SourceofInformation.CLINICALCONTACT))
		{
			form.ctnDetails().cmbSourceOfInfo().setValue(voPatDiag.getSourceofInformation());
		}
		else
		{
			form.ctnDetails().cmbSourceOfInfo().setValue(null);
		}
		// Resolved
		form.ctnDetails().chkResolved().setValue(voPatDiag.getIsResolvedIsNotNull() && voPatDiag.getIsResolved().booleanValue());
		form.ctnDetails().dteResolved().setValue(voPatDiag.getDateResolved());
		//form.ctnDetails().customControlResolved().setValue(voPatDiag.getResolvedHCP());
		form.ctnDetails().customControlMos().setValue(voPatDiag.getResolvedHCP());
		form.ctnDetails().chklistBasisForDiagnosis().setValues(voPatDiag.getBasisofDiagnosis());

		form.getLocalContext().setSelectedPatientDiagnosisVo(voPatDiag);

		updateContextMenus();
	}

	protected void updateContextMenus()
	{
		form.getContextMenus().hideAllPastMedicalHistoryMenuItems();
		if (form.getMode().equals(FormMode.VIEW))
		{
			if (form.grdDiagnosis().getSelectedRowIndex() >= 0)
			{
				PatientDiagnosisListVo voPatientDiagnosisList = form.grdDiagnosis().getValue();
				boolean isPrimaryDiagnosis = isPrimaryDiagnosisActive(voPatientDiagnosisList);
				grdDiagnosisRow selectedRow = form.grdDiagnosis().getSelectedRow();
				boolean hasAssociations = selectedRow != null && selectedRow.getColAssociations() != null;

				String diagnosisOrComplication = (isComplication(voPatientDiagnosisList) ? "Complication" : "Diagnosis");
				form.getContextMenus().getPastMedicalHistoryEditItem().setText("Edit " + diagnosisOrComplication);
				form.getContextMenus().getPastMedicalHistoryLinkingItem().setText("Mark " + diagnosisOrComplication + " as Primary");

				form.getContextMenus().getPastMedicalHistoryNewItem().setVisible(true);
				form.getContextMenus().getPastMedicalHistoryEditItem().setVisible(true);
				form.getContextMenus().getPastMedicalHistoryLinkingItem().setVisible(!isPrimaryDiagnosis);
				form.getContextMenus().getPastMedicalHistoryViewAssociationsItem().setVisible(hasAssociations);
			}
			else
			{
				form.getContextMenus().getPastMedicalHistoryNewItem().setVisible(true);
				form.getContextMenus().getPastMedicalHistoryEditItem().setVisible(false);
				form.getContextMenus().getPastMedicalHistoryLinkingItem().setVisible(false);
			}
		}
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PastMedicalHistory.New :
				newInstance();
			break;

			case GenForm.ContextMenus.PastMedicalHistory.Edit :
				updateInstance();
			break;

			case GenForm.ContextMenus.PastMedicalHistory.Linking :
				markProblemasPrimary();
			break;

			case GenForm.ContextMenus.PastMedicalHistory.ViewAssociations :
				viewAssociations();
			break;
		}
	}

	private PatientDiagnosisVo populateDataFromScreen()
	{
		PatientDiagnosisVo voPatDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();

		if (voPatDiagnosis == null)
		{
			voPatDiagnosis = new PatientDiagnosisVo();

			// For newly created PatientDiagnosis set the EpisodeOfCare, CareContext and ClinicalContact
			voPatDiagnosis.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			voPatDiagnosis.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voPatDiagnosis.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		}

		IClinicalCodingValue voResult = form.ctnDetails().customControlCodingItem().getValue();
		if (voResult != null)
		{
			if (voResult.getIClinicalCodingValue() instanceof DiagLiteVo)
			{
				DiagLiteVo voDiagnosis = (DiagLiteVo) voResult.getIClinicalCodingValue();
				if (voDiagnosis.getID_Diagnosis() != null && voDiagnosis.getID_Diagnosis().intValue() == -1 )    //wdev-15388
					voPatDiagnosis.setDiagnosis(null);
				else
					voPatDiagnosis.setDiagnosis(voDiagnosis);

				voPatDiagnosis.setDiagnosisDescription(voResult.getIClinicalCodingValueDescription());
			}
			else
				throw new CodingRuntimeException("DiagLiteVo expected from component");
		}
		else
		// http://jira/browse/WDEV-3518 - If no description is entered set the equivalent field in the vo to null;
		{
			voPatDiagnosis.setDiagnosisDescription(null);
		}

		voPatDiagnosis.setDiagLaterality(form.ctnDetails().cmbLaterality().getValue());
		voPatDiagnosis.setSiteText(form.ctnDetails().txtSite().getValue());

		voPatDiagnosis.setDiagnosedDate(form.ctnDetails().pdtDateDiagnosed().getValue() != null ? form.ctnDetails().pdtDateDiagnosed().getValue() : null);
		voPatDiagnosis.setDateOnset(form.ctnDetails().dteOnset().getValue());

		voPatDiagnosis.setDateResolved(form.ctnDetails().dteResolved().getValue());
		voPatDiagnosis.setIsComplication(new Boolean(form.ctnDetails().chkComplication().getValue()));
		voPatDiagnosis.setIsCancerDiagnosis(new Boolean(form.ctnDetails().chkCancerDiagnosis().getValue()));

		voPatDiagnosis.setInformedOfDiagnosis(form.ctnDetails().chklistInformed().getValues());
		voPatDiagnosis.setAuthoringInfo(form.ctnDetails().customControlAuthoring().getValue());

		if (form.ctnDetails().chkPMH().getValue())
		{
			voPatDiagnosis.setIsPMH(Boolean.TRUE);
			voPatDiagnosis.setSourceofInformation(form.ctnDetails().cmbSourceOfInfo().getValue());
		}
		else
		{
			voPatDiagnosis.setIsPMH(Boolean.FALSE);
			voPatDiagnosis.setSourceofInformation(SourceofInformation.CLINICALCONTACT);
		}

		if (form.ctnDetails().chkResolved().getValue())
		{
			voPatDiagnosis.setDateResolved(form.ctnDetails().dteResolved().getValue());
			voPatDiagnosis.setIsResolved(new Boolean(true));
			//voPatDiagnosis.setResolvedHCP(form.ctnDetails().customControlResolved().getValue());
			voPatDiagnosis.setResolvedHCP(form.ctnDetails().customControlMos().getValue());
		}
		else
		{
			voPatDiagnosis.setDateResolved(null);
			voPatDiagnosis.setIsResolved(new Boolean(false));
			voPatDiagnosis.setResolvedHCP(null);
		}
		// Basis of Diagnosis
		voPatDiagnosis.setBasisofDiagnosis(form.ctnDetails().chklistBasisForDiagnosis().getValues());

		// Primary Diagnosis
		setCsPrimaryDiagnosis(voPatDiagnosis, form.ctnDetails().chkPrimaryDiagnosis().getValue());

		// wdev-1511
		if (form.ctnDetails().cmbStatus().getValue() != null)
		{
			PatientDiagnosisStatusVoCollection voColl = voPatDiagnosis.getStatusHistory();
			if (voColl == null)
				voColl = new PatientDiagnosisStatusVoCollection();

			PatientDiagnosisStatusVo voStatus = new PatientDiagnosisStatusVo();

			voStatus.setStatus(form.ctnDetails().cmbStatus().getValue());
			//wdev-11963
			if(form.ctnDetails().customControlAuthoring().getValue() != null )
			{
				voStatus.setAuthoringHCP(form.ctnDetails().customControlAuthoring().getValue().getAuthoringHcp());
				voStatus.setAuthoringDateTime(form.ctnDetails().customControlAuthoring().getValue().getAuthoringDateTime());
			}
			//------------------

			// WDEV-943
			if (voPatDiagnosis.getCurrentStatus() == null)
			{
				voColl.add(voStatus);
				voPatDiagnosis.setStatusHistory(voColl);
				voPatDiagnosis.setCurrentStatus(voStatus);
			}
			else
			{
				if (voPatDiagnosis.getCurrentStatus().getStatusIsNotNull() && voPatDiagnosis.getCurrentStatus().getStatus().getId() != form.ctnDetails().cmbStatus().getValue().getId())
				{
					voColl.add(voStatus);
					voPatDiagnosis.setStatusHistory(voColl);
					voPatDiagnosis.setCurrentStatus(voStatus);
				}
			}
		}

		return voPatDiagnosis;
	}

	private void setCsPrimaryDiagnosis(PatientDiagnosisVo voPatDiagnosis, boolean isChkPrimaryChecked)
	{
		CSPrimaryDiagnosisVo voCSPrimaryDiagnosis = getPrimaryDiagnosisRecord(voPatDiagnosis);
		if (voCSPrimaryDiagnosis != null || isChkPrimaryChecked)
		{
			if (voCSPrimaryDiagnosis == null)
			{
				voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(new CSPrimaryDiagnosisVo(), voPatDiagnosis, isChkPrimaryChecked);
				if (voPatDiagnosis.getPrimaryForCareSpells() == null)
					voPatDiagnosis.setPrimaryForCareSpells(new CSPrimaryDiagnosisVoCollection());
				voPatDiagnosis.getPrimaryForCareSpells().add(voCSPrimaryDiagnosis);
			}
			else
			{
				int index = voPatDiagnosis.getPrimaryForCareSpells().indexOf(voCSPrimaryDiagnosis);
				if (index >= 0)
				{
					voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(voCSPrimaryDiagnosis, voPatDiagnosis, isChkPrimaryChecked);
					voPatDiagnosis.getPrimaryForCareSpells().set(index, voCSPrimaryDiagnosis);
				}
			}
		}
	}

	protected void onBtnAssociationsClick() throws PresentationLogicException
	{
		PatientDiagnosisVo patientDiagnosisVo = form.getLocalContext().getSelectedPatientDiagnosisVo();
		if (patientDiagnosisVo == null)
			patientDiagnosisVo = new PatientDiagnosisVo();

		patientDiagnosisVo.setDiagnosisDescription(form.ctnDetails().customControlCodingItem().getDescription());

		form.getGlobalContext().Clinical.setClinicalDIassociationsFormMode(form.getMode());
		form.getGlobalContext().Clinical.PatientSummary.setPrimaryAssociation(patientDiagnosisVo);
		engine.open(form.getForms().Clinical.ClinicalDiAssociations);
	}

	private Specialty getSpecialty()
	{
		if ((form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()) && (form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty();
		}
		else if ((form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()) && (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}

	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			saveCDIAssociations();
			
			resetPIDBarText();

			form.getLocalContext().setSelectedPatientDiagnosisVo(null);
			open();
			return;
		}

	}

	private void resetPIDBarText()
	{
		if (form.getGlobalContext().Core.getPatientShort() == null
			|| form.getLocalContext().getSelectedPatientDiagnosisVo().getPrimaryForCareSpells() == null
			|| (form.getLocalContext().getSelectedPatientDiagnosisVo().getPrimaryForCareSpellsIsNotNull()
					&& form.getLocalContext().getSelectedPatientDiagnosisVo().getPrimaryForCareSpells().size() == 0) )
			return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getEpisodeofCareShort()));
	}


	private void saveCDIAssociations()
	{
		ClinicalDIAssociationVoCollection voDIAssociation = form.getGlobalContext().Clinical.getClinicalDIAssociationVoCollection();
		if (voDIAssociation != null && voDIAssociation.size() > 0)
		{
			setPrimaryDiagnosis(voDIAssociation);
			saveDIAssociations(voDIAssociation);
		}
	}

	protected void onChkPMHValueChanged() throws PresentationLogicException
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (form.ctnDetails().chkPMH().getValue())
			{
				form.ctnDetails().cmbSourceOfInfo().setEnabled(true);
			}
			else
			{
				form.ctnDetails().cmbSourceOfInfo().setValue(null);
				form.ctnDetails().cmbSourceOfInfo().setEnabled(false);
			}
		}
	}

	public void clearInstanceControls()
	{
		form.ctnDetails().customControlCodingItem().clear();
		form.ctnDetails().cmbLaterality().setValue(null);
		form.ctnDetails().txtSite().setValue(null);
		form.ctnDetails().pdtDateDiagnosed().setValue(null);
		form.ctnDetails().dteOnset().setValue(null);
		form.ctnDetails().chkComplication().setValue(false);
		form.ctnDetails().cmbStatus().setValue(null);
		form.ctnDetails().chklistInformed().setValues(null);
		form.ctnDetails().qmbRecordingUser().setValue(null);
		form.ctnDetails().dtimRecordingDateTime().setValue(null);
		form.ctnDetails().customControlAuthoring().setValue(null);
		form.ctnDetails().chkPrimaryDiagnosis().setValue(false);
		form.ctnDetails().chklistInformed().clear();
		form.ctnDetails().lblResponsibleHCP().setValue("");
		form.ctnDetails().cmbSourceOfInfo().setValue(null);
		form.ctnDetails().chkPMH().setValue(false);
		form.ctnDetails().chkPrimaryDiagnosis().setValue(false);
		form.ctnDetails().chkResolved().setValue(false);
		//form.ctnDetails().customControlResolved().clear();
		form.ctnDetails().customControlMos().clear();
		form.ctnDetails().dteResolved().setValue(null);
		form.ctnDetails().chklistBasisForDiagnosis().setValues(null);
		form.ctnDetails().chkCancerDiagnosis().setValue(false); //WDEV-14936
		
		this.bindchklistInformedLookup();
	}

	public void newInstance() throws PresentationLogicException
	{
		clearInstanceControls();

		form.getLocalContext().setSelectedPatientDiagnosisVo(null);

		form.setMode(FormMode.EDIT);

		// Default the Recording User and Date
		form.ctnDetails().dtimRecordingDateTime().setValue(new DateTime());

		Object hcpLite = domain.getHcpLiteUser();
		HcpLiteVo hcp = hcpLite != null ? (HcpLiteVo) hcpLite : null;
		String hcpString = hcpLite != null ? (((HcpLiteVo) hcpLite).getName() != null ? ((HcpLiteVo) hcpLite).getName().toString() : null) : null;

		form.ctnDetails().qmbRecordingUser().newRow(hcp, hcpString);
		form.ctnDetails().qmbRecordingUser().setValue(hcp);

		// WDEV-1038
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()) //WDEV-14461
		form.ctnDetails().lblResponsibleHCP().setValue(getResponsibleHCP(form.getGlobalContext().Core.getCurrentCareContext()));
		else form.ctnDetails().lblResponsibleHCP().setValue(form.getGlobalContext().Core.getEpisodeofCareShort().getHcpDisplayString()); //WDEV-14461

		form.ctnDetails().GroupSelection().setEnabled(true);
		form.ctnDetails().GroupSelection().setValue(GroupSelectionEnumeration.rdoSpecialty);
		setInitialCustomControlCodingSettings();
		form.ctnDetails().customControlAuthoring().initializeComponent();
		form.ctnDetails().setCollapsed(false);
		updateContextMenus();
		form.ctnDetails().imbStatus().setTooltip("No history");			//wdev-17357
	}

	// WDEV-2253
	private void setInitialCustomControlCodingSettings()
	{
		form.ctnDetails().customControlCodingItem().setSearchAllSelected(Boolean.FALSE);
		form.ctnDetails().customControlCodingItem().setHotlist(Boolean.TRUE);
	}

	public boolean save() throws PresentationLogicException 
	{
		Boolean savePmh = isPMHToBeSaved();

		PatientDiagnosisVo voPatientDiagnosis = populateDataFromScreen();	
		//wdev-11963
		if(form.ctnDetails().customControlAuthoring().getValue() == null)
		{
			engine.showErrors(new String[]{"Authoring HCP and Date/Time are mandatory."});
			return false;
		}
		//----------------
		String[] uiErrors = validateUIRules();
		
		return saveDiagnosisRecord(voPatientDiagnosis, savePmh, uiErrors);
	}

	/**
	 * @param voPatientDiagnosis
	 * @param savePmh
	 * @return boolean
	 * @throws PresentationLogicException
	 */
	private boolean saveDiagnosisRecord(PatientDiagnosisVo voPatientDiagnosis, Boolean savePmh, String[] uiErrors) throws PresentationLogicException
	{
		String[] errors = voPatientDiagnosis.validate(uiErrors);
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			voPatientDiagnosis = domain.saveDiagnosisVo(voPatientDiagnosis, form.getGlobalContext().Core.getPatientShort(), savePmh);
			if (isDialog())
			{
				form.getGlobalContext().Clinical.setDialogFormName(engine.getFormName());
			}
		}
		catch (StaleObjectException sox)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			onFormOpen();
			return false;
		}
		catch (UniqueKeyViolationException ue)
		{
			engine.showMessage(ue.getMessage());
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showErrors(new String[]{e.getMessage()});
			return false;
		}

		// Wdev-1326
		setReturnToFormDescription(voPatientDiagnosis);

		form.getLocalContext().setSelectedPatientDiagnosisVo(voPatientDiagnosis);

		return true;
	}

	private void setReturnToFormDescription(PatientDiagnosisVo voPatientDiagnosis)
	{
		if ((form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull()) && (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())))
		{
			// Set the CDI Description for the return to form link
			String str = form.getGlobalContext().Clinical.getReturnToFormCDIDescriptionIsNotNull() ? form.getGlobalContext().Clinical.getReturnToFormCDIDescription() : "";
			StringBuffer sb = new StringBuffer();
			sb.append(str);
			if (sb.length() > 0)
				sb.append(", ");

			sb.append(voPatientDiagnosis.getDiagnosisDescription());

			form.getGlobalContext().Clinical.setReturnToFormCDIDescription(sb.toString());
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		}
	}

	

	public void updateControlsState()
	{
		boolean bAddnew = form.getMode().equals(FormMode.EDIT) && (form.getLocalContext().getSelectedPatientDiagnosisVo() == null || form.getLocalContext().getSelectedPatientDiagnosisVo().getID_PatientDiagnosis() == null);

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.ctnDetails().GroupSelection().setEnabled(bAddnew);
			form.ctnDetails().setcustomControlCodingItemEnabled(true);
			form.ctnDetails().customControlAuthoring().setIsRequiredPropertyToControls(true);
		}

		form.ctnDetails().customControlCodingItem().setParentEditing(new Boolean(form.getMode().equals(FormMode.EDIT)));
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(form.grdDiagnosis().getSelectedRowIndex() >= 0);
			// Requested by KOC - Temporary Change in functionality for BHRT 1.8 release - Button needs to be hidden
			form.btnCheckList().setVisible(false);
			/*
			 * if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()) form.btnCheckList().setVisible(true); else form.btnCheckList().setVisible(false);
			 */

		}

		updateContextMenus();
	}

	public void open() throws PresentationLogicException
	{
		clearGlobalContextVariables();
		PatientDiagnosisListVoCollection voPatDiagColl = null;
		if (form.chkExcludeResolved().getValue())
		{
			voPatDiagColl = domain.listDiagnosisComplicationsExcludeResolvedByPatient(form.getGlobalContext().Core.getPatientShort());
		}
		else
		{
			voPatDiagColl = domain.listDiagnosisComplicationsByPatient(form.getGlobalContext().Core.getPatientShort());
		}

		populateDiagnosisGrid(voPatDiagColl);
		clearInstanceControls();
		form.ctnDetails().imbStatus().setTooltip("No history");			//wdev-17357

		form.ctnDetails().setCollapsed(true);
		setFormMode(FormMode.VIEW);
		reselectSavedRecord();

		//WDEV-14033
		updateControlsState();
		updateContextMenus();
		
						
	}

	private void populateDiagnosisGrid(PatientDiagnosisListVoCollection voPatDiagColl)
	{
		form.grdDiagnosis().getRows().clear();
		if (voPatDiagColl != null)
		{
			for (int i = 0; i < voPatDiagColl.size(); i++)
			{
				GenForm.grdDiagnosisRow row = form.grdDiagnosis().getRows().newRow();
				PatientDiagnosisListVo patientDiagnosisListVo = voPatDiagColl.get(i);

				setPatientDiagnosisRowData(row, patientDiagnosisListVo);
			}
		}

	}

	// WDEV-2535
	private void setTooltip(PatientDiagnosisVo vo)
	{
		if (vo != null && vo.getStatusHistoryIsNotNull() && vo.getStatusHistory().size() > 0)
		{
			PatientDiagnosisStatusVoCollection collVo = vo.getStatusHistory().sort(SortOrder.DESCENDING);

			String tooltip = "";
			String setFont = "<FONT FACE='Times New Roman' SIZE='2'>";
			String endFont = "</FONT>";
			String table = "<TABLE CELLPADDING='1' CELLSPACING='1' BORDER='3' ><TR><TD BGCOLOR=\'#BBBBFF\' ALIGN='LEFT'>";
			String endStatus = endFont + "<B></TD></TR><TR>";
			String dateTime = "<TD colspan=1 width=60% align=\'LEFT\'> " + setFont;
			String hcp = endFont + "</TD><TD colspan=1 width=60% align=\'LEFT\'>" + setFont;
			String end = endFont + "</TD></TR><TR></TABLE>";

			for (int i = 0; i < collVo.size(); i++)
			{
				tooltip += table + setFont + "<B>" + (i + 1) + ". " + collVo.get(i).getStatus() + endStatus + endFont + dateTime + collVo.get(i).getAuthoringDateTime() + hcp + collVo.get(i).getAuthoringHCP() + end;
			}

			form.ctnDetails().imbStatus().setTooltip(tooltip);
		}
		else
			form.ctnDetails().imbStatus().setTooltip("No history");				//wdev-17357
	}

	private void setPatientDiagnosisRowData(GenForm.grdDiagnosisRow row, PatientDiagnosisListVo patientDiagnosisListVo)
	{
		row.setColDiagnosis(patientDiagnosisListVo.getDiagnosisDescriptionIsNotNull() ? patientDiagnosisListVo.getDiagnosisDescription() : "");
		row.setColDateDiagnosed(patientDiagnosisListVo.getDiagnosedDateIsNotNull() ? patientDiagnosisListVo.getDiagnosedDate() : null);
		row.setColAuthoringHCPDateTime(patientDiagnosisListVo.getAuthoringInfoIsNotNull() ? patientDiagnosisListVo.getAuthoringInfo().toString(): null);

		// WDEV-943
		if (patientDiagnosisListVo.getCurrentStatusIsNotNull())
		{
			row.setColStatus(patientDiagnosisListVo.getCurrentStatus().getStatusIsNotNull() ? patientDiagnosisListVo.getCurrentStatus().getStatus().getText() : "");
		}

		if ((patientDiagnosisListVo.getIsComplicationIsNotNull()) && (patientDiagnosisListVo.getIsComplication().booleanValue()))
		{
			row.setColComplication(form.getImages().Core.AnswerBox_NotAvailable);
		//WDEV-13959
			row.setTooltipForColComplication("Complication");
		}
		else
		{
			row.setTooltipForColComplication("");
		}

		row.setColPrimary(isPrimaryDiagnosisActive(patientDiagnosisListVo) ? getPrimaryImage() : null);
		//WDEV-13959 
		if (row.getColPrimary() != null)
		{
			row.setTooltipForColPrimary("Primary Diagnosis");
		}
		else
		{
			row.setTooltipForColPrimary("");
		}
		
		// WDEV-1420
		if (domain.checkIfClinicalCDIAssociationsExist(patientDiagnosisListVo) == Boolean.TRUE)
		{
			row.setColAssociations(form.getImages().Core.AssociationsLHS);
			row.setTooltipForColAssociations("Linking Association Present");
		}
		else
		{
			row.setColAssociationsEmpty(true);
			row.setTooltipForColAssociations("");
		}

		if (patientDiagnosisListVo.getSysInfoIsNotNull() && patientDiagnosisListVo.getSysInfo().getLastupdateUser() != null)
		{
			row.setColAudit(form.getImages().Core.EditDisabled);
		//WDEV-13959
			row.setTooltipForColAudit("Diagnosis has Audit Information");
		}
		else
		{
			row.setTooltipForColAudit("");
		}
		row.setValue(patientDiagnosisListVo);
	}

	private void reselectSavedRecord()
	{
		if (form.getLocalContext().getSelectedPatientDiagnosisVoIsNotNull())
		{
			PatientDiagnosisVo voPatientDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
			if (voPatientDiagnosis != null)
			{
				form.grdDiagnosis().setValue(voPatientDiagnosis);
				grdDiagnosisSelectionChanged();
			}
		}
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
		form.ctnDetails().GroupSelection().setEnabled(false);
		form.ctnDetails().GroupSelection().setValue(null);
		updateContextMenus();
	}

	private boolean saveDIAssociations(ClinicalDIAssociationVoCollection voDIAssociation)
	{
		if (voDIAssociation != null)
		{
			String[] errors = voDIAssociation.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return false;
			}

			try
			{
				domain.saveClinicalDiAssociation(voDIAssociation);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return false;
			}
		}

		return true;
	}

	private void clearGlobalContextVariables()
	{
		form.getGlobalContext().Clinical.setClinicalDIAssociationVoCollection(null);
	}

	private boolean isAtLeastOneComplication()
	{
		ClinicalDIAssociationVoCollection voColl = form.getGlobalContext().Clinical.getClinicalDIAssociationVoCollection();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if (voColl.get(i).getAssociationDescription() != null && voColl.get(i).getAssociationDescription().equals(CDIAssociationDescription.ISACOMPLICATIONOF))
				return true;
		}

		return false;
	}

	private void setPrimaryDiagnosis(ClinicalDIAssociationVoCollection voDIAssociation)
	{
		PatientDiagnosisVo voPatientDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
		for (int i = 0; voPatientDiagnosis != null && voDIAssociation != null && i < voDIAssociation.size(); i++)
		{
			if (voDIAssociation.get(i).getPrimDiagnosis() == null || voDIAssociation.get(i).getPrimDiagnosis().getID_PatientDiagnosis() == null)
				voDIAssociation.get(i).setPrimDiagnosis(voPatientDiagnosis);
		}
	}

	protected void viewAssociations()
	{
		grdDiagnosisRow row = form.grdDiagnosis().getSelectedRow();
		if (row == null)
			throw new CodingRuntimeException("No row selected");

		form.getGlobalContext().Clinical.setClinicalDIassociationsFormMode(FormMode.VIEW);
		form.getGlobalContext().Clinical.PatientSummary.setPrimaryAssociation(row.getValue());
		engine.open(form.getForms().Clinical.ClinicalDiAssociations);
	}

	private boolean isComplication(PatientDiagnosisListVo voPatientDiagnosisList)
	{
		return voPatientDiagnosisList != null && voPatientDiagnosisList.getIsComplicationIsNotNull() && voPatientDiagnosisList.getIsComplication().booleanValue();
	}

	private CSPrimaryDiagnosisVo populatePrimaryDiagnosisDataFromScreen(CSPrimaryDiagnosisVo primaryDiagnosisVo, PatientDiagnosisRefVo patientDiagnosisRef, boolean isPrimary)
	{
		if (primaryDiagnosisVo == null)
			primaryDiagnosisVo = new CSPrimaryDiagnosisVo();
		primaryDiagnosisVo.setAuthoringInformation(form.ctnDetails().customControlAuthoring().getValue());
		primaryDiagnosisVo.setDiagnosis(patientDiagnosisRef);
		// WDEV-11543
		primaryDiagnosisVo.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		primaryDiagnosisVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		primaryDiagnosisVo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		primaryDiagnosisVo.setIsActive(new Boolean(isPrimary));
		return primaryDiagnosisVo;
	}

	private void markProblemasPrimary() throws PresentationLogicException
	{
		PatientDiagnosisListVo voPatientDiagnosisList = form.grdDiagnosis().getValue();
		if (voPatientDiagnosisList == null)
		{
			engine.showErrors(new String[]{"Please select a Diagnosis / Complication"});
			return;
		}

		PatientDiagnosisVo voPatientDiagnosis = domain.getDiagnosisVo(voPatientDiagnosisList);

		setCsPrimaryDiagnosis(voPatientDiagnosis, true);

		if (saveDiagnosisRecord(voPatientDiagnosis, Boolean.FALSE, null))
		{
			PatientDiagnosisVo voPatDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
			GenForm.grdDiagnosisRow row = form.grdDiagnosis().getRowByValue(voPatDiagnosis);
			if (row != null)
			{
				setPatientDiagnosisRowData(row, voPatDiagnosis);
				grdDiagnosisSelectionChanged();
			}
		}
	}

	private Image getPrimaryImage()
	{
		return form.getImages().Core.Pin;
	}

	private void setContextMenu()
	{
		form.getContextMenus().getPastMedicalHistoryNewItem().setText("New Diagnosis / Complication");
		form.getContextMenus().getPastMedicalHistoryEditItem().setText("Edit");
		form.getContextMenus().getPastMedicalHistoryLinkingItem().setText("Mark as Primary");
		form.getContextMenus().getPastMedicalHistoryLinkingItem().setIcon(getPrimaryImage());
	}

	private boolean isDiagnosisFormCalledFromTumourDetailsOrCancerReferral()
	{
		if (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() 
			&& form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.VIEW) 
			&& engine.getPreviousNonDialogFormName() != null 
			&& (engine.getPreviousNonDialogFormName().equals(form.getForms().Oncology.TumourDetails)
				|| engine.getPreviousNonDialogFormName().equals(form.getForms().Oncology.CancerReferral)) )
			return true;

		return false;
	}

	private void resetGlobalContext()
	{
		form.getGlobalContext().Clinical.setReturnToFormMode(null);
		form.getGlobalContext().Clinical.setDialogFormName(null);
	}

	private void postInitialize() throws PresentationLogicException
	{
		FormMode mode = form.getGlobalContext().Clinical.getReturnToFormMode();

		/*
		 * WDEV-3048
		 */
		if (isDiagnosisFormCalledFromTumourDetailsOrCancerReferral())
		{
			form.setMode(FormMode.VIEW);
			// wdev-3556 EpisodeofCareShortVo episodeOfCare = form.getGlobalContext().Core.getEpisodeofCareShort();
			// populateDiagnosisGrid( domain.listDiagnosisComplicationEpisodeOfCareForCancerDiagnosis(episodeOfCare));
			form.btnNew().setText("Select");
			return;
		}
		else
		{
			form.btnNew().setText("New");
		}

		if (mode != null &&
				mode.equals(FormMode.EDIT) &&
					engine.getPreviousNonDialogFormName() != null && 
						((isDialog() && !engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.DiagnosisComplications)) ||
						 (isDialog() && !(engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientSummary) || engine.getPreviousNonDialogFormName().equals(form.getForms().Nursing.NursingAdmission)))))// WDEV-1548
		{
			newInstance();
			form.getGlobalContext().Clinical.setReturnToFormMode(null);
		}

		// WDEV-1421
		if ((engine.getPreviousNonDialogFormName() != null && engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientSummary) || engine.getPreviousNonDialogFormName() != null && engine.getPreviousNonDialogFormName().equals(form.getForms().Nursing.NursingAdmission)) && isDialog())
		{
			if (form.getGlobalContext().Clinical.getReturnToFormMode() == null)
			{
				newInstance();
				form.getGlobalContext().Clinical.setReturnToFormMode(null);
			}
			else if (form.getGlobalContext().Clinical.getReturnToFormModeIsNotNull() && form.getGlobalContext().Clinical.getReturnToFormMode().equals(FormMode.VIEW))
			{
				form.setMode(FormMode.VIEW);
				// Highlight the linked Diagnosis record.
				for (int i = 0; i < form.grdDiagnosis().getRows().size(); i++)
				{
					if (((form.grdDiagnosis().getRows().get(i).getValue() != null) && (form.getGlobalContext().Clinical.getSelectedPatientDiagnosisFromPatientSummaryIsNotNull()) && (form.grdDiagnosis().getRows().get(i).getValue().equals(form.getGlobalContext().Clinical.getSelectedPatientDiagnosisFromPatientSummary()))) || ((form.grdDiagnosis().getRows().get(i).getValue() != null) && (form.getGlobalContext().Clinical.getSelectedPatientDiagnosisFromNursingAdmissionIsNotNull()) && (form.grdDiagnosis().getRows().get(i).getValue().equals(form.getGlobalContext().Clinical.getSelectedPatientDiagnosisFromNursingAdmission()))))
					{
						form.grdDiagnosis().setValue(form.grdDiagnosis().getRows().get(i).getValue());

						grdDiagnosisSelectionChanged();

						if (form.getGlobalContext().Clinical.getSelectedPatientDiagnosisFromPatientSummaryIsNotNull())
							form.getGlobalContext().Clinical.setSelectedPatientDiagnosisFromPatientSummary(null);
						if (form.getGlobalContext().Clinical.getSelectedPatientDiagnosisFromNursingAdmissionIsNotNull())
							form.getGlobalContext().Clinical.setSelectedPatientDiagnosisFromNursingAdmission(null);
					}
				}
			}
		}
	}

	protected void onFormClosing(CancelArgs args) throws PresentationLogicException
	{
		form.getGlobalContext().Clinical.setClinicalDIassociationsFormMode(null);
	}

	private boolean isPrimaryDiagnosisActive(PatientDiagnosisListVo voPatDiagShort)
	{
		if (voPatDiagShort == null)
			return false;

		return isPrimaryDiagnosisActive(voPatDiagShort, voPatDiagShort.getPrimaryForCareSpells());
	}

	private boolean isPrimaryDiagnosisActive(PatientDiagnosisRefVo voPatDiagRef, CSPrimaryDiagnosisVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			CSPrimaryDiagnosisVo primary = voColl.get(i);
			
			boolean isActive = primary.getIsActiveIsNotNull() && primary.getIsActive().booleanValue();
			boolean sameDiagnosis = primary.getDiagnosisIsNotNull() && primary.getDiagnosis().equals(voPatDiagRef);
			
			// WDEV-11693 - Also check for EpisodeOfCare - as now PatientDiagnosis & CSPrimaryDiagnosis are recorded at this level
			boolean sameEpisodeOfCare = primary.getEpisodeOfCareIsNotNull() && primary.getEpisodeOfCare().equals(form.getGlobalContext().Core.getEpisodeofCareShort());
			boolean sameCareContext = (primary.getCareContextIsNotNull() && primary.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
										|| (!form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && !primary.getCareContextIsNotNull());

			if (isActive && sameDiagnosis && sameEpisodeOfCare && sameCareContext)
				return true;
		}
		return false;
	}

	private CSPrimaryDiagnosisVo getPrimaryDiagnosisRecord(PatientDiagnosisVo voPatDiagnosis)
	{
		if (voPatDiagnosis == null || voPatDiagnosis.getPrimaryForCareSpells() == null)
			return null;

		CSPrimaryDiagnosisVoCollection voColl = voPatDiagnosis.getPrimaryForCareSpells();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagnosis);
			
			// WDEV-11693 - Also check for EpisodeOfCare - as now PatientDiagnosis & CSPrimaryDiagnosis are recorded at this level
			boolean sameEpisodeOfCare = voColl.get(i).getEpisodeOfCareIsNotNull() && voColl.get(i).getEpisodeOfCare().equals(form.getGlobalContext().Core.getEpisodeofCareShort());
			boolean sameCareContext = (voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
										|| (!form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && !voColl.get(i).getCareContextIsNotNull());

			if (sameDiagnosis && sameEpisodeOfCare && sameCareContext)
				return voColl.get(i);
		}

		return null;
	}

	protected void onChkResolvedValueChanged() throws PresentationLogicException
	{
		enableChkResolved();
		setChkResolvedControls();
		setDefaultResolvedValue();
	}

	private void enableChkResolved()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			boolean enablePmhControl = form.ctnDetails().chkResolved().getValue() && form.ctnDetails().chkResolved().isEnabled();
			//form.ctnDetails().setcustomControlResolvedEnabled(enablePmhControl);
			form.ctnDetails().setcustomControlMosEnabled(enablePmhControl);
			form.ctnDetails().dteResolved().setEnabled(enablePmhControl);
			
			//start WDEV-14329 
			if (form.ctnDetails().chkResolved().getValue())
			{
				form.ctnDetails().customControlMos().isRequired(true);
			}
			//end
		}
	}

	private void setChkResolvedControls()
	{
		boolean resolved = form.ctnDetails().chkResolved().getValue();
		boolean isEditMode = form.getMode().equals(FormMode.EDIT);

		if (isEditMode && resolved == false)
		{
			//form.ctnDetails().customControlResolved().clear();
			form.ctnDetails().customControlMos().clear();
			form.ctnDetails().dteResolved().setValue(null);
		}
	}

	private void setDefaultResolvedValue()
	{
		if (form.ctnDetails().chkResolved().getValue())
		{
		//	form.ctnDetails().customControlResolved().setValue((HcpLiteVo) domain.getHcpLiteUser());
			form.ctnDetails().dteResolved().setValue(new Date());
		}
	}

	/*
	 * protected void onQmbResolvedByTextSubmited(String value) throws PresentationLogicException { form.ctnDetails().qmbResolvedBy().clear(); HcpCollection coll = getMedics(value);
	 * 
	 * for (int i = 0; i < coll.size(); i++) { Hcp med = coll.get(i); form.ctnDetails().qmbResolvedBy().newRow(med, med.toString()); } if (coll.size() == 1) { form.ctnDetails().qmbResolvedBy().setValue(coll.get(0)); } else if (coll.size() > 1) { form.ctnDetails().qmbResolvedBy().showOpened(); } }
	 */

	/*
	 * private HcpCollection getMedics(String value) { HcpFilter filter = new HcpFilter(); PersonName name = new PersonName(); name.setSurname(value); filter.setQueryName(name);
	 * 
	 * return domain.listMedics(filter); }
	 */

	// Check if PMH is not saved
	private Boolean isPMHToBeSaved()
	{
		if (form.ctnDetails().chkPMH().getValue() && isPmhSaved() == false)
			return Boolean.TRUE;

		return Boolean.FALSE;
	}

	private boolean isPmhSaved()
	{
		PatientDiagnosisVo voPatDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
		PatientDiagnosisListVo voPatDiagnosisListVo = form.grdDiagnosis().getValue();

		boolean hasPmhSaved = voPatDiagnosisListVo != null && voPatDiagnosisListVo.getIsPMHIsNotNull() && voPatDiagnosisListVo.getIsPMH().booleanValue();
		boolean isRecordSaved = voPatDiagnosis != null && voPatDiagnosis.getID_PatientDiagnosisIsNotNull();

		return isRecordSaved && hasPmhSaved;
	}

	private void initializeCustomControl()
	{
		form.ctnDetails().customControlCodingItem().setCodingItemType(CodingItemType.DIAGNOSIS);
		form.ctnDetails().customControlCodingItem().setHotlist(new Boolean(true));
		form.ctnDetails().customControlCodingItem().setSpecialty(getSpecialty());
		form.ctnDetails().customControlCodingItem().setClinicalTermMandatory(true);
		form.ctnDetails().customControlCodingItem().setDescriptionMandatory(true);
	}

	protected void onCustomControlCodingItemValueChanged() throws PresentationLogicException
	{
		if (form.ctnDetails().customControlCodingItem().isAllSelected() != null && form.ctnDetails().customControlCodingItem().isAllSelected().booleanValue())
		{
			form.ctnDetails().GroupSelection().setValue(GroupSelectionEnumeration.rdoAll);
			form.ctnDetails().customControlCodingItem().setHotlist(new Boolean(false));
			form.ctnDetails().customControlCodingItem().search();
		}
	}

	protected void onRadioButtonGroupSelectionValueChanged() throws PresentationLogicException
	{
		form.ctnDetails().customControlCodingItem().setHotlist(form.ctnDetails().GroupSelection().getValue().equals(GroupSelectionEnumeration.rdoAll) ? new Boolean(false) : new Boolean(true));
	}

	protected void onBtnEditClick() throws PresentationLogicException
	{
		updateInstance();
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		/*
		 * WDEV-3048
		 */
		if (isDiagnosisFormCalledFromTumourDetailsOrCancerReferral())
		{
			if (form.grdDiagnosis().getSelectedRow() == null)
			{
				displayErrorMessage("Select a diagnosis", true);
			}
			else
			{
				form.getGlobalContext().Oncology.setSelectedDiagnosisForPrimaryTumourDetails(form.getLocalContext().getSelectedPatientDiagnosisVo());
				engine.close(DialogResult.OK);
				resetGlobalContext();
			}
			return;
		}

		newInstance();
	}

	private void displayErrorMessage(String err, boolean isWarning)
	{
		ArrayList<String> error = new ArrayList<String>();
		error.add(err);

		String[] uniqError = new String[error.size()];
		error.toArray(uniqError);
		if (isWarning)
			engine.showErrors(WARNING, uniqError);
		else
			engine.showErrors(INVALID_RECORD, uniqError);
	}

	protected void onChkExcludeResolvedValueChanged() throws PresentationLogicException
	{
		form.grdDiagnosis().getRows().clear();
		form.grdDiagnosis().setValue(null);
		if (form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);

		open();
	}

	private void isBtnCloseVisible(boolean value)
	{
		form.btnClose().setEnabled(value);
		form.btnClose().setVisible(value);
	}

	private boolean isDialog()
	{
		return engine.isDialog();
	}

	protected void onBtnCloseClick() throws PresentationLogicException
	{
		// engine.open(form.getGlobalContext().Clinical.getReturnToFormName());
		if (isDiagnosisFormCalledFromTumourDetailsOrCancerReferral())
		{
			resetGlobalContext();
			form.getGlobalContext().Oncology.setSelectedDiagnosisForPrimaryTumourDetails(null);
		}

		engine.close(DialogResult.OK);
	}

	@Override
	protected void onBtnCheckListClick() throws PresentationLogicException
	{
		// Requested by KOC - Temporary Change in functionality for BHRT 1.8 release - Form is not to be displayed
		// engine.open(form.getForms().Clinical.PatientDiagnosisChecklistDialog);

	}

	//WDEV-14575
	@Override
	protected void onRIEDialogClosed(DialogResult result) throws PresentationLogicException
	{
		if (result.equals(DialogResult.OK))
		{
			resetPIDBarText();
		}
		
	}
}
