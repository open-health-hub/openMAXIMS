//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.documentgeneration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabRecipentsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.CorrespondenceStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.CorrespondenceStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.CorrespondenceStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.CorrespondenceStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.CorrespondenceStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.CorrespondenceStatus getValue()
				{
					return (ims.clinical.vo.lookups.CorrespondenceStatus)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.CorrespondenceStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbVerifyingHCPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdRecipientsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdRecipientsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolNameOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolName()
				{
					return (String)super.row.get(0);
				}
				public void setcolName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolPrimaryReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolPrimaryReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolPrimaryOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getcolPrimary()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolPrimary(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolPrimaryTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.clinical.vo.ClinicalCorrespondenceRecipientsVo getValue()
				{
					return (ims.clinical.vo.ClinicalCorrespondenceRecipientsVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.ClinicalCorrespondenceRecipientsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdRecipientsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdRecipientsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdRecipientsRow get(int index)
				{
					return new grdRecipientsRow(super.collection.get(index));
				}
				public grdRecipientsRow newRow()
				{
					return new grdRecipientsRow(super.collection.newRow());
				}
				public grdRecipientsRow newRow(boolean autoSelect)
				{
					return new grdRecipientsRow(super.collection.newRow(autoSelect));
				}
				public grdRecipientsRow newRowAt(int index)
				{
					return new grdRecipientsRow(super.collection.newRowAt(index));
				}
				public grdRecipientsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdRecipientsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdRecipientsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.clinical.vo.ClinicalCorrespondenceRecipientsVoCollection getValues()
				{
					ims.clinical.vo.ClinicalCorrespondenceRecipientsVoCollection listOfValues = new ims.clinical.vo.ClinicalCorrespondenceRecipientsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.ClinicalCorrespondenceRecipientsVo getValue()
				{
					return (ims.clinical.vo.ClinicalCorrespondenceRecipientsVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.ClinicalCorrespondenceRecipientsVo value)
				{
					super.grid.setValue(value);
				}
				public grdRecipientsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdRecipientsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdRecipientsRowCollection getRows()
				{
					return new grdRecipientsRowCollection(super.grid.getRows());
				}
				public grdRecipientsRow getRowByValue(ims.clinical.vo.ClinicalCorrespondenceRecipientsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdRecipientsRow(row);
				}
				public void setcolNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolPrimaryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolPrimaryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 432, 432, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(432), new Integer(432), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(-1), m_customControlAuthoringInfoForm, instance1 } );
				ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(-1), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlAuthoringInfoControl);
				Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 440, 522, 210, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Recording Date/Time (Verification):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 440, 490, 174, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Recording User (Verification):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 522, 124, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Verifying Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 498, 87, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Verifying HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 410, 106, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Document Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 432, 16, 314, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Select Clinical Data Items to be included in Document:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recipients:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 656, 520, 160, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 608, 488, 208, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 144, 520, 280, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 144, 408, 240, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbStatusTemp);
				cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
				super.addComboBox(cmbStatus);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 144, 496, 280, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_qmbVerifyingHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbVerifyingHCPTemp);
				qmbVerifyingHCPComboBox qmbVerifyingHCP = (qmbVerifyingHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbVerifyingHCPComboBox.class, m_qmbVerifyingHCPTemp);
				super.addComboBox(qmbVerifyingHCP);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 408, 368, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdRecipientsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuRecipientsOperations, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdRecipientsTemp);
				grdRecipientsGrid grdRecipients = (grdRecipientsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRecipientsGrid.class, m_grdRecipientsTemp);
				grdRecipients.addStringColumn("Name", 0, 0, 330, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdRecipients.addBoolColumn("Primary", 1, 1, -1, false, true, 0, true);
				super.addGrid(grdRecipients);
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 432, 32, 384, 368, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 398, 405, 26, 26, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, form_images_local.Core.InfoEnabled24, form_images_local.Core.InfoDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlAuthoringInfoVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlAuthoringInfoVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlAuthoringInfoEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlAuthoringInfoEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Label lblRecDate()
			{
				return (Label)super.getControl(1);
			}
			public Label lblRecUser()
			{
				return (Label)super.getControl(2);
			}
			public TextBox txtRecordingDateTime()
			{
				return (TextBox)super.getControl(8);
			}
			public TextBox txtRecordingUser()
			{
				return (TextBox)super.getControl(9);
			}
			public DateTimeControl dtimVerifying()
			{
				return (DateTimeControl)super.getControl(10);
			}
			public cmbStatusComboBox cmbStatus()
			{
				return (cmbStatusComboBox)super.getComboBox(0);
			}
			public qmbVerifyingHCPComboBox qmbVerifyingHCP()
			{
				return (qmbVerifyingHCPComboBox)super.getComboBox(1);
			}
			public grdRecipientsGrid grdRecipients()
			{
				return (grdRecipientsGrid)super.getGrid(0);
			}
			public TreeView treCDI()
			{
				return (TreeView)super.getControl(14);
			}
			public ImageButton imbStatus()
			{
				return (ImageButton)super.getControl(15);
			}
		}
		public static class tabCommentsOPDContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbOPFollowUpComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.OpdFollowUp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.OpdFollowUp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.OpdFollowUp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.OpdFollowUp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.OpdFollowUp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.OpdFollowUp getValue()
				{
					return (ims.clinical.vo.lookups.OpdFollowUp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.OpdFollowUp value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbOPReviewInComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.ReviewInDuration value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.ReviewInDuration getValue()
				{
					return (ims.clinical.vo.lookups.ReviewInDuration)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.ReviewInDuration value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdClinicalNotesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdClinicalNotesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(0);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(0)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(0, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColContextReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColContextReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColContextOpened()
				{
					super.row.showOpened(1);
				}
				public String getColContext()
				{
					return (String)super.row.get(1);
				}
				public void setColContext(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColContextTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColTextReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColTextReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColTextOpened()
				{
					super.row.showOpened(2);
				}
				public String getColText()
				{
					return (String)super.row.get(2);
				}
				public void setColText(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColTextTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdClinicalNotesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdClinicalNotesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdClinicalNotesRow get(int index)
				{
					return new grdClinicalNotesRow(super.collection.get(index));
				}
				public grdClinicalNotesRow newRow()
				{
					return new grdClinicalNotesRow(super.collection.newRow());
				}
				public grdClinicalNotesRow newRow(boolean autoSelect)
				{
					return new grdClinicalNotesRow(super.collection.newRow(autoSelect));
				}
				public grdClinicalNotesRow newRowAt(int index)
				{
					return new grdClinicalNotesRow(super.collection.newRowAt(index));
				}
				public grdClinicalNotesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdClinicalNotesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdClinicalNotesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addHtmlColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addHtmlColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdClinicalNotesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdClinicalNotesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdClinicalNotesRowCollection getRows()
				{
					return new grdClinicalNotesRowCollection(super.grid.getRows());
				}
				public grdClinicalNotesRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdClinicalNotesRow(row);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColContextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColContextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 499, 64, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Review in:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 470, 107, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Follow Up Details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 370, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Outpatient Clinical Notes (Objective / Plan / Instructions for Next Clinic) :", new Integer(0), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 120, 468, 168, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbOPFollowUpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbOPFollowUpTemp);
				cmbOPFollowUpComboBox cmbOPFollowUp = (cmbOPFollowUpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOPFollowUpComboBox.class, m_cmbOPFollowUpTemp);
				super.addComboBox(cmbOPFollowUp);
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 168, 496, 120, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbOPReviewInTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbOPReviewInTemp);
				cmbOPReviewInComboBox cmbOPReviewIn = (cmbOPReviewInComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOPReviewInComboBox.class, m_cmbOPReviewInTemp);
				super.addComboBox(cmbOPReviewIn);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 792, 416, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdClinicalNotesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.EDITABLE, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdClinicalNotesTemp);
				grdClinicalNotesGrid grdClinicalNotes = (grdClinicalNotesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdClinicalNotesGrid.class, m_grdClinicalNotesTemp);
				grdClinicalNotes.addBoolColumn("Select", 1, 1, 55, false, false, 0, true);
				grdClinicalNotes.addStringColumn("Context", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdClinicalNotes.addHtmlColumn("Text", 0, 0, -1, true, false, 0, true);
				super.addGrid(grdClinicalNotes);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 120, 496, 40, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
			}

			public cmbOPFollowUpComboBox cmbOPFollowUp()
			{
				return (cmbOPFollowUpComboBox)super.getComboBox(0);
			}
			public cmbOPReviewInComboBox cmbOPReviewIn()
			{
				return (cmbOPReviewInComboBox)super.getComboBox(1);
			}
			public grdClinicalNotesGrid grdClinicalNotes()
			{
				return (grdClinicalNotesGrid)super.getGrid(0);
			}
			public IntBox intOPReviewIn()
			{
				return (IntBox)super.getControl(6);
			}
		}
		public static class tabSummaryIPContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbIPFollowUPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.InpatientFollowUp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.InpatientFollowUp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.InpatientFollowUp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.InpatientFollowUp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.InpatientFollowUp value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.InpatientFollowUp getValue()
				{
					return (ims.clinical.vo.lookups.InpatientFollowUp)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.InpatientFollowUp value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbIPReviewInComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.ReviewInDuration value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.ReviewInDuration value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.ReviewInDuration getValue()
				{
					return (ims.clinical.vo.lookups.ReviewInDuration)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.ReviewInDuration value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 496, 64, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Review in:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 472, 107, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Follow Up Details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 153, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Summary Note:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 120, 472, 168, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbIPFollowUPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbIPFollowUPTemp);
				cmbIPFollowUPComboBox cmbIPFollowUP = (cmbIPFollowUPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIPFollowUPComboBox.class, m_cmbIPFollowUPTemp);
				super.addComboBox(cmbIPFollowUP);
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 168, 496, 120, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbIPReviewInTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbIPReviewInTemp);
				cmbIPReviewInComboBox cmbIPReviewIn = (cmbIPReviewInComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIPReviewInComboBox.class, m_cmbIPReviewInTemp);
				super.addComboBox(cmbIPReviewIn);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 120, 496, 40, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// Rich Text Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 796, 416, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
			}

			public cmbIPFollowUPComboBox cmbIPFollowUP()
			{
				return (cmbIPFollowUPComboBox)super.getComboBox(0);
			}
			public cmbIPReviewInComboBox cmbIPReviewIn()
			{
				return (cmbIPReviewInComboBox)super.getComboBox(1);
			}
			public IntBox intIPReviewIn()
			{
				return (IntBox)super.getControl(5);
			}
			public RichTextControl richDischargeSummary()
			{
				return (RichTextControl)super.getControl(6);
			}
		}
		public static class tabServicesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 117, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Medication:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 335, 206, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Procedures -  Performed / Planned:", new Integer(1), null, new Integer(0)}));
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 352, 800, 184, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 800, 296, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public TreeView treProcedure()
			{
				return (TreeView)super.getControl(2);
			}
			public DynamicGrid dyngrdMedication()
			{
				return (DynamicGrid)super.getControl(3);
			}
		}
		public static class tabPreviewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 800, 520, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public HTMLViewer htmReport()
			{
				return (HTMLViewer)super.getControl(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabRecipents = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"General Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabRecipentsContainer m_tabRecipentsContainer = (tabRecipentsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRecipentsContainer.class, m_tabRecipents, factory);
			super.addContainer(m_tabRecipents, m_tabRecipentsContainer);
			ims.framework.utils.SizeInfo m_tabRecipentsDesignSize = new ims.framework.utils.SizeInfo(832, 576);
			ims.framework.utils.SizeInfo m_tabRecipentsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper36.getWidth(), anchoringHelper36.getHeight());
			m_tabRecipentsContainer.setContext(form, appForm, m_tabRecipents, loader, form_images_local, contextMenus, startControlID, m_tabRecipentsDesignSize, m_tabRecipentsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCommentsOPD = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Outpatient Summary", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCommentsOPDContainer m_tabCommentsOPDContainer = (tabCommentsOPDContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCommentsOPDContainer.class, m_tabCommentsOPD, factory);
			super.addContainer(m_tabCommentsOPD, m_tabCommentsOPDContainer);
			ims.framework.utils.SizeInfo m_tabCommentsOPDDesignSize = new ims.framework.utils.SizeInfo(832, 576);
			ims.framework.utils.SizeInfo m_tabCommentsOPDRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper37.getWidth(), anchoringHelper37.getHeight());
			m_tabCommentsOPDContainer.setContext(form, appForm, m_tabCommentsOPD, loader, form_images_local, contextMenus, startControlID, m_tabCommentsOPDDesignSize, m_tabCommentsOPDRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSummaryIP = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Discharge Summary", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSummaryIPContainer m_tabSummaryIPContainer = (tabSummaryIPContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSummaryIPContainer.class, m_tabSummaryIP, factory);
			super.addContainer(m_tabSummaryIP, m_tabSummaryIPContainer);
			ims.framework.utils.SizeInfo m_tabSummaryIPDesignSize = new ims.framework.utils.SizeInfo(832, 576);
			ims.framework.utils.SizeInfo m_tabSummaryIPRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
			m_tabSummaryIPContainer.setContext(form, appForm, m_tabSummaryIP, loader, form_images_local, contextMenus, startControlID, m_tabSummaryIPDesignSize, m_tabSummaryIPRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabServices = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Procedures / Medication", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabServicesContainer m_tabServicesContainer = (tabServicesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabServicesContainer.class, m_tabServices, factory);
			super.addContainer(m_tabServices, m_tabServicesContainer);
			ims.framework.utils.SizeInfo m_tabServicesDesignSize = new ims.framework.utils.SizeInfo(832, 576);
			ims.framework.utils.SizeInfo m_tabServicesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper39.getWidth(), anchoringHelper39.getHeight());
			m_tabServicesContainer.setContext(form, appForm, m_tabServices, loader, form_images_local, contextMenus, startControlID, m_tabServicesDesignSize, m_tabServicesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPreview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Preview", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPreviewContainer m_tabPreviewContainer = (tabPreviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPreviewContainer.class, m_tabPreview, factory);
			super.addContainer(m_tabPreview, m_tabPreviewContainer);
			ims.framework.utils.SizeInfo m_tabPreviewDesignSize = new ims.framework.utils.SizeInfo(832, 576);
			ims.framework.utils.SizeInfo m_tabPreviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
			m_tabPreviewContainer.setContext(form, appForm, m_tabPreview, loader, form_images_local, contextMenus, startControlID, m_tabPreviewDesignSize, m_tabPreviewRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabRecipents().setVisible(false);
			tabCommentsOPD().setVisible(false);
			tabSummaryIP().setVisible(false);
			tabServices().setVisible(false);
			tabPreview().setVisible(false);
		}
		public void settabRecipentsEnabled(boolean value)
		{
			tabRecipents().setEnabled(value);
		}
		public void settabCommentsOPDEnabled(boolean value)
		{
			tabCommentsOPD().setEnabled(value);
		}
		public void settabSummaryIPEnabled(boolean value)
		{
			tabSummaryIP().setEnabled(value);
		}
		public void settabServicesEnabled(boolean value)
		{
			tabServices().setEnabled(value);
		}
		public void settabPreviewEnabled(boolean value)
		{
			tabPreview().setEnabled(value);
		}
		public void showtabRecipents()
		{
			tabCommentsOPD().setVisible(false);
			tabSummaryIP().setVisible(false);
			tabServices().setVisible(false);
			tabPreview().setVisible(false);
			tabRecipents().setVisible(true);
		}
		public void showtabCommentsOPD()
		{
			tabRecipents().setVisible(false);
			tabSummaryIP().setVisible(false);
			tabServices().setVisible(false);
			tabPreview().setVisible(false);
			tabCommentsOPD().setVisible(true);
		}
		public void showtabSummaryIP()
		{
			tabRecipents().setVisible(false);
			tabCommentsOPD().setVisible(false);
			tabServices().setVisible(false);
			tabPreview().setVisible(false);
			tabSummaryIP().setVisible(true);
		}
		public void showtabServices()
		{
			tabRecipents().setVisible(false);
			tabCommentsOPD().setVisible(false);
			tabSummaryIP().setVisible(false);
			tabPreview().setVisible(false);
			tabServices().setVisible(true);
		}
		public void showtabPreview()
		{
			tabRecipents().setVisible(false);
			tabCommentsOPD().setVisible(false);
			tabSummaryIP().setVisible(false);
			tabServices().setVisible(false);
			tabPreview().setVisible(true);
		}

		public tabRecipentsContainer tabRecipents()
		{
			return (tabRecipentsContainer)super.layers.get(0);
		}
		public tabCommentsOPDContainer tabCommentsOPD()
		{
			return (tabCommentsOPDContainer)super.layers.get(1);
		}
		public tabSummaryIPContainer tabSummaryIP()
		{
			return (tabSummaryIPContainer)super.layers.get(2);
		}
		public tabServicesContainer tabServices()
		{
			return (tabServicesContainer)super.layers.get(3);
		}
		public tabPreviewContainer tabPreview()
		{
			return (tabPreviewContainer)super.layers.get(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalNotesVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalNotesVo' of the global context variable 'Clinical.CurrentClinicalNote' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuRecipientsOperations = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuRecipientsOperationsADD_GPItem = factory.createMenuItem(startControlID.intValue() + 1, "Add GP", true, false, new Integer(103139), true, false);
		contextMenus.contextMenuRecipientsOperations.add(contextMenus.contextMenuRecipientsOperationsADD_GPItem);
		contextMenus.contextMenuRecipientsOperationsADD_PAT_GPItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Patients GP", true, false, new Integer(103139), true, false);
		contextMenus.contextMenuRecipientsOperations.add(contextMenus.contextMenuRecipientsOperationsADD_PAT_GPItem);
		contextMenus.contextMenuRecipientsOperationsADD_MOSItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Member of Staff", true, false, new Integer(103140), true, true);
		contextMenus.contextMenuRecipientsOperations.add(contextMenus.contextMenuRecipientsOperationsADD_MOSItem);
		contextMenus.contextMenuRecipientsOperationsADD_PATIENTItem = factory.createMenuItem(startControlID.intValue() + 4, "Add patient", true, false, new Integer(103141), true, true);
		contextMenus.contextMenuRecipientsOperations.add(contextMenus.contextMenuRecipientsOperationsADD_PATIENTItem);
		contextMenus.contextMenuRecipientsOperationsREMOVEItem = factory.createMenuItem(startControlID.intValue() + 5, "Remove Recipient", true, false, new Integer(102148), true, true);
		contextMenus.contextMenuRecipientsOperations.add(contextMenus.contextMenuRecipientsOperationsREMOVEItem);
		form.registerMenu(contextMenus.contextMenuRecipientsOperations);


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 384, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 684, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(5);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(6);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(7);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(8);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(9);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Core = new CoreForms();
			Admin = new AdminForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				MedicationOnAdmission = new LocalFormName(122126);
				EpisodeSummary = new LocalFormName(122109);
				OutPatientsTreatmentPlan = new LocalFormName(122120);
				DocumentGeneration = new LocalFormName(122140);
				DocumentGenerationOP = new LocalFormName(122177);
			}
			public final FormName MedicationOnAdmission;
			public final FormName EpisodeSummary;
			public final FormName OutPatientsTreatmentPlan;
			public final FormName DocumentGeneration;
			public final FormName DocumentGenerationOP;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				GPSelection = new LocalFormName(102137);
			}
			public final FormName GPSelection;
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				MosSelect = new LocalFormName(103142);
			}
			public final FormName MosSelect;
		}

		public ClinicalForms Clinical;
		public CoreForms Core;
		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			COE = new COEImages();
			Admin = new AdminImages();
			ICP = new ICPImages();
			Core = new CoreImages();
		}
		public final class COEImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEImages()
			{
				Blue = new ImageHelper(101100, "Images/COE/blue12x12.gif", new Integer(12), new Integer(12));
				BlueViolet = new ImageHelper(101101, "Images/COE/violet12x12.gif", new Integer(12), new Integer(12));
				DarkCyan = new ImageHelper(101102, "Images/COE/darkcyan12x12.gif", new Integer(12), new Integer(12));
				LightSeaGreen = new ImageHelper(101104, "Images/COE/LightSeaGreen.gif", new Integer(12), new Integer(12));
				LightSkyBlue = new ImageHelper(101105, "Images/COE/lightblue12x12.gif", new Integer(12), new Integer(12));
				Turquoise = new ImageHelper(101108, "Images/COE/Turquoise.gif", new Integer(12), new Integer(12));
			}
			public final ims.framework.utils.Image Blue;
			public final ims.framework.utils.Image BlueViolet;
			public final ims.framework.utils.Image DarkCyan;
			public final ims.framework.utils.Image LightSeaGreen;
			public final ims.framework.utils.Image LightSkyBlue;
			public final ims.framework.utils.Image Turquoise;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Activity = new ImageHelper(103111, "Images/Admin/VSObject_Structure.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Activity;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				Child = new ImageHelper(118100, "Images/ICP/property.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Child;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				InfoDisabled24 = new ImageHelper(102512, "Images/Core/info_disabled_24.png", new Integer(24), new Integer(24));
				InfoEnabled24 = new ImageHelper(102511, "Images/Core/info_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image InfoDisabled24;
			public final ims.framework.utils.Image InfoEnabled24;
		}
		public final COEImages COE;
		public final AdminImages Admin;
		public final ICPImages ICP;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedItem = new ims.framework.ContextVariable("SelectedItem", prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__SelectedItem_" + componentIdentifier + "");
			cxl_ReportChanged = new ims.framework.ContextVariable("ReportChanged", prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__ReportChanged_" + componentIdentifier + "");
			cxl_IsMedicationDataLoaded = new ims.framework.ContextVariable("IsMedicationDataLoaded", prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__IsMedicationDataLoaded_" + componentIdentifier + "");
			cxl_OutpatientSummaryChanged = new ims.framework.ContextVariable("OutpatientSummaryChanged", prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__OutpatientSummaryChanged_" + componentIdentifier + "");
			cxl_Inpatient = new ims.framework.ContextVariable("Inpatient", prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Inpatient_" + componentIdentifier + "");
			cxl_Outpatient = new ims.framework.ContextVariable("Outpatient", prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Outpatient_" + componentIdentifier + "");
		}
		
		public boolean getSelectedItemIsNotNull()
		{
			return !cxl_SelectedItem.getValueIsNull(context);
		}
		public ims.clinical.vo.ClinicalCorrespondenceVo getSelectedItem()
		{
			return (ims.clinical.vo.ClinicalCorrespondenceVo)cxl_SelectedItem.getValue(context);
		}
		public void setSelectedItem(ims.clinical.vo.ClinicalCorrespondenceVo value)
		{
			cxl_SelectedItem.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedItem = null;
		public boolean getReportChangedIsNotNull()
		{
			return !cxl_ReportChanged.getValueIsNull(context);
		}
		public Boolean getReportChanged()
		{
			return (Boolean)cxl_ReportChanged.getValue(context);
		}
		public void setReportChanged(Boolean value)
		{
			cxl_ReportChanged.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReportChanged = null;
		public boolean getIsMedicationDataLoadedIsNotNull()
		{
			return !cxl_IsMedicationDataLoaded.getValueIsNull(context);
		}
		public Boolean getIsMedicationDataLoaded()
		{
			return (Boolean)cxl_IsMedicationDataLoaded.getValue(context);
		}
		public void setIsMedicationDataLoaded(Boolean value)
		{
			cxl_IsMedicationDataLoaded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsMedicationDataLoaded = null;
		public boolean getOutpatientSummaryChangedIsNotNull()
		{
			return !cxl_OutpatientSummaryChanged.getValueIsNull(context);
		}
		public Boolean getOutpatientSummaryChanged()
		{
			return (Boolean)cxl_OutpatientSummaryChanged.getValue(context);
		}
		public void setOutpatientSummaryChanged(Boolean value)
		{
			cxl_OutpatientSummaryChanged.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OutpatientSummaryChanged = null;
		public boolean getInpatientIsNotNull()
		{
			return !cxl_Inpatient.getValueIsNull(context);
		}
		public ims.clinical.vo.InpatientDischargeNoteFollowupVo getInpatient()
		{
			return (ims.clinical.vo.InpatientDischargeNoteFollowupVo)cxl_Inpatient.getValue(context);
		}
		public void setInpatient(ims.clinical.vo.InpatientDischargeNoteFollowupVo value)
		{
			cxl_Inpatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Inpatient = null;
		public boolean getOutpatientIsNotNull()
		{
			return !cxl_Outpatient.getValueIsNull(context);
		}
		public ims.clinical.vo.OutpatientNotesOutcomeVo getOutpatient()
		{
			return (ims.clinical.vo.OutpatientNotesOutcomeVo)cxl_Outpatient.getValue(context);
		}
		public void setOutpatient(ims.clinical.vo.OutpatientNotesOutcomeVo value)
		{
			cxl_Outpatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Outpatient = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class RecipientsOperations implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD_GP = 1;
			public static final int ADD_PAT_GP = 2;
			public static final int ADD_MOS = 3;
			public static final int ADD_PATIENT = 4;
			public static final int REMOVE = 5;
		}
		public void disableAllRecipientsOperationsMenuItems()
		{
			this.contextMenuRecipientsOperationsADD_GPItem.setEnabled(false);
			this.contextMenuRecipientsOperationsADD_PAT_GPItem.setEnabled(false);
			this.contextMenuRecipientsOperationsADD_MOSItem.setEnabled(false);
			this.contextMenuRecipientsOperationsADD_PATIENTItem.setEnabled(false);
			this.contextMenuRecipientsOperationsREMOVEItem.setEnabled(false);
		}
		public void hideAllRecipientsOperationsMenuItems()
		{
			this.contextMenuRecipientsOperationsADD_GPItem.setVisible(false);
			this.contextMenuRecipientsOperationsADD_PAT_GPItem.setVisible(false);
			this.contextMenuRecipientsOperationsADD_MOSItem.setVisible(false);
			this.contextMenuRecipientsOperationsADD_PATIENTItem.setVisible(false);
			this.contextMenuRecipientsOperationsREMOVEItem.setVisible(false);
		}
		private Menu contextMenuRecipientsOperations;
		public MenuItem getRecipientsOperationsADD_GPItem()
		{
			return this.contextMenuRecipientsOperationsADD_GPItem;
		}
		private MenuItem contextMenuRecipientsOperationsADD_GPItem;
		public MenuItem getRecipientsOperationsADD_PAT_GPItem()
		{
			return this.contextMenuRecipientsOperationsADD_PAT_GPItem;
		}
		private MenuItem contextMenuRecipientsOperationsADD_PAT_GPItem;
		public MenuItem getRecipientsOperationsADD_MOSItem()
		{
			return this.contextMenuRecipientsOperationsADD_MOSItem;
		}
		private MenuItem contextMenuRecipientsOperationsADD_MOSItem;
		public MenuItem getRecipientsOperationsADD_PATIENTItem()
		{
			return this.contextMenuRecipientsOperationsADD_PATIENTItem;
		}
		private MenuItem contextMenuRecipientsOperationsADD_PATIENTItem;
		public MenuItem getRecipientsOperationsREMOVEItem()
		{
			return this.contextMenuRecipientsOperationsREMOVEItem;
		}
		private MenuItem contextMenuRecipientsOperationsREMOVEItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[99];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-ID", "ID_Gp");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-STATUS", "Status");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentClinicalCorrespondanceLiteVo", "BO-1072100040-ID", "ID_ClinicalCorrespondence");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentClinicalCorrespondanceLiteVo", "BO-1072100040-VERIFYINGDATETIME", "VerifyingDateTime");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentClinicalCorrespondanceLiteVo", "BO-1072100040-HASOBJECTIVENOTE", "HasObjectiveNote");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentClinicalCorrespondanceLiteVo", "BO-1072100040-HASPLANNOTE", "HasPlanNote");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentClinicalCorrespondanceLiteVo", "BO-1072100040-HASINSTRUCTIONSNOTE", "HasInstructionsNote");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentClinicalCorrespondanceLiteVo", "BO-1072100040-TYPE", "Type");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1072100040-ID", "ID_ClinicalCorrespondence");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1072100040-VERIFYINGDATETIME", "VerifyingDateTime");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1072100040-HASOBJECTIVENOTE", "HasObjectiveNote");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1072100040-HASPLANNOTE", "HasPlanNote");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1072100040-HASINSTRUCTIONSNOTE", "HasInstructionsNote");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1072100040-TYPE", "Type");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1072100040-MEDICATION", "Medication");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1072100040-RUSERVERIFYINGDATETIME", "RUserVerifyingDateTime");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1072100050-ID", "ID_InpatientDischargeNoteFollowup");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1072100050-OUTCOME", "Outcome");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1072100050-REVIEWIN", "ReviewIn");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1072100050-REVIEWINUNITS", "ReviewinUnits");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1072100050-CARECONTEXT", "CareContext");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Outpatient_" + componentIdentifier, "BO-1072100046-ID", "ID_OutpatientNotesOutcome");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Outpatient_" + componentIdentifier, "BO-1072100046-INSTRUCTIONNEXTCLINIC", "InstructionNextClinic");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Outpatient_" + componentIdentifier, "BO-1072100046-OUTCOME", "Outcome");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Outpatient_" + componentIdentifier, "BO-1072100046-REVIEWIN", "ReviewIn");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Outpatient_" + componentIdentifier, "BO-1072100046-REVIEWINUNITS", "ReviewinUnits");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Outpatient_" + componentIdentifier, "BO-1072100046-CARECONTEXT", "CareContext");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.DocumentGeneration.__internal_x_context__Outpatient_" + componentIdentifier, "BO-1072100046-CLINICALCONTACT", "ClinicalContact");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
