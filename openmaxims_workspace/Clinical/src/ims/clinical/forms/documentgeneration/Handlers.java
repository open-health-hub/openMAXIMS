//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.documentgeneration;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbStatusLookup();
	abstract protected void defaultcmbStatusLookupValue();
	abstract protected void bindcmbOPFollowUpLookup();
	abstract protected void defaultcmbOPFollowUpLookupValue();
	abstract protected void bindcmbOPReviewInLookup();
	abstract protected void defaultcmbOPReviewInLookupValue();
	abstract protected void bindcmbIPFollowUPLookup();
	abstract protected void defaultcmbIPFollowUPLookupValue();
	abstract protected void bindcmbIPReviewInLookup();
	abstract protected void defaultcmbIPReviewInLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrDetailsTabChanged(ims.framework.LayerBridge tab);
	abstract protected void oncmbStatusValueSet(Object value);
	abstract protected void onCmbStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbVerifyingHCPValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbVerifyingHCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdRecipientsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdRecipientsGridCheckBoxClicked(int column, GenForm.lyrDetailsLayer.tabRecipentsContainer.grdRecipientsRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbOPFollowUpValueSet(Object value);
	abstract protected void oncmbOPReviewInValueSet(Object value);
	abstract protected void oncmbIPFollowUPValueSet(Object value);
	abstract protected void oncmbIPReviewInValueSet(Object value);
	abstract protected void onIntIPReviewInValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnClose().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCloseClick();
			}
		});
		this.form.btnUpdate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdateClick();
			}
		});
		this.form.btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.lyrDetails().tabRecipents().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabRecipentsActivated();
			}
		});
		this.form.lyrDetails().tabCommentsOPD().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabCommentsOPDActivated();
			}
		});
		this.form.lyrDetails().tabSummaryIP().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabSummaryIPActivated();
			}
		});
		this.form.lyrDetails().tabServices().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabServicesActivated();
			}
		});
		this.form.lyrDetails().tabPreview().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabPreviewActivated();
			}
		});
		this.form.lyrDetails().tabRecipents().cmbStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbStatusValueSet(value);
			}
		});
		this.form.lyrDetails().tabRecipents().cmbStatus().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbStatusValueChanged();
			}
		});
		this.form.lyrDetails().tabRecipents().qmbVerifyingHCP().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbVerifyingHCPValueChanged();
			}
		});
		this.form.lyrDetails().tabRecipents().qmbVerifyingHCP().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbVerifyingHCPTextSubmited(value);
			}
		});
		this.form.lyrDetails().tabRecipents().grdRecipients().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdRecipientsSelectionChanged();
			}
		});
		this.form.lyrDetails().tabRecipents().grdRecipients().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdRecipientsGridCheckBoxClicked(column, new GenForm.lyrDetailsLayer.tabRecipentsContainer.grdRecipientsRow(row), isChecked);
			}
		});
		this.form.lyrDetails().tabCommentsOPD().cmbOPFollowUp().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbOPFollowUpValueSet(value);
			}
		});
		this.form.lyrDetails().tabCommentsOPD().cmbOPReviewIn().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbOPReviewInValueSet(value);
			}
		});
		this.form.lyrDetails().tabSummaryIP().cmbIPFollowUP().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbIPFollowUPValueSet(value);
			}
		});
		this.form.lyrDetails().tabSummaryIP().cmbIPReviewIn().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbIPReviewInValueSet(value);
			}
		});
		this.form.lyrDetails().tabSummaryIP().intIPReviewIn().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntIPReviewInValueChanged();
			}
		});
		this.form.getContextMenus().getRecipientsOperationsADD_GPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RecipientsOperations.ADD_GP, sender);
			}
		});
		this.form.getContextMenus().getRecipientsOperationsADD_PAT_GPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RecipientsOperations.ADD_PAT_GP, sender);
			}
		});
		this.form.getContextMenus().getRecipientsOperationsADD_MOSItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RecipientsOperations.ADD_MOS, sender);
			}
		});
		this.form.getContextMenus().getRecipientsOperationsADD_PATIENTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RecipientsOperations.ADD_PATIENT, sender);
			}
		});
		this.form.getContextMenus().getRecipientsOperationsREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RecipientsOperations.REMOVE, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbStatusLookup();
		bindcmbOPFollowUpLookup();
		bindcmbOPReviewInLookup();
		bindcmbIPFollowUPLookup();
		bindcmbIPReviewInLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbStatusLookup();
		bindcmbOPFollowUpLookup();
		bindcmbOPReviewInLookup();
		bindcmbIPFollowUPLookup();
		bindcmbIPReviewInLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbStatusLookupValue();
		defaultcmbOPFollowUpLookupValue();
		defaultcmbOPReviewInLookupValue();
		defaultcmbIPFollowUPLookupValue();
		defaultcmbIPReviewInLookupValue();
	}
	private void onlyrDetailstabRecipentsActivated()
	{
		this.form.lyrDetails().showtabRecipents();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabRecipents());
	}
	private void onlyrDetailstabCommentsOPDActivated()
	{
		this.form.lyrDetails().showtabCommentsOPD();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabCommentsOPD());
	}
	private void onlyrDetailstabSummaryIPActivated()
	{
		this.form.lyrDetails().showtabSummaryIP();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabSummaryIP());
	}
	private void onlyrDetailstabServicesActivated()
	{
		this.form.lyrDetails().showtabServices();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabServices());
	}
	private void onlyrDetailstabPreviewActivated()
	{
		this.form.lyrDetails().showtabPreview();
		onlyrDetailsTabChanged(this.form.lyrDetails().tabPreview());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
