//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sinead McDermott using IMS Development Environment (version 1.43 build 2232.25589)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.documentgeneration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import ims.admin.vo.ReportSeedVo;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportVo;
import ims.admin.vo.ReportVoCollection;
import ims.clinical.forms.documentgeneration.GenForm.lyrDetailsLayer.tabCommentsOPDContainer.grdClinicalNotesRow;
import ims.clinical.forms.documentgeneration.GenForm.lyrDetailsLayer.tabRecipentsContainer.grdRecipientsRow;
import ims.clinical.helper.MedicationDosesDynamicGridPopulation;
import ims.clinical.vo.ClinicalCorrespondenceRecipientsVo;
import ims.clinical.vo.ClinicalCorrespondenceRecipientsVoCollection;
import ims.clinical.vo.ClinicalCorrespondenceVo;
import ims.clinical.vo.CorrespondenceDiagnosisCompVo;
import ims.clinical.vo.CorrespondenceDiagnosisCompVoCollection;
import ims.clinical.vo.CorrespondenceProblemVo;
import ims.clinical.vo.CorrespondenceProblemVoCollection;
import ims.clinical.vo.CorrespondenceProcedureVo;
import ims.clinical.vo.CorrespondenceProcedureVoCollection;
import ims.clinical.vo.CorrespondenceStatusVo;
import ims.clinical.vo.CorrespondenceStatusVoCollection;
import ims.clinical.vo.InpatientDischargeNoteFollowupVo;
import ims.clinical.vo.MedicationOverViewFilterVo;
import ims.clinical.vo.MedicationOverViewVo;
import ims.clinical.vo.OutpatientNotesOutcomeVo;
import ims.clinical.vo.lookups.ClinicalCorrespondenceType;
import ims.clinical.vo.lookups.CorrespondenceStatus;
import ims.clinical.vo.lookups.MedicationSnapShot;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.clinical.vo.PatientProblemRefVo;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.ClinicalNoteStatusVo;
import ims.core.vo.ClinicalNoteStatusVoCollection;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientDiagnosisShortVo;
import ims.core.vo.PatientDiagnosisShortVoCollection;
import ims.core.vo.PatientProblemVo;
import ims.core.vo.PatientProblemVoCollection;
import ims.core.vo.PatientProcedureShortVo;
import ims.core.vo.PatientProcedureShortVoCollection;
import ims.core.vo.lookups.ClinicalNoteType;
import ims.core.vo.lookups.ClinicalNotesStatus;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.utils.textile.Textile;
import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final String problemsString = "Problems";
	private static final String diagnosisString = "Diagnosis";
	private static final String proceduresString = "Procedures";
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		CareContextShortVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
		
		if(ContextType.OUTPATIENT.equals(careContext.getContext()))
		{
			form.lyrDetails().tabCommentsOPD().setHeaderVisible(true);
			form.lyrDetails().tabSummaryIP().setHeaderVisible(false);
		}
		else
		{
			form.lyrDetails().tabCommentsOPD().setHeaderVisible(false);
			form.lyrDetails().tabSummaryIP().setHeaderVisible(true);
		}

		form.getLocalContext().setReportChanged(Boolean.FALSE);
		form.getLocalContext().setOutpatientSummaryChanged(Boolean.FALSE);
		initialiseClinicalData();
		initialiseOutpatientSummaryGrid();
		showRecordingControls(false);
		open();
		
	}

	private void initialiseOutpatientSummaryGrid()
	{
		form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().clear();
		
		grdClinicalNotesRow row = form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().newRow();
		row.setColContext("Objective");
		row = form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().newRow();
		row.setColContext("Plan");
		row = form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().newRow();
		row.setColContext("Instructions for Next Clinic");
	}

	private void initialiseClinicalData()
	{
		form.lyrDetails().tabRecipents().treCDI().clear();
		
		//patient problems
		PatientProblemVoCollection listProblems = domain.listProblemsByPatient(form.getGlobalContext().Core.getPatientShort());

		TreeNode parent = form.lyrDetails().tabRecipents().treCDI().getNodes().add(problemsString, problemsString);
		parent.setCollapsedImage(form.getImages().COE.BlueViolet);
		parent.setExpandedImage(form.getImages().COE.BlueViolet);
		parent.setExpanded(true);
		parent.setCheckBoxVisible(false);

		for (int i = 0; i < listProblems.size(); i++)
		{
			PatientProblemVo problem = listProblems.get(i);

			parent.getNodes().add(problem, problem.getPatientProblem());
		}
		
		//patient diagnosis
		PatientDiagnosisShortVoCollection listDiagnosis = domain.listDiagnosisComplicationsByPatient(form.getGlobalContext().Core.getPatientShort());

		parent = form.lyrDetails().tabRecipents().treCDI().getNodes().add(diagnosisString, diagnosisString);
		parent.setCollapsedImage(form.getImages().COE.Blue);
		parent.setExpandedImage(form.getImages().COE.Blue);
		parent.setExpanded(true);
		parent.setCheckBoxVisible(false);

		for (int i = 0; i < listDiagnosis.size(); i++)
		{
			PatientDiagnosisShortVo diagnosis = listDiagnosis.get(i);

			parent.getNodes().add(diagnosis, diagnosis.getDiagnosisDescription());
		}

		//patient procedures
		PatientProcedureShortVoCollection listProcedures = domain.listProceduresByPatient(form.getGlobalContext().Core.getPatientShort());

		parent = form.lyrDetails().tabServices().treProcedure().getNodes().add(proceduresString, proceduresString);
		parent.setCollapsedImage(form.getImages().COE.DarkCyan);
		parent.setExpandedImage(form.getImages().COE.DarkCyan);
		parent.setExpanded(true);
		parent.setCheckBoxVisible(false);

		for (int i = 0; i < listProcedures.size(); i++)
		{
			PatientProcedureShortVo procedure = listProcedures.get(i);

			parent.getNodes().add(procedure, procedure.getProcedureDescription());
		}
		
	}

	private void setCurrentClinicalNote()
	{
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			ClinicalContactShortVo currentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			ClinicalNotesVo clinicalNotesForContact = domain.getClinicalNotesForContact(currentClinicalContact);
			
			if (clinicalNotesForContact != null)
				form.getGlobalContext().Clinical.setCurrentClinicalNote(domain.getClinicalNote(clinicalNotesForContact));
			else
				form.getGlobalContext().Clinical.setCurrentClinicalNote(null);
		}
	}
	
	private boolean verifyStatusHistory()
	{
		if (form.lyrDetails().tabRecipents().cmbStatus().getValue() != null)
		{
			if (form.lyrDetails().tabRecipents().cmbStatus().getValue().equals(CorrespondenceStatus.VERIFIED))
			{
		
				ClinicalCorrespondenceVo voClinicalCorrespondence = null;

				CareContextShortVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
		
				if(ContextType.OUTPATIENT.equals(careContext.getContext()))
				{
					voClinicalCorrespondence = domain.getLastClinicalCorrespondence
						(form.getGlobalContext().Core.getCurrentCareContext(), 
							ClinicalCorrespondenceType.MEDICALOUTPATIENTLETTER, 
								form.getGlobalContext().Core.getCurrentClinicalContact());
				}
				else
				{
					voClinicalCorrespondence = domain.getLastClinicalCorrespondence
						(form.getGlobalContext().Core.getCurrentCareContext(), 
							ClinicalCorrespondenceType.MEDICALINPATIENTDISCHARGE, 
								form.getGlobalContext().Core.getCurrentClinicalContact());
				}
		
				if (voClinicalCorrespondence != null &&
						voClinicalCorrespondence.getStatusHistoryIsNotNull())
				{
					for (int i = 0; i < voClinicalCorrespondence.getStatusHistory().size(); i++)
					{
						if (voClinicalCorrespondence.getStatusHistory().get(i).getCorrespondenceStatus().equals(CorrespondenceStatus.VERIFIED))
						{
							if (voClinicalCorrespondence.getVerifyingHCPIsNotNull() &&
									voClinicalCorrespondence.getVerifyingDateTimeIsNotNull())
							{
								form.lyrDetails().tabRecipents().qmbVerifyingHCP().newRow(voClinicalCorrespondence.getVerifyingHCP(), voClinicalCorrespondence.getVerifyingHCP().toString());
								form.lyrDetails().tabRecipents().qmbVerifyingHCP().setValue(voClinicalCorrespondence.getVerifyingHCP());
								form.lyrDetails().tabRecipents().dtimVerifying().setValue(voClinicalCorrespondence.getVerifyingDateTime());
								return true;
							}
						}
					}
				}
			}
		}
		return false;
	}
	
	private void open()
	{
		clearScreen();
		setCurrentClinicalNote();
				
		ClinicalCorrespondenceVo voClinicalCorrespondence = null;
		
		/*
		if(form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull() && 
				form.getGlobalContext().Clinical.getReturnToFormName().equals(form.getForms().Clinical.OutPatientsTreatmentPlan))
				*/
		CareContextShortVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
		if(ContextType.OUTPATIENT.equals(careContext.getContext()))
		{
			voClinicalCorrespondence = domain.getLastClinicalCorrespondence
			(null, 
				ClinicalCorrespondenceType.MEDICALOUTPATIENTLETTER, 
					form.getGlobalContext().Core.getCurrentClinicalContact());
		}
		else
		{
			voClinicalCorrespondence = domain.getLastClinicalCorrespondence
				(form.getGlobalContext().Core.getCurrentCareContext(), 
					ClinicalCorrespondenceType.MEDICALINPATIENTDISCHARGE, 
						null);
		}
		
		form.getLocalContext().setSelectedItem(voClinicalCorrespondence);
		//WDEV-2536
		setTooltip(voClinicalCorrespondence);
		
			verifyStatusHistory();
		
		form.setMode(FormMode.VIEW);
		
		if(voClinicalCorrespondence == null)
		{
			form.btnNew().setVisible(true);
			form.btnUpdate().setVisible(false);
			form.getLocalContext().setOutpatientSummaryChanged(Boolean.TRUE);
		}
		else
		{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(true);
			
			displayRecord(voClinicalCorrespondence);
			form.getLocalContext().setReportChanged(Boolean.TRUE);
			
		}
		
		updateContextMenu();
	}

	private void displayRecord(ClinicalCorrespondenceVo voClinicalCorrespondence)
	{
		form.lyrDetails().showtabRecipents();

		form.lyrDetails().tabRecipents().cmbStatus().setValue(voClinicalCorrespondence.getCurrentStatusIsNotNull() ? voClinicalCorrespondence.getCurrentStatus().getCorrespondenceStatus() : null);
		if(voClinicalCorrespondence.getAuthoringInformationIsNotNull()
			&& voClinicalCorrespondence.getAuthoringInformation().getAuthoringHcpIsNotNull() 
			&& voClinicalCorrespondence.getAuthoringInformation().getAuthoringHcp().getMosIsNotNull() 
			&& voClinicalCorrespondence.getAuthoringInformation().getAuthoringHcp().getMos().getNameIsNotNull())
		{
			form.lyrDetails().tabRecipents().customControlAuthoringInfo().setValue(voClinicalCorrespondence.getAuthoringInformation());
		}
		if(voClinicalCorrespondence.getVerifyingHCPIsNotNull() &&
				voClinicalCorrespondence.getVerifyingHCP().getMosIsNotNull() && 
					voClinicalCorrespondence.getVerifyingHCP().getMos().getNameIsNotNull() &&
						voClinicalCorrespondence.getCurrentStatusIsNotNull() &&
							voClinicalCorrespondence.getCurrentStatus().getCorrespondenceStatusIsNotNull() &&
								voClinicalCorrespondence.getCurrentStatus().getCorrespondenceStatus().equals(CorrespondenceStatus.VERIFIED))
		{
			form.lyrDetails().tabRecipents().qmbVerifyingHCP().newRow(voClinicalCorrespondence.getVerifyingHCP(), voClinicalCorrespondence.getVerifyingHCP().toString());
			form.lyrDetails().tabRecipents().qmbVerifyingHCP().setValue(voClinicalCorrespondence.getVerifyingHCP());
			form.lyrDetails().tabRecipents().dtimVerifying().setValue(voClinicalCorrespondence.getVerifyingDateTime());
		}
		
		if(voClinicalCorrespondence.getAuthoringInformationIsNotNull()
			&& voClinicalCorrespondence.getAuthoringInformation().getAuthoringDateTimeIsNotNull()) 
			form.lyrDetails().tabRecipents().customControlAuthoringInfo().getValue().setAuthoringDateTime(voClinicalCorrespondence.getAuthoringInformation().getAuthoringDateTime());
		
		
		showRecordingControls(false);
		if (voClinicalCorrespondence.getRUserVerifyingHCP() != null)
		{
			showRecordingControls(true);
			form.lyrDetails().tabRecipents().txtRecordingUser().setValue(voClinicalCorrespondence.getRUserVerifyingHCPIsNotNull() ? voClinicalCorrespondence.getRUserVerifyingHCP().toString() : "");
			form.lyrDetails().tabRecipents().txtRecordingDateTime().setValue(voClinicalCorrespondence.getRUserVerifyingDateTimeIsNotNull() ? voClinicalCorrespondence.getRUserVerifyingDateTime().toString() : "");
		}
 
		for (int i = 0; i < voClinicalCorrespondence.getRecipients().size(); i++)
		{
			ClinicalCorrespondenceRecipientsVo voRecipient = voClinicalCorrespondence.getRecipients().get(i);
			
			grdRecipientsRow row = form.lyrDetails().tabRecipents().grdRecipients().getRows().newRow();
			
			if(voRecipient.getGeneralPractitionerIsNotNull())
				if (voRecipient.getGeneralPractitioner().getName().getForenameIsNotNull()) //WDEV-15021
				{
					row.setcolName(voRecipient.getGeneralPractitioner().getName().getForename() + " " + voRecipient.getGeneralPractitioner().getName().getSurname());
				}
				else
				{
					row.setcolName(voRecipient.getGeneralPractitioner().getName().getSurname());
				}
			else if(voRecipient.getMemberOfStaffIsNotNull())
			{
				if(voRecipient.getMemberOfStaff().getNameIsNotNull())
					row.setcolName(getMosText(voRecipient.getMemberOfStaff()));
			}
			else
				row.setcolName("Patient");
			
			if(voRecipient.getID_CorrespondenceRecipients().equals(voClinicalCorrespondence.getPrimaryRecipient().getID_CorrespondenceRecipients()))
				row.setcolPrimary(true);
			
			row.setValue(voRecipient);
		}
		
		for (int i = 0; i < form.lyrDetails().tabRecipents().treCDI().getNodes().size(); i++)
		{
			if(((String)form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getValue()).equalsIgnoreCase(problemsString))
			{
				//problems
				for (int j = 0; j < form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getNodes().size(); j++)
				{
					TreeNode node = form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getNodes().get(j);

					for (int k = 0; k < voClinicalCorrespondence.getProblems().size(); k++)
					{
						if(((PatientProblemRefVo)node.getValue()).getID_PatientProblem().equals(voClinicalCorrespondence.getProblems().get(k).getProblem().getID_PatientProblem()))
						{
							node.setChecked(true);
							break;
						}
					}
					
				}
			}
			else if(((String)form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getValue()).equalsIgnoreCase(diagnosisString))
			{
				//diagnosis
				for (int j = 0; j < form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getNodes().size(); j++)
				{
					TreeNode node = form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getNodes().get(j);
					
					for (int k = 0; k < voClinicalCorrespondence.getDiagnosesComplications().size(); k++)
					{
						if(((PatientDiagnosisRefVo)node.getValue()).getID_PatientDiagnosis().equals(voClinicalCorrespondence.getDiagnosesComplications().get(k).getDiagnosisComplication().getID_PatientDiagnosis()))
						{
							node.setChecked(true);
							break;
						}
					}
				}
			}
		}

		for (int i = 0; i < form.lyrDetails().tabServices().treProcedure().getNodes().size(); i++)
		{
			if(((String)form.lyrDetails().tabServices().treProcedure().getNodes().get(i).getValue()).equalsIgnoreCase(proceduresString))
			{
				//procedures
				for (int j = 0; j < form.lyrDetails().tabServices().treProcedure().getNodes().get(i).getNodes().size(); j++)
				{
					TreeNode node = form.lyrDetails().tabServices().treProcedure().getNodes().get(i).getNodes().get(j);

					for (int k = 0; k < voClinicalCorrespondence.getProcedures().size(); k++)
					{
						if(((PatientProcedureRefVo)node.getValue()).getID_PatientProcedure().equals(voClinicalCorrespondence.getProcedures().get(k).getProcedure().getID_PatientProcedure()))
						{
							node.setChecked(true);
							break;
						}
					}
					
				}
			}
		}
		
		if(voClinicalCorrespondence.getInpatientDischargeSummaryIsNotNull())
		{
			InpatientDischargeNoteFollowupVo idsVo = voClinicalCorrespondence.getInpatientDischargeSummary();
			form.lyrDetails().tabSummaryIP().cmbIPFollowUP().setValue(idsVo.getOutcome());
			form.lyrDetails().tabSummaryIP().cmbIPReviewIn().setValue(idsVo.getReviewinUnits());
			form.lyrDetails().tabSummaryIP().intIPReviewIn().setValue(idsVo.getReviewIn());
			//wdev-12317
			if(form.lyrDetails().tabSummaryIP().intIPReviewIn().getValue() != null && form.lyrDetails().tabSummaryIP().intIPReviewIn().getValue() > 0)
				form.lyrDetails().tabSummaryIP().cmbIPReviewIn().setRequired(true);
			else
				form.lyrDetails().tabSummaryIP().cmbIPReviewIn().setRequired(false);
			//----
			if(idsVo.getClinicalNoteIsNotNull())
				form.lyrDetails().tabSummaryIP().richDischargeSummary().setValue(idsVo.getClinicalNote().getClinicalNote());
		}
		
		if(form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().size() == 3)
		{
			if(voClinicalCorrespondence.getHasObjectiveNoteIsNotNull())
				form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(0).setColSelect(voClinicalCorrespondence.getHasObjectiveNote().booleanValue());
			if(voClinicalCorrespondence.getOPDNotesIsNotNull() && voClinicalCorrespondence.getOPDNotes().getClinicalNoteIsNotNull())
				form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(0).setColText(voClinicalCorrespondence.getOPDNotes().getClinicalNote().getObjectiveNote());
			
			if(voClinicalCorrespondence.getHasPlanNoteIsNotNull())
				form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(1).setColSelect(voClinicalCorrespondence.getHasPlanNote().booleanValue());
			if(voClinicalCorrespondence.getOPDNotesIsNotNull() && voClinicalCorrespondence.getOPDNotes().getClinicalNoteIsNotNull())
				form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(1).setColText(voClinicalCorrespondence.getOPDNotes().getClinicalNote().getPlanNote());

			if(voClinicalCorrespondence.getHasInstructionsNoteIsNotNull())
				form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(2).setColSelect(voClinicalCorrespondence.getHasInstructionsNote().booleanValue());
			if(voClinicalCorrespondence.getOPDNotesIsNotNull())
				form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(2).setColText(voClinicalCorrespondence.getOPDNotes().getInstructionNextClinic());
		}	
		
		if(voClinicalCorrespondence.getOPDNotesIsNotNull())
		{
			form.lyrDetails().tabCommentsOPD().cmbOPFollowUp().setValue(voClinicalCorrespondence.getOPDNotes().getOutcome());
			form.lyrDetails().tabCommentsOPD().intOPReviewIn().setValue(voClinicalCorrespondence.getOPDNotes().getReviewIn());
			form.lyrDetails().tabCommentsOPD().cmbOPReviewIn().setValue(voClinicalCorrespondence.getOPDNotes().getReviewinUnits());
		}
		
		form.getLocalContext().setInpatient(voClinicalCorrespondence.getInpatientDischargeSummary());
		form.getLocalContext().setOutpatient(voClinicalCorrespondence.getOPDNotes());
	}

	private void clearScreen()
	{
		form.lyrDetails().tabRecipents().grdRecipients().getRows().clear();
		form.lyrDetails().tabRecipents().cmbStatus().setValue(null);
		form.lyrDetails().tabRecipents().customControlAuthoringInfo().setValue(null);
		form.lyrDetails().tabRecipents().qmbVerifyingHCP().clear();
		form.lyrDetails().tabRecipents().dtimVerifying().setValue(null);
		
		for (int i = 0; i < form.lyrDetails().tabRecipents().treCDI().getNodes().size(); i++)
		{
			TreeNode node = form.lyrDetails().tabRecipents().treCDI().getNodes().get(i);
			
			node.setChecked(false);
			
			for (int j = 0; j < node.getNodes().size(); j++)
			{
				node.getNodes().get(j).setChecked(false);
			}
		}
		
		for (int i = 0; i < form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().size(); i++)
		{
			grdClinicalNotesRow row = form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(i);
			
			row.setColSelect(false);
			row.setColText(null);
		}
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.RecipientsOperations.ADD_GP:
				addGP();
				break;
			case GenForm.ContextMenus.RecipientsOperations.ADD_PAT_GP:
				addPatientGP();
				break;
			case GenForm.ContextMenus.RecipientsOperations.ADD_MOS:
				addMOS();
				break;
			case GenForm.ContextMenus.RecipientsOperations.ADD_PATIENT:
				addPatient();
				break;
			case GenForm.ContextMenus.RecipientsOperations.REMOVE:
				removeRow();
				break;				
			default:
				break;
		}
	}

	private void removeRow()
	{
		form.lyrDetails().tabRecipents().grdRecipients().getRows().remove(form.lyrDetails().tabRecipents().grdRecipients().getSelectedRowIndex());
		updateContextMenu();
	}

	private void addPatient()
	{
		//check if this kind of record already exists
		for (int i = 0; i < form.lyrDetails().tabRecipents().grdRecipients().getRows().size(); i++)
		{
			if(form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getValue() != null)
			{
				if(form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getValue().getPatientIsNotNull() && form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getValue().getPatient().booleanValue())
				{
					engine.showMessage("There is already a recipient of type Patient !");
					return;
				}
			}
		}
		
		grdRecipientsRow row = form.lyrDetails().tabRecipents().grdRecipients().getRows().newRow();
		ClinicalCorrespondenceRecipientsVo recipient = new ClinicalCorrespondenceRecipientsVo();
		
		recipient.setPatient(Boolean.TRUE);
		
		row.setValue(recipient);
		row.setcolName("Patient");
		row.setcolPrimary(false);
	}

	private void addMOS()
	{
		//WDEV-1141
		engine.open(form.getForms().Admin.MosSelect);
	}

	private void addPatientGP()
	{
		Patient patient = domain.getPatient(form.getGlobalContext().Core.getPatientShort());
		
		if(patient.getGp() == null)
		{
			engine.showMessage("The current patient doesn't have a GP. Please update the patient's details!");
			return;
		}
		
		addGpToGrid(patient.getGp());
	}

	private void addGpToGrid(GpShortVo voGp)
	{
		//check if this GP already exists
		for (int i = 0; i < form.lyrDetails().tabRecipents().grdRecipients().getRows().size(); i++)
		{
			if(form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getValue() != null)
			{
				if(form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getValue().getGeneralPractitionerIsNotNull() && form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getValue().getGeneralPractitioner().getID_Gp().equals(voGp.getID_Gp()))
				{
					engine.showMessage("This GP was already added !");
					return;
				}
			}
		}
		
		grdRecipientsRow row = form.lyrDetails().tabRecipents().grdRecipients().getRows().newRow();
		ClinicalCorrespondenceRecipientsVo recipient = new ClinicalCorrespondenceRecipientsVo();
		
		recipient.setGeneralPractitioner(voGp);
		recipient.setPatient(Boolean.FALSE);
		
		row.setValue(recipient);
		row.setcolName((voGp.getName().getForename() != null ? voGp.getName().getForename():"") + " " + (voGp.getName().getSurname()!= null ? voGp.getName().getSurname():"")); //wdev-10872
		row.setcolPrimary(false);
	}

	private void addGP()
	{
		engine.open(form.getForms().Core.GPSelection);
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if(save())
			open();
	}

	//WDEV-2407
	private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		
		if(form.lyrDetails().tabRecipents().cmbStatus().getValue() != null)
		{
			if (form.lyrDetails().tabRecipents().cmbStatus().getValue().equals(CorrespondenceStatus.VERIFIED))
			{
				if (form.lyrDetails().tabRecipents().qmbVerifyingHCP().getValue() == null)
					errors.add("Verifying HCP is mandatory");
				if (form.lyrDetails().tabRecipents().dtimVerifying().getValue() == null)
					errors.add("Verifying Date/Time is mandatory");
			}	
		}
		//wdev-12317
		if(form.lyrDetails().tabSummaryIP().intIPReviewIn().getValue() != null && form.lyrDetails().tabSummaryIP().intIPReviewIn().getValue() != 0)
			if(form.lyrDetails().tabSummaryIP().cmbIPReviewIn().getValue() == null)
				errors.add("Review in period is mandatory.");
		//--------------
		if (errors.size() > 0) 
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Discharge Document record", searchErrors);
			return searchErrors;
		}
		return null;
	}
	
	private boolean save()
	{
		ClinicalCorrespondenceVo voClinicalCorrespondence = form.getLocalContext().getSelectedItem();

		if(voClinicalCorrespondence == null)
			voClinicalCorrespondence = new ClinicalCorrespondenceVo();

		if(voClinicalCorrespondence.getID_ClinicalCorrespondence() == null)
		{
			CareContextShortVo careContext = form.getGlobalContext().Core.getCurrentCareContext();

			if(ContextType.OUTPATIENT.equals(careContext.getContext()))
			{
				int count = domain.countClinicalCorrespondence(null, ClinicalCorrespondenceType.MEDICALOUTPATIENTLETTER, form.getGlobalContext().Core.getCurrentClinicalContact());
				
				if(count > 0)
				{
					engine.showMessage("A record exists for this clinical contact, screen will be refreshed.");
					open();
					return false;
				}
			}
			else
			{
				int count = domain.countClinicalCorrespondence(form.getGlobalContext().Core.getCurrentCareContext(), ClinicalCorrespondenceType.MEDICALINPATIENTDISCHARGE, null);
	
				if(count > 0)
				{
					engine.showMessage("A record exists for this care context, screen will be refreshed.");
					open();
					return false;
				}
			}
		}
		
		if(populateDataFromScreen(voClinicalCorrespondence) == false)
			return false;
		
		//WDEV-2407
		String[] uiErrors = getUiErrors();
		String[] errors = voClinicalCorrespondence.validate(uiErrors);
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			voClinicalCorrespondence = domain.saveClinicalCorrespondence(voClinicalCorrespondence);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		catch(UnqViolationUncheckedException e)
		{
			engine.showMessage("An Unique Violation Exception occured: " + e.getMessage());
			open();
			return false;
		}
		
		return true;
	}

	private boolean populateDataFromScreen(ClinicalCorrespondenceVo voClinicalCorrespondence)
	{
//		CorrespondenceStatusVo status = voClinicalCorrespondence.getCurrentStatus();
//		if(status == null)
//		{
//			status = new CorrespondenceStatusVo();
//			voClinicalCorrespondence.setCurrentStatus(status);
//		}
		
		
		
		voClinicalCorrespondence.setAuthoringInformation(form.lyrDetails().tabRecipents().customControlAuthoringInfo().getValue());
		
		voClinicalCorrespondence.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voClinicalCorrespondence.setCareContext(domain.getCareContextList(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()));
		voClinicalCorrespondence.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());//wdev-1800
		
		if(form.lyrDetails().tabRecipents().cmbStatus().getValue() == null)
			voClinicalCorrespondence.setCurrentStatus(null);
		else
		{
			CorrespondenceStatusVo status = new CorrespondenceStatusVo();
			status.setCorrespondenceStatus(form.lyrDetails().tabRecipents().cmbStatus().getValue());
			
			voClinicalCorrespondence.setCurrentStatus(status);
			
			if (status.getCorrespondenceStatusIsNotNull() &&
					status.getCorrespondenceStatus().equals(CorrespondenceStatus.VERIFIED))
			{
				voClinicalCorrespondence.setVerifyingDateTime(form.lyrDetails().tabRecipents().dtimVerifying().getValue());
				voClinicalCorrespondence.setVerifyingHCP(form.lyrDetails().tabRecipents().qmbVerifyingHCP().getValue());
			}
			
			//    this line overwrites the contents of the getStatusHistory() first element collection entry
			//voClinicalCorrespondence.getCurrentStatus().setCorrespondenceStatus(form.lyrDetails().tabRecipents().cmbStatus().getValue()); 
		}
			
		if (form.lyrDetails().tabRecipents().qmbVerifyingHCP().getValue() != null
			&& domain.getMosUser() != null
			&& form.lyrDetails().tabRecipents().qmbVerifyingHCP().getValue().getMosIsNotNull()
			&& form.lyrDetails().tabRecipents().qmbVerifyingHCP().getValue().getMos() != domain.getMosUser())
		{
			if (voClinicalCorrespondence.getRUserVerifyingHCP() == null)
				voClinicalCorrespondence.setRUserVerifyingHCP((MemberOfStaffShortVo)domain.getMosUser());
			if (voClinicalCorrespondence.getRUserVerifyingDateTime() == null)
				voClinicalCorrespondence.setRUserVerifyingDateTime(new DateTime());
		}
		
		if(form.lyrDetails().tabRecipents().cmbStatus().getValue() != null)
		{
			if(voClinicalCorrespondence.getStatusHistory() == null)
				voClinicalCorrespondence.setStatusHistory(new CorrespondenceStatusVoCollection());
			
			if(voClinicalCorrespondence.getStatusHistory().size() == 0)
				voClinicalCorrespondence.getStatusHistory().add(voClinicalCorrespondence.getCurrentStatus());
			else
			{
				if(!voClinicalCorrespondence.getCurrentStatus().getCorrespondenceStatus().equals(voClinicalCorrespondence.getStatusHistory().sort().get(0).getCorrespondenceStatus()))
				//if(!voClinicalCorrespondence.getStatusHistory().get(voClinicalCorrespondence.getStatusHistory().size() - 1).getCorrespondenceStatus().equals(voClinicalCorrespondence.getCurrentStatus().getCorrespondenceStatus()))
//					if(!voClinicalCorrespondence.getStatusHistory().get(voClinicalCorrespondence.getStatusHistory().size() - 1).getID_CorrespondenceStatus().equals(voClinicalCorrespondence.getCurrentStatus().getID_CorrespondenceStatus()))
					voClinicalCorrespondence.getStatusHistory().add(voClinicalCorrespondence.getCurrentStatus());
					
			}
		}
		
		if(voClinicalCorrespondence.getRecipients() == null)
			voClinicalCorrespondence.setRecipients(new ClinicalCorrespondenceRecipientsVoCollection());
		
		voClinicalCorrespondence.getRecipients().clear();
		
		voClinicalCorrespondence.setPrimaryRecipient(null);
		for (int i = 0; i < form.lyrDetails().tabRecipents().grdRecipients().getRows().size(); i++)
		{
			if(form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getValue() != null)
			{
				voClinicalCorrespondence.getRecipients().add(form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getValue());
				
				if(form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getcolPrimary())
					voClinicalCorrespondence.setPrimaryRecipient(form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getValue());
			}
		}
		
		if(voClinicalCorrespondence.getProblems() == null)
		{
			voClinicalCorrespondence.setProblems(new CorrespondenceProblemVoCollection());
		}
		else
		{
			voClinicalCorrespondence.getProblems().clear();
		}

		if(voClinicalCorrespondence.getDiagnosesComplications() == null)
		{
			voClinicalCorrespondence.setDiagnosesComplications(new CorrespondenceDiagnosisCompVoCollection());
		}
		else
		{
			voClinicalCorrespondence.getDiagnosesComplications().clear();
		}

		if(voClinicalCorrespondence.getProcedures() == null)
		{
			voClinicalCorrespondence.setProcedures(new CorrespondenceProcedureVoCollection());
		}
		else
		{
			voClinicalCorrespondence.getProblems().clear();
		}
		
		for (int i = 0; i < form.lyrDetails().tabRecipents().treCDI().getNodes().size(); i++)
		{
			if(((String)form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getValue()).equalsIgnoreCase(problemsString))
			{
				//problems
				for (int j = 0; j < form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getNodes().size(); j++)
				{
					TreeNode node = form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getNodes().get(j);
					
					if(node.isChecked())
					{
						CorrespondenceProblemVo item = new CorrespondenceProblemVo();
						item.setProblem((PatientProblemRefVo) node.getValue());
						voClinicalCorrespondence.getProblems().add(item);
					}
				}
			}
			else if(((String)form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getValue()).equalsIgnoreCase(diagnosisString))
			{
				//diagnosis
				for (int j = 0; j < form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getNodes().size(); j++)
				{
					TreeNode node = form.lyrDetails().tabRecipents().treCDI().getNodes().get(i).getNodes().get(j);
					
					if(node.isChecked())
					{
						CorrespondenceDiagnosisCompVo item = new CorrespondenceDiagnosisCompVo(); 
						item.setDiagnosisComplication((PatientDiagnosisRefVo) node.getValue());
						voClinicalCorrespondence.getDiagnosesComplications().add(item);
					}
				}
			}
		}
		
		for (int i = 0; i < form.lyrDetails().tabServices().treProcedure().getNodes().size(); i++)
		{
			if(((String)form.lyrDetails().tabServices().treProcedure().getNodes().get(i).getValue()).equalsIgnoreCase(proceduresString))
			{
				//procedures
				for (int j = 0; j < form.lyrDetails().tabServices().treProcedure().getNodes().get(i).getNodes().size(); j++)
				{
					TreeNode node = form.lyrDetails().tabServices().treProcedure().getNodes().get(i).getNodes().get(j);
					
					if(node.isChecked())
					{
						CorrespondenceProcedureVo item = new CorrespondenceProcedureVo();
						item.setProcedure((PatientProcedureRefVo) node.getValue());
						voClinicalCorrespondence.getProcedures().add(item);
					}
				}
			}
		}
		
		/*
		if(form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull() && 
				form.getGlobalContext().Clinical.getReturnToFormName().equals(form.getForms().Clinical.OutPatientsTreatmentPlan))
				*/
		CareContextShortVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
		if(ContextType.OUTPATIENT.equals(careContext.getContext()))
		{
			voClinicalCorrespondence.setType(ClinicalCorrespondenceType.MEDICALOUTPATIENTLETTER);
		}
		else
		{
			voClinicalCorrespondence.setType(ClinicalCorrespondenceType.MEDICALINPATIENTDISCHARGE);			
		}
		
		/*if(!(form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull() && 
				form.getGlobalContext().Clinical.getReturnToFormName().equals(form.getForms().Clinical.OutPatientsTreatmentPlan)))*/
		if(!ContextType.OUTPATIENT.equals(careContext.getContext()))
		{
			if(voClinicalCorrespondence.getInpatientDischargeSummary() == null)
				voClinicalCorrespondence.setInpatientDischargeSummary(new InpatientDischargeNoteFollowupVo());
	
			InpatientDischargeNoteFollowupVo idsVo = voClinicalCorrespondence.getInpatientDischargeSummary();
			idsVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			idsVo.setOutcome(form.lyrDetails().tabSummaryIP().cmbIPFollowUP().getValue());
			idsVo.setReviewinUnits(form.lyrDetails().tabSummaryIP().cmbIPReviewIn().getValue());
			idsVo.setReviewIn(form.lyrDetails().tabSummaryIP().intIPReviewIn().getValue());
			

			
			if(idsVo.getClinicalNote() == null)
				idsVo.setClinicalNote(new ClinicalNotesVo());
			else
				idsVo.setClinicalNote(idsVo.getClinicalNote());
			
			ClinicalNotesVo cnVo = idsVo.getClinicalNote();
			
			cnVo.setAuthoringInfo(form.lyrDetails().tabRecipents().customControlAuthoringInfo().getValue());

			cnVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			cnVo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			cnVo.setClinicalNote(form.lyrDetails().tabSummaryIP().richDischargeSummary().getValue());
			cnVo.setNoteType(ClinicalNoteType.DISCHARGENOTE);
			
			//WDEV-2408
			ClinicalNoteStatusVo voRecordStatus = new ClinicalNoteStatusVo();
			voRecordStatus.setStatus(ClinicalNotesStatus.ACTIVE);
			cnVo.setCurrentStatus(voRecordStatus);
			ClinicalNoteStatusVoCollection voStatusColl = new ClinicalNoteStatusVoCollection();
			if (! voStatusColl.contains(voRecordStatus))
				voStatusColl.add(voRecordStatus);
			cnVo.setDiscipline(HcpDisType.MEDICAL);
			
			cnVo.setIsDerivedNote(Boolean.FALSE);
		}
		
		/*if(form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull() && 
				form.getGlobalContext().Clinical.getReturnToFormName().equals(form.getForms().Clinical.OutPatientsTreatmentPlan))*/
		if(ContextType.OUTPATIENT.equals(careContext.getContext()))
		{

			if(voClinicalCorrespondence.getOPDNotes() == null)
			{
				if(form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().size() == 3)
				{
					voClinicalCorrespondence.setHasObjectiveNote(new Boolean(form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(0).getColSelect()));
					voClinicalCorrespondence.setHasPlanNote(new Boolean(form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(1).getColSelect()));
					voClinicalCorrespondence.setHasInstructionsNote(new Boolean(form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(2).getColSelect()));
				}	
				
				OutpatientNotesOutcomeVo opdNotesVo = domain.getOPDSummary(form.getGlobalContext().Core.getCurrentClinicalContact());
				
				if(opdNotesVo == null)
				{
					return true;
				}
				
				opdNotesVo = new OutpatientNotesOutcomeVo();
				opdNotesVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				opdNotesVo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
				voClinicalCorrespondence.setOPDNotes(opdNotesVo);
			}
			
			

			OutpatientNotesOutcomeVo voOutpatientNotesOutcome = voClinicalCorrespondence.getOPDNotes();
			
			voOutpatientNotesOutcome.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voOutpatientNotesOutcome.setOutcome(form.lyrDetails().tabCommentsOPD().cmbOPFollowUp().getValue());
			voOutpatientNotesOutcome.setReviewinUnits(form.lyrDetails().tabCommentsOPD().cmbOPReviewIn().getValue());
			voOutpatientNotesOutcome.setReviewIn(form.lyrDetails().tabCommentsOPD().intOPReviewIn().getValue());
			
			//if(voOutpatientNotesOutcome.getClinicalNote() == null)
				//voOutpatientNotesOutcome.setClinicalNote(new SoapNoteVo());//clinical note - link);
			
			voOutpatientNotesOutcome.setClinicalNote(voOutpatientNotesOutcome.getClinicalNote());//clinical note - link);
					
			if(voOutpatientNotesOutcome.getClinicalNote().getClinicalNote() == null)
				voOutpatientNotesOutcome.getClinicalNote().setClinicalNote(new ClinicalNotesVo());
				
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setAuthoringInfo(form.lyrDetails().tabRecipents().customControlAuthoringInfo().getValue());
				
			voOutpatientNotesOutcome.setOutcome(form.lyrDetails().tabCommentsOPD().cmbOPFollowUp().getValue());
			voOutpatientNotesOutcome.setReviewinUnits(form.lyrDetails().tabCommentsOPD().cmbOPReviewIn().getValue());
			voOutpatientNotesOutcome.setReviewIn(form.lyrDetails().tabCommentsOPD().intOPReviewIn().getValue());
				
			voOutpatientNotesOutcome.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				
			voOutpatientNotesOutcome.getClinicalNote().setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			voOutpatientNotesOutcome.getClinicalNote().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			if(voOutpatientNotesOutcome.getClinicalNote().getAuthoringInformation() == null)
				voOutpatientNotesOutcome.getClinicalNote().setAuthoringInformation(new AuthoringInformationVo());
			voOutpatientNotesOutcome.getClinicalNote().setAuthoringInformation(form.lyrDetails().tabRecipents().customControlAuthoringInfo().getValue());
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());		
			voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
				
			//voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setIsDerivedNote(Boolean.TRUE);
			//voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setNoteType(ClinicalNoteType.DISCHARGENOTE);
			//voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setDiscipline(HcpDisType.MEDICAL);
				
			if(form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().size() == 3)
			{
				StringBuffer sb = new StringBuffer();
				sb.append("<b>Objective Note</b><br>");
				sb.append(form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(0).getColText()!= null ?
						form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(0).getColText() : "");
				sb.append("<br><br><b>Plan Note</b><br>");
				sb.append(form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(1).getColText() != null ? 
						form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(1).getColText() : "");
				voOutpatientNotesOutcome.getClinicalNote().getClinicalNote().setClinicalNote(sb.toString());
			}
		}
		
		return true;
	}

	private void updateContextMenu()
	{
		form.getContextMenus().hideAllRecipientsOperationsMenuItems();
		
		if(form.getMode().equals(FormMode.EDIT))
		{
			if(form.lyrDetails().tabRecipents().grdRecipients().getValue() != null)
				form.getContextMenus().getRecipientsOperationsREMOVEItem().setVisible(true);
			
			boolean bPatientRecipientExists = false;
			for (int i = 0; i < form.lyrDetails().tabRecipents().grdRecipients().getRows().size(); i++)
			{
				grdRecipientsRow row = form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i);
				
				if(row.getValue() != null && row.getValue().getPatientIsNotNull() && row.getValue().getPatient().booleanValue())
				{
					bPatientRecipientExists = true;
					break;
				}
			}
			
			if(bPatientRecipientExists == false)
				form.getContextMenus().getRecipientsOperationsADD_PATIENTItem().setVisible(true);
			
			form.getContextMenus().getRecipientsOperationsADD_GPItem().setVisible(true);
			form.getContextMenus().getRecipientsOperationsADD_MOSItem().setVisible(true);
			form.getContextMenus().getRecipientsOperationsADD_PAT_GPItem().setVisible(true);
		}
	}
	
	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.lyrDetails().showtabRecipents();
		form.setMode(FormMode.EDIT);
		form.lyrDetails().tabRecipents().customControlAuthoringInfo().initializeComponent();
		form.lyrDetails().tabRecipents().setcustomControlAuthoringInfoEnabled(true);
		updateContextMenu();
		//WDEV-2536 
		form.lyrDetails().tabRecipents().imbStatus().setTooltip("");
	}
	
	//WDEV-2536 
	@SuppressWarnings("unchecked")
	private void setTooltip(ClinicalCorrespondenceVo vo)
	{
		if (vo != null &&
				vo.getStatusHistoryIsNotNull() &&
					vo.getStatusHistory().size() > 0)
		{
			CorrespondenceStatusVoCollection collVo = vo.getStatusHistory();
			
			if(collVo != null)
			{
				ArrayList collActions = getArrayList(collVo);
				Collections.sort(collActions, new ActionsComparator());
				copyArrayListIntoColl(collVo, collActions);
				
				StringBuffer tooltip = new StringBuffer();
				
				for (int i = 0; i < collVo.size(); i++)
				{
					tooltip.append(new Textile().process("**"+(i+1)+". "+
							collVo.get(i).getCorrespondenceStatus().getText() +"**"+"\n"+
								collVo.get(i).getAuthoringInformation().getCreationUser()+"&nbsp;&nbsp;&nbsp;"+
									collVo.get(i).getAuthoringInformation().getCreationDateTime()));	
				}
				
				form.lyrDetails().tabRecipents().imbStatus().setTooltip(tooltip.toString());
			}
		}
		else
			form.lyrDetails().tabRecipents().imbStatus().setTooltip(null);
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.lyrDetails().tabRecipents().setcustomControlAuthoringInfoEnabled(false);
		checkDocumentStatus();
		updateContextMenu();
	}

	private void checkDocumentStatus()
	{
		form.lyrDetails().tabRecipents().qmbVerifyingHCP().setEnabled(false);
		form.lyrDetails().tabRecipents().dtimVerifying().setEnabled(false);	
	}

	protected void onGrdRecipientsSelectionChanged() throws PresentationLogicException
	{
		updateContextMenu();	
	}

	protected void onlyrDetailsTabChanged(LayerBridge tab)
	{
		if(tab.equals(form.lyrDetails().tabPreview()) && form.getLocalContext().getSelectedItem() != null && form.getLocalContext().getReportChangedIsNotNull() && form.getLocalContext().getReportChanged().booleanValue())
		{
			form.lyrDetails().tabPreview().htmReport().setHTML("");
			
			if(form.getLocalContext().getSelectedItem() != null && form.getLocalContext().getReportChangedIsNotNull() && form.getLocalContext().getReportChanged().booleanValue() && form.getLocalContext().getSelectedItem().getID_ClinicalCorrespondence() != null)
			{
				buildReport();
				form.getLocalContext().setReportChanged(Boolean.FALSE);
			}
		}  //WDEV-1039 - 3) We need to Display the Medication Overview record for this context, if the ClinicalCorrespondenceBo has not been saved for the context we are in we need to retrieve the Overview and display it. 
		else if(tab.equals(form.lyrDetails().tabServices()) && !isMedicationDataLoaded())
		{
			form.lyrDetails().tabServices().dyngrdMedication().clear();
			
			MedicationOverViewFilterVo voFilter = new MedicationOverViewFilterVo();

			voFilter.setType(MedicationSnapShot.DISCHARGE);
			voFilter.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voFilter.setPatientRef(form.getGlobalContext().Core.getPatientShort());
			
			MedicationOverViewVo voOverView = domain.getLatestMedicationOverViewVo(voFilter);
			
			if (voOverView != null && voOverView.getMedicationIsNotNull())
			{
				//WDEV-1039 - 2)We need to change the icons used in the medication preview to those used in the medication page 
				MedicationDosesDynamicGridPopulation gridPopulation = new MedicationDosesDynamicGridPopulation(form.lyrDetails().tabServices().dyngrdMedication(), form.getImages().Admin.Activity, form.getImages().ICP.Child);			
				gridPopulation.initializeGrid();
				gridPopulation.populate(voOverView);
				
				form.getLocalContext().setIsMedicationDataLoaded(Boolean.TRUE);
			}
		}
		else if(tab.equals(form.lyrDetails().tabCommentsOPD()) && form.getLocalContext().getOutpatientSummaryChanged().booleanValue() && form.getMode().equals(FormMode.EDIT))
		{
			if(form.getLocalContext().getSelectedItem() == null)
			{
				OutpatientNotesOutcomeVo voOPDSummary = domain.getOPDSummary(form.getGlobalContext().Core.getCurrentClinicalContact());
				
				if(voOPDSummary != null && form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().size() == 3)
				{
					form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(0).setColText(voOPDSummary.getClinicalNote().getObjectiveNote());
					form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(1).setColText(voOPDSummary.getClinicalNote().getPlanNote());
					form.lyrDetails().tabCommentsOPD().grdClinicalNotes().getRows().get(2).setColText(voOPDSummary.getInstructionNextClinic());
					
					form.lyrDetails().tabCommentsOPD().cmbOPFollowUp().setValue(voOPDSummary.getOutcome());
					form.lyrDetails().tabCommentsOPD().intOPReviewIn().setValue(voOPDSummary.getReviewIn());
					form.lyrDetails().tabCommentsOPD().cmbOPReviewIn().setValue(voOPDSummary.getReviewinUnits());
					
					form.getLocalContext().setOutpatientSummaryChanged(Boolean.FALSE);
				}
			}
		}
	}

	private boolean isMedicationDataLoaded()
	{
		return form.getLocalContext().getIsMedicationDataLoadedIsNotNull() && form.getLocalContext().getIsMedicationDataLoaded().booleanValue();
	}

	private void buildReport()
	{
		ReportVoCollection coll = domain.listAssignedReports(new Integer(engine.getFormName().getID()));
		
		if(coll != null && coll.size() > 0)
		{
			ReportVo rep = null;
			for (int i = 0; i < coll.size(); i++)
			{
				if(canBeSeeded(coll.get(i)))
				{
					rep = coll.get(i);
					break;
				}
			}
			
			if(rep != null && rep.getTemplatesIsNotNull() && rep.getTemplates().size() > 0)
			{
				ReportTemplateVo template = rep.getTemplates().get(0);
				
				String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
				String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

				String[] obj = domain.getReportAndTemplate(rep.getID_ReportBo(), template.getID_TemplateBo());
			
				if(obj == null || obj.length == 0)
				{
					engine.showMessage("I could not get the report and template !");
					return;
				}
				
				QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

				client.addSeed(new SeedValue("ClinicalCorrespondence_id", form.getLocalContext().getSelectedItem().getID_ClinicalCorrespondence(), Integer.class));
				client.addSeed(new SeedValue("Export2HTML", Boolean.TRUE, Boolean.class));
				
				String resultUrl = "";
				try
				{
					resultUrl = client.buildReportAsUrlInlineFrame(obj[0], obj[1], urlReportServer, QueryBuilderClient.HTML, "", 1);
				} 
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error creating report: " + e1.getMessage());
					return;
				}
				
				form.lyrDetails().tabPreview().htmReport().setHTML(resultUrl);
			}
		}
		else
		{
			form.lyrDetails().tabPreview().htmReport().setHTML("<CENTER><B>No report was assigned to this form. Please go to Admin->Reports and assign a report to this form.</B></CENTER>");
		}
	}

	protected void onQmbVerifyingHCPTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrDetails().tabRecipents().qmbVerifyingHCP().clear();
		HcpLiteVoCollection list = domain.listHCP(value);
		
		for (int i = 0; i < list.size(); i++)
		{
			HcpLiteVo med = list.get(i);
			form.lyrDetails().tabRecipents().qmbVerifyingHCP().newRow(med, med.toString());	
		}
		
		if(list.size() == 1)
			form.lyrDetails().tabRecipents().qmbVerifyingHCP().setValue(list.get(0));
		else if(list.size() > 1)
			form.lyrDetails().tabRecipents().qmbVerifyingHCP().showOpened();
		
	}

	protected void onGrdRecipientsGridCheckBoxClicked(int column, grdRecipientsRow row, boolean isChecked) throws PresentationLogicException
	{
		for (int i = 0; i < form.lyrDetails().tabRecipents().grdRecipients().getRows().size(); i++)
		{
			if(!form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).getValue().equals(row.getValue()))
				form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i).setcolPrimary(false);
		}
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.GPSelection) && result.equals(DialogResult.OK))
		{
			if(form.getGlobalContext().Core.getGPDetailsIsNotNull())
				addGpToGrid(form.getGlobalContext().Core.getGPDetails());
		}
		if(formName.equals(form.getForms().Admin.MosSelect) && result.equals(DialogResult.OK))
		{
			if(form.getGlobalContext().Admin.getMemberOfStaffShortVoCollectionIsNotNull())
				addMosToGrid(form.getGlobalContext().Admin.getMemberOfStaffShortVoCollection());
		}
	}
	
	protected void onFormModeChanged()
	{
		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		form.btnClose().setVisible(viewMode && engine.isDialog());	
		
		if(!viewMode)
		{
			boolean dataSaved = isNewData();
			ClinicalCorrespondenceVo voClinicalCorrespondence = form.getLocalContext().getSelectedItem();
			
			if(dataSaved)
			{
				form.lyrDetails().tabRecipents().customControlAuthoringInfo().setEnabledAuthoringHCP(Boolean.TRUE);
				form.lyrDetails().tabRecipents().customControlAuthoringInfo().setEnabledDateTime(Boolean.TRUE);
			}
			else
			{
				form.lyrDetails().tabRecipents().customControlAuthoringInfo().setEnabledAuthoringHCP(Boolean.FALSE);
				form.lyrDetails().tabRecipents().customControlAuthoringInfo().setEnabledDateTime(Boolean.FALSE);
			}
			
			if(voClinicalCorrespondence != null)
			{
				//wdev-1800
				boolean bFound = true;
				if (voClinicalCorrespondence.getCurrentStatusIsNotNull() && voClinicalCorrespondence.getCurrentStatus().getCorrespondenceStatus().equals(CorrespondenceStatus.VERIFIED))
					bFound = false;
					
				if (voClinicalCorrespondence.getStatusHistoryIsNotNull() && voClinicalCorrespondence.getStatusHistory().size() > 0)
				{
					for (int i = 0 ; i < voClinicalCorrespondence.getStatusHistory().size() ; i ++)
					{
						if (voClinicalCorrespondence.getStatusHistory().get(i).getCorrespondenceStatus().equals(CorrespondenceStatus.VERIFIED))
						{
							bFound = false;
							
							break;
						}
					}
				}
				enableVerified(bFound);
			}
			else
				enableVerified(true);
		}

		//WDEV-1039 - 4) Disable the preview until the ClinicalCorrespondenceBo has been saved and in Edit Mode   
		form.lyrDetails().tabPreview().setHeaderEnabled(viewMode && !isNewData());
	}

	private void disableEnableAllControls(boolean value)
	{
		form.lyrDetails().tabRecipents().grdRecipients().setEnabled(value);
		form.lyrDetails().tabRecipents().setcustomControlAuthoringInfoEnabled(value);
		form.lyrDetails().tabRecipents().qmbVerifyingHCP().setEnabled(value);
		form.lyrDetails().tabRecipents().dtimVerifying().setEnabled(value);
	}

	private void enableVerified(boolean found) 
	{
		form.lyrDetails().tabRecipents().grdRecipients().setEnabled(found);
		form.lyrDetails().tabRecipents().grdRecipients().setReadOnly(!found);
		form.lyrDetails().tabRecipents().treCDI().setEnabled(found);
		
		form.lyrDetails().tabRecipents().cmbStatus().setEnabled(true);

		if(found)
			form.lyrDetails().tabRecipents().customControlAuthoringInfo().setEnabledDateTime(Boolean.TRUE);
		else
			form.lyrDetails().tabRecipents().customControlAuthoringInfo().setEnabledDateTime(Boolean.FALSE);
		form.lyrDetails().tabRecipents().qmbVerifyingHCP().setEnabled(!found);
		form.lyrDetails().tabRecipents().dtimVerifying().setEnabled(!found);
		
		form.lyrDetails().tabCommentsOPD().grdClinicalNotes().setEnabled(found);
		form.lyrDetails().tabCommentsOPD().cmbOPFollowUp().setEnabled(found);
		form.lyrDetails().tabCommentsOPD().intOPReviewIn().setEnabled(found);
		form.lyrDetails().tabCommentsOPD().cmbOPReviewIn().setEnabled(found);
		
		form.lyrDetails().tabSummaryIP().richDischargeSummary().setEnabled(found);
		form.lyrDetails().tabSummaryIP().cmbIPFollowUP().setEnabled(found);
		form.lyrDetails().tabSummaryIP().intIPReviewIn().setEnabled(found);
		form.lyrDetails().tabSummaryIP().cmbIPReviewIn().setEnabled(found);
		
		form.lyrDetails().tabServices().treProcedure().setEnabled(found);
	}

	private boolean isNewData()
	{
		ClinicalCorrespondenceVo voClinicalCorrespondence = form.getLocalContext().getSelectedItem();
		return !(voClinicalCorrespondence != null && voClinicalCorrespondence.getID_ClinicalCorrespondenceIsNotNull());
	}
	
	private void addMosToGrid(MemberOfStaffShortVoCollection memberOfStaffShortVoCollection)
	{
		for(int i = 0; i < memberOfStaffShortVoCollection.size(); i++)
		{
			MemberOfStaffShortVo mosVo = memberOfStaffShortVoCollection.get(i);
			if(isAddedToGrid(mosVo) == false)
			{
				grdRecipientsRow row = form.lyrDetails().tabRecipents().grdRecipients().getRows().newRow();
				ClinicalCorrespondenceRecipientsVo recipient = new ClinicalCorrespondenceRecipientsVo();
				
				recipient.setMemberOfStaff(mosVo);
				recipient.setPatient(Boolean.FALSE);
				
				row.setValue(recipient);
				row.setcolName(getMosText(mosVo));
				row.setcolPrimary(false);
			}
		}
	}

	private boolean isAddedToGrid(MemberOfStaffShortVo mosVo)
	{
		for (int i = 0; i < form.lyrDetails().tabRecipents().grdRecipients().getRows().size(); i++)
		{
			grdRecipientsRow recipientsRow = form.lyrDetails().tabRecipents().grdRecipients().getRows().get(i);
			if(recipientsRow.getValue() != null)
			{
				if(recipientsRow.getValue().getMemberOfStaffIsNotNull() && 
				  recipientsRow.getValue().getMemberOfStaff().equals(mosVo))
				{
					return true;
				}
			}
		}
		
		return false;
	}
	
	private String getMosText(MemberOfStaffLiteVo memberOfStaff)
	{
		if(memberOfStaff == null)
			return ""; 
		return (memberOfStaff.getName().getForename() != null ? memberOfStaff.getName().getForename():"") + " " + (memberOfStaff.getName().getSurname() != null ? memberOfStaff.getName().getSurname():"");  //wdev10872
	}

	private boolean canBeSeeded(ReportVo report)
	{
		//reports without seeds can always be printed
		if(!report.getSeedsIsNotNull())
			return true;
		
		if(report.getSeeds().size() == 0)
			return true;

		ReportSeedVo voReportSeed = new ReportSeedVo();
		
		return engine.formHasData(engine.getFormName(), voReportSeed.getIseeds(report.getSeeds()));
	}

	private void initializeVerifying()
	{
		HcpLiteVo voHcp = (HcpLiteVo) domain.getHcpLiteUser();
		if (voHcp != null)
		{
			form.lyrDetails().tabRecipents().qmbVerifyingHCP().newRow(voHcp, voHcp.getName().toString());
			form.lyrDetails().tabRecipents().qmbVerifyingHCP().setValue(voHcp);
		}
		
		form.lyrDetails().tabRecipents().dtimVerifying().setValue(new DateTime());
	}
	
	protected void onCmbStatusValueChanged() throws PresentationLogicException
	{
		if (form.lyrDetails().tabRecipents().cmbStatus().getValue() != null)
		{
			if (form.lyrDetails().tabRecipents().cmbStatus().getValue().equals(CorrespondenceStatus.VERIFIED))
			{
				if (verifyStatusHistory())
				{
					disableEnableAllControls(true);
					form.lyrDetails().tabRecipents().qmbVerifyingHCP().setEnabled(false);
					form.lyrDetails().tabRecipents().dtimVerifying().setEnabled(false);
					return;
				}
				
				form.lyrDetails().tabRecipents().qmbVerifyingHCP().setEnabled(true);
				form.lyrDetails().tabRecipents().dtimVerifying().setEnabled(true);
				//WDEV-2407
				form.lyrDetails().tabRecipents().qmbVerifyingHCP().setRequired(true);
				form.lyrDetails().tabRecipents().dtimVerifying().setRequired(true);
				//WDEV-2536 
				initializeVerifying();
			}
			else
			{
				form.lyrDetails().tabRecipents().qmbVerifyingHCP().setEnabled(false);
				form.lyrDetails().tabRecipents().qmbVerifyingHCP().setValue(null);
				form.lyrDetails().tabRecipents().dtimVerifying().setEnabled(false);
				form.lyrDetails().tabRecipents().dtimVerifying().setValue(null);
				//WDEV-2407
				form.lyrDetails().tabRecipents().qmbVerifyingHCP().setRequired(false);
				form.lyrDetails().tabRecipents().dtimVerifying().setRequired(false);
			}
		}
		else
		{
			form.lyrDetails().tabRecipents().qmbVerifyingHCP().setEnabled(false);
			form.lyrDetails().tabRecipents().qmbVerifyingHCP().setValue(null);
			form.lyrDetails().tabRecipents().dtimVerifying().setEnabled(false);
			form.lyrDetails().tabRecipents().dtimVerifying().setValue(null);
			form.lyrDetails().tabRecipents().qmbVerifyingHCP().setRequired(false);
			form.lyrDetails().tabRecipents().dtimVerifying().setRequired(false);
		}
	}

	protected void onQmbVerifyingHCPValueChanged() throws PresentationLogicException
	{
	}

	private void showRecordingControls(boolean b) 
	{
		form.lyrDetails().tabRecipents().lblRecDate().setVisible(b);
		form.lyrDetails().tabRecipents().lblRecUser().setVisible(b);
		form.lyrDetails().tabRecipents().txtRecordingUser().setVisible(b);
		form.lyrDetails().tabRecipents().txtRecordingUser().setEnabled(false);
		form.lyrDetails().tabRecipents().txtRecordingDateTime().setVisible(b);
		form.lyrDetails().tabRecipents().txtRecordingDateTime().setEnabled(false);
	}
	
	public class ActionsComparator implements Comparator
	{
		public int compare(Object o1, Object o2)
		{
			DateTime action1DT = null;
			DateTime action2DT = null;
			
			if(o1 instanceof CorrespondenceStatusVo)
			{
				CorrespondenceStatusVo listVo = ((CorrespondenceStatusVo)o1);
				action1DT = listVo.getAuthoringInformationIsNotNull() ? listVo.getAuthoringInformation().getCreationDateTime() : null;
			}
			
			if(o2 instanceof CorrespondenceStatusVo)
			{
				CorrespondenceStatusVo listVo = ((CorrespondenceStatusVo)o2);
				action2DT = listVo.getAuthoringInformationIsNotNull() ? listVo.getAuthoringInformation().getCreationDateTime() : null;
			}
			
			if(action1DT != null)
				return action1DT.compareTo(action2DT)*-1;
			
			if(action2DT != null)
				return action2DT.compareTo(action1DT)*-1;
						
			return 0;
		}
	}
	
	private ArrayList getArrayList(Object obj)
	{
		ArrayList<CorrespondenceStatusVo> list = new ArrayList<CorrespondenceStatusVo>();
			
		if (obj instanceof CorrespondenceStatusVoCollection) 
		{
			CorrespondenceStatusVoCollection coll = (CorrespondenceStatusVoCollection)obj;
			for (int i = 0; i < coll.size(); i++)
			{
				list.add(coll.get(i));
			}	
		}
		return list;
	}
	
	private void copyArrayListIntoColl(Object obj, ArrayList collActions)
	{
		if (obj instanceof CorrespondenceStatusVoCollection) 
		{	
			CorrespondenceStatusVoCollection coll = (CorrespondenceStatusVoCollection)obj;
			coll.clear();
			for (int i = 0; collActions  != null && i < collActions.size(); i++)
			{
				coll.add((CorrespondenceStatusVo)collActions.get(i));
			}
		}
	}

	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	
	protected void onIntIPReviewInValueChanged() throws PresentationLogicException 
	{
		if(	form.lyrDetails().tabSummaryIP().intIPReviewIn().getValue() != null && form.lyrDetails().tabSummaryIP().intIPReviewIn().getValue() > 0)
			form.lyrDetails().tabSummaryIP().cmbIPReviewIn().setRequired(true);
		else
			form.lyrDetails().tabSummaryIP().cmbIPReviewIn().setRequired(false);
			
		
		
	}
}
