//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.45 build 2287.24499)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.medicationmultipledoses;

import ims.clinical.helper.MedicationDosesDynamicGridPopulation;
import ims.clinical.vo.ClinicalCodingVo;
import ims.clinical.vo.DiscontinueMedicationReasonValuesVo;
import ims.clinical.vo.MedicationOverViewFilterVo;
import ims.clinical.vo.MedicationOverViewLiteVo;
import ims.clinical.vo.MedicationOverViewLiteVoCollection;
import ims.clinical.vo.MedicationOverViewVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.clinical.vo.lookups.MedicationSnapShot;
import ims.configuration.gen.ConfigFlag;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.MedicationDose;
import ims.core.vo.MedicationDoseCollection;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.PatientMedicationVo;
import ims.core.vo.PatientMedicationVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.MedciationCommencedDiscontinuedType;
import ims.core.vo.lookups.MedciationCommencedDiscontinuedTypeCollection;
import ims.core.vo.lookups.MedicationRoute;
import ims.core.vo.lookups.MedicationRouteCollection;
import ims.core.vo.lookups.MedicationTimesOfAdministration;
import ims.core.vo.lookups.MedicationTimesOfAdministrationCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.Image;
import ims.vo.interfaces.IClinicalCodingValue;

public class Logic extends BaseLogic
{		

	private static final Integer COL_DOSE_DOSE = new Integer(1);
	private static final Integer COL_DOSE_ROUTE = new Integer(2);
	private static final Integer COL_DOSE_TIMES = new Integer(3);
	private static final Integer COL_DOSE_COMMENCED_BY_TYPE = new Integer(4);
	private static final Integer COL_DOSE_COMMENCED_BY = new Integer(5);
	private static final Integer COL_DOSE_COMMENCED_DATE = new Integer(6);

	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		initializeCustomnControl();
		open();
		if(isDialog())
		{
			newMedicationInstance();
		}
	}
	
	private void initializeCustomnControl() 
	{
		form.ctnDetails().customControlCodingItem().setCodingItemType(CodingItemType.MEDICATION);
		form.ctnDetails().customControlCodingItem().setHotlist(new Boolean(false));	
		form.ctnDetails().customControlCodingItem().setIsRequired(true);
		//Added for WDEV-7306
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true);
	}

	private void initialize() 
	{
		form.setMode(FormMode.VIEW);
		
		MedicationDosesDynamicGridPopulation gridPopulation = getHelper();
		gridPopulation.initializeGrid();
		
		formatMedicationAndDosesGrids();
		
		if (isDialog())
			form.getLocalContext().setScreenType(MedicationSnapShot.ADMISSION);
		if (isMedicationMultipleDosesOnAdmission() || isDialog())
			form.getLocalContext().setScreenType(MedicationSnapShot.ADMISSION);
		else if (isMedicationMultipleDosesOnDischarge())
			form.getLocalContext().setScreenType(MedicationSnapShot.DISCHARGE);
		else if (isMedicationMultipleDosesOPD())
			form.getLocalContext().setScreenType(MedicationSnapShot.OPD);
		else if (isMedicationMultipleDosesPatientLevel())
			form.getLocalContext().setScreenType(MedicationSnapShot.PATIENT);

		if ( (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
			&& (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())) )
		{
			isBtnCloseVisible(true);
			form.lnkReturn().setVisible(true);
		}
		else
		{
			isBtnCloseVisible(false);
			form.lnkReturn().setVisible(false);
		}

		displayOrHideEnableDisableScreenSpecificControls();
	}

	private void displayOrHideEnableDisableScreenSpecificControls() 
	{
		form.ctnDetails().lblIncludeinTTO().setVisible(false);
		form.ctnDetails().chkTTO().setVisible(false);
		form.ctnDetails().lblNumDays().setVisible(false);
		form.ctnDetails().intNumDays().setVisible(false);
		form.recbrOverviews().setVisible(false);
		
		MedicationSnapShot screenType = form.getLocalContext().getScreenType();
		if (screenType != null)
		{
			if (screenType.equals(MedicationSnapShot.DISCHARGE) || screenType.equals(MedicationSnapShot.OPD))
			{
				form.ctnDetails().lblIncludeinTTO().setVisible(true);
				form.ctnDetails().chkTTO().setVisible(true);
				form.ctnDetails().lblNumDays().setVisible(true);
				form.ctnDetails().intNumDays().setVisible(true);
				
				form.ctnDetails().chkTTO().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.ctnDetails().intNumDays().setEnabled(form.getMode().equals(FormMode.EDIT));
			}
			else if(screenType.equals(MedicationSnapShot.PATIENT))
			{
				form.recbrOverviews().setEnabled(true);
				form.recbrOverviews().setVisible(true);
				form.setcustomControlAuthoringInfoEnabled(false);
				form.setMode(FormMode.VIEW);
			}
		}
		if (form.getMode().equals(FormMode.VIEW) )
		{
			form.chkFilter().setVisible(false);
			form.setcustomControlAuthoringInfoEnabled(false);
			if (form.getLocalContext().getCurrentOverViewIsNotNull()) 
				form.chkFilter().setVisible(true);
		}
		else
		{
			form.setcustomControlAuthoringInfoEnabled(true);
			if (isDialog())
				isBtnCloseVisible(true);
		}
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Clinical.MedicationDiscontinue) && result.equals(DialogResult.OK))
		{
			if (form.getLocalContext().getbDiscontinueMed().booleanValue())
			{
				PatientMedicationVo voMed = form.getLocalContext().getSelectedInstance();
				DiscontinueMedicationReasonValuesVo voReason = form.getGlobalContext().Clinical.getDiscontinueMedicationReasonValues();

				voMed.setIsDiscontinued(Boolean.TRUE);
				voMed.setIsDiscontinuedDate(voReason.getStoppedDate());
				voMed.setIsDiscontinuedHcp(voReason.getStoppedHCP());
				voMed.setDiscontinuedByType(voReason.getStoppedByType());
				voMed.setIsDiscontinuedReason(voReason.getStoppedReason());
				voMed.setIsDiscontinuedReasonText(voReason.getStoppedReasonDesc());
				
				for (int i = 0 ; i < voMed.getPrescribedDoses().size() ; i++)
				{
					MedicationDose voDose = voMed.getPrescribedDoses().get(i);

					voDose.setIsStopped(Boolean.TRUE);
					voDose.setIsStoppedDate(voReason.getStoppedDate());
					voDose.setIsStoppedHcp(voReason.getStoppedHCP());
					voDose.setStoppedByType(voReason.getStoppedByType());
					voDose.setIsStoppedReason(voReason.getStoppedReason());
					voDose.setIsStoppedReasonText(voReason.getStoppedReasonDesc());

					voMed.getPrescribedDoses().set(i, voDose);
				}

				form.getLocalContext().setSelectedInstance(voMed);
				
				MedicationOverViewVo voOverView = form.getLocalContext().getCurrentOverView();
				for (int i = 0 ; i < voOverView.getMedication().size() ; i++)
				{
					if (voMed.getID_PatientMedication().equals(voOverView.getMedication().get(i).getID_PatientMedication()))
						voOverView.getMedication().set(i, voMed);
				}

				String[] errors = voOverView.validate();
				if (errors != null)
				{
					engine.showErrors(errors);
				}
				
				try
				{
					PatientRefVo voPat = new PatientRefVo();
					voPat.setID_Patient(form.getGlobalContext().Core.getPatientShort().getID_Patient());
					form.getLocalContext().setCurrentOverView(domain.saveMedicationOverviewVo(voOverView, voPat));
				} 
				catch (StaleObjectException e) 
				{			
					engine.showMessage(e.getMessage());
				}		
				open();
			}
			else if (form.getLocalContext().getbDiscontinueDose().booleanValue())
			{
				MedicationDose voDose = (MedicationDose)form.ctnDetails().dyngrdDoses().getSelectedRow().getValue();
				DiscontinueMedicationReasonValuesVo voReason = form.getGlobalContext().Clinical.getDiscontinueMedicationReasonValues();

				voDose.setIsStopped(Boolean.TRUE);
				voDose.setIsStoppedDate(voReason.getStoppedDate());
				voDose.setIsStoppedHcp(voReason.getStoppedHCP());
				voDose.setIsStoppedReason(voReason.getStoppedReason());
				voDose.setIsStoppedReasonText(voReason.getStoppedReasonDesc());
				
				form.ctnDetails().dyngrdDoses().getSelectedRow().setValue(voDose);
				form.ctnDetails().dyngrdDoses().getSelectedRow().setBold(false);
				form.getContextMenus().getMedicationMultipleDosesDISCONTINUE_DOSEItem().setVisible(false);
				
			}
			form.getLocalContext().setbDiscontinueDose(Boolean.FALSE);
			form.getLocalContext().setbDiscontinueMed(Boolean.FALSE);
		}

		if (formName.equals(form.getForms().Clinical.CopyMedication) && result.equals(DialogResult.OK))
		{
			copyMedicationOverViewDropAuthoringHCPAndDiscontinuedMeds(form.getGlobalContext().Clinical.getCurrentMedicationOverView());

			MedicationOverViewVo voOverView = form.getLocalContext().getCurrentOverView();
			
			if ( (voOverView.getMedicationIsNotNull()) && (voOverView.getMedication().size() > 0) )
			{
				voOverView.setID_MedicationOverview(null);
				voOverView.setType(form.getLocalContext().getScreenType());
				
				voOverView.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

				voOverView.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
								
				String[] errors = voOverView.validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return;
				}
				
				try
				{
					PatientRefVo voPat = new PatientRefVo();
					voPat.setID_Patient(form.getGlobalContext().Core.getPatientShort().getID_Patient());
					form.getLocalContext().setCurrentOverView(domain.saveMedicationOverviewVo(voOverView, voPat));
				} 
				catch (StaleObjectException e) 
				{			
					engine.showMessage(e.getMessage());
				}		

				open();
			}
		}

		
		if (formName.equals(form.getForms().Core.TaxonomySearch) && result.equals(DialogResult.OK))
		{
//			if (form.getGlobalContext().Core.getTaxonomyMap() != null)
//			{
//				TaxonomyMap voTaxonomyMap = form.getGlobalContext().Core.getTaxonomyMap();
//				TaxonomyMapCollection collTaxonomyMap = new TaxonomyMapCollection();
//				collTaxonomyMap.add(voTaxonomyMap);
//
//				MedicationVo voMedicationConfig = new MedicationVo();
//				voMedicationConfig.setMedicationName(form.getGlobalContext().Core.getTaxonomyMap().getDescription());
//				voMedicationConfig.setTaxonomyMap(collTaxonomyMap);
//				voMedicationConfig.setIsActive(Boolean.TRUE);
//
//				String[] errors = voMedicationConfig.validate();
//				if (errors != null)
//				{
//					engine.showErrors(errors);
//					return;
//				}
//
//				try
//				{
//					voMedicationConfig = domain.saveConfigVo(voMedicationConfig);
//				}
//				catch (StaleObjectException e)
//				{
//					engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
//					open();
//					return;
//				}
//				catch (UniqueKeyViolationException e)
//				{
//					engine.showMessage("A Medication with this name already exists, Duplicates are not allowed");
//					return;
//				}
//
//				if (voMedicationConfig != null)
//				{
//					form.ctnDetails().qmbMedication().clear();
//					
//					form.ctnDetails().qmbMedication().newRow(voMedicationConfig, voMedicationConfig.getMedicationName());
//					form.ctnDetails().qmbMedication().setValue(voMedicationConfig);
//				
//					form.ctnDetails().txtOther().setValue(voMedicationConfig.getMedicationName());
//				}
//			}
		}

	}
	
	private void copyMedicationOverViewDropAuthoringHCPAndDiscontinuedMeds(MedicationOverViewVo currentMedicationOverView) 
	{
		currentMedicationOverView.setAuthoringInformation(null);
		
		PatientMedicationVoCollection copyOfMeds = new PatientMedicationVoCollection(); 
		for(int i = 0 ; i < currentMedicationOverView.getMedication().size() ; i++)
		{
			PatientMedicationVo voMed = currentMedicationOverView.getMedication().get(i);
			if ( (voMed.getIsDiscontinued() == null) || (voMed.getIsDiscontinuedIsNotNull() && (voMed.getIsDiscontinued().booleanValue() == false)) 
				&& (voMed.getPrescribedDosesIsNotNull()))
			{
				MedicationDoseCollection copyOfDoses = new MedicationDoseCollection(); 
				boolean bAllDosesAreDiscontinued = true;
				MedicationDose voDose = null;
				
				//Loop thru to see if collection has any non-discontinued Doses.
				for (int k = 0 ; k < voMed.getPrescribedDoses().size() ; k++)
				{
					voDose = voMed.getPrescribedDoses().get(k);
					if ((voDose.getIsStopped() == null) || (voDose.getIsStoppedIsNotNull() && (voDose.getIsStopped().booleanValue() == false)) )
						bAllDosesAreDiscontinued = false;
				}
				//If there is then copy valid doses and the med itself.
				if (!bAllDosesAreDiscontinued)
				{
					for(int j = 0 ; j < voMed.getPrescribedDoses().size() ; j++)
					{
						voDose = voMed.getPrescribedDoses().get(j);
						if ((voDose.getIsStopped() == null) || (voDose.getIsStoppedIsNotNull() && (voDose.getIsStopped().booleanValue() == false)) )
						{
							voDose.setID_PatientMedicationDose(null);
								
							voDose.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
															
							voDose.setIsCopied(new Boolean(true));
							
							copyOfDoses.add(voDose);
						}
					}
				
					voMed.setPrescribedDoses(copyOfDoses);
					
					voMed.setID_PatientMedication(null);
					
					voMed.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
					voMed.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
	
					voMed.setNoDaysSupply(null);//wdev-1462
					voMed.setIsInTTO(null);//wdev-1462
					
					voMed.setIsCopied(new Boolean(true));
					copyOfMeds.add(voMed);
				}
			}
		}

		currentMedicationOverView.setMedication(copyOfMeds);
		currentMedicationOverView.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		form.getLocalContext().setCurrentOverView(currentMedicationOverView);
	}

	private void setReturnToFormDescription(PatientMedicationVo voOverView) 
	{
		if ( (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
				&& (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())) )
		{
			//Set the CDI Description for the return to form link
			String str = form.getGlobalContext().Clinical.getReturnToFormCDIDescriptionIsNotNull() ? form.getGlobalContext().Clinical.getReturnToFormCDIDescription() : "";
			StringBuffer sb = new StringBuffer();
			sb.append(str);
			if  (sb.length() > 0)
				sb.append(", ");
			
			sb.append(voOverView.getOtherMedicationText());
			
			form.getGlobalContext().Clinical.setReturnToFormCDIDescription(sb.toString());
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		}
	}
	private void clearAll()
	{
		form.customControlAuthoringInfo().setValue(null);
		clearInstanceControls();
	}
	private void open() 
	{
		form.ctnDetails().setCollapsed(true);
		MedicationOverViewVo voOverView = new MedicationOverViewVo();

		PatientRefVo voPat = new PatientRefVo();
		voPat.setID_Patient(form.getGlobalContext().Core.getPatientShort().getID_Patient());
		MedicationOverViewFilterVo voFilter = new MedicationOverViewFilterVo();
		
		clearAll();		//wdev-15370
		
		voFilter.setType(form.getLocalContext().getScreenType());
		
		voFilter.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voFilter.setPatientRef(voPat);
		
		MedicationOverViewLiteVoCollection voColl = null;
		
		if (form.getLocalContext().getScreenTypeIsNotNull() 
				&& form.getLocalContext().getScreenType().equals(MedicationSnapShot.PATIENT))
		{
			voColl = domain.listMedicationOverviews(voFilter);
			if (voColl == null)
			{
				engine.showMessage("There is no current Medication Overview for this patient.");
				form.setMode(FormMode.VIEW);
				displayOrHideEnableDisableScreenSpecificControls();
				return;
			}

			for (int i = 0 ; i < voColl.size() ; i++)
			{
				MedicationOverViewLiteVo voOverLite = voColl.get(i);
				StringBuffer sb = new StringBuffer();
				sb.append(voOverLite.getTypeIsNotNull() ? voOverLite.getType().toString()+ ", " : "");
				sb.append(voOverLite.getAuthoringInformationIsNotNull() ? voOverLite.getAuthoringInformation().toString(" - ") + ", " : "");
				
				form.recbrOverviews().newRow(voOverLite, sb.toString());
			}
			if (voColl.size() > 0)
			{
				form.recbrOverviews().setValue(voColl.get(0));
				voOverView = domain.getMedicationOverView(voColl.get(0));
				openOverview(voOverView);
			}
		}
		else
		{
			voOverView = domain.getLatestMedicationOverViewVo(voFilter);
			if (voOverView == null)
				engine.showMessage("There is no current Medication Overview for this patient.");
			//Check to see if the context Id is the same, if not there is no OverView for the current Context - show dialog

			if ( (voOverView != null ) 
				&& (voOverView.getCareContextIsNotNull())
				&& (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
				&& (voOverView.getTypeIsNotNull()) 
				&& (form.getLocalContext().getScreenTypeIsNotNull() 
				&& !form.getLocalContext().getScreenType().equals(MedicationSnapShot.PATIENT)))
			{
				if ( (voOverView.getType().getId() != form.getLocalContext().getScreenType().getId())
					 || ( ! voOverView.getCareContext().getID_CareContext().equals(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext())))   
				{
					setDefaultInstanceControls();
									
					//Different Care Contexts or Types - show this overview in a dialog
					form.getGlobalContext().Clinical.setCurrentMedicationOverView(voOverView);
								
					engine.open(form.getForms().Clinical.CopyMedication, false);
					return;
				}
			}
			
			openOverview(voOverView);
		}
			
		form.setMode(FormMode.VIEW);
		displayOrHideEnableDisableScreenSpecificControls();
		form.getLocalContext().setSelectedInstance(null);
		
		
		
	}


	private void openOverview(MedicationOverViewVo voOverView) 
	{
		//WDEV-6577 Fixes rie by doing another domain list on rie elements
		if (voOverView != null)
			domain.listMedications(voOverView);
		form.getLocalContext().setCurrentOverView(voOverView);
		
		MedicationDosesDynamicGridPopulation gridPopulation = getHelper();

		if ( (voOverView != null) && (voOverView.getMedicationIsNotNull()) )
		{
			if (form.chkFilter().getValue())
				gridPopulation.populateHideDiscontinued(voOverView);
			else	
				gridPopulation.populate(voOverView);
				
			//Defaulting Authoring HCP and Date
			form.customControlAuthoringInfo().setValue(voOverView.getAuthoringInformation());
		}
	}

	public void updateControlsState()
	{
		form.getContextMenus().hideAllMedicationMultipleMenuItems();
		form.getContextMenus().hideAllMedicationMultipleDosesMenuItems();
		boolean isRieMode = engine.isRIEMode();
	
		form.getContextMenus().getMedicationMultipleNEW_MEDICATIONItem().setVisible(form.getMode().equals(FormMode.VIEW) && !isRieMode);
		form.getContextMenus().getMedicationMultipleNEW_MEDICATIONItem().setEnabled(form.getMode().equals(FormMode.VIEW));

		form.getContextMenus().getMedicationMultipleUPDATE_MEDICATIONItem().setVisible( (form.getMode().equals(FormMode.VIEW)) 
				&& (form.dyngrdMedication().getSelectedRow() != null) && !isRieMode);
		form.getContextMenus().getMedicationMultipleUPDATE_MEDICATIONItem().setEnabled( (form.getMode().equals(FormMode.VIEW)) 
				&& (form.dyngrdMedication().getSelectedRow() != null) );
	
		form.getContextMenus().getMedicationMultipleDISCONTINUE_MEDICATIONItem().setVisible( (form.getMode().equals(FormMode.VIEW)) 
				&& (form.dyngrdMedication().getSelectedRow() != null) && !isRieMode );
		form.getContextMenus().getMedicationMultipleDISCONTINUE_MEDICATIONItem().setEnabled( (form.getMode().equals(FormMode.VIEW)) 
				&& (form.dyngrdMedication().getSelectedRow() != null) );
		
		
		form.getContextMenus().getMedicationMultipleDosesNEW_DOSEItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getMedicationMultipleDosesNEW_DOSEItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		
		form.getContextMenus().getMedicationMultipleDosesDISCONTINUE_DOSEItem().setVisible( (form.getMode().equals(FormMode.EDIT)) 
				&& (form.ctnDetails().dyngrdDoses().getSelectedRow() != null) );
		form.getContextMenus().getMedicationMultipleDosesDISCONTINUE_DOSEItem().setEnabled( (form.getMode().equals(FormMode.EDIT)) 
				&& (form.ctnDetails().dyngrdDoses().getSelectedRow() != null) );


		if (form.getMode().equals(FormMode.EDIT))
		{
			form.ctnDetails().setcustomControlCodingItemEnabled(true);
			form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true); //wdev-15369
			form.customControlAuthoringInfo().setEnabledAuthoringHCP(true);
		}
		else
		{
			form.customControlAuthoringInfo().setIsRequiredPropertyToControls(false);	//wdev-15369
			form.customControlAuthoringInfo().setEnabledAuthoringHCP(false);
		}
		
		form.ctnDetails().customControlCodingItem().setParentEditing(new Boolean(form.getMode().equals(FormMode.EDIT)));		
		
		
		if (form.getLocalContext().getScreenTypeIsNotNull() 
				&& form.getLocalContext().getScreenType().equals(MedicationSnapShot.PATIENT) )
		{
			form.getContextMenus().hideAllMedicationMultipleMenuItems();
			form.getContextMenus().hideAllMedicationMultipleDosesMenuItems();
		}
	}

	protected void allowEditingInstanceControls(boolean bEditable)
	{
		if (form.getLocalContext().getSelectedInstance().getID_PatientMedicationIsNotNull())//Updating
			bEditable = false;
			
		//If the Medication chosen is Discontinued only allow changes to the SOurce, all other controls to be readonly
		form.ctnDetails().qmbCommencedBy().setEnabled(bEditable);
		form.ctnDetails().cmbCommencedBy().setEnabled(bEditable);
		form.ctnDetails().dteCommenced().setEnabled(bEditable);
		form.ctnDetails().chkTTO().setEnabled(bEditable);
		form.ctnDetails().intNumDays().setEnabled(bEditable);
		form.ctnDetails().cmbFrequency().setEnabled(bEditable);
		
		//For an update to a non-discontinued med only allow editing of Frequency and Source. Not allowed edit Doses. Can only add and remove them.
		form.ctnDetails().cmbFrequency().setEnabled(!(form.getLocalContext().getSelectedInstance().getIsDiscontinuedIsNotNull() ? form.getLocalContext().getSelectedInstance().getIsDiscontinued().booleanValue() : false));
	}	
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	protected void onDyngrdMedicationRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		if(form.getMode().equals(FormMode.EDIT)) return;
		
		form.ctnDetails().setCollapsed(false);
		updateControlsState();
		if (form.dyngrdMedication().getSelectedRow().getValue() instanceof PatientMedicationVo)
		{
			form.getLocalContext().setSelectedInstance((PatientMedicationVo)form.dyngrdMedication().getSelectedRow().getValue());
			populateInstanceControls((PatientMedicationVo)form.dyngrdMedication().getSelectedRow().getValue());

			PatientMedicationVo voMed = (PatientMedicationVo)form.dyngrdMedication().getSelectedRow().getValue();
			if ( (voMed.getIsDiscontinuedIsNotNull()) && (voMed.getIsDiscontinued().booleanValue()) )
				form.getContextMenus().getMedicationMultipleDISCONTINUE_MEDICATIONItem().setVisible(false);
		}
	}
	
	protected void onQmbCommencedByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().qmbCommencedBy().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		filter.setHcpType(HcpDisType.MEDICAL);
		
		HcpCollection voHCPColl = domain.listHcps(filter);
		
		if(voHCPColl != null)
		{
			for (int i = 0; i < voHCPColl.size(); i++)
			{
				form.ctnDetails().qmbCommencedBy().newRow(voHCPColl.get(i), voHCPColl.get(i).toString());
			}
			if (voHCPColl.size() == 1)
			{
				form.ctnDetails().qmbCommencedBy().setValue(voHCPColl.get(0));
			}
			else if (voHCPColl.size() > 1)
			{
				form.ctnDetails().qmbCommencedBy().showOpened();		
			}
		}
	}
	
	protected void onDyngrdDosesRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		updateControlsState();
		
		updateDiscontinueDoseMenu();
	}
	//had to reuse this piece of code
	private void updateDiscontinueDoseMenu() {
		if (form.ctnDetails().dyngrdDoses().getSelectedRow().getValue() instanceof MedicationDose)
		{
			MedicationDose voDose = (MedicationDose)form.ctnDetails().dyngrdDoses().getSelectedRow().getValue();
			if ( (!voDose.getID_PatientMedicationDoseIsNotNull()) || (voDose != null && voDose.getIsStopped() != null && voDose.getIsStopped().booleanValue()))
				form.getContextMenus().getMedicationMultipleDosesDISCONTINUE_DOSEItem().setVisible(false);
		}
	}
	
	

	protected void onBtnThesarusSearchClick()
	{
		engine.open(form.getForms().Core.TaxonomySearch);
	}
		
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.ctnDetails().chkTTO().setEnabled(false);
		form.ctnDetails().intNumDays().setEnabled(false);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();		
	}
	
	private void newMedicationInstance() 
	{
		form.ctnDetails().setCollapsed(false);
		PatientMedicationVo voNewInstance = new PatientMedicationVo();
		voNewInstance.setIsCopied(new Boolean(false));
		voNewInstance.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voNewInstance.setPatient(form.getGlobalContext().Core.getPatientShort());
		voNewInstance.setIsDiscontinued(Boolean.FALSE);								// WDEV-13309
		form.getLocalContext().setSelectedInstance(voNewInstance);

		clearInstanceControls();
		setDefaultInstanceControls();
		form.setMode(FormMode.EDIT);
		displayOrHideEnableDisableScreenSpecificControls();
		allowEditingInstanceControls(true);
		
		//Defaulting Authoring HCP and Date
		form.ctnDetails().dteCommenced().setValue(new Date());
		form.ctnDetails().cmbCommencedBy().setValue(MedciationCommencedDiscontinuedType.MOS);
		Hcp hcp = (Hcp) domain.getHcpUser();
		if(hcp != null)
		{
			form.ctnDetails().qmbCommencedBy().newRow(hcp, hcp.toString());
			form.ctnDetails().qmbCommencedBy().setValue(hcp);
		}
		
		//WDEV-2162
		newMedicationDoseInstance();
		updateDiscontinueDoseMenu();//WDEV-14928
	}

	private void clearInstanceControls() 
	{
		form.ctnDetails().customControlCodingItem().clear();
		form.ctnDetails().cmbSource().setValue(null);
		form.ctnDetails().cmbFrequency().setValue(null);
		form.ctnDetails().qmbCommencedBy().setValue(null);
		form.ctnDetails().cmbCommencedBy().setValue(null);
		form.ctnDetails().dteCommenced().setValue(null);
		form.ctnDetails().chkTTO().setValue(false);
		form.ctnDetails().intNumDays().setValue(null);
		form.ctnDetails().dyngrdDoses().getRows().clear();
	}

	private void setDefaultInstanceControls() 
	{
		form.customControlAuthoringInfo().initializeComponent(HcpDisType.MEDICAL);
	}

	private void populateInstanceControls(PatientMedicationVo voSelectedInstance) 
	{
		
		form.ctnDetails().customControlCodingItem().setValue(voSelectedInstance);		
		form.ctnDetails().cmbSource().setValue(voSelectedInstance.getSourceofInformation());
		form.ctnDetails().cmbFrequency().setValue(voSelectedInstance.getFrequency());

		form.ctnDetails().chkTTO().setValue(voSelectedInstance.getIsInTTOIsNotNull() ? voSelectedInstance.getIsInTTO().booleanValue() : false);
		form.ctnDetails().intNumDays().setValue(voSelectedInstance.getNoDaysSupply());

		form.ctnDetails().cmbCommencedBy().setValue(voSelectedInstance.getCommencedByType());

		if (voSelectedInstance.getHcpCommencedIsNotNull())
		{
			form.ctnDetails().qmbCommencedBy().newRow(voSelectedInstance.getHcpCommenced(), voSelectedInstance.getHcpCommenced().getName().toString());
			form.ctnDetails().qmbCommencedBy().setValue(voSelectedInstance.getHcpCommencedIsNotNull() ? voSelectedInstance.getHcpCommenced() : null);
		}
		else
			form.ctnDetails().qmbCommencedBy().setValue(null);
		
		form.ctnDetails().dteCommenced().setValue(voSelectedInstance.getCommencedDate() != null ? new Date(voSelectedInstance.getCommencedDate()) : null); //WDEV-7141
		
		fillDosesGridReadOnly(voSelectedInstance.getPrescribedDoses());
	}

	private void fillDosesGridReadOnly(MedicationDoseCollection prescribedDoses) 
	{
		form.ctnDetails().dyngrdDoses().getRows().clear();
		for(int i = 0 ; i < prescribedDoses.size() ; i++)
		{
			DynamicGridRow childRow = form.ctnDetails().dyngrdDoses().getRows().newRow();
			
			MedicationDose voDose = prescribedDoses.get(i);
			
			DynamicGridCell cell1 = childRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_DOSE), DynamicCellType.LABEL);
			cell1.setValue(voDose.getDoseIsNotNull() ? voDose.getDose() : "");
			cell1.setTooltip(voDose.getDiscontinuedTooltip());
			cell1.setIdentifier(voDose.getDose());
			cell1.setWidth(120);

			DynamicGridCell cell2 = childRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_ROUTE), DynamicCellType.LABEL);
			cell2.setValue(voDose.getAdminRouteIsNotNull() ? voDose.getAdminRoute().toString() : "");
			cell2.setIdentifier(voDose.getAdminRoute());
			cell2.setWidth(120);

			DynamicGridCell cell3 = childRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_TIMES), DynamicCellType.LABEL);
			cell3.setValue(voDose.getAdminTimesIsNotNull() ? createTimesString(voDose.getAdminTimes()) : "");
			cell3.setTooltip(voDose.getAdminTimesIsNotNull() ? createTimesString(voDose.getAdminTimes()) : "");
			cell3.setIdentifier(voDose.getAdminTimes());
			cell3.setWidth(140);

			DynamicGridCell cell6 = childRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_BY_TYPE), DynamicCellType.LABEL);
			cell6.setValue(voDose.getCommencedByTypeIsNotNull() ? voDose.getCommencedByType().toString() : "");
			cell6.setIdentifier(voDose.getCommencedByType());
			cell6.setWidth(140);

			DynamicGridCell cell4 = childRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_BY), DynamicCellType.LABEL);
			cell4.setValue(voDose.getDoseStartHcpIsNotNull() ? voDose.getDoseStartHcp().toString() : "");
			cell4.setIdentifier(voDose.getDoseStartHcp());
			cell4.setWidth(160);

			DynamicGridCell cell5 = childRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_DATE), DynamicCellType.LABEL);
			cell5.setValue(voDose.getDoseStartDateIsNotNull() ? voDose.getDoseStartDate().toString() : null);
			cell5.setIdentifier(voDose.getDoseStartDate());
			cell5.setWidth(-1);
			

			childRow.setValue(voDose);
			
			childRow.setExpanded(true);
			
			if ( (voDose.getIsStoppedIsNotNull()) && (voDose.getIsStopped().booleanValue()) )
				childRow.setBold(false);
			else
				childRow.setBold(true);
		}
	}

	private PatientMedicationVo populateInstanceData() 
	{
		PatientMedicationVo voSelectedInstance = form.getLocalContext().getSelectedInstance();
		
		if(voSelectedInstance == null)
		{
			voSelectedInstance = new PatientMedicationVo();
			voSelectedInstance.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voSelectedInstance.setPatient(form.getGlobalContext().Core.getPatientShort());
			voSelectedInstance.setIsDiscontinued(Boolean.FALSE);
		}

		IClinicalCodingValue voResult = form.ctnDetails().customControlCodingItem().getValue();
		if(voResult == null){
			ClinicalCodingVo vo = new ClinicalCodingVo();
			vo.setIClinicalCodingValue(form.ctnDetails().customControlCodingItem().getSelectedItem());
			vo.setIClinicalCodingValueDescription(form.ctnDetails().customControlCodingItem().getDescription());
			if(vo.getIClinicalCodingValue()!=null && vo.getIClinicalCodingValueDescription()!=null)
				voResult = vo;
		}
		if (voResult != null)
		{
			if (voResult.getIClinicalCodingValue() instanceof MedicationLiteVo)
			{
				voSelectedInstance.setMedication((MedicationLiteVo) voResult.getIClinicalCodingValue());
				voSelectedInstance.setOtherMedicationText(voResult.getIClinicalCodingValueDescription());						
			}
			else
				throw new CodingRuntimeException("MedicationLiteVo expected from component");				
		}
		else //http://jira/browse/WDEV-3518 - If no description is entered set the equivalent field in the vo to null;
		{
			voSelectedInstance.setOtherMedicationText(null);
		}

		voSelectedInstance.setSourceofInformation(form.ctnDetails().cmbSource().getValue());
		voSelectedInstance.setFrequency(form.ctnDetails().cmbFrequency().getValue());

		voSelectedInstance.setIsInTTO(new Boolean(form.ctnDetails().chkTTO().getValue()));		
		voSelectedInstance.setNoDaysSupply(form.ctnDetails().intNumDays().getValue());
		
		voSelectedInstance.setHcpCommenced(form.ctnDetails().qmbCommencedBy().getValue());
		voSelectedInstance.setCommencedDate(form.ctnDetails().dteCommenced().getValue());
		voSelectedInstance.setCommencedByType(form.ctnDetails().cmbCommencedBy().getValue());

		voSelectedInstance.setAuthoringInformation(form.customControlAuthoringInfo().getValue());

		MedicationDoseCollection collDose = new MedicationDoseCollection();
		DynamicGridRow pRow;
		for(int i = 0 ; i < form.ctnDetails().dyngrdDoses().getRows().size() ; i++)
		{
			pRow = form.ctnDetails().dyngrdDoses().getRows().get(i);

			MedicationDose voDose = new MedicationDose();

			voDose = (MedicationDose) pRow.getValue();
			
			if (!voDose.getID_PatientMedicationDoseIsNotNull())
			{
				voDose.setDose((String) pRow.getCells().get(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_DOSE)).getValue());
				voDose.setAdminRoute((MedicationRoute) pRow.getCells().get(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_ROUTE)).getValue());
				
				DynamicGridCell cellTimes = pRow.getCells().get(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_TIMES));
				MedicationTimesOfAdministrationCollection coll = new MedicationTimesOfAdministrationCollection();
				for(int j = 0 ; j < cellTimes.getItems().size() ; j++)
				{
					if (cellTimes.getItems().get(j).isChecked())
						coll.add((MedicationTimesOfAdministration) cellTimes.getItems().get(j).getValue());
				}

				voDose.setAdminTimes(coll);

				voDose.setCommencedByType((MedciationCommencedDiscontinuedType) pRow.getCells().get(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_BY_TYPE)).getValue());

				voDose.setDoseStartDate((Date) pRow.getCells().get(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_DATE)).getValue());
				voDose.setDoseStartHcp((Hcp) pRow.getCells().get(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_BY)).getValue());

				voDose.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
			}
			if(voDose.getDoseIsNotNull() || voDose.getAdminRouteIsNotNull() || voDose.getAdminTimes().size()>0
					|| voDose.getDoseStartDateIsNotNull() || voDose.getCommencedByTypeIsNotNull() || voDose.getDoseStartHcpIsNotNull())
				collDose.add(voDose);
		}
		
		voSelectedInstance.setPrescribedDoses(collDose);
		
		return voSelectedInstance;
	}

	public boolean save()
	{
		PatientMedicationVo currentInstance = populateInstanceData();
		
		MedicationOverViewVo voOverView = form.getLocalContext().getCurrentOverView();
		if (voOverView == null)
			voOverView = new MedicationOverViewVo();
		
		if (currentInstance.getID_PatientMedication() == null)
		{
			if (voOverView.getMedication() == null)
				voOverView.setMedication(new PatientMedicationVoCollection());
			
			voOverView.getMedication().add(currentInstance);
		}
		else
		{
			for (int i = 0 ; i < voOverView.getMedication().size() ; i++)
			{
				if (currentInstance.getID_PatientMedication().equals(voOverView.getMedication().get(i).getID_PatientMedication()))
					voOverView.getMedication().set(i, currentInstance);
			}
		}
		
		voOverView.setType(form.getLocalContext().getScreenType());
		
		if (!voOverView.getCareContextIsNotNull())
			voOverView.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		voOverView.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		
		String[] errors = voOverView.validate(getUIValidationErrors(currentInstance));
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			PatientRefVo voPat = new PatientRefVo();
			voPat.setID_Patient(form.getGlobalContext().Core.getPatientShort().getID_Patient());
			form.getLocalContext().setCurrentOverView(domain.saveMedicationOverviewVo(voOverView, voPat));
			form.getLocalContext().setSelectedInstance(currentInstance);
			if (isDialog())
			{
				form.getGlobalContext().Clinical.setDialogFormName(engine.getFormName());
			}
		} 
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()); //WDEV-17974
			open();
			form.dyngrdMedication().setValue(currentInstance);
			DynamicGridRow selectedRow = form.dyngrdMedication().getSelectedRow();
			if(selectedRow != null)
				onDyngrdMedicationRowSelectionChanged(selectedRow);
							
			return false;
		}		
		
		setReturnToFormDescription(currentInstance);
		return true;
	}

	private String[] getUIValidationErrors(PatientMedicationVo voPatientMedication)
	{
		if (voPatientMedication != null && voPatientMedication.getID_PatientMedication() == null && voPatientMedication.getPrescribedDoses().size() == 0)
		{
			return new String[]{"You must save at least one Dose with a new medication record"};
			
		}
		
		return null;
	}

	protected void onLnkReturnClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getGlobalContext().Clinical.getReturnToFormName());
	}
	
	private void formatMedicationAndDosesGrids() 
	{
		form.ctnDetails().dyngrdDoses().clear();
		
		form.ctnDetails().dyngrdDoses().setSelectable(true);
		
		DynamicGridColumn column = form.ctnDetails().dyngrdDoses().getColumns().newColumn("Dose");
		column.setIdentifier(COL_DOSE_DOSE);
		column.setWidth(120);
		column.setDynamicWidthSupported(true);
	
		column = form.ctnDetails().dyngrdDoses().getColumns().newColumn("Route");
		column.setIdentifier(COL_DOSE_ROUTE);
		column.setWidth(120);
		column.setDynamicWidthSupported(true);

		column = form.ctnDetails().dyngrdDoses().getColumns().newColumn("Times");
		column.setIdentifier(COL_DOSE_TIMES);
		column.setWidth(140);
		column.setDynamicWidthSupported(true);

		column = form.ctnDetails().dyngrdDoses().getColumns().newColumn("Commenced By Type");
		column.setIdentifier(COL_DOSE_COMMENCED_BY_TYPE);
		column.setWidth(140);

		column = form.ctnDetails().dyngrdDoses().getColumns().newColumn("Commenced By (HCP)");
		column.setIdentifier(COL_DOSE_COMMENCED_BY);
		column.setWidth(160);
		column.setDynamicWidthSupported(true);

		column = form.ctnDetails().dyngrdDoses().getColumns().newColumn("Date");
		column.setIdentifier(COL_DOSE_COMMENCED_DATE);
		column.setWidth(-1);
		column.setDynamicWidthSupported(true);
		
	}

	private void bindCellToLookup(DynamicGridCell cell, Class class1)
	{
		if(cell == null || class1 == null)
			throw new CodingRuntimeException("Coding Error - cell or class1 is null (bindCellTooLookup)");
		
		if(class1.equals(MedicationRoute.class))
		{
			MedicationRouteCollection coll = LookupHelper.getMedicationRoute(domain.getLookupService());
			for(int i = 0 ; i < coll.size() ; i++) 
				cell.getItems().newItem(coll.get(i));

			cell.setIdentifier(MedicationRoute.class);
		}
		if(class1.equals(MedicationTimesOfAdministration.class))
		{
			MedicationTimesOfAdministrationCollection coll = LookupHelper.getMedicationTimesOfAdministration(domain.getLookupService());
			for(int i = 0 ; i < coll.size() ; i++) 
				cell.getItems().newItem(coll.get(i));

			cell.setIdentifier(MedicationTimesOfAdministration.class);
		}
		
		if(class1.equals(MedciationCommencedDiscontinuedType.class))
		{
			MedciationCommencedDiscontinuedTypeCollection coll = LookupHelper.getMedciationCommencedDiscontinuedType(domain.getLookupService());
			for(int i = 0 ; i < coll.size() ; i++) 
				cell.getItems().newItem(coll.get(i));

			cell.setIdentifier(MedciationCommencedDiscontinuedType.class);
		}
		
		
		
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		if(sender.equals(form.dyngrdMedication()))
		{
			switch(menuItemID)
			{
				case GenForm.ContextMenus.MedicationMultiple.NEW_MEDICATION:
					newMedicationInstance();
				break;
				
				case GenForm.ContextMenus.MedicationMultiple.UPDATE_MEDICATION:
					updateMedicationInstance();
				break;
				
				case GenForm.ContextMenus.MedicationMultiple.DISCONTINUE_MEDICATION:
					discontinueMedicationInstance();
				break;
				
				default:
			}
		}
		else if(sender.equals(form.ctnDetails().dyngrdDoses()))
		{
			switch(menuItemID)
			{
				case GenForm.ContextMenus.MedicationMultipleDoses.NEW_DOSE:
					newMedicationDoseInstance();
				break;

				case GenForm.ContextMenus.MedicationMultipleDoses.DISCONTINUE_DOSE:
					discontinueMedicationDoseInstance();
				break;
				
				default:
			}
			//added for WDEV-7307
			updateDiscontinueDoseMenu();
		}

	}

	private void discontinueMedicationDoseInstance() 
	{
		DiscontinueMedicationReasonValuesVo voReason = new DiscontinueMedicationReasonValuesVo();
		
		if (form.ctnDetails().dyngrdDoses().getSelectedRow().getValue() instanceof MedicationDose) 
		{
			MedicationDose voDose = (MedicationDose)form.ctnDetails().dyngrdDoses().getSelectedRow().getValue();
			
			voReason.setStoppedDate(voDose.getIsStoppedDate());
			voReason.setStoppedHCP(voDose.getIsStoppedHcp());
			voReason.setStoppedReason(voDose.getIsStoppedReason());
			voReason.setStoppedReasonDesc(voDose.getIsStoppedReasonText());

			if ((voDose.getIsStoppedIsNotNull()) && (voDose.getIsStopped().booleanValue()) )
				form.getGlobalContext().Clinical.setDiscontinueMedicationReasonValues(voReason);
			else
				form.getGlobalContext().Clinical.setDiscontinueMedicationReasonValues(null);
		}

		form.getLocalContext().setbDiscontinueDose(Boolean.TRUE);
		form.getLocalContext().setbDiscontinueMed(Boolean.FALSE);

		engine.open(form.getForms().Clinical.MedicationDiscontinue, "Discontinue Dose");
	}


	private void newMedicationDoseInstance() 
	{
		DynamicGridRow doseRow = form.ctnDetails().dyngrdDoses().getRows().newRow();
		
		
		DynamicGridCell cell1 = doseRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_DOSE), DynamicCellType.STRING);
		
		cell1.setStringMaxLength(255);
		cell1.setValidationMessage("This text is restricted to 255 characters");
		cell1.setReadOnly(false);
		cell1.setTooltip("Please select a Dose");
		cell1.setWidth(120);

		DynamicGridCell cell2= doseRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_ROUTE), DynamicCellType.ENUMERATION);
		cell2.setReadOnly(false);
		bindCellToLookup(cell2, MedicationRoute.class);
		cell2.setTooltip("Please select a Route");
		cell2.setWidth(120);

		DynamicGridCell cell3 = doseRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_TIMES), DynamicCellType.MULTISELECT);
		cell3.setReadOnly(false);
		bindCellToLookup(cell3, MedicationTimesOfAdministration.class);
		cell3.setTooltip("Please select Times");
		cell3.setWidth(140);

		DynamicGridCell cell6= doseRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_BY_TYPE), DynamicCellType.ENUMERATION);
		cell6.setReadOnly(false);
		bindCellToLookup(cell6, MedciationCommencedDiscontinuedType.class);
		cell6.setValue(MedciationCommencedDiscontinuedType.MOS);
		cell6.setTooltip("Please select a Commenced by Type");
		cell6.setAutoPostBack(true);
		cell6.setWidth(140);

		
		DynamicGridCell cell4 = doseRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_BY), DynamicCellType.QUERYCOMBOBOX);
		Hcp hcp = (Hcp) domain.getHcpUser();
		if(hcp != null)
		{
			cell4.getItems().newItem(hcp);
			cell4.setValue(hcp);
		}
		cell4.setReadOnly(false);
		cell4.setAutoPostBack(true);
		cell4.setTooltip("Please select a HCP");
		cell4.setWidth(160);

		
		DynamicGridCell cell5 = doseRow.getCells().newCell(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_DATE), DynamicCellType.DATE);
		cell5.setValue(new Date());
		cell5.setReadOnly(false);
		cell5.setTooltip("Please select a Date");
		cell5.setWidth(-1);

		doseRow.setExpanded(true);
		
		MedicationDose voNewDose = new MedicationDose();
		voNewDose.setIsCopied(new Boolean(false));
		doseRow.setValue(voNewDose);
		
		//wdev-1873 form.ctnDetails().dyngrdDoses().setSelectedRow(doseRow);
		//added for WDEV-7307
		if  (!engine.isDialog()){
			form.ctnDetails().dyngrdDoses().resetScrollPosition();
			form.ctnDetails().dyngrdDoses().setSelectedRow(doseRow);
		}
		updateControlsState();
	}

	private void discontinueMedicationInstance() 
	{
		DiscontinueMedicationReasonValuesVo voReason = new DiscontinueMedicationReasonValuesVo();
		
		voReason.setStoppedDate(form.getLocalContext().getSelectedInstance().getIsDiscontinuedDate());
		voReason.setStoppedHCP(form.getLocalContext().getSelectedInstance().getIsDiscontinuedHcp());
		voReason.setStoppedReason(form.getLocalContext().getSelectedInstance().getIsDiscontinuedReason());
		voReason.setStoppedReasonDesc(form.getLocalContext().getSelectedInstance().getIsDiscontinuedReasonText());

		if ( (form.getLocalContext().getSelectedInstance().getIsDiscontinuedIsNotNull()) && (form.getLocalContext().getSelectedInstance().getIsDiscontinued().booleanValue()) )
			form.getGlobalContext().Clinical.setDiscontinueMedicationReasonValues(voReason);
		else
			form.getGlobalContext().Clinical.setDiscontinueMedicationReasonValues(null);

		form.getLocalContext().setbDiscontinueDose(Boolean.FALSE);
		form.getLocalContext().setbDiscontinueMed(Boolean.TRUE);
		
		engine.open(form.getForms().Clinical.MedicationDiscontinue);
	}

	private void updateMedicationInstance() 
	{
		form.setMode(FormMode.EDIT);
//		form.ctnDetails().txtOther().setEnabled(true);
		
		allowEditingInstanceControls(!(form.getLocalContext().getSelectedInstance().getIsDiscontinuedIsNotNull() ? form.getLocalContext().getSelectedInstance().getIsDiscontinued().booleanValue() : false));
			
		if (form.getLocalContext().getSelectedInstance().getPrescribedDosesIsNotNull())
			//fillDosesGridWritable(form.getLocalContext().getSelectedInstance().getPrescribedDoses());
			fillDosesGridReadOnly(form.getLocalContext().getSelectedInstance().getPrescribedDoses());
		
		displayOrHideEnableDisableScreenSpecificControls();	
		
		updateControlsState();
	}



	private String createTimesString(MedicationTimesOfAdministrationCollection voTimesColl) 
	{
		StringBuffer sb = new StringBuffer();
		for(int i = 0 ; i < voTimesColl.size() ; i++)
		{
			MedicationTimesOfAdministration lkpTime = voTimesColl.get(i);
			sb.append(lkpTime.toString());
			if (i < voTimesColl.size() - 1)
				sb.append(", ");
		}
		return sb.toString();
	}

	protected void onDyngrdDosesCellValueChanged(DynamicGridCell cell) 
	{
		if ( (cell != null)
				&& (cell.getType().getID() == DynamicCellType.ENUMERATION.getID())
				&& (cell.getIdentifier().equals(MedciationCommencedDiscontinuedType.class) ) )
		{
			if (cell.getValue() != null)
			{
				if (cell.getValue().equals(MedciationCommencedDiscontinuedType.MOS) )
				{
					DynamicGridRow pRow  = cell.getRow();
					DynamicGridCell cellQmbBy = pRow.getCells().get(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_BY));
					Hcp hcp = (Hcp) domain.getHcpUser();
					if(hcp != null)
					{
						cellQmbBy.getItems().newItem(hcp);
						cellQmbBy.setValue(hcp);
					}
					cellQmbBy.setReadOnly(false);
					cellQmbBy.setAutoPostBack(true);
					cellQmbBy.setTooltip("Please select a HCP");
					cellQmbBy.setWidth(160);
				}
				else
				{
					DynamicGridRow pRow  = cell.getRow();
					DynamicGridCell cellQmbBy = pRow.getCells().get(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_BY));
					cellQmbBy.setValue(null);
					cellQmbBy.setTypedText("");
				}
			}
			else
			{
				DynamicGridRow pRow  = cell.getRow();
				DynamicGridCell cellQmbBy = pRow.getCells().get(form.ctnDetails().dyngrdDoses().getColumns().getByIdentifier(COL_DOSE_COMMENCED_BY));
				cellQmbBy.setValue(null);
				cellQmbBy.setTypedText("");
			}
		}
	}

	protected void onDyngrdDosesCellTextSubmited(DynamicGridCell cell) 
	{
		if(cell.getType().getID() == DynamicCellType.QUERYCOMBOBOX.getID())
		{
			cell.getItems().clear();
			
			HcpFilter filter = new HcpFilter();
			PersonName name = new PersonName();
			name.setSurname(cell.getTypedText());
			filter.setQueryName(name);
			filter.setHcpType(HcpDisType.MEDICAL);
			
			HcpCollection voHCPColl = domain.listHcps(filter);
			
			if(voHCPColl != null)
			{
				for (int i = 0; i < voHCPColl.size(); i++)
				{
					cell.getItems().newItem(voHCPColl.get(i));
				}
				if (voHCPColl.size() == 1)
				{
					cell.setValue(voHCPColl.get(0));
				}
				else if (voHCPColl.size() > 1)
				{
					cell.showOpened();		
				}
				
			}
		}
	}

	protected void onChkFilterValueChanged() throws PresentationLogicException 
	{
		open();		
	}

	private MedicationDosesDynamicGridPopulation getHelper()
	{
		MedicationDosesDynamicGridPopulation gridPopulation = new MedicationDosesDynamicGridPopulation(form.dyngrdMedication(), form.getImages().Admin.Activity, form.getImages().ICP.Child, getDoImage(), form.getImages().Core.EditDisabled);
		return gridPopulation;
	}
	
	private Image getDoImage()
	{
		return isMedicationMultipleDosesOnDischarge() || isMedicationMultipleDosesOPD()?form.getImages().Core.Tick:null;
	}

	private boolean isMedicationMultipleDosesOnDischarge()
	{
		return engine.getFormName().equals(form.getForms().Clinical.MedicationMultipleDosesOnDischarge);
	}

	private boolean isMedicationMultipleDosesOPD()
	{
		return engine.getFormName().equals(form.getForms().Clinical.MedicationMultipleDosesOPD);
	}
	
	private boolean isMedicationMultipleDosesOnAdmission()
	{
		return engine.getFormName().equals(form.getForms().Clinical.MedicationMultipleDosesOnAdmission);
	}

	private boolean isMedicationMultipleDosesPatientLevel()
	{
		return engine.getFormName().equals(form.getForms().Clinical.MedicationMultipleDosesPatientDetails);
	}

	protected void onRecbrOverviewsValueChanged() throws PresentationLogicException 
	{
		MedicationOverViewVo voOverView = new MedicationOverViewVo();
		voOverView = domain.getMedicationOverView(form.recbrOverviews().getValue());
		
		if (voOverView != null)
			openOverview(voOverView);
		
		form.setMode(FormMode.VIEW);
		displayOrHideEnableDisableScreenSpecificControls();
	}

	protected void onCmbCommencedByValueChanged() throws PresentationLogicException 
	{
		if ( (form.ctnDetails().cmbCommencedBy().getValue() != null)
				&& (form.ctnDetails().cmbCommencedBy().getValue().equals(MedciationCommencedDiscontinuedType.MOS)) )
		{
			form.ctnDetails().qmbCommencedBy().setEnabled(true);
			defaultHCP();
		}
		else
		{
			form.ctnDetails().qmbCommencedBy().setEnabled(false);
			form.ctnDetails().qmbCommencedBy().setValue(null);
		}
		
	}
	private void defaultHCP() 
	{
		Hcp hcp = (Hcp) domain.getHcpUser();
		if(hcp != null)
		{
			form.ctnDetails().qmbCommencedBy().newRow(hcp, hcp.toString());
			form.ctnDetails().qmbCommencedBy().setValue(hcp);
		}
	}

	private boolean isDialog()
	{
		return engine.getFormName().equals(form.getForms().Clinical.MedicationMultipleDoses_Dialog);
	}

	private void isBtnCloseVisible(boolean value)
	{
		form.btnClose().setEnabled(value);
		form.btnClose().setVisible(value);
	}
	
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		//engine.open(form.getGlobalContext().Clinical.getReturnToFormName());
		engine.close(DialogResult.OK);
	}
	
	/*private void setReturnToFormDescription(PatientDiagnosisVo voPatientDiagnosis) 
	{
		if ( (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
				&& (form.getGlobalContext().Clinical.getReturnToFormName().equals(engine.getPreviousNonDialogFormName())) )
		{
			//Set the CDI Description for the return to form link
			String str = form.getGlobalContext().Clinical.getReturnToFormCDIDescriptionIsNotNull() ? form.getGlobalContext().Clinical.getReturnToFormCDIDescription() : "";
			StringBuffer sb = new StringBuffer();
			sb.append(str);
			if  (sb.length() > 0)
				sb.append(", ");
			
			sb.append(voPatientDiagnosis.getDiagnosisDescription());
			
			form.getGlobalContext().Clinical.setReturnToFormCDIDescription(sb.toString());
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		}
	}*/
	
}
