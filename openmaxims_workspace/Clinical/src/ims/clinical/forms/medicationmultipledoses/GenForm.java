//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.medicationmultipledoses;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbCommencedByComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.MedciationCommencedDiscontinuedType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.MedciationCommencedDiscontinuedType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.MedciationCommencedDiscontinuedType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.MedciationCommencedDiscontinuedType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.MedciationCommencedDiscontinuedType value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.MedciationCommencedDiscontinuedType getValue()
			{
				return (ims.core.vo.lookups.MedciationCommencedDiscontinuedType)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.MedciationCommencedDiscontinuedType value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbFrequencyComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.MedicationFrequency value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.MedicationFrequency getValue()
			{
				return (ims.core.vo.lookups.MedicationFrequency)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.MedicationFrequency value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSourceComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.SourceofInformation value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.SourceofInformation value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.SourceofInformation getValue()
			{
				return (ims.core.vo.lookups.SourceofInformation)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.SourceofInformation value)
			{
				super.control.setValue(value);
			}
		}
		public static class qmbCommencedByComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.Hcp value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.Hcp value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.Hcp getValue()
			{
				return (ims.core.vo.Hcp)super.control.getValue();
			}
			public void setValue(ims.core.vo.Hcp value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 816, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_customControlCodingItemForm = loader.loadComponent(123133, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1006, skipContextValidation);
			//ims.framework.Control m_customControlCodingItemControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(16), new Integer(816), new Integer(64), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1006), m_customControlCodingItemForm, instance1 } );
			ims.framework.Control m_customControlCodingItemControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1006), m_customControlCodingItemForm, instance1, Boolean.FALSE } );
			super.addControl(m_customControlCodingItemControl);
			Menu[] menus1 = m_customControlCodingItemForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 408, 80, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 82, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Commenced By:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 584, 82, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date Commenced:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 280, 82, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Commenced By (HCP):", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 192, 264, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No. of days to Supply:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 264, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Include in Drug Order:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 111, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Frequency:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 280, 111, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source:", new Integer(1), null, new Integer(0)}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 696, 80, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 2014), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 120, 80, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbCommencedByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 2007), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbCommencedByTemp);
			cmbCommencedByComboBox cmbCommencedBy = (cmbCommencedByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCommencedByComboBox.class, m_cmbCommencedByTemp);
			super.addComboBox(cmbCommencedBy);
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 120, 109, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbFrequencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 2009), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbFrequencyTemp);
			cmbFrequencyComboBox cmbFrequency = (cmbFrequencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFrequencyComboBox.class, m_cmbFrequencyTemp);
			super.addComboBox(cmbFrequency);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 408, 109, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ComboBox m_cmbSourceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2013), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSourceTemp);
			cmbSourceComboBox cmbSource = (cmbSourceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceComboBox.class, m_cmbSourceTemp);
			super.addComboBox(cmbSource);
	
			// Query ComboBox Controls
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 408, 80, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ComboBox m_qmbCommencedByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2011), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbCommencedByTemp);
			qmbCommencedByComboBox qmbCommencedBy = (qmbCommencedByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbCommencedByComboBox.class, m_qmbCommencedByTemp);
			super.addComboBox(qmbCommencedBy);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 152, 264, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 2017), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"", Boolean.FALSE, null}));
	
			// Dynamic Grid Controls
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 142, 792, 114, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2016), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, contextMenus.contextMenuMedicationMultipleDoses, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
	
			// IntBox Controls
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 320, 264, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2018), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public ims.clinical.forms.clinicalcoding.IComponent customControlCodingItem()
		{
			return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setcustomControlCodingItemValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setcustomControlCodingItemVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean iscustomControlCodingItemVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setcustomControlCodingItemEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean iscustomControlCodingItemEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
		public Label lblNumDays()
		{
			return (Label)super.getControl(5);
		}
		public Label lblIncludeinTTO()
		{
			return (Label)super.getControl(6);
		}
		public DateControl dteCommenced()
		{
			return (DateControl)super.getControl(9);
		}
		public cmbCommencedByComboBox cmbCommencedBy()
		{
			return (cmbCommencedByComboBox)super.getComboBox(0);
		}
		public cmbFrequencyComboBox cmbFrequency()
		{
			return (cmbFrequencyComboBox)super.getComboBox(1);
		}
		public cmbSourceComboBox cmbSource()
		{
			return (cmbSourceComboBox)super.getComboBox(2);
		}
		public qmbCommencedByComboBox qmbCommencedBy()
		{
			return (qmbCommencedByComboBox)super.getComboBox(3);
		}
		public CheckBox chkTTO()
		{
			return (CheckBox)super.getControl(14);
		}
		public DynamicGrid dyngrdDoses()
		{
			return (DynamicGrid)super.getControl(15);
		}
		public IntBox intNumDays()
		{
			return (IntBox)super.getControl(16);
		}
	}
	public static class recbrOverviewsRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.MedicationOverViewLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.MedicationOverViewLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.MedicationOverViewLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.MedicationOverViewLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.clinical.vo.MedicationOverViewLiteVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.clinical.vo.MedicationOverViewLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.clinical.vo.MedicationOverViewLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.clinical.vo.MedicationOverViewLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.clinical.vo.MedicationOverViewLiteVo getValue()
		{
			return (ims.clinical.vo.MedicationOverViewLiteVo)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.MedicationOverViewLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedInstance();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuMedicationMultiple = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuMedicationMultipleNEW_MEDICATIONItem = factory.createMenuItem(startControlID.intValue() + 1, "New Medication", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMedicationMultiple.add(contextMenus.contextMenuMedicationMultipleNEW_MEDICATIONItem);
		contextMenus.contextMenuMedicationMultipleUPDATE_MEDICATIONItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Medication", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuMedicationMultiple.add(contextMenus.contextMenuMedicationMultipleUPDATE_MEDICATIONItem);
		contextMenus.contextMenuMedicationMultipleDISCONTINUE_MEDICATIONItem = factory.createMenuItem(startControlID.intValue() + 3, "Discontinue Medication", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMedicationMultiple.add(contextMenus.contextMenuMedicationMultipleDISCONTINUE_MEDICATIONItem);
		form.registerMenu(contextMenus.contextMenuMedicationMultiple);
		contextMenus.contextMenuMedicationMultipleDoses = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuMedicationMultipleDosesNEW_DOSEItem = factory.createMenuItem(startControlID.intValue() + 4, "New Dose", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMedicationMultipleDoses.add(contextMenus.contextMenuMedicationMultipleDosesNEW_DOSEItem);
		contextMenus.contextMenuMedicationMultipleDosesUPDATE_DOSEItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit Dose", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuMedicationMultipleDoses.add(contextMenus.contextMenuMedicationMultipleDosesUPDATE_DOSEItem);
		contextMenus.contextMenuMedicationMultipleDosesDISCONTINUE_DOSEItem = factory.createMenuItem(startControlID.intValue() + 6, "Discontinue Dose", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMedicationMultipleDoses.add(contextMenus.contextMenuMedicationMultipleDosesDISCONTINUE_DOSEItem);
		form.registerMenu(contextMenus.contextMenuMedicationMultipleDoses);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 0, 48, 392, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper18.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(0), new Integer(48), new Integer(392), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3), m_customControlAuthoringInfoForm, instance1 } );
		ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019),  new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringInfoControl);
		Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Container Clasess
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 280, 832, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 312);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 2019), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 768, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 2024), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 2022), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrOverviewsTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrOverviewsTemp);
		recbrOverviewsRecordBrowser recbrOverviews = (recbrOverviewsRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrOverviewsRecordBrowser.class, m_recbrOverviewsTemp);
		super.addRecordBrowser(recbrOverviews);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 606, 88, 200, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.UNKNOWN, ControlState.HIDDEN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Hide Discontinued Medications/Doses", Boolean.TRUE, null}));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 112, 832, 160, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuMedicationMultiple, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE}));

		// Link Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 776, 0, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(2);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(3);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(4);
	}
	public recbrOverviewsRecordBrowser recbrOverviews()
	{
		return (recbrOverviewsRecordBrowser)super.getRecordBrowser(0);
	}
	public CheckBox chkFilter()
	{
		return (CheckBox)super.getControl(6);
	}
	public DynamicGrid dyngrdMedication()
	{
		return (DynamicGrid)super.getControl(7);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(8);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Clinical = new ClinicalForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				YesNoDialog = new LocalFormName(102107);
				TaxonomySearch = new LocalFormName(104102);
			}
			public final FormName YesNoDialog;
			public final FormName TaxonomySearch;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				CopyMedication = new LocalFormName(122127);
				MedicationDiscontinue = new LocalFormName(122157);
				MedicationMultipleDosesOnDischarge = new LocalFormName(122162);
				MedicationMultipleDosesOnAdmission = new LocalFormName(122161);
				MedicationMultipleDosesOPD = new LocalFormName(122163);
				MedicationMultipleDosesPatientDetails = new LocalFormName(122173);
				MedicationMultipleDoses_Dialog = new LocalFormName(122179);
			}
			public final FormName CopyMedication;
			public final FormName MedicationDiscontinue;
			public final FormName MedicationMultipleDosesOnDischarge;
			public final FormName MedicationMultipleDosesOnAdmission;
			public final FormName MedicationMultipleDosesOPD;
			public final FormName MedicationMultipleDosesPatientDetails;
			public final FormName MedicationMultipleDoses_Dialog;
		}

		public CoreForms Core;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
			ICP = new ICPImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Search = new ImageHelper(102120, "Images/Core/bin.gif", new Integer(15), new Integer(15));
				Pin = new ImageHelper(102212, "Images/Core/Push Pin.gif", new Integer(16), new Integer(16));
				Search_disabled = new ImageHelper(102263, "Images/Core/bin_dis.gif", new Integer(15), new Integer(15));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Search;
			public final ims.framework.utils.Image Pin;
			public final ims.framework.utils.Image Search_disabled;
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image EditDisabled;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Activity = new ImageHelper(103111, "Images/Admin/VSObject_Structure.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Activity;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				Child = new ImageHelper(118100, "Images/ICP/property.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Child;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
		public final ICPImages ICP;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CodingItemTextSubmitted = new ims.framework.ContextVariable("CodingItemTextSubmitted", prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__CodingItemTextSubmitted_" + componentIdentifier + "");
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
			cxl_CurrentOverView = new ims.framework.ContextVariable("CurrentOverView", prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__CurrentOverView_" + componentIdentifier + "");
			cxl_ScreenType = new ims.framework.ContextVariable("ScreenType", prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__ScreenType_" + componentIdentifier + "");
			cxl_bDiscontinueDose = new ims.framework.ContextVariable("bDiscontinueDose", prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__bDiscontinueDose_" + componentIdentifier + "");
			cxl_bDiscontinueMed = new ims.framework.ContextVariable("bDiscontinueMed", prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__bDiscontinueMed_" + componentIdentifier + "");
		}
		
		public boolean getCodingItemTextSubmittedIsNotNull()
		{
			return !cxl_CodingItemTextSubmitted.getValueIsNull(context);
		}
		public String getCodingItemTextSubmitted()
		{
			return (String)cxl_CodingItemTextSubmitted.getValue(context);
		}
		public void setCodingItemTextSubmitted(String value)
		{
			cxl_CodingItemTextSubmitted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CodingItemTextSubmitted = null;
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.core.vo.PatientMedicationVo getSelectedInstance()
		{
			return (ims.core.vo.PatientMedicationVo)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.core.vo.PatientMedicationVo value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
		public boolean getCurrentOverViewIsNotNull()
		{
			return !cxl_CurrentOverView.getValueIsNull(context);
		}
		public ims.clinical.vo.MedicationOverViewVo getCurrentOverView()
		{
			return (ims.clinical.vo.MedicationOverViewVo)cxl_CurrentOverView.getValue(context);
		}
		public void setCurrentOverView(ims.clinical.vo.MedicationOverViewVo value)
		{
			cxl_CurrentOverView.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentOverView = null;
		public boolean getScreenTypeIsNotNull()
		{
			return !cxl_ScreenType.getValueIsNull(context);
		}
		public ims.clinical.vo.lookups.MedicationSnapShot getScreenType()
		{
			return (ims.clinical.vo.lookups.MedicationSnapShot)cxl_ScreenType.getValue(context);
		}
		public void setScreenType(ims.clinical.vo.lookups.MedicationSnapShot value)
		{
			cxl_ScreenType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ScreenType = null;
		public boolean getbDiscontinueDoseIsNotNull()
		{
			return !cxl_bDiscontinueDose.getValueIsNull(context);
		}
		public Boolean getbDiscontinueDose()
		{
			return (Boolean)cxl_bDiscontinueDose.getValue(context);
		}
		public void setbDiscontinueDose(Boolean value)
		{
			cxl_bDiscontinueDose.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bDiscontinueDose = null;
		public boolean getbDiscontinueMedIsNotNull()
		{
			return !cxl_bDiscontinueMed.getValueIsNull(context);
		}
		public Boolean getbDiscontinueMed()
		{
			return (Boolean)cxl_bDiscontinueMed.getValue(context);
		}
		public void setbDiscontinueMed(Boolean value)
		{
			cxl_bDiscontinueMed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bDiscontinueMed = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class MedicationMultiple implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NEW_MEDICATION = 1;
			public static final int UPDATE_MEDICATION = 2;
			public static final int DISCONTINUE_MEDICATION = 3;
		}
		public void disableAllMedicationMultipleMenuItems()
		{
			this.contextMenuMedicationMultipleNEW_MEDICATIONItem.setEnabled(false);
			this.contextMenuMedicationMultipleUPDATE_MEDICATIONItem.setEnabled(false);
			this.contextMenuMedicationMultipleDISCONTINUE_MEDICATIONItem.setEnabled(false);
		}
		public void hideAllMedicationMultipleMenuItems()
		{
			this.contextMenuMedicationMultipleNEW_MEDICATIONItem.setVisible(false);
			this.contextMenuMedicationMultipleUPDATE_MEDICATIONItem.setVisible(false);
			this.contextMenuMedicationMultipleDISCONTINUE_MEDICATIONItem.setVisible(false);
		}
		private Menu contextMenuMedicationMultiple;
		public MenuItem getMedicationMultipleNEW_MEDICATIONItem()
		{
			return this.contextMenuMedicationMultipleNEW_MEDICATIONItem;
		}
		private MenuItem contextMenuMedicationMultipleNEW_MEDICATIONItem;
		public MenuItem getMedicationMultipleUPDATE_MEDICATIONItem()
		{
			return this.contextMenuMedicationMultipleUPDATE_MEDICATIONItem;
		}
		private MenuItem contextMenuMedicationMultipleUPDATE_MEDICATIONItem;
		public MenuItem getMedicationMultipleDISCONTINUE_MEDICATIONItem()
		{
			return this.contextMenuMedicationMultipleDISCONTINUE_MEDICATIONItem;
		}
		private MenuItem contextMenuMedicationMultipleDISCONTINUE_MEDICATIONItem;
		public final class MedicationMultipleDoses implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NEW_DOSE = 4;
			public static final int UPDATE_DOSE = 5;
			public static final int DISCONTINUE_DOSE = 6;
		}
		public void disableAllMedicationMultipleDosesMenuItems()
		{
			this.contextMenuMedicationMultipleDosesNEW_DOSEItem.setEnabled(false);
			this.contextMenuMedicationMultipleDosesUPDATE_DOSEItem.setEnabled(false);
			this.contextMenuMedicationMultipleDosesDISCONTINUE_DOSEItem.setEnabled(false);
		}
		public void hideAllMedicationMultipleDosesMenuItems()
		{
			this.contextMenuMedicationMultipleDosesNEW_DOSEItem.setVisible(false);
			this.contextMenuMedicationMultipleDosesUPDATE_DOSEItem.setVisible(false);
			this.contextMenuMedicationMultipleDosesDISCONTINUE_DOSEItem.setVisible(false);
		}
		private Menu contextMenuMedicationMultipleDoses;
		public MenuItem getMedicationMultipleDosesNEW_DOSEItem()
		{
			return this.contextMenuMedicationMultipleDosesNEW_DOSEItem;
		}
		private MenuItem contextMenuMedicationMultipleDosesNEW_DOSEItem;
		public MenuItem getMedicationMultipleDosesUPDATE_DOSEItem()
		{
			return this.contextMenuMedicationMultipleDosesUPDATE_DOSEItem;
		}
		private MenuItem contextMenuMedicationMultipleDosesUPDATE_DOSEItem;
		public MenuItem getMedicationMultipleDosesDISCONTINUE_DOSEItem()
		{
			return this.contextMenuMedicationMultipleDosesDISCONTINUE_DOSEItem;
		}
		private MenuItem contextMenuMedicationMultipleDosesDISCONTINUE_DOSEItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[114];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-SEENBY", "SeenBy");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentMedicationOverView", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentMedicationOverView", "BO-1072100034-TYPE", "Type");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentMedicationOverView", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentMedicationOverView", "BO-1072100034-CORRECTNESS", "Correctness");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-ID", "ID_PatientMedication");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-OTHERMEDICATIONTEXT", "OtherMedicationText");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-PATIENT", "Patient");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-FREQUENCY", "Frequency");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-SOURCEOFINFORMATION", "SourceofInformation");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-COMMENCEDDATE", "CommencedDate");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-NODAYSSUPPLY", "NoDaysSupply");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-BATCHNO", "BatchNo");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-EXPIRYDATE", "ExpiryDate");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-ISDISCONTINUED", "IsDiscontinued");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-DIFFICULTIESWITHMED", "DifficultiesWithMed");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-SUPPLIED", "Supplied");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-INPOSSESSION", "InPossession");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-ISMEDICATIONONADMISSION", "IsMedicationonAdmission");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-ISDISCHARGEMEDICATION", "IsDischargeMedication");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-CARECONTEXT", "CareContext");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-ISINTTO", "IsInTTO");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-ISDISCONTINUEDDATE", "IsDiscontinuedDate");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-ISDISCONTINUEDREASON", "IsDiscontinuedReason");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-ISDISCONTINUEDREASONTEXT", "IsDiscontinuedReasonText");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-ISCOPIED", "IsCopied");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-COMMENCEDBYTYPE", "CommencedByType");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-DISCONTINUEDBYTYPE", "DiscontinuedByType");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1003100014-SELFMEDICATING", "SelfMedicating");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__CurrentOverView_" + componentIdentifier, "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__CurrentOverView_" + componentIdentifier, "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__CurrentOverView_" + componentIdentifier, "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationMultipleDoses.__internal_x_context__CurrentOverView_" + componentIdentifier, "BO-1072100034-CORRECTNESS", "Correctness");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
