//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3742.24882)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.fitforsurgerycomment;

import ims.RefMan.vo.FitForSurgeryCommentVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	@Override
	public void initialize()
	{
		form.ccAuthoring().setIsRequiredPropertyToControls(true);
		form.ccAuthoring().initializeComponent();
		if (form.getGlobalContext().Clinical.getSelectedFitForSurgeryCommentIsNotNull())
		{
			form.getLocalContext().setComment((FitForSurgeryCommentVo) form.getGlobalContext().Clinical.getSelectedFitForSurgeryComment().clone());
		}
	}
	private void updateControlsState()
	{
		boolean isNewRecord = !form.getLocalContext().getCommentIsNotNull(); 
		form.ccAuthoring().setEnabledAuthoringHCP(isNewRecord);
		form.ccAuthoring().setEnabledDateTime(isNewRecord);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnSpellCheckClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.richTextComment().spellCheck();
	}
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getCommentIsNotNull())
			populateScreenFromData(form.getLocalContext().getComment());
		form.setMode(FormMode.EDIT);
	}
	private void clearScreen()
	{
		form.ccAuthoring().setValue(null);
		form.richTextComment().setValue(null);
	}
	private void populateScreenFromData(FitForSurgeryCommentVo comment)
	{
		clearScreen();
		if (comment == null)
			return;
		form.ccAuthoring().setValue(comment.getAuthoringInformation());
		form.richTextComment().setValue(comment.getComment());
	}
	private FitForSurgeryCommentVo populateDataFromScreen(FitForSurgeryCommentVo comment)
	{
		if (comment == null)
			comment = new FitForSurgeryCommentVo();
		comment.setAuthoringInformation(form.ccAuthoring().getValue());
		comment.setComment(form.richTextComment().getValue());
		return comment;
	}
	private boolean save()
	{
		FitForSurgeryCommentVo  commentVo = populateDataFromScreen(form.getLocalContext().getComment());
		String[] errors = commentVo.validate();
		if (errors != null && errors.length > 0 )
		{
			engine.showErrors(errors);
			return false;
		}
		form.getGlobalContext().Clinical.setSelectedFitForSurgeryComment(commentVo);
		return true;
	}
	
}
