//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.surgicalopnotesoperationdetailscc;

import ims.clinical.vo.SurgicalOperationDetailsVo;
import ims.clinical.vo.SurgicalOperationNotesVo;
import ims.clinicaladmin.vo.SurgicalOperationDetailsConfigVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		
		open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!form.getLocalContext().getCurrentRecordIsNotNull())
		{
			SurgicalOperationNotesVo opNotes = domain.getOperationNotes(form.getGlobalContext().Core.getCurrentCareContext());
			if (opNotes !=null && opNotes.getMainProcedureIsNotNull() )
				try
				{
					populateScreenFromData(domain.getDefaultTemplate(opNotes.getMainProcedure()));
				}
				catch (DomainInterfaceException e)
				{
					throw new PresentationLogicException(e);
				}
		}
		form.setMode(FormMode.EDIT);
	}
	
	
	private void open()
	{
		form.getLocalContext().setCurrentRecord(domain.getOperationDetails(form.getGlobalContext().Core.getCurrentCareContext()));
		
		populateDisplayFromData(form.getLocalContext().getCurrentRecord());	//wdev-13658
		form.setMode(FormMode.VIEW);
	}
	protected void updateControlState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(!(form.getLocalContext().getReadOnlyIsNotNull() && form.getLocalContext().getReadOnly()));
		}
	}
	//wdev-13658
	protected void populateDisplayFromData(ims.clinical.vo.SurgicalOperationDetailsVo value)
	{
		clearControls();
		populateScreenFromData(value);
		form.txtProsthesis().setValue(value != null ? value.getProsthesis():null);	
		form.txtDrain().setValue(value != null ? value.getDrain():null); 				
	}
	protected void populateScreenFromData(SurgicalOperationDetailsConfigVo template)
	{
		clearControls(); //wdev-13658
		
		if (template==null)
			return;
		this.form.txtClosure().setValue(template.getClosureIsNotNull() ? template.getClosure(): null);
		this.form.txtProcedure().setValue(template.getProcedureIsNotNull() ? template.getProcedure(): null);
		this.form.txtFindings().setValue(template.getFindingsIsNotNull() ? template.getFindings(): null);
		this.form.txtIncision().setValue(template.getIncisionIsNotNull() ? template.getIncision(): null);
		form.txtProsthesis().setValue(template.getProsthesis());	//wdev-13658
		form.txtDrain().setValue(template.getDrain()); 				//wdev-13658
	}
	
	@Override
	protected SurgicalOperationDetailsVo populateDataFromScreen(SurgicalOperationDetailsVo value) {
		SurgicalOperationDetailsVo result = super.populateDataFromScreen(value);
		if (!result.getAuthoringInformationIsNotNull())
		{
			result.setAuthoringInformation(new AuthoringInformationVo());
			result.getAuthoringInformation().setAuthoringDateTime(new DateTime());
			result.getAuthoringInformation().setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		}
		if (!result.getCareContextIsNotNull())
		{
			result.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		//wdev-13658
		result.setProsthesis(form.txtProsthesis().getValue());
		result.setDrain(form.txtDrain().getValue());
		
		//--------
		return result;
	}
	//wdev-13658
	private void clearControls()
	{
		clearScreen();
		form.txtProsthesis().setValue("");
		form.txtDrain().setValue("");
	}
	protected boolean save()
	{
		SurgicalOperationDetailsVo record = populateDataFromScreen(form.getLocalContext().getCurrentRecord());
		String[] errors = record.validate();
		if (errors !=null && errors.length>0 )
		{
			engine.showErrors(errors);
			return false;
		}
		try {
			domain.save(record);
		} catch (DomainInterfaceException e) {
			engine.showErrors(new String[]{e.getMessage()});
			return false;
		} catch (StaleObjectException e) {
			engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			open();
			return false;
		} catch (ForeignKeyViolationException e) {
			engine.showErrors(new String[]{"A record with the same unique key already exists"});
			return false;
		}
		return true;
	}
	@Override
	protected void onFormModeChanged() {
		updateControlState();
		form.fireCustomControlValueChanged();
		
	}
	public void setReadOnly(Boolean isRead) {
		form.getLocalContext().setReadOnly(isRead);
		updateControlState();
		
		
	}
	public void refresh() {
		open();
		
	}
}
