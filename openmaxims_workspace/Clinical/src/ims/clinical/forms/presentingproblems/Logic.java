//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2287.24499)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.presentingproblems;

import java.util.ArrayList;
import ims.clinical.configuration.vo.ClinicalProblemRefVo;
import ims.clinical.forms.presentingproblems.GenForm.grdProblemsRow;
import ims.clinical.vo.AbsentPatientPresentingProblemVo;
import ims.clinical.vo.AbsentPatientPresentingProblemVoCollection;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.clinical.vo.PatientPresentingProblemsVo;
import ims.clinical.vo.PatientPresentingProblemsVoCollection;
import ims.clinical.vo.ProblemConfigVo;
import ims.core.vo.PatientProblemVoCollection;
import ims.core.vo.PatientProblemVo;
import ims.clinical.vo.PresentAbsentHistoryProblemsVo;
import ims.clinical.vo.lookups.AbsentPresent;
import ims.core.clinical.vo.PatientProblemRefVo;
import ims.core.vo.CSPrimaryProblemVo;
import ims.core.vo.CSPrimaryProblemVoCollection;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
		if (form.getMode().equals(FormMode.VIEW))
			disableAllContextMenus();
	}

	private void disableAllContextMenus()
	{
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsUnlinkItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsUnlinkItem().setVisible(form.getMode().equals(FormMode.EDIT));
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedInstance(new PresentAbsentHistoryProblemsVo());

		form.customControlAuthoringInfo().initializeComponent();
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);

		form.setMode(FormMode.EDIT);
		listConfiguredProblems();
		populatePatientProblems(domain.listPatientProblemsByPatient(form.getGlobalContext().Core.getPatientShort()));

		form.setcustomControlAuthoringInfoEnabled(true);
	}

	private void populatePatientProblems(PatientProblemVoCollection voColl)
	{
		form.getLocalContext().setPatientProblemVoCollection(voColl);

		for (int i = 0; i < voColl.size(); i++)
		{
			populatePatientProblemControls(voColl.get(i));
		}
	}

	private void populatePatientProblemControls(PatientProblemVo voPatientProblem)
	{
		GenForm.grdProblemsRow row = findPatientProblemRow(voPatientProblem.getProblem());
		if (row != null)
		{
			row.setcolProblems(voPatientProblem.getProblem());

			if (voPatientProblem.getPrimaryForCareSpellsIsNotNull())
				row.setcolIsPrimary(isPrimaryProblem(voPatientProblem.getID_PatientProblem(), voPatientProblem.getPrimaryForCareSpells()));
			else
				row.setcolIsPrimary(false);
			row.setcolSelect(AbsentPresent.PRESENT);
			row.setcolOnset(voPatientProblem.getOnset());
			row.setcolNotes(voPatientProblem.getPatientProblem());
			row.setValue(voPatientProblem);
			
			setGridUIForPresent(row); //WDEV-6546
		}
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		addProblemsNotInstantiated();
		form.setcustomControlAuthoringInfoEnabled(false);
	}

	private void addProblemsNotInstantiated()
	{
		Specialty lkpSpecialty =  form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()?form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty():null;
		if (lkpSpecialty == null)
			lkpSpecialty = form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()?form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty():null;

		ClinicalProblemShortVoCollection voCollPresentingProblems = domain.listPresentingProblems(lkpSpecialty);

		if (voCollPresentingProblems != null)
		{
			for (int i = 0; i < voCollPresentingProblems.size(); i++)
			{
				GenForm.grdProblemsRow row = findPatientProblemRow(voCollPresentingProblems.get(i));
				if (row == null)
				{
					row = form.grdProblems().getRows().newRow();
					row.setcolProblems(voCollPresentingProblems.get(i));
					// row.setcolProblemName(voCollPresentingProblems.get(i).getPCName());
					row.setValue(voCollPresentingProblems.get(i));

					setGridUIForAbsent(row);
				}
			}
		}
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PresentingProblems.AddCCIfromTaxonomy :
				addProblemToPresProblemCheckListConfig();
			break;
			case GenForm.ContextMenus.PresentingProblems.AddCCIfromLocalSearch :
				addProblemToPresProblemProblemSearch();
			break;
			case GenForm.ContextMenus.PresentingProblems.Unlink :
				unlinkPresProblem();
				;
			break;
			default :
			break;
		}
	}

	private void unlinkPresProblem()
	{
		grdProblemsRow row = form.grdProblems().getSelectedRow();
		setGridUIForNone(row);
		row.setcolSelectReadOnly(true);
		row.setcolSelect(null);
		enableUnlinkContextMenu(false); //WDEV-6546 
	}

	private void addProblemToPresProblemProblemSearch()
	{
		form.getGlobalContext().Clinical.setSelectedProblems(null);
		form.getGlobalContext().Clinical.setPMHConfigSearchType("PR");
		engine.open(form.getForms().Core.DiagnosisProcedureProblemSearch, "Problems");
	}

	private void addProblemToPresProblemCheckListConfig()
	{
		form.getGlobalContext().Core.setTaxonomyMap(null);
		engine.open(form.getForms().Core.TaxonomySearch);
	}

	private void open() 
	{
		resetContextVariables();
		clearControls();
		populateInstanceControls(domain.getHistoryProblems(form.getGlobalContext().Core.getCurrentCareContext()));
		form.setMode(FormMode.VIEW);
	}

	private void resetContextVariables()
	{
		form.getLocalContext().setSelectedInstance(null);
	}

	private void populateInstanceControls(PresentAbsentHistoryProblemsVo voHistoryProblems)
	{
		if (voHistoryProblems == null)
			return;

		form.getLocalContext().setSelectedInstance(voHistoryProblems);
		if (voHistoryProblems.getAuthoringInformationIsNotNull())
		{
			form.customControlAuthoringInfo().setValue(voHistoryProblems.getAuthoringInformation());
		}
		if (voHistoryProblems.getPresentProblems() != null)

			populatePresentPatientProblemsControls(voHistoryProblems.getPresentProblems());

		if (voHistoryProblems.getAbsentProblems() != null)
			populateAbsentPatientProblemsControls(voHistoryProblems.getAbsentProblems());

		form.txtHistory().setValue(voHistoryProblems.getHistoryPresentingProblem());
	}

	private void populatePresentPatientProblemsControls(PatientPresentingProblemsVoCollection voCollPresentProblems)
	{
		for (int i = 0; i < voCollPresentProblems.size(); i++)
			populatePresentPatientProblemControls(voCollPresentProblems.get(i));
	}

	private void populatePresentPatientProblemControls(PatientPresentingProblemsVo voPatientPresentingProblems)
	{
		GenForm.grdProblemsRow row = form.grdProblems().getRows().newRow();

		row.setcolProblems(voPatientPresentingProblems.getProblem());
		if (voPatientPresentingProblems.getPrimaryForCareSpellsIsNotNull())
			row.setcolIsPrimary(isPrimaryProblem(voPatientPresentingProblems.getID_PatientProblem(), voPatientPresentingProblems.getPrimaryForCareSpells()));
		else
			row.setcolIsPrimary(false);
		row.setcolSelect(AbsentPresent.PRESENT);
		row.setcolOnset(voPatientPresentingProblems.getOnset());
		row.setcolNotes(voPatientPresentingProblems.getProblemNote());// .getPatientProblem());
		row.setValue(voPatientPresentingProblems);
	}

	private boolean isPrimaryProblem(Integer idProblem, CSPrimaryProblemVoCollection collCSPrimaryProblem)
	{
		for (int i = 0; i < collCSPrimaryProblem.size(); i++)
		{
			CSPrimaryProblemVo voCsPrimaryProblem = collCSPrimaryProblem.get(i);
			boolean isActive = voCsPrimaryProblem.getIsActiveIsNotNull() && voCsPrimaryProblem.getIsActive().booleanValue();
			boolean sameProblem = voCsPrimaryProblem.getPatientProblemIsNotNull() && voCsPrimaryProblem.getPatientProblem().getID_PatientProblem().equals(idProblem);
			boolean sameCareContext = voCsPrimaryProblem.getCareContextIsNotNull() && voCsPrimaryProblem.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());
			if (isActive && sameProblem && sameCareContext)
				return true;
		}

		return false;
	}

	private grdProblemsRow findPatientProblemRow(ClinicalProblemRefVo voRefProblem)
	{
		GenForm.grdProblemsRow row = null;
		for (int i = 0; i < form.grdProblems().getRows().size(); i++)
		{
			if (form.grdProblems().getRows().get(i).getcolProblems() != null && form.grdProblems().getRows().get(i).getcolProblems().equals(voRefProblem))
			{
				row = form.grdProblems().getRows().get(i);
				break;
			}
		}

		return row;
	}

	private void populateAbsentPatientProblemsControls(AbsentPatientPresentingProblemVoCollection voCollAbsentProblems)
	{
		for (int i = 0; i < voCollAbsentProblems.size(); i++)
			populateAbsentPatientProblemControls(voCollAbsentProblems.get(i));

	}

	private void populateAbsentPatientProblemControls(AbsentPatientPresentingProblemVo voAbsentPatientPresentingProblem)
	{
		GenForm.grdProblemsRow row = form.grdProblems().getRows().newRow();
		row.setcolProblems(voAbsentPatientPresentingProblem.getProblem());
		row.setcolSelect(AbsentPresent.ABSENT);
		row.setcolNotes(voAbsentPatientPresentingProblem.getNote());
		row.setValue(voAbsentPatientPresentingProblem);

	}

	private void listConfiguredProblems()
	{
		
		Specialty lkpSpecialty = null;
		
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			lkpSpecialty = form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty();
		
		
		if (lkpSpecialty == null) 
			lkpSpecialty = form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()?form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty():null;

		// prePopulate the configured proboems for this specialty.
		ClinicalProblemShortVoCollection voCollPresentingProblems = domain.listPresentingProblems(lkpSpecialty);

		form.grdProblems().getRows().clear();

		if (voCollPresentingProblems != null)
		{
			for (int i = 0; i < voCollPresentingProblems.size(); i++)
			{
				GenForm.grdProblemsRow row = form.grdProblems().getRows().newRow();
				row.setcolProblems(voCollPresentingProblems.get(i));
				// row.setcolProblemName(voCollPresentingProblems.get(i).getPCName());
				row.setValue(voCollPresentingProblems.get(i));

				setGridUIForAbsent(row);
			}
		}
	}

	private void updateControlsState()
	{
		for (int i = 0; i < form.grdProblems().getRows().size(); i++)
		{
			if (form.grdProblems().getRows().get(i).getcolSelect() == null)
			{
				setGridUIForNone(form.grdProblems().getRows().get(i));
			}
			else if (form.grdProblems().getRows().get(i).getcolSelect().equals(AbsentPresent.ABSENT))
			{
				setGridUIForAbsent(form.grdProblems().getRows().get(i));
			}
			else
			{
				setGridUIForPresent(form.grdProblems().getRows().get(i));
			}

			// form.grdProblems().getRows().get(i).setcolSelectReadOnly(bReadOnly);
		}

		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true);

		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectedInstance() == null);
		form.btnUpdate().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectedInstance() != null);

		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromTaxonomyItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setVisible(form.getMode().equals(FormMode.EDIT));
	}

	private void setGridUIForPresent(grdProblemsRow row)
	{
		row.setcolProblemsReadOnly(true);

		row.setcolOnsetReadOnly(false);
		row.setcolIsPrimaryReadOnly(false);
		row.setcolNotesReadOnly(false);

	}

	private void setGridUIForAbsent(grdProblemsRow row)
	{
		row.setcolProblemsReadOnly(true);

		row.setcolOnset(null);
		row.setcolIsPrimary(false);
		row.setcolNotes("");
		row.setcolOnsetReadOnly(true);
		row.setcolIsPrimaryReadOnly(true);
		row.setcolNotesReadOnly(true);
	}

	private boolean save()
	{
		PresentAbsentHistoryProblemsVo voPresentAbsentHistoryProblems = form.getLocalContext().getSelectedInstance();
		voPresentAbsentHistoryProblems = populateInstanceData(voPresentAbsentHistoryProblems);

		ArrayList<String> screenErrors = new ArrayList<String>();

		

		String[] arrErrors = voPresentAbsentHistoryProblems.validate();
		if (arrErrors == null)
		{
			if(form.customControlAuthoringInfo().getErrors() != null && form.customControlAuthoringInfo().getErrors().length() != 0)
			{
				screenErrors.add(form.customControlAuthoringInfo().getErrors());
			}
		}

		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, arrErrors);
		if (arrScreenAndVoErrors.length != 0)
		{
			engine.showErrors(arrScreenAndVoErrors);
			return false;
		}

		try
		{
			voPresentAbsentHistoryProblems = domain.save(voPresentAbsentHistoryProblems);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		catch (UnqViolationUncheckedException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}

		return true;

	}

	private String[] addScreenErrorsToVOErrors(ArrayList screenErrors, String[] arrErrors)
	{
		String[] arrAllErrors = null;

		if (arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);

			int i = 0;
			for (int p = screenErrors.size(); p < arrAllErrors.length; p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}
		else
		{
			arrAllErrors = new String[screenErrors.size()];

			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);
		}

		return arrAllErrors;
	}

	private PresentAbsentHistoryProblemsVo populateInstanceData(PresentAbsentHistoryProblemsVo voPresentAbsentHistoryProblems)
	{
		voPresentAbsentHistoryProblems.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		voPresentAbsentHistoryProblems.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voPresentAbsentHistoryProblems.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voPresentAbsentHistoryProblems.setHistoryPresentingProblem(form.txtHistory().getValue());
		voPresentAbsentHistoryProblems.setPresentProblems(populatePresentPatientProblemsData(voPresentAbsentHistoryProblems.getPresentProblems()));
		voPresentAbsentHistoryProblems.setAbsentProblems(populateAbsentPatientProblemsData(voPresentAbsentHistoryProblems.getAbsentProblems()));

		return voPresentAbsentHistoryProblems;
	}

	private AbsentPatientPresentingProblemVoCollection populateAbsentPatientProblemsData(AbsentPatientPresentingProblemVoCollection voCollAbsent)
	{
		voCollAbsent = new AbsentPatientPresentingProblemVoCollection();

		for (int i = 0; i < form.grdProblems().getRows().size(); i++)
		{
			if (form.grdProblems().getRows().get(i).getcolSelect() != null && form.grdProblems().getRows().get(i).getcolSelect().equals(AbsentPresent.ABSENT))
				voCollAbsent.add(populateAbsentPatientProblemData(form.grdProblems().getRows().get(i)));
		}
		return voCollAbsent;
	}

	private AbsentPatientPresentingProblemVo populateAbsentPatientProblemData(grdProblemsRow row)
	{
		AbsentPatientPresentingProblemVo voAbsentPatientPresentingProblem = new AbsentPatientPresentingProblemVo();
		voAbsentPatientPresentingProblem.setProblem(row.getcolProblems());
		voAbsentPatientPresentingProblem.setNote(row.getcolNotes());
		return voAbsentPatientPresentingProblem;

	}

	private PatientPresentingProblemsVoCollection populatePresentPatientProblemsData(PatientPresentingProblemsVoCollection voCollPresent)
	{
		voCollPresent = new PatientPresentingProblemsVoCollection();

		for (int i = 0; i < form.grdProblems().getRows().size(); i++)
		{
			if (form.grdProblems().getRows().get(i).getcolSelect() != null && form.grdProblems().getRows().get(i).getcolSelect().equals(AbsentPresent.PRESENT))
				voCollPresent.add(populatePresentPatientProblemData(form.grdProblems().getRows().get(i)));

		}
		return voCollPresent;
	}

	private PatientPresentingProblemsVo searchPresentPatientProblem(grdProblemsRow row)
	{
		PatientProblemVoCollection voColl = domain.listPatientProblemsByPatient(form.getGlobalContext().Core.getPatientShort());

		if (voColl != null)
		{
			for (int i = 0; i < voColl.size(); i++)
			{
				// if was linked
				if (voColl.get(i).getProblemIsNotNull() && voColl.get(i).getProblem().equals(row.getValue()) && voColl.get(i).getCareContext().getID_CareContext().equals(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()))
				{
					return new PatientPresentingProblemsVo();
				}
				else
				{
					PatientPresentingProblemsVo patientProblems = domain.getPatientProblems(voColl.get(i));

					if (voColl.get(i).getProblemIsNotNull() && (!(voColl.get(i).getProblemIsNotNull() && voColl.get(i).getProblem().equals(row.getValue())) && row.getcolProblems().equals((patientProblems).getProblem())))
					{
						return patientProblems;
					}
					else if (voColl.get(i).getProblemIsNotNull() && ((voColl.get(i).getProblemIsNotNull() && voColl.get(i).getProblem().equals(row.getValue())) && row.getcolProblems().equals((patientProblems).getProblem()) && !voColl.get(i).getCareContext().getID_CareContext().equals(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext())))
					{
						return patientProblems;
					}
				}
			}
		}

		return new PatientPresentingProblemsVo();
	}

	private PatientPresentingProblemsVo populatePresentPatientProblemData(grdProblemsRow row)
	{
		PatientPresentingProblemsVo voPresentPatientProblem = null;
		if (row.getValue() instanceof PatientPresentingProblemsVo)
		{
			voPresentPatientProblem = (PatientPresentingProblemsVo) row.getValue();
		}
		else
		{
			voPresentPatientProblem = searchPresentPatientProblem(row);
		}

		voPresentPatientProblem.setPatientProblem(row.getcolProblems() != null ? row.getcolProblems().getPCName() : "");

		voPresentPatientProblem.setOnset(row.getcolOnset());
		voPresentPatientProblem.setIsPresentingProblem(new Boolean(true));
		voPresentPatientProblem.setIsActive(new Boolean(true));
		voPresentPatientProblem.setProblem(row.getcolProblems());
		voPresentPatientProblem.setProblemNote(row.getcolNotes());// setPatientProblem(row.getcolNotes());

		setCsPrimaryProblem(voPresentPatientProblem, row.getcolIsPrimary());

		if (voPresentPatientProblem.getCareContext() == null)
			voPresentPatientProblem.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if (voPresentPatientProblem.getClinicalContact() == null)
			voPresentPatientProblem.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		if (voPresentPatientProblem.getAuthoringInformation() == null)
			voPresentPatientProblem.setAuthoringInformation(form.customControlAuthoringInfo().getValue());

		return voPresentPatientProblem;

	}

	private void setCsPrimaryProblem(PatientPresentingProblemsVo voPatientProblem, boolean isChkPrimaryChecked)
	{
		CSPrimaryProblemVo voCSPrimaryProcedure = getPrimaryProblemRecord(voPatientProblem);
		// Update only when checked or record existing
		if (voCSPrimaryProcedure != null || isChkPrimaryChecked)
		{
			if (voCSPrimaryProcedure == null)
			{
				voCSPrimaryProcedure = populatePrimaryProblemDataFromScreen(new CSPrimaryProblemVo(), voPatientProblem, isChkPrimaryChecked);
				if (voPatientProblem.getPrimaryForCareSpells() == null)
					voPatientProblem.setPrimaryForCareSpells(new CSPrimaryProblemVoCollection());
				voPatientProblem.getPrimaryForCareSpells().add(voCSPrimaryProcedure);
			}
			else
			{
				int index = voPatientProblem.getPrimaryForCareSpells().indexOf(voCSPrimaryProcedure);
				if (index >= 0)
				{
					voCSPrimaryProcedure = populatePrimaryProblemDataFromScreen(voCSPrimaryProcedure, voPatientProblem, isChkPrimaryChecked);
					voPatientProblem.getPrimaryForCareSpells().set(index, voCSPrimaryProcedure);
				}
			}
		}
	}

	private CSPrimaryProblemVo getPrimaryProblemRecord(PatientPresentingProblemsVo voPatientProblem)
	{
		if (voPatientProblem == null || voPatientProblem.getPrimaryForCareSpells() == null)
			return null;

		CSPrimaryProblemVoCollection voColl = voPatientProblem.getPrimaryForCareSpells();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			boolean sameProcedure = voColl.get(i).getPatientProblemIsNotNull() && voColl.get(i).getPatientProblem().equals(voPatientProblem);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());

			if (sameProcedure && sameCareContext)
				return voColl.get(i);
		}

		return null;
	}

	private CSPrimaryProblemVo populatePrimaryProblemDataFromScreen(CSPrimaryProblemVo coCsPrimaryProblem, PatientProblemRefVo patientDiagnosisRef, boolean isActive)
	{
		if (coCsPrimaryProblem == null)
			coCsPrimaryProblem = new CSPrimaryProblemVo();
		coCsPrimaryProblem.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		coCsPrimaryProblem.setPatientProblem(patientDiagnosisRef);
		coCsPrimaryProblem.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		coCsPrimaryProblem.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		coCsPrimaryProblem.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		coCsPrimaryProblem.setIsActive(new Boolean(isActive));
		return coCsPrimaryProblem;
	}

	protected void ongrdProblemsGridcolSelectColumnAnswerBoxValueChanged(grdProblemsRow row) throws PresentationLogicException
	{
		if (row.getcolSelect() != null)
		{
			if (row.getcolSelect().equals(AbsentPresent.ABSENT))
			{
				setGridUIForAbsent(row);
			}
			else if (row.getcolSelect().equals(AbsentPresent.PRESENT))
			{
				row.setcolNotesReadOnly(false);
				row.setcolNotes(row.getcolProblems().getPCName());

				setGridUIForPresent(row);

				form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setEnabled(true);
				form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setVisible(true);
			}
			else
			{
				row.setValue(null);
				form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setEnabled(false);
				form.getContextMenus().getPresentingProblemsAddCCIfromLocalSearchItem().setVisible(false);
			}
		}
		else
		{
			row.setValue(null);
		}

		updateControlsState();
	}

	private void setGridUIForNone(grdProblemsRow row)
	{
		row.setcolProblemsReadOnly(true);
		row.setcolOnset(null);
		row.setcolIsPrimary(false);
		row.setcolNotes("");
		row.setcolOnsetReadOnly(true);
		row.setcolIsPrimaryReadOnly(true);
		row.setcolNotesReadOnly(true);
	}

	private void clearControls()
	{
		form.grdProblems().getRows().clear();
		form.txtHistory().setValue(null);
		form.customControlAuthoringInfo().setValue(null);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (result == DialogResult.CANCEL)
			return;

		if ((formName.equals(form.getForms().Core.TaxonomySearch)) && (result.equals(DialogResult.OK)))
		{
			if (form.getGlobalContext().Core.getTaxonomyMapIsNotNull())
			{
				TaxonomyMap voTaxonomyMap = form.getGlobalContext().Core.getTaxonomyMap();

				ProblemConfigVo voProblem = new ProblemConfigVo();

				voProblem.setPCName(voTaxonomyMap.getDescription());
				voProblem.setIsActive(Boolean.TRUE);

				TaxonomyMapCollection voCollTaxonomyMapCollection = new TaxonomyMapCollection();
				voCollTaxonomyMapCollection.add(voTaxonomyMap);

				// Set Back the TaxonomyMap Collection
				voProblem.setTaxonomyMap(voCollTaxonomyMapCollection);

				String[] arrErrors = voProblem.validate();
				if (arrErrors != null)
				{
					engine.showErrors("Validation Errors", arrErrors);
					return;
				}

				try
				{
					voProblem = domain.saveProblemConfig(voProblem);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					return;
				}
				catch (UniqueKeyViolationException e)
				{
					engine.showMessage(e.getMessage());
					return;
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return;
				}

				GenForm.grdProblemsRow row = form.grdProblems().getRows().newRow();
				row.setcolProblems(voProblem);
				row.setcolNotes(voProblem.getPCName());
				row.setcolSelect(AbsentPresent.PRESENT);
				row.setValue(new PatientPresentingProblemsVo());
			}
		}
		else if ((formName.equals(form.getForms().Core.DiagnosisProcedureProblemSearch)) && (result.equals(DialogResult.OK)))
		{

			// Get the problems returned by the dialog.
			ClinicalProblemShortVoCollection probList = form.getGlobalContext().Clinical.getSelectedProblems();

			for (int i = 0; i < probList.size(); i++)
			{
				boolean bFound = false;
				for (int j = 0; j < form.grdProblems().getRows().size(); j++)
				{
					if (form.grdProblems().getRows().get(j).getcolProblems() != null && form.grdProblems().getRows().get(j).getcolProblems().equals(probList.get(i)))
					{
						bFound = true;
						engine.showMessage("Problem record called \"" + probList.get(i) + "\" is already in list.");
						break;
					}
				}

				if (!bFound)
				{
					GenForm.grdProblemsRow row = form.grdProblems().getRows().newRow();
					row.setcolProblems(probList.get(i));
					row.setcolNotes(probList.get(i).getPCName());
					row.setcolSelect(AbsentPresent.PRESENT);
					row.setValue(new PatientPresentingProblemsVo());
				}
			}
		}

	}

	@Override
	protected void onGrdProblemsSelectionChanged() throws PresentationLogicException
	{
		grdProblemsRow row = form.grdProblems().getSelectedRow();

		if (row != null && form.getMode().equals(FormMode.EDIT) && row.getcolSelect() != null)
		{
			if (row.getcolSelect().equals(AbsentPresent.PRESENT))
				enableUnlinkContextMenu(true);
			else
				enableUnlinkContextMenu(false);
		}
		else
			enableUnlinkContextMenu(false);

		updateControlsState();
	}

	private void enableUnlinkContextMenu(boolean isEnable)
	{
		form.getContextMenus().getPresentingProblemsUnlinkItem().setEnabled(isEnable);
		form.getContextMenus().getPresentingProblemsUnlinkItem().setVisible(isEnable);
	}
}
