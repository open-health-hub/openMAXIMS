//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.53 build 2529.20504)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.patientclinicalnotes;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ClinicalNotesFilterVo;
import ims.core.vo.ClinicalNotesShortVo;
import ims.core.vo.ClinicalNotesShortVoCollection;
import ims.core.vo.Hcp;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.lookups.ClinicalNoteType;
import ims.core.vo.lookups.ClinicalNotesStatus;
import ims.core.vo.lookups.ClinicalNotingMode;
import ims.core.vo.lookups.HcpDisTypeCollection;
import ims.core.vo.lookups.SourceOfNote;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void initialise()
	{
		initializeDynamicGrid();
		form.getLocalContext().setClinicalContactErr(true);
		form.cmbDiscipline().clear();
		HcpDisTypeCollection hcpDisTypeColl = (ims.core.vo.lookups.LookupHelper.getHcpDisType(domain.getLookupService()));
		for( int i = 0;i < hcpDisTypeColl.size();i++)
		{
			if(hcpDisTypeColl.get(i).getParent() == null)
				form.cmbDiscipline().newRow(hcpDisTypeColl.get(i), hcpDisTypeColl.get(i).getIItemText(),hcpDisTypeColl.get(i).getImage());
		}
		form.getLocalContext().setSelectedClinicalNote(null);	//wdev-14296
	}

	private void initializeDynamicGrid()
	{
		form.dyngrdNotes().clear();
		form.dyngrdNotes().setSelectable(true);
		form.dyngrdNotes().setReadOnly(true);

		form.dteFrom().setValue(new Date().addDay(-ConfigFlag.DOM.DAILY_NOTES_LIST_NO_OF_DAYS.getValue()));
		form.dteTo().setValue(new Date());

		DynamicGridColumn iconColumn = form.dyngrdNotes().getColumns().newColumn("", true);
		iconColumn.setWidth(30);
		iconColumn.setIdentifier(new String("ICON"));

		DynamicGridColumn correctedColumn = form.dyngrdNotes().getColumns().newColumn("", true);
		correctedColumn.setWidth(30);
		correctedColumn.setIdentifier(new String("CORRECT"));

		DynamicGridColumn dateColumn = form.dyngrdNotes().getColumns().newColumn("Authoring Details", true);
		dateColumn.setWidth(150);
		dateColumn.setIdentifier(new String("Authoring Details"));

		DynamicGridColumn disColumn = form.dyngrdNotes().getColumns().newColumn("Discipline", true);
		disColumn.setWidth(100);
		disColumn.setIdentifier(new String("Discipline"));
		disColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn statusColumn = form.dyngrdNotes().getColumns().newColumn("Status", true);
		statusColumn.setWidth(100);
		statusColumn.setIdentifier(new String("Status"));
		statusColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn notesColumn = form.dyngrdNotes().getColumns().newColumn("Note", true);
		notesColumn.setWidth(-1);
		notesColumn.setIdentifier(new String("Note"));
	}

	private void search()
	{
		
		form.getGlobalContext().Clinical.setCurrentClinicalNote(null);//WDEV-14286
		
		form.getGlobalContext().Core.setClinicalNotesShort(null);

		ClinicalNotesFilterVo filter = setFilter();

		ClinicalNotesShortVoCollection voCollNotes = domain.listClinicalNote(filter);
		form.dyngrdNotes().getRows().clear();
		updateControlsState();
		//-------------------------------------------------------------------
		if(form.dteFrom().getValue() != null && form.dteTo().getValue() != null )
			if(form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("Please enter From and To dates that are in chronological order");
				form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());//WDEV-16517
				return;
			}
		//--------------------------------------------------------------------
		if (voCollNotes == null || voCollNotes.size() == 0)
		{
			engine.showMessage("No matching records found");
			form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());
			return;
		}

		populateDynamicGrid(voCollNotes);
		updateControlsState();

		form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());
	}

	private void populateDynamicGrid(ClinicalNotesShortVoCollection voCollNotes)
	{
		updateControlsState();

		for (int i = 0; i < voCollNotes.size(); i++)
		{
			DynamicGridRow row = form.dyngrdNotes().getRows().newRow();

			if (voCollNotes.get(i).getAuthoringInfoIsNotNull())
			{
				setColAuthoringDetails(voCollNotes, i, row);
			}

			if (voCollNotes.get(i).getForReviewDisciplineIsNotNull() && voCollNotes.get(i).getSourceOfNoteIsNotNull() && !voCollNotes.get(i).getReviewingDateTimeIsNotNull() && !voCollNotes.get(i).getReviewingHCPIsNotNull())
			{
				setColNeedReviewed(row, voCollNotes, i);
			}
			if (voCollNotes.get(i).getIsCorrectedIsNotNull() && voCollNotes.get(i).getIsCorrected().booleanValue())
			{
				setColCorrect(row);
			}

			if (voCollNotes.get(i).getDisciplineIsNotNull())
			{
				setColDiscipline(voCollNotes, i, row);
			}

			if (voCollNotes.get(i).getCurrentStatusIsNotNull() && voCollNotes.get(i).getCurrentStatus().getStatusIsNotNull())
			{
				setColStatus(voCollNotes, i, row);
			}

			DynamicGridColumn col = getCol("Note");
			if (col == null)
				throw new DomainRuntimeException("No column for Identifier");

			DynamicGridCell noteCell = row.getCells().newCell(col, DynamicCellType.HTMLVIEW);
			noteCell.setValue(voCollNotes.get(i).getClinicalNote());

			row.setBackColor(Color.Bisque);
			row.setValue(voCollNotes.get(i));
		}
	}

	private void setColStatus(ClinicalNotesShortVoCollection voCollNotes, int i, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Status");
		if (col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell statusCell = row.getCells().newCell(col, DynamicCellType.STRING);
		statusCell.setValue(voCollNotes.get(i).getCurrentStatus().getStatus().getText());
	}

	private void setColDiscipline(ClinicalNotesShortVoCollection voCollNotes, int i, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Discipline");
		if (col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell disCell = row.getCells().newCell(col, DynamicCellType.STRING);
		disCell.setValue(voCollNotes.get(i).getDisciplineIsNotNull() ? voCollNotes.get(i).getDiscipline().getText() : "");
	}

	private void setColCorrect(DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("CORRECT");
		if (col == null)
			throw new DomainRuntimeException("No column for CORRECT");

		DynamicGridCell correctCell = row.getCells().newCell(col, DynamicCellType.IMAGE);
		correctCell.setValue(form.getImages().Core.CareSpell);
	}

	private void setColNeedReviewed(DynamicGridRow row, ClinicalNotesShortVoCollection voCollNotes, int i)
	{
		DynamicGridColumn col = getCol("ICON");
		if (col == null)
			throw new DomainRuntimeException("No column for ICON");

		DynamicGridCell iconCell = row.getCells().newCell(col, DynamicCellType.IMAGE);

		StringBuffer value = new StringBuffer();

		if (voCollNotes.get(i).getForReviewDisciplineIsNotNull() && voCollNotes.get(i).getSourceOfNoteIsNotNull())
		{
			value.append("Review Discipline: " + voCollNotes.get(i).getForReviewDiscipline().toString().toUpperCase());
		}

		iconCell.setTooltip(value.toString());
		iconCell.setValue(form.getImages().Admin.ClinicalTeam);

		iconCell.setValue(form.getImages().Admin.ClinicalTeam);
	}

	private void setColAuthoringDetails(ClinicalNotesShortVoCollection voCollNotes, int i, DynamicGridRow row)
	{
		DynamicGridColumn col = getCol("Authoring Details");
		if (col == null)
			throw new DomainRuntimeException("No column for Identifier");

		DynamicGridCell dateCell = row.getCells().newCell(col, DynamicCellType.WRAPTEXT);
		StringBuffer value = new StringBuffer();
		if (voCollNotes.get(i).getAuthoringInfo().getAuthoringHcpIsNotNull())
			value.append("HCP: " + voCollNotes.get(i).getAuthoringInfo().getAuthoringHcp().toString());
		if (voCollNotes.get(i).getAuthoringInfo().getAuthoringDateTimeIsNotNull())
		{
			if (value.length() > 0)
				value.append("\n");
			String voCollNotesAuthoringDateTime = voCollNotes.get(i).getAuthoringInfo().getAuthoringDateTime().toString();

			value.append("Date:" + voCollNotesAuthoringDateTime);
		}
		dateCell.setValue(value.toString());
	}

	private ClinicalNotesFilterVo setFilter()
	{
		ClinicalNotesFilterVo filter = new ClinicalNotesFilterVo();
		filter.setDiscipline(form.cmbDiscipline().getValue());
		if(form.dteFrom().getValue()!=null){
			DateTime dateFrom = new DateTime(form.dteFrom().getValue(), null); 
			filter.setDateFrom(dateFrom);
		}
		if(form.dteTo().getValue()!=null){
			DateTime dateTo = new DateTime(form.dteTo().getValue(), null); 
			filter.setDateTo(dateTo);
		}
		filter.setPatient(form.getGlobalContext().Core.getPatientShort());
		filter.setEpisodeOfCare(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare());
		// filter.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		
		if (form.chkReview().getValue() == true)
		{
			filter.setForReview(new Boolean(form.chkReview().getValue()));
			//WDEV-14630
			//filter.setForReviewDiscipline(form.cmbDiscipline().getValue());
		}

		return filter;
	}

	private DynamicGridColumn getCol(String identifier)
	{
		return form.dyngrdNotes().getColumns().getByIdentifier(identifier);
	}

	private void open()
	{
		checkForClinicalNoteVoForContext();
		search();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		//--------------
		//initialise();
		//--------------
		form.getLocalContext().setSelectedClinicalNote(null);	//wdev-14296
		
		form.getGlobalContext().Clinical.setCurrentClinicalNote(null);//WDEV-14286
		open();
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNoting.ADD :
				newClinicalNote();
			break;
			case GenForm.ContextMenus.ClinicalNoting.EDIT :
				editClinicalNote();
			break;
			case GenForm.ContextMenus.ClinicalNoting.VIEW :
				viewClinicalNote();
			break;
			case GenForm.ContextMenus.ClinicalNoting.REVIEW :
				reviewClinicalNote();
			break;
			case GenForm.ContextMenus.ClinicalNoting.VALIDATE :
				validateClinicalNote();
			break;
			case GenForm.ContextMenus.ClinicalNoting.STATUS_HIST :
				viewStatusHistory();
			break;

			default :
		}
	}

	private void viewStatusHistory()
	{
		engine.open(form.getForms().Clinical.ClinicalNoteHistoryDialog);
	}

	private void newClinicalNote()
	{
		form.getGlobalContext().Core.setClinicalNotesShort(null);
		form.getGlobalContext().Clinical.setCurrentClinicalNote(null);
		form.getGlobalContext().Core.getCurrentCareContext();
		form.getGlobalContext().Core.getCurrentClinicalContact();
		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		engine.open(form.getForms().Clinical.ClinicalNotesDialog);
	}

	private void editClinicalNote()
	{
		selectClinicalNoteInGlobalContext();

		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.UPDATE);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE))
			engine.open(form.getForms().Therapies.SOAPNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE))
			engine.open(form.getForms().Clinical.TherapiesNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNote().booleanValue())
		{
			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
		}
		else
			engine.open(form.getForms().Clinical.ClinicalNotesDialog);

	}

	private void viewClinicalNote()
	{
		selectClinicalNoteInGlobalContext();

		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.VIEW);
		form.getGlobalContext().Core.setClinicalNotingMode(null);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE))
			engine.open(form.getForms().Therapies.SOAPNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE))
			engine.open(form.getForms().Clinical.TherapiesNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNote().booleanValue())
		{
			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);

			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
		}
		else
		{
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.VIEW);
			engine.open(form.getForms().Clinical.ClinicalNotesDialog);
		}

	}

	private void reviewClinicalNote()
	{
		selectClinicalNoteInGlobalContext();

		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.REVIEW);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE))
			engine.open(form.getForms().Therapies.SOAPNoteDialog);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE))
			engine.open(form.getForms().Clinical.TherapiesNoteDialog);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP))
			engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP))
			engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALCLINICALNOTE))
			engine.open(form.getForms().Clinical.ClinicalNotesDialog);
	}

	private void validateClinicalNote()
	{
		selectClinicalNoteInGlobalContext();

		form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.EDIT);
		form.getGlobalContext().Core.setClinicalNotingMode(ClinicalNotingMode.VALIDATE);

		if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.THERAPYSOAPNOTE))
			engine.open(form.getForms().Therapies.SOAPNoteDialog);
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.TLT_NOTE))
		{
			engine.open(form.getForms().Clinical.TherapiesNoteDialog);
		}
		else if (form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getIsDerivedNote().booleanValue())
		{
			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGIP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);

			if (form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNoteIsNotNull() && form.getGlobalContext().Core.getClinicalNotesShort().getSourceOfNote().equals(SourceOfNote.CLINICALNOTEDRAWINGOP))
				engine.open(form.getForms().Clinical.ClinicalNoteDrawingDialog);
		}
		else
			engine.open(form.getForms().Clinical.ClinicalNotesDialog);

		// engine.open(form.getForms().Clinical.ClinicalNoteDrawing);
	}

	private void selectClinicalNoteInGlobalContext()
	{
		form.getGlobalContext().Core.setClinicalNotesShort((ClinicalNotesShortVo) form.dyngrdNotes().getSelectedRow().getValue());
		form.getGlobalContext().Clinical.setCurrentClinicalNote(domain.getClinicalNote((ClinicalNotesShortVo) form.dyngrdNotes().getSelectedRow().getValue()));
	}

	protected void onDyngrdNotesRowSelectionChanged(DynamicGridRow row)
	{
		selectDynamicRow(row);
	}

	private void selectDynamicRow(DynamicGridRow row)
	{
		if (row == null)
			return;

		//Commented out after conversation with Joan and Jacinta.  - wdev-9369
		//ClinicalNotesShortVo voClinNote = (ClinicalNotesShortVo) form.dyngrdNotes().getSelectedRow().getValue();
		//if (voClinNote.getClinicalContact() != null)
		//	form.getGlobalContext().Core.setCurrentClinicalContact(domain.getCurrentClinicalContact(voClinNote.getClinicalContact()));
		//if (voClinNote.getCareContext() != null)
		//	form.getGlobalContext().Core.setCurrentCareContext(domain.getCurrentCareContext(voClinNote.getCareContext()));

		//if(ConfigFlag.UI.ALLOW_ONLY_ONE_CLINICAL_NOTE.getValue()) comment form wdev-9693
		//if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		//	checkForClinicalNoteVoForContext();

		form.getGlobalContext().Core.setClinicalNotesShort((ClinicalNotesShortVo) form.dyngrdNotes().getValue());

		form.getGlobalContext().Clinical.setCurrentClinicalNote(domain.getClinicalNote((ClinicalNotesShortVo) form.dyngrdNotes().getValue()));
		form.getLocalContext().setClinicalNoteVoForContext(form.getGlobalContext().Clinical.getCurrentClinicalNote());
		form.getLocalContext().setSelectedClinicalNote(form.getGlobalContext().Clinical.getCurrentClinicalNote()); //wdev-14296
		// WDEV-2511
		if (domain.getMosUser() == null)
		{
			clearContextMenu();
			return;
		}
		
		updateControlsState();
		
/*		if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsCorrectedIsNotNull() 
			&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsCorrected().booleanValue())
		{
			form.getContextMenus().getClinicalNotingSTATUS_HISTItem().setVisible(true);
			form.getContextMenus().getClinicalNotingSTATUS_HISTItem().setText("View Note Corrections");
		}

		form.getContextMenus().getClinicalNotingEDITItem().setVisible(true);
		// If its a transcribed record, a non-HCP user and has been moved on in status make the screen R/O fo the logged in use.
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
			&& domain.getHcpLiteUser() == null)
		{
			if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() 
				&& !form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT) 
				&& !form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
			{
				form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
			}
		}
		else if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
			&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getNoteTypeIsNotNull() 
			&& (form.getGlobalContext().Clinical.getCurrentClinicalNote().getNoteType().equals(ClinicalNoteType.DISCHARGENOTE) 
					|| form.getGlobalContext().Clinical.getCurrentClinicalNote().getNoteType().equals(ClinicalNoteType.SUMMARYATADMISSION)))
		{
			form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
		}

		//if selected rows clinical contact does not match the one in the GC then hide the edit option wdev-9369  
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
			&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContactIsNotNull()
			&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
			&& ! form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()) )
			form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
*/

		//checkForDiscipline(voClinNote);
	}

	private void checkForClinicalNoteVoForContext()
	{
		form.getGlobalContext().Clinical.setReturnToFormMode(null);
		
		//for RIE
		if(form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull())
		{
			form.getGlobalContext().Clinical.setCurrentClinicalNote(domain.getClinicalNote(form.getGlobalContext().Clinical.getCurrentClinicalNote()));
		}
		
		form.getLocalContext().setClinicalNoteVoForContext(form.getGlobalContext().Clinical.getCurrentClinicalNote());

		/*if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			ClinicalContactShortVo currentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			ClinicalNotesVo clinicalNotesForContact = null;

			try
			{
				clinicalNotesForContact = domain.getClinicalNotesForContact(currentClinicalContact);
				form.getLocalContext().setClinicalNoteVoForContext(clinicalNotesForContact);
			}
			catch (Exception e)
			{
				if(form.getLocalContext().getClinicalContactErr()== true)
				{
				 engine.showMessage(e.getMessage());
				 form.getLocalContext().setClinicalContactErr(false);
				}
				return false;
			}
		}
		else if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			form.getLocalContext().setClinicalNoteVoForContext(domain.getClinicalNotesForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		
		form.getLocalContext().setClinicalContactErr(true);
		updateControlsState();
		
		*/
	}

	private void updateControlsState()
	{
		clearContextMenu();

		handleNotingAddMenuItemVisibility();

		
		//if there is a Contact in the GC, check to see if there is a note for it. If not show ADD.
		checkForNoteForClinicalContact();

		if (form.dyngrdNotes().getSelectedRow() != null 
			&& form.dyngrdNotes().getSelectedRow().getValue() != null)
		{
			form.getContextMenus().getClinicalNotingEDITItem().setVisible(true);

			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull()
				&&form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsCorrectedIsNotNull() 
				&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getIsCorrected().booleanValue())
			{
				form.getContextMenus().getClinicalNotingSTATUS_HISTItem().setVisible(true);
				form.getContextMenus().getClinicalNotingSTATUS_HISTItem().setText("View Note Corrections");
			}

			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
				&& domain.getHcpLiteUser() == null)
			{
				if (form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() 
					&& !form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.DRAFT) 
					&& !form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
				{
					form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
				}
			}
			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
					&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatusIsNotNull() 
					&& ClinicalNotesStatus.DRAFT.equals(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCurrentStatus().getStatus()) 
					&& !(form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfoIsNotNull() 
					&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcpIsNotNull() 
					&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getAuthoringInfo().getAuthoringHcp().equals(domain.getHcpLiteUser())))
			{
				form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
			}
			
			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
				&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getNoteTypeIsNotNull() 
				&& (form.getGlobalContext().Clinical.getCurrentClinicalNote().getNoteType().equals(ClinicalNoteType.DISCHARGENOTE) 
					|| form.getGlobalContext().Clinical.getCurrentClinicalNote().getNoteType().equals(ClinicalNoteType.SUMMARYATADMISSION)))
			{
				form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
			}
				
			form.getContextMenus().getClinicalNotingVIEWItem().setVisible(true);

			/*
			 	1. selecting a note, other than the one recorded in the context of that contact, should not have any context menu displayed. 
			 	currently, selecting another note, and CORRECT say, the note displayed in the dialog is the one recorded in the context of the 
			 	contact, not the one selected from the list. 
			 	2. selecting the note which was recorded in the context of the contact should not have the option ADD in the context menu. 
			 	3. right-click on the white space should offer Add only if no note recorded for the contact or CORRECT if one already recorded 
			 */

			//wdev-14272 - dont allow edit if contexts dont match
			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull()
				&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getCareContextIsNotNull()
				&& form.getGlobalContext().Core.getCurrentCareContextIsNotNull()
				&&  ! form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext().equals(form.getGlobalContext().Clinical.getCurrentClinicalNote().getCareContext().getID_CareContext()) )
					form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
					
			//if selected rows clinical contact does not match the one in the GC then hide the edit option wdev-9369  
			if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
				&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
				&& ( (form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContactIsNotNull()
						&& ! form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()) )
					|| 	(form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContact() == null)) )
				form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);

			checkIfADDShouldBeHidden();

			if (form.dyngrdNotes().getSelectedRow().getValue() instanceof ClinicalNotesShortVo)
			{
				ClinicalNotesShortVo voNote = (ClinicalNotesShortVo) form.dyngrdNotes().getSelectedRow().getValue();
				Hcp voHcp = (Hcp) domain.getHcpUser();

				if (voNote.getNoteTypeIsNotNull() 
					&& !(voNote.getNoteType().equals(ClinicalNoteType.DISCHARGENOTE) || voNote.getNoteType().equals(ClinicalNoteType.SUMMARYATADMISSION)))
				{
					if (rulesForReviewContexMenus(voNote, voHcp)) //bogdan
						form.getContextMenus().getClinicalNotingREVIEWItem().setVisible(true);

					if (voNote.getReviewingDateTimeIsNotNull() || voNote.getReviewingHCPIsNotNull())
						form.getContextMenus().getClinicalNotingREVIEWItem().setVisible(false);

					if (rulesForValidationContexMenus(voNote, voHcp))
					{
						form.getContextMenus().getClinicalNotingVALIDATEItem().setVisible(true);
						form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
					}

					if (rulesForCorrectContexMenus(voNote))
						form.getContextMenus().getClinicalNotingEDITItem().setText("Correct");
					else
					{
						form.getContextMenus().getClinicalNotingEDITItem().setText("Edit");
						if (!(voNote.getAuthoringInfoIsNotNull() 
								&& voNote.getAuthoringInfo().getAuthoringHcpIsNotNull() 
								&& voNote.getAuthoringInfo().getAuthoringHcp().equals(domain.getHcpLiteUser())))
						{
							form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
						}
					}
				}
				else
				{
					form.getContextMenus().hideAllClinicalNotingMenuItems();

					form.getContextMenus().getClinicalNotingEDITItem().setVisible(voNote.getAuthoringInfoIsNotNull() 
							&& voNote.getAuthoringInfo().getAuthoringHcpIsNotNull() 
							&& voNote.getAuthoringInfo().getAuthoringHcp().equals(domain.getHcpLiteUser()));
					form.getContextMenus().getClinicalNotingVIEWItem().setVisible(true);
					form.getContextMenus().getClinicalNotingADDItem().setVisible(domain.getHcpLiteUser() != null ? true : false);

					checkForNoteForClinicalContact();
					checkIfADDShouldBeHidden();
				}
			}
			return;
		}

	}

	private void handleNotingAddMenuItemVisibility()
	{
		//if(ConfigFlag.UI.ALLOW_ONLY_ONE_CLINICAL_NOTE.getValue()) - wdev-9693
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if(form.getLocalContext().getClinicalContactErr() != null && form.getLocalContext().getClinicalContactErr() == true )
				if (form.getLocalContext().getClinicalNoteVoForContext() == null)
					form.getContextMenus().getClinicalNotingADDItem().setVisible(domain.getHcpLiteUser() != null ? true : false);
		}
		else
			form.getContextMenus().getClinicalNotingADDItem().setVisible(domain.getHcpLiteUser() != null ? true : false);
	}

	private void checkIfADDShouldBeHidden()
	{
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() 
			&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
			&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContactIsNotNull()
			&& form.getGlobalContext().Clinical.getCurrentClinicalNote().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())) 	
			form.getContextMenus().getClinicalNotingADDItem().setVisible(false);
	}

	private void checkForNoteForClinicalContact() 
	{
		boolean bFound = false;
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			try
			{
				if (domain.getClinicalNotesForContact(form.getGlobalContext().Core.getCurrentClinicalContact()) != null)
					bFound = true; 
			}
			catch (Exception e)
			{
				
				if(form.getLocalContext().getClinicalContactErr()== true)
				{
					engine.showMessage(e.getMessage());
					form.getLocalContext().setClinicalContactErr(false);
				}
				
				
				//engine.showMessage(e.getMessage());
				//wdev-9693
				form.getContextMenus().getClinicalNotingADDItem().setVisible(false);
				return;
			}
		}
		if(bFound)
			form.getContextMenus().getClinicalNotingADDItem().setVisible(false);
		else //WDEV-14286
			form.getContextMenus().getClinicalNotingADDItem().setVisible(true);
	}		

	private void clearContextMenu()
	{
		form.getContextMenus().getClinicalNotingADDItem().setVisible(false);
		form.getContextMenus().getClinicalNotingEDITItem().setVisible(false);
		form.getContextMenus().getClinicalNotingVIEWItem().setVisible(false);
		form.getContextMenus().getClinicalNotingREVIEWItem().setVisible(false);
		form.getContextMenus().getClinicalNotingVALIDATEItem().setVisible(false);
		form.getContextMenus().getClinicalNotingSTATUS_HISTItem().setVisible(false);
	}

	private boolean rulesForReviewContexMenus(ClinicalNotesShortVo voNote, Hcp voHcp)
	{
		if ((voNote.getForReviewDisciplineIsNotNull() && voNote.getSourceOfNoteIsNotNull() && voHcp != null && voHcp.getHcpTypeIsNotNull())
			&& (voNote.getForReviewDiscipline().equals(voHcp.getHcpType()) || ( voHcp.getHcpType().getParent() != null && voNote.getForReviewDiscipline().getID() == voHcp.getHcpType().getParent().getID()))) //WDEV-14787
			return true;

		return false;
	}

	private boolean rulesForValidationContexMenus(ClinicalNotesShortVo voNote, Hcp voHcp)
	{
		if (voNote.getDisciplineIsNotNull() && voHcp != null && voHcp.getHcpTypeIsNotNull() && voNote.getDiscipline().equals(voHcp.getHcpType()) && voNote.getCurrentStatusIsNotNull() && voNote.getCurrentStatus().getStatusIsNotNull() && voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.PREVALIDATION))
			return true;

		return false;
	}

	private boolean rulesForCorrectContexMenus(ClinicalNotesShortVo voNote)
	{
		if (voNote.getCurrentStatusIsNotNull() && voNote.getCurrentStatus().getStatusIsNotNull() && voNote.getAuthoringInfoIsNotNull() && voNote.getAuthoringInfo().getAuthoringHcpIsNotNull() && (voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.ACTIVE) || voNote.getCurrentStatus().getStatus().equals(ClinicalNotesStatus.CORRECTED)) && domain.getHcpLiteUser() != null && testDiscipline(voNote))// domain.getHcpLiteUser().equals(voNote.getAuthoringInfo().getAuthoringHcp()) )
			return true;

		return false;
	}

	private boolean testDiscipline(ClinicalNotesShortVo voNote)
	{
		MemberOfStaffVo fullVo = null;
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo) domain.getMosUser();
		if (mos != null)
			fullVo = domain.getMemberOfStaff(mos);

		if (fullVo != null)
		{
			if (fullVo.getHcpIsNotNull())
			{
				if (fullVo.getHcp().getHcpTypeIsNotNull())
				{
					if (voNote.getAuthoringInfoIsNotNull() && voNote.getAuthoringInfo().getAuthoringHcpIsNotNull() && voNote.getAuthoringInfo().getAuthoringHcp().getHcpTypeIsNotNull())
					{
						if (voNote.getAuthoringInfo().getAuthoringHcp().getHcpType().equals(fullVo.getHcp().getHcpType()))
							return true;
					}
				}
			}
		}
		return false;
	}

	protected void onImbClearClick() throws PresentationLogicException
	{			
		clearTabControls();
		//clearContextMenu(); //WDEV-14286
		//handleNotingAddMenuItemVisibility(); //WDEV-14286
		
		//WDEV-14286
		form.getLocalContext().setClinicalNoteVoForContext(null);
		updateControlsState();	
	}

	private void clearTabControls()
	{
		form.dyngrdNotes().getRows().clear();
		form.cmbDiscipline().setValue(null);
		//--------------------------------------
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		//--------------------------------------
		form.chkReview().setValue(false);
		form.lblTotal().setValue("Total : " + form.dyngrdNotes().getRows().size());
	}

	protected void onImbSearchClick() throws PresentationLogicException
	{

		search();
	}
}
