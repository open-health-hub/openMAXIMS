//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.patient_summary;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnSummaryContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class grdDiagnosisRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdDiagnosisRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolImageReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolImageReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolImageOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForcolImage(String value)
			{
				super.row.setTooltip(0, value);
			}
			public ims.framework.utils.Image getcolImage()
			{
				return (ims.framework.utils.Image)super.row.get(0);
			}
			public void setcolImage(ims.framework.utils.Image value)
			{
				super.row.set(0, value);
			}
			public void setCellcolImageTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolTextReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolTextReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolTextOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForcolText(String value)
			{
				super.row.setTooltip(1, value);
			}
			public String getcolText()
			{
				return (String)super.row.get(1);
			}
			public void setcolText(String value)
			{
				super.row.set(1, value);
			}
			public void setCellcolTextTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setcolOnsetReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean iscolOnsetReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showcolOnsetOpened()
			{
				super.row.showOpened(2);
			}
			public void setTooltipForcolOnset(String value)
			{
				super.row.setTooltip(2, value);
			}
			public String getcolOnset()
			{
				return (String)super.row.get(2);
			}
			public void setcolOnset(String value)
			{
				super.row.set(2, value);
			}
			public void setCellcolOnsetTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setcolStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean iscolStatusReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showcolStatusOpened()
			{
				super.row.showOpened(3);
			}
			public void setTooltipForcolStatus(String value)
			{
				super.row.setTooltip(3, value);
			}
			public String getcolStatus()
			{
				return (String)super.row.get(3);
			}
			public void setcolStatus(String value)
			{
				super.row.set(3, value);
			}
			public void setCellcolStatusTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public void setcolResolvedReadOnly(boolean value)
			{
				super.row.setReadOnly(4, value);
			}
			public boolean iscolResolvedReadOnly()
			{
				return super.row.isReadOnly(4);
			}
			public void showcolResolvedOpened()
			{
				super.row.showOpened(4);
			}
			public void setTooltipForcolResolved(String value)
			{
				super.row.setTooltip(4, value);
			}
			public String getcolResolved()
			{
				return (String)super.row.get(4);
			}
			public void setcolResolved(String value)
			{
				super.row.set(4, value);
			}
			public void setCellcolResolvedTooltip(String value)
			{
				super.row.setTooltip(4, value);
			}
			public void setColSourceReadOnly(boolean value)
			{
				super.row.setReadOnly(5, value);
			}
			public boolean isColSourceReadOnly()
			{
				return super.row.isReadOnly(5);
			}
			public void showColSourceOpened()
			{
				super.row.showOpened(5);
			}
			public void setTooltipForColSource(String value)
			{
				super.row.setTooltip(5, value);
			}
			public String getColSource()
			{
				return (String)super.row.get(5);
			}
			public void setColSource(String value)
			{
				super.row.set(5, value);
			}
			public void setCellColSourceTooltip(String value)
			{
				super.row.setTooltip(5, value);
			}
			public void setcolHasAuditReadOnly(boolean value)
			{
				super.row.setReadOnly(6, value);
			}
			public boolean iscolHasAuditReadOnly()
			{
				return super.row.isReadOnly(6);
			}
			public void showcolHasAuditOpened()
			{
				super.row.showOpened(6);
			}
			public void setTooltipForcolHasAudit(String value)
			{
				super.row.setTooltip(6, value);
			}
			public ims.framework.utils.Image getcolHasAudit()
			{
				return (ims.framework.utils.Image)super.row.get(6);
			}
			public void setcolHasAudit(ims.framework.utils.Image value)
			{
				super.row.set(6, value);
			}
			public void setCellcolHasAuditTooltip(String value)
			{
				super.row.setTooltip(6, value);
			}
			public ims.vo.ValueObject getValue()
			{
				return (ims.vo.ValueObject)super.row.getValue();
			}
			public void setValue(ims.vo.ValueObject value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdDiagnosisRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdDiagnosisRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdDiagnosisRow get(int index)
			{
				return new grdDiagnosisRow(super.collection.get(index));
			}
			public grdDiagnosisRow newRow()
			{
				return new grdDiagnosisRow(super.collection.newRow());
			}
			public grdDiagnosisRow newRow(boolean autoSelect)
			{
				return new grdDiagnosisRow(super.collection.newRow(autoSelect));
			}
			public grdDiagnosisRow newRowAt(int index)
			{
				return new grdDiagnosisRow(super.collection.newRowAt(index));
			}
			public grdDiagnosisRow newRowAt(int index, boolean autoSelect)
			{
				return new grdDiagnosisRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdDiagnosisGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
			{
				super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
			}
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.vo.ValueObject[] getValues()
			{
				ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.vo.ValueObject getValue()
			{
				return (ims.vo.ValueObject)super.grid.getValue();
			}
			public void setValue(ims.vo.ValueObject value)
			{
				super.grid.setValue(value);
			}
			public grdDiagnosisRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdDiagnosisRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdDiagnosisRowCollection getRows()
			{
				return new grdDiagnosisRowCollection(super.grid.getRows());
			}
			public grdDiagnosisRow getRowByValue(ims.vo.ValueObject value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdDiagnosisRow(row);
			}
			public void setcolImageHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolImageHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolTextHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolTextHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setcolOnsetHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getcolOnsetHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setcolStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getcolStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public void setcolResolvedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(4, value);
			}
			public String getcolResolvedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(4);
			}
			public void setColSourceHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(5, value);
			}
			public String getColSourceHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(5);
			}
			public void setcolHasAuditHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(6, value);
			}
			public String getcolHasAuditHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(6);
			}
		}
		public static class grdProcedureRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdProcedureRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColImageReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColImageReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColImageOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForColImage(String value)
			{
				super.row.setTooltip(0, value);
			}
			public ims.framework.utils.Image getColImage()
			{
				return (ims.framework.utils.Image)super.row.get(0);
			}
			public void setColImage(ims.framework.utils.Image value)
			{
				super.row.set(0, value);
			}
			public void setCellColImageTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColTextReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColTextReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColTextOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForColText(String value)
			{
				super.row.setTooltip(1, value);
			}
			public String getColText()
			{
				return (String)super.row.get(1);
			}
			public void setColText(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColTextTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColStatusReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColStatusOpened()
			{
				super.row.showOpened(2);
			}
			public void setTooltipForColStatus(String value)
			{
				super.row.setTooltip(2, value);
			}
			public String getColStatus()
			{
				return (String)super.row.get(2);
			}
			public void setColStatus(String value)
			{
				super.row.set(2, value);
			}
			public void setCellColStatusTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColDatePerformedReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColDatePerformedReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColDatePerformedOpened()
			{
				super.row.showOpened(3);
			}
			public void setTooltipForColDatePerformed(String value)
			{
				super.row.setTooltip(3, value);
			}
			public String getColDatePerformed()
			{
				return (String)super.row.get(3);
			}
			public void setColDatePerformed(String value)
			{
				super.row.set(3, value);
			}
			public void setCellColDatePerformedTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public void setcolHasAuditReadOnly(boolean value)
			{
				super.row.setReadOnly(4, value);
			}
			public boolean iscolHasAuditReadOnly()
			{
				return super.row.isReadOnly(4);
			}
			public void showcolHasAuditOpened()
			{
				super.row.showOpened(4);
			}
			public void setTooltipForcolHasAudit(String value)
			{
				super.row.setTooltip(4, value);
			}
			public ims.framework.utils.Image getcolHasAudit()
			{
				return (ims.framework.utils.Image)super.row.get(4);
			}
			public void setcolHasAudit(ims.framework.utils.Image value)
			{
				super.row.set(4, value);
			}
			public void setCellcolHasAuditTooltip(String value)
			{
				super.row.setTooltip(4, value);
			}
			public ims.vo.ValueObject getValue()
			{
				return (ims.vo.ValueObject)super.row.getValue();
			}
			public void setValue(ims.vo.ValueObject value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdProcedureRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdProcedureRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdProcedureRow get(int index)
			{
				return new grdProcedureRow(super.collection.get(index));
			}
			public grdProcedureRow newRow()
			{
				return new grdProcedureRow(super.collection.newRow());
			}
			public grdProcedureRow newRow(boolean autoSelect)
			{
				return new grdProcedureRow(super.collection.newRow(autoSelect));
			}
			public grdProcedureRow newRowAt(int index)
			{
				return new grdProcedureRow(super.collection.newRowAt(index));
			}
			public grdProcedureRow newRowAt(int index, boolean autoSelect)
			{
				return new grdProcedureRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdProcedureGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
			{
				super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
			}
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.vo.ValueObject[] getValues()
			{
				ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.vo.ValueObject getValue()
			{
				return (ims.vo.ValueObject)super.grid.getValue();
			}
			public void setValue(ims.vo.ValueObject value)
			{
				super.grid.setValue(value);
			}
			public grdProcedureRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdProcedureRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdProcedureRowCollection getRows()
			{
				return new grdProcedureRowCollection(super.grid.getRows());
			}
			public grdProcedureRow getRowByValue(ims.vo.ValueObject value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdProcedureRow(row);
			}
			public void setColImageHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColImageHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColTextHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColTextHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColDatePerformedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColDatePerformedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public void setcolHasAuditHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(4, value);
			}
			public String getcolHasAuditHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(4);
			}
		}
	
		public static class GroupProcedureRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 584, 24, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Performed Procedures", startTabIndex.intValue() + 21);
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 744, 24, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "All", startTabIndex.intValue() + 22);
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 418, 24, 142, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Planned Procedures", startTabIndex.intValue() + 19);
			}
			public void setText(GroupProcedureEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupProcedureEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupProcedureEnumeration.None;
					case 0: return GroupProcedureEnumeration.rdoPerformedProcedure;
					case 1: return GroupProcedureEnumeration.rdoAllProc;
					case 2: return GroupProcedureEnumeration.rdoPlannedProcedure;
				}
				return null;
			}
			public void setValue(GroupProcedureEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupProcedureEnumeration.None.id);
			}
			public boolean isEnabled(GroupProcedureEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupProcedureEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupProcedureEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupProcedureEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupProcedureEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupProcedureEnumeration None = new GroupProcedureEnumeration(-1);
			public static GroupProcedureEnumeration rdoPerformedProcedure = new GroupProcedureEnumeration(0);
			public static GroupProcedureEnumeration rdoAllProc = new GroupProcedureEnumeration(1);
			public static GroupProcedureEnumeration rdoPlannedProcedure = new GroupProcedureEnumeration(2);
			private GroupProcedureEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupProcedureEnumeration)o).id;
			}
			private int id;
		}
	
		public static class GroupDiagnosisRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 331, 24, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "All", startTabIndex.intValue() + 17);
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 24, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "Diagnosis", startTabIndex.intValue() + 11);
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 248, 24, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(2, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Problems", startTabIndex.intValue() + 16);
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 128, 24, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(3, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "Complications", startTabIndex.intValue() + 14);
			}
			public void setText(GroupDiagnosisEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupDiagnosisEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupDiagnosisEnumeration.None;
					case 0: return GroupDiagnosisEnumeration.rdoAllDiag;
					case 1: return GroupDiagnosisEnumeration.rdoDiagnosis;
					case 2: return GroupDiagnosisEnumeration.rdoProblems;
					case 3: return GroupDiagnosisEnumeration.rdoComplications;
				}
				return null;
			}
			public void setValue(GroupDiagnosisEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupDiagnosisEnumeration.None.id);
			}
			public boolean isEnabled(GroupDiagnosisEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupDiagnosisEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupDiagnosisEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupDiagnosisEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupDiagnosisEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupDiagnosisEnumeration None = new GroupDiagnosisEnumeration(-1);
			public static GroupDiagnosisEnumeration rdoAllDiag = new GroupDiagnosisEnumeration(0);
			public static GroupDiagnosisEnumeration rdoDiagnosis = new GroupDiagnosisEnumeration(1);
			public static GroupDiagnosisEnumeration rdoProblems = new GroupDiagnosisEnumeration(2);
			public static GroupDiagnosisEnumeration rdoComplications = new GroupDiagnosisEnumeration(3);
			private GroupDiagnosisEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupDiagnosisEnumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 384, 296, ims.framework.enumerations.ControlAnchoring.ALL);
			Grid m_grdDiagnosisTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuPatSummaryDiagComp, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdDiagnosisTemp);
			grdDiagnosisGrid grdDiagnosis = (grdDiagnosisGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisGrid.class, m_grdDiagnosisTemp);
			grdDiagnosis.addImageColumn(" ", 0, 0, 20, false, 0);
			grdDiagnosis.addStringColumn("Description", 0, 0, 115, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdDiagnosis.addStringColumn("Onset", 0, 0, 65, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdDiagnosis.addStringColumn("Status", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdDiagnosis.addStringColumn("Resolved", 0, 0, 65, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdDiagnosis.addStringColumn("Source", 0, 0, 83, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdDiagnosis.addImageColumn(" ", 0, 1, -1, true, 0);
			super.addGrid(grdDiagnosis);
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 400, 48, 400, 296, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			Grid m_grdProcedureTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuPatSummaryProc, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdProcedureTemp);
			grdProcedureGrid grdProcedure = (grdProcedureGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProcedureGrid.class, m_grdProcedureTemp);
			grdProcedure.addImageColumn(" ", 0, 0, 20, false, 0);
			grdProcedure.addStringColumn("Description", 0, 0, 115, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdProcedure.addStringColumn("Status", 0, 0, 115, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdProcedure.addStringColumn("Date", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdProcedure.addImageColumn(" ", 0, 1, -1, true, 0);
			super.addGrid(grdProcedure);
	
			// Image Buttons Controls
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 568, 25, 12, 12, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.COE.Orange, form_images_local.COE.Orange, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 400, 25, 12, 12, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.COE.DarkCyan, form_images_local.COE.DarkCyan, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 232, 25, 12, 12, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.COE.BlueViolet, form_images_local.COE.BlueViolet, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 112, 25, 12, 12, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.COE.LightSkyBlue, form_images_local.COE.LightSkyBlue, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 25, 12, 12, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.COE.Blue, form_images_local.COE.Blue, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	
			// RadioButton Controls
			RadioButton tmpGroupProcedure = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(0), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE});
			super.addControl(tmpGroupProcedure);
			GroupProcedureRadioButton GroupProcedure = (GroupProcedureRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupProcedureRadioButton.class, tmpGroupProcedure);
			GroupProcedure.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupProcedure);
			RadioButton tmpGroupDiagnosis = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroupDiagnosis);
			GroupDiagnosisRadioButton GroupDiagnosis = (GroupDiagnosisRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupDiagnosisRadioButton.class, tmpGroupDiagnosis);
			GroupDiagnosis.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupDiagnosis);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public grdDiagnosisGrid grdDiagnosis()
		{
			return (grdDiagnosisGrid)super.getGrid(0);
		}
		public grdProcedureGrid grdProcedure()
		{
			return (grdProcedureGrid)super.getGrid(1);
		}
		public ImageButton imbPerformed()
		{
			return (ImageButton)super.getControl(2);
		}
		public ImageButton imbProc()
		{
			return (ImageButton)super.getControl(3);
		}
		public ImageButton imbProb()
		{
			return (ImageButton)super.getControl(4);
		}
		public ImageButton imbComp()
		{
			return (ImageButton)super.getControl(5);
		}
		public ImageButton imbDia()
		{
			return (ImageButton)super.getControl(6);
		}
		public GroupProcedureRadioButton GroupProcedure()
		{
			return (GroupProcedureRadioButton)super.getRadioButton(0);
		}
		public GroupDiagnosisRadioButton GroupDiagnosis()
		{
			return (GroupDiagnosisRadioButton)super.getRadioButton(1);
		}
	}
	public static class cmbContextComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(String value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(String value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(String value)
		{
			return super.control.removeRow(value);
		}
		public String getValue()
		{
			return (String)super.control.getValue();
		}
		public void setValue(String value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalNotesVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalNotesVo' of the global context variable 'Clinical.CurrentClinicalNote' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.clinical.vo.ContextFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.clinical.vo.ContextFilterVo' of the global context variable 'Clinical.ContextFilter' is not supported.");
		if(!context.isValidContextType(Integer.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Integer' of the global context variable 'Core.CurrentCareContext.ContextType' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuClinicalContactsList = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuClinicalContactsListNewCareGroupingItem = factory.createMenuItem(startControlID.intValue() + 1, "New Problem Group", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860001)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListNewCareGroupingItem);
		contextMenus.contextMenuClinicalContactsListEditCareGroupingItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Problem Group", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860002)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListEditCareGroupingItem);
		contextMenus.contextMenuClinicalContactsListNewEpisodeOfCareItem = factory.createMenuItem(startControlID.intValue() + 3, "New Episode of Care", true, false, new Integer(102149), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860003)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListNewEpisodeOfCareItem);
		contextMenus.contextMenuClinicalContactsListEditEpisodeofCareItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit Episode of Care", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860004)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListEditEpisodeofCareItem);
		contextMenus.contextMenuClinicalContactsListAddContactContextDetailsItem = factory.createMenuItem(startControlID.intValue() + 5, "New Care Context Details", true, false, new Integer(102149), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860005)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListAddContactContextDetailsItem);
		contextMenus.contextMenuClinicalContactsListEditContactContextDetailsItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit Care Context Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860006)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListEditContactContextDetailsItem);
		contextMenus.contextMenuClinicalContactsListAddContactItem = factory.createMenuItem(startControlID.intValue() + 7, "New Clinical Contact", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860007)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListAddContactItem);
		contextMenus.contextMenuClinicalContactsListEditContactItem = factory.createMenuItem(startControlID.intValue() + 8, "Edit Clinical Contact", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860008)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListEditContactItem);
		contextMenus.contextMenuClinicalContactsListViewClinicalNotesItem = factory.createMenuItem(startControlID.intValue() + 9, "View Clinical Notes", true, false, new Integer(102282), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860009)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListViewClinicalNotesItem);
		contextMenus.contextMenuClinicalContactsListCancelCareContextItem = factory.createMenuItem(startControlID.intValue() + 10, "Cancel Care Context ", true, false, new Integer(116126), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860010)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListCancelCareContextItem);
		contextMenus.contextMenuClinicalContactsListUndoCancelCareContextItem = factory.createMenuItem(startControlID.intValue() + 11, "Undo Cancel Care Context", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860016)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListUndoCancelCareContextItem);
		contextMenus.contextMenuClinicalContactsListCancelClinicalContactItem = factory.createMenuItem(startControlID.intValue() + 12, "Cancel Clinical Contact", true, false, new Integer(116126), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860011)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListCancelClinicalContactItem);
		contextMenus.contextMenuClinicalContactsListUndoCancelClinicalContactItem = factory.createMenuItem(startControlID.intValue() + 13, "Undo Cancel Clinical Contact", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860017)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListUndoCancelClinicalContactItem);
		contextMenus.contextMenuClinicalContactsListCancelProblemGroupItem = factory.createMenuItem(startControlID.intValue() + 14, "Cancel Problem Group", true, false, new Integer(116126), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860012)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListCancelProblemGroupItem);
		contextMenus.contextMenuClinicalContactsListUndoCancelProblemGroupItem = factory.createMenuItem(startControlID.intValue() + 15, "Undo Cancel Problem Group", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860018)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListUndoCancelProblemGroupItem);
		contextMenus.contextMenuClinicalContactsListCancelEpisodeOfCareItem = factory.createMenuItem(startControlID.intValue() + 16, "Cancel Episode Of Care", true, false, new Integer(116126), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860013)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListCancelEpisodeOfCareItem);
		contextMenus.contextMenuClinicalContactsListUndoCancelEpisodeOfCareItem = factory.createMenuItem(startControlID.intValue() + 17, "Undo Cancel Episode Of Care", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860019)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListUndoCancelEpisodeOfCareItem);
		contextMenus.contextMenuClinicalContactsListViewCancelledContextsItem = factory.createMenuItem(startControlID.intValue() + 18, "View Cancelled Contexts", true, false, new Integer(102282), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860014)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListViewCancelledContextsItem);
		contextMenus.contextMenuClinicalContactsListHideCancelledContextsItem = factory.createMenuItem(startControlID.intValue() + 19, "Hide Cancelled Contexts", true, false, new Integer(102282), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(860015)))
			contextMenus.contextMenuClinicalContactsList.add(contextMenus.contextMenuClinicalContactsListHideCancelledContextsItem);
		form.registerMenu(contextMenus.contextMenuClinicalContactsList);
		contextMenus.contextMenuPatSummaryDiagComp = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuPatSummaryDiagCompVIEWItem = factory.createMenuItem(startControlID.intValue() + 20, "View", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(970001)))
			contextMenus.contextMenuPatSummaryDiagComp.add(contextMenus.contextMenuPatSummaryDiagCompVIEWItem);
		contextMenus.contextMenuPatSummaryDiagCompVIEWLINKSDIALOGItem = factory.createMenuItem(startControlID.intValue() + 21, "View Associations on Dialog", true, false, new Integer(101128), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(970002)))
			contextMenus.contextMenuPatSummaryDiagComp.add(contextMenus.contextMenuPatSummaryDiagCompVIEWLINKSDIALOGItem);
		contextMenus.contextMenuPatSummaryDiagCompDISPLAYLINKSSUMMARYItem = factory.createMenuItem(startControlID.intValue() + 22, "Display Associations on Summary", true, false, new Integer(103138), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(970003)))
			contextMenus.contextMenuPatSummaryDiagComp.add(contextMenus.contextMenuPatSummaryDiagCompDISPLAYLINKSSUMMARYItem);
		contextMenus.contextMenuPatSummaryDiagCompNEWDIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 23, "New Diagnosis", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(970004)))
			contextMenus.contextMenuPatSummaryDiagComp.add(contextMenus.contextMenuPatSummaryDiagCompNEWDIAGNOSISItem);
		contextMenus.contextMenuPatSummaryDiagCompNEWPROBLEMItem = factory.createMenuItem(startControlID.intValue() + 24, "New Problem", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(970005)))
			contextMenus.contextMenuPatSummaryDiagComp.add(contextMenus.contextMenuPatSummaryDiagCompNEWPROBLEMItem);
		form.registerMenu(contextMenus.contextMenuPatSummaryDiagComp);
		contextMenus.contextMenuPatSummaryProc = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuPatSummaryProcVIEWItem = factory.createMenuItem(startControlID.intValue() + 25, "View", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1330001)))
			contextMenus.contextMenuPatSummaryProc.add(contextMenus.contextMenuPatSummaryProcVIEWItem);
		contextMenus.contextMenuPatSummaryProcVIEWLINKSDIALOGItem = factory.createMenuItem(startControlID.intValue() + 26, "View Associations on Dialog", true, false, new Integer(101128), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1330002)))
			contextMenus.contextMenuPatSummaryProc.add(contextMenus.contextMenuPatSummaryProcVIEWLINKSDIALOGItem);
		contextMenus.contextMenuPatSummaryProcDISPLAYLINKSUMMARYItem = factory.createMenuItem(startControlID.intValue() + 27, "Display Associations on Summary", true, false, new Integer(103138), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1330003)))
			contextMenus.contextMenuPatSummaryProc.add(contextMenus.contextMenuPatSummaryProcDISPLAYLINKSUMMARYItem);
		contextMenus.contextMenuPatSummaryProcNEWPROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 28, "New Procedure", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1330004)))
			contextMenus.contextMenuPatSummaryProc.add(contextMenus.contextMenuPatSummaryProcNEWPROCEDUREItem);
		form.registerMenu(contextMenus.contextMenuPatSummaryProc);


		// Container Clasess
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 816, 368, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnSummary = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "", new Boolean(true)});
		addControl(m_ctnSummary);
		ctnSummaryContainer ctnSummary = (ctnSummaryContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnSummaryContainer.class, m_ctnSummary, factory);
		ims.framework.utils.SizeInfo m_ctnSummaryDesignSize = new ims.framework.utils.SizeInfo(816, 368);
		ims.framework.utils.SizeInfo m_ctnSummaryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
		ctnSummary.setContext(form, appForm, m_ctnSummary, loader, this.getImages(), contextMenus, startControlID, m_ctnSummaryDesignSize, m_ctnSummaryRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnSummary);

		// Label Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 551, 13, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 358, 13, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 144, 13, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Context:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 736, 600, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "New ICP", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 120, 616, 128, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Search Workflow ID", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 608, 100, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 604, 11, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 424, 11, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 200, 11, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbContextTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbContextTemp);
		cmbContextComboBox cmbContext = (cmbContextComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbContextComboBox.class, m_cmbContextTemp);
		super.addComboBox(cmbContext);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 13, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Patient View", Boolean.TRUE, null}));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 816, 176, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuClinicalContactsList, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 804, 8, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear Search Criteria and Results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 770, 8, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search using given criteria", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnSummaryContainer ctnSummary()
	{
		return (ctnSummaryContainer)super.getContainer(0);
	}
	public Button btnNewICP()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSearchWorkflowID()
	{
		return (Button)super.getControl(5);
	}
	public TextBox txtWorkflowID()
	{
		return (TextBox)super.getControl(6);
	}
	public DateControl dteDateTo()
	{
		return (DateControl)super.getControl(7);
	}
	public DateControl dteDateFrom()
	{
		return (DateControl)super.getControl(8);
	}
	public cmbContextComboBox cmbContext()
	{
		return (cmbContextComboBox)super.getComboBox(0);
	}
	public CheckBox chkPatientView()
	{
		return (CheckBox)super.getControl(10);
	}
	public DynamicGrid dyngrdList()
	{
		return (DynamicGrid)super.getControl(11);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(12);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(13);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Core = new CoreForms();
			Therapies = new TherapiesForms();
			ICP = new ICPForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				Procedures = new LocalFormName(123119);
				PatientProblems = new LocalFormName(123120);
				DiagnosisComplications = new LocalFormName(123117);
				ClinicalDiAssociations = new LocalFormName(123121);
				ClinicalNoteDrawing = new LocalFormName(102177);
				ClinicalNoteDrawingDialog = new LocalFormName(102175);
				ClinicalNotesDialog = new LocalFormName(102176);
				DiagnosisComplications_Dialog = new LocalFormName(123130);
				PatientProblems_Dialog = new LocalFormName(123129);
				Procedures_Dialog = new LocalFormName(123134);
			}
			public final FormName Procedures;
			public final FormName PatientProblems;
			public final FormName DiagnosisComplications;
			public final FormName ClinicalDiAssociations;
			public final FormName ClinicalNoteDrawing;
			public final FormName ClinicalNoteDrawingDialog;
			public final FormName ClinicalNotesDialog;
			public final FormName DiagnosisComplications_Dialog;
			public final FormName PatientProblems_Dialog;
			public final FormName Procedures_Dialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				CareSpellDialog = new LocalFormName(102216);
				CareContextHistoryDialog = new LocalFormName(102384);
				EpisodeOfCareHistoryDialog = new LocalFormName(102385);
			}
			public final FormName CareSpellDialog;
			public final FormName CareContextHistoryDialog;
			public final FormName EpisodeOfCareHistoryDialog;
		}
		public final class TherapiesForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private TherapiesForms()
			{
				SOAPNoteDialog = new LocalFormName(112149);
			}
			public final FormName SOAPNoteDialog;
		}
		public final class ICPForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPForms()
			{
				ICPPatientSelect = new LocalFormName(118117);
			}
			public final FormName ICPPatientSelect;
		}

		public ClinicalForms Clinical;
		public CoreForms Core;
		public TherapiesForms Therapies;
		public ICPForms ICP;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			COE = new COEImages();
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class COEImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEImages()
			{
				Blue = new ImageHelper(101100, "Images/COE/blue12x12.gif", new Integer(12), new Integer(12));
				LightSkyBlue = new ImageHelper(101105, "Images/COE/lightblue12x12.gif", new Integer(12), new Integer(12));
				BlueViolet = new ImageHelper(101101, "Images/COE/violet12x12.gif", new Integer(12), new Integer(12));
				DarkCyan = new ImageHelper(101102, "Images/COE/darkcyan12x12.gif", new Integer(12), new Integer(12));
				LightSeaGreen = new ImageHelper(101104, "Images/COE/LightSeaGreen.gif", new Integer(12), new Integer(12));
				Turquoise = new ImageHelper(101108, "Images/COE/Turquoise.gif", new Integer(12), new Integer(12));
				Orange = new ImageHelper(101106, "Images/COE/orange12x12.gif", new Integer(12), new Integer(12));
				OrangeBoth = new ImageHelper(101125, "Images/COE/OrangeBoth.gif", new Integer(12), new Integer(12));
				OrangeLeft = new ImageHelper(101126, "Images/COE/OrangeLeft.gif", new Integer(12), new Integer(12));
				OrangeRight = new ImageHelper(101127, "Images/COE/OrangeRight.gif", new Integer(12), new Integer(12));
				DarkCyanLeft = new ImageHelper(101121, "Images/COE/DarkCyanLeft.gif", new Integer(12), new Integer(12));
				BlueBoth = new ImageHelper(101113, "Images/COE/BlueBoth.gif", new Integer(12), new Integer(12));
				BlueLeft = new ImageHelper(101117, "Images/COE/BlueLeft.gif", new Integer(12), new Integer(12));
				LightSkyBlueBoth = new ImageHelper(101115, "Images/COE/LightSkyBlueBoth.gif", new Integer(12), new Integer(12));
				LightSkyBlueLeft = new ImageHelper(101124, "Images/COE/LightSkyBlueLeft.gif", new Integer(12), new Integer(12));
				LightSkyBlueRight = new ImageHelper(101123, "Images/COE/LightSkyBlueRight.gif", new Integer(12), new Integer(12));
				BlueRight = new ImageHelper(101118, "Images/COE/BlueRight.gif", new Integer(12), new Integer(12));
				DarkCyanBoth = new ImageHelper(101116, "Images/COE/DarkCyanBoth.gif", new Integer(12), new Integer(12));
				DarkCyanRight = new ImageHelper(101122, "Images/COE/DarkCyanRight.gif", new Integer(12), new Integer(12));
				BlueRoundSquare = new ImageHelper(101138, "Images/COE/bluesquare.gif", new Integer(14), new Integer(14));
				LightBlueRoundSquare = new ImageHelper(101139, "Images/COE/lightbluesquare.gif", new Integer(14), new Integer(14));
				VioletRoundSquare = new ImageHelper(101140, "Images/COE/violetsquare.gif", new Integer(14), new Integer(14));
			}
			public final ims.framework.utils.Image Blue;
			public final ims.framework.utils.Image LightSkyBlue;
			public final ims.framework.utils.Image BlueViolet;
			public final ims.framework.utils.Image DarkCyan;
			public final ims.framework.utils.Image LightSeaGreen;
			public final ims.framework.utils.Image Turquoise;
			public final ims.framework.utils.Image Orange;
			public final ims.framework.utils.Image OrangeBoth;
			public final ims.framework.utils.Image OrangeLeft;
			public final ims.framework.utils.Image OrangeRight;
			public final ims.framework.utils.Image DarkCyanLeft;
			public final ims.framework.utils.Image BlueBoth;
			public final ims.framework.utils.Image BlueLeft;
			public final ims.framework.utils.Image LightSkyBlueBoth;
			public final ims.framework.utils.Image LightSkyBlueLeft;
			public final ims.framework.utils.Image LightSkyBlueRight;
			public final ims.framework.utils.Image BlueRight;
			public final ims.framework.utils.Image DarkCyanBoth;
			public final ims.framework.utils.Image DarkCyanRight;
			public final ims.framework.utils.Image BlueRoundSquare;
			public final ims.framework.utils.Image LightBlueRoundSquare;
			public final ims.framework.utils.Image VioletRoundSquare;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				MemberOfStaff = new ImageHelper(103133, "Images/Admin/User-Offline.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image MemberOfStaff;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				S_Red = new ImageHelper(102230, "Images/Core/S-red.gif", new Integer(16), new Integer(16));
				CareSpell = new ImageHelper(102253, "Images/Core/CareSpell.gif", new Integer(16), new Integer(16));
				CareContext = new ImageHelper(102252, "Images/Core/CareContext.gif", new Integer(16), new Integer(16));
				EpisodeOfCare = new ImageHelper(102255, "Images/Core/EpisodeOfCare.gif", new Integer(16), new Integer(16));
				AI = new ImageHelper(102264, "Images/Core/ai.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				History16 = new ImageHelper(102555, "Images/Core/history_context_menu.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image S_Red;
			public final ims.framework.utils.Image CareSpell;
			public final ims.framework.utils.Image CareContext;
			public final ims.framework.utils.Image EpisodeOfCare;
			public final ims.framework.utils.Image AI;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image EditDisabled;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image History16;
		}
		public final COEImages COE;
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ParentEnded = new ims.framework.ContextVariable("ParentEnded", prefix + "_lv_Clinical.Patient_Summary.__internal_x_context__ParentEnded_" + componentIdentifier + "");
			cxl_IsDisplayAssociationsOnSummary = new ims.framework.ContextVariable("IsDisplayAssociationsOnSummary", prefix + "_lv_Clinical.Patient_Summary.__internal_x_context__IsDisplayAssociationsOnSummary_" + componentIdentifier + "");
			cxl_PreviousDiagnosisEpisodeOfCare = new ims.framework.ContextVariable("PreviousDiagnosisEpisodeOfCare", prefix + "_lv_Clinical.Patient_Summary.__internal_x_context__PreviousDiagnosisEpisodeOfCare_" + componentIdentifier + "");
			cxl_PreviousProcedureEpisodeOfCare = new ims.framework.ContextVariable("PreviousProcedureEpisodeOfCare", prefix + "_lv_Clinical.Patient_Summary.__internal_x_context__PreviousProcedureEpisodeOfCare_" + componentIdentifier + "");
			cxl_CareContextCollection = new ims.framework.ContextVariable("CareContextCollection", prefix + "_lv_Clinical.Patient_Summary.__internal_x_context__CareContextCollection_" + componentIdentifier + "");
			cxl_EpisodeOfCareCollection = new ims.framework.ContextVariable("EpisodeOfCareCollection", prefix + "_lv_Clinical.Patient_Summary.__internal_x_context__EpisodeOfCareCollection_" + componentIdentifier + "");
			cxl_ShowCancelledContexts = new ims.framework.ContextVariable("ShowCancelledContexts", prefix + "_lv_Clinical.Patient_Summary.__internal_x_context__ShowCancelledContexts_" + componentIdentifier + "");
		}
		
		public boolean getParentEndedIsNotNull()
		{
			return !cxl_ParentEnded.getValueIsNull(context);
		}
		public Boolean getParentEnded()
		{
			return (Boolean)cxl_ParentEnded.getValue(context);
		}
		public void setParentEnded(Boolean value)
		{
			cxl_ParentEnded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ParentEnded = null;
		public boolean getIsDisplayAssociationsOnSummaryIsNotNull()
		{
			return !cxl_IsDisplayAssociationsOnSummary.getValueIsNull(context);
		}
		public Boolean getIsDisplayAssociationsOnSummary()
		{
			return (Boolean)cxl_IsDisplayAssociationsOnSummary.getValue(context);
		}
		public void setIsDisplayAssociationsOnSummary(Boolean value)
		{
			cxl_IsDisplayAssociationsOnSummary.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsDisplayAssociationsOnSummary = null;
		public boolean getPreviousDiagnosisEpisodeOfCareIsNotNull()
		{
			return !cxl_PreviousDiagnosisEpisodeOfCare.getValueIsNull(context);
		}
		public ims.core.admin.vo.EpisodeOfCareRefVo getPreviousDiagnosisEpisodeOfCare()
		{
			return (ims.core.admin.vo.EpisodeOfCareRefVo)cxl_PreviousDiagnosisEpisodeOfCare.getValue(context);
		}
		public void setPreviousDiagnosisEpisodeOfCare(ims.core.admin.vo.EpisodeOfCareRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PreviousDiagnosisEpisodeOfCare' RefVo context variable.");
			if(value == null)
				cxl_PreviousDiagnosisEpisodeOfCare.setValue(context, null);
			else
				cxl_PreviousDiagnosisEpisodeOfCare.setValue(context, new ims.core.admin.vo.EpisodeOfCareRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PreviousDiagnosisEpisodeOfCare = null;
		public boolean getPreviousProcedureEpisodeOfCareIsNotNull()
		{
			return !cxl_PreviousProcedureEpisodeOfCare.getValueIsNull(context);
		}
		public ims.core.admin.vo.EpisodeOfCareRefVo getPreviousProcedureEpisodeOfCare()
		{
			return (ims.core.admin.vo.EpisodeOfCareRefVo)cxl_PreviousProcedureEpisodeOfCare.getValue(context);
		}
		public void setPreviousProcedureEpisodeOfCare(ims.core.admin.vo.EpisodeOfCareRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PreviousProcedureEpisodeOfCare' RefVo context variable.");
			if(value == null)
				cxl_PreviousProcedureEpisodeOfCare.setValue(context, null);
			else
				cxl_PreviousProcedureEpisodeOfCare.setValue(context, new ims.core.admin.vo.EpisodeOfCareRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PreviousProcedureEpisodeOfCare = null;
		public boolean getCareContextCollectionIsNotNull()
		{
			return !cxl_CareContextCollection.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVoCollection getCareContextCollection()
		{
			return (ims.core.admin.vo.CareContextRefVoCollection)cxl_CareContextCollection.getValue(context);
		}
		public void setCareContextCollection(ims.core.admin.vo.CareContextRefVoCollection value)
		{
			if(value != null)
			{
				for(int x = 0; x < value.size(); x++)
				{
					if(value.get(x) != null && (value.get(x).getBoId() == null || value.get(x).getBoId().intValue() < 1))
						throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id found in 'CareContextCollection' RefVoCollection context variable.");
				}
			}
			if(value == null)
				cxl_CareContextCollection.setValue(context, null);
			else
			{
				ims.core.admin.vo.CareContextRefVoCollection copy = new ims.core.admin.vo.CareContextRefVoCollection();
				for(int x = 0; x < value.size(); x++)
				{
					copy.add(value.get(x));
				}
				value.clear();
				for(int x = 0; x < copy.size(); x++)
				{
					if(copy.get(x) == null)
						value.add(null);
					else
						value.add(new ims.core.admin.vo.CareContextRefVo(copy.get(x).getBoId(), copy.get(x).getBoVersion()));
				}
				cxl_CareContextCollection.setValue(context, value);
			}
		}
		private ims.framework.ContextVariable cxl_CareContextCollection = null;
		public boolean getEpisodeOfCareCollectionIsNotNull()
		{
			return !cxl_EpisodeOfCareCollection.getValueIsNull(context);
		}
		public ims.core.admin.vo.EpisodeOfCareRefVoCollection getEpisodeOfCareCollection()
		{
			return (ims.core.admin.vo.EpisodeOfCareRefVoCollection)cxl_EpisodeOfCareCollection.getValue(context);
		}
		public void setEpisodeOfCareCollection(ims.core.admin.vo.EpisodeOfCareRefVoCollection value)
		{
			if(value != null)
			{
				for(int x = 0; x < value.size(); x++)
				{
					if(value.get(x) != null && (value.get(x).getBoId() == null || value.get(x).getBoId().intValue() < 1))
						throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id found in 'EpisodeOfCareCollection' RefVoCollection context variable.");
				}
			}
			if(value == null)
				cxl_EpisodeOfCareCollection.setValue(context, null);
			else
			{
				ims.core.admin.vo.EpisodeOfCareRefVoCollection copy = new ims.core.admin.vo.EpisodeOfCareRefVoCollection();
				for(int x = 0; x < value.size(); x++)
				{
					copy.add(value.get(x));
				}
				value.clear();
				for(int x = 0; x < copy.size(); x++)
				{
					if(copy.get(x) == null)
						value.add(null);
					else
						value.add(new ims.core.admin.vo.EpisodeOfCareRefVo(copy.get(x).getBoId(), copy.get(x).getBoVersion()));
				}
				cxl_EpisodeOfCareCollection.setValue(context, value);
			}
		}
		private ims.framework.ContextVariable cxl_EpisodeOfCareCollection = null;
		public boolean getShowCancelledContextsIsNotNull()
		{
			return !cxl_ShowCancelledContexts.getValueIsNull(context);
		}
		public Boolean getShowCancelledContexts()
		{
			return (Boolean)cxl_ShowCancelledContexts.getValue(context);
		}
		public void setShowCancelledContexts(Boolean value)
		{
			cxl_ShowCancelledContexts.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowCancelledContexts = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class ClinicalContactsList implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NewCareGrouping = 1;
			public static final int EditCareGrouping = 2;
			public static final int NewEpisodeOfCare = 3;
			public static final int EditEpisodeofCare = 4;
			public static final int AddContactContextDetails = 5;
			public static final int EditContactContextDetails = 6;
			public static final int AddContact = 7;
			public static final int EditContact = 8;
			public static final int ViewClinicalNotes = 9;
			public static final int CancelCareContext = 10;
			public static final int UndoCancelCareContext = 11;
			public static final int CancelClinicalContact = 12;
			public static final int UndoCancelClinicalContact = 13;
			public static final int CancelProblemGroup = 14;
			public static final int UndoCancelProblemGroup = 15;
			public static final int CancelEpisodeOfCare = 16;
			public static final int UndoCancelEpisodeOfCare = 17;
			public static final int ViewCancelledContexts = 18;
			public static final int HideCancelledContexts = 19;
		}
		public void disableAllClinicalContactsListMenuItems()
		{
			this.contextMenuClinicalContactsListNewCareGroupingItem.setEnabled(false);
			this.contextMenuClinicalContactsListEditCareGroupingItem.setEnabled(false);
			this.contextMenuClinicalContactsListNewEpisodeOfCareItem.setEnabled(false);
			this.contextMenuClinicalContactsListEditEpisodeofCareItem.setEnabled(false);
			this.contextMenuClinicalContactsListAddContactContextDetailsItem.setEnabled(false);
			this.contextMenuClinicalContactsListEditContactContextDetailsItem.setEnabled(false);
			this.contextMenuClinicalContactsListAddContactItem.setEnabled(false);
			this.contextMenuClinicalContactsListEditContactItem.setEnabled(false);
			this.contextMenuClinicalContactsListViewClinicalNotesItem.setEnabled(false);
			this.contextMenuClinicalContactsListCancelCareContextItem.setEnabled(false);
			this.contextMenuClinicalContactsListUndoCancelCareContextItem.setEnabled(false);
			this.contextMenuClinicalContactsListCancelClinicalContactItem.setEnabled(false);
			this.contextMenuClinicalContactsListUndoCancelClinicalContactItem.setEnabled(false);
			this.contextMenuClinicalContactsListCancelProblemGroupItem.setEnabled(false);
			this.contextMenuClinicalContactsListUndoCancelProblemGroupItem.setEnabled(false);
			this.contextMenuClinicalContactsListCancelEpisodeOfCareItem.setEnabled(false);
			this.contextMenuClinicalContactsListUndoCancelEpisodeOfCareItem.setEnabled(false);
			this.contextMenuClinicalContactsListViewCancelledContextsItem.setEnabled(false);
			this.contextMenuClinicalContactsListHideCancelledContextsItem.setEnabled(false);
		}
		public void hideAllClinicalContactsListMenuItems()
		{
			this.contextMenuClinicalContactsListNewCareGroupingItem.setVisible(false);
			this.contextMenuClinicalContactsListEditCareGroupingItem.setVisible(false);
			this.contextMenuClinicalContactsListNewEpisodeOfCareItem.setVisible(false);
			this.contextMenuClinicalContactsListEditEpisodeofCareItem.setVisible(false);
			this.contextMenuClinicalContactsListAddContactContextDetailsItem.setVisible(false);
			this.contextMenuClinicalContactsListEditContactContextDetailsItem.setVisible(false);
			this.contextMenuClinicalContactsListAddContactItem.setVisible(false);
			this.contextMenuClinicalContactsListEditContactItem.setVisible(false);
			this.contextMenuClinicalContactsListViewClinicalNotesItem.setVisible(false);
			this.contextMenuClinicalContactsListCancelCareContextItem.setVisible(false);
			this.contextMenuClinicalContactsListUndoCancelCareContextItem.setVisible(false);
			this.contextMenuClinicalContactsListCancelClinicalContactItem.setVisible(false);
			this.contextMenuClinicalContactsListUndoCancelClinicalContactItem.setVisible(false);
			this.contextMenuClinicalContactsListCancelProblemGroupItem.setVisible(false);
			this.contextMenuClinicalContactsListUndoCancelProblemGroupItem.setVisible(false);
			this.contextMenuClinicalContactsListCancelEpisodeOfCareItem.setVisible(false);
			this.contextMenuClinicalContactsListUndoCancelEpisodeOfCareItem.setVisible(false);
			this.contextMenuClinicalContactsListViewCancelledContextsItem.setVisible(false);
			this.contextMenuClinicalContactsListHideCancelledContextsItem.setVisible(false);
		}
		private Menu contextMenuClinicalContactsList;
		public ReadOnlyMenuItem getClinicalContactsListNewCareGroupingItem()
		{
			return this.contextMenuClinicalContactsListNewCareGroupingItem;
		}
		private MenuItem contextMenuClinicalContactsListNewCareGroupingItem;
		public ReadOnlyMenuItem getClinicalContactsListEditCareGroupingItem()
		{
			return this.contextMenuClinicalContactsListEditCareGroupingItem;
		}
		private MenuItem contextMenuClinicalContactsListEditCareGroupingItem;
		public ReadOnlyMenuItem getClinicalContactsListNewEpisodeOfCareItem()
		{
			return this.contextMenuClinicalContactsListNewEpisodeOfCareItem;
		}
		private MenuItem contextMenuClinicalContactsListNewEpisodeOfCareItem;
		public ReadOnlyMenuItem getClinicalContactsListEditEpisodeofCareItem()
		{
			return this.contextMenuClinicalContactsListEditEpisodeofCareItem;
		}
		private MenuItem contextMenuClinicalContactsListEditEpisodeofCareItem;
		public ReadOnlyMenuItem getClinicalContactsListAddContactContextDetailsItem()
		{
			return this.contextMenuClinicalContactsListAddContactContextDetailsItem;
		}
		private MenuItem contextMenuClinicalContactsListAddContactContextDetailsItem;
		public ReadOnlyMenuItem getClinicalContactsListEditContactContextDetailsItem()
		{
			return this.contextMenuClinicalContactsListEditContactContextDetailsItem;
		}
		private MenuItem contextMenuClinicalContactsListEditContactContextDetailsItem;
		public ReadOnlyMenuItem getClinicalContactsListAddContactItem()
		{
			return this.contextMenuClinicalContactsListAddContactItem;
		}
		private MenuItem contextMenuClinicalContactsListAddContactItem;
		public ReadOnlyMenuItem getClinicalContactsListEditContactItem()
		{
			return this.contextMenuClinicalContactsListEditContactItem;
		}
		private MenuItem contextMenuClinicalContactsListEditContactItem;
		public ReadOnlyMenuItem getClinicalContactsListViewClinicalNotesItem()
		{
			return this.contextMenuClinicalContactsListViewClinicalNotesItem;
		}
		private MenuItem contextMenuClinicalContactsListViewClinicalNotesItem;
		public ReadOnlyMenuItem getClinicalContactsListCancelCareContextItem()
		{
			return this.contextMenuClinicalContactsListCancelCareContextItem;
		}
		private MenuItem contextMenuClinicalContactsListCancelCareContextItem;
		public ReadOnlyMenuItem getClinicalContactsListUndoCancelCareContextItem()
		{
			return this.contextMenuClinicalContactsListUndoCancelCareContextItem;
		}
		private MenuItem contextMenuClinicalContactsListUndoCancelCareContextItem;
		public ReadOnlyMenuItem getClinicalContactsListCancelClinicalContactItem()
		{
			return this.contextMenuClinicalContactsListCancelClinicalContactItem;
		}
		private MenuItem contextMenuClinicalContactsListCancelClinicalContactItem;
		public ReadOnlyMenuItem getClinicalContactsListUndoCancelClinicalContactItem()
		{
			return this.contextMenuClinicalContactsListUndoCancelClinicalContactItem;
		}
		private MenuItem contextMenuClinicalContactsListUndoCancelClinicalContactItem;
		public ReadOnlyMenuItem getClinicalContactsListCancelProblemGroupItem()
		{
			return this.contextMenuClinicalContactsListCancelProblemGroupItem;
		}
		private MenuItem contextMenuClinicalContactsListCancelProblemGroupItem;
		public ReadOnlyMenuItem getClinicalContactsListUndoCancelProblemGroupItem()
		{
			return this.contextMenuClinicalContactsListUndoCancelProblemGroupItem;
		}
		private MenuItem contextMenuClinicalContactsListUndoCancelProblemGroupItem;
		public ReadOnlyMenuItem getClinicalContactsListCancelEpisodeOfCareItem()
		{
			return this.contextMenuClinicalContactsListCancelEpisodeOfCareItem;
		}
		private MenuItem contextMenuClinicalContactsListCancelEpisodeOfCareItem;
		public ReadOnlyMenuItem getClinicalContactsListUndoCancelEpisodeOfCareItem()
		{
			return this.contextMenuClinicalContactsListUndoCancelEpisodeOfCareItem;
		}
		private MenuItem contextMenuClinicalContactsListUndoCancelEpisodeOfCareItem;
		public ReadOnlyMenuItem getClinicalContactsListViewCancelledContextsItem()
		{
			return this.contextMenuClinicalContactsListViewCancelledContextsItem;
		}
		private MenuItem contextMenuClinicalContactsListViewCancelledContextsItem;
		public ReadOnlyMenuItem getClinicalContactsListHideCancelledContextsItem()
		{
			return this.contextMenuClinicalContactsListHideCancelledContextsItem;
		}
		private MenuItem contextMenuClinicalContactsListHideCancelledContextsItem;
		public final class PatSummaryDiagComp implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int VIEW = 20;
			public static final int VIEWLINKSDIALOG = 21;
			public static final int DISPLAYLINKSSUMMARY = 22;
			public static final int NEWDIAGNOSIS = 23;
			public static final int NEWPROBLEM = 24;
		}
		public void disableAllPatSummaryDiagCompMenuItems()
		{
			this.contextMenuPatSummaryDiagCompVIEWItem.setEnabled(false);
			this.contextMenuPatSummaryDiagCompVIEWLINKSDIALOGItem.setEnabled(false);
			this.contextMenuPatSummaryDiagCompDISPLAYLINKSSUMMARYItem.setEnabled(false);
			this.contextMenuPatSummaryDiagCompNEWDIAGNOSISItem.setEnabled(false);
			this.contextMenuPatSummaryDiagCompNEWPROBLEMItem.setEnabled(false);
		}
		public void hideAllPatSummaryDiagCompMenuItems()
		{
			this.contextMenuPatSummaryDiagCompVIEWItem.setVisible(false);
			this.contextMenuPatSummaryDiagCompVIEWLINKSDIALOGItem.setVisible(false);
			this.contextMenuPatSummaryDiagCompDISPLAYLINKSSUMMARYItem.setVisible(false);
			this.contextMenuPatSummaryDiagCompNEWDIAGNOSISItem.setVisible(false);
			this.contextMenuPatSummaryDiagCompNEWPROBLEMItem.setVisible(false);
		}
		private Menu contextMenuPatSummaryDiagComp;
		public ReadOnlyMenuItem getPatSummaryDiagCompVIEWItem()
		{
			return this.contextMenuPatSummaryDiagCompVIEWItem;
		}
		private MenuItem contextMenuPatSummaryDiagCompVIEWItem;
		public ReadOnlyMenuItem getPatSummaryDiagCompVIEWLINKSDIALOGItem()
		{
			return this.contextMenuPatSummaryDiagCompVIEWLINKSDIALOGItem;
		}
		private MenuItem contextMenuPatSummaryDiagCompVIEWLINKSDIALOGItem;
		public ReadOnlyMenuItem getPatSummaryDiagCompDISPLAYLINKSSUMMARYItem()
		{
			return this.contextMenuPatSummaryDiagCompDISPLAYLINKSSUMMARYItem;
		}
		private MenuItem contextMenuPatSummaryDiagCompDISPLAYLINKSSUMMARYItem;
		public ReadOnlyMenuItem getPatSummaryDiagCompNEWDIAGNOSISItem()
		{
			return this.contextMenuPatSummaryDiagCompNEWDIAGNOSISItem;
		}
		private MenuItem contextMenuPatSummaryDiagCompNEWDIAGNOSISItem;
		public ReadOnlyMenuItem getPatSummaryDiagCompNEWPROBLEMItem()
		{
			return this.contextMenuPatSummaryDiagCompNEWPROBLEMItem;
		}
		private MenuItem contextMenuPatSummaryDiagCompNEWPROBLEMItem;
		public final class PatSummaryProc implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int VIEW = 25;
			public static final int VIEWLINKSDIALOG = 26;
			public static final int DISPLAYLINKSUMMARY = 27;
			public static final int NEWPROCEDURE = 28;
		}
		public void disableAllPatSummaryProcMenuItems()
		{
			this.contextMenuPatSummaryProcVIEWItem.setEnabled(false);
			this.contextMenuPatSummaryProcVIEWLINKSDIALOGItem.setEnabled(false);
			this.contextMenuPatSummaryProcDISPLAYLINKSUMMARYItem.setEnabled(false);
			this.contextMenuPatSummaryProcNEWPROCEDUREItem.setEnabled(false);
		}
		public void hideAllPatSummaryProcMenuItems()
		{
			this.contextMenuPatSummaryProcVIEWItem.setVisible(false);
			this.contextMenuPatSummaryProcVIEWLINKSDIALOGItem.setVisible(false);
			this.contextMenuPatSummaryProcDISPLAYLINKSUMMARYItem.setVisible(false);
			this.contextMenuPatSummaryProcNEWPROCEDUREItem.setVisible(false);
		}
		private Menu contextMenuPatSummaryProc;
		public ReadOnlyMenuItem getPatSummaryProcVIEWItem()
		{
			return this.contextMenuPatSummaryProcVIEWItem;
		}
		private MenuItem contextMenuPatSummaryProcVIEWItem;
		public ReadOnlyMenuItem getPatSummaryProcVIEWLINKSDIALOGItem()
		{
			return this.contextMenuPatSummaryProcVIEWLINKSDIALOGItem;
		}
		private MenuItem contextMenuPatSummaryProcVIEWLINKSDIALOGItem;
		public ReadOnlyMenuItem getPatSummaryProcDISPLAYLINKSUMMARYItem()
		{
			return this.contextMenuPatSummaryProcDISPLAYLINKSUMMARYItem;
		}
		private MenuItem contextMenuPatSummaryProcDISPLAYLINKSUMMARYItem;
		public ReadOnlyMenuItem getPatSummaryProcNEWPROCEDUREItem()
		{
			return this.contextMenuPatSummaryProcNEWPROCEDUREItem;
		}
		private MenuItem contextMenuPatSummaryProcNEWPROCEDUREItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[128];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.CareContextWithHistory", "BO-1004100019-ID", "ID_CareContext");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.CareContextWithHistory", "BO-1004100019-CONTEXT", "Context");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.CareContextWithHistory", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.CareContextWithHistory", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientSummary.CareSpell", "BO-1004100017-ID", "ID_CareSpell");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientSummary.CareSpell", "BO-1004100017-STARTDATE", "StartDate");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientSummary.CareSpell", "BO-1004100017-ENDDATE", "EndDate");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientSummary.CareSpell", "BO-1004100017-PATIENT", "Patient");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.EpisodeOfCareWithHistory", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Clinical.EpisodeOfCareWithHistory", "BO-1004100018-SPECIALTY", "Specialty");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.EpisodeOfCareWithHistory", "BO-1004100018-STARTDATE", "StartDate");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.EpisodeOfCareWithHistory", "BO-1004100018-ENDDATE", "EndDate");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-ID", "ID_SoapNote");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-SUBJECTIVENOTE", "SubjectiveNote");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-OBJECTIVENOTE", "ObjectiveNote");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-ANALYSISNOTE", "AnalysisNote");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-PLANNOTE", "PlanNote");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-CLINICALNOTE", "ClinicalNote");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-CARECONTEXT", "CareContext");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.ParentClinContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.ParentClinContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.ParentClinContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.ParentClinContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.ParentClinContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.ParentClinContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.ParentClinContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-SEENBY", "SeenBy");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTETYPE", "NoteType");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEW", "ForReview");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientSummary.ClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientSummary.EpisodeOfCare", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_ICP.Service", "BO-1003100032-ID", "ID_Service");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromPatientSummary", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientSummary.CareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisFromPatientSummary", "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProblemFromPatientSummary", "BO-1023100001-ID", "ID_PatientProblem");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.Patient_Summary.__internal_x_context__PreviousDiagnosisEpisodeOfCare_" + componentIdentifier, "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.Patient_Summary.__internal_x_context__PreviousProcedureEpisodeOfCare_" + componentIdentifier, "BO-1004100018-ID", "ID_EpisodeOfCare");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
