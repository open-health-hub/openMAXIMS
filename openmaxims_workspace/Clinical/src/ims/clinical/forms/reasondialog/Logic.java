//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.reasondialog;

import java.util.ArrayList;

import ims.clinical.vo.ReasonVo;
import ims.framework.enumerations.DialogResult;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;

import ims.vo.lookups.ClassHelper;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args != null )
		{
		
			Boolean activeOnly = true;
			LookupInstanceCollection instColl = null;
			Integer lookupTypeId = 0;
			
			if((args.length == 1 && args[0] != null && args[0] instanceof Integer))
			{
								
				lookupTypeId = (Integer) args[0];
				instColl = domain.getLookupService().getLookupCollection(lookupTypeId, ClassHelper.getLookupCollectionClass(lookupTypeId), ClassHelper.getLookupClass(lookupTypeId), true, activeOnly);
			}
			else if(args.length == 3 && args[0] != null && args[1] != null && args[2] != null && args[0] instanceof Integer && args[1] instanceof String && args[2] instanceof String)
			{
				lookupTypeId = (Integer) args[0];
				String Reason = (String)args[1];
				String Comment = (String) args[2];
				form.lblReason().setValue(Reason);
				form.lblComment().setValue(Comment);
				instColl = domain.getLookupService().getLookupCollection(lookupTypeId, ClassHelper.getLookupCollectionClass(lookupTypeId), ClassHelper.getLookupClass(lookupTypeId), true, activeOnly);
			}
			
			if(	instColl == null)
				return;
			
			
			LookupInstVo[] roots = instColl.getRoots();
			populateReasonCombo(roots);
						
		}
	}
	protected void populateReasonCombo(LookupInstVo[] childrens) 
	{
		form.cmbReason().clear();
		if(childrens == null)
			return;
		
		for (int i = 0; i < childrens.length; i++)
		{
			form.cmbReason().newRow(childrens[i].getID(), childrens[i].getText().toString());
		
		}
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Clinical.setReason(null);
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] uiErrors = getUiErrors();
		if (uiErrors != null)
		{
			engine.showErrors(uiErrors);
			return ;
		}
		ReasonVo reasonVo = new ReasonVo();
		reasonVo.setInstanceLookupId((Integer) form.cmbReason().getValue());
		reasonVo.setComment(form.txtComment().getValue());
		form.getGlobalContext().Clinical.setReason(reasonVo);
		engine.close(DialogResult.OK);
	}
	private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
	
		
		if(	form.cmbReason().getValue() == null)
		{
			String reason = form.lblReason().getValue().substring(0, form.lblReason().getValue().length()-1);	//remove the ":" from the label
			errors.add(reason+ " is mandatory.");
		}
		if(	form.txtComment().getValue() == null)
		{
			String comm = form.lblComment().getValue().substring(0, form.lblComment().getValue().length()-1);  //remove the ":" from the label
			errors.add(comm+ " is mandatory.");
		}
				
							
		if(errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Attendance Record", searchErrors);
			
			return searchErrors;
		}
		return null;
	}
}
