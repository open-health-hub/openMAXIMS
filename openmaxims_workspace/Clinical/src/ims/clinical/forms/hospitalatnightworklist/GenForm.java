//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.hospitalatnightworklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTypeOfRequestComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.HospitalAtNightRequestType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.HospitalAtNightRequestType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.HospitalAtNightRequestType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.HospitalAtNightRequestType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.HospitalAtNightRequestType value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.HospitalAtNightRequestType getValue()
		{
			return (ims.clinical.vo.lookups.HospitalAtNightRequestType)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.HospitalAtNightRequestType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocSiteLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocSiteLiteVo getValue()
		{
			return (ims.core.vo.LocSiteLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocSiteLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdWorklistRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdWorklistRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColNHSReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColNHSReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColNHSOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColNHS(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColNHS()
		{
			return (String)super.row.get(0);
		}
		public void setColNHS(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColNHSTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColHospitalNoReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColHospitalNoReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColHospitalNoOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColHospitalNo(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColHospitalNo()
		{
			return (String)super.row.get(1);
		}
		public void setColHospitalNo(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColHospitalNoTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColSurnameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColSurnameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColSurname(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColSurname()
		{
			return (String)super.row.get(2);
		}
		public void setColSurname(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColSurnameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColForenameReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColForenameReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColForenameOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColForename(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColForename()
		{
			return (String)super.row.get(3);
		}
		public void setColForename(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColForenameTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColSexReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColSexReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColSexOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColSex(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColSex()
		{
			return (String)super.row.get(4);
		}
		public void setColSex(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColSexTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColAgeReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColAgeReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColAgeOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColAge(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColAge()
		{
			return (String)super.row.get(5);
		}
		public void setColAge(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColAgeTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColWardReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColWardReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColWardOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColWard(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getColWard()
		{
			return (String)super.row.get(6);
		}
		public void setColWard(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColWardTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColRequestReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColRequestReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColRequestOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForColRequest(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.framework.utils.Image getColRequest()
		{
			return (ims.framework.utils.Image)super.row.get(7);
		}
		public void setColRequest(ims.framework.utils.Image value)
		{
			super.row.set(7, value);
		}
		public void setCellColRequestTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setColRequestDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean isColRequestDateTimeReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showColRequestDateTimeOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForColRequestDateTime(String value)
		{
			super.row.setTooltip(8, value);
		}
		public String getColRequestDateTime()
		{
			return (String)super.row.get(8);
		}
		public void setColRequestDateTime(String value)
		{
			super.row.set(8, value);
		}
		public void setCellColRequestDateTimeTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setColStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean isColStatusReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showColStatusOpened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForColStatus(String value)
		{
			super.row.setTooltip(9, value);
		}
		public String getColStatus()
		{
			return (String)super.row.get(9);
		}
		public void setColStatus(String value)
		{
			super.row.set(9, value);
		}
		public void setCellColStatusTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setColMEWSReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean isColMEWSReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showColMEWSOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForColMEWS(String value)
		{
			super.row.setTooltip(10, value);
		}
		public String getColMEWS()
		{
			return (String)super.row.get(10);
		}
		public void setColMEWS(String value)
		{
			super.row.set(10, value);
		}
		public void setCellColMEWSTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public ims.clinical.vo.HospitalAtNightPatientDetailListVo getValue()
		{
			return (ims.clinical.vo.HospitalAtNightPatientDetailListVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.HospitalAtNightPatientDetailListVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdWorklistRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdWorklistRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdWorklistRow get(int index)
		{
			return new grdWorklistRow(super.collection.get(index));
		}
		public grdWorklistRow newRow()
		{
			return new grdWorklistRow(super.collection.newRow());
		}
		public grdWorklistRow newRow(boolean autoSelect)
		{
			return new grdWorklistRow(super.collection.newRow(autoSelect));
		}
		public grdWorklistRow newRowAt(int index)
		{
			return new grdWorklistRow(super.collection.newRowAt(index));
		}
		public grdWorklistRow newRowAt(int index, boolean autoSelect)
		{
			return new grdWorklistRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdWorklistGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.clinical.vo.HospitalAtNightPatientDetailListVoCollection getValues()
		{
			ims.clinical.vo.HospitalAtNightPatientDetailListVoCollection listOfValues = new ims.clinical.vo.HospitalAtNightPatientDetailListVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.HospitalAtNightPatientDetailListVo getValue()
		{
			return (ims.clinical.vo.HospitalAtNightPatientDetailListVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.HospitalAtNightPatientDetailListVo value)
		{
			super.grid.setValue(value);
		}
		public grdWorklistRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdWorklistRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdWorklistRowCollection getRows()
		{
			return new grdWorklistRowCollection(super.grid.getRows());
		}
		public grdWorklistRow getRowByValue(ims.clinical.vo.HospitalAtNightPatientDetailListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdWorklistRow(row);
		}
		public void setColNHSHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColNHSHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColHospitalNoHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColHospitalNoHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColForenameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColForenameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColSexHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColSexHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColAgeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColAgeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColWardHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColWardHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColRequestHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColRequestHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setColRequestDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getColRequestDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setColStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getColStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setColMEWSHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getColMEWSHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.clinical.vo.HospitalAtNightWorklistSearchVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.clinical.vo.HospitalAtNightWorklistSearchVo' of the global context variable 'Clinical.HospitalAtNightWorklistSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(135);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuHospitalAtNightWorklist = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuHospitalAtNightWorklistEDITItem = factory.createMenuItem(startControlID.intValue() + 1, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3960002)))
			contextMenus.Clinical.contextMenuHospitalAtNightWorklist.add(contextMenus.Clinical.contextMenuHospitalAtNightWorklistEDITItem);
		contextMenus.Clinical.contextMenuHospitalAtNightWorklistVIEWItem = factory.createMenuItem(startControlID.intValue() + 2, "View", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3960003)))
			contextMenus.Clinical.contextMenuHospitalAtNightWorklist.add(contextMenus.Clinical.contextMenuHospitalAtNightWorklistVIEWItem);
		contextMenus.Clinical.contextMenuHospitalAtNightWorklistCOPYItem = factory.createMenuItem(startControlID.intValue() + 3, "Copy", true, false, new Integer(102222), true, false);
		contextMenus.Clinical.contextMenuHospitalAtNightWorklist.add(contextMenus.Clinical.contextMenuHospitalAtNightWorklistCOPYItem);
		contextMenus.Clinical.contextMenuHospitalAtNightWorklistNEWItem = factory.createMenuItem(startControlID.intValue() + 4, "Create work list record", true, false, new Integer(102149), true, false);
		contextMenus.Clinical.contextMenuHospitalAtNightWorklist.add(contextMenus.Clinical.contextMenuHospitalAtNightWorklistNEWItem);
		contextMenus.Clinical.contextMenuHospitalAtNightWorklistADDItem = factory.createMenuItem(startControlID.intValue() + 5, "Add to Work list", true, false, null, true, false);
		contextMenus.Clinical.contextMenuHospitalAtNightWorklist.add(contextMenus.Clinical.contextMenuHospitalAtNightWorklistADDItem);
		form.registerMenu(contextMenus.Clinical.contextMenuHospitalAtNightWorklist);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 66, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type of Request:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 416, 18, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 112, 62, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Complete:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 90, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "New and Active:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 416, 42, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Ward:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 416, 66, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 613, 66, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To:", new Integer(1), null, new Integer(0)}));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 112, 16, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 112, 40, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 632, 64, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 472, 64, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 112, 64, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbTypeOfRequestTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTypeOfRequestTemp);
		cmbTypeOfRequestComboBox cmbTypeOfRequest = (cmbTypeOfRequestComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTypeOfRequestComboBox.class, m_cmbTypeOfRequestTemp);
		super.addComboBox(cmbTypeOfRequest);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 472, 16, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 472, 40, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbWardTemp);
		cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
		super.addComboBox(cmbWard);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 112, 112, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 112, 90, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 144, 832, 480, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdWorklistTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuHospitalAtNightWorklist, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdWorklistTemp);
		grdWorklistGrid grdWorklist = (grdWorklistGrid)GridFlyweightFactory.getInstance().createGridBridge(grdWorklistGrid.class, m_grdWorklistTemp);
		grdWorklist.addStringColumn("NHS No.", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWorklist.setColNHSHeaderTooltip("NHS Number");
		grdWorklist.addStringColumn("Hosp. No.", 0, 0, 72, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWorklist.setColHospitalNoHeaderTooltip("Hospital Number");
		grdWorklist.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWorklist.setColSurnameHeaderTooltip("Surname");
		grdWorklist.addStringColumn("Forename", 0, 0, 90, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWorklist.setColForenameHeaderTooltip("Forename");
		grdWorklist.addStringColumn("Sex", 0, 0, 45, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWorklist.setColSexHeaderTooltip("Sex");
		grdWorklist.addStringColumn("Age", 0, 0, 40, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWorklist.setColAgeHeaderTooltip("Age");
		grdWorklist.addStringColumn("Ward", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWorklist.setColWardHeaderTooltip("Ward");
		grdWorklist.addImageColumn(" ", 0, 0, 30, true, 2);
		grdWorklist.setColRequestHeaderTooltip("Type of Request");
		grdWorklist.addStringColumn("Request Date/Time", 0, 0, 140, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWorklist.setColRequestDateTimeHeaderTooltip("Request Date/Time");
		grdWorklist.addStringColumn("Status", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWorklist.setColStatusHeaderTooltip("Status");
		grdWorklist.addStringColumn("MEWS", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWorklist.setColMEWSHeaderTooltip("MEWS");
		super.addGrid(grdWorklist);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 776, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 808, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public TextBox txtSurname()
	{
		return (TextBox)super.getControl(9);
	}
	public TextBox txtForename()
	{
		return (TextBox)super.getControl(10);
	}
	public DateTimeControl dtimTo()
	{
		return (DateTimeControl)super.getControl(11);
	}
	public DateTimeControl dtimFrom()
	{
		return (DateTimeControl)super.getControl(12);
	}
	public cmbTypeOfRequestComboBox cmbTypeOfRequest()
	{
		return (cmbTypeOfRequestComboBox)super.getComboBox(0);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(1);
	}
	public cmbWardComboBox cmbWard()
	{
		return (cmbWardComboBox)super.getComboBox(2);
	}
	public CheckBox chkComplete()
	{
		return (CheckBox)super.getControl(16);
	}
	public CheckBox chkNewAndActive()
	{
		return (CheckBox)super.getControl(17);
	}
	public grdWorklistGrid grdWorklist()
	{
		return (grdWorklistGrid)super.getGrid(0);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(19);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(20);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				HospitalAtNightPatientDetail = new LocalFormName(123224);
			}
			public final FormName HospitalAtNightPatientDetail;
		}

		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
			cxl_AgeSortOrder = new ims.framework.ContextVariable("AgeSortOrder", prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__AgeSortOrder_" + componentIdentifier + "");
			cxl_LoggedHCP = new ims.framework.ContextVariable("LoggedHCP", prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__LoggedHCP_" + componentIdentifier + "");
			cxl_RequestDateTimeSortOrder = new ims.framework.ContextVariable("RequestDateTimeSortOrder", prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__RequestDateTimeSortOrder_" + componentIdentifier + "");
			cxl_TypeOfRequestSortOrder = new ims.framework.ContextVariable("TypeOfRequestSortOrder", prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__TypeOfRequestSortOrder_" + componentIdentifier + "");
		}
		
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.clinical.vo.HospitalAtNightPatientDetailListVo getSelectedInstance()
		{
			return (ims.clinical.vo.HospitalAtNightPatientDetailListVo)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.clinical.vo.HospitalAtNightPatientDetailListVo value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
		public boolean getAgeSortOrderIsNotNull()
		{
			return !cxl_AgeSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getAgeSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_AgeSortOrder.getValue(context);
		}
		public void setAgeSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_AgeSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AgeSortOrder = null;
		public boolean getLoggedHCPIsNotNull()
		{
			return !cxl_LoggedHCP.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getLoggedHCP()
		{
			return (ims.core.vo.HcpLiteVo)cxl_LoggedHCP.getValue(context);
		}
		public void setLoggedHCP(ims.core.vo.HcpLiteVo value)
		{
			cxl_LoggedHCP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoggedHCP = null;
		public boolean getRequestDateTimeSortOrderIsNotNull()
		{
			return !cxl_RequestDateTimeSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getRequestDateTimeSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_RequestDateTimeSortOrder.getValue(context);
		}
		public void setRequestDateTimeSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_RequestDateTimeSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RequestDateTimeSortOrder = null;
		public boolean getTypeOfRequestSortOrderIsNotNull()
		{
			return !cxl_TypeOfRequestSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getTypeOfRequestSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_TypeOfRequestSortOrder.getValue(context);
		}
		public void setTypeOfRequestSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_TypeOfRequestSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TypeOfRequestSortOrder = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class HospitalAtNightWorklist implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 1;
				public static final int VIEW = 2;
				public static final int COPY = 3;
				public static final int NEW = 4;
				public static final int ADD = 5;
			}
			public void disableAllHospitalAtNightWorklistMenuItems()
			{
				this.contextMenuHospitalAtNightWorklistEDITItem.setEnabled(false);
				this.contextMenuHospitalAtNightWorklistVIEWItem.setEnabled(false);
				this.contextMenuHospitalAtNightWorklistCOPYItem.setEnabled(false);
				this.contextMenuHospitalAtNightWorklistNEWItem.setEnabled(false);
				this.contextMenuHospitalAtNightWorklistADDItem.setEnabled(false);
			}
			public void hideAllHospitalAtNightWorklistMenuItems()
			{
				this.contextMenuHospitalAtNightWorklistEDITItem.setVisible(false);
				this.contextMenuHospitalAtNightWorklistVIEWItem.setVisible(false);
				this.contextMenuHospitalAtNightWorklistCOPYItem.setVisible(false);
				this.contextMenuHospitalAtNightWorklistNEWItem.setVisible(false);
				this.contextMenuHospitalAtNightWorklistADDItem.setVisible(false);
			}
			private Menu contextMenuHospitalAtNightWorklist;
			public ReadOnlyMenuItem getHospitalAtNightWorklistEDITItem()
			{
				return this.contextMenuHospitalAtNightWorklistEDITItem;
			}
			private MenuItem contextMenuHospitalAtNightWorklistEDITItem;
			public ReadOnlyMenuItem getHospitalAtNightWorklistVIEWItem()
			{
				return this.contextMenuHospitalAtNightWorklistVIEWItem;
			}
			private MenuItem contextMenuHospitalAtNightWorklistVIEWItem;
			public MenuItem getHospitalAtNightWorklistCOPYItem()
			{
				return this.contextMenuHospitalAtNightWorklistCOPYItem;
			}
			private MenuItem contextMenuHospitalAtNightWorklistCOPYItem;
			public ReadOnlyMenuItem getHospitalAtNightWorklistNEWItem()
			{
				return this.contextMenuHospitalAtNightWorklistNEWItem;
			}
			private MenuItem contextMenuHospitalAtNightWorklistNEWItem;
			public MenuItem getHospitalAtNightWorklistADDItem()
			{
				return this.contextMenuHospitalAtNightWorklistADDItem;
			}
			private MenuItem contextMenuHospitalAtNightWorklistADDItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[81];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.HospitalAtNightPatientDetails", "BO-1072100096-ID", "ID_HospitalAtNightPatientDetail");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-ID", "ID_HospitalAtNightPatientDetail");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-MEWS", "MEWS");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-TYPEOFREQUEST", "TypeOfRequest");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100096-REQUESTINGDATETIME", "RequestingDateTime");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.HospitalAtNightWorklist.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
