//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.53 build 2511.27271)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.clinicalnotehistorydialog;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import ims.core.vo.ClinicalNoteStatusVo;
import ims.core.vo.ClinicalNoteStatusVoCollection;
import ims.core.vo.lookups.ClinicalNotesStatus;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	
	private void initialise() 
	{	
		form.dyngrdNotes().clear();

		DynamicGridColumn dateColumn = form.dyngrdNotes().getColumns().newColumn("Authoring Details", true);
		dateColumn.setWidth(150);	
		dateColumn.setIdentifier(new String("Authoring Details"));
		
		DynamicGridColumn statusColumn = form.dyngrdNotes().getColumns().newColumn("Status", true);
		statusColumn.setWidth(100);		
		statusColumn.setIdentifier(new String("Status"));
		statusColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn notesColumn = form.dyngrdNotes().getColumns().newColumn("Note", true);
		notesColumn.setWidth(-1);	
		notesColumn.setIdentifier(new String("Note"));
	}

	private DynamicGridColumn getCol(String identifier) 
	{
		return form.dyngrdNotes().getColumns().getByIdentifier(identifier);
	}

	private void open()
	{
		if (form.getGlobalContext().Clinical.getCurrentClinicalNoteIsNotNull() &&
				form.getGlobalContext().Clinical.getCurrentClinicalNote().getStatusHistoryIsNotNull())
		{
			ClinicalNoteStatusVoCollection voClinNoteStatColl = form.getGlobalContext().Clinical.getCurrentClinicalNote().getStatusHistory();
			
			ArrayList collActions = getArrayList(voClinNoteStatColl);
			Collections.sort(collActions, new ActionsComparator());
			copyArrayListIntoColl(voClinNoteStatColl, collActions);
			
			for(int i = 0 ; i < voClinNoteStatColl.size() ; i++)
			{
				if(voClinNoteStatColl.get(i).getStatusIsNotNull()
					&& voClinNoteStatColl.get(i).getStatus().equals(ClinicalNotesStatus.CORRECTED))
				{
					DynamicGridRow row = form.dyngrdNotes().getRows().newRow();
					
					if(voClinNoteStatColl.get(i).getMOSIsNotNull())
					{
						DynamicGridColumn col = getCol("Authoring Details");
						if(col == null)
							throw new DomainRuntimeException("No column for Identifier");
	
						DynamicGridCell dateCell = row.getCells().newCell(col, DynamicCellType.STRING);
						StringBuffer value = new StringBuffer();
						if(voClinNoteStatColl.get(i).getMOSIsNotNull())
							value.append("HCP: " + voClinNoteStatColl.get(i).getMOS().getName().toString());
						if(voClinNoteStatColl.get(i).getDateTimeIsNotNull())
						{
							if(value.length() > 0)
								value.append("\n");
							value.append("Date:" + voClinNoteStatColl.get(i).getDateTime().toString());
						}
						dateCell.setValue(value.toString());					
					}
	
					if(voClinNoteStatColl.get(i).getStatusIsNotNull()) 
					{
						DynamicGridColumn col = getCol("Status");
						if(col == null)
							throw new DomainRuntimeException("No column for Identifier");
	
						DynamicGridCell statusCell = row.getCells().newCell(col, DynamicCellType.STRING);
						statusCell.setValue(voClinNoteStatColl.get(i).getStatus().getText());
					}
					
					DynamicGridColumn col = getCol("Note");
					if(col == null)
						throw new DomainRuntimeException("No column for Identifier");
	
					DynamicGridCell noteCell = row.getCells().newCell( col, DynamicCellType.HTMLVIEW);
					noteCell.setValue(voClinNoteStatColl.get(i).getClinicalNote());
	
					row.setBackColor(Color.Bisque);
					row.setValue(voClinNoteStatColl.get(i));
				}
			}
		}
	}

	private ArrayList getArrayList(Object obj)
	{
		ArrayList list = new ArrayList();
			
		if (obj instanceof ClinicalNoteStatusVoCollection) 
		{
			ClinicalNoteStatusVoCollection coll = (ClinicalNoteStatusVoCollection)obj;
			for (int i = 0; coll != null && i < coll.size(); i++)
			{
				list.add(coll.get(i));
			}	
		}
		
		return list;
	}
	
	private void copyArrayListIntoColl(Object obj, ArrayList collActions)
	{
		if (obj instanceof ClinicalNoteStatusVoCollection) 
		{	
			ClinicalNoteStatusVoCollection coll = (ClinicalNoteStatusVoCollection)obj;
			if(coll != null)
				coll.clear();
			for (int i = 0; coll != null && collActions  != null && i < collActions.size(); i++)
			{
				coll.add((ClinicalNoteStatusVo)collActions.get(i));
			}
		}
	}
	
	
	public class ActionsComparator implements Comparator
	{
		public int compare(Object o1, Object o2)
		{
			DateTime action1DT = null;
			DateTime action2DT = null;
			
			if(o1 instanceof ClinicalNoteStatusVo)
			{
				ClinicalNoteStatusVo voClinicalNoteStatus = ((ClinicalNoteStatusVo)o1);
				action1DT = voClinicalNoteStatus.getDateTimeIsNotNull() ? voClinicalNoteStatus.getDateTime() :null;
			}
			
			if(o2 instanceof ClinicalNoteStatusVo)
			{
				ClinicalNoteStatusVo voClinicalNoteStatus = ((ClinicalNoteStatusVo)o2);
				action2DT = voClinicalNoteStatus.getDateTimeIsNotNull() ? voClinicalNoteStatus.getDateTime() :null;
			}
			
			if(action1DT != null)
				return action1DT.compareTo(action2DT)*-1;
			
			if(action2DT != null)
				return action2DT.compareTo(action1DT)*-1;
						
			return 0;
		}
	}
	
}
