//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
	// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3341.28572)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischarge;

import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.DischargeReportDetailVo;
import ims.clinical.vo.DischargeSupplementaryNotesVo;
import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.clinical.vo.lookups.DischargeSupplementaryLetterStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final long NONE 			= 0;
	private static final long TAB_DIAG 		= -1;
	private static final long TAB_OPS 		= -2;
	private static final long TAB_ALERT 	= -3;
	private static final long TAB_ASSESS 	= -4;
	private static final long TAB_CLINICAL 	= -5;
	private static final long TAB_FUTURE 	= -6;
	private static final long TAB_MEDS 		= -7;
	private static final long TAB_PREVIEW 	= -8;
	private static final long TAB_READY 	= -9;
	private static final long TAB_SUPP	 	= -10;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		form.getLocalContext().setisReadOnly(false);
		
		boolean bEnable = false;
		
		form.btnStart().setVisible(true);
		
		form.getLocalContext().setDischargeDetailsRecord(null);
		form.getLocalContext().setDischargeDetailsRecord(domain.getDischargeDetails(form.getGlobalContext().Core.getCurrentCareContext()));
		if (form.getLocalContext().getDischargeDetailsRecordIsNotNull())
		{
			bEnable = true;
			form.btnStart().setVisible(false);
			
		}
		// WDEV-16779
		if (form.btnStart().isVisible())
			form.btnStart().setFocus();
			
		
		form.lnkReturn().setVisible(engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.EDischargeList));

		//-------------
		SetGlobalContextClinicalComplete();
		//--------------
		
		form.lyrDetails().tabPageDiagnosis().setHeaderEnabled(bEnable);
		form.lyrDetails().tabPageOpsProcs().setHeaderEnabled(bEnable);
		form.lyrDetails().tabPageAlerts().setHeaderEnabled(bEnable);
		form.lyrDetails().tabPageAssessment().setHeaderEnabled(bEnable);
		form.lyrDetails().tabPageClinicalInfo().setHeaderEnabled(bEnable);
		form.lyrDetails().tabPageFuturePlan().setHeaderEnabled(bEnable);
		form.lyrDetails().tabPageMedication().setHeaderEnabled(bEnable);
		form.lyrDetails().tabPagePreview().setHeaderEnabled(bEnable);
		form.lyrDetails().tabPageReady().setHeaderEnabled(bEnable);
		form.lyrDetails().tabPageSupplementary().setHeaderVisible(form.getLocalContext().getisReadOnly());
		form.lyrDetails().tabPageSupplementary().setHeaderEnabled(bEnable);
		
		//this call is needed due to an STHK change in the diagnosis component
		form.lyrDetails().tabPageDiagnosis().ccDiagnosis().initialise();
		
		//WDEV-13932 - moved the below pice of code after ccDiagnosis().initialise()
		if ((form.getLocalContext().getisReadOnlyIsNotNull()
				&& form.getLocalContext().getisReadOnly())
				|| ( form.isReadOnly()))
				form.lyrDetails().tabPageDiagnosis().ccDiagnosis().setReadOnly();
		
	}

	private void SetGlobalContextClinicalComplete()
	{
		DischargeReportDetailVo record = domain.getDischargeReportDetailsForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if(record != null)
		{
			if(record.getIsClinicalDetailsComplete() == true)
			{
				form.getLocalContext().setisReadOnly(true);
				form.getGlobalContext().Clinical.seteDischargeClinicalComplete(true);
			}
			else
			{
				form.getLocalContext().setisReadOnly(false);
				form.getGlobalContext().Clinical.seteDischargeClinicalComplete(false);
			}
		}
		else
		{
			form.getLocalContext().setisReadOnly(false);
			form.getGlobalContext().Clinical.seteDischargeClinicalComplete(false);
		}
	}

	protected void onCcDiagnosisValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(form.lyrDetails().tabPageDiagnosis().ccDiagnosis().getMode());
		if (form.getGlobalContext().Clinical.geteDischargeDisableTabs())
			enableDisableTabs(TAB_DIAG);
		else
			enableDisableTabs(NONE);

		if (form.lyrDetails().tabPageDiagnosis().ccDiagnosis().getbStartEDischarge())
		{
			form.lyrDetails().tabPageOpsProcs().setHeaderEnabled(true);
			form.lyrDetails().tabPageAlerts().setHeaderEnabled(true);
			form.lyrDetails().tabPageAssessment().setHeaderEnabled(true);
			form.lyrDetails().tabPageClinicalInfo().setHeaderEnabled(true);
			form.lyrDetails().tabPageFuturePlan().setHeaderEnabled(true);
			form.lyrDetails().tabPageMedication().setHeaderEnabled(true);
			form.lyrDetails().tabPagePreview().setHeaderEnabled(true);
			form.lyrDetails().tabPageReady().setHeaderEnabled(true);
			form.lyrDetails().tabPageSupplementary().setHeaderEnabled(true);
		}
	}

	protected void onlyrDetailsTabChanged(LayerBridge tab) 
	{
		if(form.getMode().equals(FormMode.VIEW))
		if (tab.equals(form.lyrDetails().tabPageDiagnosis())){
			form.lyrDetails().tabPageDiagnosis().ccDiagnosis().initialise();
			if (form.getLocalContext().getisReadOnly()){
				form.lyrDetails().tabPageDiagnosis().ccDiagnosis().setReadOnly();
			}
		}
		
		if (tab.equals(form.lyrDetails().tabPageOpsProcs()))
		{
			form.lyrDetails().tabPageOpsProcs().ccOpsProcs().initialise();

			if (form.getLocalContext().getisReadOnly())
				form.lyrDetails().tabPageOpsProcs().ccOpsProcs().setReadOnly();
		}
		
		if (tab.equals(form.lyrDetails().tabPageAlerts()))
		{
			form.lyrDetails().tabPageAlerts().ccAllergies().initialise();

			if (form.getLocalContext().getisReadOnly())
				form.lyrDetails().tabPageAlerts().ccAllergies().setReadOnly();
		}
		
		if (tab.equals(form.lyrDetails().tabPageAssessment()))
		{
			form.lyrDetails().tabPageAssessment().cc1().initialise();

			if (form.getLocalContext().getisReadOnly())
				form.lyrDetails().tabPageAssessment().cc1().setReadOnly();
		}
		
		if (tab.equals(form.lyrDetails().tabPageClinicalInfo()))
		{
			form.lyrDetails().tabPageClinicalInfo().ccClinicalInfo().initialise();

			if (form.getLocalContext().getisReadOnly())
				form.lyrDetails().tabPageClinicalInfo().ccClinicalInfo().setReadOnly();
		}

		if (tab.equals(form.lyrDetails().tabPageFuturePlan()))
		{
			form.lyrDetails().tabPageFuturePlan().ccFuturePlan().initialise();

			if (form.getLocalContext().getisReadOnly())
				form.lyrDetails().tabPageFuturePlan().ccFuturePlan().setReadOnly();
		}
		
		if (tab.equals(form.lyrDetails().tabPageMedication()))
		{
			form.lyrDetails().tabPageMedication().ccMedication().initialise();

			if (form.getLocalContext().getisReadOnly())
				form.lyrDetails().tabPageMedication().ccMedication().setReadOnly();
		}
		
		if (tab.equals(form.lyrDetails().tabPagePreview()))
		{
			form.lyrDetails().tabPagePreview().ccPreview().initialise();

			if (form.getLocalContext().getisReadOnly())
				form.lyrDetails().tabPagePreview().ccPreview().setReadOnly();
		}

		if (tab.equals(form.lyrDetails().tabPageReady()))
		{
			form.lyrDetails().tabPageReady().ccReadyToLeave().initialise();
			
			if (form.getLocalContext().getisReadOnly())
				form.lyrDetails().tabPageReady().ccReadyToLeave().setReadOnly();
		}
		
		if (tab.equals(form.lyrDetails().tabPageSupplementary()))
			openSupplementary();
	}

	protected void onLnkReturnClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Clinical.EDischargeList);
	}

	protected void onBtnStartClick() throws PresentationLogicException
	{
		DischargeDetailsVo voDD = new DischargeDetailsVo();
		voDD.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voDD.setInitiatingHCP((HcpLiteVo)domain.getHcpLiteUser());
		voDD.setDischargeLetterStatus(DischargeLetterStatus.IN_PROGRESS);

		form.getLocalContext().setDischargeDetailsRecord(null);

		if (voDD.getInitiatingHCP() == null)
		{
			engine.showMessage("The logged in user is not a HCP and so cannot Start this eDischarge","Warning", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}
		
		String[] str = voDD.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return;
		}

		try 
		{
			voDD = domain.saveDischargeDetails(voDD);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			form.setMode(FormMode.VIEW);			
			return;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.setMode(FormMode.VIEW);			
			return;
		} 

		form.getLocalContext().setDischargeDetailsRecord(voDD);
		
		form.lyrDetails().tabPageDiagnosis().setHeaderEnabled(true);
		form.lyrDetails().tabPageOpsProcs().setHeaderEnabled(true);
		form.lyrDetails().tabPageAlerts().setHeaderEnabled(true);
		form.lyrDetails().tabPageAssessment().setHeaderEnabled(true);
		form.lyrDetails().tabPageClinicalInfo().setHeaderEnabled(true);
		form.lyrDetails().tabPageFuturePlan().setHeaderEnabled(true);
		form.lyrDetails().tabPageMedication().setHeaderEnabled(true);
		form.lyrDetails().tabPagePreview().setHeaderEnabled(true);
		form.lyrDetails().tabPageReady().setHeaderEnabled(true);
		form.lyrDetails().tabPageSupplementary().setHeaderEnabled(true);
		
		form.lyrDetails().tabPageDiagnosis().ccDiagnosis().initialise();

		form.btnStart().setVisible(false);
	}

	@Override
	protected void onBtnCancelSuppClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.VIEW);
		openSupplementary();
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		enableDisableTabs(NONE);
	}

	@Override
	protected void onBtnSaveSuppClick() throws PresentationLogicException 
	{
		if (save())
			openSupplementary();
		else
			return;
		
		form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
		enableDisableTabs(NONE);
	}

	private void openSupplementary() 
	{
		if (form.getMode().equals(FormMode.EDIT))
			return;
		
		clearInstanceControls();
		DischargeSupplementaryNotesVo voNotes = domain.getSupplementary(form.getGlobalContext().Core.getCurrentCareContext());
		if (voNotes != null)
			populateScreenFromData(voNotes);
	
		form.getLocalContext().setSelectedRecord(voNotes);
		
		if (voNotes != null
				&& voNotes.getCompletedOnIsNotNull())
			form.lyrDetails().tabPageSupplementary().btnEditSupp().setVisible(false);
		else
		{
			form.lyrDetails().tabPageSupplementary().btnEditSupp().setEnabled(true);
			form.lyrDetails().tabPageSupplementary().btnEditSupp().setVisible(true);
		}
	}

	private void clearInstanceControls() 
	{
		form.lyrDetails().tabPageSupplementary().ccAuthoring().setValue(null);
		form.lyrDetails().tabPageSupplementary().richTextSupplementary().setValue(null);
		form.lyrDetails().tabPageSupplementary().chkCompleted().setValue(null);//WDEV-14696
	}

	private DischargeSupplementaryNotesVo populateDataFromScreen() 
	{
		DischargeSupplementaryNotesVo voNotes = null;
		if (form.getLocalContext().getSelectedRecordIsNotNull())
			voNotes = form.getLocalContext().getSelectedRecord();
		else
			voNotes = new DischargeSupplementaryNotesVo();

		if (voNotes.getCareContext() == null)
			voNotes.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voNotes.setSupplementaryNote(form.lyrDetails().tabPageSupplementary().richTextSupplementary().getValue());
		voNotes.setAuthoringInformation(form.lyrDetails().tabPageSupplementary().ccAuthoring().getValue());
		if (form.lyrDetails().tabPageSupplementary().chkCompleted().getValue())
		{
			voNotes.setCompletedBy((MemberOfStaffRefVo)domain.getMosUser());
			voNotes.setCompletedOn(new DateTime());
		}
		return voNotes;
	}

	private boolean save() 
	{
		DischargeDetailsVo voDD = null;
		if (form.lyrDetails().tabPageSupplementary().chkCompleted().getValue())
		{
			voDD = domain.getDischargeDetails(form.getGlobalContext().Core.getCurrentCareContext());
			voDD.setDischargeSupplementaryLetterStatus(DischargeSupplementaryLetterStatus.REQUIRED);
		}
		String[] str = null;
		DischargeSupplementaryNotesVo voNotes = populateDataFromScreen();
		boolean flaglenght = false;
		if(voNotes.getSupplementaryNote().length() > 7500)
		{
			str = new String[]{"The length of Supplementary Note field has exceeded the limit"};
			flaglenght = true;
		}
		str = voNotes.validate(str);
		if (str != null && str.length > 0)
		{
			if(flaglenght)
			{
				for(int i = 0; i< str.length;i++)
				{
					if(str[i] == "The length of the field [supplementarynote] in the value object [ims.clinical.vo.DischargeSupplementaryNotesVo] is too big. It should be less or equal to 7500")
						str[i] = "";
				}
				
			}
			engine.showErrors(str);
			return false;
		}

		try 
		{
			voNotes = domain.saveSupplementaryAndDD(voNotes, voDD);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			openSupplementary();
			form.setMode(FormMode.VIEW);			
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.setMode(FormMode.VIEW);
			openSupplementary();
					
			form.getGlobalContext().Clinical.seteDischargeDisableTabs(false);
			enableDisableTabs(NONE);
			return false;
		} 
		form.getLocalContext().setSelectedRecord(voNotes);
		form.setMode(FormMode.VIEW);			
		
		return true;
	}

	private void populateScreenFromData(DischargeSupplementaryNotesVo voNotes)
	{
		if (voNotes == null)
			return;
		
		form.lyrDetails().tabPageSupplementary().richTextSupplementary().setValue(voNotes.getSupplementaryNoteIsNotNull() ? voNotes.getSupplementaryNote() : null);
		form.lyrDetails().tabPageSupplementary().ccAuthoring().setValue(voNotes.getAuthoringInformationIsNotNull() ? voNotes.getAuthoringInformation() : null);
		form.lyrDetails().tabPageSupplementary().chkCompleted().setValue(voNotes.getCompletedOnIsNotNull() ? true : false);
	}

	@Override
	protected void onBtnEditSuppClick() throws PresentationLogicException 
	{
		openSupplementary();
		if (form.getLocalContext().getSelectedRecord() == null
			|| (form.getLocalContext().getSelectedRecord() != null
					&& form.getLocalContext().getSelectedRecord().getID_DischargeSupplementaryNotes() == null) )
			form.lyrDetails().tabPageSupplementary().ccAuthoring().initializeComponent();

		form.setMode(FormMode.EDIT);

		form.getGlobalContext().Clinical.seteDischargeDisableTabs(true);
		enableDisableTabs(NONE);
	}

	@Override
	protected void onCcReadyToLeaveValueChanged() throws PresentationLogicException
	{
		if (form.getGlobalContext().Clinical.geteDischargeDisableTabs())
			enableDisableTabs(TAB_READY);
		else
			enableDisableTabs(NONE);

		form.lyrDetails().tabPageDiagnosis().ccDiagnosis().setReadOnly();
		form.lyrDetails().tabPageOpsProcs().ccOpsProcs().setReadOnly();
		form.lyrDetails().tabPageAlerts().ccAllergies().setReadOnly();
		form.lyrDetails().tabPageAssessment().cc1().setReadOnly();
		form.lyrDetails().tabPageClinicalInfo().ccClinicalInfo().setReadOnly();
		form.lyrDetails().tabPageFuturePlan().ccFuturePlan().setReadOnly();
		form.lyrDetails().tabPageMedication().ccMedication().setReadOnly();
		form.lyrDetails().tabPagePreview().ccPreview().setReadOnly();
		form.lyrDetails().tabPageReady().ccReadyToLeave().setReadOnly();
			
		
	}

	private void enableDisableTabs(long tab_diag2) 
	{
		form.lyrDetails().tabPageDiagnosis().setHeaderEnabled( tab_diag2 == TAB_DIAG ? true : ! form.getGlobalContext().Clinical.geteDischargeDisableTabs());
		form.lyrDetails().tabPageOpsProcs().setHeaderEnabled( tab_diag2 == TAB_OPS ? true : ! form.getGlobalContext().Clinical.geteDischargeDisableTabs());
		form.lyrDetails().tabPageAlerts().setHeaderEnabled( tab_diag2 == TAB_ALERT ? true : ! form.getGlobalContext().Clinical.geteDischargeDisableTabs());
		form.lyrDetails().tabPageAssessment().setHeaderEnabled( tab_diag2 == TAB_ASSESS ? true : ! form.getGlobalContext().Clinical.geteDischargeDisableTabs());
		form.lyrDetails().tabPageClinicalInfo().setHeaderEnabled( tab_diag2 == TAB_CLINICAL ? true : ! form.getGlobalContext().Clinical.geteDischargeDisableTabs());
		form.lyrDetails().tabPageFuturePlan().setHeaderEnabled( tab_diag2 == TAB_FUTURE ? true : ! form.getGlobalContext().Clinical.geteDischargeDisableTabs());
		form.lyrDetails().tabPageMedication().setHeaderEnabled( tab_diag2 == TAB_MEDS ? true : ! form.getGlobalContext().Clinical.geteDischargeDisableTabs());
		form.lyrDetails().tabPagePreview().setHeaderEnabled( tab_diag2 == TAB_PREVIEW ? true : ! form.getGlobalContext().Clinical.geteDischargeDisableTabs());
		form.lyrDetails().tabPageReady().setHeaderEnabled( tab_diag2 == TAB_READY ? true : ! form.getGlobalContext().Clinical.geteDischargeDisableTabs());
		form.lyrDetails().tabPageSupplementary().setHeaderEnabled( tab_diag2 == TAB_SUPP ? true : ! form.getGlobalContext().Clinical.geteDischargeDisableTabs());
		form.lyrDetails().tabPageSupplementary().setHeaderVisible(form.getLocalContext().getisReadOnlyIsNotNull() ? form.getLocalContext().getisReadOnly() : true);
		
		form.setMode(form.getGlobalContext().Clinical.geteDischargeDisableTabs() ? FormMode.EDIT : FormMode.VIEW);//wdev-8455
	}

	@Override
	protected void onCcOpsProcsValueChanged() throws PresentationLogicException 
	{
		if(form.getLocalContext().getDischargeDetailsRecordIsNotNull())//WDEV-13897
			if (form.getGlobalContext().Clinical.geteDischargeDisableTabs())
				enableDisableTabs(TAB_OPS);
			else
				enableDisableTabs(NONE);
	}

	@Override
	protected void onCcAllergiesValueChanged() throws PresentationLogicException 
	{
		if (form.getGlobalContext().Clinical.geteDischargeDisableTabs())
			enableDisableTabs(TAB_ALERT);
		else
			enableDisableTabs(NONE);
	}

	@Override
	protected void onCc1ValueChanged() throws PresentationLogicException 
	{
		if (form.getGlobalContext().Clinical.geteDischargeDisableTabs())
			enableDisableTabs(TAB_ASSESS);
		else
			enableDisableTabs(NONE);
	}

	@Override
	protected void onCcClinicalInfoValueChanged() throws PresentationLogicException 
	{
		if (form.getGlobalContext().Clinical.geteDischargeDisableTabs())
			enableDisableTabs(TAB_CLINICAL);
		else
			enableDisableTabs(NONE);
	}

	@Override
	protected void onCcFuturePlanValueChanged() throws PresentationLogicException 
	{
		if (form.getGlobalContext().Clinical.geteDischargeDisableTabs())
			enableDisableTabs(TAB_FUTURE);
		else
			enableDisableTabs(NONE);
	}

	@Override
	protected void onCcMedicationValueChanged() throws PresentationLogicException 
	{
		if (form.getGlobalContext().Clinical.geteDischargeDisableTabs())
			enableDisableTabs(TAB_MEDS);
		else
			enableDisableTabs(NONE);
	}

	@Override
	protected void onCcPreviewValueChanged() throws PresentationLogicException 
	{
		if (form.getGlobalContext().Clinical.geteDischargeDisableTabs())
			enableDisableTabs(TAB_PREVIEW);
		else
			enableDisableTabs(NONE);

		//-------------
		SetGlobalContextClinicalComplete();
		//--------------
		
		//--------------------------------------------------------------
		form.lyrDetails().tabPageDiagnosis().ccDiagnosis().setReadOnly();
		form.lyrDetails().tabPageOpsProcs().ccOpsProcs().setReadOnly();
		form.lyrDetails().tabPageAlerts().ccAllergies().setReadOnly();
		form.lyrDetails().tabPageAssessment().cc1().setReadOnly();
		form.lyrDetails().tabPageClinicalInfo().ccClinicalInfo().setReadOnly();
		form.lyrDetails().tabPageFuturePlan().ccFuturePlan().setReadOnly();
		form.lyrDetails().tabPageMedication().ccMedication().setReadOnly();
		form.lyrDetails().tabPagePreview().ccPreview().setReadOnly();
		form.lyrDetails().tabPageReady().ccReadyToLeave().setReadOnly();
		//---------------------------------------------------------------
	}

	@Override
	protected void onFormModeChanged()
	{
		if (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.EDischargeList))//wdev-8456
			form.lnkReturn().setVisible(form.getMode().equals(FormMode.VIEW) ? true : false);
	}
}
