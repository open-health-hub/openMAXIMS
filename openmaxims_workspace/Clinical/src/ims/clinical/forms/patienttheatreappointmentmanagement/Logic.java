//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3467.22451)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.patienttheatreappointmentmanagement;

import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.TheatreListBookingDetailVo;
import ims.clinical.forms.patienttheatreappointmentmanagement.GenForm.grdApptsRow;
import ims.clinical.forms.patienttheatreappointmentmanagement.GenForm.grdPatientsRow;
import ims.clinical.vo.PatientTheatreBookingVo;
import ims.clinical.vo.PatientTheatreBookingVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientShortCollection;
import ims.core.vo.ProcedureVo;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.MoveAppointmentDataVo;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.SessionServiceProcedureConsultantVo;
import ims.scheduling.vo.SessionTheatreTCISlotLiteVo;
import ims.scheduling.vo.lookups.Status_Reason;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}

	private void initialize()
	{
		form.dteAppt().setValue(new Date());
		form.getLocalContext().setselectedPatient(null);
		form.lblDisplayPatId().setValue((PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).getText()) + ":");
		form.grdPatients().setHospitalNumberCaption((PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).getText()));
	}

	protected void onGrdApptsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateContextMenuState();
	}

	private void updateContextMenuState()
	{
		form.getContextMenus().Clinical.hideAllPatientTheatreApptManageMenuMenuItems();
		
		if(form.grdPatients().getValue() == null)
			return;
		
		PatientTheatreBookingVo voAppt = form.grdAppts().getValue();
		
		boolean isApptSelected = voAppt != null;	
		Status_Reason currentApptStatus = voAppt != null ? voAppt.getApptStatus() : null;		
		if(currentApptStatus != null
			&& voAppt.getAppointmentDateIsNotNull()
			&& voAppt.getAppointmentDate().isLessOrEqualThan(new Date()))
		{
			form.getContextMenus().Clinical.getPatientTheatreApptManageMenuAdmitItem().setVisible(form.getMode().equals(FormMode.VIEW) 
					&& isApptSelected && currentApptStatus.equals(Status_Reason.BOOKED)
					&& domain.isReferralAccepted(voAppt));
			
			Boolean showDna = false;
			if(currentApptStatus.equals(Status_Reason.BOOKED))
			{
				if(voAppt.getAppointmentDateIsNotNull() && voAppt.getAppointmentDate().isLessThan(new Date()))
					showDna = true;
				//if day is the same include the time in the check
				else if(voAppt.getAppointmentDateIsNotNull() && voAppt.getAppointmentDate().equals(new Date()))
				{
					if(voAppt.getApptStartTimeIsNotNull() && voAppt.getApptStartTime().isLessThan(new Time()))
						showDna = true;
				}
			}
			form.getContextMenus().Clinical.getPatientTheatreApptManageMenuDNAItem().setVisible(form.getMode().equals(FormMode.VIEW) 
					&& isApptSelected && showDna);
		}
		
		//WDEV-12175
		if(currentApptStatus != null)
			form.getContextMenus().Clinical.getPatientTheatreApptManageMenuCancelledItem().setVisible(form.getMode().equals(FormMode.VIEW) && isApptSelected  && currentApptStatus.equals(Status_Reason.BOOKED));
		
		//WDEV-12918
		if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("Fixed"))
		{
			if(currentApptStatus != null)
				form.getContextMenus().Clinical.getPatientTheatreApptManageMenuMOVEItem().setVisible(form.getMode().equals(FormMode.VIEW) && isApptSelected  && currentApptStatus.equals(Status_Reason.BOOKED));
		}
	}

	protected void onGrdPatientsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setselectedPatient(form.grdPatients().getSelectedRow().getValue());
		form.getGlobalContext().Core.setPatientShort(form.grdPatients().getSelectedRow().getValue());
		
		listAppointmentsForPatientAndDate();
		clearInstanceControls();
		updateContextMenuState();
	}

	private void listAppointmentsForPatientAndDate()
	{
		Date dteAppt = null;
		if(form.getLocalContext().getDateApptIsNotNull())
			dteAppt = form.getLocalContext().getDateAppt();
		else
			dteAppt = form.dteAppt().getValue();
		PatientTheatreBookingVoCollection voColl = domain.listTheatreAppointmentsByPatientAndDate(form.getLocalContext().getselectedPatient(), dteAppt);
		populateApptsGrid(voColl);
	}

	private void populateApptsGrid(PatientTheatreBookingVoCollection voColl)
	{
		form.grdAppts().getRows().clear();
		if(voColl != null)
		{
			for(int i = 0 ; i < voColl.size() ; i++)
			{
				PatientTheatreBookingVo voBooking = voColl.get(i);
				grdApptsRow row = form.grdAppts().getRows().newRow();
				
				if (voBooking.getTheatreBookingIsNotNull()
					&& voBooking.getTheatreBooking().getTCITimeIsNotNull())
					row.setAppointmentTime(voBooking.getTheatreBooking().getTCITime().toString());
				
				if(voBooking.getTheatreBookingIsNotNull() && voBooking.getTheatreBooking().getProcedureIsNotNull())
					row.setProcedure(voBooking.getTheatreBooking().getProcedure().getProcedureName());
				
				if(voBooking.getSessionIsNotNull() && voBooking.getSession().getTheatreTypeIsNotNull())
					row.setType(voBooking.getSession().getTheatreType().toString());
				
				if(voBooking.getApptStartTimeIsNotNull())
					row.setAppointmentTime(voBooking.getApptStartTime().toString());
				
				if(voBooking.getApptStatusIsNotNull())
				{
					row.setStatus(voBooking.getApptStatus().toString());
					row.setBooking(voBooking.getApptStatus().getImage());
				}
				
				if(voBooking.getOutcomeIsNotNull())
					row.setTooltip("Outcome : " + voBooking.getOutcome().getText());
				
				row.setValue(voBooking);
			}
		}
		
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtDisplayId().setValue(null);
		clearSearchCriteriaFields();
		clearGridsAndInstanceControls();
		form.dteAppt().setValue(new Date());
		form.getLocalContext().setselectedPatient(null);
		form.getGlobalContext().Core.setPatientShort(null); //WDEV-18127 
	}

	private void clearGridsAndInstanceControls()
	{
		form.grdPatients().getRows().clear();
		form.lblTotal().setValue("Total : 0");//WDEV-12990
		form.grdAppts().getRows().clear();
		clearInstanceControls();
	}

	private void clearInstanceControls()
	{
		updateContextMenuState();
		form.timTime().setValue(null);
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (validateSearchCriteria())
			populateGridWithPatients(search());
		
		updateContextMenuState();
	}

	private PatientShortCollection search()
	{
		form.grdAppts().getRows().clear();
		form.getLocalContext().setselectedPatient(null);
		
		form.grdPatients().getRows().clear();//WDEV-12990
		form.lblTotal().setValue("Total : " + form.grdPatients().getRows().size());//WDEV-12990
		

		PatientFilter voFilter = getPatientFilterDetails();
		PatientShortCollection voCollPatientShort = null;

		try
		{
			voCollPatientShort = domain.searchPatients(voFilter);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return null;
		}

		if (voCollPatientShort.size() == 0)
		{
			engine.showMessage("No patients found");
			return null;
		}

		return voCollPatientShort;
	}

	private boolean validateSearchCriteria()
	{
		if (form.txtDisplayId().getValue() != null && form.txtDisplayId().getValue().length() > 0)
			clearSearchCriteriaFields();
		else
		{

			// If it is a local search strip out the non-alpha except % chars
			// before validation
			if ((ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL")) && (form.txtSurname().getValue() == null || form.txtSurname().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0))
			{
				engine.showMessage("Please enter a valid Surname search string");
				return false;
			}
			else if (form.txtSurname().getValue() == null || form.txtSurname().getValue().length() == 0)
			{
				engine.showMessage("Please enter a Surname search string");
				return false;
			}

			// Mandatory Search on forname
			if ((ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL")) && (ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue()) && (form.txtName().getValue() == null || form.txtName().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0))
			{
				engine.showMessage("Please enter a valid Forename search string");
				return false;
			}

			else if ((ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue()) && (form.txtName().getValue() == null || form.txtName().getValue().length() == 0))
			{
				engine.showMessage("Please enter a valid Forename search string");
				return false;
			}
		}

		return true;
	}

	private void populateGridWithPatients(PatientShortCollection voCollPatientShort)
	{
		if (voCollPatientShort == null)
			return;

		for (int i = 0; i < voCollPatientShort.size(); i++)
		{
			PatientShort voPatShort = voCollPatientShort.get(i);
			grdPatientsRow row = form.grdPatients().getRows().newRow();

			if (voPatShort.getName() != null)
			{
				if (voPatShort.getName().getSurnameIsNotNull())
				{
					row.setSurname(voPatShort.getName().getSurname());
					row.setTooltipForSurname(voPatShort.getName().getSurname());
				}
				if (voPatShort.getName().getForenameIsNotNull())
				{
					row.setName(voPatShort.getName().getForename());
					row.setTooltipForName(voPatShort.getName().getForename());
				}
			}

			if (voPatShort.getDisplayId() != null)
			{
				row.setHospitalNumber(voPatShort.getDisplayId().getValue());
				row.setTooltipForHospitalNumber(voPatShort.getDisplayId().getValue());
			}
			
			if (voPatShort.getDob() != null)
				row.setDOB(voPatShort.getDob().toString(DateFormat.STANDARD));

			row.setValue(voPatShort);

			if (voPatShort.getAssociatedPatientIsNotNull())
				row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());

			if (voPatShort.getIsDead().booleanValue())
				row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());
		}
		form.lblTotal().setValue("Total : " + form.grdPatients().getRows().size());
	}

	private PatientFilter getPatientFilterDetails()
	{
		PatientFilter voPatFilter = new PatientFilter();

		if (form.txtDisplayId().getValue() != null && form.txtDisplayId().getValue().length() > 0)
		{
			PatientId pid = new PatientId();
			pid.setType(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
			pid.setValue(form.txtDisplayId().getValue());
			voPatFilter.setPersId(pid);
		}
		else
		{
			voPatFilter.setForename(form.txtName().getValue());
			voPatFilter.setSurname(form.txtSurname().getValue());
			voPatFilter.setDob(form.pdtDate().getValue());
		}

		return voPatFilter;
	}

	private void clearSearchCriteriaFields()
	{
		form.txtSurname().setValue(null);
		form.txtName().setValue(null);
		form.pdtDate().setValue(null);
	}

	protected void onImbNextDateClick() throws PresentationLogicException
	{
		Date date = form.dteAppt().getValue().copy();
		date.addDay(1);
		form.dteAppt().setValue(date);	
		form.getLocalContext().setDateAppt(null);
		if(form.grdPatients().getValue() != null)
		{
			listAppointmentsForPatientAndDate();
			clearInstanceControls();
		}
	}

	protected void onImbPrevDateClick() throws PresentationLogicException
	{
		Date date = form.dteAppt().getValue().copy();
		date.addDay(-1);
		form.dteAppt().setValue(date);
		form.getLocalContext().setDateAppt(null);
		if(form.grdPatients().getValue() != null)
		{
			listAppointmentsForPatientAndDate();
			clearInstanceControls();
		}	
	}

	private void admit()
	{
		TheatreListBookingDetailVo voAdmit = new TheatreListBookingDetailVo();
		
		voAdmit.setTCITime(form.grdAppts().getSelectedRow().getAppointmentTime());
		voAdmit.setTheatreText(form.grdAppts().getValue().getTheatreBooking().getSessionIsNotNull() ? form.grdAppts().getValue().getTheatreBooking().getSession().getName() : "");
		voAdmit.setTheatreText(form.grdAppts().getValue().getSessionIsNotNull() ? form.grdAppts().getValue().getSession().getName() : "");
		voAdmit.setProcedureText(form.grdAppts().getSelectedRow().getProcedure());
		
		ProcedureVo voProc = domain.getProcedureLOS(form.grdAppts().getValue().getTheatreBooking().getProcedure());
		voAdmit.setLOS(voProc.getLOS());
		form.getGlobalContext().RefMan.setTheatreAdmitDetails(voAdmit);
		form.getGlobalContext().Core.setHospitalLoc((form.grdAppts().getValue().getSessionIsNotNull() && form.grdAppts().getValue().getSession().getSchLocationIsNotNull()) ? form.grdAppts().getValue().getSession().getSchLocation() : null);
		
		form.getGlobalContext().Scheduling.setBookingAppointmentRef(form.grdAppts().getValue());
		form.getGlobalContext().RefMan.setTheatreBookingAppointment(form.grdAppts().getValue());
		
		engine.open(form.getForms().RefMan.TheatreAdmissionDialog);
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		PatientTheatreBookingVo voAppt = null;
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.PatientTheatreApptManageMenu.Admit:
				admit();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.PatientTheatreApptManageMenu.Cancelled:
				voAppt  = form.grdAppts().getValue();
				
				boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
				
				if(voAppt != null)
				{
					form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
					SessionServiceAndSlotActivityVo voServiceAndActivity = domain.getServiceAndActivityByAppt(voAppt);
					if(voServiceAndActivity != null)
					{
						//wdev-11902
						CatsReferralListVo voReferral = domain.getCatsReferralForAppointment(form.grdAppts().getValue());
						form.getGlobalContext().RefMan.setCatsReferralStatus(voReferral.getCurrentStatus());
						
						form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity.getSlotActivity());
						form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity.getSessionService());
						form.getGlobalContext().Scheduling.setBookingSession(voAppt.getSession());
						form.getGlobalContext().Scheduling.setTheatreType(voAppt.getSessionIsNotNull() ? voAppt.getSession().getTheatreType() : null);
						engine.open(form.getForms().Scheduling.CancelAppointmentDialog,  new Object[] {null, isTheatreAppt});
					}
					else
					{
						SessionServiceProcedureConsultantVo voServiceProcedureConsultant = domain.getServiceProcedureConsultantByAppt(voAppt);
						if(voServiceProcedureConsultant != null)
						{
							//wdev-11902
							CatsReferralListVo voReferral = domain.getCatsReferralForAppointment(form.grdAppts().getValue());
							form.getGlobalContext().RefMan.setCatsReferralStatus(voReferral.getCurrentStatus());

							form.getGlobalContext().Scheduling.setTheatreConsultant(voServiceProcedureConsultant.getConsultant());
							form.getGlobalContext().Scheduling.setTheatreService(voServiceProcedureConsultant.getService());
							form.getGlobalContext().Scheduling.setTheatreProcedure(voServiceProcedureConsultant.getProcedure());
							form.getGlobalContext().Scheduling.setBookingSession(voAppt.getSession());
							form.getGlobalContext().Scheduling.setTheatreType(voAppt.getSessionIsNotNull() ? voAppt.getSession().getTheatreType() : null);
							engine.open(form.getForms().Scheduling.CancelAppointmentDialog,  new Object[] {null, isTheatreAppt});
						}
					}
				}
				break;
			case GenForm.ContextMenus.ClinicalNamespace.PatientTheatreApptManageMenu.DNA:
				dnaAppointment();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.PatientTheatreApptManageMenu.MOVE:
				moveAppointment();
				break;
			default:
		}
		
	}

	private void moveAppointment()
	{
		setContextInfoForMoveAppointmentDialog();
		engine.open(form.getForms().Scheduling.MoveAppointmentDialog, new Object[]{Boolean.TRUE});
	}

	private void setContextInfoForMoveAppointmentDialog()
	{
		MoveAppointmentDataVo voData = new MoveAppointmentDataVo();
		voData.setFromSlot(domain.getSessionParentChildSlotByAppt(form.grdAppts().getValue()));
		form.getGlobalContext().Scheduling.setMoveAppointmentDialogData(voData);
	}
	

	private boolean canBeDNAed(Status_Reason apptStatus, Date dateSession) 
	{
		if (apptStatus != null 
			&& apptStatus.equals(Status_Reason.BOOKED))
			{
				if(dateSession != null)
				{
					if(new Date().isGreaterOrEqualThan(dateSession))
					{
						return true;
					}
				}
			}
			return false;
	}

	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(messageBoxId == form.getLocalContext().getMessageBoxID() && result.equals(DialogResult.YES))
		{
			form.getLocalContext().setNewStatus(Status_Reason.DNA);
			if(save())
				open();
		}
	}

	private void dnaAppointment() 
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdAppts().getValue());
		if (canBeDNAed(voBook.getApptStatus(), voBook.getSession().getSessionDate()))
		{
			form.getLocalContext().setMessageBoxID(engine.showMessage("Are you sure you want to mark this record as DNA?", "Warning", MessageButtons.YESNO));
		}
		else if (voBook.getApptStatus().equals(Status_Reason.DNA))
		{
			engine.showMessage("This appointment has already been marked as DNA'ed");
			open();
		}
		else
		{
			engine.showMessage("Data was changed by another user.");
			open();
		}
			
	}

	private boolean save()
	{
		if(form.grdAppts().getValue() == null)
			throw new CodingRuntimeException("No Appointment selected to manage");
		
		if(form.getLocalContext().getNewStatus() == null)
			throw new CodingRuntimeException("NewStatus not set in method saveBookingAppointmentWithNewStatus");
	
		PatientTheatreBookingVo voAppt = form.grdAppts().getValue();
		
		//WDEV-9091
		SessionTheatreTCISlotLiteVo sessionSlot = null;
		
		Status_Reason status = form.getLocalContext().getNewStatus();
		if(status.equals(Status_Reason.SEEN))
			voAppt.setSeenTime(form.timTime().getValue());
		else if(status.equals(Status_Reason.ARRIVAL))
			voAppt.setArrivalTime(form.timTime().getValue());
		//WDEV-9091 - starts here
		else if(status.equals(Status_Reason.DNA))
		{
			if(voAppt.getIsCABBooking() == null || Boolean.FALSE.equals(voAppt.getIsCABBooking()))
			{
				voAppt.setRequiresRebook(true);
				
				if(voAppt.getTheatreSlotIsNotNull())
				{
					sessionSlot = domain.getSessionSlot(voAppt.getTheatreSlot());
					sessionSlot.setStatus(Status_Reason.DNA);
					sessionSlot.setAppointment(null);
					sessionSlot.validate();
					
					voAppt.setTheatreSlot(null);
				}
			}
		}
		//WDEV-9091 - ends here
		
		voAppt.setApptStatus(status);
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voAppt.getAppointmentDate());
		voStatus.setApptTime(voAppt.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(form.getLocalContext().getNewStatus());
		
		Appointment_StatusVoCollection voCollStatusHistory = voAppt.getApptStatusHistory();
		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();
		
		voCollStatusHistory.add(voStatus);
		voAppt.setCurrentStatusRecord(voStatus); // wdev-6034
		voAppt.setApptStatusHistory(voCollStatusHistory);
		
		String[] arrErrors = voAppt.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}	
		
		try
		{
			domain.saveBookingAppt(voAppt, sessionSlot);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			clearGridsAndInstanceControls();
			return false;
		}
		
		form.getLocalContext().setDateAppt(form.dteAppt().getValue());
		
		return true;
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		form.getLocalContext().setDateAppt(form.dteAppt().getValue());
		open();
		
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if(save())
			open();
	}

	private void open()
	{
		form.getGlobalContext().Scheduling.setBookingAppointmentRef(null);
		form.getGlobalContext().Scheduling.setBookingActivity(null);
		form.getGlobalContext().Scheduling.setBookingService(null);
		form.setMode(FormMode.VIEW);
		form.grdAppts().setValue(null);
		form.getLocalContext().setNewStatus(null);
		updateContextMenuState();
		clearInstanceControls();
		if(form.getLocalContext().getDateAppt()==null)
			form.dteAppt().setValue(new Date());
		listAppointmentsForPatientAndDate();
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if(!cancelAppt())
					return;
				
				CatsReferralRefVo voReferral = domain.getCatsReferralForAppointment(form.grdAppts().getValue());
				try
				{
					domain.updateCatsReferralAdditionalInvStatus(voReferral);
					
					if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getGlobalContext().Scheduling.getBookingAppointment() != null && form.getGlobalContext().Scheduling.getBookingAppointment().getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelTCI())) //WDEV-18249
					{
						domain.cancelTCIAndReferralEROD(voReferral, form.getGlobalContext().Scheduling.getBookingAppointment(), Status_Reason.HOSPITALCANCELLED.equals(form.getGlobalContext().Scheduling.getBookingAppointment().getApptStatusReas()),Status_Reason.PATIENTCANCELLED.equals(form.getGlobalContext().Scheduling.getBookingAppointment().getApptStatusReas()));//WDEV-18249
					}
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					return;
				}
				
				//open book appointment
				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
				{
					form.getGlobalContext().Core.setPatientShort(form.grdPatients().getValue());
					
					PatientTheatreBookingVo voAppt = form.grdAppts().getValue();
					if(voAppt != null)
					{
						BookingAppointmentTheatreVo voAP = new BookingAppointmentTheatreVo(voAppt.getID_Booking_Appointment(),0);
						
						SessionServiceAndSlotActivityVo voServiceAndActivity = domain.getServiceAndActivityByAppt(voAppt);
						if(voServiceAndActivity != null)
						{
							form.getGlobalContext().Scheduling.setTheatreAppointment(voAP);
							form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity.getSlotActivity());
							form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity.getSessionService());
							form.getGlobalContext().Scheduling.setBookingSession(voAppt.getSession());
							form.getGlobalContext().Scheduling.setTheatreType(voAppt.getSessionIsNotNull() ? voAppt.getSession().getTheatreType() : null);
							form.getGlobalContext().RefMan.setCatsReferral(voReferral);
						}
						else
						{
							SessionServiceProcedureConsultantVo voServiceProcedureConsultant = domain.getServiceProcedureConsultantByAppt(voAppt);
							if(voServiceProcedureConsultant != null)
							{
								form.getGlobalContext().Scheduling.setTheatreAppointment(voAP);
								form.getGlobalContext().Scheduling.setTheatreConsultant(voServiceProcedureConsultant.getConsultant());
								form.getGlobalContext().Scheduling.setTheatreService(voServiceProcedureConsultant.getService());
								form.getGlobalContext().Scheduling.setTheatreProcedure(voServiceProcedureConsultant.getProcedure());
								form.getGlobalContext().Scheduling.setBookingSession(voAppt.getSession());
								form.getGlobalContext().Scheduling.setTheatreType(voAppt.getSessionIsNotNull() ? voAppt.getSession().getTheatreType() : null);
								form.getGlobalContext().RefMan.setCatsReferral(voReferral);
							}
						}
					}
					
					//WDEV-7323 Theatre Booking - if procedure has been populated
					if(form.getGlobalContext().Scheduling.getTheatreProcedureIsNotNull())
					{
						//WDEV-12918
						if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
							engine.open(form.getForms().RefMan.BookTheatreDialog);
						else
							engine.open(form.getForms().RefMan.BookTheatreSlot);
						
						return;
					}
					else
					{
						if(ConfigFlag.UI.BOOKAPPT_UI_TYPE.getValue().equals("CARE_UK"))
						{
							form.getGlobalContext().RefMan.setCatsReferral(voReferral);
							engine.open(form.getForms().RefMan.BookAppointment);
						}
						else
							engine.open(form.getForms().Scheduling.BookAppointment);
					}
				}
				else
					open();
			}
			if(result.equals(DialogResult.CANCEL))
			{
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				onBtnCancelClick();
			}
		}
		else if(formName.equals(form.getForms().Scheduling.AppointmentOutcomeDialog))
		{
			if(result.equals(DialogResult.OK))
				open();
		}
		else if(formName.equals(form.getForms().RefMan.TheatreAdmissionDialog) && result.equals(DialogResult.OK))
				open();
		//WDEV-12918
		else if(formName.equals(form.getForms().Scheduling.MoveAppointmentDialog) || formName.equals(form.getForms().RefMan.BookTheatreDialog) || formName.equals(form.getForms().RefMan.BookTheatreSlot))
		{
			if(result != null)
			{
				if(result.equals(DialogResult.OK))
				{
					open();
				}
			}
		}
	}
	
	private boolean cancelAppt() 
	{
		PatientTheatreBookingVo voAppt = form.grdAppts().getValue();
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
		{
			//appt status and status history
			voAppt.setApptStatus(Status_Reason.CANCELLED);
			voAppt.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
			
			Appointment_StatusVo voStatus = new Appointment_StatusVo();
			voStatus.setApptDate(voAppt.getAppointmentDate());
			voStatus.setApptTime(voAppt.getApptStartTime());
			voStatus.setStatusChangeDateTime(new DateTime());
			voStatus.setStatus(Status_Reason.CANCELLED);
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
					voAppt.setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
			}
			Appointment_StatusVoCollection voCollStatusHistory = voAppt.getApptStatusHistory();
			if(voCollStatusHistory == null)
				voCollStatusHistory =  new Appointment_StatusVoCollection();
			
			voCollStatusHistory.add(voStatus);
			voAppt.setCurrentStatusRecord(voStatus); // wdev-6034
			voAppt.setApptStatusHistory(voCollStatusHistory);	
		}

		String[] arrErrors = voAppt.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}	
		
		Booking_AppointmentVo voApptFull = null;
		try
		{
			voApptFull = domain.saveBookingAppt(voAppt, null);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			clearGridsAndInstanceControls();
			return false;
		}
		
		form.getGlobalContext().Scheduling.setBookingAppointment(voApptFull);
		form.getLocalContext().setDateAppt(form.dteAppt().getValue());
		return true;
	}

	protected void onDteApptValueChanged() throws PresentationLogicException
	{
		if(form.getLocalContext().getselectedPatient() != null)
		{
			listAppointmentsForPatientAndDate();
			clearInstanceControls();
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateContextMenuState();
	}
}
