//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.patienttheatreappointmentmanagement;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdPatientsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPatientsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setHospitalNumberReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isHospitalNumberReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showHospitalNumberOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForHospitalNumber(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getHospitalNumber()
		{
			return (String)super.row.get(0);
		}
		public void setHospitalNumber(String value)
		{
			super.row.set(0, value);
		}
		public void setCellHospitalNumberTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isSurnameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showSurnameOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForSurname(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getSurname()
		{
			return (String)super.row.get(1);
		}
		public void setSurname(String value)
		{
			super.row.set(1, value);
		}
		public void setCellSurnameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setNameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isNameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showNameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForName(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getName()
		{
			return (String)super.row.get(2);
		}
		public void setName(String value)
		{
			super.row.set(2, value);
		}
		public void setCellNameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setDOBReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isDOBReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showDOBOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForDOB(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getDOB()
		{
			return (String)super.row.get(3);
		}
		public void setDOB(String value)
		{
			super.row.set(3, value);
		}
		public void setCellDOBTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.core.vo.PatientShort getValue()
		{
			return (ims.core.vo.PatientShort)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientShort value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPatientsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPatientsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPatientsRow get(int index)
		{
			return new grdPatientsRow(super.collection.get(index));
		}
		public grdPatientsRow newRow()
		{
			return new grdPatientsRow(super.collection.newRow());
		}
		public grdPatientsRow newRow(boolean autoSelect)
		{
			return new grdPatientsRow(super.collection.newRow(autoSelect));
		}
		public grdPatientsRow newRowAt(int index)
		{
			return new grdPatientsRow(super.collection.newRowAt(index));
		}
		public grdPatientsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPatientsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPatientsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void setHospitalNumberCaption(String value)
		{
			this.grid.setColumnCaption(0, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.PatientShortCollection getValues()
		{
			ims.core.vo.PatientShortCollection listOfValues = new ims.core.vo.PatientShortCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientShort getValue()
		{
			return (ims.core.vo.PatientShort)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientShort value)
		{
			super.grid.setValue(value);
		}
		public grdPatientsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPatientsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPatientsRowCollection getRows()
		{
			return new grdPatientsRowCollection(super.grid.getRows());
		}
		public grdPatientsRow getRowByValue(ims.core.vo.PatientShort value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPatientsRow(row);
		}
		public void setHospitalNumberHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getHospitalNumberHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setDOBHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getDOBHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	public static class grdApptsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdApptsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setBookingReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isBookingReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showBookingOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Image getBooking()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setBooking(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellBookingTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setAppointmentTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isAppointmentTimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showAppointmentTimeOpened()
		{
			super.row.showOpened(1);
		}
		public String getAppointmentTime()
		{
			return (String)super.row.get(1);
		}
		public void setAppointmentTime(String value)
		{
			super.row.set(1, value);
		}
		public void setCellAppointmentTimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isProcedureReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showProcedureOpened()
		{
			super.row.showOpened(2);
		}
		public String getProcedure()
		{
			return (String)super.row.get(2);
		}
		public void setProcedure(String value)
		{
			super.row.set(2, value);
		}
		public void setCellProcedureTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isTypeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showTypeOpened()
		{
			super.row.showOpened(3);
		}
		public String getType()
		{
			return (String)super.row.get(3);
		}
		public void setType(String value)
		{
			super.row.set(3, value);
		}
		public void setCellTypeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isStatusReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showStatusOpened()
		{
			super.row.showOpened(4);
		}
		public String getStatus()
		{
			return (String)super.row.get(4);
		}
		public void setStatus(String value)
		{
			super.row.set(4, value);
		}
		public void setCellStatusTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.clinical.vo.PatientTheatreBookingVo getValue()
		{
			return (ims.clinical.vo.PatientTheatreBookingVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.PatientTheatreBookingVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdApptsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdApptsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdApptsRow get(int index)
		{
			return new grdApptsRow(super.collection.get(index));
		}
		public grdApptsRow newRow()
		{
			return new grdApptsRow(super.collection.newRow());
		}
		public grdApptsRow newRow(boolean autoSelect)
		{
			return new grdApptsRow(super.collection.newRow(autoSelect));
		}
		public grdApptsRow newRowAt(int index)
		{
			return new grdApptsRow(super.collection.newRowAt(index));
		}
		public grdApptsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdApptsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdApptsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.clinical.vo.PatientTheatreBookingVoCollection getValues()
		{
			ims.clinical.vo.PatientTheatreBookingVoCollection listOfValues = new ims.clinical.vo.PatientTheatreBookingVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.PatientTheatreBookingVo getValue()
		{
			return (ims.clinical.vo.PatientTheatreBookingVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.PatientTheatreBookingVo value)
		{
			super.grid.setValue(value);
		}
		public grdApptsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdApptsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdApptsRowCollection getRows()
		{
			return new grdApptsRowCollection(super.grid.getRows());
		}
		public grdApptsRow getRowByValue(ims.clinical.vo.PatientTheatreBookingVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdApptsRow(row);
		}
		public void setBookingHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getBookingHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setAppointmentTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getAppointmentTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuPatientTheatreApptManageMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuPatientTheatreApptManageMenuAdmitItem = factory.createMenuItem(startControlID.intValue() + 1, "Admit", true, false, new Integer(103108), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3050001)))
			contextMenus.Clinical.contextMenuPatientTheatreApptManageMenu.add(contextMenus.Clinical.contextMenuPatientTheatreApptManageMenuAdmitItem);
		contextMenus.Clinical.contextMenuPatientTheatreApptManageMenuDNAItem = factory.createMenuItem(startControlID.intValue() + 2, "DNA", true, false, new Integer(103158), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3050002)))
			contextMenus.Clinical.contextMenuPatientTheatreApptManageMenu.add(contextMenus.Clinical.contextMenuPatientTheatreApptManageMenuDNAItem);
		contextMenus.Clinical.contextMenuPatientTheatreApptManageMenuCancelledItem = factory.createMenuItem(startControlID.intValue() + 3, "Cancelled", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3050003)))
			contextMenus.Clinical.contextMenuPatientTheatreApptManageMenu.add(contextMenus.Clinical.contextMenuPatientTheatreApptManageMenuCancelledItem);
		contextMenus.Clinical.contextMenuPatientTheatreApptManageMenuMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Move", true, false, new Integer(102211), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3050004)))
			contextMenus.Clinical.contextMenuPatientTheatreApptManageMenu.add(contextMenus.Clinical.contextMenuPatientTheatreApptManageMenuMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuPatientTheatreApptManageMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 160, 360, 464, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,"Patients", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 376, 8, 464, 616, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Appointment View", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 360, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Search Criteria", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total : 0", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 384, 544, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 120, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOB:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 94, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital No.", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 68, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 42, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 760, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 680, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 104, 92, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 104, 66, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 104, 40, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 409, 41, 116, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, null, Boolean.TRUE, null, Boolean.FALSE, null}));

		// PartialDateBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 104, 120, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 199, 344, 393, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdPatientsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPatientsTemp);
		grdPatientsGrid grdPatients = (grdPatientsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPatientsGrid.class, m_grdPatientsTemp);
		grdPatients.addStringColumn("Hosp. No.", 0, 0, 95, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatients.addStringColumn("Surname", 0, 0, 90, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatients.addStringColumn("Forename", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPatients.addStringColumn("DOB", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdPatients);
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 384, 81, 448, 440, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdApptsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuPatientTheatreApptManageMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdApptsTemp);
		grdApptsGrid grdAppts = (grdApptsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdApptsGrid.class, m_grdApptsTemp);
		grdAppts.addImageColumn(" ", 0, 0, 30, true, 0);
		grdAppts.addStringColumn("Time", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addStringColumn("Procedure", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addStringColumn("Type", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAppts);

		// Time Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 432, 544, 72, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 528, 40, 22, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.Right, this.getImages().Core.RightDisabled, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 384, 40, 22, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.Left, this.getImages().Core.LeftDisabled, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 328, 104, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 296, 104, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for patients matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblTotal()
	{
		return (Label)super.getControl(3);
	}
	public Label lblDisplayPatId()
	{
		return (Label)super.getControl(6);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(9);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(10);
	}
	public TextBox txtDisplayId()
	{
		return (TextBox)super.getControl(11);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(12);
	}
	public TextBox txtSurname()
	{
		return (TextBox)super.getControl(13);
	}
	public DateControl dteAppt()
	{
		return (DateControl)super.getControl(14);
	}
	public PartialDateBox pdtDate()
	{
		return (PartialDateBox)super.getControl(15);
	}
	public grdPatientsGrid grdPatients()
	{
		return (grdPatientsGrid)super.getGrid(0);
	}
	public grdApptsGrid grdAppts()
	{
		return (grdApptsGrid)super.getGrid(1);
	}
	public TimeControl timTime()
	{
		return (TimeControl)super.getControl(18);
	}
	public ImageButton imbNextDate()
	{
		return (ImageButton)super.getControl(19);
	}
	public ImageButton imbPrevDate()
	{
		return (ImageButton)super.getControl(20);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(21);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(22);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			CcoSched = new CcoSchedForms();
			Scheduling = new SchedulingForms();
			RefMan = new RefManForms();
		}
		public final class CcoSchedForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CcoSchedForms()
			{
				ClinicViewArrival = new LocalFormName(128117);
			}
			public final FormName ClinicViewArrival;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				CancelAppointmentDialog = new LocalFormName(114160);
				BookAppointment = new LocalFormName(114149);
				AppointmentOutcomeDialog = new LocalFormName(114171);
				MoveAppointmentDialog = new LocalFormName(114107);
			}
			public final FormName CancelAppointmentDialog;
			public final FormName BookAppointment;
			public final FormName AppointmentOutcomeDialog;
			public final FormName MoveAppointmentDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				BookAppointment = new LocalFormName(134123);
				TheatreAdmissionDialog = new LocalFormName(134156);
				ArrivalSeenTimeDialog = new LocalFormName(134186);
				BookTheatreSlot = new LocalFormName(134208);
				BookTheatreDialog = new LocalFormName(134159);
			}
			public final FormName BookAppointment;
			public final FormName TheatreAdmissionDialog;
			public final FormName ArrivalSeenTimeDialog;
			public final FormName BookTheatreSlot;
			public final FormName BookTheatreDialog;
		}

		public CcoSchedForms CcoSched;
		public SchedulingForms Scheduling;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			CcoSched = new CcoSchedImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Left = new ImageHelper(102110, "Images/Core/left.gif", new Integer(16), new Integer(16));
				LeftDisabled = new ImageHelper(102111, "Images/Core/left_disabled.gif", new Integer(16), new Integer(16));
				Right = new ImageHelper(102112, "Images/Core/right.gif", new Integer(16), new Integer(16));
				RightDisabled = new ImageHelper(102113, "Images/Core/right_disabled.gif", new Integer(16), new Integer(16));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Left;
			public final ims.framework.utils.Image LeftDisabled;
			public final ims.framework.utils.Image Right;
			public final ims.framework.utils.Image RightDisabled;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final class CcoSchedImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CcoSchedImages()
			{
				First = new ImageHelper(128108, "Images/CcoSched/First.gif", new Integer(18), new Integer(18));
				Last = new ImageHelper(128111, "Images/CcoSched/Last.gif", new Integer(18), new Integer(18));
			}
			public final ims.framework.utils.Image First;
			public final ims.framework.utils.Image Last;
		}
		public final CoreImages Core;
		public final CcoSchedImages CcoSched;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_NewStatus = new ims.framework.ContextVariable("NewStatus", prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__NewStatus_" + componentIdentifier + "");
			cxl_selectedPatient = new ims.framework.ContextVariable("selectedPatient", prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier + "");
			cxl_DateAppt = new ims.framework.ContextVariable("DateAppt", prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__DateAppt_" + componentIdentifier + "");
			cxl_MessageBoxID = new ims.framework.ContextVariable("MessageBoxID", prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__MessageBoxID_" + componentIdentifier + "");
		}
		
		public boolean getNewStatusIsNotNull()
		{
			return !cxl_NewStatus.getValueIsNull(context);
		}
		public ims.scheduling.vo.lookups.Status_Reason getNewStatus()
		{
			return (ims.scheduling.vo.lookups.Status_Reason)cxl_NewStatus.getValue(context);
		}
		public void setNewStatus(ims.scheduling.vo.lookups.Status_Reason value)
		{
			cxl_NewStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NewStatus = null;
		public boolean getselectedPatientIsNotNull()
		{
			return !cxl_selectedPatient.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getselectedPatient()
		{
			return (ims.core.vo.PatientShort)cxl_selectedPatient.getValue(context);
		}
		public void setselectedPatient(ims.core.vo.PatientShort value)
		{
			cxl_selectedPatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedPatient = null;
		public boolean getDateApptIsNotNull()
		{
			return !cxl_DateAppt.getValueIsNull(context);
		}
		public ims.framework.utils.Date getDateAppt()
		{
			return (ims.framework.utils.Date)cxl_DateAppt.getValue(context);
		}
		public void setDateAppt(ims.framework.utils.Date value)
		{
			cxl_DateAppt.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DateAppt = null;
		public boolean getMessageBoxIDIsNotNull()
		{
			return !cxl_MessageBoxID.getValueIsNull(context);
		}
		public Integer getMessageBoxID()
		{
			return (Integer)cxl_MessageBoxID.getValue(context);
		}
		public void setMessageBoxID(Integer value)
		{
			cxl_MessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxID = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class PatientTheatreApptManageMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Admit = 1;
				public static final int DNA = 2;
				public static final int Cancelled = 3;
				public static final int MOVE = 4;
			}
			public void disableAllPatientTheatreApptManageMenuMenuItems()
			{
				this.contextMenuPatientTheatreApptManageMenuAdmitItem.setEnabled(false);
				this.contextMenuPatientTheatreApptManageMenuDNAItem.setEnabled(false);
				this.contextMenuPatientTheatreApptManageMenuCancelledItem.setEnabled(false);
				this.contextMenuPatientTheatreApptManageMenuMOVEItem.setEnabled(false);
			}
			public void hideAllPatientTheatreApptManageMenuMenuItems()
			{
				this.contextMenuPatientTheatreApptManageMenuAdmitItem.setVisible(false);
				this.contextMenuPatientTheatreApptManageMenuDNAItem.setVisible(false);
				this.contextMenuPatientTheatreApptManageMenuCancelledItem.setVisible(false);
				this.contextMenuPatientTheatreApptManageMenuMOVEItem.setVisible(false);
			}
			private Menu contextMenuPatientTheatreApptManageMenu;
			public ReadOnlyMenuItem getPatientTheatreApptManageMenuAdmitItem()
			{
				return this.contextMenuPatientTheatreApptManageMenuAdmitItem;
			}
			private MenuItem contextMenuPatientTheatreApptManageMenuAdmitItem;
			public ReadOnlyMenuItem getPatientTheatreApptManageMenuDNAItem()
			{
				return this.contextMenuPatientTheatreApptManageMenuDNAItem;
			}
			private MenuItem contextMenuPatientTheatreApptManageMenuDNAItem;
			public ReadOnlyMenuItem getPatientTheatreApptManageMenuCancelledItem()
			{
				return this.contextMenuPatientTheatreApptManageMenuCancelledItem;
			}
			private MenuItem contextMenuPatientTheatreApptManageMenuCancelledItem;
			public ReadOnlyMenuItem getPatientTheatreApptManageMenuMOVEItem()
			{
				return this.contextMenuPatientTheatreApptManageMenuMOVEItem;
			}
			private MenuItem contextMenuPatientTheatreApptManageMenuMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[168];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-LOS", "LOS");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ID", "ID_Service");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SPECIALTY", "Specialty");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-CUSTOMPROCEDUREDURATION", "CustomProcedureDuration");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTTCITIME", "AppointmentTCITime");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PASEVENT", "PASEvent");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[133] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[134] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[135] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-ID", "ID_Location");
			fields[136] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-NAME", "Name");
			fields[137] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-ISACTIVE", "IsActive");
			fields[138] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[139] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-TYPE", "Type");
			fields[140] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[141] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[142] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[143] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-ID", "ID_CATSReferralStatus");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-REFERRALSTATUS", "ReferralStatus");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-AUTHORINGUSER", "AuthoringUser");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-STATUSDATETIME", "StatusDateTime");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-COMMENT", "Comment");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-SECONDOPINIONCATEGORY", "SecondOpinionCategory");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_RefMan.TheatreBookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PatientTheatreAppointmentManagement.__internal_x_context__selectedPatient_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
