//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3943.18011)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.edischargesthk;

import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.DischargeSupplementaryNotesVo;
import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.enums.EDischargeComponentStatus;
import ims.clinical.vo.enums.EDischargeLastEvent;
import ims.clinical.vo.enums.SummaryEventType;
import ims.clinical.vo.lookups.AdditonalClinicalInformation;
import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.clinical.vo.lookups.DischargeSupplementaryLetterStatus;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final long NONE 			= 0;
	private static final long TAB_SUMM 		= -1;
	private static final long TAB_DIAG 		= -2;
	private static final long TAB_CLINICAL	= -3;
	private static final long TAB_OPS	 	= -4;
	private static final long TAB_NEONATAL 	= -5;
	private static final long TAB_PLASTICS 	= -6;
	private static final long TAB_FUTURE 	= -7;
	private static final long TAB_TTA 		= -8;
	private static final long TAB_MED 		= -9;
	private static final long TAB_PHARM 	= -10;
	private static final long TAB_PREVIEW 	= -11;
	private static final long TAB_READY 	= -12;
	private static final long TAB_SUPP	 	= -13;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//validateLoggedInUser(); WDEV-13536
		form.getLocalContext().setisReadOnly(false);
		initialise();
		open();
		form.setMode(FormMode.VIEW);
	}
	
	private void initialise()
	{
		form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		form.lyrDetails().tabPageSummary().ccSummary().initialise(form.getLocalContext().getSelectedSummaryInstance());
		//TTA has to be initialised also as it sets the state of another tab
		form.lyrDetails().tabPageTTA().ccTTA().initialize();
		
		if(form.getLocalContext().getSelectedSummaryInstanceIsNotNull())
		{
			if (form.getLocalContext().getSelectedSummaryInstance().isSummaryRecordComplete())
			{
				form.getLocalContext().setisReadOnly(true);
				updateControlState(TAB_SUPP);
			}
		}	
	}

	private void open()
	{
		
	}
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlState(TAB_SUPP);
	}
	
	private void updateControlState(long selectedTab)
	{	
		form.lyrDetails().tabPageMedication().setHeaderVisible(false);
		form.lyrDetails().tabPageClinicalInfo().setHeaderVisible(false);
		form.lyrDetails().tabPageDiagnosis().setHeaderVisible(false);
		form.lyrDetails().tabPageFuturePlan().setHeaderVisible(false);
		form.lyrDetails().tabPageTTA().setHeaderVisible(false);
		form.lyrDetails().tabPageOpsProcs().setHeaderVisible(false);
		form.lyrDetails().tabPagePharmacyApproval().setHeaderVisible(false);
		form.lyrDetails().tabPagePlasticSurgery().setHeaderVisible(false);
		form.lyrDetails().tabPagePreview().setHeaderVisible(false);
		form.lyrDetails().tabPageReady().setHeaderVisible(false);
		form.lyrDetails().tabPageNeonatal().setHeaderVisible(false);
		form.lyrDetails().tabPageSupplementary().setHeaderVisible(false);
		
		form.lnkReturn().setVisible((engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.EDischargeSTHKList) || engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PharmacyApprovalWorklist)) && form.getMode().equals(FormMode.VIEW));
		
		if(form.getLocalContext().getSelectedSummaryInstance() != null)
		{
			form.btnStart().setVisible(false);
			//Ops/Procs
			EDischargeSTHKSummaryVo voSummary = form.getLocalContext().getSelectedSummaryInstance();
			if(voSummary.getHasHadAnyProceduresPerformedIsNotNull() && voSummary.getHasHadAnyProceduresPerformed().equals(YesNo.YES))
			{
					form.lyrDetails().tabPageOpsProcs().setHeaderVisible(true);
			}
			else
			{
				if (form.lyrDetails().tabPageOpsProcs().isVisible())
				{
					form.lyrDetails().showtabPageSummary();
					form.lyrDetails().tabPageSummary().ccSummary().initialise(form.getLocalContext().getSelectedSummaryInstance());
				}
			}
			
			//Plastics / Neonatal
			if(voSummary.getAdditonalClinicalInfoIsNotNull())
			{
				if(voSummary.getAdditonalClinicalInfo().equals(AdditonalClinicalInformation.PLASTICS))
					form.lyrDetails().tabPagePlasticSurgery().setHeaderVisible(true);
				else
				{
					if (form.lyrDetails().tabPagePlasticSurgery().isVisible())
						
					{
						form.lyrDetails().showtabPageSummary();
						form.lyrDetails().tabPageSummary().ccSummary().initialise(form.getLocalContext().getSelectedSummaryInstance());
					}
				}
				if (voSummary.getAdditonalClinicalInfo().equals(AdditonalClinicalInformation.NEONATAL))
					form.lyrDetails().tabPageNeonatal().setHeaderVisible(true);
				else
					if (form.lyrDetails().tabPageNeonatal().isVisible())
					{
						form.lyrDetails().showtabPageSummary();
						form.lyrDetails().tabPageSummary().ccSummary().initialise(form.getLocalContext().getSelectedSummaryInstance());
					}
					
					
			}
			else
			{
				if (form.lyrDetails().tabPageNeonatal().isVisible() || form.lyrDetails().tabPagePlasticSurgery().isVisible())
				{
					form.lyrDetails().showtabPageSummary();
					form.lyrDetails().tabPageSummary().ccSummary().initialise(form.getLocalContext().getSelectedSummaryInstance());
				}
			}
			
			form.lyrDetails().tabPageMedication().setHeaderVisible(true);
			form.lyrDetails().tabPageClinicalInfo().setHeaderVisible(true);
			form.lyrDetails().tabPageDiagnosis().setHeaderVisible(true);
			form.lyrDetails().tabPageFuturePlan().setHeaderVisible(true);
			form.lyrDetails().tabPageTTA().setHeaderVisible(true);
			form.lyrDetails().tabPagePreview().setHeaderVisible(true);	
			form.lyrDetails().tabPageReady().setHeaderVisible(true);
							
			if(getSelectionMode().equals(FormMode.EDIT))
			{
				enableDisableTabs(false);
				if(form.getMode().equals(FormMode.VIEW))
					form.setMode(FormMode.EDIT);
			}
			else
			{
				enableDisableTabs(true);
				if(form.getMode().equals(FormMode.EDIT))
					form.setMode(FormMode.VIEW);
			}
			
			//Pharmacy Tab
			if (form.lyrDetails().tabPageTTA().ccTTA().getPharmacyStatusToBeSet() != null)
			{
				if (form.lyrDetails().tabPageTTA().ccTTA().getPharmacyStatusToBeSet().equals(EDischargeComponentStatus.HIDDEN))
				{
					form.lyrDetails().tabPagePharmacyApproval().setHeaderVisible(false);
				}
				else
				{
					form.lyrDetails().tabPagePharmacyApproval().setHeaderVisible(true && engine.hasRight(AppRight.PHARMACY_CAN_ACCESS_PHARMACY_TAB));
				}
			}
			
			 /* 
		 	Enabling/Disabling Tabs

			if(DischargeLetterStatus is Generated && DischargeSupplementaryLetterStatus is null or INGROGRESS)
		   	then
				1)Make all Tabs Readonly
				2)enableSupplementary
			else if(DischargeSupplementaryLetterStatus is Generated)
			then
				1)Make all Tabs Readonly
		  
			 */
			
			//All The other tabs
			if(voSummary.getDischargeSupplementaryLetterStatusIsNotNull() && voSummary.getDischargeSupplementaryLetterStatus().equals(DischargeSupplementaryLetterStatus.GENERATED))
			{
				form.getGlobalContext().Clinical.seteDischargeClinicalComplete(true);
				
				//set all the components to read only
				form.lyrDetails().tabPageMedication().ccMedication().setReadOnly();
				form.lyrDetails().tabPageClinicalInfo().ccClinicalInf().setReadOnly();
				form.lyrDetails().tabPageDiagnosis().ccDiagnosis().setReadOnly();
				form.lyrDetails().tabPageFuturePlan().ccFuturePlan().setReadOnly();
				form.lyrDetails().tabPageTTA().ccTTA().setReadOnly();
				form.lyrDetails().tabPageOpsProcs().ccOpsProcs().setReadOnly();
				form.lyrDetails().tabPagePharmacyApproval().ccPharmacyApproval().setReadOnly();
				form.lyrDetails().tabPagePlasticSurgery().ccPlasticSBCD().setReadOnly();
				form.lyrDetails().tabPagePreview().ccPreview().setReadOnly();
				form.lyrDetails().tabPageReady().ccReady().setReadOnly();
				form.lyrDetails().tabPageNeonatal().ccSpecialCBUD().setReadOnly();
				form.lyrDetails().tabPageSummary().ccSummary().setReadOnly();
				
				if(form.getMode().equals(FormMode.VIEW))
					form.lyrDetails().tabPageSupplementary().btnEditSupp().setEnabled(false);				
			}
			if(voSummary.getDischargeLetterStatusIsNotNull() && voSummary.getDischargeLetterStatus().equals(DischargeLetterStatus.GENERATED))
			{
				form.getGlobalContext().Clinical.seteDischargeClinicalComplete(true);
				
				//set all the components to read only
				form.lyrDetails().tabPageMedication().ccMedication().setReadOnly();
				form.lyrDetails().tabPageClinicalInfo().ccClinicalInf().setReadOnly();
				form.lyrDetails().tabPageDiagnosis().ccDiagnosis().setReadOnly();
				form.lyrDetails().tabPageFuturePlan().ccFuturePlan().setReadOnly();
				form.lyrDetails().tabPageTTA().ccTTA().setReadOnly();
				form.lyrDetails().tabPageOpsProcs().ccOpsProcs().setReadOnly();
				form.lyrDetails().tabPagePharmacyApproval().ccPharmacyApproval().setReadOnly();
				form.lyrDetails().tabPagePlasticSurgery().ccPlasticSBCD().setReadOnly();
				form.lyrDetails().tabPagePreview().ccPreview().setReadOnly();
				form.lyrDetails().tabPageReady().ccReady().setReadOnly();
				form.lyrDetails().tabPageNeonatal().ccSpecialCBUD().setReadOnly();
				form.lyrDetails().tabPageSummary().ccSummary().setReadOnly();
				
				//enable supplementary view mode
				if((voSummary.getDischargeSupplementaryLetterStatus() == null || !voSummary.getDischargeSupplementaryLetterStatus().equals(DischargeSupplementaryLetterStatus.GENERATED)) && form.getMode().equals(FormMode.VIEW))
					form.lyrDetails().tabPageSupplementary().btnEditSupp().setEnabled(true);
			}		
		}
		if (domain.isPasEventMissing(form.getGlobalContext().Core.getCurrentCareContext()))
		{
			//set all the components to read only
			form.lyrDetails().tabPageMedication().ccMedication().setReadOnly();
			form.lyrDetails().tabPageClinicalInfo().ccClinicalInf().setReadOnly();
			form.lyrDetails().tabPageDiagnosis().ccDiagnosis().setReadOnly();
			form.lyrDetails().tabPageFuturePlan().ccFuturePlan().setReadOnly();
			form.lyrDetails().tabPageTTA().ccTTA().setReadOnly();
			form.lyrDetails().tabPageOpsProcs().ccOpsProcs().setReadOnly();
			form.lyrDetails().tabPagePharmacyApproval().ccPharmacyApproval().setReadOnly();
			form.lyrDetails().tabPagePlasticSurgery().ccPlasticSBCD().setReadOnly();
			form.lyrDetails().tabPagePreview().ccPreview().setReadOnly();
			form.lyrDetails().tabPageReady().ccReady().setReadOnly();
			form.lyrDetails().tabPageNeonatal().ccSpecialCBUD().setReadOnly();
			form.lyrDetails().tabPageSummary().ccSummary().setReadOnly();
		}
		
		//WDEV-13536 - starts here
		if(form.btnStart().isVisible())
		{
			boolean isHcpUser = false;
			Object hcp = domain.getHcpUser();
			
			if(hcp instanceof HcpLiteVo)
				isHcpUser = true;
			
			form.btnStart().setEnabled(isHcpUser || form.getGlobalContext().Core.getCurrentCareContext().getResponsibleHCP() instanceof HcpLiteVo); 
		}
		//WDEV-13536 - ends here
	}

	private FormMode getSelectionMode()
	{
		if(form.lyrDetails().tabPageMedication().isVisible())
		{
			return form.lyrDetails().tabPageMedication().ccMedication().getMode();
		}
		else if(form.lyrDetails().tabPageClinicalInfo().isVisible())
		{
			return form.lyrDetails().tabPageClinicalInfo().ccClinicalInf().getMode();
		}
		else if(form.lyrDetails().tabPageDiagnosis().isVisible())
		{
			return form.lyrDetails().tabPageDiagnosis().ccDiagnosis().getMode();
		}
		else if(form.lyrDetails().tabPageFuturePlan().isVisible())
		{
			return form.lyrDetails().tabPageFuturePlan().ccFuturePlan().getMode();
		}
		else if(form.lyrDetails().tabPageTTA().isVisible())
		{
			return form.lyrDetails().tabPageTTA().ccTTA().getMode();
		}
		else if(form.lyrDetails().tabPageOpsProcs().isVisible())
		{
			return form.lyrDetails().tabPageOpsProcs().ccOpsProcs().getMode();
		}
		else if(form.lyrDetails().tabPagePharmacyApproval().isVisible())
		{
			return form.lyrDetails().tabPagePharmacyApproval().ccPharmacyApproval().getMode();
		}
		else if(form.lyrDetails().tabPagePlasticSurgery().isVisible())
		{
			return form.lyrDetails().tabPagePlasticSurgery().ccPlasticSBCD().getMode();
		}
		else if(form.lyrDetails().tabPagePreview().isVisible())
		{
			return form.lyrDetails().tabPagePreview().ccPreview().getMode();
		}
		else if(form.lyrDetails().tabPageReady().isVisible())
		{
			return form.lyrDetails().tabPageReady().ccReady().getMode();
		}
		else if(form.lyrDetails().tabPageNeonatal().isVisible())
		{
			return form.lyrDetails().tabPageNeonatal().ccSpecialCBUD().getMode();
		}
		else if(form.lyrDetails().tabPageSummary().isVisible())
		{
			return form.lyrDetails().tabPageSummary().ccSummary().getMode();
		}
		else if(form.lyrDetails().tabPageSupplementary().isVisible())
		{
			return form.getMode();
		}
	
		return FormMode.VIEW;
	}

	@Override
	protected void onLnkReturnClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(engine.getPreviousNonDialogFormName());
	}
	@Override
	protected void onBtnStartClick() throws ims.framework.exceptions.PresentationLogicException
	{
		/*WDEV-13536
		if (domain.getHcpLiteUser() == null)
		{
			engine.showMessage("The logged in user is not a HCP, and so cannot Start an eDischarge.");
			return;
		}*/
		
		//WDEV-12920 - check for SOE
		EDischargeSTHKSummaryVo summary = domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if(summary != null && summary.getID_SummaryIsNotNull())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedSummaryInstance(summary);
			updateControlState(TAB_SUPP);
		}
		else
		{
			form.getLocalContext().setSelectedSummaryInstance(new EDischargeSTHKSummaryVo());
		}
		
		form.lyrDetails().tabPageSummary().ccSummary().initialise(form.getLocalContext().getSelectedSummaryInstance());
	}
	@Override
	protected void onlyrDetailsTabChanged(ims.framework.LayerBridge tab)
	{
		if(tab.equals(form.lyrDetails().tabPageSummary()))
		{
			form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			form.lyrDetails().tabPageSummary().ccSummary().initialise(form.getLocalContext().getSelectedSummaryInstance());
		}
		else if (tab.equals(form.lyrDetails().tabPageDiagnosis()))
			form.lyrDetails().tabPageDiagnosis().ccDiagnosis().initialise(form.getLocalContext().getSelectedSummaryInstance());
		else if (tab.equals(form.lyrDetails().tabPageClinicalInfo()))
			form.lyrDetails().tabPageClinicalInfo().ccClinicalInf().initialise(form.getLocalContext().getSelectedSummaryInstance());
		else if (tab.equals(form.lyrDetails().tabPageOpsProcs()))
			form.lyrDetails().tabPageOpsProcs().ccOpsProcs().initialise(form.getLocalContext().getSelectedSummaryInstance()); 
		else if (tab.equals(form.lyrDetails().tabPageNeonatal()))
			form.lyrDetails().tabPageNeonatal().ccSpecialCBUD().initialise(form.getLocalContext().getSelectedSummaryInstance());
		else if (tab.equals(form.lyrDetails().tabPagePlasticSurgery()))
			form.lyrDetails().tabPagePlasticSurgery().ccPlasticSBCD().initialise(form.getLocalContext().getSelectedSummaryInstance());
		else if (tab.equals(form.lyrDetails().tabPageFuturePlan()))
			form.lyrDetails().tabPageFuturePlan().ccFuturePlan().initialise(form.getLocalContext().getSelectedSummaryInstance());
		else if (tab.equals(form.lyrDetails().tabPageTTA()))
			form.lyrDetails().tabPageTTA().ccTTA().initialize(form.getLocalContext().getSelectedSummaryInstance());
		else if (tab.equals(form.lyrDetails().tabPageMedication()))
			form.lyrDetails().tabPageMedication().ccMedication().initialise(form.getLocalContext().getSelectedSummaryInstance()); 
		else if (tab.equals(form.lyrDetails().tabPagePharmacyApproval()))
			form.lyrDetails().tabPagePharmacyApproval().ccPharmacyApproval().initialize(form.getLocalContext().getSelectedSummaryInstance()); 
		else if (tab.equals(form.lyrDetails().tabPagePreview()))
			form.lyrDetails().tabPagePreview().ccPreview().initialise();
		else if (tab.equals(form.lyrDetails().tabPageReady()))
			form.lyrDetails().tabPageReady().ccReady().initialise(form.getLocalContext().getSelectedSummaryInstance());
		else if (tab.equals(form.lyrDetails().tabPageSupplementary()))
			openSupplementary();
					
		updateControlState(NONE);
	}
	@Override
	protected void onCcDiagnosisValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.lyrDetails().tabPageDiagnosis().ccDiagnosis().getLastEvent() != null)
		{
			if(form.lyrDetails().tabPageDiagnosis().ccDiagnosis().getLastEvent() != null
				&& form.lyrDetails().tabPageDiagnosis().ccDiagnosis().getLastEvent().equals(EDischargeLastEvent.EDISCHARGE_SAVE))
			{
				form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
				form.lyrDetails().tabPageDiagnosis().ccDiagnosis().clearLastEvent();
			}
		}
		
		updateControlState(TAB_DIAG);
	}
	@Override
	protected void onCcOpsProcsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.lyrDetails().tabPageOpsProcs().ccOpsProcs().getLastEvent() != null)
		{
			if(form.lyrDetails().tabPageOpsProcs().ccOpsProcs().getLastEvent() != null
				&& form.lyrDetails().tabPageOpsProcs().ccOpsProcs().getLastEvent().equals(EDischargeLastEvent.EDISCHARGE_SAVE))
			{
				form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
				form.lyrDetails().tabPageOpsProcs().ccOpsProcs().clearLastEvent();
			}
		}
		
		updateControlState(TAB_OPS);
	}
	@Override
	protected void onBtnCancelSuppClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		openSupplementary();
	}
	
	/**
	 * This method will enable/disable other tabs and their components if we are editing any tab
	 * WDEV-12224 - Either disable or enable all tabs depending on need. Do not leave the editing tab header enabled as this
	 * will allow the user to click it and will set the screen in VIEW mode without the press of SAVE or CANCEL buttons
	 */
	private void enableDisableTabs(boolean enable) 
	{		
		form.lyrDetails().tabPageSummary().setHeaderEnabled(enable);
		form.lyrDetails().tabPageDiagnosis().setHeaderEnabled(enable);
		form.lyrDetails().tabPageClinicalInfo().setHeaderEnabled(enable);
		form.lyrDetails().tabPageOpsProcs().setHeaderEnabled(enable);
		form.lyrDetails().tabPageNeonatal().setHeaderEnabled(enable);
		form.lyrDetails().tabPagePlasticSurgery().setHeaderEnabled(enable);
		form.lyrDetails().tabPageFuturePlan().setHeaderEnabled(enable);
		form.lyrDetails().tabPageTTA().setHeaderEnabled(enable);
		form.lyrDetails().tabPageMedication().setHeaderEnabled(enable);
		form.lyrDetails().tabPagePharmacyApproval().setHeaderEnabled(enable);
		form.lyrDetails().tabPagePreview().setHeaderEnabled(enable);
		form.lyrDetails().tabPageReady().setHeaderEnabled(enable);
		form.lyrDetails().tabPageSupplementary().setHeaderEnabled(enable);
			
		form.lyrDetails().tabPageSupplementary().setHeaderVisible(form.getLocalContext().getSelectedSummaryInstanceIsNotNull() && form.getLocalContext().getSelectedSummaryInstance().isSummaryRecordComplete() && form.getLocalContext().getSelectedSummaryInstance().getDischargeLetterStatusIsNotNull() && form.getLocalContext().getSelectedSummaryInstance().getDischargeLetterStatus().equals(DischargeLetterStatus.GENERATED) ? true : false);
	}


	private void openSupplementary() 
	{
		if (form.getMode().equals(FormMode.EDIT))
			return;
		
		clearInstanceControls();
		DischargeSupplementaryNotesVo voNotes = domain.getSupplementary(form.getGlobalContext().Core.getCurrentCareContext());
		if (voNotes != null)
			populateScreenFromData(voNotes);
	
		form.getLocalContext().setSelectedRecord(voNotes);
		
		if (voNotes != null
				&& voNotes.getCompletedOnIsNotNull())
		{
			form.lyrDetails().tabPageSupplementary().btnEditSupp().setVisible(false);
			form.getLocalContext().setisReadOnly(true);
		}
		else
		{
			form.lyrDetails().tabPageSupplementary().btnEditSupp().setEnabled(true);
			form.lyrDetails().tabPageSupplementary().btnEditSupp().setVisible(true);
		}
	}

	private void clearInstanceControls() 
	{
		form.lyrDetails().tabPageSupplementary().ccAuthoring().setValue(null);
		form.lyrDetails().tabPageSupplementary().richTextSupplementary().setValue(null);
		form.lyrDetails().tabPageSupplementary().chkCompleted().setValue(null);
	}

	private DischargeSupplementaryNotesVo populateDataFromScreen() 
	{
		DischargeSupplementaryNotesVo voNotes = null;
		if (form.getLocalContext().getSelectedRecordIsNotNull())
			voNotes = form.getLocalContext().getSelectedRecord();
		else
			voNotes = new DischargeSupplementaryNotesVo();

		if (voNotes.getCareContext() == null)
			voNotes.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voNotes.setSupplementaryNote(form.lyrDetails().tabPageSupplementary().richTextSupplementary().getValue());
		voNotes.setAuthoringInformation(form.lyrDetails().tabPageSupplementary().ccAuthoring().getValue());
		if (form.lyrDetails().tabPageSupplementary().chkCompleted().getValue())
		{
			voNotes.setCompletedBy((MemberOfStaffRefVo)domain.getMosUser());
			voNotes.setCompletedOn(new DateTime());
		}
		return voNotes;
	}


	private boolean save() 
	{
		DischargeDetailsVo voDD = null;
		EDischargeSTHKSummaryVo voSumm = null;
		if (form.lyrDetails().tabPageSupplementary().chkCompleted().getValue())
		{
			voDD = domain.getDischargeDetails(form.getGlobalContext().Core.getCurrentCareContext());
			voDD.setDischargeSupplementaryLetterStatus(DischargeSupplementaryLetterStatus.REQUIRED);

			voSumm = domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voSumm.setDischargeSupplementaryLetterStatus(DischargeSupplementaryLetterStatus.REQUIRED);
		}
		String[] str = null;
		DischargeSupplementaryNotesVo voNotes = populateDataFromScreen();
		boolean flaglenght = false;
		if(voNotes.getSupplementaryNote().length() > 7500)
		{
			str = new String[]{"The length of Supplementary Note field has exceeded the limit"};
			flaglenght = true;
		}
		str = voNotes.validate(str);
		if (str != null && str.length > 0)
		{
			if(flaglenght)
			{
				for(int i = 0; i< str.length;i++)
				{
					if(str[i] == "The length of the field [supplementarynote] in the value object [ims.clinical.vo.DischargeSupplementaryNotesVo] is too big. It should be less or equal to 7500")
						str[i] = "";
				}
				
			}
			engine.showErrors(str);
			return false;
		}

		try 
		{
			voNotes = domain.saveSupplementaryAndDDAndSummary(voNotes, voDD, voSumm);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			openSupplementary();
			form.setMode(FormMode.VIEW);			
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.setMode(FormMode.VIEW);
			openSupplementary();
			return false;
		} 
		form.getLocalContext().setSelectedRecord(voNotes);
		form.setMode(FormMode.VIEW);			
		
		return true;
	}

	private void populateScreenFromData(DischargeSupplementaryNotesVo voNotes)
	{
		if (voNotes == null)
			return;
		
		form.lyrDetails().tabPageSupplementary().richTextSupplementary().setValue(voNotes.getSupplementaryNoteIsNotNull() ? voNotes.getSupplementaryNote() : null);
		form.lyrDetails().tabPageSupplementary().ccAuthoring().setValue(voNotes.getAuthoringInformationIsNotNull() ? voNotes.getAuthoringInformation() : null);
		form.lyrDetails().tabPageSupplementary().chkCompleted().setValue(voNotes.getCompletedOnIsNotNull() ? true : false);
	}

	@Override
	protected void onBtnSaveSuppClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.lyrDetails().tabPageSupplementary().richTextSupplementary().getValue().length() == 0)
		{
			engine.showMessage("Please enter some notes and save again.");
			return;
		}
		
		if (save())
			openSupplementary();
		else
			return;
	}
	@Override
	protected void onBtnEditSuppClick() throws ims.framework.exceptions.PresentationLogicException
	{
		openSupplementary();
		if (form.getLocalContext().getSelectedRecord() == null
			|| (form.getLocalContext().getSelectedRecord() != null
					&& form.getLocalContext().getSelectedRecord().getID_DischargeSupplementaryNotes() == null) )
			form.lyrDetails().tabPageSupplementary().ccAuthoring().initializeComponent();

		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onCcSummaryValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabPageSummary().ccSummary().getLastEvent() != null)
		{
			if(form.lyrDetails().tabPageSummary().ccSummary().getLastEvent().equals(SummaryEventType.CREATESUMMARY))
			{
				form.getLocalContext().setSelectedSummaryInstance(form.lyrDetails().tabPageSummary().ccSummary().getValue());
				updateControlState(TAB_SUMM);
			}
		}
	}

	@Override
	protected void onCcReadyValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabPageReady().ccReady().getLastEvent() != null && form.lyrDetails().tabPageReady().ccReady().getLastEvent().equals(EDischargeLastEvent.EDISCHARGE_SAVE))
		{
			form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			form.lyrDetails().tabPageReady().ccReady().clearLastEvent();
		}
			
		updateControlState(TAB_READY);
		
/*		if (form.getGlobalContext().Clinical.geteDischargeDisableTabs())
			enableDisableTabs(TAB_READY);
		else
			enableDisableTabs(NONE);

		form.lyrDetails().tabPageSummary().ccSummary().setReadOnly();
		form.lyrDetails().tabPageDiagnosis().ccDiagnosis().setReadOnly();
		form.lyrDetails().tabPageClinicalInfo().cc1().setReadOnly();
		form.lyrDetails().tabPageOpsProcs().ccOpsProcs().setReadOnly();
		form.lyrDetails().tabPageSPecialCBU().ccSpecialCBUD().setReadOnly();
		form.lyrDetails().tabPagePlasticSurgery().ccPlasticSBCD().setReadOnly();
		form.lyrDetails().tabPageFuturePlan().ccFuturePlan().setReadOnly();
		form.lyrDetails().tabPageMedsSThk().ccTTA().setReadOnly();
		form.lyrDetails().tabPageMedication().ccMedicationAdmission().setReadOnly();
		form.lyrDetails().tabPagePharmacyApproval().ccPharmacyApproval().setReadOnly(); 
		form.lyrDetails().tabPagePreview().ccPreview().setReadOnly();
		form.lyrDetails().tabPageReady().ccReady().setReadOnly();
*/
	}

	@Override
	protected void onCcSpecialCBUDValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabPageNeonatal().ccSpecialCBUD().getLastEvent() != null)
		{
			if(form.lyrDetails().tabPageNeonatal().ccSpecialCBUD().getLastEvent().equals(EDischargeLastEvent.EDISCHARGE_SAVE))
				form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			
			form.lyrDetails().tabPageNeonatal().ccSpecialCBUD().clearLastEvent();
		}		
		
		
		updateControlState(TAB_NEONATAL);
	}

	@Override
	protected void onCcTTAValueChanged() throws PresentationLogicException 
	{	
		if (EDischargeLastEvent.EDISCHARGE_SAVE.equals(form.lyrDetails().tabPageTTA().ccTTA().getLastEvent()))
		{
			form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			form.lyrDetails().tabPageTTA().ccTTA().clearLastEvent();
		}
		updateControlState(TAB_TTA);
	}

	@Override
	protected void onCcPharmacyApprovalValueChanged() throws PresentationLogicException 
	{	
		updateControlState(TAB_PHARM);
	}

	@Override
	protected void onCcClinicalInfValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabPageClinicalInfo().ccClinicalInf().getLastEvent() != null)
		{
			if(form.lyrDetails().tabPageClinicalInfo().ccClinicalInf().getLastEvent().equals(EDischargeLastEvent.EDISCHARGE_SAVE))
				form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			
			form.lyrDetails().tabPageClinicalInfo().ccClinicalInf().clearLastEvent();
		}		
		
		updateControlState(TAB_CLINICAL);
	}

	@Override
	protected void onCcMedicationValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabPageMedication().ccMedication().getLastEvent() != null)
		{
			if(form.lyrDetails().tabPageMedication().ccMedication().getLastEvent().equals(EDischargeLastEvent.EDISCHARGE_SAVE))
				form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			
			form.lyrDetails().tabPageMedication().ccMedication().clearLastEvent();
		}		
		updateControlState(TAB_MED);
		
	}

	@Override
	protected void onCcPlasticSBCDValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabPagePlasticSurgery().ccPlasticSBCD().getLastEvent() != null)
		{
			if(form.lyrDetails().tabPagePlasticSurgery().ccPlasticSBCD().getLastEvent().equals(EDischargeLastEvent.EDISCHARGE_SAVE))
				form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			
			form.lyrDetails().tabPagePlasticSurgery().ccPlasticSBCD().clearLastEvent();
		}		
		
		updateControlState(TAB_PLASTICS);
	}

	@Override
	protected void onCcPreviewValueChanged() throws PresentationLogicException
	{
		updateControlState(TAB_PREVIEW);
	}

	@Override
	protected void onCcFuturePlanValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabPageFuturePlan().ccFuturePlan().getLastEvent() != null)
		{
			if(form.lyrDetails().tabPageFuturePlan().ccFuturePlan().getLastEvent().equals(EDischargeLastEvent.EDISCHARGE_SAVE))
				form.getLocalContext().setSelectedSummaryInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			
			form.lyrDetails().tabPageFuturePlan().ccFuturePlan().clearLastEvent();
		}		
		updateControlState(TAB_FUTURE);
	}
}
