//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4535.14223)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.patientproceduresdialog;

import ims.clinical.forms.patientproceduresdialog.GenForm.grpFilterEnumeration;
import ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo;
import ims.clinical.vo.SurgicalAuditOperationDetailVo;
import ims.clinical.vo.lookups.CodingItemType;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.Specialty;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.vo.interfaces.IClinicalCodingValue;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void open()
	{
		clearControls();
		populateScreenFromData(form.getGlobalContext().Clinical.getSelectedPatientProcedureFromSurgicalAudit());	
	}
	private void clearControls()
	{
		form.ccProcedure().clear();
		form.chkPrimary().setValue(null);
	}
	
	private void populateScreenFromData(PatientProcedureForSurgicalAuditPreOpChecksVo patientProcedure)
	{
		if(patientProcedure == null)
			return;
		form.ccProcedure().setValue(patientProcedure);
		form.ccProcedure().setParentEditing(true);
		form.chkPrimary().setValue(patientProcedure.getIsPrimary());
		
	}
	private void initialize()
	{
		form.grpFilter().setEnabled(grpFilterEnumeration.rdoAll, form.getGlobalContext().Clinical.getSelectedPatientProcedureFromSurgicalAudit()==null);
		form.grpFilter().setEnabled(grpFilterEnumeration.rdoSpecialty, form.getGlobalContext().Clinical.getSelectedPatientProcedureFromSurgicalAudit()==null);
		
		form.ccProcedure().setCodingItemType(CodingItemType.PROCEDURE);
		form.ccProcedure().setSpecialty(getSpecialty());
		form.ccProcedure().setIsRequired(true);
		form.ccProcedure().setParentEditing(true);
		
		form.grpFilter().setValue(grpFilterEnumeration.rdoSpecialty);
		form.ccProcedure().setHotlist(new Boolean(true));
		
		form.ccProcedure().setEnabled(true);
		
		form.chkPrimary().setEnabled(!form.getGlobalContext().Clinical.getPatientProcedureMarkedAsPrimaryIsNotNull()||
				(form.getGlobalContext().Clinical.getSelectedPatientProcedureFromSurgicalAuditIsNotNull()?form.getGlobalContext().Clinical.getSelectedPatientProcedureFromSurgicalAudit().getIsPrimary():false));
		
		form.chkPrimary().setTooltip(form.getGlobalContext().Clinical.getPatientProcedureMarkedAsPrimaryIsNotNull()?form.getGlobalContext().Clinical.getPatientProcedureMarkedAsPrimary().getProcedureDescription() + " is already marked as Primary":"There is no procedure marked as Primary");
	}
	@Override
	protected void onCcProcedureValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	@Override
	protected void onRadioButtongrpFilterValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.ccProcedure().setHotlist(form.grpFilter().getValue().equals(grpFilterEnumeration.rdoAll) ? new Boolean(false) : new Boolean(true));
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}
	private boolean save()
	{
		PatientProcedureForSurgicalAuditPreOpChecksVo patientProcedureToSave =null;
		
		if (form.getGlobalContext().Clinical.getSelectedPatientProcedureFromSurgicalAudit() != null)
			patientProcedureToSave = populateDataFromScreen((PatientProcedureForSurgicalAuditPreOpChecksVo)form.getGlobalContext().Clinical.getSelectedPatientProcedureFromSurgicalAudit().clone());		
		else
			patientProcedureToSave = populateDataFromScreen(null);
		
		//String[] errors = patientProcedureToSave.validate(validateUIRules());
		String[] errors = patientProcedureToSave.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		form.getGlobalContext().Clinical.setSelectedPatientProcedureFromSurgicalAudit(patientProcedureToSave);
		/*
		try
		{
			form.getGlobalContext().Clinical.setSelectedPatientProcedureFromSurgicalAudit(domain.save(patientProcedureToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
		*/
		return true;
	}
	private PatientProcedureForSurgicalAuditPreOpChecksVo populateDataFromScreen(PatientProcedureForSurgicalAuditPreOpChecksVo patientProcedure)
	{
		if (patientProcedure==null)
		{
			patientProcedure=new PatientProcedureForSurgicalAuditPreOpChecksVo();
		}
		
		patientProcedure.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		patientProcedure.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());		
		patientProcedure.setInfoSource(SourceofInformation.CLINICALCONTACT);
		
		if (patientProcedure.getProcedureStatus()==null)
			patientProcedure.setProcedureStatus(PatientProcedureStatus.PLANNED);
		
		IClinicalCodingValue procDetails = form.ccProcedure().getValue();
		if (procDetails != null)
		{
			if (procDetails.getIClinicalCodingValue() instanceof ProcedureLiteVo)
			{
				patientProcedure.setProcedure((ProcedureLiteVo) procDetails.getIClinicalCodingValue());
				patientProcedure.setProcedureDescription(procDetails.getIClinicalCodingValueDescription());
			}
			else
			{
				throw new CodingRuntimeException("ProcedureLiteVo expected from component");
			}
		}
		else 
		{
			patientProcedure.setProcedureDescription(null);
		}		

		patientProcedure.setIsPrimary(form.chkPrimary().getValue());
		return patientProcedure;
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	private Specialty getSpecialty()
	{
		if ((form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()) && (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}
}
