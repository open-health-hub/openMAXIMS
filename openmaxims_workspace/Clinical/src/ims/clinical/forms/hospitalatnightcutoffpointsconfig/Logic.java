//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.hospitalatnightcutoffpointsconfig;

import ims.clinical.forms.hospitalatnightcutoffpointsconfig.GenForm.grdHospAtNightRow;
import ims.clinical.vo.HospitalAtNightCutOffPointsConfigVo;
import ims.clinical.vo.HospitalAtNightCutOffPointsConfigVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onGrdHospAtNightSelectionChanged() throws PresentationLogicException
	{
		selectInstance();
		updateControlsState();

	}

	@Override
	protected void onQmbHospitalTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		listHospitalSearch(value);
	}

	private void listHospitalSearch(String value)
	{
		LocSiteLiteVoCollection coll = null;

		coll = domain.listHospital(value);

		form.ctnHospDetails().qmbHospital().setValue(null);
		form.ctnHospDetails().qmbHospital().clear();

		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				LocSiteLiteVo vo = coll.get(i);
				form.ctnHospDetails().qmbHospital().newRow(vo, vo.getName());
			}
		}

		if (coll.size() == 1)
		{
			form.ctnHospDetails().qmbHospital().setValue(coll.get(0));
		}

		if (coll.size() > 1)
		{
			form.ctnHospDetails().qmbHospital().showOpened();
		}
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();

	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();

	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.HospAtNightCM.New:
				newInstance();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.HospAtNightCM.Edit:
				updateInstance();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.HospAtNightCM.Remove:
				removeInstance();
				break;
		}
	}

	private void removeInstance() throws PresentationLogicException
	{

		if (domain.isStale(form.getLocalContext().getSelectedHospital()))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedHospital(null);
			open();
			return;
		}

		try
		{
			domain.deleteHospitalConfig(form.getLocalContext().getSelectedHospital());
			form.getLocalContext().setSelectedHospital(null);
			open();
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
		}

	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		populateScreenFromData();
		form.setMode(FormMode.VIEW);
	}

	private void populateScreenFromData() throws PresentationLogicException
	{
		HospitalAtNightCutOffPointsConfigVoCollection configCollection = domain.listHospitalsConfig();
		populateHospitalConfigGrid(configCollection);
		populateInstanceControlsFromData(form.getLocalContext().getSelectedHospital());
	}

	private void populateHospitalConfigGrid(HospitalAtNightCutOffPointsConfigVoCollection configCollection) throws PresentationLogicException
	{

		form.grdHospAtNight().getRows().clear();

		if (configCollection == null)
			return;

		for (int i = 0; i < configCollection.size(); i++)
		{
			HospitalAtNightCutOffPointsConfigVo hospitalConfig = configCollection.get(i);
			grdHospAtNightRow row = form.grdHospAtNight().getRows().newRow();
			row.setHospName(hospitalConfig.getHospital().getName());
			row.setEndTime(hospitalConfig.getEndTime().toString());
			row.setStartTime(hospitalConfig.getStartTime().toString());
			row.setValue(hospitalConfig);
		}

		if (form.getLocalContext().getSelectedHospital() != null)
		{
			try
			{
				form.getLocalContext().setSelectedHospital(domain.getHospitalConfig(form.getLocalContext().getSelectedHospital()));
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setSelectedHospital(null);
				open();
				return ;
			}
			form.grdHospAtNight().setValue(form.getLocalContext().getSelectedHospital());
		}

	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedHospital(null);
		form.grdHospAtNight().setValue(null);
		clearInstanceControls();
		form.setMode(FormMode.EDIT);
	}
	
	public void clearInstanceControls()
	{
		form.ctnHospDetails().EndTime().setValue(null);
		form.ctnHospDetails().StartTime().setValue(null);
		form.ctnHospDetails().qmbHospital().clear();
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{

		HospitalAtNightCutOffPointsConfigVo hospitalToSave = populateDataFromScreen(form.getLocalContext().getSelectedHospital());

		String[] errors = hospitalToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		if (hospitalToSave.getID_HospitalAtNightCutOverPointsConfigIsNotNull() && domain.isStale(hospitalToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedHospital(null);
			open();
			return false;
		}

		try
		{
			hospitalToSave = domain.saveHospitalAtNight(hospitalToSave);
		}

		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		form.getLocalContext().setSelectedHospital(hospitalToSave);

		return true;

	}

	protected ims.clinical.vo.HospitalAtNightCutOffPointsConfigVo populateDataFromScreen(ims.clinical.vo.HospitalAtNightCutOffPointsConfigVo hospital)
	{
		if (hospital == null)
		{
			hospital = new HospitalAtNightCutOffPointsConfigVo();
		}

		hospital.setHospital(form.ctnHospDetails().qmbHospital().getValue());
		hospital.setStartTime(form.ctnHospDetails().StartTime().getValue());
		hospital.setEndTime(form.ctnHospDetails().EndTime().getValue());

		return hospital;
	}

	public void updateControlsState()
	{
		form.ctnHospDetails().setCollapsed(!((form.grdHospAtNight().getValue() != null && form.getMode().equals(FormMode.VIEW)) || form.getMode().equals(FormMode.EDIT)));
		
		if (form.getMode() == FormMode.VIEW)
		{
			form.btnEdit().setVisible(form.grdHospAtNight().getValue() != null);
			form.btnEdit().setEnabled(form.grdHospAtNight().getValue() != null);
		}

		form.getContextMenus().Clinical.getHospAtNightCMNewItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().Clinical.getHospAtNightCMEditItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdHospAtNight().getValue() instanceof HospitalAtNightCutOffPointsConfigVo);
		form.getContextMenus().Clinical.getHospAtNightCMRemoveItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdHospAtNight().getValue() instanceof HospitalAtNightCutOffPointsConfigVo);
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	private void selectInstance() throws PresentationLogicException
	{
		if (form.grdHospAtNight().getValue() instanceof HospitalAtNightCutOffPointsConfigVo)
		{
			HospitalAtNightCutOffPointsConfigVo selectedHospital = null;
			
			try
			{
				selectedHospital = domain.getHospitalConfig(form.grdHospAtNight().getValue());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
		
			}
			form.getLocalContext().setSelectedHospital(selectedHospital);
			populateInstanceControlsFromData(selectedHospital);
		}
	}

	private void populateInstanceControlsFromData(HospitalAtNightCutOffPointsConfigVo hospitalConfig)
	{

		clearInstanceControls();

		if (hospitalConfig == null)
			return;

		if (hospitalConfig.getHospitalIsNotNull())
		{
			form.ctnHospDetails().qmbHospital().newRow(hospitalConfig.getHospital(), hospitalConfig.getHospital().getName());
			form.ctnHospDetails().qmbHospital().setValue(hospitalConfig.getHospital());
		}
		form.ctnHospDetails().EndTime().setValue(hospitalConfig.getEndTime());
		form.ctnHospDetails().StartTime().setValue(hospitalConfig.getStartTime());
	}
}
