//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.20 build 40803.1400)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.dischargeinpatient;

import ims.clinical.forms.dischargeinpatient.GenForm.layerControl1Layer.tab1Container.gridActionsRow;
import ims.clinical.forms.dischargeinpatient.GenForm.layerControl1Layer.tab2Container.gridFunctionalRow;
import ims.coe.vo.Discharge;
import ims.coe.vo.DischargeActions;
import ims.coe.vo.DischargeActionsCollection;
import ims.coe.vo.DischargeAssessment;
import ims.coe.vo.DischargeFunctional;
import ims.coe.vo.DischargeFunctionalCollection;
import ims.coe.vo.lookups.LookupHelper;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;

import java.text.ParseException;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}

	protected void onbPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Core.Reports);
	}

	protected void onBtnUpdateActionClick() throws PresentationLogicException
	{
		form.layerControl1().tab1().btnUpdateAction().setVisible(false);
		form.layerControl1().tab1().gridActions().setReadOnly(false);
		enableNewUpdateActionButtons(false);
		enableNewUpdateFuncAssButtons(false);
		showSaveCancelActionsButtons(true);
		showSaveCancelFuncAssButtons(false);
		form.setMode(FormMode.EDIT);
	}

	protected void onBtnDischargeClick() throws PresentationLogicException
	{
		engine.open(form.getForms().COE.DischargeDialog);
	}

	protected void onBtnCancelActionsClick() throws PresentationLogicException
	{
		open();
		form.setMode(FormMode.VIEW);
	}

	// Save the Actions
	protected void onBtnSaveActionsClick() throws PresentationLogicException
	{
		if (form.layerControl1().tab1().dateCommenced().getValue() != null)
		{
			Date today = new Date();
			if (form.layerControl1().tab1().dateCommenced().getValue().isLessThan(today))
			{
				engine.showMessage("The Planned Discharge Date cannot be in the past.");
				return;
			}
		}
		Discharge dischargeVO = form.getLocalContext().getDischargeToUpdate();
		if (dischargeVO == null)
			dischargeVO = new Discharge();

		// Populate Discharge Actions
		if (populateDischargeActionVO(dischargeVO))
		{
			saveRecords(dischargeVO);
		}
	}

	// Save the functional assessment
	protected void onBtnSaveFuncAssClick() throws PresentationLogicException
	{
		Discharge dischargeVO = form.getLocalContext().getDischargeToUpdate();
		if (dischargeVO == null)
			dischargeVO = new Discharge();

		// Populate functional Assessment
		if (populateFunctionalVO(dischargeVO))
		{
			saveRecords(dischargeVO);
		}
	}

	private void saveRecords(Discharge dischargeVO)
	{
		if (saveDischargeVO(dischargeVO))
		{
			open();
			form.setMode(FormMode.VIEW);
		}
	}

	private boolean populateDischargeActionVO(Discharge dischargeVO)
	{
		if (form.layerControl1().tab1().dateCommenced().getValue() == null)
		{
			showMessage("Please enter planned discharged date.");
			return false;
		}
		dischargeVO.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		dischargeVO.setDateCommenced(form.layerControl1().tab1().dateCommenced().getValue());
		dischargeVO.setDestination(form.layerControl1().tab1().comDest().getValue());
		// Action List
		DischargeActions actionVO = null;
		Date date = null;
		// Clear the Action Collection
		dischargeVO.setActions(new DischargeActionsCollection());
		for (int i = 0; i < form.layerControl1().tab1().gridActions().getRows().size(); i++)
		{
			gridActionsRow row = form.layerControl1().tab1().gridActions().getRows().get(i);
			if (row.getColStatus())
			{
				actionVO = new DischargeActions();
				if (dischargeVO.getActions() == null)
					dischargeVO.setActions(new DischargeActionsCollection());

				actionVO.setActionList(row.getColAction());
				actionVO.setStatus(new Boolean(row.getColStatus()));
				date = null;
				if (row.getColActionDate() != null)
				{
					try
					{
						date = new Date(row.getColActionDate(), DateFormat.STANDARD);
					}
					catch (ParseException e)
					{
						showMessage(e.getMessage());
					}
					actionVO.setDate(date);
				}
				if (row.getColBy() != null && row.getColByValue() != null)
					actionVO.setHCP(row.getColByValue());
				actionVO.setDetails(row.getColDetails());
				// Add the Action VO to the collection
				dischargeVO.getActions().add(actionVO);
			}
		}

		return true;
	}

	private boolean populateFunctionalVO(Discharge dischargeVO)
	{
		// Populate Discharge Assessment VO
		if (!dischargeVO.getAssessmentIsNotNull())
			dischargeVO.setAssessment(new DischargeAssessment());

		DateTime dt = new DateTime(form.layerControl1().tab2().dteFuncAssess().getValue(), form.layerControl1().tab2().timFuncAssess().getValue());
		dischargeVO.getAssessment().setDateTime(dt);

		Object hcpLite = domain.getHcpLiteUser();
		dischargeVO.getAssessment().setHCP(hcpLite != null ? (HcpLiteVo) hcpLite : null);
		if (dischargeVO.getCareContext() == null)
			dischargeVO.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		dischargeVO.setNotes(form.layerControl1().tab2().textBoxNotes().getValue());
		// Clear the Functional and Support Collection
		dischargeVO.getAssessment().setFunctionalAndSupport(new DischargeFunctionalCollection());
		for (int i = 0; i < form.layerControl1().tab2().gridFunctional().getRows().size(); i++)
		{
			populateVo(form.layerControl1().tab2().gridFunctional().getRows().get(i), dischargeVO);
		}

		return true;
	}

	private void populateVo(gridFunctionalRow row, Discharge dischargeVO)
	{
		if (row.getRows().size() > 0)
		{
			for (int i = 0; i < row.getRows().size(); i++)
				populateVo(row.getRows().get(i), dischargeVO);
		}
		else
		{
			if (row.getColStatus() != null)
			{
				DischargeFunctional functionalVO = new DischargeFunctional();
				functionalVO.setFunctionalSupports(row.getColFunction());
				functionalVO.setStatus(row.getColStatus());
				functionalVO.setDetails(row.getColDetails());
				if (dischargeVO.getAssessment().getFunctionalAndSupport() == null)
					dischargeVO.getAssessment().setFunctionalAndSupport(new DischargeFunctionalCollection());
				dischargeVO.getAssessment().getFunctionalAndSupport().add(functionalVO);
			}
		}
	}

	protected void onBtnNewActionClick() throws PresentationLogicException
	{
		form.layerControl1().tab1().btnNewAction().setVisible(false);
		form.layerControl1().tab1().gridActions().setReadOnly(false);
		enableNewUpdateActionButtons(false);
		enableNewUpdateFuncAssButtons(false);
		showSaveCancelActionsButtons(true);
		showSaveCancelFuncAssButtons(false);
		form.setMode(FormMode.EDIT);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().COE.DischargeDialog) && result.equals(DialogResult.OK))
		{
			Discharge dischargeVO = form.getLocalContext().getDischargeToUpdate();
			if (dischargeVO == null)
				dischargeVO = new Discharge();
			dischargeVO.setDateTimeDischarged(form.getGlobalContext().COE.DischargeImpatient.getDischargeDateTime());

			Object hcpLite = domain.getHcpLiteUser();
			dischargeVO.setHCP(hcpLite != null ? (HcpLiteVo) hcpLite : null);

			if (saveDischargeVO(dischargeVO))
			{
				if (dischargeVO.getDateTimeDischargedIsNotNull())
				{
					try
					{
						form.getGlobalContext().Core.setCurrentCareContext(domain.updateCareContextAndEpisodeOfCareWithEndDateTime(dischargeVO.getCareContext(), dischargeVO.getDateTimeDischarged()));
					}
					catch (StaleObjectException e)
					{
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					}
				}
				form.setMode(FormMode.VIEW);
				open();
			}
		}
		else if (result.equals(DialogResult.OK) && formName.equals(form.getForms().Core.Reports))
		{
			printReport();
		}
	}

	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			showSaveCancelActionsButtons(false);
			showSaveCancelFuncAssButtons(false);
		}
		else if (form.getMode().equals(FormMode.EDIT))
		{
			enableNewUpdateFuncAssButtons(false);
			enableNewUpdateActionButtons(false);
			form.layerControl1().tab1().btnDischarge().setVisible(false);
		}
	}

	private void open()
	{
		// Clear local context
		if (form.getLocalContext().getDischargeToUpdate() != null)
			form.getLocalContext().setDischargeToUpdate(null);
		form.layerControl1().tab1().gridActions().setReadOnly(true);
		form.layerControl1().tab2().gridFunctional().setReadOnly(true);
		form.layerControl1().settab1Enabled(true);
		form.layerControl1().settab2Enabled(true);

		form.layerControl1().tab2().bPrint().setEnabled(false);

		enableNewUpdateFuncAssButtons(true);
		enableNewUpdateActionButtons(true);
		clearControls();
		populateGrids();

		if (getDischargeRecord())
		{
			if (form.getLocalContext().getDischargeToUpdate().getDateTimeDischarged() != null)
			{
				form.layerControl1().tab1().btnNewAction().setVisible(false);
				form.layerControl1().tab1().btnUpdateAction().setVisible(false);
				form.layerControl1().tab1().btnDischarge().setVisible(false);
			}
			else
			{
				// We have a record but it's of functional type
				if (form.getLocalContext().getDischargeToUpdate().getDateCommencedIsNotNull())
				{
					form.layerControl1().tab1().btnNewAction().setVisible(false);
					form.layerControl1().tab1().btnUpdateAction().setVisible(true);
					form.layerControl1().tab1().btnDischarge().setVisible(true);
				}
				else
				{
					form.layerControl1().tab1().btnNewAction().setVisible(true);
					form.layerControl1().tab1().btnUpdateAction().setVisible(false);
					form.layerControl1().tab1().btnDischarge().setVisible(false);
				}
			}

			Discharge dischargeVO = domain.getDischarge(form.getGlobalContext().Core.getCurrentCareContext());
			if (dischargeVO != null && dischargeVO.getAssessmentIsNotNull())
			{
				// Discharge Assessment Record Exists
				form.layerControl1().tab2().btnNewFuncAss().setVisible(false);
				form.layerControl1().tab2().btnUpdateFuncAss().setVisible(true);
			}
			else
			{
				form.layerControl1().tab2().btnNewFuncAss().setVisible(true);
				form.layerControl1().tab2().btnUpdateFuncAss().setVisible(false);
			}
		}
		else
		{
			// Action
			form.layerControl1().tab1().btnNewAction().setVisible(true);
			form.layerControl1().tab1().btnUpdateAction().setVisible(false);
			form.layerControl1().tab1().btnDischarge().setVisible(false);

			// Assessment
			form.layerControl1().tab2().btnNewFuncAss().setVisible(true);
			form.layerControl1().tab2().btnUpdateFuncAss().setVisible(false);
		}
	}

	private boolean getDischargeRecord()
	{
		Discharge dischargeVO = domain.getDischarge(form.getGlobalContext().Core.getCurrentCareContext());
		// Save the Value Object into the context
		form.getLocalContext().setDischargeToUpdate(dischargeVO);
		form.getGlobalContext().COE.setDischargeInpatient(dischargeVO);

		if (dischargeVO == null)
			return false;

		populateControls(dischargeVO);

		form.layerControl1().tab2().bPrint().setEnabled(true);

		return true;
	}

	private void populateControls(Discharge dischargeVO)
	{
		populateActionsDetails(dischargeVO);
		populateFunctionalDetails(dischargeVO);
	}

	private void populateActionsDetails(Discharge dischargeVO)
	{
		form.layerControl1().tab1().dateCommenced().setValue(dischargeVO.getDateCommenced());
		form.layerControl1().tab1().comDest().setValue(dischargeVO.getDestination());
		if (dischargeVO.getDateTimeDischarged() != null)
		{
			form.layerControl1().tab1().textBoxDate().setValue(dischargeVO.getDateTimeDischarged().getDate().toString(DateFormat.STANDARD));
			form.layerControl1().tab1().textBoxTime().setValue(dischargeVO.getDateTimeDischarged().getTime().toString(TimeFormat.DEFAULT));
		}
		if (dischargeVO.getHCP() != null)
			form.layerControl1().tab1().textBoxBy().setValue(dischargeVO.getHCP().toString());

		// Action List Grid
		if (dischargeVO.getActions() != null)
		{
			for (int i = 0; i < dischargeVO.getActions().size(); i++)
			{
				gridActionsRow row = null;
				for (int j = 0; j < form.layerControl1().tab1().gridActions().getRows().size(); j++)
				{
					row = form.layerControl1().tab1().gridActions().getRows().get(j);
					if (dischargeVO.getActions().get(i).getActionList().equals(row.getColAction()))
					{
						row.setColStatus(dischargeVO.getActions().get(i).getStatus().booleanValue());
						if (dischargeVO.getActions().get(i).getDate() != null)
							row.setColActionDate(dischargeVO.getActions().get(i).getDate().toString(DateFormat.STANDARD));
						if (dischargeVO.getActions().get(i).getHCP() != null)
						{
							row.setColBy(dischargeVO.getActions().get(i).getHCP().toString());
							row.setColByValue(dischargeVO.getActions().get(i).getHCP());

						}
						else
							row.setColByValue(null);

						row.setColDetails(dischargeVO.getActions().get(i).getDetails());
						row.setValue(dischargeVO.getActions().get(i));
						break;
					}
				}
			}
		}
	}

	private void populateFunctionalDetails(Discharge dischargeVO)
	{
		// Notes
		form.layerControl1().tab2().textBoxNotes().setValue(dischargeVO.getNotes());
		// Functional Assessment Grid
		if (dischargeVO.getAssessmentIsNotNull() && dischargeVO.getAssessment().getFunctionalAndSupportIsNotNull())
		{
			for (int i = 0; i < dischargeVO.getAssessment().getFunctionalAndSupport().size(); i++)
			{
				for (int j = 0; j < form.layerControl1().tab2().gridFunctional().getRows().size(); j++)
				{
					populateFunctionalRow(dischargeVO.getAssessment().getFunctionalAndSupport().get(i), form.layerControl1().tab2().gridFunctional().getRows().get(j));
				}
			}
		}
		// Functional Assessment
		if (dischargeVO.getAssessmentIsNotNull())
		{
			if (dischargeVO.getAssessment().getDateTimeIsNotNull())
			{
				form.layerControl1().tab2().dteFuncAssess().setValue(dischargeVO.getAssessment().getDateTime().getDate());
				form.layerControl1().tab2().timFuncAssess().setValue(dischargeVO.getAssessment().getDateTime().getTime());
			}
			if (dischargeVO.getAssessment().getHCPIsNotNull())
				form.layerControl1().tab2().txtHCP().setValue(dischargeVO.getAssessment().getHCP().toString());
		}
	}

	// Recursive method - for the case when the hierarchical lookup will contain
	// more than 1 level of clidren
	private void populateFunctionalRow(DischargeFunctional dischargeVO, gridFunctionalRow parentRow)
	{
		if (parentRow.getRows().size() > 0)
		{
			for (int i = 0; i < parentRow.getRows().size(); i++)
				populateFunctionalRow(dischargeVO, parentRow.getRows().get(i));
		}
		else
		{
			if (dischargeVO.getFunctionalSupports().equals(parentRow.getColFunction()))
			{
				parentRow.setColStatus(dischargeVO.getStatus());
				parentRow.setColDetails(dischargeVO.getDetails());
				parentRow.setValue(dischargeVO);
			}
		}
	}

	private void populateActionsGrid()
	{
		if (form.layerControl1().tab1().gridActions().getRows().size() == 0)
		{
			ims.coe.vo.lookups.DischargeActionsCollection coll = LookupHelper.getDischargeActions(domain.getLookupService());
			for (int i = 0; i < coll.size(); i++)
			{
				GenForm.layerControl1Layer.tab1Container.gridActionsRow row = form.layerControl1().tab1().gridActions().getRows().newRow();
				row.setColAction(coll.get(i));
				row.setTooltipForColAction(coll.get(i).getText());
			}
		}
	}

	private void populateFunctionalAssmntGrid()
	{
		if (form.layerControl1().tab2().gridFunctional().getRows().size() == 0)
		{
			form.layerControl1().tab2().gridFunctional().populateTree(LookupHelper.getDischargeFunctional(domain.getLookupService()));
			// for(int i=0;
			// i<form.layerControl1().tab2().gridFunctional().getAllRows().length;
			// i++)
			// form.layerControl1().tab2().gridFunctional().getAllRows()[i].setColByValue(null);
			form.layerControl1().tab2().gridFunctional().expandAll();
		}
		// Change the colour of the roots
		for (int i = 0; i < form.layerControl1().tab2().gridFunctional().getRows().size(); i++)
		{
			GenForm.layerControl1Layer.tab2Container.gridFunctionalRow row = form.layerControl1().tab2().gridFunctional().getRows().get(i);
			if (row.getColFunction().equals(ims.coe.vo.lookups.DischargeFunctional.AVAILABLESUPPORTS) || row.getColFunction().equals(ims.coe.vo.lookups.DischargeFunctional.FUNCTIONALASSESSMENTREQUIRESASSISTANCE) || row.getColFunction().equals(ims.coe.vo.lookups.DischargeFunctional.RECOMMENDEDSUPPORTREFERRED))
				row.setBackColor(Color.Bisque);
		}
	}

	private void populateGrids()
	{
		form.layerControl1().tab1().gridActions().getRows().clear();
		populateActionsGrid();

		form.layerControl1().tab2().gridFunctional().getRows().clear();
		form.layerControl1().tab2().textBoxNotes().setValue("");

		populateFunctionalAssmntGrid();
	}

	private void showMessage(String message)
	{
		engine.showMessage(message);
	}

	private void displayErrors(String[] errors)
	{
		engine.showErrors(errors);
	}

	private void clearControls()
	{
		form.layerControl1().tab1().dateCommenced().setValue(null);
		form.layerControl1().tab1().comDest().setValue(null);
		form.layerControl1().tab1().textBoxDate().setValue("");
		form.layerControl1().tab1().textBoxTime().setValue("");
		form.layerControl1().tab1().textBoxBy().setValue("");
		form.layerControl1().tab2().dteFuncAssess().setValue(null);
		form.layerControl1().tab2().timFuncAssess().setValue(null);
		form.layerControl1().tab2().txtHCP().setValue(null);
	}

	private boolean saveDischargeVO(Discharge dischargeVo)
	{
		// Validate VO && Handle Errors
		String[] errors = dischargeVo.validate();
		if (errors != null)
		{
			displayErrors(errors);
			return false;
		}

		// Save Vo
		try
		{
			domain.saveDischarge(dischargeVo);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.setMode(FormMode.VIEW);
			open();
			return false;
		}

		return true;
	}

	protected void onGridActionsGridCheckBoxClicked(int column, gridActionsRow row, boolean isChecked) throws PresentationLogicException
	{
		if (isChecked)
		{
			row.setColActionDate(new Date().toString(DateFormat.STANDARD));

			Object hcpLite = domain.getHcpLiteUser();
			row.setColByValue(hcpLite != null ? (HcpLiteVo) hcpLite : null);
			row.setColBy(hcpLite != null ? (((HcpLiteVo) hcpLite).getName() != null ? ((HcpLiteVo) hcpLite).getName().toString() : null) : null);
		}
		else
		{
			row.setColActionDate(null);
			row.setColBy("");
			row.setColDetails("");
			// row.setReadOnly(true);
		}

	}

	protected void onBtnNewFuncAssClick() throws PresentationLogicException
	{
		// Enable Controls
		form.layerControl1().tab2().btnNewFuncAss().setVisible(false);
		form.layerControl1().tab2().btnUpdateFuncAss().setVisible(false);
		form.layerControl1().tab2().gridFunctional().setReadOnly(false);

		// Set Default Values: Date/Time & HCP
		form.layerControl1().tab2().dteFuncAssess().setValue(new Date());
		form.layerControl1().tab2().timFuncAssess().setValue(new Time());

		Object hcpLite = domain.getHcpLiteUser();
		form.layerControl1().tab2().txtHCP().setValue(hcpLite != null ? (((HcpLiteVo) hcpLite).getName() != null ? ((HcpLiteVo) hcpLite).getName().toString() : null) : null);

		enableNewUpdateActionButtons(false);
		enableNewUpdateFuncAssButtons(false);
		showSaveCancelActionsButtons(false);
		showSaveCancelFuncAssButtons(true);

		form.setMode(FormMode.EDIT);
	}

	protected void onBtnCancelFuncAssClick() throws PresentationLogicException
	{
		open();
		form.setMode(FormMode.VIEW);
	}

	protected void onBtnUpdateFuncAssClick() throws PresentationLogicException
	{
		form.layerControl1().settab1Enabled(false);
		form.layerControl1().tab2().gridFunctional().setReadOnly(false);
		enableNewUpdateActionButtons(false);
		enableNewUpdateFuncAssButtons(false);
		showSaveCancelActionsButtons(false);
		showSaveCancelFuncAssButtons(true);
		form.setMode(FormMode.EDIT);
	}

	private void enableNewUpdateFuncAssButtons(boolean bValue)
	{
		form.layerControl1().tab2().btnNewFuncAss().setEnabled(bValue);
		form.layerControl1().tab2().btnUpdateFuncAss().setEnabled(bValue);
	}

	private void showSaveCancelFuncAssButtons(boolean bValue)
	{
		form.layerControl1().tab2().btnSaveFuncAss().setVisible(bValue);
		form.layerControl1().tab2().btnCancelFuncAss().setVisible(bValue);
	}

	private void enableNewUpdateActionButtons(boolean bValue)
	{
		form.layerControl1().tab1().btnNewAction().setEnabled(bValue);
		form.layerControl1().tab1().btnUpdateAction().setEnabled(bValue);
	}

	private void showSaveCancelActionsButtons(boolean bValue)
	{
		form.layerControl1().tab1().btnSaveActions().setVisible(bValue);
		form.layerControl1().tab1().btnCancelActions().setVisible(bValue);
	}

	private void printReport()
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		String[] obj = null;

		obj = domain.getReportAndTemplate(form.getGlobalContext().Core.getReportID(), form.getGlobalContext().Core.getTemplateID());

		if (obj == null || obj.length == 0)
		{
			engine.showMessage("Failed to retrieve the report and template !");
			return;
		}

		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

		client.addSeed(new SeedValue("Discharge_id", form.getLocalContext().getDischargeToUpdate() != null ? form.getLocalContext().getDischargeToUpdate().getID_Discharge() : null, Integer.class));
		client.addSeed(new SeedValue("PATIDTYPE", new Integer(PatIdType.CHARTNUM.getID()), Integer.class));

		String resultUrl = "";
		try
		{
			resultUrl = client.buildReportAsUrl(obj[0], obj[1], urlReportServer, QueryBuilderClient.PDF, "", 1);
		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}

		engine.openUrl(resultUrl);
	}

}
