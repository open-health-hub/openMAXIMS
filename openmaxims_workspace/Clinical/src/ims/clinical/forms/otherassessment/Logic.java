//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3763.19232)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.otherassessment;

import ims.clinical.forms.otherassessment.GenForm.grdAssessmentsRow;
import ims.clinical.vo.OtherAssessmentSummaryVo;
import ims.clinical.vo.OtherAssessmentSummaryVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.utils.Date;
import ims.vo.interfaces.IMos;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	@Override
	public void initialize() throws FormOpenException 
	{
		form.getContextMenus().disableAllGenericGridMenuItems();
		form.getContextMenus().getGenericGridAddItem().setText(form.getContextMenus().getGenericGridAddItem().getText()+" Assessment");
		form.getContextMenus().getGenericGridAddItem().setEnabled(true);
		form.ctnDetails().ccBy().initialize(MosType.HCP);
		
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onGrdAssessmentsSelectionChanged()
	{
		if (form.grdAssessments().getValue() instanceof OtherAssessmentSummaryVo)
		{
			form.getLocalContext().setSelectedRecord(form.grdAssessments().getValue());
			populateScreenFromData(form.getLocalContext().getSelectedRecord());
			form.ctnDetails().setCollapsed(false);
		}
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID) {
		case GenForm.ContextMenus.GenericGrid.Add:
			newInstance();
			break;
		default:
			break;
		}
	}
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		populateListScreenFromData(domain.listOtherAssessments(form.getGlobalContext().Core.getCurrentCareContext()));
		if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			form.grdAssessments().setValue(form.getLocalContext().getSelectedRecord());
			form.getLocalContext().setSelectedRecord(form.grdAssessments().getSelectedRow()==null?null:form.grdAssessments().getSelectedRow().getValue());
			populateScreenFromData(form.getLocalContext().getSelectedRecord());
		}
		form.setMode(FormMode.VIEW);
		
	}
	@Override
	protected void populateScreenFromData(OtherAssessmentSummaryVo value)
	{
		clearInstanceControls();
		if (value == null)
			return;
		super.populateScreenFromData(value);
		form.ctnDetails().ccBy().setValue(value.getCarriedOutBy());
	}
	@Override
	protected OtherAssessmentSummaryVo populateDataFromScreen(OtherAssessmentSummaryVo value) {
			value =  super.populateDataFromScreen(value);
			value.setCarriedOutBy((HcpLiteVo) form.ctnDetails().ccBy().getValue());
			if (!value.getID_OtherAssessmentSummaryIsNotNull())
			{
				value.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			}
			return value;
	}
	private void populateListScreenFromData(OtherAssessmentSummaryVoCollection listOtherAssessments) {
		clear();
		if (listOtherAssessments == null)
			return;
		for (int i = 0 ; i < listOtherAssessments.size() ; i++)
		{
			OtherAssessmentSummaryVo assessmentVo = listOtherAssessments.get(i);
			if (assessmentVo == null)
				continue;
			addRowToGrid(assessmentVo);
			
		}
		
	}
	private grdAssessmentsRow addRowToGrid(OtherAssessmentSummaryVo assessmentVo) {
		grdAssessmentsRow newRow = form.grdAssessments().getRows().newRow();
		newRow.setValue(assessmentVo);
		newRow.setColumnDate(assessmentVo.getAssessmentDateIsNotNull()?assessmentVo.getAssessmentDate().toString():null);
		newRow.setColumnName(assessmentVo.getAssessmentNameIsNotNull()?assessmentVo.getAssessmentName().getText():null);
		newRow.setColumnBy(assessmentVo.getCarriedOutByIsNotNull()?assessmentVo.getCarriedOutBy().getIHcpName():null);
		newRow.setColumnScore(assessmentVo.getScoreIsNotNull()?assessmentVo.getScore():null);
		return newRow;
	}
	public void clearInstanceControls()
	{
		clearScreen();
		form.ctnDetails().ccBy().clear();
	}
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		
		populateScreenFromData(null);
		form.ctnDetails().dteDate().setValue(new Date());
		form.ctnDetails().ccBy().setValue((IMos) domain.getHcpLiteUser());
		form.setMode(FormMode.EDIT);
	}
	@Override
	public void clear() {
		form.grdAssessments().getRows().clear();
		clearInstanceControls();
		
	};
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		OtherAssessmentSummaryVo record = populateDataFromScreen();
		String[] errors = record.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try 
		{
			form.getLocalContext().setSelectedRecord(domain.save(record));
		} 
		catch (DomainInterfaceException e)
		{
			engine.showErrors(new String[]{e.getMessage()});
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			return true;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showErrors(new String[]{e.getMessage()});
			return false;
		}
		return true;
	}
	public void updateControlsState()
	{
		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		form.ctnDetails().setCollapsed(viewMode && form.grdAssessments().getSelectedRow() == null);
		form.getContextMenus().getGenericGridAddItem().setVisible(viewMode && !engine.isRIEMode());
		if (viewMode)
		{
		form.btnNew().setVisible(true);	
		form.btnNew().setEnabled(!engine.isRIEMode());
		}
	}
	
	public void updateInstance() {
		//do nothing
		return;
	}
}
