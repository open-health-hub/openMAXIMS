//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.64 build 3154.29220)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.primarycarepatientsummary;

import ims.clinical.forms.primarycarepatientsummary.GenForm.lyrDetailsLayer.tabAlertsEntityContainer.grdAlertsRow;
import ims.clinical.forms.primarycarepatientsummary.GenForm.lyrDetailsLayer.tabAllergiesEntityContainer.grdAllergiesRow;
import ims.clinical.forms.primarycarepatientsummary.GenForm.lyrDetailsLayer.tabDiariesEntitiesContainer.grdDiariesRow;
import ims.clinical.forms.primarycarepatientsummary.GenForm.lyrDetailsLayer.tabHealthStatusEntitiesContainer.grdHealthStatusRow;
import ims.clinical.forms.primarycarepatientsummary.GenForm.lyrDetailsLayer.tabLastConsultationsEntitiesContainer.grdLastConsultationsRow;
import ims.clinical.forms.primarycarepatientsummary.GenForm.lyrDetailsLayer.tabMedicationEntityContainer.grdMedicationRow;
import ims.clinical.forms.primarycarepatientsummary.GenForm.lyrDetailsLayer.tabProblemsEntityContainer.grdProblemsRow;
import ims.clinical.forms.primarycarepatientsummary.GenForm.lyrDetailsLayer.tabQuteEntitiesContainer.grdHospitalVisitsRow;
import ims.clinical.vo.EMISAcuteVo;
import ims.clinical.vo.EMISAcuteVoCollection;
import ims.clinical.vo.EMISAlertsVo;
import ims.clinical.vo.EMISAlertsVoCollection;
import ims.clinical.vo.EMISAllergiesVo;
import ims.clinical.vo.EMISAllergiesVoCollection;
import ims.clinical.vo.EMISDiariesVo;
import ims.clinical.vo.EMISDiariesVoCollection;
import ims.clinical.vo.EMISHealthStatusVo;
import ims.clinical.vo.EMISHealthStatusVoCollection;
import ims.clinical.vo.EMISLastConsultationsVo;
import ims.clinical.vo.EMISLastConsultationsVoCollection;
import ims.clinical.vo.EMISMedicationVo;
import ims.clinical.vo.EMISMedicationVoCollection;
import ims.clinical.vo.EMISObservationVo;
import ims.clinical.vo.EMISObservationVoCollection;
import ims.clinical.vo.EMISSummaryVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void open() {
		populateScreenFromData(domain.getEMISSummaryVo());
		
	}
	private void populateScreenFromData(EMISSummaryVo summaryVo) {
		
		if(summaryVo!=null){
			populateProblems(summaryVo.getProblems());
			populateMedication(summaryVo.getMedications());
			populateAllergies(summaryVo.getAllergies());
			populateAlerts(summaryVo.getAlerts());
			populateDiaries(summaryVo.getDiaries());
			populateLastConsultations(summaryVo.getLastConsultations());
			populateHealthStatus(summaryVo.getHealthStatus());
			populateAcute(summaryVo.getAcute());
		}
		
		
	}
	private void populateAcute(EMISAcuteVoCollection acute) {
		if(acute!=null)
			for(int i=0; i<acute.size(); i++){
				
				EMISAcuteVo acuteVo = acute.get(i);
				grdHospitalVisitsRow row = form.lyrDetails().tabQuteEntities().grdHospitalVisits().getRows().newRow();
				
				row.setColStartDate(acuteVo.getStartDate());
				row.setColRecordType(acuteVo.getRecordType());
				row.setColSpecialityName(acuteVo.getSpecialityName());
				row.setColDescription(acuteVo.getDescription());
					
				row.setValue(acuteVo);
			}				
		
	}
	private void populateHealthStatus(EMISHealthStatusVoCollection healthStatus) {
		if(healthStatus!=null)
			for(int i=0; i<healthStatus.size(); i++){
				
				EMISHealthStatusVo healthStatusVo = healthStatus.get(i);
				grdHealthStatusRow row = form.lyrDetails().tabHealthStatusEntities().grdHealthStatus().getRows().newRow();
				
				row.setColObservation(healthStatusVo.getObservation());
				row.setColEffectiveDate(healthStatusVo.getEffectiveDate());
				row.setColOriginalTerm(healthStatusVo.getOriginalTerm());
				row.setColConfidentialityPolicy(healthStatusVo.getConfidentialityPolicy());
				row.setColAbnormal(healthStatusVo.getAbnormal());
				row.setColNumericOperator(healthStatusVo.getNumericOperator());
				row.setColNumericValue(healthStatusVo.getNumericValue());
				row.setColNumericUnits(healthStatusVo.getNumericUnits());
				row.setColHasChildren(healthStatusVo.getHasChildren());
				row.setColDisplayName(healthStatusVo.getDisplayName());
				row.setColCode(healthStatusVo.getCode());
				row.setColObservationType(healthStatusVo.getObservationType());
				
				row.setValue(healthStatusVo);
			}				
		
	}
	private void populateLastConsultations(EMISLastConsultationsVoCollection lastConsultations) {
		if(lastConsultations!=null)
			for(int i=0; i<lastConsultations.size(); i++){
				
				EMISLastConsultationsVo lastConsultationVo = lastConsultations.get(i);
				grdLastConsultationsRow row = form.lyrDetails().tabLastConsultationsEntities().grdLastConsultations().getRows().newRow();
				
				row.setColConsultation(lastConsultationVo.getConsultation());
				row.setColEffectiveDate(lastConsultationVo.getEffectiveDate());
				row.setColAuthorisingHCP(lastConsultationVo.getAuthorisingHCP());
				row.setColLocationType(lastConsultationVo.getLocationTypeDescription());
				row.setColConfidentialityPolicy(lastConsultationVo.getConfidentialityPolicy());
				row.setColConsultationType(lastConsultationVo.getConsultationTypeOriginalTerm());
				
				row.setValue(lastConsultationVo);
			}				
		
	}
	private void populateDiaries(EMISDiariesVoCollection diaries) {
		if(diaries!=null)
			for(int i=0; i<diaries.size(); i++){
				
				EMISDiariesVo diariesVo = diaries.get(i);
				grdDiariesRow row = form.lyrDetails().tabDiariesEntities().grdDiaries().getRows().newRow();
				
				row.setColDiary(diariesVo.getDiary());
				row.setColEffectiveDate(diariesVo.getEffectiveDate());
				row.setColOriginalTerm(diariesVo.getOriginalTerm());
				row.setColConfidentialityPolicy(diariesVo.getConfidentialityPolicy());
					
				row.setValue(diariesVo);
			}				
		
	}
	private void populateAlerts(EMISAlertsVoCollection alerts) {
		if(alerts!=null)
			for(int i=0; i<alerts.size(); i++){
				
				EMISAlertsVo alertVo = alerts.get(i);
				grdAlertsRow row = form.lyrDetails().tabAlertsEntity().grdAlerts().getRows().newRow();
				
				row.setColAlert(alertVo.getAlert());
				row.setColEffectiveDate(alertVo.getEffectiveDate());
				row.setColAlertType(alertVo.getAlertType());
				row.setColAlertText(alertVo.getAlertType());
				row.setColConfidentialityPolicy(alertVo.getConfidentialityPolicy());
				
				row.setValue(alertVo);
			}				
		
	}
	private void populateAllergies(EMISAllergiesVoCollection allergies) {
		if(allergies!=null)
			for(int i=0; i<allergies.size(); i++){
				
				EMISAllergiesVo allergiesVo = allergies.get(i);
				grdAllergiesRow row = form.lyrDetails().tabAllergiesEntity().grdAllergies().getRows().newRow();
				
				row.setColObservation(allergiesVo.getObservation());
				row.setColEffectiveDate(allergiesVo.getEffectiveDate());
				row.setColOriginalTerm(allergiesVo.getOriginalTerm());
				row.setColConfidentialityPolicy(allergiesVo.getConfidentialityPolicy());
				row.setColDisplayName(allergiesVo.getOriginalTerm());
				
				row.setValue(allergiesVo);
			}				
		
	}
	private void populateMedication(EMISMedicationVoCollection medications) {
		
		if(medications!=null)
			for(int i=0; i<medications.size(); i++){
				
				EMISMedicationVo med = medications.get(i);
				grdMedicationRow row = form.lyrDetails().tabMedicationEntity().grdMedication().getRows().newRow();
				
				row.setColDrugRecord(med.getDrugRecord());
				row.setColLatestIssueDate(med.getMostRecentIssueDate());
				row.setColPrescriptionType(med.getPrescriptionType());
				row.setColDrugName(med.getDrugName());
				row.setColOriginalTerm(med.getOriginalTerm());
				row.setColDosage(med.getDosage());
				row.setColQuantity(med.getQuantityRepresentation());
				
				row.setValue(medications.get(i));
			}				
	}
	private void populateProblems(EMISObservationVoCollection observations) 
	{
		if(observations == null)
			return;
			
		for(int i=0; i<observations.size(); i++){
			
			EMISObservationVo obs = observations.get(i);
			grdProblemsRow row = form.lyrDetails().tabProblemsEntity().grdProblems().getRows().newRow();
			
			row.setcolDate(obs.getEffectiveDate());
			row.setcolOriginalTerm(obs.getOriginalTerm());
			row.setcolLastReviewed(obs.getLastReviewDate());
			row.setcolDisplayName(obs.getDisplayName());
			
			row.setValue(obs);
		}		
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
	}
}
