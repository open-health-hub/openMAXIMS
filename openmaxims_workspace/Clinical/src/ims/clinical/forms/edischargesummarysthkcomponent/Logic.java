//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3937.27059)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.edischargesummarysthkcomponent;

import ims.clinical.forms.edischargesummarysthkcomponent.GenForm.grdSummaryRow;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.EDischargeSTHKSummaryDetailVo;
import ims.clinical.vo.EDischargeSTHKSummaryDetailVoCollection;
import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.EDischargeStartVo;
import ims.clinical.vo.enums.SummaryEventType;
import ims.clinical.vo.lookups.AdditonalClinicalInformation;
import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.clinical.vo.lookups.EDischargeSummarySection;
import ims.clinical.vo.lookups.EDischargeSummarySectionStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AdmissionDetailVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.InpatientEpisodeEDischargeVo;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setLastEvent(null);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		form.getLocalContext().setLastEvent(null);
		if(formName.equals(form.getForms().Clinical.EDischargeStartDialog) && result.equals(DialogResult.OK))
		{
			//WDEV-12920 - check for SOE
			if(form.getLocalContext().getSelectedInstance() == null || (form.getLocalContext().getSelectedInstanceIsNotNull() && form.getLocalContext().getSelectedInstance().getID_Summary() == null))
			{
				EDischargeSTHKSummaryVo summary = domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				
				if(summary != null && summary.getID_SummaryIsNotNull())	//SOE
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					form.getLocalContext().setSelectedInstance(summary);
					form.getLocalContext().setLastEvent(SummaryEventType.CREATESUMMARY);
					form.fireCustomControlValueChanged();
					open();
					return;
				}
			}
			
			//WDEV-12696 - simulate SOE
			if(form.getLocalContext().getAllowChangeNeoNatalPlasticsIsNotNull() && form.getLocalContext().getAllowChangeNeoNatalPlastics() && Boolean.FALSE.equals(domain.allowChangeNeoNatalPlastics(form.getLocalContext().getSelectedInstance())))
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
			
			if(populateDischargeandSummary())
				open();
		}
	}

	private boolean populateDischargeandSummary()
	{		
		DischargeDetailsVo voDischargeDetails = null;
		EDischargeSTHKSummaryVo voSummary = form.getLocalContext().getSelectedInstance();
		if(voSummary == null)
			voSummary = new EDischargeSTHKSummaryVo();
		if(form.getLocalContext().getSelectedInstance().getID_Summary() != null)
		{
			//only update the sections that have been changed
			populateOptionalSections(voSummary);
		}
		else
		{
			//create/update DischargeSummary record and DischargeDetails record
			if(voSummary.getDischargeDetails() == null)
			{
				voDischargeDetails = new DischargeDetailsVo();
				voDischargeDetails.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				
				Object hcp = domain.getHcpLiteUser();
				if(hcp instanceof HcpLiteVo)
				{
					voDischargeDetails.setInitiatingHCP((HcpLiteVo) domain.getHcpLiteUser()); 
				}
				else
				{
					voDischargeDetails.setInitiatingHCP(form.getGlobalContext().Core.getCurrentCareContext().getResponsibleHCP() instanceof HcpLiteVo ? (HcpLiteVo) form.getGlobalContext().Core.getCurrentCareContext().getResponsibleHCP() : null);
				}
				
				voDischargeDetails.setDischargeLetterStatus(DischargeLetterStatus.IN_PROGRESS);
			
				//ref to dischargedetails
				voSummary.setDischargeDetails(voDischargeDetails);
			}
			
			InpatientEpisodeEDischargeVo voInpatEpis = domain.getInpatientEpisodeByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			if(voInpatEpis != null)
				voSummary.setAdmissionDateTime(voInpatEpis.getAdmissionDateTime());
			else // wdev-12707
			{
				AdmissionDetailVo voAdmDet = domain.getAdmissionDetailByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				if(voAdmDet != null)
					voSummary.setAdmissionDateTime(voAdmDet.getAdmissionDateTime());
			}
				

			voSummary.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voSummary.setDischargeLetterStatus(DischargeLetterStatus.IN_PROGRESS);
			
			//set up a summary detail record for each lookup instance that is required
			voSummary.setSummaryDetails(new EDischargeSTHKSummaryDetailVoCollection());
			
			EDischargeSTHKSummaryDetailVo voSummDetail1 = new EDischargeSTHKSummaryDetailVo();
			voSummDetail1.setProgressStatus(EDischargeSummarySectionStatus.NOT_STARTED);
			voSummDetail1.setSection(EDischargeSummarySection.DIAGNOSIS);
			voSummary.getSummaryDetails().add(voSummDetail1);
			
			EDischargeSTHKSummaryDetailVo voSummDetail = new EDischargeSTHKSummaryDetailVo();
			voSummDetail.setProgressStatus(EDischargeSummarySectionStatus.NOT_STARTED);
			voSummDetail.setSection(EDischargeSummarySection.CLINICALINFO);
			voSummary.getSummaryDetails().add(voSummDetail);
			
			populateOptionalSections(voSummary);
			
			EDischargeSTHKSummaryDetailVo voSummDetail2 = new EDischargeSTHKSummaryDetailVo();
			voSummDetail2.setProgressStatus(EDischargeSummarySectionStatus.NOT_STARTED);
			voSummDetail2.setSection(EDischargeSummarySection.FUTURE_PLAN);
			voSummary.getSummaryDetails().add(voSummDetail2);
			
			EDischargeSTHKSummaryDetailVo voSummDetail3 = new EDischargeSTHKSummaryDetailVo();
			voSummDetail3.setProgressStatus(EDischargeSummarySectionStatus.NOT_STARTED);
			voSummDetail3.setSection(EDischargeSummarySection.MEDICATIONONADMISSION);
			voSummary.getSummaryDetails().add(voSummDetail3);
			
			EDischargeSTHKSummaryDetailVo voSummDetail4 = new EDischargeSTHKSummaryDetailVo();
			voSummDetail4.setProgressStatus(EDischargeSummarySectionStatus.NOT_STARTED);
			voSummDetail4.setSection(EDischargeSummarySection.READY_TO_LEAVE);
			voSummary.getSummaryDetails().add(voSummDetail4);
		}
			
		String[] errors = voSummary.validate();
		if(errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
			
		try
		{	
			if(voDischargeDetails != null)
				voDischargeDetails.validate();
			
			voSummary = domain.saveSummaryAndDischargeDetails(voSummary, voDischargeDetails);
		}
		catch (DomainInterfaceException e)
		{
			
			engine.showMessage(e.getMessage());
		}
		catch (StaleObjectException e)
		{
			form.getLocalContext().setLastEvent(SummaryEventType.CREATESUMMARY);
			form.getLocalContext().setSelectedInstance(domain.getSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.fireCustomControlValueChanged();
			open();
			return false;
		}
		
		form.getLocalContext().setLastEvent(SummaryEventType.CREATESUMMARY);
		form.getLocalContext().setSelectedInstance(voSummary);
		form.fireCustomControlValueChanged();
		
		return true;
	}

	private void populateOptionalSections(EDischargeSTHKSummaryVo voSummary)
	{
		if(form.getGlobalContext().Clinical.getEDischargeStartIsNotNull())
		{
			voSummary.setHasHadAnyProceduresPerformed(form.getGlobalContext().Clinical.getEDischargeStart().getHasHadAnyProceduresPerformed());
			voSummary.setAdditonalClinicalInfo(form.getGlobalContext().Clinical.getEDischargeStart().getAdditonalClinicalInfo());
			
			if(voSummary.getSummaryDetailsIsNotNull())
			{
				////////////////////////////////////
				//OPS and PROCS
				if(voSummary.getHasHadAnyProceduresPerformedIsNotNull() && voSummary.getHasHadAnyProceduresPerformed().equals(YesNo.YES))
				{
					//try to get a record of this type (opsprocs) from the collection
					//if it already exists DONT modify it otherwise create new and add to collection setting the status to NOT_STARTED
					EDischargeSTHKSummaryDetailVo voDetail = getDetailRecord(voSummary.getSummaryDetails(), EDischargeSummarySection.OPERATIONS_AND_PROCS);
					if(voDetail == null)
					{
						voDetail = new EDischargeSTHKSummaryDetailVo();
						voDetail.setProgressStatus(EDischargeSummarySectionStatus.NOT_STARTED);
						voDetail.setSection(EDischargeSummarySection.OPERATIONS_AND_PROCS);
						voSummary.getSummaryDetails().add(voDetail);
					}
				}
				else
				{
					//try to get a record of this type (opsprocs) from the collection
					//if it already exists and status is NOT_STARTED then REMOVE it
					EDischargeSTHKSummaryDetailVo voDetail = getDetailRecord(voSummary.getSummaryDetails(), EDischargeSummarySection.OPERATIONS_AND_PROCS);
					if(voDetail != null && voDetail.getProgressStatusIsNotNull() && voDetail.getProgressStatus().equals(EDischargeSummarySectionStatus.NOT_STARTED))
						voSummary.getSummaryDetails().remove(voDetail);
				}
				//END OPS and PROCS
				////////////////////////////////////
				
				////////////////////////////////////
				//Additional Clinical Info
				if(voSummary.getAdditonalClinicalInfoIsNotNull() && (voSummary.getAdditonalClinicalInfo().equals(AdditonalClinicalInformation.NEONATAL) ||voSummary.getAdditonalClinicalInfo().equals(AdditonalClinicalInformation.PLASTICS)))
				{
					//PLASTICS
					//try to get a record of this type (plastics) from the collection
					//if it already exists DONT modify it otherwise create new and add to collection setting the status to NOT_STARTED
					if(voSummary.getAdditonalClinicalInfo().equals(AdditonalClinicalInformation.PLASTICS))
					{
						EDischargeSTHKSummaryDetailVo voPlasticsDetail = getDetailRecord(voSummary.getSummaryDetails(), EDischargeSummarySection.PLASTICS);
						if(voPlasticsDetail == null)
						{
							voPlasticsDetail = new EDischargeSTHKSummaryDetailVo();
							voPlasticsDetail.setProgressStatus(EDischargeSummarySectionStatus.NOT_STARTED);
							voPlasticsDetail.setSection(EDischargeSummarySection.PLASTICS);
							voSummary.getSummaryDetails().add(voPlasticsDetail);
						}
					}
					else
					{
						//try to get a record of this type (plastics) from the collection
						//if it already exists and status is NOT_STARTED then REMOVE it
						EDischargeSTHKSummaryDetailVo voDetail = getDetailRecord(voSummary.getSummaryDetails(), EDischargeSummarySection.PLASTICS);
						if(voDetail != null && voDetail.getProgressStatusIsNotNull() && voDetail.getProgressStatus().equals(EDischargeSummarySectionStatus.NOT_STARTED))
							voSummary.getSummaryDetails().remove(voDetail);
					}
					
					//NEONATAL
					if(voSummary.getAdditonalClinicalInfo().equals(AdditonalClinicalInformation.NEONATAL))
					{
						EDischargeSTHKSummaryDetailVo voNeoDetail = getDetailRecord(voSummary.getSummaryDetails(), EDischargeSummarySection.NEONATAL);
						if(voNeoDetail == null)
						{
							voNeoDetail = new EDischargeSTHKSummaryDetailVo();
							voNeoDetail.setProgressStatus(EDischargeSummarySectionStatus.NOT_STARTED);
							voNeoDetail.setSection(EDischargeSummarySection.NEONATAL);
							voSummary.getSummaryDetails().add(voNeoDetail);
						}
					}
					else
					{
						EDischargeSTHKSummaryDetailVo voDetail = getDetailRecord(voSummary.getSummaryDetails(), EDischargeSummarySection.NEONATAL);
						if(voDetail != null && voDetail.getProgressStatusIsNotNull() && voDetail.getProgressStatus().equals(EDischargeSummarySectionStatus.NOT_STARTED))
							voSummary.getSummaryDetails().remove(voDetail);
					}
				}
				else
				{
					//WDEV-11480 remove plastics and neonatal
					EDischargeSTHKSummaryDetailVo voDetail = getDetailRecord(voSummary.getSummaryDetails(), EDischargeSummarySection.PLASTICS);
					if(voDetail != null && voDetail.getProgressStatusIsNotNull() && voDetail.getProgressStatus().equals(EDischargeSummarySectionStatus.NOT_STARTED))
						voSummary.getSummaryDetails().remove(voDetail);
					
					EDischargeSTHKSummaryDetailVo voDetail1 = getDetailRecord(voSummary.getSummaryDetails(), EDischargeSummarySection.NEONATAL);
					if(voDetail1 != null && voDetail1.getProgressStatusIsNotNull() && voDetail1.getProgressStatus().equals(EDischargeSummarySectionStatus.NOT_STARTED))
						voSummary.getSummaryDetails().remove(voDetail1);
				}
			}
		}
	}
	
	private EDischargeSTHKSummaryDetailVo getDetailRecord(EDischargeSTHKSummaryDetailVoCollection summaryDetails, EDischargeSummarySection section)
	{
		if(summaryDetails != null)
		{
			for(EDischargeSTHKSummaryDetailVo voDetail : summaryDetails)
			{
				if(voDetail.getSection().equals(section))
					return voDetail;
			}
		}
			
		return null;
	}

	private void open()
	{		
		clearScreen();
		
		if(form.getLocalContext().getSelectedInstance() != null)
		{
			if(form.getLocalContext().getSelectedInstance().getID_Summary() == null)
				engine.open(form.getForms().Clinical.EDischargeStartDialog, new Object[] {Boolean.TRUE, Boolean.TRUE});
		}

		populateScreenFromData(form.getLocalContext().getSelectedInstance());
		updateControlState();	
	}

	private void updateControlState()
	{
		form.btnAdditional().setVisible(false);
		form.getLocalContext().setAllowChangeOpsProcs(false);
		form.getLocalContext().setAllowChangeNeoNatalPlastics(false);
		//if a section of neonatal or plastics is present and not started
		//or ops procs is not started
		if(form.getLocalContext().getSelectedInstanceIsNotNull() && form.getLocalContext().getSelectedInstance().getID_Summary() != null)
		{
			EDischargeSTHKSummaryVo voSummary = form.getLocalContext().getSelectedInstance();
			EDischargeSTHKSummaryDetailVoCollection voCollDetails = voSummary.getSummaryDetails();
			boolean canChangeOpsProcs = true;
			boolean canChangePlasticsOrNeonatal = true;
			if(voCollDetails != null)
			{
				for(int i=0; i<voCollDetails.size(); i++)
				{
					if(voCollDetails.get(i).getSectionIsNotNull() && (voCollDetails.get(i).getSection().equals(EDischargeSummarySection.NEONATAL) || voCollDetails.get(i).getSection().equals(EDischargeSummarySection.PLASTICS)))
					{							
						if(voCollDetails.get(i).getSectionIsNotNull() && (voCollDetails.get(i).getSection().equals(EDischargeSummarySection.NEONATAL) || voCollDetails.get(i).getSection().equals(EDischargeSummarySection.PLASTICS)) && voCollDetails.get(i).getProgressStatusIsNotNull() && (voCollDetails.get(i).getProgressStatus().equals(EDischargeSummarySectionStatus.COMPLETED) || voCollDetails.get(i).getProgressStatus().equals(EDischargeSummarySectionStatus.IN_PROGRESS)))
						{
							canChangePlasticsOrNeonatal = false;
						}
					}
					if(voCollDetails.get(i).getSectionIsNotNull() && voCollDetails.get(i).getSection().equals(EDischargeSummarySection.OPERATIONS_AND_PROCS))
					{
						if(voCollDetails.get(i).getProgressStatusIsNotNull() && (voCollDetails.get(i).getProgressStatus().equals(EDischargeSummarySectionStatus.COMPLETED) || voCollDetails.get(i).getProgressStatus().equals(EDischargeSummarySectionStatus.IN_PROGRESS)))
						{
							canChangeOpsProcs = false;
						}
					}
				}
			}
			if(canChangeOpsProcs || canChangePlasticsOrNeonatal)
			{
				form.btnAdditional().setVisible(true);
				form.getLocalContext().setAllowChangeOpsProcs(canChangeOpsProcs);
				form.getLocalContext().setAllowChangeNeoNatalPlastics(canChangePlasticsOrNeonatal);
			}
		}
	}

	private void populateScreenFromData(EDischargeSTHKSummaryVo voSummary)
	{
		clearScreen();
		form.getGlobalContext().Clinical.setEDischargeStart(null);
		
		if(voSummary == null)
			return;
		
		form.dtimAdmissionDateTime().setValue(voSummary.getAdmissionDateTime());
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			form.dteEdd().setValue(form.getGlobalContext().Core.getCurrentCareContext().getEstimatedDischargeDate());
			//WDEV-11479
			if(form.getGlobalContext().Core.getCurrentCareContext().getResponsibleHCPIsNotNull())
				form.txtResponsibleClinician().setValue(form.getGlobalContext().Core.getCurrentCareContext().getResponsibleHCP().toString());
		}
					
		if(voSummary.getTTAStatusIsNotNull())
			form.txtTTAStatus().setValue(voSummary.getTTAStatus().getText());
		
		if(voSummary.getSummaryDetailsIsNotNull())
		{
			for(int i=0;i<voSummary.getSummaryDetails().size();i++)
			{
				grdSummaryRow row = form.grdSummary().getRows().newRow();
				
				if(voSummary.getSummaryDetails().get(i).getSectionIsNotNull())
					row.setColSummary(voSummary.getSummaryDetails().get(i).getSection().getText());
				if(voSummary.getSummaryDetails().get(i).getProgressStatusIsNotNull())
					row.setColStatus(voSummary.getSummaryDetails().get(i).getProgressStatus().getText());
			}
		}
		
		form.getGlobalContext().Clinical.setEDischargeStart(new EDischargeStartVo());
		form.getGlobalContext().Clinical.getEDischargeStart().setAdditonalClinicalInfo(voSummary.getAdditonalClinicalInfo());
		form.getGlobalContext().Clinical.getEDischargeStart().setHasHadAnyProceduresPerformed(voSummary.getHasHadAnyProceduresPerformed());
		
	}

	private void clearScreen()
	{
		form.dtimAdmissionDateTime().setValue(null);
		form.txtTTAStatus().setValue(null);
		form.dteEdd().setValue(null);
		form.txtResponsibleClinician().setValue(null);
		
		form.grdSummary().getRows().clear();
	}
	

	@Override
	protected void onBtnAdditionalClick() throws PresentationLogicException
	{
		form.getLocalContext().setLastEvent(null);
		
		form.getLocalContext().setAllowChangeNeoNatalPlastics(domain.allowChangeNeoNatalPlastics(form.getLocalContext().getSelectedInstance()));
		engine.open(form.getForms().Clinical.EDischargeStartDialog, new Object[]{form.getLocalContext().getAllowChangeOpsProcs(), form.getLocalContext().getAllowChangeNeoNatalPlastics()});
	}
	
	/**
	 * component interface methods
	 */

	public void initialise(EDischargeSTHKSummaryVo voSummary)
	{
		form.getLocalContext().setSelectedInstance(voSummary);
		form.setMode(FormMode.VIEW);
		open();
	}
	
	public SummaryEventType getLastEvent()
	{
		return form.getLocalContext().getLastEvent();
	}

	public EDischargeSTHKSummaryVo getValue()
	{
		return form.getLocalContext().getSelectedInstance();
	}
	
	public void setReadOnly()
	{
		form.setMode(FormMode.VIEW);
		form.btnAdditional().setEnabled(false);
	}
	/**
	 * end component interface methods
	 */

	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}
}
