//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.surgicalaudit;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkReturnToListClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrSurgAuditTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onCcPreOpChecksValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcPreOpChecksTheatreNurseValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcProcedureDetailsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcPlannedActualProcValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcRecoveryValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRecbrSurgAuditValueChanged() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen(args);
			}
		});
		this.form.lnkReturnToList().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkReturnToListClick();
			}
		});
		this.form.lyrSurgAudit().tabPreOperationChecks().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrSurgAudittabPreOperationChecksActivated();
			}
		});
		this.form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrSurgAudittabPreOperationChecksTheatreNurseActivated();
			}
		});
		this.form.lyrSurgAudit().tabProcedureDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrSurgAudittabProcedureDetailsActivated();
			}
		});
		this.form.lyrSurgAudit().tabPlannedActualProcedures().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrSurgAudittabPlannedActualProceduresActivated();
			}
		});
		this.form.lyrSurgAudit().tabRecovery().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrSurgAudittabRecoveryActivated();
			}
		});
		this.form.lyrSurgAudit().tabPreOperationChecks().setccPreOpChecksValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcPreOpChecksValueChanged();
			}
		});
		this.form.lyrSurgAudit().tabPreOperationChecksTheatreNurse().setccPreOpChecksTheatreNurseValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcPreOpChecksTheatreNurseValueChanged();
			}
		});
		this.form.lyrSurgAudit().tabProcedureDetails().setccProcedureDetailsValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcProcedureDetailsValueChanged();
			}
		});
		this.form.lyrSurgAudit().tabPlannedActualProcedures().setccPlannedActualProcValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcPlannedActualProcValueChanged();
			}
		});
		this.form.lyrSurgAudit().tabRecovery().setccRecoveryValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcRecoveryValueChanged();
			}
		});
		this.form.recbrSurgAudit().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRecbrSurgAuditValueChanged();
			}
		});
	}
	private void onlyrSurgAudittabPreOperationChecksActivated()
	{
		this.form.lyrSurgAudit().showtabPreOperationChecks();
		onlyrSurgAuditTabChanged(this.form.lyrSurgAudit().tabPreOperationChecks());
	}
	private void onlyrSurgAudittabPreOperationChecksTheatreNurseActivated()
	{
		this.form.lyrSurgAudit().showtabPreOperationChecksTheatreNurse();
		onlyrSurgAuditTabChanged(this.form.lyrSurgAudit().tabPreOperationChecksTheatreNurse());
	}
	private void onlyrSurgAudittabProcedureDetailsActivated()
	{
		this.form.lyrSurgAudit().showtabProcedureDetails();
		onlyrSurgAuditTabChanged(this.form.lyrSurgAudit().tabProcedureDetails());
	}
	private void onlyrSurgAudittabPlannedActualProceduresActivated()
	{
		this.form.lyrSurgAudit().showtabPlannedActualProcedures();
		onlyrSurgAuditTabChanged(this.form.lyrSurgAudit().tabPlannedActualProcedures());
	}
	private void onlyrSurgAudittabRecoveryActivated()
	{
		this.form.lyrSurgAudit().showtabRecovery();
		onlyrSurgAuditTabChanged(this.form.lyrSurgAudit().tabRecovery());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
