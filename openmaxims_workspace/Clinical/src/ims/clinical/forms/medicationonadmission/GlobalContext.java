//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.medicationonadmission;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Core = new CoreContext(context);
		Clinical = new ClinicalContext(context);
		ProtoTemp = new ProtoTempContext(context);
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getYesNoDialogMessageIsNotNull()
		{
			return !cx_CoreYesNoDialogMessage.getValueIsNull(context);
		}
		public String getYesNoDialogMessage()
		{
			return (String)cx_CoreYesNoDialogMessage.getValue(context);
		}
		public void setYesNoDialogMessage(String value)
		{
			cx_CoreYesNoDialogMessage.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreYesNoDialogMessage = new ims.framework.ContextVariable("Core.YesNoDialogMessage", "_cv_Core.YesNoDialogMessage");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getTaxonomyMapIsNotNull()
		{
			return !cx_CoreTaxonomyMap.getValueIsNull(context);
		}
		public ims.core.vo.TaxonomyMap getTaxonomyMap()
		{
			return (ims.core.vo.TaxonomyMap)cx_CoreTaxonomyMap.getValue(context);
		}
		public void setTaxonomyMap(ims.core.vo.TaxonomyMap value)
		{
			cx_CoreTaxonomyMap.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreTaxonomyMap = new ims.framework.ContextVariable("Core.TaxonomyMap", "_cv_Core.TaxonomyMap");
		public boolean getCurrentClinicalContactIsNotNull()
		{
			return !cx_CoreCurrentClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVo getCurrentClinicalContact()
		{
			return (ims.core.vo.ClinicalContactShortVo)cx_CoreCurrentClinicalContact.getValue(context);
		}

		private ims.framework.ContextVariable cx_CoreCurrentClinicalContact = new ims.framework.ContextVariable("Core.CurrentClinicalContact", "_cvp_Core.CurrentClinicalContact");
		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}
		public void setCurrentCareContext(ims.core.vo.CareContextShortVo value)
		{
			cx_CoreCurrentCareContext.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");

		private ims.framework.Context context;
	}
	public final class ClinicalContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private ClinicalContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getReturnToFormCDIDescriptionIsNotNull()
		{
			return !cx_ClinicalReturnToFormCDIDescription.getValueIsNull(context);
		}
		public String getReturnToFormCDIDescription()
		{
			return (String)cx_ClinicalReturnToFormCDIDescription.getValue(context);
		}
		public void setReturnToFormCDIDescription(String value)
		{
			cx_ClinicalReturnToFormCDIDescription.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalReturnToFormCDIDescription = new ims.framework.ContextVariable("Clinical.ReturnToFormCDIDescription", "_cv_Clinical.ReturnToFormCDIDescription");
		public boolean getReturnToFormModeIsNotNull()
		{
			return !cx_ClinicalReturnToFormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getReturnToFormMode()
		{
			return (ims.framework.enumerations.FormMode)cx_ClinicalReturnToFormMode.getValue(context);
		}
		public void setReturnToFormMode(ims.framework.enumerations.FormMode value)
		{
			cx_ClinicalReturnToFormMode.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalReturnToFormMode = new ims.framework.ContextVariable("Clinical.ReturnToFormMode", "_cv_Clinical.ReturnToFormMode");
		public boolean getReturnToFormCDITitleIsNotNull()
		{
			return !cx_ClinicalReturnToFormCDITitle.getValueIsNull(context);
		}
		public String getReturnToFormCDITitle()
		{
			return (String)cx_ClinicalReturnToFormCDITitle.getValue(context);
		}

		private ims.framework.ContextVariable cx_ClinicalReturnToFormCDITitle = new ims.framework.ContextVariable("Clinical.ReturnToFormCDITitle", "_cv_Clinical.ReturnToFormCDITitle");
		public boolean getReturnToFormNameIsNotNull()
		{
			return !cx_ClinicalReturnToFormName.getValueIsNull(context);
		}
		public ims.framework.FormName getReturnToFormName()
		{
			return (ims.framework.FormName)cx_ClinicalReturnToFormName.getValue(context);
		}
		public void setReturnToFormName(ims.framework.FormName value)
		{
			cx_ClinicalReturnToFormName.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalReturnToFormName = new ims.framework.ContextVariable("Clinical.ReturnToFormName", "_cv_Clinical.ReturnToFormName");
		public boolean getDialogFormNameIsNotNull()
		{
			return !cx_ClinicalDialogFormName.getValueIsNull(context);
		}
		public ims.framework.FormName getDialogFormName()
		{
			return (ims.framework.FormName)cx_ClinicalDialogFormName.getValue(context);
		}
		public void setDialogFormName(ims.framework.FormName value)
		{
			cx_ClinicalDialogFormName.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalDialogFormName = new ims.framework.ContextVariable("Clinical.DialogFormName", "_cv_Clinical.DialogFormName");
		public boolean getPatientMedicationCollectionIsNotNull()
		{
			return !cx_ClinicalPatientMedicationCollection.getValueIsNull(context);
		}
		public ims.core.vo.PatientMedicationVoCollection getPatientMedicationCollection()
		{
			return (ims.core.vo.PatientMedicationVoCollection)cx_ClinicalPatientMedicationCollection.getValue(context);
		}
		public void setPatientMedicationCollection(ims.core.vo.PatientMedicationVoCollection value)
		{
			cx_ClinicalPatientMedicationCollection.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalPatientMedicationCollection = new ims.framework.ContextVariable("Clinical.PatientMedicationCollection", "_cv_Clinical.PatientMedicationCollection");
		public boolean getReasonIsNotNull()
		{
			return !cx_ClinicalReason.getValueIsNull(context);
		}
		public ims.clinical.vo.ReasonVo getReason()
		{
			return (ims.clinical.vo.ReasonVo)cx_ClinicalReason.getValue(context);
		}
		public void setReason(ims.clinical.vo.ReasonVo value)
		{
			cx_ClinicalReason.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ClinicalReason = new ims.framework.ContextVariable("Clinical.Reason", "_cv_Clinical.Reason");

		private ims.framework.Context context;
	}
	public final class ProtoTempContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private ProtoTempContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getClinicalNoteDrawingReturnFormNameIsNotNull()
		{
			return !cx_ProtoTempClinicalNoteDrawingReturnFormName.getValueIsNull(context);
		}
		public ims.framework.FormName getClinicalNoteDrawingReturnFormName()
		{
			return (ims.framework.FormName)cx_ProtoTempClinicalNoteDrawingReturnFormName.getValue(context);
		}
		public void setClinicalNoteDrawingReturnFormName(ims.framework.FormName value)
		{
			cx_ProtoTempClinicalNoteDrawingReturnFormName.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ProtoTempClinicalNoteDrawingReturnFormName = new ims.framework.ContextVariable("ProtoTemp.ClinicalNoteDrawingReturnFormName", "_cv_ProtoTemp.ClinicalNoteDrawingReturnFormName");

		private ims.framework.Context context;
	}

	public CoreContext Core;
	public ClinicalContext Clinical;
	public ProtoTempContext ProtoTemp;
}
