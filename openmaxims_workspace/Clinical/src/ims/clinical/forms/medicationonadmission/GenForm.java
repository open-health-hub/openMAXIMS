//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.medicationonadmission;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbRecordingHCPComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.MemberOfStaffLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.MemberOfStaffLiteVo getValue()
			{
				return (ims.core.vo.MemberOfStaffLiteVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.MemberOfStaffLiteVo value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbFrequencyComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.MedicationFrequency value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.MedicationFrequency getValue()
			{
				return (ims.core.vo.lookups.MedicationFrequency)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.MedicationFrequency value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbRouteComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.MedicationRoute value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.MedicationRoute value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.MedicationRoute value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.MedicationRoute value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.MedicationRoute value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.MedicationRoute getValue()
			{
				return (ims.core.vo.lookups.MedicationRoute)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.MedicationRoute value)
			{
				super.control.setValue(value);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 13, 80, 400, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ims.framework.FormUiLogic m_customControlCodingItemForm = loader.loadComponent(123133, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1006, skipContextValidation);
			//ims.framework.Control m_customControlCodingItemControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(13), new Integer(80), new Integer(400), new Integer(64), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1006), m_customControlCodingItemForm, instance1 } );
			ims.framework.Control m_customControlCodingItemControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1006), m_customControlCodingItemForm, instance1, Boolean.FALSE } );
			super.addControl(m_customControlCodingItemControl);
			Menu[] menus1 = m_customControlCodingItemForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 13, 16, 400, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ims.framework.FormUiLogic m_customControlAuthorForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance2, startTabIndex.intValue() + 5, skipContextValidation);
			//ims.framework.Control m_customControlAuthorControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(13), new Integer(16), new Integer(400), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 5), m_customControlAuthorForm, instance2 } );
			ims.framework.Control m_customControlAuthorControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 5), m_customControlAuthorForm, instance2, Boolean.FALSE } );
			super.addControl(m_customControlAuthorControl);
			Menu[] menus2 = m_customControlAuthorForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 429, 193, 131, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Recording Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 429, 170, 93, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Recording HCP:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 429, 80, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Self-Medicating:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 525, 104, 112, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Taking Medication:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 429, 104, 102, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Difficulties When", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 429, 50, 79, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Taken When:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 429, 26, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Frequency:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 21, 192, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Dose:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 21, 159, 42, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Route:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 429, 120, 360, 40, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 2012), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 533, 48, 256, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2010), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 125, 192, 272, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(12), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Time Controls
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 565, 192, 224, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 2020), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 565, 168, 224, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_cmbRecordingHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2021), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbRecordingHCPTemp);
			cmbRecordingHCPComboBox cmbRecordingHCP = (cmbRecordingHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRecordingHCPComboBox.class, m_cmbRecordingHCPTemp);
			super.addComboBox(cmbRecordingHCP);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 533, 24, 256, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_cmbFrequencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2009), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbFrequencyTemp);
			cmbFrequencyComboBox cmbFrequency = (cmbFrequencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFrequencyComboBox.class, m_cmbFrequencyTemp);
			super.addComboBox(cmbFrequency);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 125, 156, 272, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_cmbRouteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbRouteTemp);
			cmbRouteComboBox cmbRoute = (cmbRouteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRouteComboBox.class, m_cmbRouteTemp);
			super.addComboBox(cmbRoute);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 533, 80, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 2011), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"", Boolean.FALSE, null}));
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public ims.clinical.forms.clinicalcoding.IComponent customControlCodingItem()
		{
			return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setcustomControlCodingItemValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setcustomControlCodingItemVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean iscustomControlCodingItemVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setcustomControlCodingItemEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean iscustomControlCodingItemEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
		public ims.core.forms.authoringinfo.IComponent customControlAuthor()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
		}
		public void setcustomControlAuthorValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
		}
		public void setcustomControlAuthorVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setVisible(value);
		}
		public boolean iscustomControlAuthorVisible()
		{
			return ((ims.framework.Control)super.getControl(1)).isVisible();
		}
		public void setcustomControlAuthorEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setEnabled(value);
		}
		public boolean iscustomControlAuthorEnabled()
		{
			return ((ims.framework.Control)super.getControl(1)).isEnabled();
		}
		public TextBox txtDifficulties()
		{
			return (TextBox)super.getControl(11);
		}
		public TextBox txtTakenWhen()
		{
			return (TextBox)super.getControl(12);
		}
		public TextBox txtDose()
		{
			return (TextBox)super.getControl(13);
		}
		public DateTimeControl dtimRecordingDateTime()
		{
			return (DateTimeControl)super.getControl(14);
		}
		public cmbRecordingHCPComboBox cmbRecordingHCP()
		{
			return (cmbRecordingHCPComboBox)super.getComboBox(0);
		}
		public cmbFrequencyComboBox cmbFrequency()
		{
			return (cmbFrequencyComboBox)super.getComboBox(1);
		}
		public cmbRouteComboBox cmbRoute()
		{
			return (cmbRouteComboBox)super.getComboBox(2);
		}
		public CheckBox chkSelfMedicating()
		{
			return (CheckBox)super.getControl(18);
		}
	}
	public static class grdMedicationRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMedicationRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolDrugReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolDrugReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolDrugOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolDrug(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolDrug()
		{
			return (String)super.row.get(0);
		}
		public void setcolDrug(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolDrugTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolRouteReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolRouteReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolRouteOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolRoute(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolRoute()
		{
			return (String)super.row.get(1);
		}
		public void setcolRoute(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolRouteTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolDoseReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolDoseReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolDoseOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolDose(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolDose()
		{
			return (String)super.row.get(2);
		}
		public void setcolDose(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolDoseTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolFreqReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolFreqReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolFreqOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolFreq(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolFreq()
		{
			return (String)super.row.get(3);
		}
		public void setcolFreq(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolFreqTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolWhenTakenReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolWhenTakenReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolWhenTakenOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolWhenTaken(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolWhenTaken()
		{
			return (String)super.row.get(4);
		}
		public void setcolWhenTaken(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolWhenTakenTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolDiffReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolDiffReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolDiffOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolDiff(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getcolDiff()
		{
			return (String)super.row.get(5);
		}
		public void setcolDiff(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolDiffTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolTTOReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolTTOReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolTTOOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForcolTTO(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.framework.utils.Image getcolTTO()
		{
			return (ims.framework.utils.Image)super.row.get(6);
		}
		public void setcolTTO(ims.framework.utils.Image value)
		{
			super.row.set(6, value);
		}
		public void setCellcolTTOTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.core.vo.PatientMedicationVo getValue()
		{
			return (ims.core.vo.PatientMedicationVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientMedicationVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdMedicationRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMedicationRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMedicationRow get(int index)
		{
			return new grdMedicationRow(super.collection.get(index));
		}
		public grdMedicationRow newRow()
		{
			return new grdMedicationRow(super.collection.newRow());
		}
		public grdMedicationRow newRow(boolean autoSelect)
		{
			return new grdMedicationRow(super.collection.newRow(autoSelect));
		}
		public grdMedicationRow newRowAt(int index)
		{
			return new grdMedicationRow(super.collection.newRowAt(index));
		}
		public grdMedicationRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMedicationRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMedicationGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.core.vo.PatientMedicationVo[] getValues()
		{
			ims.core.vo.PatientMedicationVo[] listOfValues = new ims.core.vo.PatientMedicationVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.PatientMedicationVo getValue()
		{
			return (ims.core.vo.PatientMedicationVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientMedicationVo value)
		{
			super.grid.setValue(value);
		}
		public grdMedicationRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMedicationRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMedicationRowCollection getRows()
		{
			return new grdMedicationRowCollection(super.grid.getRows());
		}
		public grdMedicationRow getRowByValue(ims.core.vo.PatientMedicationVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMedicationRow(row);
		}
		public void setcolDrugHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolDrugHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolRouteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolRouteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolDoseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolDoseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolFreqHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolFreqHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolWhenTakenHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolWhenTakenHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolDiffHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolDiffHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolTTOHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolTTOHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
	}

	public static class Group1RadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 96, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper20.getX(), anchoringHelper20.getY(), anchoringHelper20.getWidth(), "View Active", startTabIndex.intValue() + 1);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 120, 8, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper21.getX(), anchoringHelper21.getY(), anchoringHelper21.getWidth(), "View All", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 208, 8, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper22.getX(), anchoringHelper22.getY(), anchoringHelper22.getWidth(), "View Inactive", startTabIndex.intValue() + 3);
		}
		public void setText(Group1Enumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public Group1Enumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return Group1Enumeration.None;
				case 0: return Group1Enumeration.rdoCurrent;
				case 1: return Group1Enumeration.rdoAll;
				case 2: return Group1Enumeration.rdoDiscontinued;
			}
			return null;
		}
		public void setValue(Group1Enumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(Group1Enumeration.None.id);
		}
		public boolean isEnabled(Group1Enumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(Group1Enumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(Group1Enumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(Group1Enumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class Group1Enumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static Group1Enumeration None = new Group1Enumeration(-1);
		public static Group1Enumeration rdoCurrent = new Group1Enumeration(0);
		public static Group1Enumeration rdoAll = new Group1Enumeration(1);
		public static Group1Enumeration rdoDiscontinued = new Group1Enumeration(2);
		private Group1Enumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((Group1Enumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuMedicationOnAdmission = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuMedicationOnAdmissionNEWItem = factory.createMenuItem(startControlID.intValue() + 1, "New Medication", true, false, new Integer(123155), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3500001)))
			contextMenus.Clinical.contextMenuMedicationOnAdmission.add(contextMenus.Clinical.contextMenuMedicationOnAdmissionNEWItem);
		contextMenus.Clinical.contextMenuMedicationOnAdmissionEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Medication", true, false, new Integer(123157), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3500002)))
			contextMenus.Clinical.contextMenuMedicationOnAdmission.add(contextMenus.Clinical.contextMenuMedicationOnAdmissionEDITItem);
		contextMenus.Clinical.contextMenuMedicationOnAdmissionINACTIVATEItem = factory.createMenuItem(startControlID.intValue() + 3, "Inactivate Medication", true, false, new Integer(123156), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3500003)))
			contextMenus.Clinical.contextMenuMedicationOnAdmission.add(contextMenus.Clinical.contextMenuMedicationOnAdmissionINACTIVATEItem);
		contextMenus.Clinical.contextMenuMedicationOnAdmissionCOPY_LASTItem = factory.createMenuItem(startControlID.intValue() + 4, "Copy Last Medication", true, false, new Integer(123159), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3500004)))
			contextMenus.Clinical.contextMenuMedicationOnAdmission.add(contextMenus.Clinical.contextMenuMedicationOnAdmissionCOPY_LASTItem);
		form.registerMenu(contextMenus.Clinical.contextMenuMedicationOnAdmission);


		// Container Clasess
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 816, 240, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 240);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper23.getWidth(), anchoringHelper23.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 440, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 2016), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 344, 592, 85, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 2015), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Inactivate", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 2014), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 2019), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 2018), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 2013), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 296, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdMedicationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuMedicationOnAdmission, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdMedicationTemp);
		grdMedicationGrid grdMedication = (grdMedicationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMedicationGrid.class, m_grdMedicationTemp);
		grdMedication.addStringColumn("Medication", 0, 0, 215, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMedication.addStringColumn("Route", 0, 0, 75, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMedication.addStringColumn("Dose", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMedication.addStringColumn("Frequency", 0, 0, 95, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMedication.addStringColumn("Taken When", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMedication.addStringColumn("Difficulties with Meds", 0, 0, 190, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMedication.addImageColumn(" ", 0, 0, -1, true, 0);
		super.addGrid(grdMedication);

		// RadioButton Controls
		RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroup1);
		Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
		Group1.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(Group1);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(1);
	}
	public Button btnInactivate()
	{
		return (Button)super.getControl(2);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(6);
	}
	public grdMedicationGrid grdMedication()
	{
		return (grdMedicationGrid)super.getGrid(0);
	}
	public Group1RadioButton Group1()
	{
		return (Group1RadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Clinical = new ClinicalForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				YesNoDialog = new LocalFormName(102107);
				TaxonomySearch = new LocalFormName(104102);
			}
			public final FormName YesNoDialog;
			public final FormName TaxonomySearch;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				MedicationOnAdmission = new LocalFormName(122126);
				MedicationOnDischarge = new LocalFormName(122128);
				CopyMedication = new LocalFormName(122127);
				Medication = new LocalFormName(122129);
				CopyLastMedication = new LocalFormName(123196);
				ReasonDialog = new LocalFormName(123240);
			}
			public final FormName MedicationOnAdmission;
			public final FormName MedicationOnDischarge;
			public final FormName CopyMedication;
			public final FormName Medication;
			public final FormName CopyLastMedication;
			public final FormName ReasonDialog;
		}

		public CoreForms Core;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Search = new ImageHelper(102120, "Images/Core/bin.gif", new Integer(15), new Integer(15));
				Pin = new ImageHelper(102212, "Images/Core/Push Pin.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Search;
			public final ims.framework.utils.Image Pin;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_MedicationCollection = new ims.framework.ContextVariable("MedicationCollection", prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__MedicationCollection_" + componentIdentifier + "");
			cxl_Record = new ims.framework.ContextVariable("Record", prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier + "");
			cxl_MedicationTaxonomyObject = new ims.framework.ContextVariable("MedicationTaxonomyObject", prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__MedicationTaxonomyObject_" + componentIdentifier + "");
			cxl_HasPreviousMedication = new ims.framework.ContextVariable("HasPreviousMedication", prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__HasPreviousMedication_" + componentIdentifier + "");
			cxl_HasMedications = new ims.framework.ContextVariable("HasMedications", prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__HasMedications_" + componentIdentifier + "");
		}
		
		public boolean getMedicationCollectionIsNotNull()
		{
			return !cxl_MedicationCollection.getValueIsNull(context);
		}
		public ims.core.vo.PatientMedicationVoCollection getMedicationCollection()
		{
			return (ims.core.vo.PatientMedicationVoCollection)cxl_MedicationCollection.getValue(context);
		}
		public void setMedicationCollection(ims.core.vo.PatientMedicationVoCollection value)
		{
			cxl_MedicationCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MedicationCollection = null;
		public boolean getRecordIsNotNull()
		{
			return !cxl_Record.getValueIsNull(context);
		}
		public ims.core.vo.PatientMedicationVo getRecord()
		{
			return (ims.core.vo.PatientMedicationVo)cxl_Record.getValue(context);
		}
		public void setRecord(ims.core.vo.PatientMedicationVo value)
		{
			cxl_Record.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Record = null;
		public boolean getMedicationTaxonomyObjectIsNotNull()
		{
			return !cxl_MedicationTaxonomyObject.getValueIsNull(context);
		}
		public ims.core.vo.TaxonomyMap getMedicationTaxonomyObject()
		{
			return (ims.core.vo.TaxonomyMap)cxl_MedicationTaxonomyObject.getValue(context);
		}
		public void setMedicationTaxonomyObject(ims.core.vo.TaxonomyMap value)
		{
			cxl_MedicationTaxonomyObject.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MedicationTaxonomyObject = null;
		public boolean getHasPreviousMedicationIsNotNull()
		{
			return !cxl_HasPreviousMedication.getValueIsNull(context);
		}
		public Boolean getHasPreviousMedication()
		{
			return (Boolean)cxl_HasPreviousMedication.getValue(context);
		}
		public void setHasPreviousMedication(Boolean value)
		{
			cxl_HasPreviousMedication.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasPreviousMedication = null;
		public boolean getHasMedicationsIsNotNull()
		{
			return !cxl_HasMedications.getValueIsNull(context);
		}
		public Boolean getHasMedications()
		{
			return (Boolean)cxl_HasMedications.getValue(context);
		}
		public void setHasMedications(Boolean value)
		{
			cxl_HasMedications.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasMedications = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class MedicationOnAdmission implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 1;
				public static final int EDIT = 2;
				public static final int INACTIVATE = 3;
				public static final int COPY_LAST = 4;
			}
			public void disableAllMedicationOnAdmissionMenuItems()
			{
				this.contextMenuMedicationOnAdmissionNEWItem.setEnabled(false);
				this.contextMenuMedicationOnAdmissionEDITItem.setEnabled(false);
				this.contextMenuMedicationOnAdmissionINACTIVATEItem.setEnabled(false);
				this.contextMenuMedicationOnAdmissionCOPY_LASTItem.setEnabled(false);
			}
			public void hideAllMedicationOnAdmissionMenuItems()
			{
				this.contextMenuMedicationOnAdmissionNEWItem.setVisible(false);
				this.contextMenuMedicationOnAdmissionEDITItem.setVisible(false);
				this.contextMenuMedicationOnAdmissionINACTIVATEItem.setVisible(false);
				this.contextMenuMedicationOnAdmissionCOPY_LASTItem.setVisible(false);
			}
			private Menu contextMenuMedicationOnAdmission;
			public ReadOnlyMenuItem getMedicationOnAdmissionNEWItem()
			{
				return this.contextMenuMedicationOnAdmissionNEWItem;
			}
			private MenuItem contextMenuMedicationOnAdmissionNEWItem;
			public ReadOnlyMenuItem getMedicationOnAdmissionEDITItem()
			{
				return this.contextMenuMedicationOnAdmissionEDITItem;
			}
			private MenuItem contextMenuMedicationOnAdmissionEDITItem;
			public ReadOnlyMenuItem getMedicationOnAdmissionINACTIVATEItem()
			{
				return this.contextMenuMedicationOnAdmissionINACTIVATEItem;
			}
			private MenuItem contextMenuMedicationOnAdmissionINACTIVATEItem;
			public ReadOnlyMenuItem getMedicationOnAdmissionCOPY_LASTItem()
			{
				return this.contextMenuMedicationOnAdmissionCOPY_LASTItem;
			}
			private MenuItem contextMenuMedicationOnAdmissionCOPY_LASTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[98];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-ID", "ID_PatientMedication");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-OTHERMEDICATIONTEXT", "OtherMedicationText");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-PATIENT", "Patient");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-FREQUENCY", "Frequency");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-SOURCEOFINFORMATION", "SourceofInformation");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-COMMENCEDDATE", "CommencedDate");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-NODAYSSUPPLY", "NoDaysSupply");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-BATCHNO", "BatchNo");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-EXPIRYDATE", "ExpiryDate");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-ISDISCONTINUED", "IsDiscontinued");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-DIFFICULTIESWITHMED", "DifficultiesWithMed");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-SUPPLIED", "Supplied");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-INPOSSESSION", "InPossession");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-ISMEDICATIONONADMISSION", "IsMedicationonAdmission");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-ISDISCHARGEMEDICATION", "IsDischargeMedication");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-CARECONTEXT", "CareContext");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-ISINTTO", "IsInTTO");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-ISDISCONTINUEDDATE", "IsDiscontinuedDate");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-ISDISCONTINUEDREASON", "IsDiscontinuedReason");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-ISDISCONTINUEDREASONTEXT", "IsDiscontinuedReasonText");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-ISCOPIED", "IsCopied");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-COMMENCEDBYTYPE", "CommencedByType");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-DISCONTINUEDBYTYPE", "DiscontinuedByType");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.MedicationOnAdmission.__internal_x_context__Record_" + componentIdentifier, "BO-1003100014-SELFMEDICATING", "SelfMedicating");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
