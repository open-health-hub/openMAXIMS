//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.surgicalauditplannedactualproceduredetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbPatientSentToComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdSurgicalPackRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSurgicalPackRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnNameOfSetDeviceReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnNameOfSetDeviceReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnNameOfSetDeviceOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColumnNameOfSetDevice(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColumnNameOfSetDevice()
		{
			return (String)super.row.get(0);
		}
		public void setColumnNameOfSetDevice(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnNameOfSetDeviceTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnBarcodeNoReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnBarcodeNoReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnBarcodeNoOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColumnBarcodeNo(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColumnBarcodeNo()
		{
			return (String)super.row.get(1);
		}
		public void setColumnBarcodeNo(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnBarcodeNoTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnFreeTextReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnFreeTextReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnFreeTextOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColumnFreeText(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColumnFreeText()
		{
			return (String)super.row.get(2);
		}
		public void setColumnFreeText(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnFreeTextTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.clinical.vo.SurgicalAuditSurgicalPackVo getValue()
		{
			return (ims.clinical.vo.SurgicalAuditSurgicalPackVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.SurgicalAuditSurgicalPackVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSurgicalPackRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSurgicalPackRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSurgicalPackRow get(int index)
		{
			return new grdSurgicalPackRow(super.collection.get(index));
		}
		public grdSurgicalPackRow newRow()
		{
			return new grdSurgicalPackRow(super.collection.newRow());
		}
		public grdSurgicalPackRow newRow(boolean autoSelect)
		{
			return new grdSurgicalPackRow(super.collection.newRow(autoSelect));
		}
		public grdSurgicalPackRow newRowAt(int index)
		{
			return new grdSurgicalPackRow(super.collection.newRowAt(index));
		}
		public grdSurgicalPackRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSurgicalPackRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSurgicalPackGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.clinical.vo.SurgicalAuditSurgicalPackVoCollection getValues()
		{
			ims.clinical.vo.SurgicalAuditSurgicalPackVoCollection listOfValues = new ims.clinical.vo.SurgicalAuditSurgicalPackVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.SurgicalAuditSurgicalPackVo getValue()
		{
			return (ims.clinical.vo.SurgicalAuditSurgicalPackVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.SurgicalAuditSurgicalPackVo value)
		{
			super.grid.setValue(value);
		}
		public grdSurgicalPackRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSurgicalPackRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSurgicalPackRowCollection getRows()
		{
			return new grdSurgicalPackRowCollection(super.grid.getRows());
		}
		public grdSurgicalPackRow getRowByValue(ims.clinical.vo.SurgicalAuditSurgicalPackVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSurgicalPackRow(row);
		}
		public void setColumnNameOfSetDeviceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnNameOfSetDeviceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnBarcodeNoHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnBarcodeNoHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnFreeTextHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnFreeTextHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdPlannedPerformedProcedureRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPlannedPerformedProcedureRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnProcedureNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnProcedureNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnProcedureNameOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColumnProcedureName(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColumnProcedureName()
		{
			return (String)super.row.get(0);
		}
		public void setColumnProcedureName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnProcedureNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnProcedureStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnProcedureStatusReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnProcedureStatusOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColumnProcedureStatus(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColumnProcedureStatus()
		{
			return (String)super.row.get(1);
		}
		public void setColumnProcedureStatus(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnProcedureStatusTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnConsultatntNameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnConsultatntNameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnConsultatntNameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColumnConsultatntName(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColumnConsultatntName()
		{
			return (String)super.row.get(2);
		}
		public void setColumnConsultatntName(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnConsultatntNameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColumnSurgeonReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColumnSurgeonReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColumnSurgeonOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColumnSurgeon(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColumnSurgeon()
		{
			return (String)super.row.get(3);
		}
		public void setColumnSurgeon(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColumnSurgeonTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo getValue()
		{
			return (ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPlannedPerformedProcedureRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPlannedPerformedProcedureRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPlannedPerformedProcedureRow get(int index)
		{
			return new grdPlannedPerformedProcedureRow(super.collection.get(index));
		}
		public grdPlannedPerformedProcedureRow newRow()
		{
			return new grdPlannedPerformedProcedureRow(super.collection.newRow());
		}
		public grdPlannedPerformedProcedureRow newRow(boolean autoSelect)
		{
			return new grdPlannedPerformedProcedureRow(super.collection.newRow(autoSelect));
		}
		public grdPlannedPerformedProcedureRow newRowAt(int index)
		{
			return new grdPlannedPerformedProcedureRow(super.collection.newRowAt(index));
		}
		public grdPlannedPerformedProcedureRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPlannedPerformedProcedureRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPlannedPerformedProcedureGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection getValues()
		{
			ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection listOfValues = new ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo getValue()
		{
			return (ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo value)
		{
			super.grid.setValue(value);
		}
		public grdPlannedPerformedProcedureRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPlannedPerformedProcedureRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPlannedPerformedProcedureRowCollection getRows()
		{
			return new grdPlannedPerformedProcedureRowCollection(super.grid.getRows());
		}
		public grdPlannedPerformedProcedureRow getRowByValue(ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPlannedPerformedProcedureRow(row);
		}
		public void setColumnProcedureNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnProcedureNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnProcedureStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnProcedureStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnConsultatntNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnConsultatntNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColumnSurgeonHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColumnSurgeonHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(824, 545);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacks = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacksADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4840001)))
			contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacks.add(contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacksADDItem);
		contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacksEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4840002)))
			contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacks.add(contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacksEDITItem);
		contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacksREMOVEItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4840003)))
			contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacks.add(contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacksREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacks);
		contextMenus.Clinical.contextMenuPlannedActualProcedure = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuPlannedActualProcedureADDItem = factory.createMenuItem(startControlID.intValue() + 4, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4830001)))
			contextMenus.Clinical.contextMenuPlannedActualProcedure.add(contextMenus.Clinical.contextMenuPlannedActualProcedureADDItem);
		contextMenus.Clinical.contextMenuPlannedActualProcedureEDITItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4830002)))
			contextMenus.Clinical.contextMenuPlannedActualProcedure.add(contextMenus.Clinical.contextMenuPlannedActualProcedureEDITItem);
		contextMenus.Clinical.contextMenuPlannedActualProcedureSETSTATUSTOPERFORMEDItem = factory.createMenuItem(startControlID.intValue() + 6, "Set Status to Performed", true, false, new Integer(102101), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4830003)))
			contextMenus.Clinical.contextMenuPlannedActualProcedure.add(contextMenus.Clinical.contextMenuPlannedActualProcedureSETSTATUSTOPERFORMEDItem);
		contextMenus.Clinical.contextMenuPlannedActualProcedureCANCEL_THIS_PROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 7, "Cancel this Procedure", true, false, new Integer(102100), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4830004)))
			contextMenus.Clinical.contextMenuPlannedActualProcedure.add(contextMenus.Clinical.contextMenuPlannedActualProcedureCANCEL_THIS_PROCEDUREItem);
		contextMenus.Clinical.contextMenuPlannedActualProcedureREMOVEItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4830005)))
			contextMenus.Clinical.contextMenuPlannedActualProcedure.add(contextMenus.Clinical.contextMenuPlannedActualProcedureREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuPlannedActualProcedure);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 496, 190, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Time Patient Leaves Op Theatre:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 470, 96, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Patient Sent To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 448, 154, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Anaesthetists Finish Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 424, 121, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Surgery Finish Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 400, 116, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Surgery Start Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 376, 148, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Anaesthetists Start Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 90, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Surgical packs:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 228, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planned/ Performed Procedure Details:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 738, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 660, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 813, 200, 0, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 208, 494, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 208, 446, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 208, 422, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 208, 398, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 208, 374, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 208, 470, 200, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbPatientSentToTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbPatientSentToTemp);
		cmbPatientSentToComboBox cmbPatientSentTo = (cmbPatientSentToComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientSentToComboBox.class, m_cmbPatientSentToTemp);
		super.addComboBox(cmbPatientSentTo);

		// Grid Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 805, 165, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdSurgicalPackTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuSurgicalAuditSurgicalPacks, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSurgicalPackTemp);
		grdSurgicalPackGrid grdSurgicalPack = (grdSurgicalPackGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSurgicalPackGrid.class, m_grdSurgicalPackTemp);
		grdSurgicalPack.addStringColumn("Name of Set/Device", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSurgicalPack.addStringColumn("Barcode No", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSurgicalPack.addStringColumn("Free Text", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdSurgicalPack);
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 805, 152, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdPlannedPerformedProcedureTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuPlannedActualProcedure, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPlannedPerformedProcedureTemp);
		grdPlannedPerformedProcedureGrid grdPlannedPerformedProcedure = (grdPlannedPerformedProcedureGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPlannedPerformedProcedureGrid.class, m_grdPlannedPerformedProcedureTemp);
		grdPlannedPerformedProcedure.addStringColumn("Procedure Name", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPlannedPerformedProcedure.addStringColumn("Procedure Status", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPlannedPerformedProcedure.addStringColumn("Consultant Name", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPlannedPerformedProcedure.addStringColumn("Surgeon", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdPlannedPerformedProcedure);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(8);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(9);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(10);
	}
	public TextBox txtdummySurgicalPack()
	{
		return (TextBox)super.getControl(11);
	}
	public DateTimeControl dtimTimePatientLeavesOpTheatre()
	{
		return (DateTimeControl)super.getControl(12);
	}
	public DateTimeControl dtimAnaesthetistsFinishTime()
	{
		return (DateTimeControl)super.getControl(13);
	}
	public DateTimeControl dtimSUrgeryFinishTime()
	{
		return (DateTimeControl)super.getControl(14);
	}
	public DateTimeControl dtimSurgeryStartTime()
	{
		return (DateTimeControl)super.getControl(15);
	}
	public DateTimeControl dtimAnaesthetistaStartDate()
	{
		return (DateTimeControl)super.getControl(16);
	}
	public cmbPatientSentToComboBox cmbPatientSentTo()
	{
		return (cmbPatientSentToComboBox)super.getComboBox(0);
	}
	public grdSurgicalPackGrid grdSurgicalPack()
	{
		return (grdSurgicalPackGrid)super.getGrid(0);
	}
	public grdPlannedPerformedProcedureGrid grdPlannedPerformedProcedure()
	{
		return (grdPlannedPerformedProcedureGrid)super.getGrid(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				PlannedPerformedProcedureDialog = new LocalFormName(123246);
				SurgicalPacksDialog = new LocalFormName(123247);
			}
			public final FormName PlannedPerformedProcedureDialog;
			public final FormName SurgicalPacksDialog;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CareContextRef = new ims.framework.ContextVariable("CareContextRef", prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__CareContextRef_" + componentIdentifier + "");
			cxl_PatientRef = new ims.framework.ContextVariable("PatientRef", prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__PatientRef_" + componentIdentifier + "");
			cxl_SurgicalAuditOperationDetailsRef = new ims.framework.ContextVariable("SurgicalAuditOperationDetailsRef", prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__SurgicalAuditOperationDetailsRef_" + componentIdentifier + "");
			cxl_CurrentSurgicalAuditOperationDetails = new ims.framework.ContextVariable("CurrentSurgicalAuditOperationDetails", prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier + "");
			cxl_selectedEvent = new ims.framework.ContextVariable("selectedEvent", prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__selectedEvent_" + componentIdentifier + "");
			cxl_isReadOnly = new ims.framework.ContextVariable("isReadOnly", prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__isReadOnly_" + componentIdentifier + "");
		}
		
		public boolean getCareContextRefIsNotNull()
		{
			return !cxl_CareContextRef.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getCareContextRef()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_CareContextRef.getValue(context);
		}
		public void setCareContextRef(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CareContextRef' RefVo context variable.");
			if(value == null)
				cxl_CareContextRef.setValue(context, null);
			else
				cxl_CareContextRef.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CareContextRef = null;
		public boolean getPatientRefIsNotNull()
		{
			return !cxl_PatientRef.getValueIsNull(context);
		}
		public ims.core.patient.vo.PatientRefVo getPatientRef()
		{
			return (ims.core.patient.vo.PatientRefVo)cxl_PatientRef.getValue(context);
		}
		public void setPatientRef(ims.core.patient.vo.PatientRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PatientRef' RefVo context variable.");
			if(value == null)
				cxl_PatientRef.setValue(context, null);
			else
				cxl_PatientRef.setValue(context, new ims.core.patient.vo.PatientRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PatientRef = null;
		public boolean getSurgicalAuditOperationDetailsRefIsNotNull()
		{
			return !cxl_SurgicalAuditOperationDetailsRef.getValueIsNull(context);
		}
		public ims.clinical.vo.SurgicalAuditOperationDetailRefVo getSurgicalAuditOperationDetailsRef()
		{
			return (ims.clinical.vo.SurgicalAuditOperationDetailRefVo)cxl_SurgicalAuditOperationDetailsRef.getValue(context);
		}
		public void setSurgicalAuditOperationDetailsRef(ims.clinical.vo.SurgicalAuditOperationDetailRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'SurgicalAuditOperationDetailsRef' RefVo context variable.");
			if(value == null)
				cxl_SurgicalAuditOperationDetailsRef.setValue(context, null);
			else
				cxl_SurgicalAuditOperationDetailsRef.setValue(context, new ims.clinical.vo.SurgicalAuditOperationDetailRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_SurgicalAuditOperationDetailsRef = null;
		public boolean getCurrentSurgicalAuditOperationDetailsIsNotNull()
		{
			return !cxl_CurrentSurgicalAuditOperationDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.SurgicalAuditOperationDetailVo getCurrentSurgicalAuditOperationDetails()
		{
			return (ims.clinical.vo.SurgicalAuditOperationDetailVo)cxl_CurrentSurgicalAuditOperationDetails.getValue(context);
		}
		public void setCurrentSurgicalAuditOperationDetails(ims.clinical.vo.SurgicalAuditOperationDetailVo value)
		{
			cxl_CurrentSurgicalAuditOperationDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentSurgicalAuditOperationDetails = null;
		public boolean getselectedEventIsNotNull()
		{
			return !cxl_selectedEvent.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent getselectedEvent()
		{
			return (ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent)cxl_selectedEvent.getValue(context);
		}
		public void setselectedEvent(ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent value)
		{
			cxl_selectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedEvent = null;
		public boolean getisReadOnlyIsNotNull()
		{
			return !cxl_isReadOnly.getValueIsNull(context);
		}
		public Boolean getisReadOnly()
		{
			return (Boolean)cxl_isReadOnly.getValue(context);
		}
		public void setisReadOnly(Boolean value)
		{
			cxl_isReadOnly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isReadOnly = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class SurgicalAuditSurgicalPacks implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int REMOVE = 3;
			}
			public void disableAllSurgicalAuditSurgicalPacksMenuItems()
			{
				this.contextMenuSurgicalAuditSurgicalPacksADDItem.setEnabled(false);
				this.contextMenuSurgicalAuditSurgicalPacksEDITItem.setEnabled(false);
				this.contextMenuSurgicalAuditSurgicalPacksREMOVEItem.setEnabled(false);
			}
			public void hideAllSurgicalAuditSurgicalPacksMenuItems()
			{
				this.contextMenuSurgicalAuditSurgicalPacksADDItem.setVisible(false);
				this.contextMenuSurgicalAuditSurgicalPacksEDITItem.setVisible(false);
				this.contextMenuSurgicalAuditSurgicalPacksREMOVEItem.setVisible(false);
			}
			private Menu contextMenuSurgicalAuditSurgicalPacks;
			public ReadOnlyMenuItem getSurgicalAuditSurgicalPacksADDItem()
			{
				return this.contextMenuSurgicalAuditSurgicalPacksADDItem;
			}
			private MenuItem contextMenuSurgicalAuditSurgicalPacksADDItem;
			public ReadOnlyMenuItem getSurgicalAuditSurgicalPacksEDITItem()
			{
				return this.contextMenuSurgicalAuditSurgicalPacksEDITItem;
			}
			private MenuItem contextMenuSurgicalAuditSurgicalPacksEDITItem;
			public ReadOnlyMenuItem getSurgicalAuditSurgicalPacksREMOVEItem()
			{
				return this.contextMenuSurgicalAuditSurgicalPacksREMOVEItem;
			}
			private MenuItem contextMenuSurgicalAuditSurgicalPacksREMOVEItem;
			public final class PlannedActualProcedure implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 4;
				public static final int EDIT = 5;
				public static final int SETSTATUSTOPERFORMED = 6;
				public static final int CANCEL_THIS_PROCEDURE = 7;
				public static final int REMOVE = 8;
			}
			public void disableAllPlannedActualProcedureMenuItems()
			{
				this.contextMenuPlannedActualProcedureADDItem.setEnabled(false);
				this.contextMenuPlannedActualProcedureEDITItem.setEnabled(false);
				this.contextMenuPlannedActualProcedureSETSTATUSTOPERFORMEDItem.setEnabled(false);
				this.contextMenuPlannedActualProcedureCANCEL_THIS_PROCEDUREItem.setEnabled(false);
				this.contextMenuPlannedActualProcedureREMOVEItem.setEnabled(false);
			}
			public void hideAllPlannedActualProcedureMenuItems()
			{
				this.contextMenuPlannedActualProcedureADDItem.setVisible(false);
				this.contextMenuPlannedActualProcedureEDITItem.setVisible(false);
				this.contextMenuPlannedActualProcedureSETSTATUSTOPERFORMEDItem.setVisible(false);
				this.contextMenuPlannedActualProcedureCANCEL_THIS_PROCEDUREItem.setVisible(false);
				this.contextMenuPlannedActualProcedureREMOVEItem.setVisible(false);
			}
			private Menu contextMenuPlannedActualProcedure;
			public ReadOnlyMenuItem getPlannedActualProcedureADDItem()
			{
				return this.contextMenuPlannedActualProcedureADDItem;
			}
			private MenuItem contextMenuPlannedActualProcedureADDItem;
			public ReadOnlyMenuItem getPlannedActualProcedureEDITItem()
			{
				return this.contextMenuPlannedActualProcedureEDITItem;
			}
			private MenuItem contextMenuPlannedActualProcedureEDITItem;
			public ReadOnlyMenuItem getPlannedActualProcedureSETSTATUSTOPERFORMEDItem()
			{
				return this.contextMenuPlannedActualProcedureSETSTATUSTOPERFORMEDItem;
			}
			private MenuItem contextMenuPlannedActualProcedureSETSTATUSTOPERFORMEDItem;
			public ReadOnlyMenuItem getPlannedActualProcedureCANCEL_THIS_PROCEDUREItem()
			{
				return this.contextMenuPlannedActualProcedureCANCEL_THIS_PROCEDUREItem;
			}
			private MenuItem contextMenuPlannedActualProcedureCANCEL_THIS_PROCEDUREItem;
			public ReadOnlyMenuItem getPlannedActualProcedureREMOVEItem()
			{
				return this.contextMenuPlannedActualProcedureREMOVEItem;
			}
			private MenuItem contextMenuPlannedActualProcedureREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[107];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditActualPlannedProcedure", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditActualPlannedProcedure", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditActualPlannedProcedure", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditActualPlannedProcedure", "BO-1003100017-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditActualPlannedProcedure", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditActualPlannedProcedure", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditActualPlannedProcedure", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditActualPlannedProcedure", "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditActualPlannedProcedure", "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditSurgicalPack", "BO-1072100105-ID", "ID_SurgicalAuditSurgicalPack");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditSurgicalPack", "BO-1072100105-SURGICALPACK", "SurgicalPack");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditSurgicalPack", "BO-1072100105-BARCODENUMBER", "BarcodeNumber");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.SurgicalAuditSurgicalPack", "BO-1072100105-COMMENT", "Comment");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-ID", "ID_SurgicalAuditProcedureDetails");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-PATIENT", "Patient");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-CARECONTEXT", "CareContext");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-ANAESTHETISTNOTREQUIRED", "AnaesthetistNotRequired");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-ANAESTHETISTASSISTNOTREQUIRED", "AnaesthetistAssistNotRequired");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-OTHER", "Other");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-SURGICALCHECKLISTPERFORMED", "SurgicalCheckListPerformed");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-CHECKLISTNOTPERFORMEDREASON", "CheckListNotPerformedReason");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-LOCUMANAESTNURSE", "LocumAnaestNurse");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-LOCUMSCRUBNURSE", "LocumScrubNurse");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-LOCUMCIRCULATINGNURSE", "LocumCirculatingNurse");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-ANAESTHETICUSED", "AnaestheticUsed");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-ANAESTHETICUSEDCOMMENT", "AnaestheticUsedComment");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Clinical.CurrentSurgicalAuditProcedureDetail", "BO-1072100103-ENTEROPTHEATRETIME", "EnterOpTheatreTime");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__CareContextRef_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__PatientRef_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__SurgicalAuditOperationDetailsRef_" + componentIdentifier, "BO-1072100108-ID", "ID_SurgicalAuditOperationDetail");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-ID", "ID_SurgicalAuditOperationDetail");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-PATIENT", "Patient");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-CARECONTEXT", "CareContext");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-OPERATIONCANCELLED", "OperationCancelled");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-REASONFORCANCELLATION", "ReasonForCancellation");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPlannedActualProcedureDetails.__internal_x_context__CurrentSurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-REASONFORCANCELLATIONCOMMENT", "ReasonForCancellationComment");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
