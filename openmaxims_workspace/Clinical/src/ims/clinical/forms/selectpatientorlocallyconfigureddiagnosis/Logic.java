//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.55 build 2718.17958)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.selectpatientorlocallyconfigureddiagnosis;

import ims.clinical.forms.selectpatientorlocallyconfigureddiagnosis.GenForm.grdDiagnosisRow;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.PatientDiagnosisListVo;
import ims.core.vo.PatientDiagnosisListVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().Clinical.getLocallyConfiguredDiagnosisIsNotNull()
			&& ! form.getGlobalContext().Clinical.getLocallyConfiguredDiagnosis())
		{
			form.lblSearch().setVisible(false);
			form.txtSearch().setVisible(false);
			form.imbSearch().setVisible(false);
			
			openPatientDiagnoses();
		}
		
		form.setMode(FormMode.EDIT);
		form.btnSave().setEnabled(false);
	}

	private void openPatientDiagnoses() 
	{
		PatientDiagnosisListVoCollection voColl = domain.listCancerDiagnosisByPatient(form.getGlobalContext().Core.getPatientShort());
		
		for (int i=0; i < voColl.size(); i++)
		{
			PatientDiagnosisListVo voDiagnosis = voColl.get(i);
			
			if (voDiagnosis.getDiagnosisIsNotNull() || voDiagnosis.getDiagnosisDescriptionIsNotNull())
			{
				grdDiagnosisRow row = form.grdDiagnosis().getRows().newRow();
				
				row.setValue(voDiagnosis);
				row.setcolItems(voDiagnosis.getDiagnosisDescription());
				row.setColumnSelect(false);
			}
		}
	
	}

	@Override
	protected void onGrdDiagnosisSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	
	@Override
	protected void onGrdDiagnosisGridCheckBoxClicked(int column, GenForm.grdDiagnosisRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
		for (int i = 0 ; i < form.grdDiagnosis().getRows().size() ; i++)
		{
			if (form.grdDiagnosis().getRows().get(i).getColumnSelect()
				&& (! form.grdDiagnosis().getRows().get(i).getValue().equals(row.getValue())))
				form.grdDiagnosis().getRows().get(i).setColumnSelect(false);
		}
		
		form.btnSave().setEnabled(isChecked);
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdDiagnosis().getRows().clear();
		form.btnSave().setEnabled(false);

		DiagLiteVoCollection coll;
		try 
		{
			coll = domain.listDiagnosis(form.txtSearch().getValue());
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}

		if(coll == null || coll.size() == 0)
		{
			engine.showMessage("No diagnosis found !");
			return;
		}
			
		displayDiagnosisCollection(coll);
	}

	private void displayDiagnosisCollection(DiagLiteVoCollection coll)
	{
		for(int i = 0; i < coll.size(); i++)
		{
			grdDiagnosisRow row = form.grdDiagnosis().getRows().newRow();
			
			row.setValue(coll.get(i));
			row.setcolItems(coll.get(i).getDiagnosisName());
			row.setColumnSelect(false);
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		for (int i = 0 ; i < form.grdDiagnosis().getRows().size() ; i++)
		{
			if (form.grdDiagnosis().getRows().get(i).getColumnSelect())
			{
				if (form.grdDiagnosis().getRows().get(i).getValue() instanceof PatientDiagnosisListVo)
					form.getGlobalContext().Clinical.setSelectedPatientDiagnosisListVo((PatientDiagnosisListVo)form.grdDiagnosis().getRows().get(i).getValue());
				else if (form.grdDiagnosis().getRows().get(i).getValue() instanceof DiagLiteVo)
				{
					PatientDiagnosisListVo voPD = new PatientDiagnosisListVo();
					voPD.setDiagnosis((DiagLiteVo) form.grdDiagnosis().getRows().get(i).getValue());
					voPD.setDiagnosisDescription( ((DiagLiteVo)form.grdDiagnosis().getRows().get(i).getValue()).getDiagnosisName());
					form.getGlobalContext().Clinical.setSelectedPatientDiagnosisListVo(voPD);
				}
			}
		}
		
		engine.close(DialogResult.OK);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Clinical.setSelectedPatientDiagnosisListVo(null);
		engine.close(DialogResult.CANCEL);
	}
}
