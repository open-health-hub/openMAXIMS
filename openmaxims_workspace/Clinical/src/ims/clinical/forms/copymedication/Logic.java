//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.39 build 2172.16860)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.copymedication;
import ims.clinical.helper.MedicationDosesDynamicGridPopulation;
import ims.clinical.vo.MedicationOverViewVo;
import ims.core.vo.PatientMedicationVo;
import ims.core.vo.PatientMedicationVoCollection;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		MedicationDosesDynamicGridPopulation gridPopulation = new MedicationDosesDynamicGridPopulation(form.dyngrdMedicationOverView(), form.getImages().Admin.Activity, form.getImages().ICP.Child, true);
		gridPopulation.initializeGrid();
		
		gridPopulation.populateHideDiscontinued(form.getGlobalContext().Clinical.getCurrentMedicationOverView());

		if (form.dyngrdMedicationOverView().getRows().size() == 0)
			engine.showMessage(("There are no current Medications in the previous Medication Overview for this patient."));

		if (form.getGlobalContext().Clinical.getCurrentMedicationOverViewIsNotNull() && form.getGlobalContext().Clinical.getCurrentMedicationOverView().getAuthoringInformationIsNotNull())
		{
			form.customControlAuthoringInfo().setValue(form.getGlobalContext().Clinical.getCurrentMedicationOverView().getAuthoringInformation());
		}

		form.getLocalContext().setMedicationRecordChanged(Boolean.FALSE);
		form.btnOk().setEnabled(true);
	}
	
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		
/*		if (form.cmbCorrectness().getValue() != null
			&& form.cmbCorrectness().getValue().equals(MedOverviewCorrectness.INACURATE)
			&& !form.getLocalContext().getMedicationRecordChanged().booleanValue() )
		{
			engine.showMessage("Please edit the Medication overview before saving as you have indicated the overview is inacurate.");
			return;
		}
*/		
		save();
		
		if (form.getGlobalContext().Clinical.getCurrentMedicationOverViewIsNotNull())
			engine.close(DialogResult.OK);
		else
			engine.close(DialogResult.CANCEL);
	}

	private void save()
	{
		PatientMedicationVoCollection voCopyColl = new PatientMedicationVoCollection(); 
		DynamicGridColumn colCopy = form.dyngrdMedicationOverView().getColumns().getByIdentifier(new Integer(9));
		for (int i = 0 ; i < form.dyngrdMedicationOverView().getRows().size() ; i++)
		{
			if (form.dyngrdMedicationOverView().getRows().get(i).getValue() instanceof PatientMedicationVo)
			{
				DynamicGridCell cellCopy = form.dyngrdMedicationOverView().getRows().get(i).getCells().get(colCopy);
				if (cellCopy != null && cellCopy.getType() == DynamicCellType.BOOL && ((Boolean)cellCopy.getValue()) == Boolean.TRUE )
					voCopyColl.add((PatientMedicationVo)form.dyngrdMedicationOverView().getRows().get(i).getValue());
			}
		}
		MedicationOverViewVo voMedOver = form.getGlobalContext().Clinical.getCurrentMedicationOverView();
		if (voCopyColl.size() > 0)
		{
			voMedOver.setMedication(voCopyColl);
			voMedOver.setCorrectness(form.cmbCorrectness().getValue());
			
			form.getGlobalContext().Clinical.setCurrentMedicationOverView(voMedOver);
		}
		else
			form.getGlobalContext().Clinical.setCurrentMedicationOverView(null);
	}

	protected void onCmbCorrectnessValueChanged() throws PresentationLogicException 
	{
		// TODO Auto-generated method stub
		
	}

	protected void onDyngrdMedicationOverViewCellButtonClicked(DynamicGridCell cell) 
	{
		form.getLocalContext().setMedicationRecordChanged(Boolean.TRUE);
	}

	protected void onDyngrdMedicationOverViewCellValueChanged(DynamicGridCell cell) 
	{
		form.getLocalContext().setMedicationRecordChanged(Boolean.TRUE);
	}

	protected void onDyngrdMedicationOverViewRowSelectionChanged(DynamicGridRow row) 
	{
		
	}

}
