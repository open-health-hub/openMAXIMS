//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.45 build 2308.23992)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.medicationdiscontinue;

import ims.clinical.vo.DiscontinueMedicationReasonValuesVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.MedciationCommencedDiscontinuedType;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		//Defaulting Authoring HCP and Date
		form.dteDate().setValue(new Date());
		
		form.cmbDiscontinuedByType().setValue(MedciationCommencedDiscontinuedType.MOS);
		defaultHCP();
		form.qmbHCP().setEnabled(true);
		
		if (form.getGlobalContext().Clinical.getDiscontinueMedicationReasonValuesIsNotNull())
		{
			form.dteDate().setValue(form.getGlobalContext().Clinical.getDiscontinueMedicationReasonValues().getStoppedDate());
			Hcp hcp = form.getGlobalContext().Clinical.getDiscontinueMedicationReasonValues().getStoppedHCP();
			if(hcp!=null){
				form.qmbHCP().newRow(hcp, hcp.toString());
				form.qmbHCP().setValue(hcp);
			}
			form.cmbReasonDiscontinued().setValue(form.getGlobalContext().Clinical.getDiscontinueMedicationReasonValues().getStoppedReason());
			form.txtReasonDesc().setValue(form.getGlobalContext().Clinical.getDiscontinueMedicationReasonValues().getStoppedReasonDesc());
		}
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		DiscontinueMedicationReasonValuesVo voReason = new DiscontinueMedicationReasonValuesVo();
		
		voReason.setStoppedDate(form.dteDate().getValue());
		voReason.setStoppedHCP(form.qmbHCP().getValue());
		voReason.setStoppedReason(form.cmbReasonDiscontinued().getValue());
		voReason.setStoppedReasonDesc(form.txtReasonDesc().getValue());
		voReason.setStoppedByType(form.cmbDiscontinuedByType().getValue());
		
		form.getGlobalContext().Clinical.setDiscontinueMedicationReasonValues(voReason);
	
		engine.close(DialogResult.OK);
	}

	protected void onQmbHCPTextSubmited(String value) 
	{
		form.qmbHCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		
		HcpCollection voHCPColl = domain.listHcps(filter);
		
		if(voHCPColl != null)
		{
			for (int i = 0; i < voHCPColl.size(); i++)
			{
				form.qmbHCP().newRow(voHCPColl.get(i), voHCPColl.get(i).toString());
			}
			if (voHCPColl.size() == 1)
			{
				form.qmbHCP().setValue(voHCPColl.get(0));
			}
			else if (voHCPColl.size() > 1)
			{
				form.qmbHCP().showOpened();		
			}
		}
}

	protected void onCmbDiscontinuedByTypeValueChanged() throws PresentationLogicException 
	{
		if ( (form.cmbDiscontinuedByType().getValue() != null)
			&& (form.cmbDiscontinuedByType().getValue().equals(MedciationCommencedDiscontinuedType.MOS)) )
		{
			form.qmbHCP().setEnabled(true);
			defaultHCP();
		}
		else
		{
			form.qmbHCP().setEnabled(false);
			form.qmbHCP().setValue(null);
		}
	}

	private void defaultHCP() 
	{
		Hcp hcp = (Hcp) domain.getHcpUser();
		if(hcp != null)
		{
			form.qmbHCP().newRow(hcp, hcp.toString());
			form.qmbHCP().setValue(hcp);
		}
	}
}
