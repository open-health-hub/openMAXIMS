//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.deathdetails;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.clinical.domain.DeathDetails.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.clinical.domain.DeathDetails domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbPostMortemValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPostMortem().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PostMortem existingInstance = (ims.core.vo.lookups.PostMortem)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPostMortemLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PostMortem)
		{
			ims.core.vo.lookups.PostMortem instance = (ims.core.vo.lookups.PostMortem)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPostMortemLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PostMortem existingInstance = (ims.core.vo.lookups.PostMortem)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPostMortem().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPostMortemLookup()
	{
		this.form.cmbPostMortem().clear();
		ims.core.vo.lookups.PostMortemCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPostMortem(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPostMortem().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPostMortemLookupValue(int id)
	{
		ims.core.vo.lookups.PostMortem instance = ims.core.vo.lookups.LookupHelper.getPostMortemInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPostMortem().setValue(instance);
	}
	protected final void defaultcmbPostMortemLookupValue()
	{
		this.form.cmbPostMortem().setValue((ims.core.vo.lookups.PostMortem)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PostMortem.class, engine.getFormName().getID(), ims.core.vo.lookups.PostMortem.TYPE_ID));
	}
	protected final void oncmbCodeDiscrepencyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbCodeDiscrepency().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DeathCodeDiscrepency existingInstance = (ims.core.vo.lookups.DeathCodeDiscrepency)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCodeDiscrepencyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.DeathCodeDiscrepency)
		{
			ims.core.vo.lookups.DeathCodeDiscrepency instance = (ims.core.vo.lookups.DeathCodeDiscrepency)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCodeDiscrepencyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DeathCodeDiscrepency existingInstance = (ims.core.vo.lookups.DeathCodeDiscrepency)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbCodeDiscrepency().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCodeDiscrepencyLookup()
	{
		this.form.cmbCodeDiscrepency().clear();
		ims.core.vo.lookups.DeathCodeDiscrepencyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getDeathCodeDiscrepency(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbCodeDiscrepency().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCodeDiscrepencyLookupValue(int id)
	{
		ims.core.vo.lookups.DeathCodeDiscrepency instance = ims.core.vo.lookups.LookupHelper.getDeathCodeDiscrepencyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbCodeDiscrepency().setValue(instance);
	}
	protected final void defaultcmbCodeDiscrepencyLookupValue()
	{
		this.form.cmbCodeDiscrepency().setValue((ims.core.vo.lookups.DeathCodeDiscrepency)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.DeathCodeDiscrepency.class, engine.getFormName().getID(), ims.core.vo.lookups.DeathCodeDiscrepency.TYPE_ID));
	}
	protected final void oncmbCancerRelatedValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbCancerRelated().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DeathCauseCancer existingInstance = (ims.core.vo.lookups.DeathCauseCancer)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCancerRelatedLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.DeathCauseCancer)
		{
			ims.core.vo.lookups.DeathCauseCancer instance = (ims.core.vo.lookups.DeathCauseCancer)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCancerRelatedLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DeathCauseCancer existingInstance = (ims.core.vo.lookups.DeathCauseCancer)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbCancerRelated().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCancerRelatedLookup()
	{
		this.form.cmbCancerRelated().clear();
		ims.core.vo.lookups.DeathCauseCancerCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getDeathCauseCancer(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbCancerRelated().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCancerRelatedLookupValue(int id)
	{
		ims.core.vo.lookups.DeathCauseCancer instance = ims.core.vo.lookups.LookupHelper.getDeathCauseCancerInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbCancerRelated().setValue(instance);
	}
	protected final void defaultcmbCancerRelatedLookupValue()
	{
		this.form.cmbCancerRelated().setValue((ims.core.vo.lookups.DeathCauseCancer)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.DeathCauseCancer.class, engine.getFormName().getID(), ims.core.vo.lookups.DeathCauseCancer.TYPE_ID));
	}
	protected final void oncmbHowCauseEstablishedValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbHowCauseEstablished().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DeathCauseEstablished existingInstance = (ims.core.vo.lookups.DeathCauseEstablished)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbHowCauseEstablishedLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.DeathCauseEstablished)
		{
			ims.core.vo.lookups.DeathCauseEstablished instance = (ims.core.vo.lookups.DeathCauseEstablished)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbHowCauseEstablishedLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DeathCauseEstablished existingInstance = (ims.core.vo.lookups.DeathCauseEstablished)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbHowCauseEstablished().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbHowCauseEstablishedLookup()
	{
		this.form.cmbHowCauseEstablished().clear();
		ims.core.vo.lookups.DeathCauseEstablishedCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getDeathCauseEstablished(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbHowCauseEstablished().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbHowCauseEstablishedLookupValue(int id)
	{
		ims.core.vo.lookups.DeathCauseEstablished instance = ims.core.vo.lookups.LookupHelper.getDeathCauseEstablishedInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbHowCauseEstablished().setValue(instance);
	}
	protected final void defaultcmbHowCauseEstablishedLookupValue()
	{
		this.form.cmbHowCauseEstablished().setValue((ims.core.vo.lookups.DeathCauseEstablished)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.DeathCauseEstablished.class, engine.getFormName().getID(), ims.core.vo.lookups.DeathCauseEstablished.TYPE_ID));
	}
	protected final void oncmbPlaceofDeathValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPlaceofDeath().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PlaceofDeath existingInstance = (ims.core.vo.lookups.PlaceofDeath)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPlaceofDeathLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PlaceofDeath)
		{
			ims.core.vo.lookups.PlaceofDeath instance = (ims.core.vo.lookups.PlaceofDeath)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPlaceofDeathLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PlaceofDeath existingInstance = (ims.core.vo.lookups.PlaceofDeath)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPlaceofDeath().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPlaceofDeathLookup()
	{
		this.form.cmbPlaceofDeath().clear();
		ims.core.vo.lookups.PlaceofDeathCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPlaceofDeath(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPlaceofDeath().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPlaceofDeathLookupValue(int id)
	{
		ims.core.vo.lookups.PlaceofDeath instance = ims.core.vo.lookups.LookupHelper.getPlaceofDeathInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPlaceofDeath().setValue(instance);
	}
	protected final void defaultcmbPlaceofDeathLookupValue()
	{
		this.form.cmbPlaceofDeath().setValue((ims.core.vo.lookups.PlaceofDeath)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PlaceofDeath.class, engine.getFormName().getID(), ims.core.vo.lookups.PlaceofDeath.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.clinical.domain.DeathDetails domain;
}
