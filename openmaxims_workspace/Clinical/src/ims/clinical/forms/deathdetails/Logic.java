//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.53 build 2650.27803)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.deathdetails;

import java.util.ArrayList;

import ims.clinical.forms.deathdetails.GenForm.CoronerEnumeration;
import ims.clinical.forms.deathdetails.GenForm.grdCauseofDeathRow;
import ims.core.vo.DeathConditionsVo;
import ims.core.vo.DeathConditionsVoCollection;
import ims.core.vo.DeathDetailsVo;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.PatientDiagnosisListVo;
import ims.core.vo.PatientShort;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.CauseofDeathCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		loadCauseOfDeathGridLookups();
		open();
		
		if ((!ims.configuration.gen.ConfigFlag.DOM.LOCAL_PATIENT_REGISTRATION.getValue())
			|| form.getGlobalContext().Core.getParentFormMode().equals(FormMode.VIEW))
		{
			form.setMode(FormMode.VIEW);
			form.getContextMenus().Clinical.hideAllDeathDetailsMenuItems();
		}
		else
		{
			form.getContextMenus().Clinical.hideAllDeathDetailsMenuItems();
		}
	}
	
	private void loadCauseOfDeathGridLookups() 
	{
		form.grdCauseofDeath().getRows().clear();
		
		CauseofDeathCollection coll = LookupHelper.getCauseofDeath(domain.getLookupService());
		for (int i = 0; coll != null && i < coll.size(); i++)
		{
			grdCauseofDeathRow row = form.grdCauseofDeath().getRows().newRow();
			row.setColCause(coll.get(i));
			row.setColCauseReadOnly(true);
		}
	}

	private void open() 
	{
		PatientShort patVo = form.getGlobalContext().Core.getPatientShort();
		//form.dteDOD().setValue(patVo.getDodIsNotNull() ? patVo.getDod() : null);//	WDEV-14931
		DeathDetailsVo ddVo = form.getGlobalContext().Core.getDeathDetails();
		
		if (form.getGlobalContext().Core.getDeathDetails() == null)
			ddVo = domain.getDeathDetails(patVo);

		if (ddVo != null)
		{
			form.getLocalContext().setDeathDetails(ddVo);
			
			populateScreenFromData(ddVo);
		}
		else //WDEV-16548 patient DOD may have been updated through HL7 message, set this value in the date field 
			form.dteDOD().setValue(form.getGlobalContext().Core.getPatientShort().getDod());
	 	
	 	for (int i = 0; i < form.grdCauseofDeath().getRows().size(); i++)
	 		form.grdCauseofDeath().getRows().get(i).setTooltip(form.grdCauseofDeath().getRows().get(i).getColCause().getText());
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-14715
		String[] uiErrors = getUIErrors();
		if (uiErrors != null)
		{
			engine.showErrors(uiErrors);
			return ;
		}
		
		DeathDetailsVo ddVo = form.getLocalContext().getDeathDetails();
		if (ddVo == null)
		{
			ddVo = new DeathDetailsVo();
			ddVo.setPatient(form.getGlobalContext().Core.getPatientShort());
		}

		if (ddVo.getPatient().getDod() != null
			&& form.dteDOD().getValue() == null) // someone has blanked the DOD
			ddVo.setIsRIE(true);
			
		ddVo.getPatient().setDod(form.dteDOD().getValue() != null ? form.dteDOD().getValue() : null);
		
		form.getGlobalContext().Core.setDeathDetails(populateDataFromScreen(ddVo));
		
		engine.close(DialogResult.OK);
	}

	//WDEV-14715
	private String[] getUIErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.dteDOD().getValue() != null && form.dteDOD().getValue().isGreaterThan(new Date())) //WDEV-14793
		{
			errors.add("Date of Death cannot be set in the future!");
		}

		if (errors.size() > 0) 
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}

	private void populateScreenFromData(DeathDetailsVo ddVo) 
	{
		if (ddVo == null)
			return;
		
		form.dteDOD().setValue(ddVo.getPatient() != null ? ddVo.getPatient().getDod() : null);//	WDEV-14931
		form.cmbPlaceofDeath().setValue(ddVo.getDeathPlaceofDeath());
		form.cmbHowCauseEstablished().setValue(ddVo.getDeathCauseEstablished());
		form.cmbCancerRelated().setValue(ddVo.getCancerRelatedDeath());
		form.cmbCodeDiscrepency().setValue(ddVo.getDeathCodeDiscrepency());
		form.Coroner().setValue(ddVo.getReferredToCorronerIsNotNull() ? (ddVo.getReferredToCorroner().booleanValue() ? CoronerEnumeration.rdoYes : CoronerEnumeration.rdoNo) : CoronerEnumeration.None);
		form.cmbPostMortem().setValue(ddVo.getPostMortem());

		if (ddVo.getDeathConditionsIsNotNull())
		{
			for (int j = 0 ; j < ddVo.getDeathConditions().size() ; j++)
			{
				for (int i = 0 ; i < form.grdCauseofDeath().getRows().size() ; i++)
				{
					if (form.grdCauseofDeath().getRows().get(i).getColCause().equals(ddVo.getDeathConditions().get(j).getCauseofDeath()))
					{
						if (ddVo.getDeathConditions().get(j).getPatientDiagnosisIsNotNull())
							form.grdCauseofDeath().getRows().get(i).setColCondition(ddVo.getDeathConditions().get(j).getPatientDiagnosis().getDiagnosisDescription());
						else
							form.grdCauseofDeath().getRows().get(i).setColCondition(ddVo.getDeathConditions().get(j).getDiagnosis().getDiagnosisName());
						form.grdCauseofDeath().getRows().get(i).setValue(ddVo.getDeathConditions().get(j));
					}
				}
			}
		}
	}

	private DeathDetailsVo populateDataFromScreen(DeathDetailsVo ddVo) 
	{
		if (ddVo == null)
			return null;

		ddVo.setDeathPlaceofDeath(form.cmbPlaceofDeath().getValue());
		ddVo.setDeathCauseEstablished(form.cmbHowCauseEstablished().getValue());
		ddVo.setCancerRelatedDeath(form.cmbCancerRelated().getValue());
		ddVo.setDeathCodeDiscrepency(form.cmbCodeDiscrepency().getValue());

		ddVo.setReferredToCorroner(form.Coroner().getValue() != CoronerEnumeration.None ? (form.Coroner().getValue().equals(CoronerEnumeration.rdoYes) ? Boolean.TRUE : Boolean.FALSE) : null);
		ddVo.setPostMortem(form.cmbPostMortem().getValue());
		
		DeathConditionsVoCollection collVo = new DeathConditionsVoCollection();
		for (int i = 0 ; i < form.grdCauseofDeath().getRows().size() ; i++)
		{
			if (form.grdCauseofDeath().getRows().get(i).getColCondition() != null
				&& form.grdCauseofDeath().getRows().get(i).getColCondition() != "")
			{
				collVo.add(form.grdCauseofDeath().getRows().get(i).getValue());
			}
		}
		ddVo.setDeathConditions(collVo);
		
		return ddVo;
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onGrdCauseofDeathSelectionChanged() throws PresentationLogicException 
	{
		
		if ((!ims.configuration.gen.ConfigFlag.DOM.LOCAL_PATIENT_REGISTRATION.getValue())
			|| form.getGlobalContext().Core.getParentFormMode().equals(FormMode.VIEW))
		{
			form.setMode(FormMode.VIEW);
			form.getContextMenus().Clinical.hideAllDeathDetailsMenuItems();
		}
		else
		{
			form.getContextMenus().Clinical.getDeathDetailsPatientDiagnosisItem().setVisible(true);
			form.getContextMenus().Clinical.getDeathDetailsSearchLocallyconfiguredDiagnosesItem().setVisible(true);
			form.getContextMenus().Clinical.getDeathDetailsSearchTaxonomyItem().setVisible(true);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID) 
		{
			case GenForm.ContextMenus.ClinicalNamespace.DeathDetails.PatientDiagnosis:
				selectPatientDiagnosis();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.DeathDetails.SearchTaxonomy:
				searchTaxonomy();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.DeathDetails.SearchLocallyconfiguredDiagnoses:
				searchLocallyConfiguredDiagnoses();
				break;
		}			
	}

	private void searchLocallyConfiguredDiagnoses() 
	{
		form.getGlobalContext().Clinical.setLocallyConfiguredDiagnosis(true);
		engine.open(form.getForms().Clinical.SelectPatientOrLocallyConfiguredDiagnosis);	
	}

	private void searchTaxonomy() 
	{
		engine.open(form.getForms().Core.TaxonomySearch);		
	}

	private void selectPatientDiagnosis() 
	{
		form.getGlobalContext().Clinical.setLocallyConfiguredDiagnosis(false);
		engine.open(form.getForms().Clinical.SelectPatientOrLocallyConfiguredDiagnosis);	
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Core.TaxonomySearch) && result.equals(DialogResult.OK))
		{
			TaxonomyMap taxonomyMap = form.getGlobalContext().Core.getTaxonomyMap();
			if (taxonomyMap != null)
			{
				newDiagnosis(taxonomyMap);
			}
			
		}
		else if ( (formName.equals(form.getForms().Clinical.SelectPatientOrLocallyConfiguredDiagnosis)) && (result.equals(DialogResult.OK)) )
		{
			doAddFromLocalSearch();
		}

	}

	private void doAddFromLocalSearch()
	{
		PatientDiagnosisListVo diag = form.getGlobalContext().Clinical.getSelectedPatientDiagnosisListVo();

		if (diag != null)
			fillConditionRowValue(diag);
	}

	private void newDiagnosis(TaxonomyMap taxonomyMap) 
	{
		DiagnosisVo voDiagnosis = new DiagnosisVo();
		voDiagnosis.setDiagnosisName(taxonomyMap.getDescription());
		voDiagnosis.setTaxonomyMap(new TaxonomyMapCollection());
		voDiagnosis.setIsActive(Boolean.TRUE);

		String[] errors = voDiagnosis.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}

		try
		{
			voDiagnosis = domain.saveDiagnosisVo(voDiagnosis);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		catch (UniqueKeyViolationException e)
		{
			voDiagnosis = domain.getDiagnosisByName(voDiagnosis.getDiagnosisName());
		}
	
		if (voDiagnosis != null && voDiagnosis.getID_Diagnosis() != null)
		{
			PatientDiagnosisListVo newPDVo = new PatientDiagnosisListVo();
			newPDVo.setDiagnosis(voDiagnosis);
			newPDVo.setDiagnosisDescription(voDiagnosis.getDiagnosisName());
			fillConditionRowValue(newPDVo);
		}
	}

	private void fillConditionRowValue(PatientDiagnosisListVo voPatDiagnosis) 
	{
		grdCauseofDeathRow row = form.grdCauseofDeath().getSelectedRow();
		row.setColCondition(voPatDiagnosis.getDiagnosisDescriptionIsNotNull() ? voPatDiagnosis.getDiagnosisDescription() : "");

		DeathConditionsVo voDC = new DeathConditionsVo();
		voDC.setPatientDiagnosis(voPatDiagnosis.getID_PatientDiagnosisIsNotNull() ? voPatDiagnosis : null);
		
		if (voPatDiagnosis.getDiagnosisIsNotNull())
			voDC.setDiagnosis(voPatDiagnosis.getDiagnosis());
		voDC.setCauseofDeath(row.getColCause());
		
		row.setValue(voDC);		
	}
	
}
