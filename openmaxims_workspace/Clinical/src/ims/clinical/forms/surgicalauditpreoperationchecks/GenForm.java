//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.surgicalauditpreoperationchecks;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbActionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.SiteMarkedActionTaken value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.SiteMarkedActionTaken value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.SiteMarkedActionTaken value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.SiteMarkedActionTaken value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.SiteMarkedActionTaken value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.SiteMarkedActionTaken getValue()
		{
			return (ims.clinical.vo.lookups.SiteMarkedActionTaken)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.SiteMarkedActionTaken value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbAsaGradeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.SurgeryASAGrade value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.SurgeryASAGrade value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.SurgeryASAGrade value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.SurgeryASAGrade value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.SurgeryASAGrade value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.SurgeryASAGrade getValue()
		{
			return (ims.core.vo.lookups.SurgeryASAGrade)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.SurgeryASAGrade value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTransferredFromComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdPlannedProceduresRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPlannedProceduresRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolListOfProcReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolListOfProcReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolListOfProcOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolListOfProc(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolListOfProc()
		{
			return (String)super.row.get(0);
		}
		public void setcolListOfProc(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolListOfProcTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolPrimaryReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolPrimaryReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolPrimaryOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolPrimary(String value)
		{
			super.row.setTooltip(1, value);
		}
		public boolean getcolPrimary()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setcolPrimary(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellcolPrimaryTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo getValue()
		{
			return (ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPlannedProceduresRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPlannedProceduresRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPlannedProceduresRow get(int index)
		{
			return new grdPlannedProceduresRow(super.collection.get(index));
		}
		public grdPlannedProceduresRow newRow()
		{
			return new grdPlannedProceduresRow(super.collection.newRow());
		}
		public grdPlannedProceduresRow newRow(boolean autoSelect)
		{
			return new grdPlannedProceduresRow(super.collection.newRow(autoSelect));
		}
		public grdPlannedProceduresRow newRowAt(int index)
		{
			return new grdPlannedProceduresRow(super.collection.newRowAt(index));
		}
		public grdPlannedProceduresRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPlannedProceduresRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPlannedProceduresGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection getValues()
		{
			ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection listOfValues = new ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo getValue()
		{
			return (ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo value)
		{
			super.grid.setValue(value);
		}
		public grdPlannedProceduresRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPlannedProceduresRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPlannedProceduresRowCollection getRows()
		{
			return new grdPlannedProceduresRowCollection(super.grid.getRows());
		}
		public grdPlannedProceduresRow getRowByValue(ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPlannedProceduresRow(row);
		}
		public void setcolListOfProcHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolListOfProcHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolPrimaryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolPrimaryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}

	public static class groupConfirmPatDetRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 208, 480, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "No", startTabIndex.intValue() + 4024);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 152, 480, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Yes", startTabIndex.intValue() + 4023);
		}
		public void setText(groupConfirmPatDetEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public groupConfirmPatDetEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return groupConfirmPatDetEnumeration.None;
				case 0: return groupConfirmPatDetEnumeration.rdoConfirmPatDetNo;
				case 1: return groupConfirmPatDetEnumeration.rdoConfirmPatDetYes;
			}
			return null;
		}
		public void setValue(groupConfirmPatDetEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(groupConfirmPatDetEnumeration.None.id);
		}
		public boolean isEnabled(groupConfirmPatDetEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(groupConfirmPatDetEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(groupConfirmPatDetEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(groupConfirmPatDetEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class groupConfirmPatDetEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static groupConfirmPatDetEnumeration None = new groupConfirmPatDetEnumeration(-1);
		public static groupConfirmPatDetEnumeration rdoConfirmPatDetNo = new groupConfirmPatDetEnumeration(0);
		public static groupConfirmPatDetEnumeration rdoConfirmPatDetYes = new groupConfirmPatDetEnumeration(1);
		private groupConfirmPatDetEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((groupConfirmPatDetEnumeration)o).id;
		}
		private int id;
	}

	public static class groupPreOpChecksDoneRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 208, 456, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "No", startTabIndex.intValue() + 4022);
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 152, 456, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Yes", startTabIndex.intValue() + 4021);
		}
		public void setText(groupPreOpChecksDoneEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public groupPreOpChecksDoneEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return groupPreOpChecksDoneEnumeration.None;
				case 0: return groupPreOpChecksDoneEnumeration.rdoPreOpChecksNo;
				case 1: return groupPreOpChecksDoneEnumeration.rdoPreOpChecksYes;
			}
			return null;
		}
		public void setValue(groupPreOpChecksDoneEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(groupPreOpChecksDoneEnumeration.None.id);
		}
		public boolean isEnabled(groupPreOpChecksDoneEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(groupPreOpChecksDoneEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(groupPreOpChecksDoneEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(groupPreOpChecksDoneEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class groupPreOpChecksDoneEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static groupPreOpChecksDoneEnumeration None = new groupPreOpChecksDoneEnumeration(-1);
		public static groupPreOpChecksDoneEnumeration rdoPreOpChecksNo = new groupPreOpChecksDoneEnumeration(0);
		public static groupPreOpChecksDoneEnumeration rdoPreOpChecksYes = new groupPreOpChecksDoneEnumeration(1);
		private groupPreOpChecksDoneEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((groupPreOpChecksDoneEnumeration)o).id;
		}
		private int id;
	}

	public static class groupSiteMarkedRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 208, 432, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(0, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "No", startTabIndex.intValue() + 4020);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 152, 432, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(1, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Yes", startTabIndex.intValue() + 4019);
		}
		public void setText(groupSiteMarkedEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public groupSiteMarkedEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return groupSiteMarkedEnumeration.None;
				case 0: return groupSiteMarkedEnumeration.rdoNoSiteMarked;
				case 1: return groupSiteMarkedEnumeration.rdoYesSiteMarked;
			}
			return null;
		}
		public void setValue(groupSiteMarkedEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(groupSiteMarkedEnumeration.None.id);
		}
		public boolean isEnabled(groupSiteMarkedEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(groupSiteMarkedEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(groupSiteMarkedEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(groupSiteMarkedEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class groupSiteMarkedEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static groupSiteMarkedEnumeration None = new groupSiteMarkedEnumeration(-1);
		public static groupSiteMarkedEnumeration rdoNoSiteMarked = new groupSiteMarkedEnumeration(0);
		public static groupSiteMarkedEnumeration rdoYesSiteMarked = new groupSiteMarkedEnumeration(1);
		private groupSiteMarkedEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((groupSiteMarkedEnumeration)o).id;
		}
		private int id;
	}

	public static class groupConsentReceivedRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 184, 227, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "No", startTabIndex.intValue() + 2012);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 120, 227, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "Yes", startTabIndex.intValue() + 2011);
		}
		public void setText(groupConsentReceivedEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public groupConsentReceivedEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return groupConsentReceivedEnumeration.None;
				case 0: return groupConsentReceivedEnumeration.rdoNoConsentReceived;
				case 1: return groupConsentReceivedEnumeration.rdoYesConsentReceived;
			}
			return null;
		}
		public void setValue(groupConsentReceivedEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(groupConsentReceivedEnumeration.None.id);
		}
		public boolean isEnabled(groupConsentReceivedEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(groupConsentReceivedEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(groupConsentReceivedEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(groupConsentReceivedEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class groupConsentReceivedEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static groupConsentReceivedEnumeration None = new groupConsentReceivedEnumeration(-1);
		public static groupConsentReceivedEnumeration rdoNoConsentReceived = new groupConsentReceivedEnumeration(0);
		public static groupConsentReceivedEnumeration rdoYesConsentReceived = new groupConsentReceivedEnumeration(1);
		private groupConsentReceivedEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((groupConsentReceivedEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(824, 545);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4720001)))
			contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenu.add(contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuAddItem);
		contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4720002)))
			contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenu.add(contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuEditItem);
		contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4720003)))
			contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenu.add(contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenu);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 368, 489, 456, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ims.framework.FormUiLogic m_ccTheatreNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper9.getSize(), instance1, startTabIndex.intValue() + 4028, skipContextValidation);
		//ims.framework.Control m_ccTheatreNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(368), new Integer(489), new Integer(456), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 4028), m_ccTheatreNurseForm, instance1 } );
		ims.framework.Control m_ccTheatreNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 4028), m_ccTheatreNurseForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccTheatreNurseControl);
		Menu[] menus1 = m_ccTheatreNurseForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 573, 164, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ims.framework.FormUiLogic m_ccNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper10.getSize(), instance2, startTabIndex.intValue() + 1009, skipContextValidation);
		//ims.framework.Control m_ccNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(573), new Integer(164), new Integer(256), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 1009), m_ccNurseForm, instance2 } );
		ims.framework.Control m_ccNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 1009), m_ccNurseForm, instance2, Boolean.FALSE } );
		super.addControl(m_ccNurseControl);
		Menu[] menus2 = m_ccNurseForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}
		ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 573, 8, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ims.framework.FormUiLogic m_ccConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper11.getSize(), instance3, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(573), new Integer(8), new Integer(256), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccConsultantForm, instance3 } );
		ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccConsultantForm, instance3, Boolean.FALSE } );
		super.addControl(m_ccConsultantControl);
		Menu[] menus3 = m_ccConsultantForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus3.length; x++)
		{
			form.registerMenu(menus3[x]);
		}
		ims.framework.CustomComponent instance4 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 44, 251, 348, 145, ims.framework.enumerations.ControlAnchoring.ALL);
		ims.framework.FormUiLogic m_ccAlertsForm = loader.loadComponent(102401, appForm, startControlID * 10 + 4000, anchoringHelper12.getSize(), instance4, startTabIndex.intValue() + 2014, skipContextValidation);
		//ims.framework.Control m_ccAlertsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(44), new Integer(251), new Integer(348), new Integer(145), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2014), m_ccAlertsForm, instance4 } );
		ims.framework.Control m_ccAlertsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2014), m_ccAlertsForm, instance4, Boolean.FALSE } );
		super.addControl(m_ccAlertsControl);
		Menu[] menus4 = m_ccAlertsForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus4.length; x++)
		{
			form.registerMenu(menus4[x]);
		}
		ims.framework.CustomComponent instance5 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 464, 251, 344, 145, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		ims.framework.FormUiLogic m_ccAllergiesForm = loader.loadComponent(123239, appForm, startControlID * 10 + 5000, anchoringHelper13.getSize(), instance5, startTabIndex.intValue() + 3015, skipContextValidation);
		//ims.framework.Control m_ccAllergiesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(464), new Integer(251), new Integer(344), new Integer(145), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, new Integer(startTabIndex.intValue() + 3015), m_ccAllergiesForm, instance5 } );
		ims.framework.Control m_ccAllergiesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, new Integer(startTabIndex.intValue() + 3015), m_ccAllergiesForm, instance5, Boolean.FALSE } );
		super.addControl(m_ccAllergiesControl);
		Menu[] menus5 = m_ccAllergiesForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus5.length; x++)
		{
			form.registerMenu(menus5[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 368, 449, 75, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Locum Nurse?", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 272, 449, 89, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Theatre Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 573, 117, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Locum Nurse ?", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 480, 141, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Confirm Patient Details:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 456, 124, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Pre-Op Checks Done:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 272, 426, 44, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Action:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 432, 76, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Site Marked:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 313, 399, 32, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "BMI:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 122, 397, 17, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Kg", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 260, 397, 24, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "cms", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 152, 399, 46, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Height:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 399, 49, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Weight:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 414, 266, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, "Allergies:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 266, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Alerts:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 272, 227, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consent Auth by:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 227, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consent Received:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 194, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ASA Grade:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 414, 194, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Transferred From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 414, 117, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Accompanying Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 414, 91, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Leave Holding Bay:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 414, 64, 163, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Arrival Time in Holding Bay:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 414, 37, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Time Patient Sent For:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 414, 10, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Consultant Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planned Procedures:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 5032), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 515, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 5030), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 86, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 5034), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 738, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 5038), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 660, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 5036), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 368, 465, 440, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 4027), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 573, 137, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 392, 32, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 242, 480, 0, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 242, 456, 0, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 242, 432, 0, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 219, 227, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 373, 225, 440, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 2013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 573, 89, 240, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 573, 62, 240, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 573, 35, 240, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 368, 424, 440, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbActionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 4025), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbActionTemp);
		cmbActionComboBox cmbAction = (cmbActionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActionComboBox.class, m_cmbActionTemp);
		super.addComboBox(cmbAction);
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 80, 192, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAsaGradeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAsaGradeTemp);
		cmbAsaGradeComboBox cmbAsaGrade = (cmbAsaGradeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAsaGradeComboBox.class, m_cmbAsaGradeTemp);
		super.addComboBox(cmbAsaGrade);
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 573, 192, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbTransferredFromTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 2010), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTransferredFromTemp);
		cmbTransferredFromComboBox cmbTransferredFrom = (cmbTransferredFromComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransferredFromComboBox.class, m_cmbTransferredFromTemp);
		super.addComboBox(cmbTransferredFrom);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 448, 449, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 4026), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 664, 117, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 384, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdPlannedProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuSurgicalAuditPreOpChecksProceduresGridMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPlannedProceduresTemp);
		grdPlannedProceduresGrid grdPlannedProcedures = (grdPlannedProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPlannedProceduresGrid.class, m_grdPlannedProceduresTemp);
		grdPlannedProcedures.addStringColumn("Procedure Description", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPlannedProcedures.addBoolColumn("Primary", 0, 0, -1, false, true, 0, true);
		super.addGrid(grdPlannedProcedures);

		// DecimalBox Controls
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 345, 397, 56, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 4018), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, new Integer(5), new Integer(2), "The Metrics Height decimal value is invalid.\r\nA valid value can have up to 3 digits and up to 2 decimal places.", null, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 54, 397, 56, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 4016), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, new Integer(5), new Integer(2), "The Metrics Weight decimal value is invalid.\r\nA valid value can have up to 3 digits and up to 2 decimal places.", null, Boolean.TRUE}));
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 200, 397, 56, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 4017), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, new Integer(5), new Integer(2), "The Metrics Height decimal value is invalid.\r\nA valid value can have up to 3 digits and up to 2 decimal places.", null, Boolean.FALSE}));

		// RadioButton Controls
		RadioButton tmpgroupConfirmPatDet = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE});
		super.addControl(tmpgroupConfirmPatDet);
		groupConfirmPatDetRadioButton groupConfirmPatDet = (groupConfirmPatDetRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(groupConfirmPatDetRadioButton.class, tmpgroupConfirmPatDet);
		groupConfirmPatDet.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(groupConfirmPatDet);
		RadioButton tmpgroupPreOpChecksDone = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE});
		super.addControl(tmpgroupPreOpChecksDone);
		groupPreOpChecksDoneRadioButton groupPreOpChecksDone = (groupPreOpChecksDoneRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(groupPreOpChecksDoneRadioButton.class, tmpgroupPreOpChecksDone);
		groupPreOpChecksDone.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(groupPreOpChecksDone);
		RadioButton tmpgroupSiteMarked = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE});
		super.addControl(tmpgroupSiteMarked);
		groupSiteMarkedRadioButton groupSiteMarked = (groupSiteMarkedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(groupSiteMarkedRadioButton.class, tmpgroupSiteMarked);
		groupSiteMarked.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(groupSiteMarked);
		RadioButton tmpgroupConsentReceived = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpgroupConsentReceived);
		groupConsentReceivedRadioButton groupConsentReceived = (groupConsentReceivedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(groupConsentReceivedRadioButton.class, tmpgroupConsentReceived);
		groupConsentReceived.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(groupConsentReceived);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.mosquery.IComponent ccTheatreNurse()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccTheatreNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccTheatreNurseVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccTheatreNurseVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccTheatreNurseEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccTheatreNurseEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccNurse()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccNurseVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccNurseVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccNurseEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccNurseEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccConsultant()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
	}
	public void setccConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
	}
	public void setccConsultantVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setVisible(value);
	}
	public boolean isccConsultantVisible()
	{
		return ((ims.framework.Control)super.getControl(2)).isVisible();
	}
	public void setccConsultantEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setEnabled(value);
	}
	public boolean isccConsultantEnabled()
	{
		return ((ims.framework.Control)super.getControl(2)).isEnabled();
	}
	public ims.core.forms.alertscc.IComponent ccAlerts()
	{
		return (ims.core.forms.alertscc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(3)).getLogic();
	}
	public void setccAlertsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(3)).setValueChangedEvent(delegate);
	}
	public void setccAlertsVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(3)).setVisible(value);
	}
	public boolean isccAlertsVisible()
	{
		return ((ims.framework.Control)super.getControl(3)).isVisible();
	}
	public void setccAlertsEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(3)).setEnabled(value);
	}
	public boolean isccAlertsEnabled()
	{
		return ((ims.framework.Control)super.getControl(3)).isEnabled();
	}
	public ims.clinical.forms.allergiescc.IComponent ccAllergies()
	{
		return (ims.clinical.forms.allergiescc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(4)).getLogic();
	}
	public void setccAllergiesValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(4)).setValueChangedEvent(delegate);
	}
	public void setccAllergiesVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(4)).setVisible(value);
	}
	public boolean isccAllergiesVisible()
	{
		return ((ims.framework.Control)super.getControl(4)).isVisible();
	}
	public void setccAllergiesEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(4)).setEnabled(value);
	}
	public boolean isccAllergiesEnabled()
	{
		return ((ims.framework.Control)super.getControl(4)).isEnabled();
	}
	public Label lblBMI()
	{
		return (Label)super.getControl(12);
	}
	public Label lbl2()
	{
		return (Label)super.getControl(13);
	}
	public Label lbl3()
	{
		return (Label)super.getControl(14);
	}
	public Label lbl5()
	{
		return (Label)super.getControl(15);
	}
	public Button btnEdit1()
	{
		return (Button)super.getControl(29);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(30);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(31);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(32);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(33);
	}
	public TextBox txtTheatreNurse()
	{
		return (TextBox)super.getControl(34);
	}
	public TextBox txtAccompanyingLocumNurse()
	{
		return (TextBox)super.getControl(35);
	}
	public TextBox txtProcMandatory()
	{
		return (TextBox)super.getControl(36);
	}
	public TextBox txtConfirmPatDetMandatory()
	{
		return (TextBox)super.getControl(37);
	}
	public TextBox txtPreOpChecksMandatory()
	{
		return (TextBox)super.getControl(38);
	}
	public TextBox txtSiteMandatory()
	{
		return (TextBox)super.getControl(39);
	}
	public TextBox txtConsentMandatory()
	{
		return (TextBox)super.getControl(40);
	}
	public TextBox txtConsentAuthBy()
	{
		return (TextBox)super.getControl(41);
	}
	public DateTimeControl dtimLeave()
	{
		return (DateTimeControl)super.getControl(42);
	}
	public DateTimeControl dtimArrival()
	{
		return (DateTimeControl)super.getControl(43);
	}
	public DateTimeControl dtimPatientSentFor()
	{
		return (DateTimeControl)super.getControl(44);
	}
	public cmbActionComboBox cmbAction()
	{
		return (cmbActionComboBox)super.getComboBox(0);
	}
	public cmbAsaGradeComboBox cmbAsaGrade()
	{
		return (cmbAsaGradeComboBox)super.getComboBox(1);
	}
	public cmbTransferredFromComboBox cmbTransferredFrom()
	{
		return (cmbTransferredFromComboBox)super.getComboBox(2);
	}
	public CheckBox chkTheatreNurse()
	{
		return (CheckBox)super.getControl(48);
	}
	public CheckBox chkAccompanyingLocum()
	{
		return (CheckBox)super.getControl(49);
	}
	public grdPlannedProceduresGrid grdPlannedProcedures()
	{
		return (grdPlannedProceduresGrid)super.getGrid(0);
	}
	public DecimalBox decBMI()
	{
		return (DecimalBox)super.getControl(51);
	}
	public DecimalBox decWeight()
	{
		return (DecimalBox)super.getControl(52);
	}
	public DecimalBox decHeight()
	{
		return (DecimalBox)super.getControl(53);
	}
	public groupConfirmPatDetRadioButton groupConfirmPatDet()
	{
		return (groupConfirmPatDetRadioButton)super.getRadioButton(0);
	}
	public groupPreOpChecksDoneRadioButton groupPreOpChecksDone()
	{
		return (groupPreOpChecksDoneRadioButton)super.getRadioButton(1);
	}
	public groupSiteMarkedRadioButton groupSiteMarked()
	{
		return (groupSiteMarkedRadioButton)super.getRadioButton(2);
	}
	public groupConsentReceivedRadioButton groupConsentReceived()
	{
		return (groupConsentReceivedRadioButton)super.getRadioButton(3);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				PatientProceduresDialog = new LocalFormName(123250);
			}
			public final FormName PatientProceduresDialog;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_selectedEvent = new ims.framework.ContextVariable("selectedEvent", prefix + "_lv_Clinical.SurgicalAuditPreOperationChecks.__internal_x_context__selectedEvent_" + componentIdentifier + "");
			cxl_currentSurgicalAuditOpDetail = new ims.framework.ContextVariable("currentSurgicalAuditOpDetail", prefix + "_lv_Clinical.SurgicalAuditPreOperationChecks.__internal_x_context__currentSurgicalAuditOpDetail_" + componentIdentifier + "");
		}
		
		public boolean getselectedEventIsNotNull()
		{
			return !cxl_selectedEvent.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent getselectedEvent()
		{
			return (ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent)cxl_selectedEvent.getValue(context);
		}
		public void setselectedEvent(ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent value)
		{
			cxl_selectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedEvent = null;
		public boolean getcurrentSurgicalAuditOpDetailIsNotNull()
		{
			return !cxl_currentSurgicalAuditOpDetail.getValueIsNull(context);
		}
		public ims.clinical.vo.SurgicalAuditOperationDetailVo getcurrentSurgicalAuditOpDetail()
		{
			return (ims.clinical.vo.SurgicalAuditOperationDetailVo)cxl_currentSurgicalAuditOpDetail.getValue(context);
		}
		public void setcurrentSurgicalAuditOpDetail(ims.clinical.vo.SurgicalAuditOperationDetailVo value)
		{
			cxl_currentSurgicalAuditOpDetail.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_currentSurgicalAuditOpDetail = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class SurgicalAuditPreOpChecksProceduresGridMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 1;
				public static final int Edit = 2;
				public static final int REMOVE = 3;
			}
			public void disableAllSurgicalAuditPreOpChecksProceduresGridMenuMenuItems()
			{
				this.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuAddItem.setEnabled(false);
				this.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuEditItem.setEnabled(false);
				this.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllSurgicalAuditPreOpChecksProceduresGridMenuMenuItems()
			{
				this.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuAddItem.setVisible(false);
				this.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuEditItem.setVisible(false);
				this.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuSurgicalAuditPreOpChecksProceduresGridMenu;
			public ReadOnlyMenuItem getSurgicalAuditPreOpChecksProceduresGridMenuAddItem()
			{
				return this.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuAddItem;
			}
			private MenuItem contextMenuSurgicalAuditPreOpChecksProceduresGridMenuAddItem;
			public ReadOnlyMenuItem getSurgicalAuditPreOpChecksProceduresGridMenuEditItem()
			{
				return this.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuEditItem;
			}
			private MenuItem contextMenuSurgicalAuditPreOpChecksProceduresGridMenuEditItem;
			public ReadOnlyMenuItem getSurgicalAuditPreOpChecksProceduresGridMenuREMOVEItem()
			{
				return this.contextMenuSurgicalAuditPreOpChecksProceduresGridMenuREMOVEItem;
			}
			private MenuItem contextMenuSurgicalAuditPreOpChecksProceduresGridMenuREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[95];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-CARECONTEXT", "CareContext");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecks.__internal_x_context__currentSurgicalAuditOpDetail_" + componentIdentifier, "BO-1072100108-ID", "ID_SurgicalAuditOperationDetail");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecks.__internal_x_context__currentSurgicalAuditOpDetail_" + componentIdentifier, "BO-1072100108-PATIENT", "Patient");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecks.__internal_x_context__currentSurgicalAuditOpDetail_" + componentIdentifier, "BO-1072100108-CARECONTEXT", "CareContext");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecks.__internal_x_context__currentSurgicalAuditOpDetail_" + componentIdentifier, "BO-1072100108-OPERATIONCANCELLED", "OperationCancelled");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecks.__internal_x_context__currentSurgicalAuditOpDetail_" + componentIdentifier, "BO-1072100108-REASONFORCANCELLATION", "ReasonForCancellation");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecks.__internal_x_context__currentSurgicalAuditOpDetail_" + componentIdentifier, "BO-1072100108-REASONFORCANCELLATIONCOMMENT", "ReasonForCancellationComment");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
