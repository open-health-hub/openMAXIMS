//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.documentworklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmb2ComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(String value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(String value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(String value)
		{
			return super.control.removeRow(value);
		}
		public String getValue()
		{
			return (String)super.control.getValue();
		}
		public void setValue(String value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmb1ComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(String value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(String value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(String value)
		{
			return super.control.removeRow(value);
		}
		public String getValue()
		{
			return (String)super.control.getValue();
		}
		public void setValue(String value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdOutPatientRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdOutPatientRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNHSReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNHSReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNHSOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolNHS(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolNHS()
		{
			return (String)super.row.get(0);
		}
		public void setcolNHS(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNHSTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSurnameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSurnameOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolSurname(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolSurname()
		{
			return (String)super.row.get(1);
		}
		public void setcolSurname(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolSurnameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolForenameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolForenameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolForenameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolForename(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolForename()
		{
			return (String)super.row.get(2);
		}
		public void setcolForename(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolForenameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolAuthoringHCPReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolAuthoringHCPReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolAuthoringHCPOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolAuthoringHCP(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolAuthoringHCP()
		{
			return (String)super.row.get(3);
		}
		public void setcolAuthoringHCP(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolAuthoringHCPTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolDocTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolDocTypeReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolDocTypeOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolDocType(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolDocType()
		{
			return (String)super.row.get(4);
		}
		public void setcolDocType(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolDocTypeTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolDocStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolDocStatusReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolDocStatusOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolDocStatus(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getcolDocStatus()
		{
			return (String)super.row.get(5);
		}
		public void setcolDocStatus(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolDocStatusTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.core.vo.OutPatientAttendanceVo getValue()
		{
			return (ims.core.vo.OutPatientAttendanceVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.OutPatientAttendanceVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdOutPatientRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdOutPatientRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdOutPatientRow get(int index)
		{
			return new grdOutPatientRow(super.collection.get(index));
		}
		public grdOutPatientRow newRow()
		{
			return new grdOutPatientRow(super.collection.newRow());
		}
		public grdOutPatientRow newRow(boolean autoSelect)
		{
			return new grdOutPatientRow(super.collection.newRow(autoSelect));
		}
		public grdOutPatientRow newRowAt(int index)
		{
			return new grdOutPatientRow(super.collection.newRowAt(index));
		}
		public grdOutPatientRow newRowAt(int index, boolean autoSelect)
		{
			return new grdOutPatientRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdOutPatientGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.OutPatientAttendanceVoCollection getValues()
		{
			ims.core.vo.OutPatientAttendanceVoCollection listOfValues = new ims.core.vo.OutPatientAttendanceVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.OutPatientAttendanceVo getValue()
		{
			return (ims.core.vo.OutPatientAttendanceVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.OutPatientAttendanceVo value)
		{
			super.grid.setValue(value);
		}
		public grdOutPatientRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdOutPatientRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdOutPatientRowCollection getRows()
		{
			return new grdOutPatientRowCollection(super.grid.getRows());
		}
		public grdOutPatientRow getRowByValue(ims.core.vo.OutPatientAttendanceVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdOutPatientRow(row);
		}
		public void setcolNHSHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNHSHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolForenameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolForenameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolAuthoringHCPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolAuthoringHCPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolDocTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolDocTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolDocStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolDocStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
		}
	
		super.setContext(form);

		form.setDarkHeight(75);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuADTMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuADTMenuAdmitItem = factory.createMenuItem(startControlID.intValue() + 1, "Admit Patient", true, false, null, true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuAdmitItem);
		contextMenus.contextMenuADTMenuTransferItem = factory.createMenuItem(startControlID.intValue() + 2, "Transfer Patient", true, false, new Integer(102112), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1690002)))
			contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuTransferItem);
		contextMenus.contextMenuADTMenuDischargeItem = factory.createMenuItem(startControlID.intValue() + 3, "Discharge Patient", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuDischargeItem);
		contextMenus.contextMenuADTMenuDemographicsItem = factory.createMenuItem(startControlID.intValue() + 4, "Show Demographics", true, false, new Integer(103133), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuDemographicsItem);
		contextMenus.contextMenuADTMenuAddItem = factory.createMenuItem(startControlID.intValue() + 5, "New Correspondence", true, false, new Integer(111108), true, true);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuAddItem);
		contextMenus.contextMenuADTMenuViewItem = factory.createMenuItem(startControlID.intValue() + 6, "View Correspondence", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuViewItem);
		contextMenus.contextMenuADTMenuSetLetterRequiredItem = factory.createMenuItem(startControlID.intValue() + 7, "Set Letter Required", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuSetLetterRequiredItem);
		contextMenus.contextMenuADTMenuSetNoLetterRequiredItem = factory.createMenuItem(startControlID.intValue() + 8, "Set `No Letter Required", true, false, new Integer(111104), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuSetNoLetterRequiredItem);
		contextMenus.contextMenuADTMenuPreviewDocumentItem = factory.createMenuItem(startControlID.intValue() + 9, "Preview Document", true, false, new Integer(102221), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuPreviewDocumentItem);
		contextMenus.contextMenuADTMenuViewDocumentStatusHistoryItem = factory.createMenuItem(startControlID.intValue() + 10, "View Document Status History", true, false, new Integer(102202), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuViewDocumentStatusHistoryItem);
		contextMenus.contextMenuADTMenuEditDocumentStatusHistoryItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit Document Status History", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuEditDocumentStatusHistoryItem);
		contextMenus.contextMenuADTMenuEditItem = factory.createMenuItem(startControlID.intValue() + 12, "Edit Correspondence", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuEditItem);
		contextMenus.contextMenuADTMenuBatchupdateofstatustoDictatedItem = factory.createMenuItem(startControlID.intValue() + 13, "Batch update of status to (Dictated)", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuBatchupdateofstatustoDictatedItem);
		contextMenus.contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem = factory.createMenuItem(startControlID.intValue() + 14, "Batch update of status to (No Letter Required)", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem);
		contextMenus.contextMenuADTMenuBatchupdateofstatustoSignedItem = factory.createMenuItem(startControlID.intValue() + 15, "Batch update of status to (Signed)", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuBatchupdateofstatustoSignedItem);
		contextMenus.contextMenuADTMenuCancelAdmissionItem = factory.createMenuItem(startControlID.intValue() + 16, "Cancel Admission", true, false, new Integer(102249), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1690001)))
			contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuCancelAdmissionItem);
		form.registerMenu(contextMenus.contextMenuADTMenu);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 120, 40, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_cc2Form = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1004, skipContextValidation);
		//ims.framework.Control m_cc2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(120), new Integer(40), new Integer(208), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1004), m_cc2Form, instance1 } );
		ims.framework.Control m_cc2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1004), m_cc2Form, instance1, Boolean.FALSE } );
		super.addControl(m_cc2Control);
		Menu[] menus1 = m_cc2Form.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 120, 16, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_cc1Form = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance2, startTabIndex.intValue() + 1, skipContextValidation);
		//ims.framework.Control m_cc1Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(120), new Integer(16), new Integer(208), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_cc1Form, instance2 } );
		ims.framework.Control m_cc1Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_cc1Form, instance2, Boolean.FALSE } );
		super.addControl(m_cc1Control);
		Menu[] menus2 = m_cc1Form.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 566, 40, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Appt. Date To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 320, 40, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Document Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 320, 16, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Completing HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 566, 16, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Appt. Date From:", new Integer(1), null, new Integer(0)}));

		// Date Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 664, 40, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 2007), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 664, 16, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 432, 40, 121, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmb2Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 2005), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmb2Temp);
		cmb2ComboBox cmb2 = (cmb2ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb2ComboBox.class, m_cmb2Temp);
		super.addComboBox(cmb2);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 432, 16, 121, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmb1Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1002), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmb1Temp);
		cmb1ComboBox cmb1 = (cmb1ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb1ComboBox.class, m_cmb1Temp);
		super.addComboBox(cmb1);

		// Grid Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 832, 528, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdOutPatientTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuADTMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdOutPatientTemp);
		grdOutPatientGrid grdOutPatient = (grdOutPatientGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOutPatientGrid.class, m_grdOutPatientTemp);
		grdOutPatient.addStringColumn("NHS Number", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdOutPatient.addStringColumn("Surname", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdOutPatient.addStringColumn("Forename", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdOutPatient.addStringColumn("Authoring HCP", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdOutPatient.addStringColumn("Document type", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdOutPatient.addStringColumn("Document Status", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdOutPatient);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 810, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2011), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear search criteria and ward list", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 776, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 2010), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "List Outpatients matching search criteria", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent cc2()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcc2ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcc2Visible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscc2Visible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcc2Enabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscc2Enabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent cc1()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setcc1ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setcc1Visible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean iscc1Visible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setcc1Enabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean iscc1Enabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Label lbl3()
	{
		return (Label)super.getControl(6);
	}
	public DateControl dteApptDateTo()
	{
		return (DateControl)super.getControl(8);
	}
	public DateControl dteApptDateFrom()
	{
		return (DateControl)super.getControl(9);
	}
	public cmb2ComboBox cmb2()
	{
		return (cmb2ComboBox)super.getComboBox(0);
	}
	public cmb1ComboBox cmb1()
	{
		return (cmb1ComboBox)super.getComboBox(1);
	}
	public grdOutPatientGrid grdOutPatient()
	{
		return (grdOutPatientGrid)super.getGrid(0);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(13);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(14);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final CoreImages Core;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class ADTMenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Admit = 1;
			public static final int Transfer = 2;
			public static final int Discharge = 3;
			public static final int Demographics = 4;
			public static final int Add = 5;
			public static final int View = 6;
			public static final int SetLetterRequired = 7;
			public static final int SetNoLetterRequired = 8;
			public static final int PreviewDocument = 9;
			public static final int ViewDocumentStatusHistory = 10;
			public static final int EditDocumentStatusHistory = 11;
			public static final int Edit = 12;
			public static final int BatchupdateofstatustoDictated = 13;
			public static final int BatchupdateofstatustoNoLetterRequired = 14;
			public static final int BatchupdateofstatustoSigned = 15;
			public static final int CancelAdmission = 16;
		}
		public void disableAllADTMenuMenuItems()
		{
			this.contextMenuADTMenuAdmitItem.setEnabled(false);
			this.contextMenuADTMenuTransferItem.setEnabled(false);
			this.contextMenuADTMenuDischargeItem.setEnabled(false);
			this.contextMenuADTMenuDemographicsItem.setEnabled(false);
			this.contextMenuADTMenuAddItem.setEnabled(false);
			this.contextMenuADTMenuViewItem.setEnabled(false);
			this.contextMenuADTMenuSetLetterRequiredItem.setEnabled(false);
			this.contextMenuADTMenuSetNoLetterRequiredItem.setEnabled(false);
			this.contextMenuADTMenuPreviewDocumentItem.setEnabled(false);
			this.contextMenuADTMenuViewDocumentStatusHistoryItem.setEnabled(false);
			this.contextMenuADTMenuEditDocumentStatusHistoryItem.setEnabled(false);
			this.contextMenuADTMenuEditItem.setEnabled(false);
			this.contextMenuADTMenuBatchupdateofstatustoDictatedItem.setEnabled(false);
			this.contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem.setEnabled(false);
			this.contextMenuADTMenuBatchupdateofstatustoSignedItem.setEnabled(false);
			this.contextMenuADTMenuCancelAdmissionItem.setEnabled(false);
		}
		public void hideAllADTMenuMenuItems()
		{
			this.contextMenuADTMenuAdmitItem.setVisible(false);
			this.contextMenuADTMenuTransferItem.setVisible(false);
			this.contextMenuADTMenuDischargeItem.setVisible(false);
			this.contextMenuADTMenuDemographicsItem.setVisible(false);
			this.contextMenuADTMenuAddItem.setVisible(false);
			this.contextMenuADTMenuViewItem.setVisible(false);
			this.contextMenuADTMenuSetLetterRequiredItem.setVisible(false);
			this.contextMenuADTMenuSetNoLetterRequiredItem.setVisible(false);
			this.contextMenuADTMenuPreviewDocumentItem.setVisible(false);
			this.contextMenuADTMenuViewDocumentStatusHistoryItem.setVisible(false);
			this.contextMenuADTMenuEditDocumentStatusHistoryItem.setVisible(false);
			this.contextMenuADTMenuEditItem.setVisible(false);
			this.contextMenuADTMenuBatchupdateofstatustoDictatedItem.setVisible(false);
			this.contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem.setVisible(false);
			this.contextMenuADTMenuBatchupdateofstatustoSignedItem.setVisible(false);
			this.contextMenuADTMenuCancelAdmissionItem.setVisible(false);
		}
		private Menu contextMenuADTMenu;
		public MenuItem getADTMenuAdmitItem()
		{
			return this.contextMenuADTMenuAdmitItem;
		}
		private MenuItem contextMenuADTMenuAdmitItem;
		public MenuItem getADTMenuTransferItem()
		{
			return this.contextMenuADTMenuTransferItem;
		}
		private MenuItem contextMenuADTMenuTransferItem;
		public MenuItem getADTMenuDischargeItem()
		{
			return this.contextMenuADTMenuDischargeItem;
		}
		private MenuItem contextMenuADTMenuDischargeItem;
		public MenuItem getADTMenuDemographicsItem()
		{
			return this.contextMenuADTMenuDemographicsItem;
		}
		private MenuItem contextMenuADTMenuDemographicsItem;
		public MenuItem getADTMenuAddItem()
		{
			return this.contextMenuADTMenuAddItem;
		}
		private MenuItem contextMenuADTMenuAddItem;
		public MenuItem getADTMenuViewItem()
		{
			return this.contextMenuADTMenuViewItem;
		}
		private MenuItem contextMenuADTMenuViewItem;
		public MenuItem getADTMenuSetLetterRequiredItem()
		{
			return this.contextMenuADTMenuSetLetterRequiredItem;
		}
		private MenuItem contextMenuADTMenuSetLetterRequiredItem;
		public MenuItem getADTMenuSetNoLetterRequiredItem()
		{
			return this.contextMenuADTMenuSetNoLetterRequiredItem;
		}
		private MenuItem contextMenuADTMenuSetNoLetterRequiredItem;
		public MenuItem getADTMenuPreviewDocumentItem()
		{
			return this.contextMenuADTMenuPreviewDocumentItem;
		}
		private MenuItem contextMenuADTMenuPreviewDocumentItem;
		public MenuItem getADTMenuViewDocumentStatusHistoryItem()
		{
			return this.contextMenuADTMenuViewDocumentStatusHistoryItem;
		}
		private MenuItem contextMenuADTMenuViewDocumentStatusHistoryItem;
		public MenuItem getADTMenuEditDocumentStatusHistoryItem()
		{
			return this.contextMenuADTMenuEditDocumentStatusHistoryItem;
		}
		private MenuItem contextMenuADTMenuEditDocumentStatusHistoryItem;
		public ReadOnlyMenuItem getADTMenuEditItem()
		{
			return this.contextMenuADTMenuEditItem;
		}
		private MenuItem contextMenuADTMenuEditItem;
		public ReadOnlyMenuItem getADTMenuBatchupdateofstatustoDictatedItem()
		{
			return this.contextMenuADTMenuBatchupdateofstatustoDictatedItem;
		}
		private MenuItem contextMenuADTMenuBatchupdateofstatustoDictatedItem;
		public ReadOnlyMenuItem getADTMenuBatchupdateofstatustoNoLetterRequiredItem()
		{
			return this.contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem;
		}
		private MenuItem contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem;
		public ReadOnlyMenuItem getADTMenuBatchupdateofstatustoSignedItem()
		{
			return this.contextMenuADTMenuBatchupdateofstatustoSignedItem;
		}
		private MenuItem contextMenuADTMenuBatchupdateofstatustoSignedItem;
		public ReadOnlyMenuItem getADTMenuCancelAdmissionItem()
		{
			return this.contextMenuADTMenuCancelAdmissionItem;
		}
		private MenuItem contextMenuADTMenuCancelAdmissionItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
