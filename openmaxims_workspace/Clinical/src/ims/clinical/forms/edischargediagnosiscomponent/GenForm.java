//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.edischargediagnosiscomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbCoMorbComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.YesNo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.YesNo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.YesNo getValue()
			{
				return (ims.core.vo.lookups.YesNo)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNo value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbLateralityComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.LateralityLRB getValue()
			{
				return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.LateralityLRB value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class GroupSelectionRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 128, 8, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 4);
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 264, 8, 127, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "All Diagnoses", startTabIndex.intValue() + 5);
			}
			public void setText(GroupSelectionEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupSelectionEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupSelectionEnumeration.None;
					case 0: return GroupSelectionEnumeration.rdoSpecialty;
					case 1: return GroupSelectionEnumeration.rdoAll;
				}
				return null;
			}
			public void setValue(GroupSelectionEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupSelectionEnumeration.None.id);
			}
			public boolean isEnabled(GroupSelectionEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupSelectionEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupSelectionEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupSelectionEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupSelectionEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupSelectionEnumeration None = new GroupSelectionEnumeration(-1);
			public static GroupSelectionEnumeration rdoSpecialty = new GroupSelectionEnumeration(0);
			public static GroupSelectionEnumeration rdoAll = new GroupSelectionEnumeration(1);
			private GroupSelectionEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupSelectionEnumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 304, 152, 296, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_ccAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 1016, skipContextValidation);
			//ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(304), new Integer(152), new Integer(296), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1016), m_ccAuthoringForm, instance1 } );
			ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1016), m_ccAuthoringForm, instance1, Boolean.FALSE } );
			super.addControl(m_ccAuthoringControl);
			Menu[] menus1 = m_ccAuthoringForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 784, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_ccClinicalTermForm = loader.loadComponent(123133, appForm, startControlID * 10 + 2000, anchoringHelper4.getSize(), instance2, startTabIndex.intValue() + 6, skipContextValidation);
			//ims.framework.Control m_ccClinicalTermControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(8), new Integer(24), new Integer(784), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 6), m_ccClinicalTermForm, instance2 } );
			ims.framework.Control m_ccClinicalTermControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 6), m_ccClinicalTermForm, instance2, Boolean.FALSE } );
			super.addControl(m_ccClinicalTermControl);
			Menu[] menus2 = m_ccClinicalTermForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 480, 96, 170, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Previous Relevant Diagnosis:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 480, 128, 218, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Co-Morbidity for this Episode of Care:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 312, 96, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Complication:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 192, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Onset Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 160, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Diagnosed:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Site:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 96, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 312, 128, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Diagnosis:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 128, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 120, 192, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// PartialDateBox Controls
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 120, 160, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 704, 128, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbCoMorbTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbCoMorbTemp);
			cmbCoMorbComboBox cmbCoMorb = (cmbCoMorbComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCoMorbComboBox.class, m_cmbCoMorbTemp);
			super.addComboBox(cmbCoMorb);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 120, 96, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbLateralityTemp);
			cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
			super.addComboBox(cmbLaterality);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 704, 96, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 448, 128, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 448, 96, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
	
			// RadioButton Controls
			RadioButton tmpGroupSelection = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroupSelection);
			GroupSelectionRadioButton GroupSelection = (GroupSelectionRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupSelectionRadioButton.class, tmpGroupSelection);
			GroupSelection.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupSelection);
		}
		public ims.core.forms.authoringinfo.IComponent ccAuthoring()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setccAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setccAuthoringVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean isccAuthoringVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setccAuthoringEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean isccAuthoringEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
		public ims.clinical.forms.clinicalcoding.IComponent ccClinicalTerm()
		{
			return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
		}
		public void setccClinicalTermValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
		}
		public void setccClinicalTermVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setVisible(value);
		}
		public boolean isccClinicalTermVisible()
		{
			return ((ims.framework.Control)super.getControl(1)).isVisible();
		}
		public void setccClinicalTermEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setEnabled(value);
		}
		public boolean isccClinicalTermEnabled()
		{
			return ((ims.framework.Control)super.getControl(1)).isEnabled();
		}
		public TextBox txtSite()
		{
			return (TextBox)super.getControl(10);
		}
		public DateControl dteOnset()
		{
			return (DateControl)super.getControl(11);
		}
		public PartialDateBox pdtDiagnosed()
		{
			return (PartialDateBox)super.getControl(12);
		}
		public cmbCoMorbComboBox cmbCoMorb()
		{
			return (cmbCoMorbComboBox)super.getComboBox(0);
		}
		public cmbLateralityComboBox cmbLaterality()
		{
			return (cmbLateralityComboBox)super.getComboBox(1);
		}
		public CheckBox chkPRD()
		{
			return (CheckBox)super.getControl(15);
		}
		public CheckBox chkPrimaryDiagnosis()
		{
			return (CheckBox)super.getControl(16);
		}
		public CheckBox chkComplication()
		{
			return (CheckBox)super.getControl(17);
		}
		public GroupSelectionRadioButton GroupSelection()
		{
			return (GroupSelectionRadioButton)super.getRadioButton(0);
		}
	}
	public static class grdPrevoiusDiagnosesCoMorbiditesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPrevoiusDiagnosesCoMorbiditesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDCDescReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDCDescReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDCDescOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColDCDesc(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColDCDesc()
		{
			return (String)super.row.get(0);
		}
		public void setColDCDesc(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDCDescTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDCDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDCDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDCDateOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColDCDate(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.framework.utils.PartialDate getColDCDate()
		{
			return (ims.framework.utils.PartialDate)super.row.get(1);
		}
		public void setColDCDate(ims.framework.utils.PartialDate value)
		{
			super.row.set(1, value);
		}
		public void setCellColDCDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColDCCoMorbidReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColDCCoMorbidReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColDCCoMorbidOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColDCCoMorbid(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.framework.utils.Image getColDCCoMorbid()
		{
			return (ims.framework.utils.Image)super.row.get(2);
		}
		public void setColDCCoMorbid(ims.framework.utils.Image value)
		{
			super.row.set(2, value);
		}
		public void setCellColDCCoMorbidTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColComorbInCurrentReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColComorbInCurrentReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColComorbInCurrentOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColComorbInCurrent(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.framework.utils.Image getColComorbInCurrent()
		{
			return (ims.framework.utils.Image)super.row.get(3);
		}
		public void setColComorbInCurrent(ims.framework.utils.Image value)
		{
			super.row.set(3, value);
		}
		public void setCellColComorbInCurrentTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColIncludeReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColIncludeReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColIncludeOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColInclude(String value)
		{
			super.row.setTooltip(4, value);
		}
		public boolean getColInclude()
		{
			return ((Boolean)super.row.get(4)).booleanValue();
		}
		public void setColInclude(boolean value)
		{
			super.row.set(4, new Boolean(value));
		}
		public void setCellColIncludeTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPrevoiusDiagnosesCoMorbiditesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPrevoiusDiagnosesCoMorbiditesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPrevoiusDiagnosesCoMorbiditesRow get(int index)
		{
			return new grdPrevoiusDiagnosesCoMorbiditesRow(super.collection.get(index));
		}
		public grdPrevoiusDiagnosesCoMorbiditesRow newRow()
		{
			return new grdPrevoiusDiagnosesCoMorbiditesRow(super.collection.newRow());
		}
		public grdPrevoiusDiagnosesCoMorbiditesRow newRow(boolean autoSelect)
		{
			return new grdPrevoiusDiagnosesCoMorbiditesRow(super.collection.newRow(autoSelect));
		}
		public grdPrevoiusDiagnosesCoMorbiditesRow newRowAt(int index)
		{
			return new grdPrevoiusDiagnosesCoMorbiditesRow(super.collection.newRowAt(index));
		}
		public grdPrevoiusDiagnosesCoMorbiditesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPrevoiusDiagnosesCoMorbiditesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPrevoiusDiagnosesCoMorbiditesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.PatientDiagnosisEDischargeListVoCollection getValues()
		{
			ims.core.vo.PatientDiagnosisEDischargeListVoCollection listOfValues = new ims.core.vo.PatientDiagnosisEDischargeListVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
		{
			super.grid.setValue(value);
		}
		public grdPrevoiusDiagnosesCoMorbiditesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPrevoiusDiagnosesCoMorbiditesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPrevoiusDiagnosesCoMorbiditesRowCollection getRows()
		{
			return new grdPrevoiusDiagnosesCoMorbiditesRowCollection(super.grid.getRows());
		}
		public grdPrevoiusDiagnosesCoMorbiditesRow getRowByValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPrevoiusDiagnosesCoMorbiditesRow(row);
		}
		public void setColDCDescHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDCDescHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDCDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDCDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColDCCoMorbidHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColDCCoMorbidHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColComorbInCurrentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColComorbInCurrentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColIncludeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColIncludeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	public static class grdDiagnosisComplicationsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDiagnosisComplicationsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDiagnosisReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDiagnosisReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDiagnosisOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColDiagnosis(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColDiagnosis()
		{
			return (String)super.row.get(0);
		}
		public void setColDiagnosis(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDiagnosisTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDateDiagnosedReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDateDiagnosedReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDateDiagnosedOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColDateDiagnosed(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.framework.utils.PartialDate getColDateDiagnosed()
		{
			return (ims.framework.utils.PartialDate)super.row.get(1);
		}
		public void setColDateDiagnosed(ims.framework.utils.PartialDate value)
		{
			super.row.set(1, value);
		}
		public void setCellColDateDiagnosedTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColAuthoringHCPDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColAuthoringHCPDateTimeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColAuthoringHCPDateTimeOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColAuthoringHCPDateTime(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColAuthoringHCPDateTime()
		{
			return (String)super.row.get(2);
		}
		public void setColAuthoringHCPDateTime(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColAuthoringHCPDateTimeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColAuditReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColAuditReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColAuditOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColAudit(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.framework.utils.Image getColAudit()
		{
			return (ims.framework.utils.Image)super.row.get(3);
		}
		public void setColAudit(ims.framework.utils.Image value)
		{
			super.row.set(3, value);
		}
		public void setCellColAuditTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColIncludeReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColIncludeReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColIncludeOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColInclude(String value)
		{
			super.row.setTooltip(4, value);
		}
		public boolean getColInclude()
		{
			return ((Boolean)super.row.get(4)).booleanValue();
		}
		public void setColInclude(boolean value)
		{
			super.row.set(4, new Boolean(value));
		}
		public void setCellColIncludeTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDiagnosisComplicationsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDiagnosisComplicationsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDiagnosisComplicationsRow get(int index)
		{
			return new grdDiagnosisComplicationsRow(super.collection.get(index));
		}
		public grdDiagnosisComplicationsRow newRow()
		{
			return new grdDiagnosisComplicationsRow(super.collection.newRow());
		}
		public grdDiagnosisComplicationsRow newRow(boolean autoSelect)
		{
			return new grdDiagnosisComplicationsRow(super.collection.newRow(autoSelect));
		}
		public grdDiagnosisComplicationsRow newRowAt(int index)
		{
			return new grdDiagnosisComplicationsRow(super.collection.newRowAt(index));
		}
		public grdDiagnosisComplicationsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDiagnosisComplicationsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDiagnosisComplicationsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.PatientDiagnosisEDischargeListVoCollection getValues()
		{
			ims.core.vo.PatientDiagnosisEDischargeListVoCollection listOfValues = new ims.core.vo.PatientDiagnosisEDischargeListVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
		{
			super.grid.setValue(value);
		}
		public grdDiagnosisComplicationsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDiagnosisComplicationsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDiagnosisComplicationsRowCollection getRows()
		{
			return new grdDiagnosisComplicationsRowCollection(super.grid.getRows());
		}
		public grdDiagnosisComplicationsRow getRowByValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDiagnosisComplicationsRow(row);
		}
		public void setColDiagnosisHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDiagnosisHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDateDiagnosedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDateDiagnosedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColAuthoringHCPDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColAuthoringHCPDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColAuditHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColAuditHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColIncludeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColIncludeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuPastMedicalHistory = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuPastMedicalHistoryNewItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryNewItem);
		contextMenus.contextMenuPastMedicalHistoryEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryEditItem);
		contextMenus.contextMenuPastMedicalHistoryViewItem = factory.createMenuItem(startControlID.intValue() + 3, "View", true, false, new Integer(102223), false, false);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryViewItem);
		contextMenus.contextMenuPastMedicalHistoryLinkingItem = factory.createMenuItem(startControlID.intValue() + 4, "Link Procedure to Diagnosis", true, false, new Integer(102211), true, true);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryLinkingItem);
		contextMenus.contextMenuPastMedicalHistorySupersedeItem = factory.createMenuItem(startControlID.intValue() + 5, "Supersede Diagnosis", true, false, new Integer(103108), true, true);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistorySupersedeItem);
		contextMenus.contextMenuPastMedicalHistoryRIEItem = factory.createMenuItem(startControlID.intValue() + 6, "Recorded in Error", true, false, new Integer(102140), true, true);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryRIEItem);
		contextMenus.contextMenuPastMedicalHistoryViewAllCDIItem = factory.createMenuItem(startControlID.intValue() + 7, "View All Clinical Data Items", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryViewAllCDIItem);
		contextMenus.contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem = factory.createMenuItem(startControlID.intValue() + 8, "View All Unlinked Clinical Data Items", true, false, new Integer(102223), false, false);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem);
		contextMenus.contextMenuPastMedicalHistoryViewAssociationsItem = factory.createMenuItem(startControlID.intValue() + 9, "View Associations", true, false, new Integer(102266), false, false);
		contextMenus.contextMenuPastMedicalHistory.add(contextMenus.contextMenuPastMedicalHistoryViewAssociationsItem);
		form.registerMenu(contextMenus.contextMenuPastMedicalHistory);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuEDischargeDiagnosisMenuCOPYItem = factory.createMenuItem(startControlID.intValue() + 10, "Mark as Co-Morbidity in Current eDischarge", true, false, new Integer(116109), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2790001)))
			contextMenus.Clinical.contextMenuEDischargeDiagnosisMenu.add(contextMenus.Clinical.contextMenuEDischargeDiagnosisMenuCOPYItem);
		form.registerMenu(contextMenus.Clinical.contextMenuEDischargeDiagnosisMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 408, 832, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Co-Morbidities and Previous Diagnoses", new Integer(1), ""}));

		// Container Clasess
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 160, 816, 240, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, new Boolean(false)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 240);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 208, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start eDischarge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 672, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 2019), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 754, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 2021), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 440, 816, 136, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdPrevoiusDiagnosesCoMorbiditesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 2017), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuEDischargeDiagnosisMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPrevoiusDiagnosesCoMorbiditesTemp);
		grdPrevoiusDiagnosesCoMorbiditesGrid grdPrevoiusDiagnosesCoMorbidites = (grdPrevoiusDiagnosesCoMorbiditesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPrevoiusDiagnosesCoMorbiditesGrid.class, m_grdPrevoiusDiagnosesCoMorbiditesTemp);
		grdPrevoiusDiagnosesCoMorbidites.addStringColumn("Description", 0, 0, 530, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPrevoiusDiagnosesCoMorbidites.addPartialDateColumn("Date Diagnosed", 0, 0, 130, true, true, null, false, 0, true);
		grdPrevoiusDiagnosesCoMorbidites.addImageColumn(" ", 0, 0, 40, true, 0);
		grdPrevoiusDiagnosesCoMorbidites.addImageColumn(" ", 0, 0, 40, true, 0);
		grdPrevoiusDiagnosesCoMorbidites.addBoolColumn("Include", 0, 0, -1, false, true, 0, true);
		super.addGrid(grdPrevoiusDiagnosesCoMorbidites);
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 816, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdDiagnosisComplicationsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuPastMedicalHistory, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDiagnosisComplicationsTemp);
		grdDiagnosisComplicationsGrid grdDiagnosisComplications = (grdDiagnosisComplicationsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisComplicationsGrid.class, m_grdDiagnosisComplicationsTemp);
		grdDiagnosisComplications.addStringColumn("Diagnosis Description", 0, 0, 400, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDiagnosisComplications.addPartialDateColumn("Date Diagnosed ", 0, 0, 100, true, true, null, false, 0, true);
		grdDiagnosisComplications.addStringColumn("Authoring HCP, Date/Time", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDiagnosisComplications.addImageColumn(" ", 1, 1, 40, true, 0);
		grdDiagnosisComplications.addBoolColumn("Include", 0, 0, -1, false, true, 0, true);
		super.addGrid(grdDiagnosisComplications);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnStartEDischarge()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public grdPrevoiusDiagnosesCoMorbiditesGrid grdPrevoiusDiagnosesCoMorbidites()
	{
		return (grdPrevoiusDiagnosesCoMorbiditesGrid)super.getGrid(0);
	}
	public grdDiagnosisComplicationsGrid grdDiagnosisComplications()
	{
		return (grdDiagnosisComplicationsGrid)super.getGrid(1);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			COE = new COEImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Search = new ImageHelper(102120, "Images/Core/bin.gif", new Integer(15), new Integer(15));
				AnswerBox_NotAvailable = new ImageHelper(102103, "Images/Core/AnswerBox_NotAvailable.gif", new Integer(10), new Integer(10));
				Pin = new ImageHelper(102212, "Images/Core/Push Pin.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				Add = new ImageHelper(102179, "Images/Core/add.gif", new Integer(16), new Integer(16));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				Search_disabled = new ImageHelper(102263, "Images/Core/bin_dis.gif", new Integer(15), new Integer(15));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Search;
			public final ims.framework.utils.Image AnswerBox_NotAvailable;
			public final ims.framework.utils.Image Pin;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image Add;
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image Search_disabled;
			public final ims.framework.utils.Image EditDisabled;
		}
		public final class COEImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEImages()
			{
				Link = new ImageHelper(101128, "Images/COE/Page-Next.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Link;
		}
		public final CoreImages Core;
		public final COEImages COE;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedPatientDiagnosisVo = new ims.framework.ContextVariable("SelectedPatientDiagnosisVo", prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier + "");
			cxl_CodedItemTextSubmitted = new ims.framework.ContextVariable("CodedItemTextSubmitted", prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__CodedItemTextSubmitted_" + componentIdentifier + "");
			cxl_EDischargeStarted = new ims.framework.ContextVariable("EDischargeStarted", prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__EDischargeStarted_" + componentIdentifier + "");
			cxl_bInitialised = new ims.framework.ContextVariable("bInitialised", prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__bInitialised_" + componentIdentifier + "");
			cxl_CurrentDiagIncluded = new ims.framework.ContextVariable("CurrentDiagIncluded", prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__CurrentDiagIncluded_" + componentIdentifier + "");
			cxl_PreviousDiagIncluded = new ims.framework.ContextVariable("PreviousDiagIncluded", prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__PreviousDiagIncluded_" + componentIdentifier + "");
		}
		
		public boolean getSelectedPatientDiagnosisVoIsNotNull()
		{
			return !cxl_SelectedPatientDiagnosisVo.getValueIsNull(context);
		}
		public ims.core.vo.PatientDiagnosisEDischargeVo getSelectedPatientDiagnosisVo()
		{
			return (ims.core.vo.PatientDiagnosisEDischargeVo)cxl_SelectedPatientDiagnosisVo.getValue(context);
		}
		public void setSelectedPatientDiagnosisVo(ims.core.vo.PatientDiagnosisEDischargeVo value)
		{
			cxl_SelectedPatientDiagnosisVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedPatientDiagnosisVo = null;
		public boolean getCodedItemTextSubmittedIsNotNull()
		{
			return !cxl_CodedItemTextSubmitted.getValueIsNull(context);
		}
		public String getCodedItemTextSubmitted()
		{
			return (String)cxl_CodedItemTextSubmitted.getValue(context);
		}
		public void setCodedItemTextSubmitted(String value)
		{
			cxl_CodedItemTextSubmitted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CodedItemTextSubmitted = null;
		public boolean getEDischargeStartedIsNotNull()
		{
			return !cxl_EDischargeStarted.getValueIsNull(context);
		}
		public Boolean getEDischargeStarted()
		{
			return (Boolean)cxl_EDischargeStarted.getValue(context);
		}
		public void setEDischargeStarted(Boolean value)
		{
			cxl_EDischargeStarted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EDischargeStarted = null;
		public boolean getbInitialisedIsNotNull()
		{
			return !cxl_bInitialised.getValueIsNull(context);
		}
		public Boolean getbInitialised()
		{
			return (Boolean)cxl_bInitialised.getValue(context);
		}
		public void setbInitialised(Boolean value)
		{
			cxl_bInitialised.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bInitialised = null;
		public boolean getCurrentDiagIncludedIsNotNull()
		{
			return !cxl_CurrentDiagIncluded.getValueIsNull(context);
		}
		public Boolean getCurrentDiagIncluded()
		{
			return (Boolean)cxl_CurrentDiagIncluded.getValue(context);
		}
		public void setCurrentDiagIncluded(Boolean value)
		{
			cxl_CurrentDiagIncluded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentDiagIncluded = null;
		public boolean getPreviousDiagIncludedIsNotNull()
		{
			return !cxl_PreviousDiagIncluded.getValueIsNull(context);
		}
		public Boolean getPreviousDiagIncluded()
		{
			return (Boolean)cxl_PreviousDiagIncluded.getValue(context);
		}
		public void setPreviousDiagIncluded(Boolean value)
		{
			cxl_PreviousDiagIncluded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousDiagIncluded = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class PastMedicalHistory implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 1;
			public static final int Edit = 2;
			public static final int View = 3;
			public static final int Linking = 4;
			public static final int Supersede = 5;
			public static final int RIE = 6;
			public static final int ViewAllCDI = 7;
			public static final int ViewAllUnlinkedCDI = 8;
			public static final int ViewAssociations = 9;
		}
		public void disableAllPastMedicalHistoryMenuItems()
		{
			this.contextMenuPastMedicalHistoryNewItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryEditItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryViewItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryLinkingItem.setEnabled(false);
			this.contextMenuPastMedicalHistorySupersedeItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryRIEItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryViewAllCDIItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem.setEnabled(false);
			this.contextMenuPastMedicalHistoryViewAssociationsItem.setEnabled(false);
		}
		public void hideAllPastMedicalHistoryMenuItems()
		{
			this.contextMenuPastMedicalHistoryNewItem.setVisible(false);
			this.contextMenuPastMedicalHistoryEditItem.setVisible(false);
			this.contextMenuPastMedicalHistoryViewItem.setVisible(false);
			this.contextMenuPastMedicalHistoryLinkingItem.setVisible(false);
			this.contextMenuPastMedicalHistorySupersedeItem.setVisible(false);
			this.contextMenuPastMedicalHistoryRIEItem.setVisible(false);
			this.contextMenuPastMedicalHistoryViewAllCDIItem.setVisible(false);
			this.contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem.setVisible(false);
			this.contextMenuPastMedicalHistoryViewAssociationsItem.setVisible(false);
		}
		private Menu contextMenuPastMedicalHistory;
		public MenuItem getPastMedicalHistoryNewItem()
		{
			return this.contextMenuPastMedicalHistoryNewItem;
		}
		private MenuItem contextMenuPastMedicalHistoryNewItem;
		public MenuItem getPastMedicalHistoryEditItem()
		{
			return this.contextMenuPastMedicalHistoryEditItem;
		}
		private MenuItem contextMenuPastMedicalHistoryEditItem;
		public MenuItem getPastMedicalHistoryViewItem()
		{
			return this.contextMenuPastMedicalHistoryViewItem;
		}
		private MenuItem contextMenuPastMedicalHistoryViewItem;
		public MenuItem getPastMedicalHistoryLinkingItem()
		{
			return this.contextMenuPastMedicalHistoryLinkingItem;
		}
		private MenuItem contextMenuPastMedicalHistoryLinkingItem;
		public MenuItem getPastMedicalHistorySupersedeItem()
		{
			return this.contextMenuPastMedicalHistorySupersedeItem;
		}
		private MenuItem contextMenuPastMedicalHistorySupersedeItem;
		public MenuItem getPastMedicalHistoryRIEItem()
		{
			return this.contextMenuPastMedicalHistoryRIEItem;
		}
		private MenuItem contextMenuPastMedicalHistoryRIEItem;
		public MenuItem getPastMedicalHistoryViewAllCDIItem()
		{
			return this.contextMenuPastMedicalHistoryViewAllCDIItem;
		}
		private MenuItem contextMenuPastMedicalHistoryViewAllCDIItem;
		public MenuItem getPastMedicalHistoryViewAllUnlinkedCDIItem()
		{
			return this.contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem;
		}
		private MenuItem contextMenuPastMedicalHistoryViewAllUnlinkedCDIItem;
		public MenuItem getPastMedicalHistoryViewAssociationsItem()
		{
			return this.contextMenuPastMedicalHistoryViewAssociationsItem;
		}
		private MenuItem contextMenuPastMedicalHistoryViewAssociationsItem;
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class EDischargeDiagnosisMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int COPY = 10;
			}
			public void disableAllEDischargeDiagnosisMenuMenuItems()
			{
				this.contextMenuEDischargeDiagnosisMenuCOPYItem.setEnabled(false);
			}
			public void hideAllEDischargeDiagnosisMenuMenuItems()
			{
				this.contextMenuEDischargeDiagnosisMenuCOPYItem.setVisible(false);
			}
			private Menu contextMenuEDischargeDiagnosisMenu;
			public ReadOnlyMenuItem getEDischargeDiagnosisMenuCOPYItem()
			{
				return this.contextMenuEDischargeDiagnosisMenuCOPYItem;
			}
			private MenuItem contextMenuEDischargeDiagnosisMenuCOPYItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[84];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-ISCOMPLICATION", "IsComplication");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-ISCOMORBIDITY", "IsComorbidity");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DATERESOLVED", "DateResolved");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DIAGLATERALITY", "DiagLaterality");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-SITETEXT", "SiteText");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-ISPREVRELEVANTDIAGNOSIS", "IsPrevRelevantDiagnosis");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-DATEONSET", "DateOnset");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-CLINICALCONTACT", "ClinicalContact");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeDiagnosisComponent.__internal_x_context__SelectedPatientDiagnosisVo_" + componentIdentifier, "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
