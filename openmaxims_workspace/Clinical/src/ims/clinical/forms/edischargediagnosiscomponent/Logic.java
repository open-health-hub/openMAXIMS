//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3314.22227)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.edischargediagnosiscomponent;

import ims.clinical.forms.edischargediagnosiscomponent.GenForm.grdDiagnosisComplicationsRow;
import ims.clinical.forms.edischargediagnosiscomponent.GenForm.grdPrevoiusDiagnosesCoMorbiditesRow;
import ims.clinical.forms.edischargediagnosiscomponent.GenForm.ctnDetailsContainer.GroupSelectionEnumeration;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.PatientDiagnosisStatusVoCollection;
import ims.clinical.vo.lookups.CodingItemType;
import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CSPrimaryDiagnosisVo;
import ims.core.vo.CSPrimaryDiagnosisVoCollection;
import ims.core.vo.CareContextForEdischargeDiagnosisVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.EpisodeOfCareCoMorbidityVo;
import ims.core.vo.EpisodeOfCareCoMorbidityVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.IncludeDiagnosisInDischargeReportVo;
import ims.core.vo.IncludeDiagnosisInDischargeReportVoCollection;
import ims.core.vo.PatientDiagnosisEDischargeListVo;
import ims.core.vo.PatientDiagnosisEDischargeListVoCollection;
import ims.core.vo.PatientDiagnosisEDischargeVo;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.vo.interfaces.IClinicalCodingValue;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCurrentDiagIncluded(false);
		form.getLocalContext().setPreviousDiagIncluded(false);


		initializeComponent();
		initializeCustomControl();

		open();
		form.setMode(FormMode.VIEW);
		updateControlsState();
		enableStartEDischarge();
		
		
		form.ctnDetails().setVisible(false);
	}

	public void updateControlsState()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.ctnDetails().setccClinicalTermEnabled(false);
			form.ctnDetails().setccAuthoringEnabled(false);
			
			form.grdDiagnosisComplications().setEnabled(true);
			form.grdDiagnosisComplications().setReadOnly(false);
			form.grdPrevoiusDiagnosesCoMorbidites().setEnabled(true);
			form.grdPrevoiusDiagnosesCoMorbidites().setReadOnly(false);
		}

		updateContextMenus();
	}

	private void initializeCustomControl()
	{
		form.ctnDetails().ccClinicalTerm().setCodingItemType(CodingItemType.DIAGNOSIS);
		form.ctnDetails().ccClinicalTerm().setHotlist(new Boolean(true));
		form.ctnDetails().ccClinicalTerm().setSpecialty(getSpecialty());
		form.ctnDetails().ccClinicalTerm().setClinicalTermMandatory(true);
		form.ctnDetails().ccClinicalTerm().setDescriptionMandatory(true);
	}

	private Specialty getSpecialty()
	{
		if ((form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()) && (form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialty();
		}
		else if ((form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull()) && (form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialtyIsNotNull()))
		{
			return form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty();
		}
		return null;
	}

	public void open()
	{
		form.grdDiagnosisComplications().getRows().clear();

		//First list Diagnosis records that were created in this care context, not marked as PRD or Co-Mordidity
		PatientDiagnosisEDischargeListVoCollection voPatDiagColl = domain.listDiagnosisComplicationsByPatient(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort(), false, null , false);
		populateCurrentDiagnosisGrid(voPatDiagColl);

		clearInstanceControls();

		//form.ctnDetails().setCollapsed(true);
		form.setMode(FormMode.VIEW);
		enableDisableInstanceControls(false);

		reselectSavedRecord();

		//Now list all Diagnoses for Previous Care Contexts for the bottom grid.
		PatientDiagnosisEDischargeListVoCollection voPreviousColl = domain.listDiagnosisComplicationsByPatient(form.getGlobalContext().Core.getPatientShort(), null, Boolean.TRUE, form.getGlobalContext().Core.getEpisodeofCareShort().getStartDate(), Boolean.FALSE);
		populatePreviousDiagnosisGrid(voPreviousColl);

		updateContextMenus();
	}

	private void populatePreviousDiagnosisGrid(PatientDiagnosisEDischargeListVoCollection voPreviousColl) 
	{
		form.grdPrevoiusDiagnosesCoMorbidites().getRows().clear();
		if (voPreviousColl != null)
		{
			for (int i = 0; i < voPreviousColl.size(); i++)
			{
				boolean bAddrow = false;
				for (int j = 0 ; j < form.grdDiagnosisComplications().getRows().size() ; j++)
				{
					if (form.grdDiagnosisComplications().getRows().get(j).getValue().equals(voPreviousColl.get(i)))
						bAddrow = true;
				}
				if ( !bAddrow)
				{
					grdPrevoiusDiagnosesCoMorbiditesRow row = form.grdPrevoiusDiagnosesCoMorbidites().getRows().newRow();
					PatientDiagnosisEDischargeListVo patientDiagnosisListVo = voPreviousColl.get(i);

					setPreviousPatientDiagnosisRowData(row, patientDiagnosisListVo);
				}
			}
		}

	}

	private void setPreviousPatientDiagnosisRowData(grdPrevoiusDiagnosesCoMorbiditesRow row, PatientDiagnosisEDischargeListVo patientDiagnosisListVo)
	{
		row.setColDCDesc(patientDiagnosisListVo.getDiagnosisDescriptionIsNotNull() ? patientDiagnosisListVo.getDiagnosisDescription() : "");
		row.setColDCDate(patientDiagnosisListVo.getDiagnosedDateIsNotNull() ? patientDiagnosisListVo.getDiagnosedDate() : null);

		row.setColDCCoMorbid(patientDiagnosisListVo.getIsComorbidityIsNotNull() ? (patientDiagnosisListVo.getIsComorbidity().booleanValue() ? form.getImages().Core.Pin : null) : null);
		row.setTooltipForColDCCoMorbid(patientDiagnosisListVo.getIsComorbidityIsNotNull() ? (patientDiagnosisListVo.getIsComorbidity().booleanValue() ? "Co-morbidity" : "") : "");

		boolean bComorb = findIfMarkedAsComorbInThisEDischarge(patientDiagnosisListVo.getCoMorbidityForEpisodeOfCares());
		row.setColComorbInCurrent(bComorb ? form.getImages().Core.Tick : null);
		row.setTooltipForColComorbInCurrent(bComorb ? "A tick means it is a Co-morbidity for this eDischarge" : "");
		
		row.setColInclude(findIfIncludeSetForThisCareContext(patientDiagnosisListVo.getIncludeDiagnosisInDiscReports()) ? Boolean.TRUE : Boolean.FALSE);

		row.setValue(patientDiagnosisListVo);
	}

	private boolean findIfMarkedAsComorbInThisEDischarge(EpisodeOfCareCoMorbidityVoCollection voColl)
	{
		Boolean bFound = false;
		for (int i = 0 ; i < voColl.size() ; i ++)
		{
			if (voColl.get(i).getCareContext().getID_CareContext().equals(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()))
				bFound = true;
		}

		return bFound;
	}

	private boolean findIfIncludeSetForThisCareContext(IncludeDiagnosisInDischargeReportVoCollection includeDiagnosisInDiscReports) 
	{
		for(int i = 0 ; includeDiagnosisInDiscReports != null && i < includeDiagnosisInDiscReports.size() ; i++)
		{
			if (includeDiagnosisInDiscReports.get(i).getCareContextIsNotNull()
				&& includeDiagnosisInDiscReports.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext())
				&& includeDiagnosisInDiscReports.get(i).getIncludeInReport())
				return true;
		}
		return false;
	}

	public void clearInstanceControls()
	{
		form.ctnDetails().ccClinicalTerm().clear();
		form.ctnDetails().cmbLaterality().setValue(null);
		form.ctnDetails().txtSite().setValue(null);
		form.ctnDetails().pdtDiagnosed().setValue(null);
		form.ctnDetails().dteOnset().setValue(null);
		form.ctnDetails().chkComplication().setValue(false);
		form.ctnDetails().chkPrimaryDiagnosis().setValue(false);
		form.ctnDetails().chkPRD().setValue(false);
		form.ctnDetails().cmbCoMorb().setValue(null);
		form.ctnDetails().ccAuthoring().setValue(null);
	}

	public void enableDisableInstanceControls(boolean bEnable)
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.grdDiagnosisComplications().setEnabled(!bEnable);
			form.grdDiagnosisComplications().setEnabled(!bEnable);

			form.grdPrevoiusDiagnosesCoMorbidites().setEnabled(!bEnable);
			

			form.ctnDetails().ccClinicalTerm().setEnabled(bEnable);
			form.ctnDetails().cmbLaterality().setEnabled(bEnable);
			form.ctnDetails().txtSite().setEnabled(bEnable);
			form.ctnDetails().pdtDiagnosed().setEnabled(bEnable);
			form.ctnDetails().dteOnset().setEnabled(bEnable);
			form.ctnDetails().chkComplication().setEnabled(bEnable);
			form.ctnDetails().chkPrimaryDiagnosis().setEnabled(bEnable);
			form.ctnDetails().chkPRD().setEnabled(bEnable);
			form.ctnDetails().cmbCoMorb().setEnabled(bEnable);
			form.ctnDetails().ccAuthoring().setEnabledAuthoringHCP(bEnable);
			form.ctnDetails().ccAuthoring().setEnabledDateTime(bEnable);
		
			form.ctnDetails().GroupSelection().setEnabled(bEnable);
			form.ctnDetails().setccClinicalTermEnabled(bEnable);
			form.ctnDetails().ccClinicalTerm().setParentEditing(bEnable);
		}
	}

	private void populateCurrentDiagnosisGrid(PatientDiagnosisEDischargeListVoCollection voPatDiagColl)
	{
		if (voPatDiagColl != null)
		{
			for (int i = 0; i < voPatDiagColl.size(); i++)
			{
				grdDiagnosisComplicationsRow row = form.grdDiagnosisComplications().getRows().newRow();
				PatientDiagnosisEDischargeListVo patientDiagnosisListVo = voPatDiagColl.get(i);

				setPatientDiagnosisRowData(row, patientDiagnosisListVo);
			}
		}

	}

	// WDEV-2535
	private void setTooltip(PatientDiagnosisEDischargeVo voPatDiag)
	{
		if (voPatDiag != null && voPatDiag.getStatusHistoryIsNotNull() && voPatDiag.getStatusHistory().size() > 0)
		{
			PatientDiagnosisStatusVoCollection collVo = voPatDiag.getStatusHistory();

			String tooltip = "";
			String setFont = "<FONT FACE='Times New Roman' SIZE='2'>";
			String endFont = "</FONT>";
			String table = "<TABLE CELLPADDING='1' CELLSPACING='1' BORDER='3' ><TR><TD BGCOLOR=\'#BBBBFF\' ALIGN='LEFT'>";
			String endStatus = endFont + "<B></TD></TR><TR>";
			String dateTime = "<TD colspan=1 width=60% align=\'LEFT\'> " + setFont;
			String hcp = endFont + "</TD><TD colspan=1 width=60% align=\'LEFT\'>" + setFont;
			String end = endFont + "</TD></TR><TR></TABLE>";

			for (int i = 0; i < collVo.size(); i++)
			{
				tooltip += table + setFont + "<B>" + (i + 1) + ". " + collVo.get(i).getStatus() + endStatus + endFont + dateTime + collVo.get(i).getAuthoringDateTime() + hcp + collVo.get(i).getAuthoringHCP() + end;
			}

		}
	}
	
	private Image getPrimaryImage()
	{
		return form.getImages().Core.Pin;
	}

	private void setPatientDiagnosisRowData(grdDiagnosisComplicationsRow row, PatientDiagnosisEDischargeListVo patientDiagnosisListVo)
	{
		row.setColDiagnosis(patientDiagnosisListVo.getDiagnosisDescriptionIsNotNull() ? patientDiagnosisListVo.getDiagnosisDescription() : "");
		row.setColDateDiagnosed(patientDiagnosisListVo.getDiagnosedDateIsNotNull() ? patientDiagnosisListVo.getDiagnosedDate() : null);
		row.setColAuthoringHCPDateTime(patientDiagnosisListVo.getAuthoringInfoIsNotNull() ? patientDiagnosisListVo.getAuthoringInfo().toString(): null);

		if (patientDiagnosisListVo.getSysInfoIsNotNull() && patientDiagnosisListVo.getSysInfo().getLastupdateUser() != null)
			row.setColAudit(form.getImages().Core.EditDisabled);
		
		row.setColInclude(findIfIncludeSetForThisCareContext(patientDiagnosisListVo.getIncludeDiagnosisInDiscReports()) ? Boolean.TRUE : Boolean.FALSE);

		row.setValue(patientDiagnosisListVo);
	}

	private void reselectSavedRecord()
	{
		if (form.getLocalContext().getSelectedPatientDiagnosisVoIsNotNull())
		{
			PatientDiagnosisEDischargeVo voPatientDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
			if (voPatientDiagnosis != null)
			{
				form.grdDiagnosisComplications().setValue(voPatientDiagnosis);
				grdDiagnosisSelectionChanged();
			}
		}
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
		enableDisableInstanceControls(true);
		
		form.ctnDetails().GroupSelection().setEnabled(false);
		form.ctnDetails().GroupSelection().setValue(null);
		updateContextMenus();
	}

	public void initializeComponent() throws ims.framework.exceptions.FormOpenException
	{
		setDateValidation();
		setContextMenu();
		updateContextMenus();
	
		form.getLocalContext().setbInitialised(null);

		form.getLocalContext().setEDischargeStarted(false);
	}

	private void enableStartEDischarge()
	{
		form.btnStartEDischarge().setVisible(false);
		if (domain.getDischargeDetails(form.getGlobalContext().Core.getCurrentCareContext()) == null)
		{
			form.btnStartEDischarge().setEnabled(true);
			form.btnStartEDischarge().setVisible(true);
			
			form.getContextMenus().hideAllPastMedicalHistoryMenuItems();
			form.grdDiagnosisComplications().setEnabled(false);
			form.grdPrevoiusDiagnosesCoMorbidites().setEnabled(false);
		}
	}

	private CSPrimaryDiagnosisVo populatePrimaryDiagnosisDataFromScreen(CSPrimaryDiagnosisVo primaryDiagnosisVo, PatientDiagnosisRefVo patientDiagnosisRef, boolean isPrimary)
	{
		if (primaryDiagnosisVo == null)
			primaryDiagnosisVo = new CSPrimaryDiagnosisVo();
		primaryDiagnosisVo.setAuthoringInformation(form.ctnDetails().ccAuthoring().getValue());
		primaryDiagnosisVo.setDiagnosis(patientDiagnosisRef);
		primaryDiagnosisVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		primaryDiagnosisVo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		primaryDiagnosisVo.setIsActive(new Boolean(isPrimary));
		return primaryDiagnosisVo;
	}

	private void setContextMenu()
	{
		form.getContextMenus().getPastMedicalHistoryNewItem().setText("New Diagnosis / Complication");
		form.getContextMenus().getPastMedicalHistoryEditItem().setText("Edit");
		form.getContextMenus().getPastMedicalHistoryViewItem().setText("Mark as Primary");
		form.getContextMenus().getPastMedicalHistoryViewItem().setIcon(getPrimaryImage());
	}

	private void setDateValidation()
	{
		form.ctnDetails().dteOnset().setNoFutureDates();
	}

	public void newInstance() throws PresentationLogicException
	{
		clearInstanceControls();
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);

		form.setMode(FormMode.EDIT);
		enableDisableInstanceControls(true);

		form.ctnDetails().GroupSelection().setEnabled(true);
		form.ctnDetails().GroupSelection().setValue(GroupSelectionEnumeration.rdoSpecialty);
		setInitialCustomControlCodingSettings();
		form.ctnDetails().ccAuthoring().initializeComponent();
		
		updateContextMenus();
	}

	private void setInitialCustomControlCodingSettings()
	{
		form.ctnDetails().ccClinicalTerm().setSearchAllSelected(Boolean.FALSE);
		form.ctnDetails().ccClinicalTerm().setHotlist(Boolean.TRUE);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getCurrentDiagIncluded().booleanValue()
			|| form.getLocalContext().getPreviousDiagIncluded().booleanValue())
		{
			if (saveIncludeInfo())
			{
				form.getLocalContext().setCurrentDiagIncluded(false);
				form.getLocalContext().setPreviousDiagIncluded(false);
				form.getLocalContext().setSelectedPatientDiagnosisVo(null);
				open();
			}
			return;
		}

		if (save())
		{
			form.getLocalContext().setSelectedPatientDiagnosisVo(null);
			open();
			return;
		}
	}
	
	private boolean saveIncludeInfo() throws PresentationLogicException 
	{
		//Current Diagnoses in this Care Context
		for (int i = 0 ; i < form.grdDiagnosisComplications().getRows().size() ; i++)
		{
			PatientDiagnosisEDischargeVo voPatientDiagnosis = domain.getDiagnosisVo(form.grdDiagnosisComplications().getRows().get(i).getValue());

			PatientDiagnosisEDischargeVo voUpdatedPatientDiagnosis = includeValueChangedForCareContext(voPatientDiagnosis, form.grdDiagnosisComplications().getRows().get(i).getColInclude());
			if (voUpdatedPatientDiagnosis != null)	
			{
				boolean bReturn = saveDiagnosisRecord(voUpdatedPatientDiagnosis);
				if ( ! bReturn)
					return false;
			}
		}
		

		//Previous Diagnoses
		for (int i = 0 ; i < form.grdPrevoiusDiagnosesCoMorbidites().getRows().size() ; i++)
		{
			PatientDiagnosisEDischargeVo voPatientDiagnosis = domain.getDiagnosisVo(form.grdPrevoiusDiagnosesCoMorbidites().getRows().get(i).getValue());

			PatientDiagnosisEDischargeVo voUpdatedPatientDiagnosis = includeValueChangedForCareContext(voPatientDiagnosis, form.grdPrevoiusDiagnosesCoMorbidites().getRows().get(i).getColInclude());
			if (voUpdatedPatientDiagnosis != null)	
			{
				boolean bReturn = saveDiagnosisRecord(voUpdatedPatientDiagnosis);
				if ( ! bReturn)
					return false;
			}
		}

		return true;
	}

	private PatientDiagnosisEDischargeVo includeValueChangedForCareContext(PatientDiagnosisEDischargeVo voPatientDiagnosis, boolean bInclude)
	{
		boolean bFound = false;
		for (int i = 0 ; voPatientDiagnosis.getIncludeDiagnosisInDiscReportsIsNotNull() && i < voPatientDiagnosis.getIncludeDiagnosisInDiscReports().size() ; i++)
		{
			IncludeDiagnosisInDischargeReportVo voInclude = voPatientDiagnosis.getIncludeDiagnosisInDiscReports().get(i);
			if (voInclude.getCareContextIsNotNull()
				&& voInclude.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
			{
				bFound = true;
				voInclude.setIncludeInReport(bInclude);
				voPatientDiagnosis.getIncludeDiagnosisInDiscReports().set(i, voInclude);
			}

		}
		if ( !bFound )
		{
			IncludeDiagnosisInDischargeReportVo voNewInclude = new IncludeDiagnosisInDischargeReportVo();
			voNewInclude.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voNewInclude.setDiagnosis(voPatientDiagnosis);
			voNewInclude.setIncludeInReport(bInclude);
		
			if (voPatientDiagnosis.getIncludeDiagnosisInDiscReports() == null)
				voPatientDiagnosis.setIncludeDiagnosisInDiscReports(new IncludeDiagnosisInDischargeReportVoCollection());
			
			voPatientDiagnosis.getIncludeDiagnosisInDiscReports().add(voNewInclude);
		}
		
		return voPatientDiagnosis;
	}

	private PatientDiagnosisEDischargeVo populateDataFromScreen()
	{
		PatientDiagnosisEDischargeVo voPatDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();

		if (voPatDiagnosis == null)
		{
			voPatDiagnosis = new PatientDiagnosisEDischargeVo();

			// For newly created PatientDiagnosis set the EpisodeOfCare, the CareContext and the ClinicalContact
			voPatDiagnosis.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			voPatDiagnosis.setCareContext(getCareContext(form.getGlobalContext().Core.getCurrentCareContext()));//WDEV-12779
			voPatDiagnosis.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		}

		IClinicalCodingValue voResult = form.ctnDetails().ccClinicalTerm().getValue();
		if (voResult != null)
		{
			if (voResult.getIClinicalCodingValue() instanceof DiagLiteVo)
			{
				DiagLiteVo voDiagnosis = (DiagLiteVo) voResult.getIClinicalCodingValue();
				if (voDiagnosis.getID_Diagnosis() != null && voDiagnosis.getID_Diagnosis().intValue() < 0)
					voPatDiagnosis.setDiagnosis(null);
				else
					voPatDiagnosis.setDiagnosis(voDiagnosis);

				voPatDiagnosis.setDiagnosisDescription(voResult.getIClinicalCodingValueDescription());
			}
			else
				throw new CodingRuntimeException("DiagLiteVo expected from component");
		}
		else
		// http://jira/browse/WDEV-3518 - If no description is entered set the equivalent field in the vo to null;
		{
			voPatDiagnosis.setDiagnosisDescription(null);
		}

		voPatDiagnosis.setDiagLaterality(form.ctnDetails().cmbLaterality().getValue());
		voPatDiagnosis.setSiteText(form.ctnDetails().txtSite().getValue());

		voPatDiagnosis.setDiagnosedDate(form.ctnDetails().pdtDiagnosed().getValue() != null ? form.ctnDetails().pdtDiagnosed().getValue() : null);
		voPatDiagnosis.setDateOnset(form.ctnDetails().dteOnset().getValue());

		voPatDiagnosis.setIsComplication(new Boolean(form.ctnDetails().chkComplication().getValue()));
		voPatDiagnosis.setIsPrevRelevantDiagnosis(new Boolean(form.ctnDetails().chkPRD().getValue()));

		voPatDiagnosis.setIsComorbidity(form.ctnDetails().cmbCoMorb().getValue().equals(YesNo.YES) ? true : false);
		
		if(form.ctnDetails().cmbCoMorb().getValue().equals(YesNo.YES))
		{
			EpisodeOfCareCoMorbidityVoCollection voColl = voPatDiagnosis.getCoMorbidityForEpisodeOfCares();
			if (voColl == null)
				voColl = new EpisodeOfCareCoMorbidityVoCollection();

			Boolean bFound = false;
			for (int i = 0 ; i < voColl.size() ; i ++)
			{
				if (voColl.get(i).getCareContext().getID_CareContext().equals(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()))
					bFound = true;
			}
			
			if ( ! bFound)
			{
				EpisodeOfCareCoMorbidityVo voNEW = new EpisodeOfCareCoMorbidityVo();

				AuthoringInformationVo  voAuthInfo = new AuthoringInformationVo();
				voAuthInfo.setAuthoringDateTime(new DateTime());
				voAuthInfo.setAuthoringHcp((HcpLiteVo)domain.getHcpLiteUser());

				voNEW.setAuthoringInformation(voAuthInfo);
				voNEW.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				voNEW.setDiagnosis(voPatDiagnosis);
				voNEW.setIsActive(true);
				
				voColl.add(voNEW);
			}
			
			voPatDiagnosis.setCoMorbidityForEpisodeOfCares(voColl);
		}
		

		voPatDiagnosis.setAuthoringInfo(form.ctnDetails().ccAuthoring().getValue());
		
		if (voPatDiagnosis.getSourceofInformation() == null)
			voPatDiagnosis.setSourceofInformation(SourceofInformation.CLINICALCONTACT);

		// Primary Diagnosis
		setCsPrimaryDiagnosis(voPatDiagnosis, form.ctnDetails().chkPrimaryDiagnosis().getValue());

		return voPatDiagnosis;
	}
	
	public boolean save() throws PresentationLogicException 
	{
		StringBuffer sb = new StringBuffer();
		
		if (form.ctnDetails().cmbCoMorb().getValue() == null)
			sb.append("Co-Morbidity is mandatory\n\n");

		IClinicalCodingValue voResult = form.ctnDetails().ccClinicalTerm().getValue();

		if (voResult == null)
			sb.append("Clinical Term and Description are mandatory");

		if (voResult != null && voResult.getIClinicalCodingValueDescription() == null)
			sb.append("Clinical Term and Description are mandatory");

		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString());
			return false;
		}

		PatientDiagnosisEDischargeVo voPatientDiagnosis = populateDataFromScreen();	
		
		if (voPatientDiagnosis.getDiagnosedDate() != null)
		{
			if (voPatientDiagnosis.getDiagnosedDate().isGreaterThan(new Date()))
			{
				engine.showMessage("The diagnosis date can not be in the future");
				form.ctnDetails().pdtDiagnosed().setValue(null);
				form.ctnDetails().pdtDiagnosed().setFocus();
				return false;
			}
		}

		if (voPatientDiagnosis.getDateOnset() != null)
		{
			if (voPatientDiagnosis.getDateOnset().isGreaterThan(new Date()))
			{
				engine.showMessage("The onset date cannot be in the future");
				form.ctnDetails().dteOnset().setValue(null);
				form.ctnDetails().pdtDiagnosed().setFocus();

				return false;
			}
		}
		
		return saveDiagnosisRecord(voPatientDiagnosis);
	}

	private boolean saveDiagnosisRecord(PatientDiagnosisEDischargeVo voPatientDiagnosis) throws PresentationLogicException
	{
		String[] errors = voPatientDiagnosis.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			voPatientDiagnosis = domain.saveDiagnosisVo(voPatientDiagnosis);
		}
		catch (StaleObjectException sox)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException ue)
		{
			engine.showMessage(ue.getMessage());
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showErrors(new String[]{e.getMessage()});
			return false;
		}
		form.getLocalContext().setSelectedPatientDiagnosisVo(voPatientDiagnosis);

		return true;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getCurrentDiagIncluded().booleanValue()
			|| form.getLocalContext().getPreviousDiagIncluded().booleanValue())
		{
			form.getLocalContext().setCurrentDiagIncluded(false);
			form.getLocalContext().setPreviousDiagIncluded(false);
		}
		open();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PastMedicalHistory.New :
				newInstance();
			break;

			case GenForm.ContextMenus.PastMedicalHistory.Edit :
				updateInstance();
			break;

			case GenForm.ContextMenus.PastMedicalHistory.View :
				markProblemasPrimary();
			break;

			case GenForm.ContextMenus.ClinicalNamespace.EDischargeDiagnosisMenu.COPY:
				markDiagnosis();
			break;

		}
	}

	private void markProblemasPrimary() throws PresentationLogicException
	{
/*		PatientDiagnosisEDischargeListVo voPatientDiagnosisList = form.grdDiagnosisComplications().getValue();
		if (voPatientDiagnosisList == null)
		{
			engine.showErrors(new String[]{"Please select a Diagnosis / Complication"});
			return;
		}

		PatientDiagnosisEDischargeVo voPatientDiagnosis = domain.getDiagnosisVo(voPatientDiagnosisList);

		setCsPrimaryDiagnosis(voPatientDiagnosis, true);

		if (saveDiagnosisRecord(voPatientDiagnosis))
		{
			PatientDiagnosisVo voPatDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
			grdDiagnosisComplicationsRow row = form.grdDiagnosisComplications().getRowByValue(voPatDiagnosis);
			if (row != null)
			{
				setPatientDiagnosisRowData(row, voPatDiagnosis);
				grdDiagnosisSelectionChanged();
			}
		}
	*/
	}

	private void markDiagnosis() throws PresentationLogicException 
	{
		if (form.grdPrevoiusDiagnosesCoMorbidites().getSelectedRow() == null)
			return;
		
		PatientDiagnosisEDischargeVo voDiagToCopy = domain.getDiagnosisVo(form.grdPrevoiusDiagnosesCoMorbidites().getSelectedRow().getValue());

		EpisodeOfCareCoMorbidityVoCollection voColl = voDiagToCopy.getCoMorbidityForEpisodeOfCares();
		if (voColl == null)
			voColl = new EpisodeOfCareCoMorbidityVoCollection();

		Boolean bFound = false;
		for (int i = 0 ; i < voColl.size() ; i ++)
		{
			if (voColl.get(i).getCareContext().getID_CareContext().equals(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()))
				bFound = true;
		}
		
		if ( ! bFound)
		{
			EpisodeOfCareCoMorbidityVo voNEW = new EpisodeOfCareCoMorbidityVo();

			AuthoringInformationVo  voAuthInfo = new AuthoringInformationVo();
			voAuthInfo.setAuthoringDateTime(new DateTime());
			voAuthInfo.setAuthoringHcp((HcpLiteVo)domain.getHcpLiteUser());

			voNEW.setAuthoringInformation(voAuthInfo);
			voNEW.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voNEW.setDiagnosis(voDiagToCopy);
			voNEW.setIsActive(true);
			
			voColl.add(voNEW);
		}
		
		voDiagToCopy.setCoMorbidityForEpisodeOfCares(voColl);
		
		saveDiagnosisRecord(voDiagToCopy); 
		
		form.getContextMenus().Clinical.hideAllEDischargeDiagnosisMenuMenuItems();
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);
		open();
	}

	private CSPrimaryDiagnosisVo getPrimaryDiagnosisRecord(PatientDiagnosisEDischargeVo voPatDiagnosis)
	{
		if (voPatDiagnosis == null || voPatDiagnosis.getPrimaryForCareSpells() == null)
			return null;

		CSPrimaryDiagnosisVoCollection voColl = voPatDiagnosis.getPrimaryForCareSpells();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagnosis);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());

			if (sameDiagnosis && sameCareContext)
				return voColl.get(i);
		}

		return null;
	}

	private void setCsPrimaryDiagnosis(PatientDiagnosisEDischargeVo voPatDiagnosis, boolean isChkPrimaryChecked)
	{
		CSPrimaryDiagnosisVo voCSPrimaryDiagnosis = getPrimaryDiagnosisRecord(voPatDiagnosis);
		if (voCSPrimaryDiagnosis != null || isChkPrimaryChecked)
		{
			if (voCSPrimaryDiagnosis == null)
			{
				voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(new CSPrimaryDiagnosisVo(), voPatDiagnosis, isChkPrimaryChecked);
				if (voPatDiagnosis.getPrimaryForCareSpells() == null)
					voPatDiagnosis.setPrimaryForCareSpells(new CSPrimaryDiagnosisVoCollection());
				voPatDiagnosis.getPrimaryForCareSpells().add(voCSPrimaryDiagnosis);
			}
			else
			{
				int index = voPatDiagnosis.getPrimaryForCareSpells().indexOf(voCSPrimaryDiagnosis);
				if (index >= 0)
				{
					voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(voCSPrimaryDiagnosis, voPatDiagnosis, isChkPrimaryChecked);
					voPatDiagnosis.getPrimaryForCareSpells().set(index, voCSPrimaryDiagnosis);
				}
			}
		}
	}


	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
	}
	
	@Override
	protected void onRadioButtonGroupSelectionValueChanged() throws PresentationLogicException 
	{
		form.ctnDetails().ccClinicalTerm().setHotlist(form.ctnDetails().GroupSelection().getValue().equals(GroupSelectionEnumeration.rdoAll) ? new Boolean(false) : new Boolean(true));
	}
	@Override
	protected void onGrdPrevoiusDiagnosesCoMorbiditesSelectionChanged() throws PresentationLogicException 
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.ctnDetails().setVisible(true);

			form.getContextMenus().Clinical.hideAllEDischargeDiagnosisMenuMenuItems();
	
			if (form.getLocalContext().getCurrentDiagIncluded().booleanValue()
				|| form.getLocalContext().getPreviousDiagIncluded().booleanValue())
				return;
			
			if( form.getMode().equals(FormMode.VIEW) 
				&& form.grdPrevoiusDiagnosesCoMorbidites().getSelectedRow() != null
				&& form.grdPrevoiusDiagnosesCoMorbidites().getSelectedRow().getColComorbInCurrent() == null)
			{
				form.getContextMenus().Clinical.getEDischargeDiagnosisMenuCOPYItem().setEnabled(true);
				form.getContextMenus().Clinical.getEDischargeDiagnosisMenuCOPYItem().setVisible(true);
			}
		}
	}

	@Override
	protected void onCcClinicalTermValueChanged() throws PresentationLogicException 
	{
		if (form.ctnDetails().ccClinicalTerm().isAllSelected() != null && form.ctnDetails().ccClinicalTerm().isAllSelected().booleanValue())
		{
			form.ctnDetails().GroupSelection().setValue(GroupSelectionEnumeration.rdoAll);
			form.ctnDetails().ccClinicalTerm().setHotlist(new Boolean(false));
			form.ctnDetails().ccClinicalTerm().search();
		}
	}
	@Override
	protected void onGrdDiagnosisComplicationsSelectionChanged() throws PresentationLogicException 
	{
		form.ctnDetails().setVisible(true);

		grdDiagnosisSelectionChanged();
	}

	private void grdDiagnosisSelectionChanged()
	{
		form.getLocalContext().setSelectedPatientDiagnosisVo(null);

		if (form.grdDiagnosisComplications().getValue() != null)
		{
			PatientDiagnosisEDischargeVo voPatDiag = domain.getDiagnosisVo(form.grdDiagnosisComplications().getValue());

			if (voPatDiag != null && voPatDiag.getStatusHistoryIsNotNull())
				// WDEV-2535
				setTooltip(voPatDiag);
			else
				setTooltip(null);

			populateInstanceControls(voPatDiag);
			boolean isPrimaryDiagnosis = isPrimaryDiagnosisActive(voPatDiag);
			form.ctnDetails().chkPrimaryDiagnosis().setValue(isPrimaryDiagnosis);
			form.getContextMenus().getPastMedicalHistoryViewItem().setVisible(!isPrimaryDiagnosis);
			form.getLocalContext().setSelectedPatientDiagnosisVo(voPatDiag);

			updateControlsState();
			updateContextMenus();
		}
	}

	private void populateInstanceControls(PatientDiagnosisEDischargeVo voPatDiag)
	{
		clearInstanceControls();

		form.ctnDetails().ccClinicalTerm().setValue(voPatDiag);

		form.ctnDetails().cmbLaterality().setValue(voPatDiag.getDiagLateralityIsNotNull() ? voPatDiag.getDiagLaterality() : null);
		form.ctnDetails().txtSite().setValue(voPatDiag.getSiteTextIsNotNull() ? voPatDiag.getSiteText() : "");
		form.ctnDetails().dteOnset().setValue(voPatDiag.getDateOnsetIsNotNull() ? voPatDiag.getDateOnset() : null);
		form.ctnDetails().chkComplication().setValue(voPatDiag.getIsComplicationIsNotNull() ? voPatDiag.getIsComplication().booleanValue() : false);
		form.ctnDetails().chkPRD().setValue(voPatDiag.getIsPrevRelevantDiagnosisIsNotNull() ? voPatDiag.getIsPrevRelevantDiagnosis().booleanValue() : false);// wdev-3256

		form.ctnDetails().ccAuthoring().setValue(voPatDiag.getAuthoringInfo());

		form.ctnDetails().cmbCoMorb().setValue(voPatDiag.getIsComorbidityIsNotNull() && voPatDiag.getIsComorbidity().booleanValue() ? YesNo.YES : YesNo.NO);

		form.ctnDetails().chkPrimaryDiagnosis().setValue(false);
		if (voPatDiag.getPrimaryForCareSpellsIsNotNull())
		{
			for (int i = 0; i < voPatDiag.getPrimaryForCareSpells().size(); i++)
			{
				if ((voPatDiag.getPrimaryForCareSpells().get(i).getCareContextIsNotNull()) 
					&& (voPatDiag.getPrimaryForCareSpells().get(i).getCareContext().getEpisodeOfCareIsNotNull()) && (form.getGlobalContext().Core.getCurrentCareContextIsNotNull()) && (form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull()) && (voPatDiag.getPrimaryForCareSpells().get(i).getCareContext().getEpisodeOfCare().getID_EpisodeOfCare().equals(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getID_EpisodeOfCare())))
					form.ctnDetails().chkPrimaryDiagnosis().setValue(true);
			}
		}

		form.getLocalContext().setSelectedPatientDiagnosisVo(voPatDiag);

		updateContextMenus();
	}

	protected void updateContextMenus()
	{
		form.getContextMenus().hideAllPastMedicalHistoryMenuItems();
		form.getContextMenus().Clinical.hideAllEDischargeDiagnosisMenuMenuItems();

		if (form.getLocalContext().getCurrentDiagIncluded().booleanValue()
			|| form.getLocalContext().getPreviousDiagIncluded().booleanValue())
			return;
		
		form.getContextMenus().getPastMedicalHistoryNewItem().setText("New Diagnosis");
		form.getContextMenus().getPastMedicalHistoryNewItem().setVisible(form.getMode().equals(FormMode.VIEW));
		
		if (form.grdDiagnosisComplications().getSelectedRowIndex() >= 0)
		{
			form.getContextMenus().getPastMedicalHistoryEditItem().setText("Edit Diagnosis");
			form.getContextMenus().getPastMedicalHistoryEditItem().setVisible(form.getMode().equals(FormMode.VIEW));
		}
	}

	private boolean isPrimaryDiagnosisActive(PatientDiagnosisEDischargeListVo voPatientDiagnosisList)
	{
		if (voPatientDiagnosisList == null)
			return false;

		return isPrimaryDiagnosisActive(voPatientDiagnosisList, voPatientDiagnosisList.getPrimaryForCareSpells());
	}
	
	private boolean isPrimaryDiagnosisActive(PatientDiagnosisRefVo voPatDiagRef, CSPrimaryDiagnosisVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			boolean isActive = voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive().booleanValue();
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagRef);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());

			if (isActive && sameDiagnosis && sameCareContext)
				return true;
		}
		return false;
	}


	@Override
	protected void onFormModeChanged() 
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			PatientDiagnosisEDischargeListVo voPatientDiagnosis = form.getLocalContext().getSelectedPatientDiagnosisVo();
			boolean newRecord = voPatientDiagnosis == null || voPatientDiagnosis.getID_PatientDiagnosis() == null;
			form.ctnDetails().setccAuthoringEnabled(newRecord);
			
			if (form.getLocalContext().getCurrentDiagIncluded().booleanValue()
				|| form.getLocalContext().getPreviousDiagIncluded().booleanValue())
				form.ctnDetails().setccAuthoringEnabled(false);
		}

		updateControlsState();
	}

	@Override
	protected void onBtnStartEDischargeClick() throws PresentationLogicException 
	{
		DischargeDetailsVo voDD = new DischargeDetailsVo();
		voDD.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voDD.setInitiatingHCP((HcpLiteVo)domain.getHcpLiteUser());
		voDD.setDischargeLetterStatus(DischargeLetterStatus.IN_PROGRESS);

		if (voDD.getInitiatingHCP() == null)
		{
			engine.showMessage("The logged in user is not a HCP and so cannot Start this eDischarge","Warning", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}
		
		String[] str = voDD.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return;
		}

		try 
		{
			voDD = domain.saveDischargeDetails(voDD);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			enableStartEDischarge();
			form.setMode(FormMode.VIEW);			
			return;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			enableStartEDischarge();
			form.setMode(FormMode.VIEW);			
			return;
		} 
		form.btnStartEDischarge().setVisible(false);
		updateControlsState();
		updateContextMenus();
		
		form.getLocalContext().setEDischargeStarted(true);
	}

	public Boolean getbStartEDischarge() 
	{
		return form.getLocalContext().getEDischargeStarted();
	}

	public void initialise() 
	{
	}

	@Override
	protected void onGrdDiagnosisComplicationsGridCheckBoxClicked(int column, grdDiagnosisComplicationsRow row, boolean isChecked) throws PresentationLogicException 
	{
		form.getLocalContext().setCurrentDiagIncluded(true);
		form.setMode(FormMode.EDIT);
		updateContextMenus();
	}

	@Override
	protected void onGrdPrevoiusDiagnosesCoMorbiditesGridCheckBoxClicked(int column, grdPrevoiusDiagnosesCoMorbiditesRow row, boolean isChecked) throws PresentationLogicException 
	{
		form.getLocalContext().setPreviousDiagIncluded(true);
		form.setMode(FormMode.EDIT);
		
		enableDisableInstanceControls(false);
		updateContextMenus();
	}
	
	private static CareContextForEdischargeDiagnosisVo getCareContext(CareContextShortVo careContextShort)//WDEV-12779
	{
		if (careContextShort == null)
			return null;
		CareContextForEdischargeDiagnosisVo result = new CareContextForEdischargeDiagnosisVo(careContextShort.getID_CareContext(), careContextShort.getVersion_CareContext());
		result.setIsRIE(careContextShort.getIsRIE());
		result.setStartDateTime(careContextShort.getStartDateTime());
		return result;
	}

}
