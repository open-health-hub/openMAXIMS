//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.cataractintraoperativecarerecord;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrMainLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabCareRecordContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbTheatreComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocShortVo getValue()
				{
					return (ims.core.vo.LocShortVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocShortVo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class PlannedUnplannedRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 88, 528, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Unplanned", startTabIndex.intValue() + 9019);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 528, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Planned", startTabIndex.intValue() + 9018);
				}
				public void setText(PlannedUnplannedEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public PlannedUnplannedEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return PlannedUnplannedEnumeration.None;
						case 0: return PlannedUnplannedEnumeration.rdoUnplanned;
						case 1: return PlannedUnplannedEnumeration.rdoPlanned;
					}
					return null;
				}
				public void setValue(PlannedUnplannedEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(PlannedUnplannedEnumeration.None.id);
				}
				public boolean isEnabled(PlannedUnplannedEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(PlannedUnplannedEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(PlannedUnplannedEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(PlannedUnplannedEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class PlannedUnplannedEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static PlannedUnplannedEnumeration None = new PlannedUnplannedEnumeration(-1);
				public static PlannedUnplannedEnumeration rdoUnplanned = new PlannedUnplannedEnumeration(0);
				public static PlannedUnplannedEnumeration rdoPlanned = new PlannedUnplannedEnumeration(1);
				private PlannedUnplannedEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((PlannedUnplannedEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 816, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Planned Procedure", new Integer(1), ""}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 416, 816, 100, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Actual Procedure performed", new Integer(1), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 560, 368, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccCirculatingNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper5.getSize(), instance1, startTabIndex.intValue() + 7015, skipContextValidation);
				//ims.framework.Control m_ccCirculatingNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(560), new Integer(368), new Integer(264), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 7015), m_ccCirculatingNurseForm, instance1 } );
				ims.framework.Control m_ccCirculatingNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 7015), m_ccCirculatingNurseForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccCirculatingNurseControl);
				Menu[] menus1 = m_ccCirculatingNurseForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 128, 368, 280, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccScrubNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper6.getSize(), instance2, startTabIndex.intValue() + 6014, skipContextValidation);
				//ims.framework.Control m_ccScrubNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(128), new Integer(368), new Integer(280), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 6014), m_ccScrubNurseForm, instance2 } );
				ims.framework.Control m_ccScrubNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 6014), m_ccScrubNurseForm, instance2, Boolean.FALSE } );
				super.addControl(m_ccScrubNurseControl);
				Menu[] menus2 = m_ccScrubNurseForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
				ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 560, 344, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccODAODPForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper7.getSize(), instance3, startTabIndex.intValue() + 5013, skipContextValidation);
				//ims.framework.Control m_ccODAODPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(560), new Integer(344), new Integer(264), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 5013), m_ccODAODPForm, instance3 } );
				ims.framework.Control m_ccODAODPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 5013), m_ccODAODPForm, instance3, Boolean.FALSE } );
				super.addControl(m_ccODAODPControl);
				Menu[] menus3 = m_ccODAODPForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus3.length; x++)
				{
					form.registerMenu(menus3[x]);
				}
				ims.framework.CustomComponent instance4 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 128, 344, 280, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccAnaesthetistForm = loader.loadComponent(102256, appForm, startControlID * 10 + 4000, anchoringHelper8.getSize(), instance4, startTabIndex.intValue() + 4012, skipContextValidation);
				//ims.framework.Control m_ccAnaesthetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(128), new Integer(344), new Integer(280), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4012), m_ccAnaesthetistForm, instance4 } );
				ims.framework.Control m_ccAnaesthetistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4012), m_ccAnaesthetistForm, instance4, Boolean.FALSE } );
				super.addControl(m_ccAnaesthetistControl);
				Menu[] menus4 = m_ccAnaesthetistForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus4.length; x++)
				{
					form.registerMenu(menus4[x]);
				}
				ims.framework.CustomComponent instance5 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 560, 320, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccSurgeonAssistantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 5000, anchoringHelper9.getSize(), instance5, startTabIndex.intValue() + 3011, skipContextValidation);
				//ims.framework.Control m_ccSurgeonAssistantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(560), new Integer(320), new Integer(264), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3011), m_ccSurgeonAssistantForm, instance5 } );
				ims.framework.Control m_ccSurgeonAssistantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3011), m_ccSurgeonAssistantForm, instance5, Boolean.FALSE } );
				super.addControl(m_ccSurgeonAssistantControl);
				Menu[] menus5 = m_ccSurgeonAssistantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus5.length; x++)
				{
					form.registerMenu(menus5[x]);
				}
				ims.framework.CustomComponent instance6 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 128, 320, 280, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccSurgeonForm = loader.loadComponent(102256, appForm, startControlID * 10 + 6000, anchoringHelper10.getSize(), instance6, startTabIndex.intValue() + 2010, skipContextValidation);
				//ims.framework.Control m_ccSurgeonControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(128), new Integer(320), new Integer(280), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2010), m_ccSurgeonForm, instance6 } );
				ims.framework.Control m_ccSurgeonControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2010), m_ccSurgeonForm, instance6, Boolean.FALSE } );
				super.addControl(m_ccSurgeonControl);
				Menu[] menus6 = m_ccSurgeonForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus6.length; x++)
				{
					form.registerMenu(menus6[x]);
				}
				ims.framework.CustomComponent instance7 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 400, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccAuthForm = loader.loadComponent(102228, appForm, startControlID * 10 + 7000, anchoringHelper11.getSize(), instance7, startTabIndex.intValue() + 1, skipContextValidation);
				//ims.framework.Control m_ccAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(8), new Integer(16), new Integer(400), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_ccAuthForm, instance7 } );
				ims.framework.Control m_ccAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_ccAuthForm, instance7, Boolean.TRUE } );
				super.addControl(m_ccAuthControl);
				Menu[] menus7 = m_ccAuthForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus7.length; x++)
				{
					form.registerMenu(menus7[x]);
				}
				ims.framework.CustomComponent instance8 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 808, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccPlannedProcedureForm = loader.loadComponent(123133, appForm, startControlID * 10 + 8000, anchoringHelper12.getSize(), instance8, startTabIndex.intValue() + 1002, skipContextValidation);
				//ims.framework.Control m_ccPlannedProcedureControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(16), new Integer(112), new Integer(808), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1002), m_ccPlannedProcedureForm, instance8 } );
				ims.framework.Control m_ccPlannedProcedureControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1017),  new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1002), m_ccPlannedProcedureForm, instance8, Boolean.FALSE } );
				super.addControl(m_ccPlannedProcedureControl);
				Menu[] menus8 = m_ccPlannedProcedureForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus8.length; x++)
				{
					form.registerMenu(menus8[x]);
				}
				ims.framework.CustomComponent instance9 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 448, 808, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccActualProcedurePerformedForm = loader.loadComponent(123133, appForm, startControlID * 10 + 9000, anchoringHelper13.getSize(), instance9, startTabIndex.intValue() + 8017, skipContextValidation);
				//ims.framework.Control m_ccActualProcedurePerformedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(16), new Integer(448), new Integer(808), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 8017), m_ccActualProcedurePerformedForm, instance9 } );
				ims.framework.Control m_ccActualProcedurePerformedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019),  new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 8017), m_ccActualProcedurePerformedForm, instance9, Boolean.TRUE } );
				super.addControl(m_ccActualProcedurePerformedControl);
				Menu[] menus9 = m_ccActualProcedurePerformedForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus9.length; x++)
				{
					form.registerMenu(menus9[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 24, 302, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 24, 287, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 416, 242, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Out Theatre Time :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 24, 266, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery start: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 416, 266, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgery finish :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 24, 322, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgeon :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 416, 322, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgeon Assistant : ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 416, 394, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 24, 346, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetist :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 416, 346, 139, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ODA/ODP/Anaes Tech :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 416, 370, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Circulating Nurse :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 24, 370, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Scrub Nurse :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 24, 186, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 24, 210, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre No :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 24, 242, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "In Theatre Time :", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 176, 529, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 9032), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 560, 392, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 8016), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 128, 184, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 2003), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 128, 288, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 2009), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 560, 240, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 2006), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 128, 240, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 2005), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 560, 264, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 128, 264, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 2007), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 128, 208, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTheatreTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 2004), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTheatreTemp);
				cmbTheatreComboBox cmbTheatre = (cmbTheatreComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTheatreComboBox.class, m_cmbTheatreTemp);
				super.addComboBox(cmbTheatre);
		
				// RadioButton Controls
				RadioButton tmpPlannedUnplanned = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpPlannedUnplanned);
				PlannedUnplannedRadioButton PlannedUnplanned = (PlannedUnplannedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(PlannedUnplannedRadioButton.class, tmpPlannedUnplanned);
				PlannedUnplanned.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(PlannedUnplanned);
			}

			public ims.core.forms.mosquery.IComponent ccCirculatingNurse()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setccCirculatingNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setccCirculatingNurseVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isccCirculatingNurseVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setccCirculatingNurseEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isccCirculatingNurseEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccScrubNurse()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(3)).getLogic();
			}
			public void setccScrubNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(3)).setValueChangedEvent(delegate);
			}
			public void setccScrubNurseVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(3)).setVisible(value);
			}
			public boolean isccScrubNurseVisible()
			{
				return ((ims.framework.Control)super.getControl(3)).isVisible();
			}
			public void setccScrubNurseEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(3)).setEnabled(value);
			}
			public boolean isccScrubNurseEnabled()
			{
				return ((ims.framework.Control)super.getControl(3)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccODAODP()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(4)).getLogic();
			}
			public void setccODAODPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(4)).setValueChangedEvent(delegate);
			}
			public void setccODAODPVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(4)).setVisible(value);
			}
			public boolean isccODAODPVisible()
			{
				return ((ims.framework.Control)super.getControl(4)).isVisible();
			}
			public void setccODAODPEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(4)).setEnabled(value);
			}
			public boolean isccODAODPEnabled()
			{
				return ((ims.framework.Control)super.getControl(4)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccAnaesthetist()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(5)).getLogic();
			}
			public void setccAnaesthetistValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(5)).setValueChangedEvent(delegate);
			}
			public void setccAnaesthetistVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(5)).setVisible(value);
			}
			public boolean isccAnaesthetistVisible()
			{
				return ((ims.framework.Control)super.getControl(5)).isVisible();
			}
			public void setccAnaesthetistEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(5)).setEnabled(value);
			}
			public boolean isccAnaesthetistEnabled()
			{
				return ((ims.framework.Control)super.getControl(5)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccSurgeonAssistant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(6)).getLogic();
			}
			public void setccSurgeonAssistantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(6)).setValueChangedEvent(delegate);
			}
			public void setccSurgeonAssistantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(6)).setVisible(value);
			}
			public boolean isccSurgeonAssistantVisible()
			{
				return ((ims.framework.Control)super.getControl(6)).isVisible();
			}
			public void setccSurgeonAssistantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(6)).setEnabled(value);
			}
			public boolean isccSurgeonAssistantEnabled()
			{
				return ((ims.framework.Control)super.getControl(6)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccSurgeon()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(7)).getLogic();
			}
			public void setccSurgeonValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(7)).setValueChangedEvent(delegate);
			}
			public void setccSurgeonVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(7)).setVisible(value);
			}
			public boolean isccSurgeonVisible()
			{
				return ((ims.framework.Control)super.getControl(7)).isVisible();
			}
			public void setccSurgeonEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(7)).setEnabled(value);
			}
			public boolean isccSurgeonEnabled()
			{
				return ((ims.framework.Control)super.getControl(7)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent ccAuth()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(8)).getLogic();
			}
			public void setccAuthValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(8)).setValueChangedEvent(delegate);
			}
			public void setccAuthVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(8)).setVisible(value);
			}
			public boolean isccAuthVisible()
			{
				return ((ims.framework.Control)super.getControl(8)).isVisible();
			}
			public void setccAuthEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(8)).setEnabled(value);
			}
			public boolean isccAuthEnabled()
			{
				return ((ims.framework.Control)super.getControl(8)).isEnabled();
			}
			public ims.clinical.forms.clinicalcoding.IComponent ccPlannedProcedure()
			{
				return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(9)).getLogic();
			}
			public void setccPlannedProcedureValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(9)).setValueChangedEvent(delegate);
			}
			public void setccPlannedProcedureVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(9)).setVisible(value);
			}
			public boolean isccPlannedProcedureVisible()
			{
				return ((ims.framework.Control)super.getControl(9)).isVisible();
			}
			public void setccPlannedProcedureEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(9)).setEnabled(value);
			}
			public boolean isccPlannedProcedureEnabled()
			{
				return ((ims.framework.Control)super.getControl(9)).isEnabled();
			}
			public ims.clinical.forms.clinicalcoding.IComponent ccActualProcedurePerformed()
			{
				return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(10)).getLogic();
			}
			public void setccActualProcedurePerformedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(10)).setValueChangedEvent(delegate);
			}
			public void setccActualProcedurePerformedVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(10)).setVisible(value);
			}
			public boolean isccActualProcedurePerformedVisible()
			{
				return ((ims.framework.Control)super.getControl(10)).isVisible();
			}
			public void setccActualProcedurePerformedEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(10)).setEnabled(value);
			}
			public boolean isccActualProcedurePerformedEnabled()
			{
				return ((ims.framework.Control)super.getControl(10)).isEnabled();
			}
			public TextBox txtRdoButton()
			{
				return (TextBox)super.getControl(26);
			}
			public TextBox txtOther()
			{
				return (TextBox)super.getControl(27);
			}
			public DateControl dteDate()
			{
				return (DateControl)super.getControl(28);
			}
			public DateTimeControl dtimAnaesthetistS()
			{
				return (DateTimeControl)super.getControl(29);
			}
			public DateTimeControl dtimOutTheatreTime()
			{
				return (DateTimeControl)super.getControl(30);
			}
			public DateTimeControl dtimInTheatreTime()
			{
				return (DateTimeControl)super.getControl(31);
			}
			public DateTimeControl dtimSurgeryFinish()
			{
				return (DateTimeControl)super.getControl(32);
			}
			public DateTimeControl dtimSurgeryStart()
			{
				return (DateTimeControl)super.getControl(33);
			}
			public cmbTheatreComboBox cmbTheatre()
			{
				return (cmbTheatreComboBox)super.getComboBox(0);
			}
			public PlannedUnplannedRadioButton PlannedUnplanned()
			{
				return (PlannedUnplannedRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdDressingsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDressingsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDressingsReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDressingsReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDressingsOpened()
				{
					super.row.showOpened(0);
				}
				public String getColDressings()
				{
					return (String)super.row.get(0);
				}
				public void setColDressings(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDressingsTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.clinical.vo.lookups.CataractDressings getValue()
				{
					return (ims.clinical.vo.lookups.CataractDressings)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.CataractDressings value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDressingsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDressingsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDressingsRow get(int index)
				{
					return new grdDressingsRow(super.collection.get(index));
				}
				public grdDressingsRow newRow()
				{
					return new grdDressingsRow(super.collection.newRow());
				}
				public grdDressingsRow newRow(boolean autoSelect)
				{
					return new grdDressingsRow(super.collection.newRow(autoSelect));
				}
				public grdDressingsRow newRowAt(int index)
				{
					return new grdDressingsRow(super.collection.newRowAt(index));
				}
				public grdDressingsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDressingsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDressingsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.clinical.vo.lookups.CataractDressings[] getValues()
				{
					ims.clinical.vo.lookups.CataractDressings[] listOfValues = new ims.clinical.vo.lookups.CataractDressings[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.clinical.vo.lookups.CataractDressings getValue()
				{
					return (ims.clinical.vo.lookups.CataractDressings)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.CataractDressings value)
				{
					super.grid.setValue(value);
				}
				public grdDressingsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDressingsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDressingsRowCollection getRows()
				{
					return new grdDressingsRowCollection(super.grid.getRows());
				}
				public grdDressingsRow getRowByValue(ims.clinical.vo.lookups.CataractDressings value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDressingsRow(row);
				}
				public void setColDressingsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDressingsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
		
			public static class grpYesNoRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 248, 527, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					control.addButton(0, anchoringHelper38.getX(), anchoringHelper38.getY(), anchoringHelper38.getWidth(), "Yes", startTabIndex.intValue() + 9025);
					RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 288, 527, 40, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					control.addButton(1, anchoringHelper39.getX(), anchoringHelper39.getY(), anchoringHelper39.getWidth(), "No", startTabIndex.intValue() + 9026);
				}
				public void setText(grpYesNoEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grpYesNoEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grpYesNoEnumeration.None;
						case 0: return grpYesNoEnumeration.rdoYes;
						case 1: return grpYesNoEnumeration.rdoNo;
					}
					return null;
				}
				public void setValue(grpYesNoEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grpYesNoEnumeration.None.id);
				}
				public boolean isEnabled(grpYesNoEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grpYesNoEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grpYesNoEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grpYesNoEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grpYesNoEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grpYesNoEnumeration None = new grpYesNoEnumeration(-1);
				public static grpYesNoEnumeration rdoYes = new grpYesNoEnumeration(0);
				public static grpYesNoEnumeration rdoNo = new grpYesNoEnumeration(1);
				private grpYesNoEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grpYesNoEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 416, 264, 400, 250, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL,"Dressings", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 264, 400, 250, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,"Local Anaesthetic/Infiltration Used", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 416, 8, 400, 250, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Skin Preperation Used ", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 400, 250, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Medication", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 328, 529, 214, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Was the swab needle count correct ?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 16, 528, 123, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Swab Needle Count :", new Integer(1), null, new Integer(0)}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 424, 288, 384, 204, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdDressingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 9023), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.TRUE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDressingsTemp);
				grdDressingsGrid grdDressings = (grdDressingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDressingsGrid.class, m_grdDressingsTemp);
				grdDressings.addStringColumn("Dressings", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDressings.addBoolColumn("Select", 2, 2, -1, false, false, 0, true);
				super.addGrid(grdDressings);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 294, 384, 204, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 9022), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, contextMenus.Clinical.contextMenuAddRemoveItems3, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 424, 32, 384, 210, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 9021), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, contextMenus.Clinical.contextMenuAddRemoveItems2, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 384, 210, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 9020), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT, contextMenus.Clinical.contextMenuAddRemoveItems1, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 136, 526, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 9024), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// RadioButton Controls
				RadioButton tmpgrpYesNo = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE});
				super.addControl(tmpgrpYesNo);
				grpYesNoRadioButton grpYesNo = (grpYesNoRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpYesNoRadioButton.class, tmpgrpYesNo);
				grpYesNo.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grpYesNo);
			}

			public grdDressingsGrid grdDressings()
			{
				return (grdDressingsGrid)super.getGrid(0);
			}
			public DynamicGrid dyngrdAnaesthetic()
			{
				return (DynamicGrid)super.getControl(7);
			}
			public DynamicGrid dyngrdSkinPreperation()
			{
				return (DynamicGrid)super.getControl(8);
			}
			public DynamicGrid dyngrdMedication()
			{
				return (DynamicGrid)super.getControl(9);
			}
			public IntBox intSwapCount()
			{
				return (IntBox)super.getControl(10);
			}
			public grpYesNoRadioButton grpYesNo()
			{
				return (grpYesNoRadioButton)super.getRadioButton(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCareRecord = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Intra Operative Care Record", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCareRecordContainer m_tabCareRecordContainer = (tabCareRecordContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCareRecordContainer.class, m_tabCareRecord, factory);
			super.addContainer(m_tabCareRecord, m_tabCareRecordContainer);
			ims.framework.utils.SizeInfo m_tabCareRecordDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabCareRecordRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper51.getWidth(), anchoringHelper51.getHeight());
			m_tabCareRecordContainer.setContext(form, appForm, m_tabCareRecord, loader, form_images_local, contextMenus, startControlID, m_tabCareRecordDesignSize, m_tabCareRecordRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Intra Operative Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
			super.addContainer(m_tabDetails, m_tabDetailsContainer);
			ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper52.getWidth(), anchoringHelper52.getHeight());
			m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, form_images_local, contextMenus, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabCareRecord().setVisible(false);
			tabDetails().setVisible(false);
		}
		public void settabCareRecordEnabled(boolean value)
		{
			tabCareRecord().setEnabled(value);
		}
		public void settabDetailsEnabled(boolean value)
		{
			tabDetails().setEnabled(value);
		}
		public void showtabCareRecord()
		{
			tabDetails().setVisible(false);
			tabCareRecord().setVisible(true);
		}
		public void showtabDetails()
		{
			tabCareRecord().setVisible(false);
			tabDetails().setVisible(true);
		}

		public tabCareRecordContainer tabCareRecord()
		{
			return (tabCareRecordContainer)super.layers.get(0);
		}
		public tabDetailsContainer tabDetails()
		{
			return (tabDetailsContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
		if(new ims.framework.ContextVariable("Clinical.PatientProcedureForIntraOperativeDialog", "_cv_Clinical.PatientProcedureForIntraOperativeDialog").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Clinical.PatientProcedureForIntraOperativeDialog' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuAddRemoveItems3 = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuAddRemoveItems3ADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Local Anesthetic / Infiltration", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuAddRemoveItems3.add(contextMenus.Clinical.contextMenuAddRemoveItems3ADDItem);
		contextMenus.Clinical.contextMenuAddRemoveItems3REMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove Local Anesthetic / Infiltration", true, false, new Integer(102300), true, false);
		contextMenus.Clinical.contextMenuAddRemoveItems3.add(contextMenus.Clinical.contextMenuAddRemoveItems3REMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuAddRemoveItems3);
		contextMenus.Clinical.contextMenuAddRemoveItems2 = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuAddRemoveItems2ADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Skin Preparation", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuAddRemoveItems2.add(contextMenus.Clinical.contextMenuAddRemoveItems2ADDItem);
		contextMenus.Clinical.contextMenuAddRemoveItems2REMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove Skin Preparation", true, false, new Integer(102300), true, false);
		contextMenus.Clinical.contextMenuAddRemoveItems2.add(contextMenus.Clinical.contextMenuAddRemoveItems2REMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuAddRemoveItems2);
		contextMenus.Clinical.contextMenuAddRemoveItems1 = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Clinical.contextMenuAddRemoveItems1ADDItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Medication", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuAddRemoveItems1.add(contextMenus.Clinical.contextMenuAddRemoveItems1ADDItem);
		contextMenus.Clinical.contextMenuAddRemoveItems1REMOVEItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove Medication", true, false, new Integer(102300), true, false);
		contextMenus.Clinical.contextMenuAddRemoveItems1.add(contextMenus.Clinical.contextMenuAddRemoveItems1REMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuAddRemoveItems1);


		// Layer Clasess
		lyrMainLayer m_lyrMainLayer = (lyrMainLayer)LayerFlyweightFactory.getInstance().createLayer(lyrMainLayer.class, this, factory);
		super.addLayer(m_lyrMainLayer);
		m_lyrMainLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 9029), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 9027), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 9031), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 9030), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrMainLayer lyrMain()
	{
		return (lyrMainLayer)super.getLayer(0);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(2);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Clinical = new ClinicalForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				TheatreList = new LocalFormName(134154);
			}
			public final FormName TheatreList;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				CataractIntraOperativeCareRecordDialog = new LocalFormName(123168);
			}
			public final FormName CataractIntraOperativeCareRecordDialog;
		}

		public RefManForms RefMan;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Clinical = new ClinicalImages();
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				Action_selected = new ImageHelper(123105, "Images/Clinical/action_24x24.png", new Integer(24), new Integer(24));
				Action_unselected = new ImageHelper(123108, "Images/Clinical/action_unselected_24x24.png", new Integer(24), new Integer(24));
				Medication = new ImageHelper(123111, "Images/Clinical/medication_24x24.png", new Integer(24), new Integer(24));
				Observations = new ImageHelper(123110, "Images/Clinical/observations_24x24.png", new Integer(24), new Integer(24));
				Patient_details = new ImageHelper(123112, "Images/Clinical/patient_details_24x24.png", new Integer(24), new Integer(24));
				Phases = new ImageHelper(123107, "Images/Clinical/phases_24x24.png", new Integer(24), new Integer(24));
				Stage = new ImageHelper(123106, "Images/Clinical/stage_24x24.png", new Integer(24), new Integer(24));
				Stages = new ImageHelper(123109, "Images/Clinical/stages_24x24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Action_selected;
			public final ims.framework.utils.Image Action_unselected;
			public final ims.framework.utils.Image Medication;
			public final ims.framework.utils.Image Observations;
			public final ims.framework.utils.Image Patient_details;
			public final ims.framework.utils.Image Phases;
			public final ims.framework.utils.Image Stage;
			public final ims.framework.utils.Image Stages;
		}
		public final ClinicalImages Clinical;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentRecord = new ims.framework.ContextVariable("CurrentRecord", prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier + "");
			cxl_PlannedPatientProcedure = new ims.framework.ContextVariable("PlannedPatientProcedure", prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier + "");
			cxl_AllMedications = new ims.framework.ContextVariable("AllMedications", prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__AllMedications_" + componentIdentifier + "");
			cxl_AllSkinPreparations = new ims.framework.ContextVariable("AllSkinPreparations", prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__AllSkinPreparations_" + componentIdentifier + "");
			cxl_AllAnaesthetics = new ims.framework.ContextVariable("AllAnaesthetics", prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__AllAnaesthetics_" + componentIdentifier + "");
		}
		
		public boolean getCurrentRecordIsNotNull()
		{
			return !cxl_CurrentRecord.getValueIsNull(context);
		}
		public ims.clinical.vo.IntraOperativeCareRecordVo getCurrentRecord()
		{
			return (ims.clinical.vo.IntraOperativeCareRecordVo)cxl_CurrentRecord.getValue(context);
		}
		public void setCurrentRecord(ims.clinical.vo.IntraOperativeCareRecordVo value)
		{
			cxl_CurrentRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentRecord = null;
		public boolean getPlannedPatientProcedureIsNotNull()
		{
			return !cxl_PlannedPatientProcedure.getValueIsNull(context);
		}
		public ims.core.vo.PatientProcedureLiteVo getPlannedPatientProcedure()
		{
			return (ims.core.vo.PatientProcedureLiteVo)cxl_PlannedPatientProcedure.getValue(context);
		}
		public void setPlannedPatientProcedure(ims.core.vo.PatientProcedureLiteVo value)
		{
			cxl_PlannedPatientProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PlannedPatientProcedure = null;
		public boolean getAllMedicationsIsNotNull()
		{
			return !cxl_AllMedications.getValueIsNull(context);
		}
		public ims.core.vo.MedicationLiteVoCollection getAllMedications()
		{
			return (ims.core.vo.MedicationLiteVoCollection)cxl_AllMedications.getValue(context);
		}
		public void setAllMedications(ims.core.vo.MedicationLiteVoCollection value)
		{
			cxl_AllMedications.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllMedications = null;
		public boolean getAllSkinPreparationsIsNotNull()
		{
			return !cxl_AllSkinPreparations.getValueIsNull(context);
		}
		public ims.clinical.vo.lookups.SkinPreparationusedCollection getAllSkinPreparations()
		{
			return (ims.clinical.vo.lookups.SkinPreparationusedCollection)cxl_AllSkinPreparations.getValue(context);
		}
		public void setAllSkinPreparations(ims.clinical.vo.lookups.SkinPreparationusedCollection value)
		{
			cxl_AllSkinPreparations.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllSkinPreparations = null;
		public boolean getAllAnaestheticsIsNotNull()
		{
			return !cxl_AllAnaesthetics.getValueIsNull(context);
		}
		public ims.clinical.vo.lookups.LocalAnaestheticCollection getAllAnaesthetics()
		{
			return (ims.clinical.vo.lookups.LocalAnaestheticCollection)cxl_AllAnaesthetics.getValue(context);
		}
		public void setAllAnaesthetics(ims.clinical.vo.lookups.LocalAnaestheticCollection value)
		{
			cxl_AllAnaesthetics.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllAnaesthetics = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class AddRemoveItems3 implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int REMOVE = 2;
			}
			public void disableAllAddRemoveItems3MenuItems()
			{
				this.contextMenuAddRemoveItems3ADDItem.setEnabled(false);
				this.contextMenuAddRemoveItems3REMOVEItem.setEnabled(false);
			}
			public void hideAllAddRemoveItems3MenuItems()
			{
				this.contextMenuAddRemoveItems3ADDItem.setVisible(false);
				this.contextMenuAddRemoveItems3REMOVEItem.setVisible(false);
			}
			private Menu contextMenuAddRemoveItems3;
			public ReadOnlyMenuItem getAddRemoveItems3ADDItem()
			{
				return this.contextMenuAddRemoveItems3ADDItem;
			}
			private MenuItem contextMenuAddRemoveItems3ADDItem;
			public ReadOnlyMenuItem getAddRemoveItems3REMOVEItem()
			{
				return this.contextMenuAddRemoveItems3REMOVEItem;
			}
			private MenuItem contextMenuAddRemoveItems3REMOVEItem;
			public final class AddRemoveItems2 implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 3;
				public static final int REMOVE = 4;
			}
			public void disableAllAddRemoveItems2MenuItems()
			{
				this.contextMenuAddRemoveItems2ADDItem.setEnabled(false);
				this.contextMenuAddRemoveItems2REMOVEItem.setEnabled(false);
			}
			public void hideAllAddRemoveItems2MenuItems()
			{
				this.contextMenuAddRemoveItems2ADDItem.setVisible(false);
				this.contextMenuAddRemoveItems2REMOVEItem.setVisible(false);
			}
			private Menu contextMenuAddRemoveItems2;
			public ReadOnlyMenuItem getAddRemoveItems2ADDItem()
			{
				return this.contextMenuAddRemoveItems2ADDItem;
			}
			private MenuItem contextMenuAddRemoveItems2ADDItem;
			public ReadOnlyMenuItem getAddRemoveItems2REMOVEItem()
			{
				return this.contextMenuAddRemoveItems2REMOVEItem;
			}
			private MenuItem contextMenuAddRemoveItems2REMOVEItem;
			public final class AddRemoveItems1 implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 5;
				public static final int REMOVE = 6;
			}
			public void disableAllAddRemoveItems1MenuItems()
			{
				this.contextMenuAddRemoveItems1ADDItem.setEnabled(false);
				this.contextMenuAddRemoveItems1REMOVEItem.setEnabled(false);
			}
			public void hideAllAddRemoveItems1MenuItems()
			{
				this.contextMenuAddRemoveItems1ADDItem.setVisible(false);
				this.contextMenuAddRemoveItems1REMOVEItem.setVisible(false);
			}
			private Menu contextMenuAddRemoveItems1;
			public MenuItem getAddRemoveItems1ADDItem()
			{
				return this.contextMenuAddRemoveItems1ADDItem;
			}
			private MenuItem contextMenuAddRemoveItems1ADDItem;
			public ReadOnlyMenuItem getAddRemoveItems1REMOVEItem()
			{
				return this.contextMenuAddRemoveItems1REMOVEItem;
			}
			private MenuItem contextMenuAddRemoveItems1REMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[130];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCDATE", "ProcDate");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SITETEXT", "SiteText");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCLATERALITY", "ProcLaterality");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCTIME", "ProcTime");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-NOTES", "Notes");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREURGENCY", "ProcedureUrgency");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-DATEPLANNED", "DatePlanned");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PLANNEDPROC", "PlannedProc");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCSITE", "ProcSite");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PEFORMEDBY", "PeformedBy");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREINTENT", "ProcedureIntent");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-LOCATION", "Location");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SPECIALTY", "Specialty");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CONFIRMEDSTATUS", "ConfirmedStatus");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-EXCLUDEFROMOTHERS", "ExcludeFromOthers");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCLOCATION", "ProcLocation");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CANCELLEDREASON", "CancelledReason");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SURGEONSGRADE", "SurgeonsGrade");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCENDDATE", "ProcEndDate");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCENDTIME", "ProcEndTime");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SIGNIFPROC", "SignifProc");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-ID", "ID_IntraOperativeCareRecord");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-CARECONTEXT", "CareContext");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-PROCEDUREDATE", "ProcedureDate");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-INTHEATRETIME", "InTheatreTime");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-SURGERYSTARTTIME", "SurgeryStartTime");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-SURGERYENDTIME", "SurgeryEndTime");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-ANAESTHETISTSTARTTIME", "AnaesthetistStartTime");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-OTHER", "Other");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-WASPLANNEDPROCEDURE", "WasPlannedProcedure");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-WASUNPLANNEDPROCEDURE", "WasUnplannedProcedure");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-ADMISSIONTYPE", "AdmissionType");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-READMISSIONTYPE", "ReadmissionType");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-PASEVENT", "PasEvent");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-INTOPACUTIME", "IntoPacuTime");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-TIMEINTORECOVERY", "TimeIntoRecovery");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-TIMEOUTOFRECOVERY", "TimeOutOfRecovery");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1072100081-ANAESTHETICUSED", "AnaestheticUsed");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-ID", "ID_PatientProcedure");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-PROCDATE", "ProcDate");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-SITETEXT", "SiteText");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-PROCLATERALITY", "ProcLaterality");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-PROCTIME", "ProcTime");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.CataractIntraOperativeCareRecord.__internal_x_context__PlannedPatientProcedure_" + componentIdentifier, "BO-1003100017-ISPRIMARY", "IsPrimary");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
