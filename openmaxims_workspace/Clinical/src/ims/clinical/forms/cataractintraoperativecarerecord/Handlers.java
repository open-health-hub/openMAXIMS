//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.cataractintraoperativecarerecord;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrMainTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onGrdDressingsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDressingsSelectionCleared() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDressingsGridComboBoxSelectionChanged(int column, GenForm.lyrMainLayer.tabDetailsContainer.grdDressingsRow row, Object value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdAnaestheticCellValueChanged(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onDyngrdAnaestheticRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdAnaestheticRowSelectionCleared() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdSkinPreperationCellValueChanged(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onDyngrdSkinPreperationRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdSkinPreperationRowSelectionCleared() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdMedicationCellValueChanged(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onDyngrdMedicationRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdMedicationRowSelectionCleared() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen(args);
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.lyrMain().tabCareRecord().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrMaintabCareRecordActivated();
			}
		});
		this.form.lyrMain().tabDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrMaintabDetailsActivated();
			}
		});
		this.form.lyrMain().tabDetails().grdDressings().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDressingsSelectionChanged();
			}
		});
		this.form.lyrMain().tabDetails().grdDressings().setSelectionClearedEvent(new SelectionCleared()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDressingsSelectionCleared();
			}
		});
		this.form.lyrMain().tabDetails().grdDressings().setGridComboBoxSelectionChangedEvent(new GridComboBoxSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, Object value) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDressingsGridComboBoxSelectionChanged(column, new GenForm.lyrMainLayer.tabDetailsContainer.grdDressingsRow(row), value);
			}
		});
		this.form.lyrMain().tabDetails().dyngrdAnaesthetic().setDynamicGridCellValueChangedEvent(new DynamicGridCellValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdAnaestheticCellValueChanged(cell);
			}
		});
		this.form.lyrMain().tabDetails().dyngrdAnaesthetic().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdAnaestheticRowSelectionChanged(row);
			}
		});
		this.form.lyrMain().tabDetails().dyngrdAnaesthetic().setDynamicGridRowSelectionClearedEvent(new DynamicGridRowSelectionCleared()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdAnaestheticRowSelectionCleared();
			}
		});
		this.form.lyrMain().tabDetails().dyngrdSkinPreperation().setDynamicGridCellValueChangedEvent(new DynamicGridCellValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdSkinPreperationCellValueChanged(cell);
			}
		});
		this.form.lyrMain().tabDetails().dyngrdSkinPreperation().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdSkinPreperationRowSelectionChanged(row);
			}
		});
		this.form.lyrMain().tabDetails().dyngrdSkinPreperation().setDynamicGridRowSelectionClearedEvent(new DynamicGridRowSelectionCleared()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdSkinPreperationRowSelectionCleared();
			}
		});
		this.form.lyrMain().tabDetails().dyngrdMedication().setDynamicGridCellValueChangedEvent(new DynamicGridCellValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdMedicationCellValueChanged(cell);
			}
		});
		this.form.lyrMain().tabDetails().dyngrdMedication().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdMedicationRowSelectionChanged(row);
			}
		});
		this.form.lyrMain().tabDetails().dyngrdMedication().setDynamicGridRowSelectionClearedEvent(new DynamicGridRowSelectionCleared()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdMedicationRowSelectionCleared();
			}
		});
		this.form.getContextMenus().Clinical.getAddRemoveItems3ADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems3.ADD, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAddRemoveItems3REMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems3.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAddRemoveItems2ADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems2.ADD, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAddRemoveItems2REMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems2.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAddRemoveItems1ADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems1.ADD, sender);
			}
		});
		this.form.getContextMenus().Clinical.getAddRemoveItems1REMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems1.REMOVE, sender);
			}
		});
	}
	private void onlyrMaintabCareRecordActivated()
	{
		this.form.lyrMain().showtabCareRecord();
		onlyrMainTabChanged(this.form.lyrMain().tabCareRecord());
	}
	private void onlyrMaintabDetailsActivated()
	{
		this.form.lyrMain().showtabDetails();
		onlyrMainTabChanged(this.form.lyrMain().tabDetails());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
