//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.70 build 3530.26969)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.cataractintraoperativecarerecord;

import ims.clinical.forms.cataractintraoperativecarerecord.GenForm.lyrMainLayer.tabDetailsContainer;
import ims.clinical.forms.cataractintraoperativecarerecord.GenForm.lyrMainLayer.tabCareRecordContainer.PlannedUnplannedEnumeration;
import ims.clinical.forms.cataractintraoperativecarerecord.GenForm.lyrMainLayer.tabDetailsContainer.grdDressingsRow;
import ims.clinical.forms.cataractintraoperativecarerecord.GenForm.lyrMainLayer.tabDetailsContainer.grpYesNoEnumeration;
import ims.clinical.vo.CataractIntraOperativeDetailVo;
import ims.clinical.vo.IntraOperativeCareRecordVo;
import ims.clinical.vo.LocalAnaestheticAdministeredVo;
import ims.clinical.vo.LocalAnaestheticAdministeredVoCollection;
import ims.clinical.vo.SkinPreperationVo;
import ims.clinical.vo.SkinPreperationVoCollection;
import ims.clinical.vo.lookups.CataractDressingsCollection;
import ims.clinical.vo.lookups.CodingItemType;
import ims.clinical.vo.lookups.LocalAnaesthetic;
import ims.clinical.vo.lookups.LocalAnaestheticCollection;
import ims.clinical.vo.lookups.LookupHelper;
import ims.clinical.vo.lookups.PatientProcedureOutcome;
import ims.clinical.vo.lookups.SkinPreparationused;
import ims.clinical.vo.lookups.SkinPreparationusedCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.core.domain.impl.ADTImpl;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.MedicationLiteVoCollection;
import ims.core.vo.NurseVo;
import ims.core.vo.PatientMedicationLiteVo;
import ims.core.vo.PatientMedicationLiteVoCollection;
import ims.core.vo.PatientProcedureLiteVo;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.framework.controls.DynamicGridColumnCollection;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.vo.ValueObjectRef;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private final static int COLUMN_MEDICATION = 1, COLUMN_SKINPREPARATION = 1,
			COLUMN_ANAESTHETIC = 1;
	private final static int COLUMN_BATCHNO = 2;
	private final static int COLUMN_EXPIRYDATE = 3;
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
		if (args != null && args.length > 0 && args[0] instanceof FormMode && isCataractIntraOperativeCareRecordDialog())
		{
			newInstance();
			form.setMode((FormMode) args[0]);
		}
	}

	private boolean isCataractIntraOperativeCareRecordDialog()
	{
		if (engine.getFormName().equals(form.getForms().Clinical.CataractIntraOperativeCareRecordDialog))
			return true;

		return false;
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			engine.close(DialogResult.OK);
		}
		else
		{
			open();
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	@Override
	protected void onlyrMainTabChanged(ims.framework.LayerBridge tab)
	{
	// TODO Add your code here.
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{

		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems1.ADD:
				// rebindColMedication();

				// System.out.println(form.lyrMain().tabDetails().grdMedication().ColMedicationComboBox().size());
				// grdMedicationRow nRow =
				// form.lyrMain().tabDetails().grdMedication().getRows().newRow();
				newRowToMedication();
				rebindAllMedications();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems1.REMOVE:

				form.lyrMain().tabDetails().dyngrdMedication().getRows().remove(form.lyrMain().tabDetails().dyngrdMedication().getSelectedRow());
				rebindAllMedications();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems2.ADD:
				newRowToSkinPreparation(null);
				rebindAllSkinPreparation();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems2.REMOVE:
				form.lyrMain().tabDetails().dyngrdSkinPreperation().getRows().remove(form.lyrMain().tabDetails().dyngrdSkinPreperation().getSelectedRow());
				rebindAllSkinPreparation();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems3.ADD:
				newRowToAnaesthetic(null);
				rebindAllAnaesthetic();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.AddRemoveItems3.REMOVE:
				form.lyrMain().tabDetails().dyngrdAnaesthetic().getRows().remove(form.lyrMain().tabDetails().dyngrdAnaesthetic().getSelectedRow());
				rebindAllAnaesthetic();
				break;

		}
		updateControlsState();
	}

	@Override
	protected void onGrdDressingsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onGrdDressingsSelectionCleared() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onGrdDressingsGridComboBoxSelectionChanged(int column, grdDressingsRow row, Object value) throws PresentationLogicException
	{

	}

	@Override
	protected void onDyngrdMedicationCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getColumn().equals(form.lyrMain().tabDetails().dyngrdMedication().getColumns().getByIdentifier(COLUMN_MEDICATION)))
			rebindAllMedications();

	}

	@Override
	protected void onDyngrdMedicationRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onDyngrdMedicationRowSelectionCleared() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onDyngrdAnaestheticCellValueChanged(DynamicGridCell cell)
	{
		rebindAllAnaesthetic();
	}

	@Override
	protected void onDyngrdAnaestheticRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onDyngrdAnaestheticRowSelectionCleared() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onDyngrdSkinPreperationRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onDyngrdSkinPreperationRowSelectionCleared() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onDyngrdSkinPreperationCellValueChanged(DynamicGridCell cell)
	{
		rebindAllSkinPreparation();

	}

	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		form.lyrMain().tabCareRecord().ccActualProcedurePerformed().setCodingItemType(CodingItemType.PROCEDURE);
		form.lyrMain().tabCareRecord().ccActualProcedurePerformed().setHotlist(new Boolean(false));
		form.lyrMain().tabCareRecord().ccActualProcedurePerformed().setIsRequired(true);
		form.lyrMain().tabCareRecord().ccPlannedProcedure().setCodingItemType(CodingItemType.PROCEDURE);
		form.lyrMain().tabCareRecord().ccPlannedProcedure().setHotlist(new Boolean(false));
		form.lyrMain().tabCareRecord().ccPlannedProcedure().setIsRequired(true);

		form.lyrMain().tabCareRecord().ccSurgeon().initialize(MosType.HCP);
		form.lyrMain().tabCareRecord().ccSurgeonAssistant().initialize(MosType.HCP);
		form.lyrMain().tabCareRecord().ccAnaesthetist().initialize(MosType.HCP);
		form.lyrMain().tabCareRecord().ccODAODP().initialize(MosType.HCP);

		form.lyrMain().tabCareRecord().ccScrubNurse().initialize(MosType.HCP, HcpDisType.NURSING);
		form.lyrMain().tabCareRecord().ccCirculatingNurse().initialize(MosType.HCP, HcpDisType.NURSING);

		form.getLocalContext().setAllMedications(domain.listMedicationsForSpeciality(Specialty.CATARACT));
		form.getLocalContext().setAllAnaesthetics(LookupHelper.getLocalAnaesthetic(domain.getLookupService()));
		form.getLocalContext().setAllSkinPreparations(LookupHelper.getSkinPreparationused(domain.getLookupService()));
		initDynGridMedication();
		initDynGridAnaesthetic();
		initDynGridSkinPreparation();

		loadTheatreCombo();
		populateCataractIntraOperativeDetails(null);
		// rebindColMedication();
	}

	public void open() throws PresentationLogicException
	{
		if (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull())
		{
			form.getGlobalContext().Clinical.setPatientProcedureForIntraOperativeDialog(domain.getProcedure(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog()));

			if (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() && form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecordIsNotNull())
			{
				form.getLocalContext().setCurrentRecord(domain.getIntraOperativeCareRecord(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecord()));
			}
		}

		populateInstanceControls(form.getLocalContext().getCurrentRecord());
		form.setMode(FormMode.VIEW);
	}

	private void newInstance()
	{
		form.lyrMain().tabCareRecord().ccAuth().initializeComponent();
		form.lyrMain().tabCareRecord().ccActualProcedurePerformed().setValue(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() ? form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog() : null);
		form.lyrMain().tabCareRecord().ccPlannedProcedure().setValue(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() ? form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog() : null);
		// form.getLocalContext().setPlannedPatientProcedure(
		// domain.getProcedureFromSuitableForSurgery(form.getGlobalContext().Core.getCurrentCareContext()));
		// form.lyrMain().tabCareRecord().ccPlannedProcedure().setValue(form.getLocalContext().getPlannedPatientProcedure());
		form.setMode(FormMode.EDIT);
	}

	private boolean isMedicationInGrid(MedicationLiteVo medication)
	{
		if (medication == null)
			return false;
		DynamicGridRowCollection rows = form.lyrMain().tabDetails().dyngrdMedication().getRows();
		for (int i = 0; i < rows.size(); i++)
		{
			if (medication.equals(rows.get(i).getCellArray()[0].getValue()))
				return true;
		}
		return false;
	}

	private PatientProcedureLiteVo newPatientProcedure(ProcedureLiteVo procedure, String description, CareContextShortVo careContext, AuthoringInformationVo authoringInformation, SourceofInformation sourceOfInformation)
	{
		if (description == null || careContext == null || sourceOfInformation == null)
			return null;

		PatientProcedureLiteVo patientProcedure = new PatientProcedureLiteVo();

		patientProcedure.setProcedure(procedure);
		patientProcedure.setProcedureDescription(description);
		patientProcedure.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		patientProcedure.setCareContext(careContext);
		patientProcedure.setAuthoringInformation(authoringInformation);
		patientProcedure.setInfoSource(sourceOfInformation);
		patientProcedure.setProcedureStatus(PatientProcedureStatus.PLANNED);
		patientProcedure.setProcDate(form.lyrMain().tabCareRecord().dteDate().getValue() != null ? new PartialDate(form.lyrMain().tabCareRecord().dteDate().getValue()) : null);// wdev-8393

		return patientProcedure;
	}

	private boolean save() throws PresentationLogicException
	{
		boolean bSavePerformInstance = false;
		if (form.getLocalContext().getCurrentRecord() == null)
			bSavePerformInstance = true;
		IntraOperativeCareRecordVo record = populateInstanceData(form.getLocalContext().getCurrentRecord());
		InpatientEpisodeVo inPatient = domain.getInpatientRecord(form.getGlobalContext().Core.getPatientShort());
		if (inPatient != null)
		{
			record.setAdmissionType(inPatient.getAdmissionType());
			record.setReadmissionType(inPatient.getReadmissionType());
		}
		String[] errors = record.validate(validateUIRules());
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			form.getLocalContext().setCurrentRecord(domain.save(record));
			//
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		if (bSavePerformInstance)
			savePerformInstance();

		return true;
	}

	private void savePerformInstance()
	{
		PatientProcedureVo voCurrentPatProc = domain.getProcedure(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog());

		if (voCurrentPatProc != null)
		{
			if (voCurrentPatProc.getProcedureStatusIsNotNull() && voCurrentPatProc.getProcedureStatus().equals(PatientProcedureStatus.PERFORMED))
				return;

			PatientProcedureVo voNewPatProc = domain.getProcedure(form.getLocalContext().getCurrentRecord().getActualProcedure());

			voCurrentPatProc.setProcedureOutcome(PatientProcedureOutcome.PERFORMED);

			PatientProcedureRefVo voRefPlannedProc = new PatientProcedureRefVo();
			voRefPlannedProc.setID_PatientProcedure(voCurrentPatProc.getID_PatientProcedure());
			voNewPatProc.setPlannedProc(voRefPlannedProc);

			voNewPatProc.setProcedureStatus(PatientProcedureStatus.PLANNED);
			voNewPatProc.setInfoSource(SourceofInformation.CLINICALCONTACT);
			voNewPatProc.setSignifProc(new Boolean(false));
			voNewPatProc.setProcLaterality(voCurrentPatProc.getProcLaterality());
			voNewPatProc.setSiteText(voCurrentPatProc.getSiteText());
			voNewPatProc.setExcludeFromOthers(voCurrentPatProc.getExcludeFromOthers());

			AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
			voAuthoring.setAuthoringDateTime(new DateTime());
			voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
			voNewPatProc.setAuthoringInformation(voAuthoring);
			voNewPatProc.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voNewPatProc.setProcedureStatus(PatientProcedureStatus.PERFORMED);

			String[] uiErrors = null;

			if (!voNewPatProc.getClinicalContactIsNotNull())
				voNewPatProc.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

			if (!voNewPatProc.getCareContextIsNotNull())
				voNewPatProc.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

			String[] errors = voNewPatProc.validate(uiErrors);
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}

			try
			{
				voNewPatProc = domain.saveProcedure(voNewPatProc, form.getGlobalContext().Core.getPatientShort());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
		}
	}

	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();

		if (form.lyrMain().tabCareRecord().dtimInTheatreTime().getValue() != null && form.lyrMain().tabCareRecord().dtimOutTheatreTime().getValue() != null && form.lyrMain().tabCareRecord().dtimInTheatreTime().getValue().isGreaterThan(form.lyrMain().tabCareRecord().dtimOutTheatreTime().getValue()))
		{
			uiErrors.add("In Theatre Time can not be set after Out Theatre Time.");
		}

		if (form.lyrMain().tabCareRecord().dtimSurgeryStart().getValue() != null && form.lyrMain().tabCareRecord().dtimSurgeryFinish().getValue() != null && form.lyrMain().tabCareRecord().dtimSurgeryStart().getValue().isGreaterThan(form.lyrMain().tabCareRecord().dtimSurgeryFinish().getValue()))
		{
			uiErrors.add("Surgery start can not be set after Surgery finish.");
		}

		if (!(form.lyrMain().tabCareRecord().PlannedUnplanned().getValue().equals(PlannedUnplannedEnumeration.rdoPlanned) || form.lyrMain().tabCareRecord().PlannedUnplanned().getValue().equals(PlannedUnplannedEnumeration.rdoUnplanned)))
		{
			uiErrors.add("Please specify if  the actual procedure is planned or unplanned.");
		}
		DynamicGridRowCollection rows = form.lyrMain().tabDetails().dyngrdMedication().getRows();
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridCell[] cellArray = rows.get(i).getCellArray();
			if (!(cellArray[0].getValue() == null && cellArray[1].getValue() == null && cellArray[2].getValue() == null))
			{
				if (cellArray[0].getValue() == null)
				{
					uiErrors.add("Medication is mandatory");
					break;
				}
			}
		}

		// verify if expiry date is in the future
		boolean foundBadExpiry = false;
		rows = form.lyrMain().tabDetails().dyngrdMedication().getRows();
		foundBadExpiry = verifyDateinRows(uiErrors, rows, foundBadExpiry);

		if (!foundBadExpiry)
		{
			rows = form.lyrMain().tabDetails().dyngrdSkinPreperation().getRows();
			foundBadExpiry = verifyDateinRows(uiErrors, rows, foundBadExpiry);
		}

		if (!foundBadExpiry)
		{
			rows = form.lyrMain().tabDetails().dyngrdAnaesthetic().getRows();
			foundBadExpiry = verifyDateinRows(uiErrors, rows, foundBadExpiry);
		}
		//

		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}

	private boolean verifyDateinRows(List<String> uiErrors, DynamicGridRowCollection rows, boolean foundBadExpiry)
	{
		for (int i = 0; i < rows.size(); i++)
		{
			if (!(rows.get(i).getValue() != null && ((ValueObjectRef) rows.get(i).getValue()).getBoId() != null))
			{

				DynamicGridCell[] cellArray = rows.get(i).getCellArray();
				if (cellArray[2].getValue() != null && ((Date) cellArray[2].getValue()).isLessThan(new Date()))
				{
					uiErrors.add("Expiry Date can't be in the past");
					foundBadExpiry = true;
					break;
				}
			}
		}
		return foundBadExpiry;
	}

	private IntraOperativeCareRecordVo populateInstanceData(IntraOperativeCareRecordVo currentRecord)
	{
		if (currentRecord == null)
		{
			currentRecord = new IntraOperativeCareRecordVo();
			
			// WDEV-9886: If we are creating a new IntraOperativeCareRecordVo then link the PAS EVENT from Care Context 
			currentRecord.setPasEvent(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getPasEvent() : null);
		}
		currentRecord.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		currentRecord.setAuthoringInformation(form.lyrMain().tabCareRecord().ccAuth().getValue());

		currentRecord.setPlannedProcedure(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog());

		// Get actual procedure && procedure description
		if (form.lyrMain().tabCareRecord().ccActualProcedurePerformed().getValue() == null)
		{
			if (currentRecord.getActualProcedureIsNotNull())
			{
				currentRecord.getActualProcedure().setProcedure(null);
				currentRecord.getActualProcedure().setProcedureDescription(form.lyrMain().tabCareRecord().ccActualProcedurePerformed().getDescription() == null ? "" : form.lyrMain().tabCareRecord().ccActualProcedurePerformed().getDescription());
			}
		}
		else
		{
			ProcedureLiteVo procedure = (ProcedureLiteVo) form.lyrMain().tabCareRecord().ccActualProcedurePerformed().getSelectedItem();

			if (!currentRecord.getActualProcedureIsNotNull())
			{
				currentRecord.setActualProcedure(newPatientProcedure(procedure, form.lyrMain().tabCareRecord().ccActualProcedurePerformed().getDescription(), form.getGlobalContext().Core.getCurrentCareContext(), currentRecord.getAuthoringInformation(), SourceofInformation.CORRESPONDENCE));
			}
			else if (!procedure.equals(currentRecord.getActualProcedure().getProcedure()))
			{
				currentRecord.getActualProcedure().setProcedure(procedure);
				currentRecord.getActualProcedure().setProcedureDescription(form.lyrMain().tabCareRecord().ccActualProcedurePerformed().getDescription());
			}
		}

		currentRecord.setProcedureDate(form.lyrMain().tabCareRecord().dteDate().getValue());
		currentRecord.setTheatre(form.lyrMain().tabCareRecord().cmbTheatre().getValue());
		currentRecord.setInTheatreTime(form.lyrMain().tabCareRecord().dtimInTheatreTime().getValue());
		//currentRecord.setOutTheatreTime(form.lyrMain().tabCareRecord().dtimOutTheatreTime().getValue()); //wdev-11676
		currentRecord.setSurgeryStartTime(form.lyrMain().tabCareRecord().dtimSurgeryStart().getValue());
		currentRecord.setSurgeryEndTime(form.lyrMain().tabCareRecord().dtimSurgeryFinish().getValue());
		currentRecord.setAnaesthetistStartTime(form.lyrMain().tabCareRecord().dtimAnaesthetistS().getValue());
		currentRecord.setSurgeon((HcpLiteVo) form.lyrMain().tabCareRecord().ccSurgeon().getValue());
		currentRecord.setSurgeonAssistant((HcpLiteVo) form.lyrMain().tabCareRecord().ccSurgeonAssistant().getValue());
		currentRecord.setAnaesthetist((HcpLiteVo) form.lyrMain().tabCareRecord().ccAnaesthetist().getValue());
		currentRecord.setODA((HcpLiteVo) form.lyrMain().tabCareRecord().ccODAODP().getValue());
		currentRecord.setScrubNurse((NurseVo) form.lyrMain().tabCareRecord().ccScrubNurse().getValue());
		currentRecord.setCirculatingNurse((NurseVo) form.lyrMain().tabCareRecord().ccCirculatingNurse().getValue());
		currentRecord.setOther(form.lyrMain().tabCareRecord().txtOther().getValue());
		currentRecord.setWasPlannedProcedure(form.lyrMain().tabCareRecord().PlannedUnplanned().getValue().equals(PlannedUnplannedEnumeration.rdoPlanned));
		currentRecord.setWasUnplannedProcedure(form.lyrMain().tabCareRecord().PlannedUnplanned().getValue().equals(PlannedUnplannedEnumeration.rdoUnplanned));
		currentRecord.setCataractIntraOperativeDetail(populateInstanceCataractIntraOperativeDetails(currentRecord.getCataractIntraOperativeDetail()));

		// tabDetails

		return currentRecord;
	}

	private CataractIntraOperativeDetailVo populateInstanceCataractIntraOperativeDetails(CataractIntraOperativeDetailVo cataractIntraOperativeDetails)
	{
		if (cataractIntraOperativeDetails == null)
		{
			cataractIntraOperativeDetails = new CataractIntraOperativeDetailVo();
		}
		tabDetailsContainer detailsTab = form.lyrMain().tabDetails();
		// grdMedication
		cataractIntraOperativeDetails.setMedications(null);
		if (detailsTab.dyngrdMedication().getRows().size() > 0)
		{
			// if (cataractIntraOperativeDetails.getMedications() == null){
			cataractIntraOperativeDetails.setMedications(new PatientMedicationLiteVoCollection());
			// }
			for (int i = 0; i < detailsTab.dyngrdMedication().getRows().size(); i++)
			{
				DynamicGridRow medicationRow = detailsTab.dyngrdMedication().getRows().get(i);
				// grdMedicationRow medicationRow =
				// detailsTab.grdMedication().getRows().get(i);
				if (!(medicationRow.getCellArray()[0].getValue() == null && medicationRow.getCellArray()[1].getValue() == null && medicationRow.getCellArray()[2].getValue() == null))
				{

					PatientMedicationLiteVo patient = medicationRow.getValue() != null ? (PatientMedicationLiteVo) medicationRow.getValue() : new PatientMedicationLiteVo();

					Object value = medicationRow.getCellArray()[0].getValue();
					patient.setMedication(value == null ? null : (MedicationLiteVo) value);

					value = medicationRow.getCellArray()[1].getValue();
					patient.setBatchNo(value == null ? null : (String) value);

					value = medicationRow.getCellArray()[2].getValue();
					patient.setExpiryDate(value == null ? null : (Date) value);

					patient.setOtherMedicationText(patient.getMedicationIsNotNull() ? patient.getMedication().getMedicationName() : "Bogus Text");

					if (!patient.getPatientIsNotNull())
					{
						patient.setPatient(form.getGlobalContext().Core.getPatientShort());
					}
					if (cataractIntraOperativeDetails.getMedications().contains(patient))
					{
						cataractIntraOperativeDetails.getMedications().remove(patient);
					}
					cataractIntraOperativeDetails.getMedications().add(patient);
				}
			}
		}
		// End Grid Medication
		// Grid Skin Preparation
		cataractIntraOperativeDetails.setSkinPreperationUsed(null);
		if (detailsTab.dyngrdSkinPreperation().getRows().size() > 0)
		{
			// if (cataractIntraOperativeDetails.getSkinPreperationUsed() ==
			// null){
			cataractIntraOperativeDetails.setSkinPreperationUsed(new SkinPreperationVoCollection());
			// }
			for (int i = 0; i < detailsTab.dyngrdSkinPreperation().getRows().size(); i++)
			{
				DynamicGridRow skinPreparationRow = detailsTab.dyngrdSkinPreperation().getRows().get(i);
				if (!(skinPreparationRow.getCellArray()[0].getValue() == null && skinPreparationRow.getCellArray()[1].getValue() == null && skinPreparationRow.getCellArray()[2].getValue() == null))
				{
					SkinPreperationVo skinP = skinPreparationRow.getValue() != null ? (SkinPreperationVo) skinPreparationRow.getValue() : new SkinPreperationVo();
					Object value = skinPreparationRow.getCellArray()[0].getValue();
					skinP.setSkinPreparationUsed(value == null ? null : (SkinPreparationused) value);
					value = skinPreparationRow.getCellArray()[1].getValue();
					skinP.setBatchNo(value == null ? null : (String) value);
					value = skinPreparationRow.getCellArray()[2].getValue();
					skinP.setExpiryDate(value == null ? null : (Date) value);
					if (cataractIntraOperativeDetails.getSkinPreperationUsed().contains(skinP))
					{
						cataractIntraOperativeDetails.getSkinPreperationUsed().remove(skinP);
					}
					cataractIntraOperativeDetails.getSkinPreperationUsed().add(skinP);
				}
			}
		}
		// End Skin Preparation
		// Grid Anesthetic
		cataractIntraOperativeDetails.setLocalAnaestheticUsed(null);
		if (detailsTab.dyngrdAnaesthetic().getRows().size() > 0)
		{
			// if
			// (!cataractIntraOperativeDetails.getLocalAnaestheticUsedIsNotNull()){
			cataractIntraOperativeDetails.setLocalAnaestheticUsed(new LocalAnaestheticAdministeredVoCollection());
			// }
			for (int i = 0; i < detailsTab.dyngrdAnaesthetic().getRows().size(); i++)
			{
				DynamicGridRow localAnaestheticRow = detailsTab.dyngrdAnaesthetic().getRows().get(i);
				if (!(localAnaestheticRow.getCellArray()[0].getValue() == null && localAnaestheticRow.getCellArray()[1].getValue() == null && localAnaestheticRow.getCellArray()[2].getValue() == null))
				{
					LocalAnaestheticAdministeredVo lAnesthetic = localAnaestheticRow.getValue() != null ? (LocalAnaestheticAdministeredVo) localAnaestheticRow.getValue() : new LocalAnaestheticAdministeredVo();
					Object value = localAnaestheticRow.getCellArray()[0].getValue();
					lAnesthetic.setLocalAnaesthetic(value == null ? null : (LocalAnaesthetic) value);
					value = localAnaestheticRow.getCellArray()[1].getValue();
					lAnesthetic.setBatchNo(value == null ? null : (String) value);
					value = localAnaestheticRow.getCellArray()[2].getValue();
					lAnesthetic.setExpiryDate(value == null ? null : (Date) value);
					if (cataractIntraOperativeDetails.getLocalAnaestheticUsed().contains(lAnesthetic))
					{
						cataractIntraOperativeDetails.getLocalAnaestheticUsed().remove(lAnesthetic);
					}
					cataractIntraOperativeDetails.getLocalAnaestheticUsed().add(lAnesthetic);
				}

			}
		}
		// End Grid Anesthetic
		// Grid Dressings
		CataractDressingsCollection dressigns = new CataractDressingsCollection();
		for (int i = 0; i < detailsTab.grdDressings().getRows().size(); i++)
		{
			grdDressingsRow dressingsRow = detailsTab.grdDressings().getRows().get(i);
			if (dressingsRow.getColSelect())
			{
				dressigns.add(dressingsRow.getValue());
			}
		}
		cataractIntraOperativeDetails.setDressings(dressigns);
		// End Grid Dressings
		/* 
		 */
		cataractIntraOperativeDetails.setSwabNeedleCount(detailsTab.intSwapCount().getValue());
		grpYesNoEnumeration value = detailsTab.grpYesNo().getValue();
		cataractIntraOperativeDetails.setWasSwabNeedleCountCorrect(value.equals(grpYesNoEnumeration.rdoYes) ? YesNo.YES : value.equals(grpYesNoEnumeration.rdoNo) ? YesNo.NO : null);
		return cataractIntraOperativeDetails;

	}

	private PatientProcedureLiteVo createPlannedPatientProcedure(PatientProcedureLiteVo patientProcedure)
	{
		if (form.getLocalContext().getPlannedPatientProcedureIsNotNull())
		{
			return form.getLocalContext().getPlannedPatientProcedure();
		}

		if ((ProcedureLiteVo) form.lyrMain().tabCareRecord().ccPlannedProcedure().getSelectedItem() == null || form.lyrMain().tabCareRecord().ccPlannedProcedure().getDescription() == null)
		{
			return null;
		}
		patientProcedure = new PatientProcedureLiteVo();

		patientProcedure.setProcedure((ProcedureLiteVo) form.lyrMain().tabCareRecord().ccPlannedProcedure().getSelectedItem());
		patientProcedure.setProcedureDescription(form.lyrMain().tabCareRecord().ccPlannedProcedure().getDescription());
		patientProcedure.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		patientProcedure.setAuthoringInformation(form.lyrMain().tabCareRecord().ccAuth().getValue());
		patientProcedure.setInfoSource(SourceofInformation.CORRESPONDENCE);

		return patientProcedure;
	}

	private void loadTheatreCombo()
	{
		form.lyrMain().tabCareRecord().cmbTheatre().clear();
		LocShortVoCollection collLocShortVo = domain.listTheatres();
		if (collLocShortVo != null)
		{
			for (LocShortVo item : collLocShortVo)
			{
				form.lyrMain().tabCareRecord().cmbTheatre().newRow(item, item.getName());

				if (engine.getCurrentLocation() != null)
				{
					if (engine.getCurrentLocation().getID() == item.getID_Location().intValue())
						form.lyrMain().tabCareRecord().cmbTheatre().setValue(item);
				}
			}
		}
	}

	private void updateControlsState()
	{

		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		form.btnCancel().setText(viewMode ? "Close" : "Cancel");

		if (viewMode)
		{
			/*
			 * Boolean buttonNew =
			 * !form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() ||
			 * (form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() &&
			 * !form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecordIsNotNull());
			 */
			form.btnNew().setVisible(true);
			// WDEV-8076
			form.btnNew().setEnabled(!form.getLocalContext().getCurrentRecordIsNotNull());
			// form.btnNew().setEnabled(buttonNew);
			/*
			 * Boolean buttonEdit =
			 * form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialogIsNotNull() &&
			 * form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog().getIntraOperativeRecordIsNotNull();
			 */
			// WDEV-8076
			form.btnEdit().setVisible(form.getLocalContext().getCurrentRecordIsNotNull());
			form.btnEdit().setEnabled(true);

			form.btnCancel().setVisible(engine.isDialog());
			form.btnCancel().setEnabled(engine.isDialog());
		}

		if (!viewMode)
		{
			form.lyrMain().tabCareRecord().ccPlannedProcedure().setParentEditing(false);

			form.lyrMain().tabCareRecord().ccActualProcedurePerformed().setParentEditing(true);
			form.lyrMain().tabCareRecord().ccActualProcedurePerformed().setEnabled(true);

		}

		form.getContextMenus().Clinical.getAddRemoveItems1ADDItem().setVisible(!viewMode);
		form.getContextMenus().Clinical.getAddRemoveItems1ADDItem().setEnabled(!viewMode);

		form.getContextMenus().Clinical.getAddRemoveItems2ADDItem().setVisible(!viewMode);
		form.getContextMenus().Clinical.getAddRemoveItems2ADDItem().setEnabled(!viewMode);

		form.getContextMenus().Clinical.getAddRemoveItems3ADDItem().setVisible(!viewMode);
		form.getContextMenus().Clinical.getAddRemoveItems3ADDItem().setEnabled(!viewMode);

		tabDetailsContainer details = form.lyrMain().tabDetails();

		form.getContextMenus().Clinical.getAddRemoveItems1REMOVEItem().setVisible(!viewMode && details.dyngrdMedication().getSelectedRow() != null);
		form.getContextMenus().Clinical.getAddRemoveItems2REMOVEItem().setVisible(!viewMode && details.dyngrdSkinPreperation().getSelectedRow() != null);
		form.getContextMenus().Clinical.getAddRemoveItems3REMOVEItem().setVisible(!viewMode && details.dyngrdAnaesthetic().getSelectedRow() != null);

	}

	private void populateInstanceControls(IntraOperativeCareRecordVo currentRecord)
	{
		clearCataractIntraOperativeCareRecords();
		clearCataractIntraOperativeDetails();

		if (currentRecord == null)
			return;

		populateCataractIntraOperativeCareRecords(currentRecord);
		populateCataractIntraOperativeDetails(currentRecord.getCataractIntraOperativeDetail());

	}

	private void populateCataractIntraOperativeCareRecords(IntraOperativeCareRecordVo currentRecord)
	{
		if (currentRecord == null)
			return;

		form.lyrMain().tabCareRecord().ccAuth().setValue(currentRecord.getAuthoringInformationIsNotNull() ? currentRecord.getAuthoringInformation() : null);

		form.lyrMain().tabCareRecord().ccPlannedProcedure().setValue(form.getGlobalContext().Clinical.getPatientProcedureForIntraOperativeDialog());

		form.lyrMain().tabCareRecord().ccActualProcedurePerformed().setValue(currentRecord.getActualProcedureIsNotNull() ? currentRecord.getActualProcedure() : null);

		form.lyrMain().tabCareRecord().dteDate().setValue(currentRecord.getProcedureDateIsNotNull() ? currentRecord.getProcedureDate() : null);

		if (currentRecord.getTheatreIsNotNull())
		{
			form.lyrMain().tabCareRecord().cmbTheatre().newRow(currentRecord.getTheatre(), currentRecord.getTheatre().getName());
			form.lyrMain().tabCareRecord().cmbTheatre().setValue(currentRecord.getTheatre());
		}
		form.lyrMain().tabCareRecord().dtimInTheatreTime().setValue(currentRecord.getInTheatreTimeIsNotNull() ? currentRecord.getInTheatreTime() : null);
		//form.lyrMain().tabCareRecord().dtimOutTheatreTime().setValue(currentRecord.getOutTheatreTimeIsNotNull() ? currentRecord.getOutTheatreTime() : null); //wdev-11676
		form.lyrMain().tabCareRecord().dtimSurgeryStart().setValue(currentRecord.getSurgeryStartTimeIsNotNull() ? currentRecord.getSurgeryStartTime() : null);
		form.lyrMain().tabCareRecord().dtimSurgeryFinish().setValue(currentRecord.getSurgeryEndTimeIsNotNull() ? currentRecord.getSurgeryEndTime() : null);
		form.lyrMain().tabCareRecord().dtimAnaesthetistS().setValue(currentRecord.getAnaesthetistStartTimeIsNotNull() ? currentRecord.getAnaesthetistStartTime() : null);
		form.lyrMain().tabCareRecord().ccSurgeon().setValue(currentRecord.getSurgeonIsNotNull() ? currentRecord.getSurgeon() : null);
		form.lyrMain().tabCareRecord().ccSurgeonAssistant().setValue(currentRecord.getSurgeonAssistantIsNotNull() ? currentRecord.getSurgeonAssistant() : null);
		form.lyrMain().tabCareRecord().ccAnaesthetist().setValue(currentRecord.getAnaesthetistIsNotNull() ? currentRecord.getAnaesthetist() : null);
		form.lyrMain().tabCareRecord().ccODAODP().setValue(currentRecord.getODAIsNotNull() ? currentRecord.getODA() : null);
		form.lyrMain().tabCareRecord().ccScrubNurse().setValue(currentRecord.getScrubNurseIsNotNull() ? currentRecord.getScrubNurse() : null);
		form.lyrMain().tabCareRecord().ccCirculatingNurse().setValue(currentRecord.getCirculatingNurseIsNotNull() ? currentRecord.getCirculatingNurse() : null);
		form.lyrMain().tabCareRecord().txtOther().setValue(currentRecord.getOtherIsNotNull() ? currentRecord.getOther() : null);
		form.lyrMain().tabCareRecord().PlannedUnplanned().setValue(currentRecord.getWasPlannedProcedureIsNotNull() && currentRecord.getWasPlannedProcedure() ? PlannedUnplannedEnumeration.rdoPlanned : PlannedUnplannedEnumeration.rdoUnplanned);
	}

	private void clearCataractIntraOperativeCareRecords()
	{
		form.lyrMain().tabCareRecord().ccAuth().setValue(null);
		form.lyrMain().tabCareRecord().ccActualProcedurePerformed().setValue(null);
		form.lyrMain().tabCareRecord().ccPlannedProcedure().setValue(null);
		form.lyrMain().tabCareRecord().dteDate().setValue(null);
		form.lyrMain().tabCareRecord().cmbTheatre().setValue(null);
		form.lyrMain().tabCareRecord().dtimInTheatreTime().setValue(null);
		form.lyrMain().tabCareRecord().dtimOutTheatreTime().setValue(null);
		form.lyrMain().tabCareRecord().dtimSurgeryStart().setValue(null);
		form.lyrMain().tabCareRecord().dtimSurgeryFinish().setValue(null);
		form.lyrMain().tabCareRecord().dtimAnaesthetistS().setValue(null);
		form.lyrMain().tabCareRecord().ccSurgeon().setValue(null);
		form.lyrMain().tabCareRecord().ccSurgeonAssistant().setValue(null);
		form.lyrMain().tabCareRecord().ccAnaesthetist().setValue(null);
		form.lyrMain().tabCareRecord().ccODAODP().setValue(null);
		form.lyrMain().tabCareRecord().ccScrubNurse().setValue(null);
		form.lyrMain().tabCareRecord().ccCirculatingNurse().setValue(null);
		form.lyrMain().tabCareRecord().txtOther().setValue(null);
		form.lyrMain().tabCareRecord().PlannedUnplanned().setValue(null);
	}

	private void clearCataractIntraOperativeDetails()
	{
		form.lyrMain().tabDetails().grdDressings().getRows().clear();
		form.lyrMain().tabDetails().dyngrdMedication().getRows().clear();
		form.lyrMain().tabDetails().dyngrdAnaesthetic().getRows().clear();
		form.lyrMain().tabDetails().dyngrdSkinPreperation().getRows().clear();
		form.lyrMain().tabDetails().grpYesNo().setValue(null);
		form.lyrMain().tabDetails().intSwapCount().setValue(null);
		CataractDressingsCollection dressings = LookupHelper.getCataractDressings(domain.getLookupService());
		if (dressings == null)
		{
			return;
		}
		for (int i = 0; i < dressings.size(); i++)
		{
			if (dressings.get(i).isActive())
			{
				grdDressingsRow nRow = form.lyrMain().tabDetails().grdDressings().getRows().newRow();
				nRow.setValue(dressings.get(i));
				nRow.setColDressings(dressings.get(i).getText());
				nRow.setColSelect(false);
			}
		}

	}

	private void populateCataractIntraOperativeDetails(CataractIntraOperativeDetailVo details)
	{
		clearCataractIntraOperativeDetails();

		if (details == null)
			return;
		if (details.getMedicationsIsNotNull())
		{
			PatientMedicationLiteVoCollection medications = details.getMedications();
			for (int i = 0; i < medications.size(); i++)
			{
				PatientMedicationLiteVo pMedi = medications.get(i);
				if (pMedi != null)
				{
					addRowToMedication(pMedi);
				}
			}
		}
		if (details.getSkinPreperationUsedIsNotNull())
		{
			SkinPreperationVoCollection skinps = details.getSkinPreperationUsed();
			for (int i = 0; i < skinps.size(); i++)
			{
				SkinPreperationVo skin = skinps.get(i);
				if (skin != null)
				{
					newRowToSkinPreparation(skin);

				}
			}
		}
		if (details.getLocalAnaestheticUsedIsNotNull())
		{
			LocalAnaestheticAdministeredVoCollection anests = details.getLocalAnaestheticUsed();
			for (int i = 0; i < anests.size(); i++)
			{
				LocalAnaestheticAdministeredVo anest = anests.get(i);
				if (anest != null)
				{
					newRowToAnaesthetic(anest);
				}
			}
		}
		// GridDressings
		if (details.getDressingsIsNotNull())
		{
			CataractDressingsCollection dresings = details.getDressings();
			for (int i = 0; i < dresings.size(); i++)
			{
				form.lyrMain().tabDetails().grdDressings().getRowByValue(dresings.get(i)).setColSelect(true);
			}
		}
		// End GridDressings
		form.lyrMain().tabDetails().intSwapCount().setValue(details.getSwabNeedleCount());
		if (details.getWasSwabNeedleCountCorrectIsNotNull())
		{
			form.lyrMain().tabDetails().grpYesNo().setValue(details.getWasSwabNeedleCountCorrect().equals(YesNo.YES) ? grpYesNoEnumeration.rdoYes : grpYesNoEnumeration.rdoNo);
		}
		rebindAllAnaesthetic();
		rebindAllMedications();
		rebindAllSkinPreparation();
	}

	private void addRowToMedication(PatientMedicationLiteVo patientMedic)
	{
		if (patientMedic == null)
			return;
		DynamicGridColumnCollection columns = form.lyrMain().tabDetails().dyngrdMedication().getColumns();
		DynamicGridRow nRow = form.lyrMain().tabDetails().dyngrdMedication().getRows().newRow();
		DynamicGridCell cell = nRow.getCells().newCell(columns.getByIdentifier(COLUMN_MEDICATION), DynamicCellType.ENUMERATION);
		if (patientMedic != null && patientMedic.getMedicationIsNotNull())
			nRow.setValue(patientMedic);

		DynamicGridCellItem item = cell.getItems().newItem(patientMedic.getMedication().getMedicationName());
		item.setValue(patientMedic.getMedication());

		cell.setValue(patientMedic.getMedication());
		cell.setAutoPostBack(true);
		cell = nRow.getCells().newCell(columns.getByIdentifier(COLUMN_BATCHNO), DynamicCellType.STRING);

		cell.setValue(patientMedic.getBatchNo());
		cell.setStringMaxLength(20);
		cell = nRow.getCells().newCell(columns.getByIdentifier(COLUMN_EXPIRYDATE), DynamicCellType.DATE);
		cell.setValue(patientMedic.getExpiryDate());
	}

	private void newRowToMedication()
	{
		ims.framework.controls.DynamicGridColumnCollection columns = form.lyrMain().tabDetails().dyngrdMedication().getColumns();
		DynamicGridRow nRow = form.lyrMain().tabDetails().dyngrdMedication().getRows().newRow();
		nRow.getCells().newCell(columns.getByIdentifier(COLUMN_MEDICATION), DynamicCellType.ENUMERATION).setAutoPostBack(true);
		nRow.getCells().newCell(columns.getByIdentifier(COLUMN_BATCHNO), DynamicCellType.STRING).setStringMaxLength(20);
		nRow.getCells().newCell(columns.getByIdentifier(COLUMN_EXPIRYDATE), DynamicCellType.DATE);
	}

	private void newRowToSkinPreparation(SkinPreperationVo skinprep)
	{
		DynamicGridColumnCollection columns = form.lyrMain().tabDetails().dyngrdSkinPreperation().getColumns();
		DynamicGridRow nRow = form.lyrMain().tabDetails().dyngrdSkinPreperation().getRows().newRow();
		DynamicGridCell cell = nRow.getCells().newCell(columns.getByIdentifier(COLUMN_SKINPREPARATION), DynamicCellType.ENUMERATION);
		nRow.setValue(skinprep);
		if (skinprep != null && skinprep.getSkinPreparationUsedIsNotNull())
		{
			DynamicGridCellItem item = cell.getItems().newItem(skinprep.getSkinPreparationUsed().getText());
			item.setValue(skinprep.getSkinPreparationUsed());
			cell.setValue(skinprep.getSkinPreparationUsed());
		}
		cell.setAutoPostBack(true);
		cell = nRow.getCells().newCell(columns.getByIdentifier(COLUMN_BATCHNO), DynamicCellType.STRING);
		cell.setValue(skinprep == null ? null : skinprep.getBatchNo());
		cell.setStringMaxLength(20);

		cell = nRow.getCells().newCell(columns.getByIdentifier(COLUMN_EXPIRYDATE), DynamicCellType.DATE);
		cell.setValue(skinprep == null ? null : skinprep.getExpiryDate());

	}

	private void rebindAllSkinPreparation()
	{
		SkinPreparationusedCollection skinPreps = (SkinPreparationusedCollection) form.getLocalContext().getAllSkinPreparations().clone();
		if (skinPreps == null)
			return;
		DynamicGridRowCollection rows = form.lyrMain().tabDetails().dyngrdSkinPreperation().getRows();
		for (int i = 0; i < rows.size(); i++)
		{
			Object skinPrep = rows.get(i).getCellArray()[0].getValue();
			if (skinPrep != null && (skinPrep instanceof SkinPreparationused))
			{
				skinPreps.remove((SkinPreparationused) skinPrep);
			}
		}
		skinPreps.sort();
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridCell skinPrep = rows.get(i).getCellArray()[0];
			Object value = skinPrep.getValue();
			skinPrep.getItems().clear();
			for (int j = 0; j < skinPreps.size(); j++)
			{
				skinPrep.getItems().newItem(((SkinPreparationused) skinPreps.get(j)).getText()).setValue(skinPreps.get(j));
			}
			if (value != null)
			{
				skinPrep.getItems().newItem(((SkinPreparationused) value).getText()).setValue(value);
				skinPrep.setValue(value);
			}
		}

	}

	private void rebindAllMedications()
	{
		DynamicGridRowCollection rows = form.lyrMain().tabDetails().dyngrdMedication().getRows();
		MedicationLiteVoCollection allMedications = (MedicationLiteVoCollection) form.getLocalContext().getAllMedications().clone();
		if (allMedications == null)
			return;
		MedicationLiteVoCollection availableMedications = new MedicationLiteVoCollection();
		for (int i = 0; i < allMedications.size(); i++)
		{
			if (!isMedicationInGrid(allMedications.get(i)))
			{
				availableMedications.add(allMedications.get(i));
			}
		}
		availableMedications.sort();
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridCell cell = rows.get(i).getCellArray()[0];
			Object value = cell.getValue();
			cell.getItems().clear();

			DynamicGridCellItem item = null;
			if (value != null)
			{
				item = cell.getItems().newItem(value);
				item.setValue(value);
			}
			for (int j = 0; j < availableMedications.size(); j++)
			{
				item = cell.getItems().newItem(availableMedications.get(j).getMedicationName());
				item.setValue(availableMedications.get(j));
			}
			cell.setValue(value);
		}
		for (int i = 0; i < availableMedications.size(); i++)
		{

		}
	}

	private void newRowToAnaesthetic(LocalAnaestheticAdministeredVo anaesthetic)
	{
		DynamicGridColumnCollection columns = form.lyrMain().tabDetails().dyngrdAnaesthetic().getColumns();
		DynamicGridRow nRow = form.lyrMain().tabDetails().dyngrdAnaesthetic().getRows().newRow();
		DynamicGridCell cell = nRow.getCells().newCell(columns.getByIdentifier(COLUMN_ANAESTHETIC), DynamicCellType.ENUMERATION);
		nRow.setValue(anaesthetic);
		if (anaesthetic != null && anaesthetic.getLocalAnaestheticIsNotNull())
		{
			DynamicGridCellItem item = cell.getItems().newItem(anaesthetic.getLocalAnaesthetic().getText());
			item.setValue(anaesthetic.getLocalAnaesthetic());
			cell.setValue(anaesthetic.getLocalAnaesthetic());
		}
		cell.setAutoPostBack(true);
		cell = nRow.getCells().newCell(columns.getByIdentifier(COLUMN_BATCHNO), DynamicCellType.STRING);
		cell.setValue(anaesthetic == null ? null : anaesthetic.getBatchNo());
		cell.setStringMaxLength(20);
		cell = nRow.getCells().newCell(columns.getByIdentifier(COLUMN_EXPIRYDATE), DynamicCellType.DATE);
		cell.setValue(anaesthetic == null ? null : anaesthetic.getExpiryDate());
	}

	private void rebindAllAnaesthetic()
	{
		LocalAnaestheticCollection anaesthetics = (LocalAnaestheticCollection) form.getLocalContext().getAllAnaesthetics().clone();
		if (anaesthetics == null)
			return;
		DynamicGridRowCollection rows = form.lyrMain().tabDetails().dyngrdAnaesthetic().getRows();
		for (int i = 0; i < rows.size(); i++)
		{
			Object localAnaesthetic = rows.get(i).getCellArray()[0].getValue();
			if (localAnaesthetic != null && (localAnaesthetic instanceof LocalAnaesthetic))
			{
				anaesthetics.remove((LocalAnaesthetic) localAnaesthetic);
			}
		}
		anaesthetics.sort();
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridCell localAnaesthetic = rows.get(i).getCellArray()[0];
			Object value = localAnaesthetic.getValue();
			localAnaesthetic.getItems().clear();
			for (int j = 0; j < anaesthetics.size(); j++)
			{
				localAnaesthetic.getItems().newItem(((LocalAnaesthetic) anaesthetics.get(j)).getText()).setValue(anaesthetics.get(j));
			}
			if (value != null)
			{
				localAnaesthetic.getItems().newItem(((LocalAnaesthetic) value).getText()).setValue(value);
				localAnaesthetic.setValue(value);
			}
		}

	}

	private void initDynGridMedication()
	{
		DynamicGridColumn newColumn = form.lyrMain().tabDetails().dyngrdMedication().getColumns().newColumn("Medication", COLUMN_MEDICATION, false);
		newColumn.setWidth(200);
		newColumn = form.lyrMain().tabDetails().dyngrdMedication().getColumns().newColumn("Batch No.", COLUMN_BATCHNO, false);
		newColumn.setWidth(60);
		newColumn = form.lyrMain().tabDetails().dyngrdMedication().getColumns().newColumn("Expiry Date", COLUMN_EXPIRYDATE, false);
		newColumn.setWidth(-1);
	}

	private void initDynGridSkinPreparation()
	{
		DynamicGridColumn newColumn = form.lyrMain().tabDetails().dyngrdSkinPreperation().getColumns().newColumn("Skin Preperation Used ", COLUMN_SKINPREPARATION, false);
		newColumn.setWidth(200);
		newColumn = form.lyrMain().tabDetails().dyngrdSkinPreperation().getColumns().newColumn("Batch No.", COLUMN_BATCHNO, false);
		newColumn.setWidth(60);
		newColumn = form.lyrMain().tabDetails().dyngrdSkinPreperation().getColumns().newColumn("Expiry Date", COLUMN_EXPIRYDATE, false);
		newColumn.setWidth(-1);
	}

	private void initDynGridAnaesthetic()
	{
		DynamicGridColumn newColumn = form.lyrMain().tabDetails().dyngrdAnaesthetic().getColumns().newColumn("Local Anaesthetic/Infiltration", COLUMN_ANAESTHETIC, false);
		newColumn.setWidth(200);
		newColumn = form.lyrMain().tabDetails().dyngrdAnaesthetic().getColumns().newColumn("Batch No.", COLUMN_BATCHNO, false);
		newColumn.setWidth(60);
		newColumn = form.lyrMain().tabDetails().dyngrdAnaesthetic().getColumns().newColumn("Expiry Date", COLUMN_EXPIRYDATE, false);
		newColumn.setWidth(-1);
	}

}
