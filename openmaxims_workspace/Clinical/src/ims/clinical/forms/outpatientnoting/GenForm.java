//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.outpatientnoting;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabDocumentsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 824, 544, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_cc3Form = loader.loadComponent(102264, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_cc3Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(8), new Integer(824), new Integer(544), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_cc3Form, instance1 } );
				ims.framework.Control m_cc3Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_cc3Form, instance1, Boolean.FALSE } );
				super.addControl(m_cc3Control);
				Menu[] menus1 = m_cc3Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 752, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Next", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public ims.core.forms.uploaddocument.IComponent cc3()
			{
				return (ims.core.forms.uploaddocument.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcc3ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcc3Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscc3Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcc3Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscc3Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnDocNext()
			{
				return (Button)super.getControl(1);
			}
		}
		public static class tabClinicalNotingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdInvViaCommsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdInvViaCommsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColumnOrderDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColumnOrderDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColumnOrderDateOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Date getColumnOrderDate()
				{
					return (ims.framework.utils.Date)super.row.get(0);
				}
				public void setColumnOrderDate(ims.framework.utils.Date value)
				{
					super.row.set(0, value);
				}
				public void setCellColumnOrderDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColumnInvestigationReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColumnInvestigationReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColumnInvestigationOpened()
				{
					super.row.showOpened(1);
				}
				public String getColumnInvestigation()
				{
					return (String)super.row.get(1);
				}
				public void setColumnInvestigation(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColumnInvestigationTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColumnDepartmentReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColumnDepartmentReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColumnDepartmentOpened()
				{
					super.row.showOpened(2);
				}
				public String getColumnDepartment()
				{
					return (String)super.row.get(2);
				}
				public void setColumnDepartment(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColumnDepartmentTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColumnLocationReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColumnLocationReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColumnLocationOpened()
				{
					super.row.showOpened(3);
				}
				public String getColumnLocation()
				{
					return (String)super.row.get(3);
				}
				public void setColumnLocation(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColumnLocationTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColumnStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColumnStatusReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColumnStatusOpened()
				{
					super.row.showOpened(4);
				}
				public String getColumnStatus()
				{
					return (String)super.row.get(4);
				}
				public void setColumnStatus(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColumnStatusTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdInvViaCommsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdInvViaCommsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdInvViaCommsRow get(int index)
				{
					return new grdInvViaCommsRow(super.collection.get(index));
				}
				public grdInvViaCommsRow newRow()
				{
					return new grdInvViaCommsRow(super.collection.newRow());
				}
				public grdInvViaCommsRow newRow(boolean autoSelect)
				{
					return new grdInvViaCommsRow(super.collection.newRow(autoSelect));
				}
				public grdInvViaCommsRow newRowAt(int index)
				{
					return new grdInvViaCommsRow(super.collection.newRowAt(index));
				}
				public grdInvViaCommsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdInvViaCommsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdInvViaCommsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdInvViaCommsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdInvViaCommsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdInvViaCommsRowCollection getRows()
				{
					return new grdInvViaCommsRowCollection(super.grid.getRows());
				}
				public grdInvViaCommsRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdInvViaCommsRow(row);
				}
				public void setColumnOrderDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColumnOrderDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColumnInvestigationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColumnInvestigationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColumnDepartmentHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColumnDepartmentHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColumnLocationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColumnLocationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColumnStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColumnStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public static class grdCoMorbDiagnRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdCoMorbDiagnRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDCDescReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDCDescReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDCDescOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDCDesc(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDCDesc()
				{
					return (String)super.row.get(0);
				}
				public void setColDCDesc(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDCDescTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDCDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDCDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDCDateOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColDCDate(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.framework.utils.PartialDate getColDCDate()
				{
					return (ims.framework.utils.PartialDate)super.row.get(1);
				}
				public void setColDCDate(ims.framework.utils.PartialDate value)
				{
					super.row.set(1, value);
				}
				public void setCellColDCDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDCCoMorbidReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDCCoMorbidReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDCCoMorbidOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColDCCoMorbid(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.framework.utils.Image getColDCCoMorbid()
				{
					return (ims.framework.utils.Image)super.row.get(2);
				}
				public void setColDCCoMorbid(ims.framework.utils.Image value)
				{
					super.row.set(2, value);
				}
				public void setCellColDCCoMorbidTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColComorbInCurrentReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColComorbInCurrentReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColComorbInCurrentOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColComorbInCurrent(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.framework.utils.Image getColComorbInCurrent()
				{
					return (ims.framework.utils.Image)super.row.get(3);
				}
				public void setColComorbInCurrent(ims.framework.utils.Image value)
				{
					super.row.set(3, value);
				}
				public void setCellColComorbInCurrentTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColIncludeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColIncludeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColIncludeOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColInclude(String value)
				{
					super.row.setTooltip(4, value);
				}
				public boolean getColInclude()
				{
					return ((Boolean)super.row.get(4)).booleanValue();
				}
				public void setColInclude(boolean value)
				{
					super.row.set(4, new Boolean(value));
				}
				public void setCellColIncludeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
				{
					return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdCoMorbDiagnRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdCoMorbDiagnRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdCoMorbDiagnRow get(int index)
				{
					return new grdCoMorbDiagnRow(super.collection.get(index));
				}
				public grdCoMorbDiagnRow newRow()
				{
					return new grdCoMorbDiagnRow(super.collection.newRow());
				}
				public grdCoMorbDiagnRow newRow(boolean autoSelect)
				{
					return new grdCoMorbDiagnRow(super.collection.newRow(autoSelect));
				}
				public grdCoMorbDiagnRow newRowAt(int index)
				{
					return new grdCoMorbDiagnRow(super.collection.newRowAt(index));
				}
				public grdCoMorbDiagnRow newRowAt(int index, boolean autoSelect)
				{
					return new grdCoMorbDiagnRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdCoMorbDiagnGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.PatientDiagnosisEDischargeListVoCollection getValues()
				{
					ims.core.vo.PatientDiagnosisEDischargeListVoCollection listOfValues = new ims.core.vo.PatientDiagnosisEDischargeListVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientDiagnosisEDischargeListVo getValue()
				{
					return (ims.core.vo.PatientDiagnosisEDischargeListVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
				{
					super.grid.setValue(value);
				}
				public grdCoMorbDiagnRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdCoMorbDiagnRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdCoMorbDiagnRowCollection getRows()
				{
					return new grdCoMorbDiagnRowCollection(super.grid.getRows());
				}
				public grdCoMorbDiagnRow getRowByValue(ims.core.vo.PatientDiagnosisEDischargeListVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdCoMorbDiagnRow(row);
				}
				public void setColDCDescHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDCDescHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDCDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDCDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDCCoMorbidHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDCCoMorbidHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColComorbInCurrentHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColComorbInCurrentHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColIncludeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColIncludeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 4, 216, 816, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Co-Morbidities and Diagnoses", new Integer(1), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 476, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Other", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 388, 83, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "order comms:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 508, 53, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "ordered:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 492, 84, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "investigations", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 372, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "ordered via", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 356, 86, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Investigations", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 604, 233, 158, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "No Co-Morbidity Recorded:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 664, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 744, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 176, 476, 640, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(5000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 764, 233, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 176, 356, 640, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grdInvViaCommsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdInvViaCommsTemp);
				grdInvViaCommsGrid grdInvViaComms = (grdInvViaCommsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInvViaCommsGrid.class, m_grdInvViaCommsTemp);
				grdInvViaComms.addDateColumn("Ordered Date", 0, 0, 100, true, true, null, false, 0, true);
				grdInvViaComms.addStringColumn("Investigation", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInvViaComms.addStringColumn("Dept/Discipline", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInvViaComms.addStringColumn("Location/Clinician", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInvViaComms.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdInvViaComms);
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 12, 264, 804, 84, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdCoMorbDiagnTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuPatientCo, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdCoMorbDiagnTemp);
				grdCoMorbDiagnGrid grdCoMorbDiagn = (grdCoMorbDiagnGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCoMorbDiagnGrid.class, m_grdCoMorbDiagnTemp);
				grdCoMorbDiagn.addStringColumn("Description", 0, 0, 530, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCoMorbDiagn.addPartialDateColumn("Date Diagnosed", 0, 0, 130, true, true, null, false, 0, true);
				grdCoMorbDiagn.addImageColumn(" ", 0, 0, 40, true, 0);
				grdCoMorbDiagn.addImageColumn(" ", 0, 0, 40, true, 0);
				grdCoMorbDiagn.addBoolColumn("Include", 0, 0, -1, false, true, 0, true);
				super.addGrid(grdCoMorbDiagn);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 144, 476, 26, 26, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, form_images_local.Core.InfoEnabled24, form_images_local.Core.InfoEnabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 144, 356, 26, 26, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, form_images_local.Core.InfoEnabled24, form_images_local.Core.InfoEnabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// Rich Text Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
			}

			public Button btnEditClincalNoting()
			{
				return (Button)super.getControl(8);
			}
			public Button btnSaveClinicalNoting()
			{
				return (Button)super.getControl(9);
			}
			public Button btnNextClinicalNoting()
			{
				return (Button)super.getControl(10);
			}
			public TextBox txtOtherInv()
			{
				return (TextBox)super.getControl(11);
			}
			public CheckBox chk2()
			{
				return (CheckBox)super.getControl(12);
			}
			public grdInvViaCommsGrid grdInvViaComms()
			{
				return (grdInvViaCommsGrid)super.getGrid(0);
			}
			public grdCoMorbDiagnGrid grdCoMorbDiagn()
			{
				return (grdCoMorbDiagnGrid)super.getGrid(1);
			}
			public ImageButton imb10()
			{
				return (ImageButton)super.getControl(15);
			}
			public ImageButton imb9()
			{
				return (ImageButton)super.getControl(16);
			}
			public RichTextControl richTextRecordNotes()
			{
				return (RichTextControl)super.getControl(17);
			}
		}
		public static class tabPageAssessmentContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 824, 556, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_cc1Form = loader.loadComponent(123182, appForm, startControlID * 10 + 2000, anchoringHelper21.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_cc1Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(0), new Integer(8), new Integer(824), new Integer(556), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_cc1Form, instance1 } );
				ims.framework.Control m_cc1Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1022),  new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_cc1Form, instance1, Boolean.FALSE } );
				super.addControl(m_cc1Control);
				Menu[] menus1 = m_cc1Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.clinical.forms.outpatientassessment.IComponent cc1()
			{
				return (ims.clinical.forms.outpatientassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcc1ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcc1Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscc1Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcc1Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscc1Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageMedicationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmb3ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.OutcomeOfClinicAttendance getValue()
				{
					return (ims.clinical.vo.lookups.OutcomeOfClinicAttendance)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbOutcomeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinical.vo.lookups.OutcomeOfClinicAttendance getValue()
				{
					return (ims.clinical.vo.lookups.OutcomeOfClinicAttendance)super.control.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.OutcomeOfClinicAttendance value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdProHighCostRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProHighCostRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolProcHighCostReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolProcHighCostReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolProcHighCostOpened()
				{
					super.row.showOpened(0);
				}
				public ims.clinical.vo.lookups.ProcedureHighCostDrug getcolProcHighCost()
				{
					return (ims.clinical.vo.lookups.ProcedureHighCostDrug)super.row.get(0);
				}
				public void setcolProcHighCost(ims.clinical.vo.lookups.ProcedureHighCostDrug value)
				{
					super.row.set(0, value, true);
				}
				public void setCellcolProcHighCostTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.clinical.vo.lookups.ProcedureHighCostDrug getValue()
				{
					return (ims.clinical.vo.lookups.ProcedureHighCostDrug)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.ProcedureHighCostDrug value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdProHighCostRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProHighCostRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProHighCostRow get(int index)
				{
					return new grdProHighCostRow(super.collection.get(index));
				}
				public grdProHighCostRow newRow()
				{
					return new grdProHighCostRow(super.collection.newRow());
				}
				public grdProHighCostRow newRow(boolean autoSelect)
				{
					return new grdProHighCostRow(super.collection.newRow(autoSelect));
				}
				public grdProHighCostRow newRowAt(int index)
				{
					return new grdProHighCostRow(super.collection.newRowAt(index));
				}
				public grdProHighCostRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProHighCostRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProHighCostGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.clinical.vo.lookups.ProcedureHighCostDrug[] getValues()
				{
					ims.clinical.vo.lookups.ProcedureHighCostDrug[] listOfValues = new ims.clinical.vo.lookups.ProcedureHighCostDrug[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.clinical.vo.lookups.ProcedureHighCostDrug getValue()
				{
					return (ims.clinical.vo.lookups.ProcedureHighCostDrug)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.lookups.ProcedureHighCostDrug value)
				{
					super.grid.setValue(value);
				}
				public grdProHighCostRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProHighCostRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProHighCostRowCollection getRows()
				{
					return new grdProHighCostRowCollection(super.grid.getRows());
				}
				public grdProHighCostRow getRowByValue(ims.clinical.vo.lookups.ProcedureHighCostDrug value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProHighCostRow(row);
				}
				public void setcolProcHighCostHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolProcHighCostHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public GridComboBox colProcHighCostComboBox()
				{
					return new GridComboBox(super.grid, 0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 432, 8, 389, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Medication Changes", new Integer(1), ""}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 405, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Current Medication", new Integer(1), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 128, 500, 304, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ims.framework.FormUiLogic m_ccConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper24.getSize(), instance1, startTabIndex.intValue() + 31, skipContextValidation);
				//ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(128), new Integer(500), new Integer(304), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 31), m_ccConsultantForm, instance1 } );
				ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1026),  new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 31), m_ccConsultantForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccConsultantControl);
				Menu[] menus1 = m_ccConsultantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 440, 502, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Comments:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 10, 500, 70, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 10, 476, 72, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "attendance:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 774, 460, 40, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "weeks", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 10, 460, 103, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Outcome of clinic", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 24, 280, 255, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No High Cost Drug or Procedure carried out:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 624, 24, 142, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "No Medication Changes:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1033), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 664, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1035), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 744, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1037), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 512, 500, 256, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 440, 48, 376, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(5000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 392, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(5000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 438, 460, 268, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmb3Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmb3Temp);
				cmb3ComboBox cmb3 = (cmb3ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb3ComboBox.class, m_cmb3Temp);
				super.addComboBox(cmb3);
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 128, 460, 288, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbOutcomeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbOutcomeTemp);
				cmbOutcomeComboBox cmbOutcome = (cmbOutcomeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutcomeComboBox.class, m_cmbOutcomeTemp);
				super.addComboBox(cmbOutcome);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 280, 280, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 768, 24, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 304, 808, 148, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdProHighCostTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuProcedureHighMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdProHighCostTemp);
				grdProHighCostGrid grdProHighCost = (grdProHighCostGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProHighCostGrid.class, m_grdProHighCostTemp);
				grdProHighCost.addComboBoxColumn("Procedure / High cost drug", 0, 0, -1, false, true, false, false, true, -1);
				super.addGrid(grdProHighCost);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 718, 460, 48, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 790, 16, 26, 26, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.InfoEnabled24, form_images_local.Core.InfoEnabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 382, 16, 26, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.InfoEnabled24, form_images_local.Core.InfoEnabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.core.forms.mosquery.IComponent ccConsultant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setccConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setccConsultantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isccConsultantVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setccConsultantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isccConsultantEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public Button btnEditMedication()
			{
				return (Button)super.getControl(10);
			}
			public Button btnSaveMedication()
			{
				return (Button)super.getControl(11);
			}
			public Button btnCancel()
			{
				return (Button)super.getControl(12);
			}
			public TextBox txtComments()
			{
				return (TextBox)super.getControl(13);
			}
			public TextBox txtMedChange()
			{
				return (TextBox)super.getControl(14);
			}
			public TextBox txtCurrMed()
			{
				return (TextBox)super.getControl(15);
			}
			public cmb3ComboBox cmb3()
			{
				return (cmb3ComboBox)super.getComboBox(0);
			}
			public cmbOutcomeComboBox cmbOutcome()
			{
				return (cmbOutcomeComboBox)super.getComboBox(1);
			}
			public CheckBox chk3()
			{
				return (CheckBox)super.getControl(18);
			}
			public CheckBox chkNoMedChanges()
			{
				return (CheckBox)super.getControl(19);
			}
			public grdProHighCostGrid grdProHighCost()
			{
				return (grdProHighCostGrid)super.getGrid(0);
			}
			public IntBox int2()
			{
				return (IntBox)super.getControl(21);
			}
			public ImageButton imb3()
			{
				return (ImageButton)super.getControl(22);
			}
			public ImageButton imb2()
			{
				return (ImageButton)super.getControl(23);
			}
		}
		public static class tabPageReadyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmb1ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 104, 482, 284, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ims.framework.FormUiLogic m_cc2Form = loader.loadComponent(102256, appForm, startControlID * 10 + 4000, anchoringHelper46.getSize(), instance1, startTabIndex.intValue() + 1055, skipContextValidation);
				//ims.framework.Control m_cc2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(104), new Integer(482), new Integer(284), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 1055), m_cc2Form, instance1 } );
				ims.framework.Control m_cc2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1049),  new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 1055), m_cc2Form, instance1, Boolean.FALSE } );
				super.addControl(m_cc2Control);
				Menu[] menus1 = m_cc2Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 480, 510, 70, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Clinic Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 496, 528, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 480, 484, 130, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Authoring Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 7, 484, 92, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 272, 508, 87, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<< specialty >>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 64, 508, 73, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<< grade >>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 7, 508, 42, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Grade:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 200, 508, 60, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 4, 264, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Plan:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "History:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 4, 136, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Findings on Examination:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 7, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 2058), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 663, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 2059), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 743, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 2060), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 618, 482, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 2056), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 618, 508, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmb1Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmb1Temp);
				cmb1ComboBox cmb1 = (cmb1ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb1ComboBox.class, m_cmb1Temp);
				super.addComboBox(cmb1);
		
				// Rich Text Controls
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 4, 392, 816, 84, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 1052), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 4, 288, 816, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 1051), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 4, 160, 816, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 1050), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 4, 32, 816, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 1049), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
			}

			public ims.core.forms.mosquery.IComponent cc2()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcc2ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcc2Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscc2Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcc2Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscc2Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Label lbl30()
			{
				return (Label)super.getControl(5);
			}
			public Label lbl32()
			{
				return (Label)super.getControl(6);
			}
			public Button btnEditCorrespondence()
			{
				return (Button)super.getControl(12);
			}
			public Button btnSaveCorrespondence()
			{
				return (Button)super.getControl(13);
			}
			public Button btnCancelCorrespondence()
			{
				return (Button)super.getControl(14);
			}
			public DateTimeControl dtim1()
			{
				return (DateTimeControl)super.getControl(15);
			}
			public cmb1ComboBox cmb1()
			{
				return (cmb1ComboBox)super.getComboBox(0);
			}
			public RichTextControl richText4()
			{
				return (RichTextControl)super.getControl(17);
			}
			public RichTextControl richText3()
			{
				return (RichTextControl)super.getControl(18);
			}
			public RichTextControl richText2()
			{
				return (RichTextControl)super.getControl(19);
			}
			public RichTextControl richText1()
			{
				return (RichTextControl)super.getControl(20);
			}
		}
		public static class tabPagePreviewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grd3Row extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grd3Row(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColRecipientReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColRecipientReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColRecipientOpened()
				{
					super.row.showOpened(0);
				}
				public String getColRecipient()
				{
					return (String)super.row.get(0);
				}
				public void setColRecipient(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColRecipientTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColumnPrimaryReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColumnPrimaryReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColumnPrimaryOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColumnPrimary()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColumnPrimary(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColumnPrimaryTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.GPLiteWithCommChannelsVo getValue()
				{
					return (ims.core.vo.GPLiteWithCommChannelsVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.GPLiteWithCommChannelsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grd3RowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grd3RowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grd3Row get(int index)
				{
					return new grd3Row(super.collection.get(index));
				}
				public grd3Row newRow()
				{
					return new grd3Row(super.collection.newRow());
				}
				public grd3Row newRow(boolean autoSelect)
				{
					return new grd3Row(super.collection.newRow(autoSelect));
				}
				public grd3Row newRowAt(int index)
				{
					return new grd3Row(super.collection.newRowAt(index));
				}
				public grd3Row newRowAt(int index, boolean autoSelect)
				{
					return new grd3Row(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grd3Grid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.GPLiteWithCommChannelsVoCollection getValues()
				{
					ims.core.vo.GPLiteWithCommChannelsVoCollection listOfValues = new ims.core.vo.GPLiteWithCommChannelsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.GPLiteWithCommChannelsVo getValue()
				{
					return (ims.core.vo.GPLiteWithCommChannelsVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.GPLiteWithCommChannelsVo value)
				{
					super.grid.setValue(value);
				}
				public grd3Row getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grd3Row(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grd3RowCollection getRows()
				{
					return new grd3RowCollection(super.grid.getRows());
				}
				public grd3Row getRowByValue(ims.core.vo.GPLiteWithCommChannelsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grd3Row(row);
				}
				public void setColRecipientHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColRecipientHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColumnPrimaryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColumnPrimaryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 4, 420, 816, 111, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 816, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Letter Preview", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 17, 476, 118, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Date of Completion:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 428, 444, 100, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Distribution List:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 12, 444, 176, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Send to Documents Work List:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 664, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 1046), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 744, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 1048), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 8, 540, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 1044), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 196, 476, 224, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 1041), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 196, 444, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 1040), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 548, 444, 256, 72, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grd3Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 1043), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuOutOfCountyRecipient, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grd3Temp);
				grd3Grid grd3 = (grd3Grid)GridFlyweightFactory.getInstance().createGridBridge(grd3Grid.class, m_grd3Temp);
				grd3.addStringColumn("Recipient", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd3.addBoolColumn("Primary", 0, 0, -1, false, false, 0, true);
				super.addGrid(grd3);
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 4, 33, 816, 379, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 1053), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public Button btnSavePreview()
			{
				return (Button)super.getControl(5);
			}
			public Button btnCancelPreview()
			{
				return (Button)super.getControl(6);
			}
			public Button btnEditPreview()
			{
				return (Button)super.getControl(7);
			}
			public DateTimeControl dtim2()
			{
				return (DateTimeControl)super.getControl(8);
			}
			public CheckBox chk6()
			{
				return (CheckBox)super.getControl(9);
			}
			public grd3Grid grd3()
			{
				return (grd3Grid)super.getGrid(0);
			}
			public HTMLViewer htm1()
			{
				return (HTMLViewer)super.getControl(11);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDocuments = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Documents", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDocumentsContainer m_tabDocumentsContainer = (tabDocumentsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDocumentsContainer.class, m_tabDocuments, factory);
			super.addContainer(m_tabDocuments, m_tabDocumentsContainer);
			ims.framework.utils.SizeInfo m_tabDocumentsDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabDocumentsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper79.getWidth(), anchoringHelper79.getHeight());
			m_tabDocumentsContainer.setContext(form, appForm, m_tabDocuments, loader, form_images_local, contextMenus, startControlID, m_tabDocumentsDesignSize, m_tabDocumentsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClinicalNoting = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinical Noting", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabClinicalNotingContainer m_tabClinicalNotingContainer = (tabClinicalNotingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClinicalNotingContainer.class, m_tabClinicalNoting, factory);
			super.addContainer(m_tabClinicalNoting, m_tabClinicalNotingContainer);
			ims.framework.utils.SizeInfo m_tabClinicalNotingDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabClinicalNotingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper80.getWidth(), anchoringHelper80.getHeight());
			m_tabClinicalNotingContainer.setContext(form, appForm, m_tabClinicalNoting, loader, form_images_local, contextMenus, startControlID, m_tabClinicalNotingDesignSize, m_tabClinicalNotingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageAssessment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Assessment", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageAssessmentContainer m_tabPageAssessmentContainer = (tabPageAssessmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageAssessmentContainer.class, m_tabPageAssessment, factory);
			super.addContainer(m_tabPageAssessment, m_tabPageAssessmentContainer);
			ims.framework.utils.SizeInfo m_tabPageAssessmentDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabPageAssessmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper81.getWidth(), anchoringHelper81.getHeight());
			m_tabPageAssessmentContainer.setContext(form, appForm, m_tabPageAssessment, loader, form_images_local, contextMenus, startControlID, m_tabPageAssessmentDesignSize, m_tabPageAssessmentRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageMedication = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Med/Outcome", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageMedicationContainer m_tabPageMedicationContainer = (tabPageMedicationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageMedicationContainer.class, m_tabPageMedication, factory);
			super.addContainer(m_tabPageMedication, m_tabPageMedicationContainer);
			ims.framework.utils.SizeInfo m_tabPageMedicationDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabPageMedicationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper82.getWidth(), anchoringHelper82.getHeight());
			m_tabPageMedicationContainer.setContext(form, appForm, m_tabPageMedication, loader, form_images_local, contextMenus, startControlID, m_tabPageMedicationDesignSize, m_tabPageMedicationRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageReady = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Patient Correspondence", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageReadyContainer m_tabPageReadyContainer = (tabPageReadyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageReadyContainer.class, m_tabPageReady, factory);
			super.addContainer(m_tabPageReady, m_tabPageReadyContainer);
			ims.framework.utils.SizeInfo m_tabPageReadyDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabPageReadyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper83.getWidth(), anchoringHelper83.getHeight());
			m_tabPageReadyContainer.setContext(form, appForm, m_tabPageReady, loader, form_images_local, contextMenus, startControlID, m_tabPageReadyDesignSize, m_tabPageReadyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 600, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPagePreview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Preview", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPagePreviewContainer m_tabPagePreviewContainer = (tabPagePreviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPagePreviewContainer.class, m_tabPagePreview, factory);
			super.addContainer(m_tabPagePreview, m_tabPagePreviewContainer);
			ims.framework.utils.SizeInfo m_tabPagePreviewDesignSize = new ims.framework.utils.SizeInfo(832, 600);
			ims.framework.utils.SizeInfo m_tabPagePreviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper84.getWidth(), anchoringHelper84.getHeight());
			m_tabPagePreviewContainer.setContext(form, appForm, m_tabPagePreview, loader, form_images_local, contextMenus, startControlID, m_tabPagePreviewDesignSize, m_tabPagePreviewRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabDocuments().setVisible(false);
			tabClinicalNoting().setVisible(false);
			tabPageAssessment().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPageReady().setVisible(false);
			tabPagePreview().setVisible(false);
		}
		public void settabDocumentsEnabled(boolean value)
		{
			tabDocuments().setEnabled(value);
		}
		public void settabClinicalNotingEnabled(boolean value)
		{
			tabClinicalNoting().setEnabled(value);
		}
		public void settabPageAssessmentEnabled(boolean value)
		{
			tabPageAssessment().setEnabled(value);
		}
		public void settabPageMedicationEnabled(boolean value)
		{
			tabPageMedication().setEnabled(value);
		}
		public void settabPageReadyEnabled(boolean value)
		{
			tabPageReady().setEnabled(value);
		}
		public void settabPagePreviewEnabled(boolean value)
		{
			tabPagePreview().setEnabled(value);
		}
		public void showtabDocuments()
		{
			tabClinicalNoting().setVisible(false);
			tabPageAssessment().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPageReady().setVisible(false);
			tabPagePreview().setVisible(false);
			tabDocuments().setVisible(true);
		}
		public void showtabClinicalNoting()
		{
			tabDocuments().setVisible(false);
			tabPageAssessment().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPageReady().setVisible(false);
			tabPagePreview().setVisible(false);
			tabClinicalNoting().setVisible(true);
		}
		public void showtabPageAssessment()
		{
			tabDocuments().setVisible(false);
			tabClinicalNoting().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPageReady().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageAssessment().setVisible(true);
		}
		public void showtabPageMedication()
		{
			tabDocuments().setVisible(false);
			tabClinicalNoting().setVisible(false);
			tabPageAssessment().setVisible(false);
			tabPageReady().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageMedication().setVisible(true);
		}
		public void showtabPageReady()
		{
			tabDocuments().setVisible(false);
			tabClinicalNoting().setVisible(false);
			tabPageAssessment().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPagePreview().setVisible(false);
			tabPageReady().setVisible(true);
		}
		public void showtabPagePreview()
		{
			tabDocuments().setVisible(false);
			tabClinicalNoting().setVisible(false);
			tabPageAssessment().setVisible(false);
			tabPageMedication().setVisible(false);
			tabPageReady().setVisible(false);
			tabPagePreview().setVisible(true);
		}

		public tabDocumentsContainer tabDocuments()
		{
			return (tabDocumentsContainer)super.layers.get(0);
		}
		public tabClinicalNotingContainer tabClinicalNoting()
		{
			return (tabClinicalNotingContainer)super.layers.get(1);
		}
		public tabPageAssessmentContainer tabPageAssessment()
		{
			return (tabPageAssessmentContainer)super.layers.get(2);
		}
		public tabPageMedicationContainer tabPageMedication()
		{
			return (tabPageMedicationContainer)super.layers.get(3);
		}
		public tabPageReadyContainer tabPageReady()
		{
			return (tabPageReadyContainer)super.layers.get(4);
		}
		public tabPagePreviewContainer tabPagePreview()
		{
			return (tabPagePreviewContainer)super.layers.get(5);
		}
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuPatientCo = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuPatientCoADDDIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Diagnosis", true, false, null, true, false);
		contextMenus.Clinical.contextMenuPatientCo.add(contextMenus.Clinical.contextMenuPatientCoADDDIAGNOSISItem);
		contextMenus.Clinical.contextMenuPatientCoADDCOMORBIDITYItem = factory.createMenuItem(startControlID.intValue() + 2, "Add co-Morbidity", true, false, null, true, false);
		contextMenus.Clinical.contextMenuPatientCo.add(contextMenus.Clinical.contextMenuPatientCoADDCOMORBIDITYItem);
		form.registerMenu(contextMenus.Clinical.contextMenuPatientCo);
		contextMenus.Clinical.contextMenuProcedureHighMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuProcedureHighMenuADDPROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Procedure", true, false, null, true, false);
		contextMenus.Clinical.contextMenuProcedureHighMenu.add(contextMenus.Clinical.contextMenuProcedureHighMenuADDPROCEDUREItem);
		contextMenus.Clinical.contextMenuProcedureHighMenuADDHIGHCOSTDRUGItem = factory.createMenuItem(startControlID.intValue() + 4, "Add High Cost Drug", true, false, null, true, false);
		contextMenus.Clinical.contextMenuProcedureHighMenu.add(contextMenus.Clinical.contextMenuProcedureHighMenuADDHIGHCOSTDRUGItem);
		form.registerMenu(contextMenus.Clinical.contextMenuProcedureHighMenu);
		contextMenus.Clinical.contextMenuOutOfCountyRecipient = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Clinical.contextMenuOutOfCountyRecipientAddOutOfCountyRecipientItem = factory.createMenuItem(startControlID.intValue() + 5, "Add  Out Of County Recipient", true, false, null, true, false);
		contextMenus.Clinical.contextMenuOutOfCountyRecipient.add(contextMenus.Clinical.contextMenuOutOfCountyRecipientAddOutOfCountyRecipientItem);
		form.registerMenu(contextMenus.Clinical.contextMenuOutOfCountyRecipient);


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 176, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start eDischarge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Link Controls
		RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 672, 8, 168, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to list", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Button btnStart()
	{
		return (Button)super.getControl(6);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(7);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				EDischargeList = new LocalFormName(123151);
				PatientCorrespondenceDiagnosisDialog = new LocalFormName(123165);
				OutOfCountyDialog = new LocalFormName(123184);
			}
			public final FormName EDischargeList;
			public final FormName PatientCorrespondenceDiagnosisDialog;
			public final FormName OutOfCountyDialog;
		}

		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				Information = new ImageHelper(102217, "Images/Core/Information.gif", new Integer(16), new Integer(16));
				InfoEnabled24 = new ImageHelper(102511, "Images/Core/info_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image Information;
			public final ims.framework.utils.Image InfoEnabled24;
		}
		public final CoreImages Core;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class PatientCo implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADDDIAGNOSIS = 1;
				public static final int ADDCOMORBIDITY = 2;
			}
			public void disableAllPatientCoMenuItems()
			{
				this.contextMenuPatientCoADDDIAGNOSISItem.setEnabled(false);
				this.contextMenuPatientCoADDCOMORBIDITYItem.setEnabled(false);
			}
			public void hideAllPatientCoMenuItems()
			{
				this.contextMenuPatientCoADDDIAGNOSISItem.setVisible(false);
				this.contextMenuPatientCoADDCOMORBIDITYItem.setVisible(false);
			}
			private Menu contextMenuPatientCo;
			public ReadOnlyMenuItem getPatientCoADDDIAGNOSISItem()
			{
				return this.contextMenuPatientCoADDDIAGNOSISItem;
			}
			private MenuItem contextMenuPatientCoADDDIAGNOSISItem;
			public ReadOnlyMenuItem getPatientCoADDCOMORBIDITYItem()
			{
				return this.contextMenuPatientCoADDCOMORBIDITYItem;
			}
			private MenuItem contextMenuPatientCoADDCOMORBIDITYItem;
			public final class ProcedureHighMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADDPROCEDURE = 3;
				public static final int ADDHIGHCOSTDRUG = 4;
			}
			public void disableAllProcedureHighMenuMenuItems()
			{
				this.contextMenuProcedureHighMenuADDPROCEDUREItem.setEnabled(false);
				this.contextMenuProcedureHighMenuADDHIGHCOSTDRUGItem.setEnabled(false);
			}
			public void hideAllProcedureHighMenuMenuItems()
			{
				this.contextMenuProcedureHighMenuADDPROCEDUREItem.setVisible(false);
				this.contextMenuProcedureHighMenuADDHIGHCOSTDRUGItem.setVisible(false);
			}
			private Menu contextMenuProcedureHighMenu;
			public ReadOnlyMenuItem getProcedureHighMenuADDPROCEDUREItem()
			{
				return this.contextMenuProcedureHighMenuADDPROCEDUREItem;
			}
			private MenuItem contextMenuProcedureHighMenuADDPROCEDUREItem;
			public ReadOnlyMenuItem getProcedureHighMenuADDHIGHCOSTDRUGItem()
			{
				return this.contextMenuProcedureHighMenuADDHIGHCOSTDRUGItem;
			}
			private MenuItem contextMenuProcedureHighMenuADDHIGHCOSTDRUGItem;
			public final class OutOfCountyRecipient implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddOutOfCountyRecipient = 5;
			}
			public void disableAllOutOfCountyRecipientMenuItems()
			{
				this.contextMenuOutOfCountyRecipientAddOutOfCountyRecipientItem.setEnabled(false);
			}
			public void hideAllOutOfCountyRecipientMenuItems()
			{
				this.contextMenuOutOfCountyRecipientAddOutOfCountyRecipientItem.setVisible(false);
			}
			private Menu contextMenuOutOfCountyRecipient;
			public ReadOnlyMenuItem getOutOfCountyRecipientAddOutOfCountyRecipientItem()
			{
				return this.contextMenuOutOfCountyRecipientAddOutOfCountyRecipientItem;
			}
			private MenuItem contextMenuOutOfCountyRecipientAddOutOfCountyRecipientItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
