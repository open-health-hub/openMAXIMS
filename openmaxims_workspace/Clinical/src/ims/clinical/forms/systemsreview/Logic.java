//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.39 build 2145.28324)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.systemsreview;

import ims.clinical.forms.systemsreview.GenForm.grdSymptomsRow;
import ims.clinical.forms.systemsreview.GenForm.grdSymptomsRowCollection;
import ims.clinical.vo.SystemReviewSymptomVo;
import ims.clinical.vo.SystemReviewSymptomVoCollection;
import ims.clinical.vo.SystemReviewVo;
import ims.clinical.vo.lookups.LookupHelper;
import ims.clinical.vo.lookups.Symptoms;
import ims.clinical.vo.lookups.SymptomsCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	private void initialize() throws FormOpenException
	{
		if (prePopulateSymptomsLookupsGrid() == false)
			throw new FormOpenException("The Symptoms lookup must be configured before this form can be used.");
		
	}
	
	private void updateControlsState()
	{
		boolean isViewMode = FormMode.VIEW.equals(form.getMode());
		boolean bNewVisible = form.getLocalContext().getSystemReview() == null  || form.getLocalContext().getSystemReview().getID_SystemReview() == null;
		
		form.btnNew().setVisible(isViewMode);
		form.btnNew().setEnabled(bNewVisible);
		form.btnUpdate().setVisible(isViewMode && !bNewVisible);
		
	}
	
	private void open() 
	{		
		clearGrid(form.grdSymptoms().getRows());
		
		// Check the global context var got the clinical contacts
		if (form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContactIsNotNull())
		{
			SystemReviewVo voSystemReview = domain.getSystemReview(form.getGlobalContext().Core.getCurrentClinicalContact());
			form.getLocalContext().setSystemReview(voSystemReview);
			populateScreenFromData(voSystemReview);
		}
			
		form.setMode(FormMode.VIEW);
		
		updateControlsState();		
	}
	
	private boolean prePopulateSymptomsLookupsGrid() 
	{			
		return populateGrid();//	WDEV-14945
	}
	
	//	WDEV-14945
	private boolean populateGrid()
	{
		boolean bFound = false;
		form.grdSymptoms().getRows().clear();
		
		SymptomsCollection lkpCollSymptoms = LookupHelper.getSymptoms(domain.getLookupService());
		if(lkpCollSymptoms == null)
			return bFound;
		
		TreeNode[] nodes = lkpCollSymptoms.getRootNodes();
		
		if(nodes.length < lkpCollSymptoms.size())
			bFound = true;
		
		for(int x = 0; x < nodes.length; x++)
		{
			if(nodes[x] instanceof Symptoms)
			{
				addRow(null, (Symptoms) nodes[x]);
			}
		}
		
		form.grdSymptoms().expandAll();
		
		return bFound;
	}
	
	//	WDEV-14945
	private void addRow(GenForm.grdSymptomsRow parentRow, Symptoms value)
	{
		if(value == null)
			return;
		
		if(value.getParent() != null && value.getParent().getParent() != null)
			return;
		
		grdSymptomsRow row = null;
		
		if(parentRow == null)
			row = form.grdSymptoms().getRows().newRow();
		else
			row = parentRow.getRows().newRow();
		
		row.setcolSymptom((Symptoms) value);
		
		if(value.getExpandedImage() != null)
			row.setExpandedImage(value.getExpandedImage());
			
		if(value.getCollapsedImage() != null)
			row.setCollapsedImage(value.getCollapsedImage());
		
		row.setIsParentRow(value.getParent() == null);
		row.setReadOnly(!(value.getParent() != null && value.getParent().getParent() == null));	
		row.setcolSelectReadOnly(!(value.getParent() != null && value.getParent().getParent() == null));
		
		TreeNode[] nodes = value.getChildren();
		for(int x = 0; x < nodes.length; x++)
		{
			if(nodes[x] instanceof Symptoms)
			{
				addRow(row, (Symptoms) nodes[x]);
			}
		}
	}

	/**
	 * Gets the collection of symptom vo's from the local context.
	 * Looks at each row in the grid that has a parent and compares the lookup element of the vo with the lookup 
	 * column in the grid. If a match is found the other columns are populated with their corresponding vo fields. 
	 */	
	
	protected void populateScreenFromData(SystemReviewVo voSystemReview)
	{
		if(voSystemReview == null)
			return;
				
		SystemReviewSymptomVoCollection voCollSymptoms = voSystemReview.getSymptomsIsNotNull() ? voSystemReview.getSymptoms() : null;
		if(voCollSymptoms != null)
		{
			for(int i = 0; i < voCollSymptoms.size(); i++)
			{
				nextSymptomVo:
				for (int j=0; j < form.grdSymptoms().getRows().size(); j++)					
				{
					for (int k=0; k < form.grdSymptoms().getRows().get(j).getRows().size(); k++)
					{
						GenForm.grdSymptomsRow childRow =  form.grdSymptoms().getRows().get(j).getRows().get(k);							
						if (voCollSymptoms.get(i).getSymptom().equals(childRow.getcolSymptom()))
						{
							childRow.setValue(voCollSymptoms.get(i));
							childRow.setcolSymptom(voCollSymptoms.get(i).getSymptom());
							childRow.setcolSelect(voCollSymptoms.get(i).getAbsentPresent());
							childRow.setcolDuration(voCollSymptoms.get(i).getDurationValue());
							childRow.setcolUnitOfDuration(voCollSymptoms.get(i).getDurationUnit());
							
							break nextSymptomVo;
						}
					}
				}
			}
		}
	}
	
	
	
	
	protected ims.clinical.vo.SystemReviewVo populateDataFromScreen(SystemReviewVo voSystemReview)
	{
		if(voSystemReview == null)
			voSystemReview = new SystemReviewVo();

		if (voSystemReview.getSymptoms() == null)		
			voSystemReview.setSymptoms(new SystemReviewSymptomVoCollection());
		else
			voSystemReview.getSymptoms().clear();
		
		for (int i=0; i < form.grdSymptoms().getRows().size(); i++)
		{
			for (int j=0; j < form.grdSymptoms().getRows().get(i).getRows().size(); j++)
			{							
				GenForm.grdSymptomsRow childRow = form.grdSymptoms().getRows().get(i).getRows().get(j);
				if (childRow.getcolSelect() != null)
				{
					SystemReviewSymptomVo voSystemReviewSymptom = childRow.getValue();
					if(voSystemReviewSymptom == null)
						voSystemReviewSymptom = new SystemReviewSymptomVo();
		
					voSystemReviewSymptom.setSymptom(childRow.getcolSymptom());
					voSystemReviewSymptom.setAbsentPresent(childRow.getcolSelect());
					voSystemReviewSymptom.setDurationValue(childRow.getcolDuration());
					voSystemReviewSymptom.setDurationUnit(childRow.getcolUnitOfDuration());
					
					if(voSystemReview.getSymptomsIsNotNull())
						voSystemReview.getSymptoms().add(voSystemReviewSymptom);
				}
			}
		}

		return voSystemReview;
	}
	
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		updateControlsState();
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		updateControlsState();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SystemReviewVo voSystemReview = new SystemReviewVo();
		voSystemReview = form.getLocalContext().getSystemReview();
		voSystemReview = populateDataFromScreen(voSystemReview);
		voSystemReview.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		String[] messages = voSystemReview.validate();
		if (messages != null)
		{
			engine.showErrors("Validation Errors", messages);
			return;
		}

		if (validateSymptoms() == false)
		{
			engine.showMessage("Duration or Duration (Unit) entries must be combined with an Absent/Present selection.");
			return;
		}
						
		try
		{
			//save and update local context
			voSystemReview = domain.saveSystemReview(voSystemReview);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();			
			return;				
		}
		catch (DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			open();			
			return;			
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			open();			
			return;	
		}
			
		form.getLocalContext().setSystemReview(voSystemReview);
		open();					

	}
	private boolean validateSymptoms()
	{		
		boolean bDurationsAreSelected = true;
		// WDEV-336 Want to return an error of durations/duration units are entered with no Absent/Present selection on the corresponding row.
		outer:
		for (int i=0; i < form.grdSymptoms().getRows().size(); i++)					
		{
			for (int j=0; j < form.grdSymptoms().getRows().get(i).getRows().size(); j++)
			{
				// selections only available on chile rows..
				GenForm.grdSymptomsRow symptomsRow =  form.grdSymptoms().getRows().get(i).getRows().get(j);
				if (symptomsRow != null)
				{
					if (symptomsRow.getcolDuration() != null || symptomsRow.getcolUnitOfDuration() != null)
					{
						if (symptomsRow.getcolSelect() == null)
						{
							bDurationsAreSelected = false;
							break outer;
						}
					}	
				}
			}
		}
		
		return bDurationsAreSelected;
		
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{ 				
		open();
		form.setMode(FormMode.VIEW);		

	}
	private void clearGrid(grdSymptomsRowCollection collSymptomsRow) 
	{
		if (collSymptomsRow != null)
		{
			for (int i=0; i < collSymptomsRow.size(); i++)
			{		
				form.grdSymptoms().getRows().get(i).setValue(null);
				form.grdSymptoms().getRows().get(i).setcolSelect(null);
				form.grdSymptoms().getRows().get(i).setcolDuration(null);
				form.grdSymptoms().getRows().get(i).setcolUnitOfDuration(null);

				if (form.grdSymptoms().getRows().get(i).getRows().size() > 0)
				{
					for (int j=0; j < form.grdSymptoms().getRows().get(i).getRows().size(); j++)
					{
						form.grdSymptoms().getRows().get(i).getRows().get(j).setValue(null);
						form.grdSymptoms().getRows().get(i).getRows().get(j).setcolSelect(null);
						form.grdSymptoms().getRows().get(i).getRows().get(j).setcolDuration(null);
						form.grdSymptoms().getRows().get(i).getRows().get(j).setcolUnitOfDuration(null);
						
					}
				}
			}
		}			
	}
}
