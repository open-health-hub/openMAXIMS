//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.edischargeopsprocscomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbLateralityComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.LateralityLRB getValue()
			{
				return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.LateralityLRB value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class grpProcedureTypeRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 232, 8, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "All Procedures", startTabIndex.intValue() + 3);
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 118, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 2);
			}
			public void setText(grpProcedureTypeEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public grpProcedureTypeEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return grpProcedureTypeEnumeration.None;
					case 0: return grpProcedureTypeEnumeration.rdoAll;
					case 1: return grpProcedureTypeEnumeration.rdoSpecialty;
				}
				return null;
			}
			public void setValue(grpProcedureTypeEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(grpProcedureTypeEnumeration.None.id);
			}
			public boolean isEnabled(grpProcedureTypeEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(grpProcedureTypeEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(grpProcedureTypeEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(grpProcedureTypeEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class grpProcedureTypeEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static grpProcedureTypeEnumeration None = new grpProcedureTypeEnumeration(-1);
			public static grpProcedureTypeEnumeration rdoAll = new grpProcedureTypeEnumeration(0);
			public static grpProcedureTypeEnumeration rdoSpecialty = new grpProcedureTypeEnumeration(1);
			private grpProcedureTypeEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((grpProcedureTypeEnumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 120, 93, 368, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ims.framework.FormUiLogic m_ccPerformedByForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 1005, skipContextValidation);
			//ims.framework.Control m_ccPerformedByControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(120), new Integer(93), new Integer(368), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1005), m_ccPerformedByForm, instance1 } );
			ims.framework.Control m_ccPerformedByControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1005), m_ccPerformedByForm, instance1, Boolean.FALSE } );
			super.addControl(m_ccPerformedByControl);
			Menu[] menus1 = m_ccPerformedByForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 488, 124, 360, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_ccAuthorForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper4.getSize(), instance2, startTabIndex.intValue() + 2011, skipContextValidation);
			//ims.framework.Control m_ccAuthorControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(488), new Integer(124), new Integer(360), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2011), m_ccAuthorForm, instance2 } );
			ims.framework.Control m_ccAuthorControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2011), m_ccAuthorForm, instance2, Boolean.FALSE } );
			super.addControl(m_ccAuthorControl);
			Menu[] menus2 = m_ccAuthorForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
			ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 842, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_ccProcedureForm = loader.loadComponent(123133, appForm, startControlID * 10 + 3000, anchoringHelper5.getSize(), instance3, startTabIndex.intValue() + 4, skipContextValidation);
			//ims.framework.Control m_ccProcedureControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(8), new Integer(24), new Integer(842), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_ccProcedureForm, instance3 } );
			ims.framework.Control m_ccProcedureControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_ccProcedureForm, instance3, Boolean.FALSE } );
			super.addControl(m_ccProcedureControl);
			Menu[] menus3 = m_ccProcedureForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus3.length; x++)
			{
				form.registerMenu(menus3[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 256, 159, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Performed:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 256, 127, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Performed:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 128, 192, 248, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 192, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 159, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Site (Text):", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 127, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 95, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Performed By:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 157, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2007), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// PartialDateBox Controls
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 360, 125, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 120, 125, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 2006), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbLateralityTemp);
			cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
			super.addComboBox(cmbLaterality);
	
			// Time Controls
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 360, 157, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2009), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
	
			// RadioButton Controls
			RadioButton tmpgrpProcedureType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpgrpProcedureType);
			grpProcedureTypeRadioButton grpProcedureType = (grpProcedureTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpProcedureTypeRadioButton.class, tmpgrpProcedureType);
			grpProcedureType.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(grpProcedureType);
		}
		public ims.core.forms.mosquery.IComponent ccPerformedBy()
		{
			return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setccPerformedByValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setccPerformedByVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean isccPerformedByVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setccPerformedByEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean isccPerformedByEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
		public ims.core.forms.authoringinfo.IComponent ccAuthor()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
		}
		public void setccAuthorValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
		}
		public void setccAuthorVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setVisible(value);
		}
		public boolean isccAuthorVisible()
		{
			return ((ims.framework.Control)super.getControl(1)).isVisible();
		}
		public void setccAuthorEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setEnabled(value);
		}
		public boolean isccAuthorEnabled()
		{
			return ((ims.framework.Control)super.getControl(1)).isEnabled();
		}
		public ims.clinical.forms.clinicalcoding.IComponent ccProcedure()
		{
			return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
		}
		public void setccProcedureValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
		}
		public void setccProcedureVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setVisible(value);
		}
		public boolean isccProcedureVisible()
		{
			return ((ims.framework.Control)super.getControl(2)).isVisible();
		}
		public void setccProcedureEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setEnabled(value);
		}
		public boolean isccProcedureEnabled()
		{
			return ((ims.framework.Control)super.getControl(2)).isEnabled();
		}
		public Label lbl1()
		{
			return (Label)super.getControl(3);
		}
		public Label lbl5()
		{
			return (Label)super.getControl(4);
		}
		public Label lblResponsible()
		{
			return (Label)super.getControl(5);
		}
		public Label lbl9()
		{
			return (Label)super.getControl(6);
		}
		public TextBox txtSite()
		{
			return (TextBox)super.getControl(10);
		}
		public PartialDateBox pdtPerformed()
		{
			return (PartialDateBox)super.getControl(11);
		}
		public cmbLateralityComboBox cmbLaterality()
		{
			return (cmbLateralityComboBox)super.getComboBox(0);
		}
		public TimeControl timProc()
		{
			return (TimeControl)super.getControl(13);
		}
		public grpProcedureTypeRadioButton grpProcedureType()
		{
			return (grpProcedureTypeRadioButton)super.getRadioButton(0);
		}
	}
	public static class grdProcsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProcsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColProcReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColProcReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColProcOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColProc(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColProc()
		{
			return (String)super.row.get(0);
		}
		public void setColProc(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColProcTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDateOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColDate(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.framework.utils.PartialDate getColDate()
		{
			return (ims.framework.utils.PartialDate)super.row.get(1);
		}
		public void setColDate(ims.framework.utils.PartialDate value)
		{
			super.row.set(1, value);
		}
		public void setCellColDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColAuthoringHCPDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColAuthoringHCPDateTimeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColAuthoringHCPDateTimeOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColAuthoringHCPDateTime(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColAuthoringHCPDateTime()
		{
			return (String)super.row.get(2);
		}
		public void setColAuthoringHCPDateTime(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColAuthoringHCPDateTimeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColIncludeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColIncludeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColIncludeOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColInclude(String value)
		{
			super.row.setTooltip(3, value);
		}
		public boolean getColInclude()
		{
			return ((Boolean)super.row.get(3)).booleanValue();
		}
		public void setColInclude(boolean value)
		{
			super.row.set(3, new Boolean(value));
		}
		public void setCellColIncludeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.core.vo.PatientProcedureProcsComponentLiteVo getValue()
		{
			return (ims.core.vo.PatientProcedureProcsComponentLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientProcedureProcsComponentLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProcsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProcsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProcsRow get(int index)
		{
			return new grdProcsRow(super.collection.get(index));
		}
		public grdProcsRow newRow()
		{
			return new grdProcsRow(super.collection.newRow());
		}
		public grdProcsRow newRow(boolean autoSelect)
		{
			return new grdProcsRow(super.collection.newRow(autoSelect));
		}
		public grdProcsRow newRowAt(int index)
		{
			return new grdProcsRow(super.collection.newRowAt(index));
		}
		public grdProcsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProcsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProcsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.PatientProcedureProcsComponentLiteVoCollection getValues()
		{
			ims.core.vo.PatientProcedureProcsComponentLiteVoCollection listOfValues = new ims.core.vo.PatientProcedureProcsComponentLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientProcedureProcsComponentLiteVo getValue()
		{
			return (ims.core.vo.PatientProcedureProcsComponentLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientProcedureProcsComponentLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdProcsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProcsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProcsRowCollection getRows()
		{
			return new grdProcsRowCollection(super.grid.getRows());
		}
		public grdProcsRow getRowByValue(ims.core.vo.PatientProcedureProcsComponentLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProcsRow(row);
		}
		public void setColProcHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColProcHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColAuthoringHCPDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColAuthoringHCPDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColIncludeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColIncludeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuProcedure = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuProcedureADDItem = factory.createMenuItem(startControlID.intValue() + 1, "New Procedure", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200006)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureADDItem);
		contextMenus.contextMenuProcedureUPDATEItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Procedure", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200007)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureUPDATEItem);
		contextMenus.contextMenuProcedurePERFORMEDItem = factory.createMenuItem(startControlID.intValue() + 3, "Mark Procedure as Performed", true, false, new Integer(102209), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200009)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedurePERFORMEDItem);
		contextMenus.contextMenuProcedureVIEWASSOCIATIONSItem = factory.createMenuItem(startControlID.intValue() + 4, "View Associations", true, false, new Integer(102266), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200010)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureVIEWASSOCIATIONSItem);
		contextMenus.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 5, "New Intra Operative Details", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200001)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 6, "View\\Edit Intra Operative Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200002)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 7, "New Cataract Intra Operative Details", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200003)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 8, "View\\Edit Cataract Intra Operative Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200004)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureRIEItem = factory.createMenuItem(startControlID.intValue() + 9, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200005)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureRIEItem);
		contextMenus.contextMenuProcedureCANCELItem = factory.createMenuItem(startControlID.intValue() + 10, "Mark Procedure as Cancelled", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200011)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureCANCELItem);
		form.registerMenu(contextMenus.contextMenuProcedure);


		// Container Clasess
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 0, 336, 856, 232, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, null, new Boolean(false)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(856, 232);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Label Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Performed Procedures", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 104, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 3021), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 3019), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 757, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 3017), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 672, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 3015), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 760, 576, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 3012), ControlState.UNKNOWN, ControlState.HIDDEN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Complete", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 816, 288, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdProcsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuProcedure, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdProcsTemp);
		grdProcsGrid grdProcs = (grdProcsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProcsGrid.class, m_grdProcsTemp);
		grdProcs.addStringColumn("Procedure Description", 0, 0, 400, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProcs.addPartialDateColumn("Date", 0, 0, 100, true, true, null, false, 0, true);
		grdProcs.addStringColumn("Authoring HCP, Date/Time", 0, 0, 220, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProcs.addBoolColumn("Include", 0, 0, -1, false, true, 0, true);
		super.addGrid(grdProcs);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(2);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public CheckBox chkComplete()
	{
		return (CheckBox)super.getControl(6);
	}
	public grdProcsGrid grdProcs()
	{
		return (grdProcsGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Clinical = new ClinicalForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				EDischargeOpsProcsComponent = new LocalFormName(102301);
			}
			public final FormName EDischargeOpsProcsComponent;
		}

		public CoreForms Core;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Tick;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PatientProcedureVo = new ims.framework.ContextVariable("PatientProcedureVo", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier + "");
			cxl_CodingItemTextSubmitted = new ims.framework.ContextVariable("CodingItemTextSubmitted", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__CodingItemTextSubmitted_" + componentIdentifier + "");
			cxl_Hcp = new ims.framework.ContextVariable("Hcp", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__Hcp_" + componentIdentifier + "");
			cxl_IsIncludedChanged = new ims.framework.ContextVariable("IsIncludedChanged", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__IsIncludedChanged_" + componentIdentifier + "");
			cxl_IsSaveOrEdit = new ims.framework.ContextVariable("IsSaveOrEdit", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__IsSaveOrEdit_" + componentIdentifier + "");
			cxl_bInitialised = new ims.framework.ContextVariable("bInitialised", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__bInitialised_" + componentIdentifier + "");
			cxl_isReadonly = new ims.framework.ContextVariable("isReadonly", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__isReadonly_" + componentIdentifier + "");
			cxl_LastEvent = new ims.framework.ContextVariable("LastEvent", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__LastEvent_" + componentIdentifier + "");
			cxl_STHKSummary = new ims.framework.ContextVariable("STHKSummary", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__STHKSummary_" + componentIdentifier + "");
			cxl_ProcedureToBeRIE = new ims.framework.ContextVariable("ProcedureToBeRIE", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier + "");
			cxl_STHKSummaryVo = new ims.framework.ContextVariable("STHKSummaryVo", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__STHKSummaryVo_" + componentIdentifier + "");
			cxl_CompleteMessageBoxId = new ims.framework.ContextVariable("CompleteMessageBoxId", prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__CompleteMessageBoxId_" + componentIdentifier + "");
		}
		
		public boolean getPatientProcedureVoIsNotNull()
		{
			return !cxl_PatientProcedureVo.getValueIsNull(context);
		}
		public ims.core.vo.PatientProcedureProcsComponentVo getPatientProcedureVo()
		{
			return (ims.core.vo.PatientProcedureProcsComponentVo)cxl_PatientProcedureVo.getValue(context);
		}
		public void setPatientProcedureVo(ims.core.vo.PatientProcedureProcsComponentVo value)
		{
			cxl_PatientProcedureVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientProcedureVo = null;
		public boolean getCodingItemTextSubmittedIsNotNull()
		{
			return !cxl_CodingItemTextSubmitted.getValueIsNull(context);
		}
		public String getCodingItemTextSubmitted()
		{
			return (String)cxl_CodingItemTextSubmitted.getValue(context);
		}
		public void setCodingItemTextSubmitted(String value)
		{
			cxl_CodingItemTextSubmitted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CodingItemTextSubmitted = null;
		public boolean getHcpIsNotNull()
		{
			return !cxl_Hcp.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getHcp()
		{
			return (ims.core.vo.HcpLiteVo)cxl_Hcp.getValue(context);
		}
		public void setHcp(ims.core.vo.HcpLiteVo value)
		{
			cxl_Hcp.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Hcp = null;
		public boolean getIsIncludedChangedIsNotNull()
		{
			return !cxl_IsIncludedChanged.getValueIsNull(context);
		}
		public ims.core.vo.PatientProcedureProcsComponentLiteVoCollection getIsIncludedChanged()
		{
			return (ims.core.vo.PatientProcedureProcsComponentLiteVoCollection)cxl_IsIncludedChanged.getValue(context);
		}
		public void setIsIncludedChanged(ims.core.vo.PatientProcedureProcsComponentLiteVoCollection value)
		{
			cxl_IsIncludedChanged.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsIncludedChanged = null;
		public boolean getIsSaveOrEditIsNotNull()
		{
			return !cxl_IsSaveOrEdit.getValueIsNull(context);
		}
		public Boolean getIsSaveOrEdit()
		{
			return (Boolean)cxl_IsSaveOrEdit.getValue(context);
		}
		public void setIsSaveOrEdit(Boolean value)
		{
			cxl_IsSaveOrEdit.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsSaveOrEdit = null;
		public boolean getbInitialisedIsNotNull()
		{
			return !cxl_bInitialised.getValueIsNull(context);
		}
		public Boolean getbInitialised()
		{
			return (Boolean)cxl_bInitialised.getValue(context);
		}
		public void setbInitialised(Boolean value)
		{
			cxl_bInitialised.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bInitialised = null;
		public boolean getisReadonlyIsNotNull()
		{
			return !cxl_isReadonly.getValueIsNull(context);
		}
		public Boolean getisReadonly()
		{
			return (Boolean)cxl_isReadonly.getValue(context);
		}
		public void setisReadonly(Boolean value)
		{
			cxl_isReadonly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isReadonly = null;
		public boolean getLastEventIsNotNull()
		{
			return !cxl_LastEvent.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.EDischargeLastEvent getLastEvent()
		{
			return (ims.clinical.vo.enums.EDischargeLastEvent)cxl_LastEvent.getValue(context);
		}
		public void setLastEvent(ims.clinical.vo.enums.EDischargeLastEvent value)
		{
			cxl_LastEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastEvent = null;
		public boolean getSTHKSummaryIsNotNull()
		{
			return !cxl_STHKSummary.getValueIsNull(context);
		}
		public ims.edischarge.vo.SummaryRefVo getSTHKSummary()
		{
			return (ims.edischarge.vo.SummaryRefVo)cxl_STHKSummary.getValue(context);
		}
		public void setSTHKSummary(ims.edischarge.vo.SummaryRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'STHKSummary' RefVo context variable.");
			if(value == null)
				cxl_STHKSummary.setValue(context, null);
			else
				cxl_STHKSummary.setValue(context, new ims.edischarge.vo.SummaryRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_STHKSummary = null;
		public boolean getProcedureToBeRIEIsNotNull()
		{
			return !cxl_ProcedureToBeRIE.getValueIsNull(context);
		}
		public ims.core.vo.PatientProcedureProcsComponentLiteVo getProcedureToBeRIE()
		{
			return (ims.core.vo.PatientProcedureProcsComponentLiteVo)cxl_ProcedureToBeRIE.getValue(context);
		}
		public void setProcedureToBeRIE(ims.core.vo.PatientProcedureProcsComponentLiteVo value)
		{
			cxl_ProcedureToBeRIE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ProcedureToBeRIE = null;
		public boolean getSTHKSummaryVoIsNotNull()
		{
			return !cxl_STHKSummaryVo.getValueIsNull(context);
		}
		public ims.clinical.vo.EDischargeSTHKSummaryForProcComponentVo getSTHKSummaryVo()
		{
			return (ims.clinical.vo.EDischargeSTHKSummaryForProcComponentVo)cxl_STHKSummaryVo.getValue(context);
		}
		public void setSTHKSummaryVo(ims.clinical.vo.EDischargeSTHKSummaryForProcComponentVo value)
		{
			cxl_STHKSummaryVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_STHKSummaryVo = null;
		public boolean getCompleteMessageBoxIdIsNotNull()
		{
			return !cxl_CompleteMessageBoxId.getValueIsNull(context);
		}
		public Integer getCompleteMessageBoxId()
		{
			return (Integer)cxl_CompleteMessageBoxId.getValue(context);
		}
		public void setCompleteMessageBoxId(Integer value)
		{
			cxl_CompleteMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CompleteMessageBoxId = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class Procedure implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
			public static final int UPDATE = 2;
			public static final int PERFORMED = 3;
			public static final int VIEWASSOCIATIONS = 4;
			public static final int NEWINTRAOPERATIVEDETAILS = 5;
			public static final int EDITINTRAOPERATIVEDETAILS = 6;
			public static final int NEWCATARACTINTRAOPERATIVEDETAILS = 7;
			public static final int EDITCATARACTINTRAOPERATIVEDETAILS = 8;
			public static final int RIE = 9;
			public static final int CANCEL = 10;
		}
		public void disableAllProcedureMenuItems()
		{
			this.contextMenuProcedureADDItem.setEnabled(false);
			this.contextMenuProcedureUPDATEItem.setEnabled(false);
			this.contextMenuProcedurePERFORMEDItem.setEnabled(false);
			this.contextMenuProcedureVIEWASSOCIATIONSItem.setEnabled(false);
			this.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureRIEItem.setEnabled(false);
			this.contextMenuProcedureCANCELItem.setEnabled(false);
		}
		public void hideAllProcedureMenuItems()
		{
			this.contextMenuProcedureADDItem.setVisible(false);
			this.contextMenuProcedureUPDATEItem.setVisible(false);
			this.contextMenuProcedurePERFORMEDItem.setVisible(false);
			this.contextMenuProcedureVIEWASSOCIATIONSItem.setVisible(false);
			this.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureRIEItem.setVisible(false);
			this.contextMenuProcedureCANCELItem.setVisible(false);
		}
		private Menu contextMenuProcedure;
		public ReadOnlyMenuItem getProcedureADDItem()
		{
			return this.contextMenuProcedureADDItem;
		}
		private MenuItem contextMenuProcedureADDItem;
		public ReadOnlyMenuItem getProcedureUPDATEItem()
		{
			return this.contextMenuProcedureUPDATEItem;
		}
		private MenuItem contextMenuProcedureUPDATEItem;
		public ReadOnlyMenuItem getProcedurePERFORMEDItem()
		{
			return this.contextMenuProcedurePERFORMEDItem;
		}
		private MenuItem contextMenuProcedurePERFORMEDItem;
		public ReadOnlyMenuItem getProcedureVIEWASSOCIATIONSItem()
		{
			return this.contextMenuProcedureVIEWASSOCIATIONSItem;
		}
		private MenuItem contextMenuProcedureVIEWASSOCIATIONSItem;
		public ReadOnlyMenuItem getProcedureNEWINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureEDITINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureRIEItem()
		{
			return this.contextMenuProcedureRIEItem;
		}
		private MenuItem contextMenuProcedureRIEItem;
		public MenuItem getProcedureCANCELItem()
		{
			return this.contextMenuProcedureCANCELItem;
		}
		private MenuItem contextMenuProcedureCANCELItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[160];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTETYPE", "NoteType");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEW", "ForReview");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalNotesShort", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-ID", "ID_SoapNote");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-SUBJECTIVENOTE", "SubjectiveNote");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-OBJECTIVENOTE", "ObjectiveNote");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-ANALYSISNOTE", "AnalysisNote");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-PLANNOTE", "PlanNote");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-CLINICALNOTE", "ClinicalNote");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Clinical.UnsavedSOAPINformation", "BO-1072100036-CARECONTEXT", "CareContext");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCDATE", "ProcDate");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-SITETEXT", "SiteText");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCLATERALITY", "ProcLaterality");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCTIME", "ProcTime");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-NOTES", "Notes");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCEDUREURGENCY", "ProcedureUrgency");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-DATEPLANNED", "DatePlanned");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PLANNEDPROC", "PlannedProc");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCSITE", "ProcSite");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PEFORMEDBY", "PeformedBy");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCEDUREINTENT", "ProcedureIntent");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-LOCATION", "Location");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-SPECIALTY", "Specialty");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-CONFIRMEDSTATUS", "ConfirmedStatus");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-EXCLUDEFROMOTHERS", "ExcludeFromOthers");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCLOCATION", "ProcLocation");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-CANCELLEDREASON", "CancelledReason");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-SURGEONSGRADE", "SurgeonsGrade");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCENDDATE", "ProcEndDate");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-PROCENDTIME", "ProcEndTime");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedPatientProcedure", "BO-1003100017-SIGNIFPROC", "SignifProc");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromNursingAdmission", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromPatientSummary", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-ID", "ID_PatientProcedure");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PROCDATE", "ProcDate");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-SITETEXT", "SiteText");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PROCLATERALITY", "ProcLaterality");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PROCTIME", "ProcTime");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-NOTES", "Notes");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PROCEDUREURGENCY", "ProcedureUrgency");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-DATEPLANNED", "DatePlanned");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PLANNEDPROC", "PlannedProc");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PROCSITE", "ProcSite");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PEFORMEDBY", "PeformedBy");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PROCEDUREINTENT", "ProcedureIntent");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-PROCENDDATE", "ProcEndDate");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__PatientProcedureVo_" + componentIdentifier, "BO-1003100017-SIGNIFPROC", "SignifProc");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__Hcp_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__Hcp_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__Hcp_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__Hcp_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__Hcp_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__STHKSummary_" + componentIdentifier, "BO-1099100018-ID", "ID_Summary");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-ID", "ID_PatientProcedure");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__ProcedureToBeRIE_" + componentIdentifier, "BO-1003100017-PROCDATE", "ProcDate");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.EDischargeOpsProcsComponent.__internal_x_context__STHKSummaryVo_" + componentIdentifier, "BO-1099100018-ID", "ID_Summary");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
