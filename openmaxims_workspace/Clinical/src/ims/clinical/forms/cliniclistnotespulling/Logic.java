//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.cliniclistnotespulling;

import ims.clinical.vo.ClinicalNotesPullingSearchCriteriaVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.utils.Date;
import ims.icp.vo.OutpatientEpisodeWithICPInfoVo;
import ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final String COLUMN_ICP           = "0";
	private static final String COLUMN_IDENTIFIER    = "1";
	private static final String COLUMN_SURNAME       = "2";
	private static final String COLUMN_FORENAME      = "3";
	private static final String COLUMN_SEX           = "4";
	private static final String COLUMN_DOB           = "5";
	private static final String COLUMN_CONSULTANT    = "6";
	private static final String COLUMN_ACTIVITY_TYPE = "7";
	private static final String COLUMN_APPT_TIME     = "8";
	private static final String COLUMN_STATUS        = "9";
	private static final String COLUMN_CASE_NOTES    = "10";
	private static final String COLUMN_SELECT        = "11";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		refreshSearchCriteria(form.getGlobalContext().Clinical.getClinicalNotesPullingSearchCriteria());
	}

	private void initialise()
	{
		form.dteDate().setValue(new Date());
		loadHospitals();

		createDynamicGrid();

		updateControlsState();
	}

	private void createDynamicGrid()
	{
		form.dyngrdList().getRows().clear();
		form.dyngrdList().setUnselectable(Boolean.TRUE);
		form.dyngrdList().setHeaderHeight(40);

		DynamicGridColumn columnName = form.dyngrdList().getColumns().newColumn(" ", COLUMN_ICP);

		columnName.setWidth(30);

		columnName.setAlignment(Alignment.CENTER);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
		columnName.setSortMode(SortMode.MANUAL);

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		columnName = form.dyngrdList().getColumns().newColumn(dispIdType.getText(), COLUMN_IDENTIFIER);
		columnName.setWidth(86);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
		columnName.setSortMode(SortMode.AUTOMATIC);

		columnName = form.dyngrdList().getColumns().newColumn("Surname", COLUMN_SURNAME);
		columnName.setWidth(95);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
		columnName.setSortMode(SortMode.AUTOMATIC);

		columnName = form.dyngrdList().getColumns().newColumn("Forename", COLUMN_FORENAME);
		columnName.setWidth(95);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
		columnName.setSortMode(SortMode.AUTOMATIC);

		columnName = form.dyngrdList().getColumns().newColumn("Sex", COLUMN_SEX);
		columnName.setWidth(45);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
		columnName.setSortMode(SortMode.AUTOMATIC);

		columnName = form.dyngrdList().getColumns().newColumn("D.O.B", COLUMN_DOB);
		columnName.setWidth(67);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
		columnName.setSortMode(SortMode.MANUAL);

		columnName = form.dyngrdList().getColumns().newColumn("Consultant", COLUMN_CONSULTANT);
		columnName.setWidth(103);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
		columnName.setSortMode(SortMode.AUTOMATIC);

		columnName = form.dyngrdList().getColumns().newColumn("Activity Type", COLUMN_ACTIVITY_TYPE);
		columnName.setWidth(100);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
		columnName.setSortMode(SortMode.AUTOMATIC);

		columnName = form.dyngrdList().getColumns().newColumn("Appt.\nTime", COLUMN_APPT_TIME);
		columnName.setWidth(45);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
		columnName.setSortMode(SortMode.AUTOMATIC);

		columnName = form.dyngrdList().getColumns().newColumn("Status", COLUMN_STATUS);
		columnName.setWidth(87);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
		columnName.setSortMode(SortMode.AUTOMATIC);

		columnName = form.dyngrdList().getColumns().newColumn("Case\nNotes", COLUMN_CASE_NOTES);
		columnName.setWidth(40);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);

		columnName = form.dyngrdList().getColumns().newColumn("Select", COLUMN_SELECT);
		columnName.setAlignment(Alignment.CENTER);
		columnName.setWidth(-1);
		columnName.setReadOnly(true);
		columnName.setCanGrow(Boolean.TRUE);
	}

	private void loadHospitals()
	{
		LocationLiteVoCollection hospitals = domain.getActiveHospitals(domain.getMosUser() instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) domain.getMosUser() : null);

		if (hospitals != null)
		{
			for (LocationLiteVo item : hospitals)
			{
				form.cmbHospital().newRow(item, item.getName());

				if (engine.getCurrentLocation() != null)
				{
					if (engine.getCurrentLocation().getID() == item.getID_Location().intValue() && form.dteDate().getValue() != null)
					{
						form.cmbHospital().setValue(item);
						loadClinics(false);
					}
				}
			}
		}
	}

	private void loadClinics(boolean b)
	{
		if (form.cmbHospital().getValue() == null)
			return;

		form.cmbClinic().clear();

		SessionShortVoCollection listClinics = domain.listClinics(form.cmbHospital().getValue().getID_Location(), form.dteDate().getValue());

		if (listClinics != null)
		{
			for (SessionShortVo item : listClinics)
			{
				StringBuffer sb = new StringBuffer();
				sb.append(item.getName());
				sb.append(" - ");
				sb.append(item.getSessionDate());

				form.cmbClinic().newRow(item, sb.toString());

				if (engine.getCurrentLocation() != null && item.getSchLocationIsNotNull())
				{
					if (engine.getCurrentLocation().getID() == item.getSchLocation().getID())
						form.cmbClinic().setValue(item);
				}
			}

			if (listClinics.size() == 1)
				form.cmbClinic().setValue(listClinics.get(0));

			form.cmbClinic().setTooltip(form.cmbClinic().getValue() != null ? form.cmbClinic().getValue().getDescription() : null);
		}

	}

	private void updateControlsState()
	{
		// TODO Auto-generated method stub

	}

	private void refreshSearchCriteria(ClinicalNotesPullingSearchCriteriaVo searchCriteria)
	{
		if (searchCriteria == null)
			return;

		form.cmbHospital().setValue((LocationLiteVo) searchCriteria.getHospital());
		form.dteDate().setValue(searchCriteria.getDate());

		if (form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(searchCriteria.getClinicIsNotNull());

		form.cmbClinic().setValue((SessionShortVo) searchCriteria.getClinic());

		search();

	}

	private void search()
	{
		if (!validateSearch())
			return;

		form.dyngrdList().getRows().clear();
		form.chkSelectAll().setValue(false);

		ClinicalNotesPullingSearchCriteriaVo filterVo = new ClinicalNotesPullingSearchCriteriaVo();

		filterVo = populateSearchFilter(filterVo);

		form.getGlobalContext().Clinical.setClinicalNotesPullingSearchCriteria(filterVo);

		OutpatientEpisodeWithICPInfoVoCollection list = domain.listOPEpisodes(filterVo);

		if (list == null || list.size() == 0)
		{
			engine.showMessage("No records match your search criteria.", "No data found", MessageButtons.OK, MessageIcon.WARNING);
			form.lblTotal().setValue("Total: 0");
			updateControlsState();
			return;
		}

		list.sort(OutpatientEpisodeWithICPInfoVo.getTimeComparator(SortOrder.ASCENDING));

		form.lblTotal().setValue("Total: " + list.size());
		populateGrid(list);

		updateControlsState();

	}

	private void populateGrid(OutpatientEpisodeWithICPInfoVoCollection list)
	{
		form.dyngrdList().getRows().clear();

		for (int i = 0; list != null && i < list.size(); i++)
		{

			OutpatientEpisodeWithICPInfoVo outpatientEpisode = list.get(i);

			DynamicGridRow row = form.dyngrdList().getRows().newRow();

			row.setSelectable(false);

			DynamicGridCell cellICP = row.getCells().newCell(getColumnById(COLUMN_ICP), DynamicCellType.IMAGE);

			cellICP.setValue(outpatientEpisode.getICPInfoIsNotNull() ? form.getImages().ICP.ICP : null);
			cellICP.getColumn().setAlignment(Alignment.CENTER);
			cellICP.setReadOnly(true);

			DynamicGridCell cellId = row.getCells().newCell(getColumnById(COLUMN_IDENTIFIER), DynamicCellType.STRING);

			if (outpatientEpisode.getPatient().getDisplayId() != null)
			{
				cellId.setValue(outpatientEpisode.getPatient().getDisplayId().getValue());
				cellId.setTooltip(outpatientEpisode.getPatient().getDisplayId().getValue());
				cellId.setReadOnly(true);
			}

			DynamicGridCell cellSurname = row.getCells().newCell(getColumnById(COLUMN_SURNAME), DynamicCellType.STRING);

			cellSurname.setValue(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getSurname() : "");
			cellSurname.setTooltip(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getSurname() : "");
			cellSurname.setReadOnly(true);

			DynamicGridCell cellForename = row.getCells().newCell(getColumnById(COLUMN_FORENAME), DynamicCellType.STRING);

			cellForename.setValue(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getForename() : "");
			cellForename.setTooltip(outpatientEpisode.getPatient().getNameIsNotNull() ? outpatientEpisode.getPatient().getName().getForename() : "");
			cellForename.setReadOnly(true);

			DynamicGridCell cellSex = row.getCells().newCell(getColumnById(COLUMN_SEX), DynamicCellType.STRING);

			cellSex.setValue(outpatientEpisode.getPatient().getSexIsNotNull() ? outpatientEpisode.getPatient().getSex().toString() : "");
			cellSex.setTooltip(outpatientEpisode.getPatient().getSexIsNotNull() ? outpatientEpisode.getPatient().getSex().toString() : "");
			cellSex.setReadOnly(true);

			DynamicGridCell cellDob = row.getCells().newCell(getColumnById(COLUMN_DOB), DynamicCellType.STRING);

			cellDob.setValue(outpatientEpisode.getPatient().getDobIsNotNull() ? outpatientEpisode.getPatient().getDob().toString() : "");
			cellDob.setReadOnly(true);

			DynamicGridCell cellConsultant = row.getCells().newCell(getColumnById(COLUMN_CONSULTANT), DynamicCellType.STRING);

			if (outpatientEpisode.getSessionIsNotNull() && outpatientEpisode.getSession().getListOwnersIsNotNull() && outpatientEpisode.getSession().getListOwners().size() > 0 && outpatientEpisode.getSession().getListOwners().get(0).getHcpIsNotNull() && outpatientEpisode.getSession().getListOwners().get(0).getHcp().getName() != null)
			{
				cellConsultant.setValue(outpatientEpisode.getSession().getListOwners().get(0).getHcp().getName().toString());
				cellConsultant.setTooltip(outpatientEpisode.getSession().getListOwners().get(0).getHcp().getName().toString());
				cellConsultant.setReadOnly(true);
			}

			DynamicGridCell cellActivityType = row.getCells().newCell(getColumnById(COLUMN_ACTIVITY_TYPE), DynamicCellType.STRING);

			cellActivityType.setValue(outpatientEpisode.getActivityIsNotNull() ? outpatientEpisode.getActivity().getName() : null);
			cellActivityType.setTooltip(outpatientEpisode.getActivityIsNotNull() ? outpatientEpisode.getActivity().getName() : null);
			cellActivityType.setReadOnly(true);

			DynamicGridCell cellApptTime = row.getCells().newCell(getColumnById(COLUMN_APPT_TIME), DynamicCellType.TIME);

			cellApptTime.setValue(outpatientEpisode.getAppointmentTimeIsNotNull() ? outpatientEpisode.getAppointmentTime() : null);
			cellApptTime.setReadOnly(true);

			DynamicGridCell cellStatus = row.getCells().newCell(getColumnById(COLUMN_STATUS), DynamicCellType.STRING);

			cellStatus.setValue(outpatientEpisode.getApptStatusIsNotNull() ? outpatientEpisode.getApptStatus().toString() : "");
			cellStatus.setTooltip(outpatientEpisode.getApptStatusIsNotNull() ? outpatientEpisode.getApptStatus().toString() : "");
			cellStatus.setReadOnly(true);
			
			if (Boolean.TRUE.equals(outpatientEpisode.getCaseNotesPulled()))
			{
				DynamicGridCell cellCaseNotes = row.getCells().newCell(getColumnById(COLUMN_CASE_NOTES), DynamicCellType.IMAGE);

				cellCaseNotes.getColumn().setAlignment(Alignment.CENTER);
				cellCaseNotes.setValue(form.getImages().Core.DocumentsYellow16);
				cellCaseNotes.setTooltip("Case notes requested");
				cellCaseNotes.setReadOnly(true);
			}
			else
			{
				DynamicGridCell cellSelect = row.getCells().newCell(getColumnById(COLUMN_SELECT), DynamicCellType.BOOL);

				cellSelect.getColumn().setAlignment(Alignment.CENTER);
				cellSelect.setValue(outpatientEpisode.getWasSelected());
				cellSelect.setReadOnly(false);
			}

			row.setValue(outpatientEpisode);
		}

	}

	private DynamicGridColumn getColumnById(String identifier)
	{
		return form.dyngrdList().getColumns().getByIdentifier(identifier);
	}

	private ClinicalNotesPullingSearchCriteriaVo populateSearchFilter(ClinicalNotesPullingSearchCriteriaVo filterVo)
	{
		if (form.cmbHospital().getValue() != null)
			filterVo.setHospital(form.cmbHospital().getValue());

		if (form.cmbClinic().getValue() != null)
			filterVo.setClinic(form.cmbClinic().getValue());

		if (form.dteDate().getValue() != null)
			filterVo.setDate(form.dteDate().getValue());

		return filterVo;
	}

	private boolean validateSearch()
	{
		List<String> uiErrors = new ArrayList<String>();

		if (form.cmbHospital().getValue() == null)
			uiErrors.add("Please select a Hospital");

		if (form.dteDate().getValue() == null)
			uiErrors.add("Please enter a Date");

		if (uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[0]));
			return false;
		}

		return true;
	}

	@Override
	protected void onChkSelectAllValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		for (int i = 0; i < form.dyngrdList().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdList().getRows().get(i);
			
			DynamicGridCell cell = row.getCells().get(getColumnById(COLUMN_SELECT));
			
			if (cell != null)
			{
				cell.setValue(form.chkSelectAll().getValue());
			}
		}
	}

	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		searchForClinics();

		if (form.cmbHospital().getValue() == null)
		{
			form.dyngrdList().getRows().clear();
		}

		updateControlsState();
	}

	private void searchForClinics()
	{
		if (form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics(false);
		else if (form.cmbHospital().getValue() == null)
			form.cmbClinic().clear();

	}

	@Override
	protected void onBtnPullNotesClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!atLeastOneRecordWasSelected())
		{
			engine.showMessage("At least one record must be selected.", "Warning", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}
		
		for (int i = 0; i < form.dyngrdList().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdList().getRows().get(i);
			
			DynamicGridCell cell = row.getCells().get(getColumnById(COLUMN_SELECT));
			
			if (cell != null && Boolean.TRUE.equals(cell.getValue()))
			{
				try
				{
					domain.saveCaseNote((OutpatientEpisodeWithICPInfoVo) row.getValue());
				}
				catch (StaleObjectException e)
				{
					e.printStackTrace();
				}
			}
		}
		
		search();
	}

	private boolean atLeastOneRecordWasSelected()
	{
		
		for (int i = 0; i < form.dyngrdList().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdList().getRows().get(i);
			
			DynamicGridCell cell = row.getCells().get(getColumnById(COLUMN_SELECT));
			
			if (cell != null && Boolean.TRUE.equals(cell.getValue()))
			{
				return true;
			}
		}
		
		return false;
	}

	@Override
	protected void onDteDateValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
		{
			loadClinics(false);
		}
		else if (form.dteDate().getValue() == null)
		{
			form.cmbClinic().clear();
			form.dyngrdList().getRows().clear();
		}

		updateControlsState();
	}

	@Override
	protected void onCmbClinicValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbClinic().setTooltip(form.cmbClinic().getValue() != null ? form.cmbClinic().getValue().getDescription() : null);
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	private void clearScreen()
	{
		form.dyngrdList().getRows().clear();

		form.cmbHospital().setValue(null);
		form.cmbClinic().clear();
		form.dteDate().setValue(null);
		form.chkSelectAll().setValue(false);
		form.lblTotal().setValue("Total: 0");

		form.getGlobalContext().Clinical.setClinicalNotesPullingSearchCriteria(null);

	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}

	@Override
	protected void onDyngrdListColumnHeaderClicked(DynamicGridColumn column)
	{
		if (column == getColumnById(COLUMN_ICP))
		{
			if (form.getLocalContext().getSortOrderICPImage() == null)
				form.getLocalContext().setSortOrderICPImage(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();

			for (int i = 0; i < form.dyngrdList().getRows().size(); i++)
			{
				OutpatientEpisodeWithICPInfoVo rowValue = (OutpatientEpisodeWithICPInfoVo) form.dyngrdList().getRows().get(i).getValue();
				
				DynamicGridCell cellSelect = form.dyngrdList().getRows().get(i).getCells().get(getColumnById(COLUMN_SELECT));
				
				if (cellSelect != null)
				{
					rowValue.setWasSelected((Boolean) cellSelect.getValue());
				}
					
				
				voIPColl.add(rowValue);
			}

			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getICPImageComparator(form.getLocalContext().getSortOrderICPImage()));

			if (form.getLocalContext().getSortOrderICPImage().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderICPImage(SortOrder.DESCENDING);
			else if (form.getLocalContext().getSortOrderICPImage().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderICPImage(SortOrder.ASCENDING);

			populateGrid(voIPColl);
		}

		if (column == getColumnById(COLUMN_DOB))
		{
			if (form.getLocalContext().getSortOrderDOB() == null)
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);

			OutpatientEpisodeWithICPInfoVoCollection voIPColl = new OutpatientEpisodeWithICPInfoVoCollection();

			for (int i = 0; i < form.dyngrdList().getRows().size(); i++)
			{
				OutpatientEpisodeWithICPInfoVo rowValue = (OutpatientEpisodeWithICPInfoVo) form.dyngrdList().getRows().get(i).getValue();
				DynamicGridCell cellSelect = form.dyngrdList().getRows().get(i).getCells().get(getColumnById(COLUMN_SELECT));
				
				if (cellSelect != null)
				{
					rowValue.setWasSelected((Boolean) cellSelect.getValue());
				}
				
				voIPColl.add(rowValue);
			}

			voIPColl.sort(OutpatientEpisodeWithICPInfoVo.getDOBComparator(form.getLocalContext().getSortOrderDOB()));

			if (form.getLocalContext().getSortOrderDOB().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderDOB(SortOrder.DESCENDING);
			else if (form.getLocalContext().getSortOrderDOB().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);

			populateGrid(voIPColl);
		}

		updateControlsState();
		
	}
}
