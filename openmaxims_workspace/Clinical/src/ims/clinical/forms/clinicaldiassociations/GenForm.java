//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.clinicaldiassociations;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdProcedureRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProcedureRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColRelationshipReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColRelationshipReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColRelationshipOpened()
		{
			super.row.showOpened(0);
		}
		public ims.clinical.vo.lookups.CDIAssociationDescription getColRelationship()
		{
			return (ims.clinical.vo.lookups.CDIAssociationDescription)super.row.get(0);
		}
		public void setColRelationship(ims.clinical.vo.lookups.CDIAssociationDescription value)
		{
			super.row.set(0, value, true);
		}
		public void setCellColRelationshipTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolLateralityReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolLateralityReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolLateralityOpened()
		{
			super.row.showOpened(1);
		}
		public ims.framework.utils.Image getcolLaterality()
		{
			return (ims.framework.utils.Image)super.row.get(1);
		}
		public void setcolLaterality(ims.framework.utils.Image value)
		{
			super.row.set(1, value);
		}
		public void setCellcolLateralityTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColProcedureReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColProcedureOpened()
		{
			super.row.showOpened(2);
		}
		public String getColProcedure()
		{
			return (String)super.row.get(2);
		}
		public void setColProcedure(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColProcedureTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProcedureRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProcedureRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProcedureRow get(int index)
		{
			return new grdProcedureRow(super.collection.get(index));
		}
		public grdProcedureRow newRow()
		{
			return new grdProcedureRow(super.collection.newRow());
		}
		public grdProcedureRow newRow(boolean autoSelect)
		{
			return new grdProcedureRow(super.collection.newRow(autoSelect));
		}
		public grdProcedureRow newRowAt(int index)
		{
			return new grdProcedureRow(super.collection.newRowAt(index));
		}
		public grdProcedureRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProcedureRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProcedureGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdProcedureRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProcedureRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProcedureRowCollection getRows()
		{
			return new grdProcedureRowCollection(super.grid.getRows());
		}
		public grdProcedureRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProcedureRow(row);
		}
		public void setColRelationshipHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColRelationshipHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox ColRelationshipComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setcolLateralityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolLateralityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdItemRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdItemRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColRelationshipReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColRelationshipReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColRelationshipOpened()
		{
			super.row.showOpened(0);
		}
		public ims.clinical.vo.lookups.CDIAssociationDescription getColRelationship()
		{
			return (ims.clinical.vo.lookups.CDIAssociationDescription)super.row.get(0);
		}
		public void setColRelationship(ims.clinical.vo.lookups.CDIAssociationDescription value)
		{
			super.row.set(0, value, true);
		}
		public void setCellColRelationshipTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolLateralityReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolLateralityReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolLateralityOpened()
		{
			super.row.showOpened(1);
		}
		public ims.framework.utils.Image getcolLaterality()
		{
			return (ims.framework.utils.Image)super.row.get(1);
		}
		public void setcolLaterality(ims.framework.utils.Image value)
		{
			super.row.set(1, value);
		}
		public void setCellcolLateralityTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColDataItemReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColDataItemReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColDataItemOpened()
		{
			super.row.showOpened(2);
		}
		public String getColDataItem()
		{
			return (String)super.row.get(2);
		}
		public void setColDataItem(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColDataItemTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdItemRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdItemRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdItemRow get(int index)
		{
			return new grdItemRow(super.collection.get(index));
		}
		public grdItemRow newRow()
		{
			return new grdItemRow(super.collection.newRow());
		}
		public grdItemRow newRow(boolean autoSelect)
		{
			return new grdItemRow(super.collection.newRow(autoSelect));
		}
		public grdItemRow newRowAt(int index)
		{
			return new grdItemRow(super.collection.newRowAt(index));
		}
		public grdItemRow newRowAt(int index, boolean autoSelect)
		{
			return new grdItemRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdItemGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdItemRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdItemRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdItemRowCollection getRows()
		{
			return new grdItemRowCollection(super.grid.getRows());
		}
		public grdItemRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdItemRow(row);
		}
		public void setColRelationshipHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColRelationshipHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox ColRelationshipComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setcolLateralityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolLateralityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColDataItemHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColDataItemHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}

	public static class GroupProcedureRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 192, 256, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Performed Procedures", startTabIndex.intValue() + 13);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 368, 256, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "All", startTabIndex.intValue() + 14);
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 32, 256, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Planned Procedures", startTabIndex.intValue() + 11);
		}
		public void setText(GroupProcedureEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupProcedureEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupProcedureEnumeration.None;
				case 0: return GroupProcedureEnumeration.rdoPerformedProcedure;
				case 1: return GroupProcedureEnumeration.rdoAllProcedure;
				case 2: return GroupProcedureEnumeration.rdoPlannedProcedure;
			}
			return null;
		}
		public void setValue(GroupProcedureEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupProcedureEnumeration.None.id);
		}
		public boolean isEnabled(GroupProcedureEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupProcedureEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupProcedureEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupProcedureEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupProcedureEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupProcedureEnumeration None = new GroupProcedureEnumeration(-1);
		public static GroupProcedureEnumeration rdoPerformedProcedure = new GroupProcedureEnumeration(0);
		public static GroupProcedureEnumeration rdoAllProcedure = new GroupProcedureEnumeration(1);
		public static GroupProcedureEnumeration rdoPlannedProcedure = new GroupProcedureEnumeration(2);
		private GroupProcedureEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupProcedureEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupItemTypeRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 384, 56, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "All", startTabIndex.intValue() + 8);
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 32, 56, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "Diagnosis", startTabIndex.intValue() + 3);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 288, 56, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Problems", startTabIndex.intValue() + 7);
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 144, 56, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "Complications", startTabIndex.intValue() + 5);
		}
		public void setText(GroupItemTypeEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupItemTypeEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupItemTypeEnumeration.None;
				case 0: return GroupItemTypeEnumeration.rdoAllDiagnosis;
				case 1: return GroupItemTypeEnumeration.rdoDiagnosis;
				case 2: return GroupItemTypeEnumeration.rdoProblems;
				case 3: return GroupItemTypeEnumeration.rdoComplications;
			}
			return null;
		}
		public void setValue(GroupItemTypeEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupItemTypeEnumeration.None.id);
		}
		public boolean isEnabled(GroupItemTypeEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupItemTypeEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupItemTypeEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupItemTypeEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupItemTypeEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupItemTypeEnumeration None = new GroupItemTypeEnumeration(-1);
		public static GroupItemTypeEnumeration rdoAllDiagnosis = new GroupItemTypeEnumeration(0);
		public static GroupItemTypeEnumeration rdoDiagnosis = new GroupItemTypeEnumeration(1);
		public static GroupItemTypeEnumeration rdoProblems = new GroupItemTypeEnumeration(2);
		public static GroupItemTypeEnumeration rdoComplications = new GroupItemTypeEnumeration(3);
		private GroupItemTypeEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupItemTypeEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Clinical.PatientSummary.PrimaryAssociation", "_cv_Clinical.PatientSummary.PrimaryAssociation").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Clinical.PatientSummary.PrimaryAssociation' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(576, 488);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Label Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Complication: ", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 484, 448, 75, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 404, 448, 75, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 96, 14, 464, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 544, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdProcedureTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdProcedureTemp);
		grdProcedureGrid grdProcedure = (grdProcedureGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProcedureGrid.class, m_grdProcedureTemp);
		grdProcedure.addComboBoxColumn("Relationship", 0, 0, 200, false, true, false, false, true, -1);
		grdProcedure.addImageColumn(" ", 0, 0, 24, false, 0);
		grdProcedure.addStringColumn("Procedures", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdProcedure);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 80, 544, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdItemTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdItemTemp);
		grdItemGrid grdItem = (grdItemGrid)GridFlyweightFactory.getInstance().createGridBridge(grdItemGrid.class, m_grdItemTemp);
		grdItem.addComboBoxColumn("Relationship", 0, 0, 200, false, true, false, false, true, -1);
		grdItem.addImageColumn(" ", 0, 0, 24, false, 0);
		grdItem.addStringColumn("Diagnosis / Complication / Problems", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdItem);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 176, 256, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().COE.Orange, this.getImages().COE.Orange, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 256, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().COE.DarkCyan, this.getImages().COE.DarkCyan, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 272, 56, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().COE.BlueViolet, this.getImages().COE.BlueViolet, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 128, 56, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().COE.LightSkyBlue, this.getImages().COE.LightSkyBlue, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().COE.Blue, this.getImages().COE.Blue, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupProcedure = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(0), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupProcedure);
		GroupProcedureRadioButton GroupProcedure = (GroupProcedureRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupProcedureRadioButton.class, tmpGroupProcedure);
		GroupProcedure.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupProcedure);
		RadioButton tmpGroupItemType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(0), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupItemType);
		GroupItemTypeRadioButton GroupItemType = (GroupItemTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupItemTypeRadioButton.class, tmpGroupItemType);
		GroupItemType.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupItemType);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblDataItem()
	{
		return (Label)super.getControl(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(1);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(2);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(3);
	}
	public grdProcedureGrid grdProcedure()
	{
		return (grdProcedureGrid)super.getGrid(0);
	}
	public grdItemGrid grdItem()
	{
		return (grdItemGrid)super.getGrid(1);
	}
	public ImageButton imb4()
	{
		return (ImageButton)super.getControl(6);
	}
	public ImageButton imb3()
	{
		return (ImageButton)super.getControl(7);
	}
	public ImageButton imb2()
	{
		return (ImageButton)super.getControl(8);
	}
	public ImageButton imb1()
	{
		return (ImageButton)super.getControl(9);
	}
	public ImageButton imbDiagnosis()
	{
		return (ImageButton)super.getControl(10);
	}
	public GroupProcedureRadioButton GroupProcedure()
	{
		return (GroupProcedureRadioButton)super.getRadioButton(0);
	}
	public GroupItemTypeRadioButton GroupItemType()
	{
		return (GroupItemTypeRadioButton)super.getRadioButton(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			ProtoTemp = new ProtoTempForms();
			Core = new CoreForms();
		}
		public final class ProtoTempForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ProtoTempForms()
			{
				Diagnosis = new LocalFormName(122100);
			}
			public final FormName Diagnosis;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				OkDialog = new LocalFormName(102122);
			}
			public final FormName OkDialog;
		}

		public ProtoTempForms ProtoTemp;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			COE = new COEImages();
		}
		public final class COEImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEImages()
			{
				BlueBoth = new ImageHelper(101113, "Images/COE/BlueBoth.gif", new Integer(12), new Integer(12));
				BlueLeft = new ImageHelper(101117, "Images/COE/BlueLeft.gif", new Integer(12), new Integer(12));
				BlueRight = new ImageHelper(101118, "Images/COE/BlueRight.gif", new Integer(12), new Integer(12));
				BlueVioletBoth = new ImageHelper(101114, "Images/COE/BlueVioletBoth.gif", new Integer(12), new Integer(12));
				BlueVioletLeft = new ImageHelper(101119, "Images/COE/BlueVioletLeft.gif", new Integer(12), new Integer(12));
				BlueVioletRight = new ImageHelper(101120, "Images/COE/BlueVioletRight.gif", new Integer(12), new Integer(12));
				DarkCyanBoth = new ImageHelper(101116, "Images/COE/DarkCyanBoth.gif", new Integer(12), new Integer(12));
				DarkCyanLeft = new ImageHelper(101121, "Images/COE/DarkCyanLeft.gif", new Integer(12), new Integer(12));
				DarkCyanRight = new ImageHelper(101122, "Images/COE/DarkCyanRight.gif", new Integer(12), new Integer(12));
				LightSkyBlueBoth = new ImageHelper(101115, "Images/COE/LightSkyBlueBoth.gif", new Integer(12), new Integer(12));
				LightSkyBlueLeft = new ImageHelper(101124, "Images/COE/LightSkyBlueLeft.gif", new Integer(12), new Integer(12));
				LightSkyBlueRight = new ImageHelper(101123, "Images/COE/LightSkyBlueRight.gif", new Integer(12), new Integer(12));
				BlueViolet = new ImageHelper(101101, "Images/COE/violet12x12.gif", new Integer(12), new Integer(12));
				Blue = new ImageHelper(101100, "Images/COE/blue12x12.gif", new Integer(12), new Integer(12));
				DarkCyan = new ImageHelper(101102, "Images/COE/darkcyan12x12.gif", new Integer(12), new Integer(12));
				LightSkyBlue = new ImageHelper(101105, "Images/COE/lightblue12x12.gif", new Integer(12), new Integer(12));
				Orange = new ImageHelper(101106, "Images/COE/orange12x12.gif", new Integer(12), new Integer(12));
				OrangeBoth = new ImageHelper(101125, "Images/COE/OrangeBoth.gif", new Integer(12), new Integer(12));
				OrangeLeft = new ImageHelper(101126, "Images/COE/OrangeLeft.gif", new Integer(12), new Integer(12));
				OrangeRight = new ImageHelper(101127, "Images/COE/OrangeRight.gif", new Integer(12), new Integer(12));
			}
			public final ims.framework.utils.Image BlueBoth;
			public final ims.framework.utils.Image BlueLeft;
			public final ims.framework.utils.Image BlueRight;
			public final ims.framework.utils.Image BlueVioletBoth;
			public final ims.framework.utils.Image BlueVioletLeft;
			public final ims.framework.utils.Image BlueVioletRight;
			public final ims.framework.utils.Image DarkCyanBoth;
			public final ims.framework.utils.Image DarkCyanLeft;
			public final ims.framework.utils.Image DarkCyanRight;
			public final ims.framework.utils.Image LightSkyBlueBoth;
			public final ims.framework.utils.Image LightSkyBlueLeft;
			public final ims.framework.utils.Image LightSkyBlueRight;
			public final ims.framework.utils.Image BlueViolet;
			public final ims.framework.utils.Image Blue;
			public final ims.framework.utils.Image DarkCyan;
			public final ims.framework.utils.Image LightSkyBlue;
			public final ims.framework.utils.Image Orange;
			public final ims.framework.utils.Image OrangeBoth;
			public final ims.framework.utils.Image OrangeLeft;
			public final ims.framework.utils.Image OrangeRight;
		}
		public final COEImages COE;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Records = new ims.framework.ContextVariable("Records", prefix + "_lv_Clinical.ClinicalDiAssociations.__internal_x_context__Records_" + componentIdentifier + "");
		}
		
		public boolean getRecordsIsNotNull()
		{
			return !cxl_Records.getValueIsNull(context);
		}
		public ims.clinical.vo.ClinicalDIAssociationVoCollection getRecords()
		{
			return (ims.clinical.vo.ClinicalDIAssociationVoCollection)cxl_Records.getValue(context);
		}
		public void setRecords(ims.clinical.vo.ClinicalDIAssociationVoCollection value)
		{
			cxl_Records.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Records = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
