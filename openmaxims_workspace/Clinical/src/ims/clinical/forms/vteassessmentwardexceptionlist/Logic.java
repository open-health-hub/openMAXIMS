//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.vteassessmentwardexceptionlist;

import ims.clinical.forms.vteassessmentwardexceptionlist.GenForm.grdWardsRow;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationForVTEAssessmentVo;
import ims.core.vo.LocationForVTEAssessmentVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState() 
	{
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(form.cmbHospital().getValue() != null && form.grdWards().getRows().size() > 0);
		}
	}
	
	private void open()
	{
		listWards(form.cmbHospital().getValue());
		
		form.setMode(FormMode.VIEW);
	}
	
	private void initialize() 
	{
		populateHospitalCombo();
	}
	
	private void populateHospitalCombo() 
	{
		LocationLiteVoCollection hospitals = domain.listHospitals();
		
		if(hospitals == null || hospitals.size() == 0)
			return;
		
		for(LocationLiteVo hospital : hospitals)
		{
			if(hospital == null)
				continue;
			
			form.cmbHospital().newRow(hospital, hospital.getName());
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	
	private boolean save() 
	{
		LocationForVTEAssessmentVoCollection wards = new LocationForVTEAssessmentVoCollection();
		
		for(int i=0; i<form.grdWards().getRows().size(); i++)
		{
			LocationForVTEAssessmentVo ward = form.grdWards().getRows().get(i).getValue();
			
			if(ward == null)
				continue;
			
			ward.setVTEAsessmentNotRequired(form.grdWards().getRows().get(i).getColNotRequired());
			wards.add(ward);
		}
		
		String[] errors = wards.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			domain.saveWards(wards);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	private void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
	}
	
	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		listWards(form.cmbHospital().getValue());
		updateControlsState();
	}
	
	private void listWards(LocationLiteVo hospital) 
	{
		form.grdWards().getRows().clear();
		
		if(hospital == null || hospital.getID_Location() == null)
			return;
		
		LocationForVTEAssessmentVoCollection wards = domain.listWards(hospital);
		
		if(wards == null || wards.size() == 0)
			return;
		
		for(LocationForVTEAssessmentVo ward : wards)
		{
			if(ward == null)
				continue;
			
			addWardRow(ward);
		}
	}

	private void addWardRow(LocationForVTEAssessmentVo ward) 
	{
		if(ward == null)
			return;
		
		grdWardsRow row = form.grdWards().getRows().newRow();
		
		row.setColWard(ward.getName());
		row.setColNotRequired(ward.getVTEAsessmentNotRequiredIsNotNull() ? ward.getVTEAsessmentNotRequired() : false);
		
		row.setValue(ward);
	}
}
