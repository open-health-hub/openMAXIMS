//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.52 build 2497.19681)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.referralsrecording;

import java.util.ArrayList;
import ims.clinical.forms.referralsrecording.GenForm.grdListRow;
import ims.clinical.vo.ReferralProffessionalDetailVo;
import ims.clinical.vo.ReferralsRecordingShortVo;
import ims.clinical.vo.ReferralsRecordingShortVoCollection;
import ims.clinical.vo.ReferralsRecordingVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.clinical.vo.lookups.ReferralCategory;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
			open();
	}
	
	private void open()
	{
		form.setMode(FormMode.VIEW);
		form.grdList().getRows().clear();
		
	
		CareContextShortVo currentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		ReferralsRecordingShortVoCollection list = domain.list(currentCareContext);
		
		if(list != null)
		{
			for(int i = 0; i < list.size(); i++)
			{
				addRowRecord(list.get(i));
			}
		}			
		updateControlState();
	}

	private void addRowRecord(ReferralsRecordingShortVo record)
	{	
		if(record == null)
			return;
		
		ReferralsRecordingVo editedRecord = form.getLocalContext().getEditedRecord();
		GenForm.grdListRow row = form.grdList().getRows().newRow(record.equals(editedRecord));
		
		row.setColDate(record.getDateSentIsNotNull() ? record.getDateSent() : null) ;
		row.setColReferralTypeSource(record.getReferralTypeIsNotNull() ? record.getReferralType().toString() : ""
			+" / " + (record.getReferralSourceIsNotNull() ? record.getReferralSource().toString() : ""));
		row.setColDetails(record.getDetailsIsNotNull() ? record.getDetails() : "");
	
		row.setValue(record);
	}
	
	private void initialize()
	{
		setContextMenuState();
		updateControlState();
		form.ctnDetails().setCollapsed(true);
		showSupplyHcp(false);
	}
	
	private void updateControlState()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(form.grdList().getSelectedRowIndex() >= 0);
		}
		else
			//WDEV-10756 expand on edit
			form.ctnDetails().setCollapsed(false);
		updateContextMenuState();
	}
	
	private void updateContextMenuState()
	{
		if (form.getMode().equals(FormMode.VIEW)) 
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			form.getContextMenus().getGenericGridUpdateItem().setVisible(form.grdList().getSelectedRowIndex() >= 0);
		}
		if (form.getMode().equals(FormMode.EDIT)) 
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
		}
		
	}
	
	private void setContextMenuState()
	{
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.grdList().getSelectedRowIndex() >= 0);
		form.getContextMenus().getGenericGridAddItem().setText("New Entry");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Entry");	
	}
	
	private void clear()
	{	
		form.ctnDetails().customAuthoring().setValue(null);
		form.ctnDetails().cmbReferralType().setValue(null);
		form.ctnDetails().cmbSource().setValue(null);
		form.ctnDetails().qmbRefferalTo().setValue(null);
		form.ctnDetails().chkSupplyHcp().setValue(false);
		form.ctnDetails().dteSend().setValue(null);
		form.ctnDetails().dteReceived().setValue(null);
		form.ctnDetails().dteFirstSeen().setValue(null);
		form.ctnDetails().txtDetails().setValue(null);
		form.ctnDetails().cmbLocation().setValue(null);
	}
	
	protected void onFormModeChanged()
	{
		ReferralsRecordingVo editedRecord = form.getLocalContext().getEditedRecord();
		getAndDisplayRecord(editedRecord);
		updateControlState();
		
		if (form.getMode().equals(FormMode.VIEW))
		{
			disableSupplyReferrals();
			setCollapsableContainer();
			
			form.ctnDetails().txtLocation().setEnabled(false);
			form.ctnDetails().cmbLocation().setEnabled(false);
		}
	}
	private void disableSupplyReferrals()
	{
		form.ctnDetails().qmbRefferalTo().setEnabled(false);
		form.ctnDetails().cmbLocation().setEnabled(false);
		form.ctnDetails().txtHcpName().setEnabled(false);
		form.ctnDetails().txtLocation().setEnabled(false);
		form.ctnDetails().txtAddress().setEnabled(false);
		form.ctnDetails().txtMobilePhone().setEnabled(false);
		form.ctnDetails().txtEmail().setEnabled(false);
		form.ctnDetails().txtWorkPhone().setEnabled(false);
	}
	
	protected void onChkSupplyHcpValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSupplyHcp();
		if (form.ctnDetails().chkSupplyHcp().getValue() == true)
		{
			showSupplyHcp(true);
		}
		if (form.ctnDetails().chkSupplyHcp().getValue() == false)
		{
			showSupplyHcp(false);
		}
	}
	private void showSupplyHcp(boolean value)
	{
		if (value == true) 
		{
			form.ctnDetails().txtHcpName().setEnabled(true);
			form.ctnDetails().txtHcpName().setVisible(true);
			form.ctnDetails().qmbRefferalTo().setEnabled(false);
			form.ctnDetails().qmbRefferalTo().setVisible(false);
			form.ctnDetails().txtLocation().setVisible(true);
			form.ctnDetails().txtLocation().setEnabled(true);
			form.ctnDetails().cmbLocation().setVisible(false);
		}
		if (value == false)
		{
			form.ctnDetails().txtHcpName().setEnabled(false);
			form.ctnDetails().txtHcpName().setVisible(false);
			form.ctnDetails().qmbRefferalTo().setEnabled(true);
			form.ctnDetails().qmbRefferalTo().setVisible(true);
			form.ctnDetails().txtLocation().setVisible(false);
			form.ctnDetails().cmbLocation().setEnabled(true);
			form.ctnDetails().cmbLocation().setVisible(true);			
		}
		
		form.ctnDetails().txtAddress().setEnabled(value);
		form.ctnDetails().txtMobilePhone().setEnabled(value);
		form.ctnDetails().txtEmail().setEnabled(value);
		form.ctnDetails().txtWorkPhone().setEnabled(value);
	}
	
	private void clearSupplyHcp()
	{	
		form.ctnDetails().qmbRefferalTo().setValue(null);
		form.ctnDetails().cmbLocation().setValue(null);
		form.ctnDetails().txtHcpName().setValue(null);
		form.ctnDetails().txtLocation().setValue(null);
		form.ctnDetails().txtAddress().setValue(null);
		form.ctnDetails().txtMobilePhone().setValue(null);
		form.ctnDetails().txtEmail().setValue(null);
		form.ctnDetails().txtWorkPhone().setValue(null);	
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newEntry();	
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			open();
			setCollapsableContainer();
		}
		
	}
	
	private void setCollapsableContainer()
	{
		boolean selectedRow = form.grdList().getSelectedRowIndex() >= 0;
		form.ctnDetails().setCollapsed(!(selectedRow));
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		getAndDisplayRecord();
		disableSupplyReferrals();
		updateControlState();
		
		boolean selectedRow = form.grdList().getSelectedRowIndex() >= 0;
		if (!(selectedRow))
		{
			clearSupplyHcp();
		}		
	}
	
	protected void onBtnEditClick() throws PresentationLogicException
	{
		editEntry();	
	}
	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID) 
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newEntry();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				editEntry();
				break;
		}
	}
	
	private void editEntry()
	{
		form.setMode(FormMode.EDIT);
		form.ctnDetails().customAuthoring().setEnabledAuthoringHCP(Boolean.FALSE);
		form.ctnDetails().customAuthoring().setEnabledDateTime(Boolean.FALSE);
		
		boolean selectedRow = form.grdList().getSelectedRowIndex() >=0;
		if (selectedRow)
		{
			if (form.getLocalContext().getEditedRecordIsNotNull())
			{
				if (form.getLocalContext().getEditedRecord().getSuppliedReferralProfessionalIsNotNull())
				{
					form.ctnDetails().chkSupplyHcp().setValue(true);
					showSupplyHcp(true);
					form.ctnDetails().txtHcpName().setEnabled(false);
				}
				else{
					loadLocationsForMOS(true);
					form.ctnDetails().qmbRefferalTo().setEnabled(false);
				}
				
			}
		}
		updateControlState();
	}
			
	private void newEntry()
	{
		form.setMode(FormMode.EDIT);
		form.ctnDetails().chkSupplyHcp().setEnabled(true);
		form.ctnDetails().setCollapsed(false);
		showSupplyHcp(false);
		form.getLocalContext().setEditedRecord(null);
		clear();
		clearSupplyHcp();
		form.ctnDetails().qmbRefferalTo().clear();		//wdev-16565
		form.ctnDetails().cmbLocation().clear();		//wdev-16565
		settingCustomControl();
		updateControlState();	
	}
	
	private void settingCustomControl()
	{
		form.ctnDetails().customAuthoring().initializeComponent();
		form.ctnDetails().customAuthoring().setEnabledAuthoringHCP(Boolean.TRUE);
		form.ctnDetails().customAuthoring().setEnabledDateTime(Boolean.TRUE);
		form.ctnDetails().customAuthoring().setIsRequiredPropertyToControls(Boolean.TRUE);		
	}
	
	protected void onQmbRefferalToTextSubmited(String value) throws PresentationLogicException
	{
		form.ctnDetails().qmbRefferalTo().clear();
		
		form.ctnDetails().cmbLocation().clear();			//wdev-16565
		HcpCollection coll = domain.listHcps(value);
		//WDEV-2105 - check for null. It shouldn't crash ???
		if(coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				Hcp med = coll.get(i);
				form.ctnDetails().qmbRefferalTo().newRow(med.getMos(), med.toString());			
			}
			if (coll.size() == 1)
			{
				form.ctnDetails().qmbRefferalTo().setValue(coll.get(0).getMos());
				onQmbRefferalToValueChanged();
			}
			else if (coll.size() > 1)
			{
				form.ctnDetails().qmbRefferalTo().showOpened();		
			}		
		}
	}
	
	private boolean save() 
	{
		if (form.ctnDetails().cmbReferralType().getValue() == null)//wdev-3028
		{
			engine.showMessage("Referral Type is a mandatory field. Please enter one and save again.");
			return false;
		}
		
		ReferralsRecordingVo editedRecord = form.getLocalContext().getEditedRecord();
		ReferralsRecordingVo record = populateDataFromScreen(editedRecord);
		
		record.setReferralCategory(ReferralCategory.FURTHERREFERRAL);
		
		String[] uiErrors = getUiErrors();
		String[] errors = record.validate(uiErrors);
		
		
		if(errors != null && errors.length > 0)
		{
			//WDEV-16518 workaround for validation of Date Sent field. BO field is common to 2 forms.
			for (int i=0; i<errors.length; i++)
			{
				if (errors[i]!= null && errors[i].equals("Date Decision to Refer is mandatory"))
				{
					errors[i] = "Date Sent is mandatory";
					break;
				}
		}
			engine.showErrors(errors);
			form.ctnDetails().setCollapsed(false);
			
			return false;
		}
		try
		{
			record = domain.save(record);
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			ReferralsRecordingVo updatedRecord = getAndDisplayRecord(record);
			updateRowRecord(updatedRecord);
			
			
			return false;
		}
		form.getLocalContext().setEditedRecord(record);
		
		return true;
	}
	
	private void updateRowRecord(ReferralsRecordingVo record) 
	{
		if (record == null)
			return;

		for (int j = 0; j < form.grdList().getRows().size(); j++) 
		{
			ReferralsRecordingShortVo existingRecord = form.grdList().getRows().get(j).getValue();
			if (existingRecord != null && existingRecord.equals(record)) 
			{
				updateRowRecord(form.grdList().getRows().get(j), record);
				
				break;
			}
		}

		if (form.grdList().getSelectedRowIndex() >=0)
		{
			if (form.getLocalContext().getEditedRecordIsNotNull())
			{
				if (form.getLocalContext().getEditedRecord().getSuppliedReferralProfessionalIsNotNull())
				{
					form.ctnDetails().chkSupplyHcp().setValue(true);
					showSupplyHcp(true);
				}
				
			}
		}
	}
	
	private void updateRowRecord(grdListRow row, ReferralsRecordingVo record) 
	{
		if (row == null || record == null)
			return;
		
		row.setColDate(record.getDateSent()) ;
		row.setColReferralTypeSource(record.getReferralType().toString()+" / "
				+ (record.getReferralSourceIsNotNull() ? record.getReferralSource().toString() : ""));
		row.setColDetails(record.getDetails());
	
		row.setValue(record);
	}
	
	private String[] getUiErrors()
	{
		ArrayList errors = new ArrayList();
		
			//wdev-16564
			if( form.ctnDetails().dteSend().getValue() != null && form.ctnDetails().dteSend().getValue().isGreaterThan(new Date()))
			{
				errors.add("Date Sent cannot be in the future.");
			}
			if( form.ctnDetails().dteReceived().getValue() != null && form.ctnDetails().dteReceived().getValue().isGreaterThan(new Date()))
			{
				errors.add("Date Received cannot be in the future.");
			}
			if( form.ctnDetails().dteSend().getValue() != null && form.ctnDetails().dteReceived().getValue() != null && form.ctnDetails().dteSend().getValue().isGreaterThan(form.ctnDetails().dteReceived().getValue()))
			{
				errors.add("Date Sent cannot be after Date Received.");
			}
			//------------
			if (form.ctnDetails().customAuthoring().getValue() != null) 
			{
				if (form.ctnDetails().customAuthoring().getValue().getAuthoringHcp() == null) 
				{
					errors.add("Authoring Hcp is mandatory");
				}
				if (form.ctnDetails().customAuthoring().getValue().getAuthoringDateTime() == null) 
				{
					errors.add("Authoring Date/Time is mandatory");
				}
			}
			if (form.ctnDetails().chkSupplyHcp().getValue() == false)
			{
				if (form.ctnDetails().qmbRefferalTo().getValue() == null)
				{
					errors.add("Referral to is mandatory");
				}
			}
			if (form.ctnDetails().chkSupplyHcp().getValue() == true)
			{
				if (form.ctnDetails().txtHcpName().getValue() == null)
				{
					errors.add("Referral to is mandatory");
				}
			}
			if (form.ctnDetails().cmbSource().getValue() == null) 
			{
				errors.add("Source is mandatory");
			}
			
		if (errors.size() > 0) 
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Property Checklist Record", searchErrors);
			return searchErrors;
		}
		
		return null;
	}
	
	private ReferralsRecordingVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ReferralsRecordingVo());
	}
	
	private ReferralsRecordingVo populateDataFromScreen(ReferralsRecordingVo record)
	{
		if(record == null)
		{
			record = new ReferralsRecordingVo();
		}
		
		record.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		record.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		if (form.ctnDetails().customAuthoring().getValue() !=null)
		{
			AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
			voAuthoring.setAuthoringDateTime(form.ctnDetails().customAuthoring().getValue().getAuthoringDateTime());
			voAuthoring.setAuthoringHcp(form.ctnDetails().customAuthoring().getValue().getAuthoringHcp());
			record.setAuthoringInfo(voAuthoring);
		}
		
		record.setReferralType(form.ctnDetails().cmbReferralType().getValue());
		record.setReferralSource(form.ctnDetails().cmbSource().getValue());
		record.setDateSent(form.ctnDetails().dteSend().getValue());
		record.setDateReceived(form.ctnDetails().dteReceived().getValue());
		record.setDateFirstSeen(form.ctnDetails().dteFirstSeen().getValue());
		record.setDetails(form.ctnDetails().txtDetails().getValue());
		
		if (form.ctnDetails().chkSupplyHcp().getValue() == true)
		{
			ReferralProffessionalDetailVo voReferralProf = new ReferralProffessionalDetailVo();
		
			voReferralProf.setName(form.ctnDetails().txtHcpName().getValue());
			voReferralProf.setServiceLocation(form.ctnDetails().txtLocation().getValue());
			voReferralProf.setAddress(form.ctnDetails().txtAddress().getValue());
			voReferralProf.setMobilePhone(form.ctnDetails().txtMobilePhone().getValue());
			voReferralProf.setEmailAddress(form.ctnDetails().txtEmail().getValue());
			voReferralProf.setWorkPhone(form.ctnDetails().txtWorkPhone().getValue());
			
			record.setSuppliedReferralProfessional(voReferralProf);
			record.setReferralHCP(null);
		}
		
		if (form.ctnDetails().chkSupplyHcp().getValue() == false)
		{
			record.setSuppliedReferralProfessional(null);
			record.setReferralHCP(form.ctnDetails().qmbRefferalTo().getValue());
			record.setReferredtoLocation(form.ctnDetails().cmbLocation().getValue());
		}
		
		return record;
	}
	
	private ReferralsRecordingVo getAndDisplayRecord()
	{
		return getAndDisplayRecord(form.grdList().getValue());
	}
	
	private ReferralsRecordingVo getAndDisplayRecord(ReferralsRecordingShortVo refRecord) 
	{
		clear();
		
		if(refRecord == null)
			return null;
		
		ReferralsRecordingVo record = domain.get(refRecord);
		form.getLocalContext().setEditedRecord(record);
		
		populateScreenFromData(record);	
			
		return record;	
	}
	
	private void populateScreenFromData(ReferralsRecordingVo record)
	{
		clear();
		if(record == null)
			return;
	
		if (record.getAuthoringInfoIsNotNull())
		{
			AuthoringInformationVo recordAuthoring = new AuthoringInformationVo();
			recordAuthoring.setAuthoringDateTime(record.getAuthoringInfo().getAuthoringDateTime());
			recordAuthoring.setAuthoringHcp(record.getAuthoringInfo().getAuthoringHcp());
			form.ctnDetails().customAuthoring().setValue(recordAuthoring);
		}
		
		form.ctnDetails().cmbReferralType().setValue(record.getReferralType());
		form.ctnDetails().cmbSource().setValue(record.getReferralSource());

		if (record.getReferralHCPIsNotNull())
		{
			form.ctnDetails().qmbRefferalTo().newRow(record.getReferralHCP(), record.getReferralHCP().toString());
			form.ctnDetails().qmbRefferalTo().setValue(record.getReferralHCPIsNotNull() ? record.getReferralHCP() : null);
		}

		form.ctnDetails().dteSend().setValue(record.getDateSent());
		form.ctnDetails().dteReceived().setValue(record.getDateReceived());
		form.ctnDetails().dteFirstSeen().setValue(record.getDateFirstSeen());
		form.ctnDetails().txtDetails().setValue(record.getDetails());
			
		if (record.getSuppliedReferralProfessionalIsNotNull())
		{
			form.ctnDetails().chkSupplyHcp().setValue(true);
			showSupplyHcp(true);
			ReferralProffessionalDetailVo voReferralsProf = record.getSuppliedReferralProfessional();
			form.ctnDetails().txtHcpName().setValue(voReferralsProf.getName());
			form.ctnDetails().txtLocation().setValue(voReferralsProf.getServiceLocation());
			form.ctnDetails().txtAddress().setValue(voReferralsProf.getAddress());
			form.ctnDetails().txtMobilePhone().setValue(voReferralsProf.getMobilePhone());
			form.ctnDetails().txtEmail().setValue(voReferralsProf.getEmailAddress());
			form.ctnDetails().txtWorkPhone().setValue(voReferralsProf.getWorkPhone());
		}
		
		if (!record.getSuppliedReferralProfessionalIsNotNull())
		{
			form.ctnDetails().chkSupplyHcp().setValue(false);
			showSupplyHcp(false);
			clearSupplyHcp();
			form.ctnDetails().qmbRefferalTo().newRow(record.getReferralHCP(), record.getReferralHCP().toString());
			form.ctnDetails().qmbRefferalTo().setValue(record.getReferralHCP());
			loadLocationsForMOS(true);
			form.ctnDetails().cmbLocation().setValue(record.getReferredtoLocation());
			
			if(record.getReferredtoLocationIsNotNull() && record.getReferredtoLocation().getAddressIsNotNull()){
				form.ctnDetails().txtAddress().setValue(record.getReferredtoLocation().getAddress().toDisplayStringForMultiLineTextBox());
				if(record.getReferredtoLocation().getAddress().getPhoneIsNotNull())
					form.ctnDetails().txtWorkPhone().setValue(record.getReferredtoLocation().getAddress().getPhone());
			}
			form.ctnDetails().txtMobilePhone().setValue(record.getReferralHCP().getMobile());
			form.ctnDetails().txtEmail().setValue(record.getReferralHCP().getEmailAddress());
		}
	}
	
	protected void onGrdListSelectionChanged() throws PresentationLogicException
	{
		getAndDisplayRecord();
		updateControlState();
		form.ctnDetails().setCollapsed(false);
		disableSupplyReferrals();
	}

	protected void onQmbRefferalToValueChanged() throws PresentationLogicException {
		
		MemberOfStaffShortVo  mosShortVo  = form.ctnDetails().qmbRefferalTo().getValue();
		if(mosShortVo!=null){
			form.ctnDetails().txtMobilePhone().setValue(mosShortVo.getMobile());
			form.ctnDetails().txtEmail().setValue(mosShortVo.getEmailAddress());
		}
		
		loadLocationsForMOS(false);
		
	}

	private void loadLocationsForMOS(boolean bUpdate) {
		if (!bUpdate)
			clearProfessionalReadOnlyDetails();

		MemberOfStaffShortVo voMosShort = form.ctnDetails().qmbRefferalTo().getValue();

		if (voMosShort != null)
		{

			LocShortVoCollection voLocShortVoColl = domain.listLocationsForMemberOfStaff(voMosShort);

			if (voLocShortVoColl != null)
			{
				for (int i = 0; i < voLocShortVoColl.size(); i++)
				{
					if ((voMosShort.getPrimaryLocationIsNotNull()) && (voMosShort.getPrimaryLocation().equals(voLocShortVoColl.get(i))))
						form.ctnDetails().cmbLocation().newRow(voLocShortVoColl.get(i), voLocShortVoColl.get(i).getName(), Color.Green);
					else
						form.ctnDetails().cmbLocation().newRow(voLocShortVoColl.get(i), voLocShortVoColl.get(i).getName(), Color.Black);
				}

				if (!bUpdate)
					form.ctnDetails().cmbLocation().showOpened();
				
			}
		}
		
	}

	private void clearProfessionalReadOnlyDetails() {
		// TODO Auto-generated method stub
		
	}

	protected void onCmbLocationValueChanged() throws PresentationLogicException {
		LocShortVo voLoc = form.ctnDetails().cmbLocation().getValue();
		if (voLoc != null)
		{
			if(voLoc.getAddressIsNotNull()){
				form.ctnDetails().txtAddress().setValue(voLoc.getAddress().toDisplayStringForMultiLineTextBox());
				if(voLoc.getAddress().getPhoneIsNotNull())
					form.ctnDetails().txtWorkPhone().setValue(voLoc.getAddress().getPhone());
			}
		}
		else{
			form.ctnDetails().txtAddress().setValue(null);
			form.ctnDetails().txtWorkPhone().setValue(null);
		}
		
	}
	
}
