//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.inpatientlistwithicpactions;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdInpatientsWithICPSRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdInpatientsWithICPSRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolICPReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolICPReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolICPOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolICP(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Image getcolICP()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setcolICP(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellcolICPTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolHospnumReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolHospnumReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolHospnumOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolHospnum(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolHospnum()
		{
			return (String)super.row.get(1);
		}
		public void setcolHospnum(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolHospnumTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolName(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolName()
		{
			return (String)super.row.get(2);
		}
		public void setcolName(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolSexReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolSexReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolSexOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolSex(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolSex()
		{
			return (String)super.row.get(3);
		}
		public void setcolSex(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolSexTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolDobReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolDobReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolDobOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolDob(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolDob()
		{
			return (String)super.row.get(4);
		}
		public void setcolDob(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolDobTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolWardReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolWardReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolWardOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolWard(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getcolWard()
		{
			return (String)super.row.get(5);
		}
		public void setcolWard(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolWardTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolBedNUmberReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolBedNUmberReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolBedNUmberOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForcolBedNUmber(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getcolBedNUmber()
		{
			return (String)super.row.get(6);
		}
		public void setcolBedNUmber(String value)
		{
			super.row.set(6, value);
		}
		public void setCellcolBedNUmberTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setcolConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean iscolConsultantReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showcolConsultantOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForcolConsultant(String value)
		{
			super.row.setTooltip(7, value);
		}
		public String getcolConsultant()
		{
			return (String)super.row.get(7);
		}
		public void setcolConsultant(String value)
		{
			super.row.set(7, value);
		}
		public void setCellcolConsultantTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setcolAdmissionDateReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean iscolAdmissionDateReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showcolAdmissionDateOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForcolAdmissionDate(String value)
		{
			super.row.setTooltip(8, value);
		}
		public ims.framework.utils.Date getcolAdmissionDate()
		{
			return (ims.framework.utils.Date)super.row.get(8);
		}
		public void setcolAdmissionDate(ims.framework.utils.Date value)
		{
			super.row.set(8, value);
		}
		public void setCellcolAdmissionDateTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setcolNurseActionReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean iscolNurseActionReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showcolNurseActionOpened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForcolNurseAction(String value)
		{
			super.row.setTooltip(9, value);
		}
		public ims.framework.utils.Image getcolNurseAction()
		{
			return (ims.framework.utils.Image)super.row.get(9);
		}
		public void setcolNurseAction(ims.framework.utils.Image value)
		{
			super.row.set(9, value);
		}
		public void setCellcolNurseActionTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setcolDoctorActionReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean iscolDoctorActionReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showcolDoctorActionOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForcolDoctorAction(String value)
		{
			super.row.setTooltip(10, value);
		}
		public ims.framework.utils.Image getcolDoctorAction()
		{
			return (ims.framework.utils.Image)super.row.get(10);
		}
		public void setcolDoctorAction(ims.framework.utils.Image value)
		{
			super.row.set(10, value);
		}
		public void setCellcolDoctorActionTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public void setcolPhysioActionReadOnly(boolean value)
		{
			super.row.setReadOnly(11, value);
		}
		public boolean iscolPhysioActionReadOnly()
		{
			return super.row.isReadOnly(11);
		}
		public void showcolPhysioActionOpened()
		{
			super.row.showOpened(11);
		}
		public void setTooltipForcolPhysioAction(String value)
		{
			super.row.setTooltip(11, value);
		}
		public ims.framework.utils.Image getcolPhysioAction()
		{
			return (ims.framework.utils.Image)super.row.get(11);
		}
		public void setcolPhysioAction(ims.framework.utils.Image value)
		{
			super.row.set(11, value);
		}
		public void setCellcolPhysioActionTooltip(String value)
		{
			super.row.setTooltip(11, value);
		}
		public void setcolAdminActionReadOnly(boolean value)
		{
			super.row.setReadOnly(12, value);
		}
		public boolean iscolAdminActionReadOnly()
		{
			return super.row.isReadOnly(12);
		}
		public void showcolAdminActionOpened()
		{
			super.row.showOpened(12);
		}
		public void setTooltipForcolAdminAction(String value)
		{
			super.row.setTooltip(12, value);
		}
		public ims.framework.utils.Image getcolAdminAction()
		{
			return (ims.framework.utils.Image)super.row.get(12);
		}
		public void setcolAdminAction(ims.framework.utils.Image value)
		{
			super.row.set(12, value);
		}
		public void setCellcolAdminActionTooltip(String value)
		{
			super.row.setTooltip(12, value);
		}
		public ims.icp.vo.InpatientEpisodeWithICPInfoVo getValue()
		{
			return (ims.icp.vo.InpatientEpisodeWithICPInfoVo)super.row.getValue();
		}
		public void setValue(ims.icp.vo.InpatientEpisodeWithICPInfoVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdInpatientsWithICPSRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdInpatientsWithICPSRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdInpatientsWithICPSRow get(int index)
		{
			return new grdInpatientsWithICPSRow(super.collection.get(index));
		}
		public grdInpatientsWithICPSRow newRow()
		{
			return new grdInpatientsWithICPSRow(super.collection.newRow());
		}
		public grdInpatientsWithICPSRow newRow(boolean autoSelect)
		{
			return new grdInpatientsWithICPSRow(super.collection.newRow(autoSelect));
		}
		public grdInpatientsWithICPSRow newRowAt(int index)
		{
			return new grdInpatientsWithICPSRow(super.collection.newRowAt(index));
		}
		public grdInpatientsWithICPSRow newRowAt(int index, boolean autoSelect)
		{
			return new grdInpatientsWithICPSRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdInpatientsWithICPSGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public void setcolHospnumCaption(String value)
		{
			this.grid.setColumnCaption(1, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.icp.vo.InpatientEpisodeWithICPInfoVoCollection getValues()
		{
			ims.icp.vo.InpatientEpisodeWithICPInfoVoCollection listOfValues = new ims.icp.vo.InpatientEpisodeWithICPInfoVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.icp.vo.InpatientEpisodeWithICPInfoVo getValue()
		{
			return (ims.icp.vo.InpatientEpisodeWithICPInfoVo)super.grid.getValue();
		}
		public void setValue(ims.icp.vo.InpatientEpisodeWithICPInfoVo value)
		{
			super.grid.setValue(value);
		}
		public grdInpatientsWithICPSRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdInpatientsWithICPSRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdInpatientsWithICPSRowCollection getRows()
		{
			return new grdInpatientsWithICPSRowCollection(super.grid.getRows());
		}
		public grdInpatientsWithICPSRow getRowByValue(ims.icp.vo.InpatientEpisodeWithICPInfoVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdInpatientsWithICPSRow(row);
		}
		public void setcolICPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolICPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolHospnumHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolHospnumHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolSexHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolSexHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolDobHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolDobHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolWardHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolWardHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolBedNUmberHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolBedNUmberHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setcolConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getcolConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setcolAdmissionDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getcolAdmissionDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setcolNurseActionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getcolNurseActionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setcolDoctorActionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getcolDoctorActionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
		public void setcolPhysioActionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(11, value);
		}
		public String getcolPhysioActionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(11);
		}
		public void setcolAdminActionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(12, value);
		}
		public String getcolAdminActionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(12);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.IPandOPSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.IPandOPSearchCriteriaVo' of the global context variable 'Core.UKSHInPatientWardViewSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(70);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuIpWardListMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuIpWardListMenuAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuIpWardListMenu.add(contextMenus.Clinical.contextMenuIpWardListMenuAddItem);
		contextMenus.Clinical.contextMenuIpWardListMenuEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Clinical.contextMenuIpWardListMenu.add(contextMenus.Clinical.contextMenuIpWardListMenuEditItem);
		contextMenus.Clinical.contextMenuIpWardListMenuEditViewICPActionsItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.Clinical.contextMenuIpWardListMenu.add(contextMenus.Clinical.contextMenuIpWardListMenuEditViewICPActionsItem);
		contextMenus.Clinical.contextMenuIpWardListMenuEditBedNumberItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit Bed Number", true, false, new Integer(102312), true, false);
		contextMenus.Clinical.contextMenuIpWardListMenu.add(contextMenus.Clinical.contextMenuIpWardListMenuEditBedNumberItem);
		contextMenus.Clinical.contextMenuIpWardListMenuDISCHARGEItem = factory.createMenuItem(startControlID.intValue() + 5, "Discharge Patient", true, false, new Integer(102324), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2950002)))
			contextMenus.Clinical.contextMenuIpWardListMenu.add(contextMenus.Clinical.contextMenuIpWardListMenuDISCHARGEItem);
		contextMenus.Clinical.contextMenuIpWardListMenuTRANSFERItem = factory.createMenuItem(startControlID.intValue() + 6, "Transfer Patient", true, false, new Integer(102323), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2950001)))
			contextMenus.Clinical.contextMenuIpWardListMenu.add(contextMenus.Clinical.contextMenuIpWardListMenuTRANSFERItem);
		form.registerMenu(contextMenus.Clinical.contextMenuIpWardListMenu);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 456, 16, 288, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccHCPForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_ccHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(456), new Integer(16), new Integer(288), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccHCPForm, instance1 } );
		ims.framework.Control m_ccHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccHCPForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccHCPControl);
		Menu[] menus1 = m_ccHCPForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 376, 16, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 80, 16, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 80, 40, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbWardTemp);
		cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
		super.addComboBox(cmbWard);

		// Grid Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 832, 528, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdInpatientsWithICPSTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(26), Boolean.TRUE, contextMenus.Clinical.contextMenuIpWardListMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdInpatientsWithICPSTemp);
		grdInpatientsWithICPSGrid grdInpatientsWithICPS = (grdInpatientsWithICPSGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInpatientsWithICPSGrid.class, m_grdInpatientsWithICPSTemp);
		grdInpatientsWithICPS.addImageColumn(" ", 0, 0, 30, false, 0);
		grdInpatientsWithICPS.addStringColumn("Hospital No.", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdInpatientsWithICPS.addStringColumn("Name", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdInpatientsWithICPS.addStringColumn("Sex", 0, 0, 50, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdInpatientsWithICPS.addStringColumn("D.O.B", 0, 0, 68, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdInpatientsWithICPS.addStringColumn("Ward", 0, 0, 90, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdInpatientsWithICPS.addStringColumn("Bed No.", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdInpatientsWithICPS.addStringColumn("Consultant", 0, 0, 92, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdInpatientsWithICPS.addDateColumn("Adm. Date", 0, 0, 80, true, true, null, false, 1, true);
		grdInpatientsWithICPS.addImageColumn(" ", 0, 0, 35, true, 0);
		grdInpatientsWithICPS.addImageColumn(" ", 0, 0, 35, true, 0);
		grdInpatientsWithICPS.addImageColumn(" ", 0, 0, 35, true, 0);
		grdInpatientsWithICPS.addImageColumn(" ", 0, 0, -1, true, 0);
		super.addGrid(grdInpatientsWithICPS);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 808, 11, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 768, 11, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccHCP()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccHCPVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccHCPVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccHCPEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccHCPEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Label lbl3()
	{
		return (Label)super.getControl(3);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(0);
	}
	public cmbWardComboBox cmbWard()
	{
		return (cmbWardComboBox)super.getComboBox(1);
	}
	public grdInpatientsWithICPSGrid grdInpatientsWithICPS()
	{
		return (grdInpatientsWithICPSGrid)super.getGrid(0);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(7);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(8);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			ICP = new ICPForms();
			Clinical = new ClinicalForms();
			Core = new CoreForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ICPActions = new LocalFormName(123153);
				DischargeSummaryWardPacuDialogAlias = new LocalFormName(134170);
			}
			public final FormName ICPActions;
			public final FormName DischargeSummaryWardPacuDialogAlias;
		}
		public final class ICPForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPForms()
			{
				PatientICP = new LocalFormName(118100);
			}
			public final FormName PatientICP;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				InpatientBedNumberDialog = new LocalFormName(123160);
			}
			public final FormName InpatientBedNumberDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				InpatientTransferDialog = new LocalFormName(102366);
			}
			public final FormName InpatientTransferDialog;
		}

		public RefManForms RefMan;
		public ICPForms ICP;
		public ClinicalForms Clinical;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
			ICP = new ICPImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Nurse24 = new ImageHelper(103208, "Images/Admin/nurse_24.png", new Integer(24), new Integer(24));
				Stethoscope24 = new ImageHelper(103210, "Images/Admin/stethoscope_24.png", new Integer(24), new Integer(24));
				Doctor24 = new ImageHelper(103209, "Images/Admin/doctor_24.png", new Integer(24), new Integer(24));
				AdminAction24 = new ImageHelper(103211, "Images/Admin/patient_information_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Nurse24;
			public final ims.framework.utils.Image Stethoscope24;
			public final ims.framework.utils.Image Doctor24;
			public final ims.framework.utils.Image AdminAction24;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				ICP = new ImageHelper(118104, "Images/ICP/ICP.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ICP;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
		public final ICPImages ICP;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class IpWardListMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 1;
				public static final int Edit = 2;
				public static final int EditViewICPActions = 3;
				public static final int EditBedNumber = 4;
				public static final int DISCHARGE = 5;
				public static final int TRANSFER = 6;
			}
			public void disableAllIpWardListMenuMenuItems()
			{
				this.contextMenuIpWardListMenuAddItem.setEnabled(false);
				this.contextMenuIpWardListMenuEditItem.setEnabled(false);
				this.contextMenuIpWardListMenuEditViewICPActionsItem.setEnabled(false);
				this.contextMenuIpWardListMenuEditBedNumberItem.setEnabled(false);
				this.contextMenuIpWardListMenuDISCHARGEItem.setEnabled(false);
				this.contextMenuIpWardListMenuTRANSFERItem.setEnabled(false);
			}
			public void hideAllIpWardListMenuMenuItems()
			{
				this.contextMenuIpWardListMenuAddItem.setVisible(false);
				this.contextMenuIpWardListMenuEditItem.setVisible(false);
				this.contextMenuIpWardListMenuEditViewICPActionsItem.setVisible(false);
				this.contextMenuIpWardListMenuEditBedNumberItem.setVisible(false);
				this.contextMenuIpWardListMenuDISCHARGEItem.setVisible(false);
				this.contextMenuIpWardListMenuTRANSFERItem.setVisible(false);
			}
			private Menu contextMenuIpWardListMenu;
			public MenuItem getIpWardListMenuAddItem()
			{
				return this.contextMenuIpWardListMenuAddItem;
			}
			private MenuItem contextMenuIpWardListMenuAddItem;
			public MenuItem getIpWardListMenuEditItem()
			{
				return this.contextMenuIpWardListMenuEditItem;
			}
			private MenuItem contextMenuIpWardListMenuEditItem;
			public MenuItem getIpWardListMenuEditViewICPActionsItem()
			{
				return this.contextMenuIpWardListMenuEditViewICPActionsItem;
			}
			private MenuItem contextMenuIpWardListMenuEditViewICPActionsItem;
			public MenuItem getIpWardListMenuEditBedNumberItem()
			{
				return this.contextMenuIpWardListMenuEditBedNumberItem;
			}
			private MenuItem contextMenuIpWardListMenuEditBedNumberItem;
			public ReadOnlyMenuItem getIpWardListMenuDISCHARGEItem()
			{
				return this.contextMenuIpWardListMenuDISCHARGEItem;
			}
			private MenuItem contextMenuIpWardListMenuDISCHARGEItem;
			public ReadOnlyMenuItem getIpWardListMenuTRANSFERItem()
			{
				return this.contextMenuIpWardListMenuTRANSFERItem;
			}
			private MenuItem contextMenuIpWardListMenuTRANSFERItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[72];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_ICP.PatientICPRecord", "BO-1100100000-ID", "ID_PatientICP");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
