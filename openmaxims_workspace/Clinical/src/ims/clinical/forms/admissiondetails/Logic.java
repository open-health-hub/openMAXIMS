//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.admissiondetails;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AdmissionDetailLiteVo;
import ims.core.vo.AdmissionDetailLiteVoCollection;
import ims.core.vo.AdmissionDetailLiteWithInpatientEpisodeVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;


	//-------------------------------------------------------------------------------------------------------------------------------------------
	//	EVENTS REGION
	//-------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 *	Event handler for form open
	 *	Call
	 *		- initialisation function
	 *		- function to refresh screen (this function should set the form mode and controls state will be updated)
	 */
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Call initialisation function
		initialize();
		// Call function to refresh screen
		open();
	}

	
	/**
	 *	Event handler for form changing mode
	 *	Call function to update controls state
	 */
	@Override
	protected void onFormModeChanged()
	{
		// Call function to update controls state
		updateControlsState();
	}
	
	
	/**
	 *	Event handler for button 'Edit' click
	 *	Call function to update an instance record
	 *	
	 *	NOTE: The 'EDIT' button should only be visible when there is an instance to be displayed
	 */
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Call function to update instance record
		updateInstance();
	}
	
	
	/**
	 *	Event handler for button 'Save' click
	 *	Call function used to save an instance record, and if save is successful, then call function
	 *	to refresh the screen (this function should set the form mode and controls state will be updated)
	 */
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// If the save function succeeds, refresh the screen
		if (save())
			open();
	}

	
	/**
	 *	Event handler for button 'Cancel' click
	 *	Call function to refresh the screen (this function should set the form mode and controls state will be updated)
	 */
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Refresh the screen
		open();
	}

	
	/**
	 *	Event handler for record browser value changed
	 */
	@Override
	protected void onRecbrAdmissionsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Get selected value from database & set selected value to local context
		form.getLocalContext().setSelectedAdmission(domain.getAdmission(form.recbrAdmissions().getValue()));
		// Populate selected admission record to instance controls
		populateInstanceControls(form.getLocalContext().getSelectedAdmission());
		// Update controls state
		updateControlsState();
	}
	
	
	//-----------------------------------------------------------------------------------------------------------------------------------------
	// Form logic functions
	//-----------------------------------------------------------------------------------------------------------------------------------------


	/**
	 *	Function used to initialize the form
	 *		- clear local contexts
	 *		- initialize MosQuery custom control
	 */
	public void initialize() throws FormOpenException
	{
		// Clear local contexts
		form.getLocalContext().setSelectedAdmission(null);
		
		// Initialize Consultant MosQuery component
		form.ccConsultant().initialize(MosType.MEDIC);
		form.ccConsultant().setMinRequiredCharsForSearch(3);
		form.ccConsultant().isRequired(Boolean.TRUE);
	}
	
	
	/**
	 *	Function used to refresh the screen
	 * 		- clear screen
	 * 		- list admission episodes from database
	 *		-
	 */
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen
		clear();
		
		// List admission episodes by patient
		AdmissionDetailLiteVoCollection admissionEpisodes = domain.listAdmissionEpisodes(form.getGlobalContext().Core.getPatientShort());
		// Populate admission episodes to record browser
		populateRecordBrowser(admissionEpisodes);
		// Populate selected admission record to instance controls
		populateInstanceControls(form.getLocalContext().getSelectedAdmission());
		
		// Set form to VIEW mode
		form.setMode(FormMode.VIEW);
	}

	
	/**
	 *	Function used to prepare form for editing
	 */
	public void updateInstance()
	{
		// Set form to edit mode
		form.setMode(FormMode.EDIT);
	}

	
	/**
	 *	Function used to commit an admission record to database
	 *	Will return true if the data was successfully committed to database, false otherwise
	 */
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			// Get data from screen
			AdmissionDetailLiteWithInpatientEpisodeVo recordToSave = populateDataFromInstanceControls((AdmissionDetailLiteWithInpatientEpisodeVo) form.getLocalContext().getSelectedAdmission().clone());

			// Validate data
			String[] errors = recordToSave.validate(validateUIRules());

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt to save data to database
			form.getLocalContext().setSelectedAdmission(domain.saveAdmission(recordToSave));

			// At this point assume save succeeded
			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
	}
	
	
	/**
	 * Function used to validate UI Rules
	 */
	private String[] validateUIRules()
	{
		// Create list of errors
		ArrayList<String> errorsList = new ArrayList<String>();
		
		// Condition for the Ward to be mandatory
		if (form.getLocalContext().getSelectedAdmissionIsNotNull() && form.getLocalContext().getSelectedAdmission().getWardIsNotNull())
		{
			if (form.cmbWard().getValue() == null)
			{
				errorsList.add("Ward is mandatory");
			}
		}
		
		// Return array of errors
		return errorsList.toArray(new String[errorsList.size()]);
	}


	/**
	 *	Function used to update the state of the controls on the form
	 */
	public void updateControlsState()
	{
		// Consultant MosQuery component must be enabled only when the form is in EDIT mode
		form.ccConsultant().setEnabled(FormMode.EDIT.equals(form.getMode()));

		
		// Some controls need their state updated only in certain form modes 
		if (FormMode.VIEW.equals(form.getMode()))
		{
			// EDIT button only needs to be visible & enabled when form is in VIEW mode and there is a record selected
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(form.recbrAdmissions().getValue() != null);
		}
		else
		{
			// Necessary condition for the 'Bed No.' text box to be enabled - current admission detail must have an inpatient episode
			boolean enableBedNumber = form.getLocalContext().getSelectedAdmissionIsNotNull() && form.getLocalContext().getSelectedAdmission().getInpatientEpisodeIsNotNull();
			// Necessary condition for the 'Ward' text box to be enabled - current admission detail must have a ward
			boolean enableWard = form.getLocalContext().getSelectedAdmissionIsNotNull() && form.getLocalContext().getSelectedAdmission().getWardIsNotNull();
			
			form.txtBedNo().setEnabled(enableBedNumber);
			form.cmbWard().setEnabled(enableWard);
		}
	}
	

	/**
	 *	Function used to clear screen
	 */
	private void clear()
	{
		// Clear record browser
		form.recbrAdmissions().clear();
		// Clear instance controls
		clearInstanceControls();
	}

	
	/**
	 *	Function used to clear instance controls 
	 */
	public void clearInstanceControls()
	{
		form.ccConsultant().clear();
		form.dtimAdmission().setValue(null);
		form.txtBedNo().setValue(null);
		form.cmbSpecialty().setValue(null);
		form.cmbWard().setValue(null);
		form.dteEstimatedDischarge().setValue(null);
	}


	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Data exchange functions - between screen and data
	//-----------------------------------------------------------------------------------------------------------------------------------------

	/**
	 *	Function used to populate admission records to record browser
	 */
	private void populateRecordBrowser(AdmissionDetailLiteVoCollection admissionEpisodes)
	{
		// Clear record browser
		form.recbrAdmissions().clear();
		
		// Check collection - if null or empty
		if (admissionEpisodes == null || admissionEpisodes.size() == 0)
		{
			// If the collection is null then the selected admission record will also be null
			form.getLocalContext().setSelectedAdmission(null);
			return;
		}
		
		// Add records to record browser
		for (AdmissionDetailLiteVo admission : admissionEpisodes)
		{
			// Build string to be displayed
			String displayString = createDisplayString(admission);
			// Add admission record to screen
			form.recbrAdmissions().newRow(admission, displayString);
		}
		
		
		// Default to first admission record (the most recent one)
		form.recbrAdmissions().setValue(admissionEpisodes.get(0));
		
		// Reselect last edited or default to most recent
		// 	- if the selected record is null - default to first record in record browser
		if (!form.getLocalContext().getSelectedAdmissionIsNotNull())
		{
			form.getLocalContext().setSelectedAdmission(domain.getAdmission(admissionEpisodes.get(0)));
		}
		else
		{
			//	- attempt to select the record in the record browser
			form.recbrAdmissions().setValue(form.getLocalContext().getSelectedAdmission());
			//  - refresh the selected admission record
			form.getLocalContext().setSelectedAdmission(domain.getAdmission(form.recbrAdmissions().getValue()));
		}
	}

	
	/**
	 *	Function used to populate an admission record to instance controls
	 */
	private void populateInstanceControls(AdmissionDetailLiteWithInpatientEpisodeVo admission)
	{
		// Clear instance controls
		clearInstanceControls();
		
		// Check admission record for null value
		if (admission == null)
			return;
		
		// Populate admission record field to instance controls
		form.ccConsultant().setValue(admission.getConsultant());
		form.dtimAdmission().setValue(admission.getAdmissionDateTime());
		form.txtBedNo().setValue(admission.getInpatientEpisodeIsNotNull() ? admission.getInpatientEpisode().getBedNo() : null);
		form.cmbSpecialty().setValue(admission.getSpecialty());
		
		setWardValue(admission.getWard());
		
		form.dteEstimatedDischarge().setValue(admission.getEstDischargeDate());
	}
	

	/**
	 *	Function used to retrieve instance admission records from screen 
	 */
	private AdmissionDetailLiteWithInpatientEpisodeVo populateDataFromInstanceControls(AdmissionDetailLiteWithInpatientEpisodeVo admission)
	{
		if (admission == null)
			throw new CodingRuntimeException("This form is used only for editing admission episodes. Admission episode can not be null");
		
		// Get admission data from screen
		admission.setAdmissionDateTime(form.dtimAdmission().getValue());
		// Update admission DateTime in Inpatient episode if needed
		if (admission.getInpatientEpisodeIsNotNull())
		{
			admission.getInpatientEpisode().setAdmissionDateTime(form.dtimAdmission().getValue());
		}
		
		// Update Consultant in record and in PasEvent
		admission.setConsultant(form.ccConsultant().getValue());
		admission.getPasEvent().setConsultant(form.ccConsultant().getValue());
		
		// Get bed number
		if (admission.getInpatientEpisodeIsNotNull())
		{
			admission.getInpatientEpisode().setBedNo(form.txtBedNo().getValue());
		}
		
		// Update Speciality in record and in PasEvent
		admission.setSpecialty(form.cmbSpecialty().getValue());
		admission.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());
		// Update Ward in record and in PasEvent
		admission.setWard(form.cmbWard().getValue());
		admission.getPasEvent().setLocation(form.cmbWard().getValue());
		
		admission.setEstDischargeDate(form.dteEstimatedDischarge().getValue());
		// Update estimated discharge date in Inpatient episode if needed
		if (admission.getInpatientEpisodeIsNotNull())
		{
			admission.getInpatientEpisode().setEstDischargeDate(form.dteEstimatedDischarge().getValue());
		}
		
		// Return filled admission
		return admission;
	}




	private void setWardValue(LocationLiteVo ward)
	{
		// Get collection of wards
		LocationLiteVoCollection wardsCollection = domain.listWards(ward);
		
		// This is just in case locations were not correctly configured
		if (wardsCollection == null)
			wardsCollection = new LocationLiteVoCollection();

		// Add ward to ward collection
		wardsCollection.add(0, ward);
		// Sort wards
		wardsCollection.sort();
		
		// Populate wards to combobox
		form.cmbWard().clear();
		
		for (int i = 0; i < wardsCollection.size(); i++)
		{
			LocationLiteVo wardLocation = wardsCollection.get(i);
			
			form.cmbWard().newRow(wardLocation, wardLocation.getName());
		}
		
		// Set combobox value to ward
		form.cmbWard().setValue(ward);
	}

	
	/**
	 *	Function used to create the display string for record browser
	 */
	private String createDisplayString(AdmissionDetailLiteVo admission)
	{
		// Create a string builder
		StringBuilder displayString = new StringBuilder();
		
		// Add admission date / time
		if (admission.getAdmissionDateTimeIsNotNull())
		{
			displayString.append(admission.getAdmissionDateTime().toString());
			displayString.append(" -");
		}
		else
		{
			displayString.append("<No date selected> -");
		}
		
		// Add ward
		if (admission.getWardIsNotNull())
		{
			displayString.append(" ");
			displayString.append(admission.getWard().getName());
			displayString.append(" -");
		}
		else
		{
			displayString.append(" <No ward selected> -");
		}
		
		// Add consultant
		if (admission.getConsultantIsNotNull())
		{
			displayString.append(" ");
			displayString.append(admission.getConsultant().getIMosName());
			displayString.append(" -");
		}
		else
		{
			displayString.append(" <No consultant selected> -");
		}
		
		// Add specialty
		if (admission.getSpecialtyIsNotNull())
		{
			displayString.append(" ");
			displayString.append(admission.getSpecialty().getText());
		}
		else
		{
			displayString.append(" <No specialty selected>");
		}
		
		// Return display string
		return displayString.toString();
	}
}
