//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.71 build 3742.21224)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.chronicpainreferral;

import ims.clinical.forms.chronicpainreferral.GenForm.lyr1Layer.tabActionPlanContainer.grdReasonRow;
import ims.clinical.forms.chronicpainreferral.GenForm.lyr1Layer.tabActionPlanContainer.grdWhomRow;
import ims.clinical.forms.chronicpainreferral.GenForm.lyr1Layer.tabVisitDetailsContainer.grdVisitsRow;
import ims.core.vo.Hcp;
import ims.core.vo.lookups.YesNo;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		form.setMode(FormMode.VIEW);
	}

	private void initialize() 
	{
		//only for demo
		String[] specialist = {"Pain Specialist Nurse", "Pain Consultant"};
		
		for(int i=0; i<specialist.length; i++)
		{
			grdWhomRow newRow = form.lyr1().tabActionPlan().grdWhom().getRows().newRow();
			newRow.setColumnWhom(specialist[i]);
		}
		
		String[] reason = {"insufficient clinical detail", "poor timing of referral", "unrealistic expectation of response", "patient referred before standard analgesia tried", "patient referred for incidental chronic pain", "no written referral", "other"};
		
		for(int j=0; j<reason.length; j++)
		{
			grdReasonRow newRow = form.lyr1().tabActionPlan().grdReason().getRows().newRow();
			newRow.setColumnReason(reason[j]);
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState() 
	{
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(true);
			form.btnEdit().setVisible(true);
		}
		
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.lyr1().tabActionPlan().txtAdviceGiven().setEnabled(YesNo.YES.equals(form.lyr1().tabActionPlan().ansTelephone().getValue()));
			form.lyr1().tabActionPlan().grdWhom().setEnabled(YesNo.YES.equals(form.lyr1().tabActionPlan().ansFollowUp().getValue()));
			form.lyr1().tabActionPlan().grdWhom().setReadOnly(!YesNo.YES.equals(form.lyr1().tabActionPlan().ansFollowUp().getValue()));
			form.lyr1().tabActionPlan().dteWardRoundReview().setEnabled(YesNo.YES.equals(form.lyr1().tabActionPlan().ansSeeOnWardRouond().getValue()));
			form.lyr1().tabActionPlan().grdReason().setEnabled(YesNo.YES.equals(form.lyr1().tabActionPlan().ansInappropriateReferral().getValue()));
			form.lyr1().tabActionPlan().grdReason().setReadOnly(!YesNo.YES.equals(form.lyr1().tabActionPlan().ansInappropriateReferral().getValue()));
			
			form.lyr1().tabActionPlan().txtOther().setEnabled(isOtherEnabled());
		}
		
		form.getContextMenus().Clinical.getChronicReferralInvestigationGridADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().Clinical.getChronicReferralInvestigationGridREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyr1().tabReferralDetails().grdInvestigation().getSelectedRowIndex() >= 0);
		form.getContextMenus().Clinical.getChronicReferralVisitGridADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().Clinical.getChronicReferralVisitGridREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyr1().tabVisitDetails().grdVisits().getSelectedRowIndex() >= 0);
	}

	private boolean isOtherEnabled() 
	{
		for(int i=0; i<form.lyr1().tabActionPlan().grdReason().getRows().size(); i++)
		{
			if(form.lyr1().tabActionPlan().grdReason().getRows().get(i).getColumnReason().equals("other") && form.lyr1().tabActionPlan().grdReason().getRows().get(i).getColumnTick())
				return true;
		}
		
		return false;
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	
	private boolean save() 
	{
		return true;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	private void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	private void newInstance() 
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onGrdInvestigationSelectionChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onGrdReasonSelectionChanged()
	{
		// TODO Add your code here.
	}
	
	@Override
	protected void onAnsInappropriateReferralValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(YesNo.NO.equals(form.lyr1().tabActionPlan().ansInappropriateReferral().getValue()))
		{
			clearSelectedFromReasonGrid();
		}
		
		updateControlsState();
	}
	
	private void clearSelectedFromReasonGrid() 
	{
		form.lyr1().tabActionPlan().grdReason().resetScrollPosition();
		
		for(int i=0; i<form.lyr1().tabActionPlan().grdReason().getRows().size(); i++)
		{
			form.lyr1().tabActionPlan().grdReason().getRows().get(i).setColumnTick(false);
		}
	}

	@Override
	protected void onAnsSeeOnWardRouondValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(YesNo.NO.equals(form.lyr1().tabActionPlan().ansSeeOnWardRouond().getValue()))
		{
			form.lyr1().tabActionPlan().dteWardRoundReview().setValue(null);
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onGrdWhomSelectionChanged()
	{
		// TODO Add your code here.
	}
	
	@Override
	protected void onAnsFollowUpValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(YesNo.NO.equals(form.lyr1().tabActionPlan().ansFollowUp().getValue()))
		{
			clearSelectedFromWhomGrid();
		}
		
		updateControlsState();
	}
	
	private void clearSelectedFromWhomGrid() 
	{
		form.lyr1().tabActionPlan().grdWhom().resetScrollPosition();
		
		for(int i=0; i<form.lyr1().tabActionPlan().grdWhom().getRows().size(); i++)
		{
			form.lyr1().tabActionPlan().grdWhom().getRows().get(i).setColumnTick(false);
		}
	}

	@Override
	protected void onAnsTelephoneValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(YesNo.NO.equals(form.lyr1().tabActionPlan().ansTelephone().getValue()))
		{
			form.lyr1().tabActionPlan().txtAdviceGiven().setValue(null);
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onGrdVisitsSelectionChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.ChronicReferralInvestigationGrid.ADD:
				addInvestigationRow();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.ChronicReferralInvestigationGrid.REMOVE:
				removeInvestigationRow();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.ChronicReferralVisitGrid.ADD:
				addVisitRow();
				break;
			case GenForm.ContextMenus.ClinicalNamespace.ChronicReferralVisitGrid.REMOVE:
				removeVisitRow();
				break;
		}
		
		updateControlsState();
	}

	private void removeVisitRow() 
	{
		form.lyr1().tabVisitDetails().grdVisits().getRows().remove(form.lyr1().tabVisitDetails().grdVisits().getSelectedRowIndex());
	}

	private void addVisitRow() 
	{
		grdVisitsRow newRow = form.lyr1().tabVisitDetails().grdVisits().getRows().newRow();
		
		Object hcp = domain.getHcpUser();
		newRow.setColumnUser((hcp instanceof Hcp) ? ((Hcp)hcp).toString() : null);
	}

	private void removeInvestigationRow() 
	{
		form.lyr1().tabReferralDetails().grdInvestigation().getRows().remove(form.lyr1().tabReferralDetails().grdInvestigation().getSelectedRowIndex());
	}

	private void addInvestigationRow() 
	{
		form.lyr1().tabReferralDetails().grdInvestigation().getRows().newRow();
	}

	@Override
	protected void onGrdReasonGridCheckBoxClicked(int column, grdReasonRow row, boolean isChecked) throws PresentationLogicException 
	{
		if(row.getColumnReason().equals("other") && !isChecked)
		{
			form.lyr1().tabActionPlan().txtOther().setValue(null);
		}
		
		updateControlsState();
	}
}
