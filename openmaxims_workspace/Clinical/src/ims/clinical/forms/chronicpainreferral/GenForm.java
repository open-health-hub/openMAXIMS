//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.chronicpainreferral;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabReferralDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbReferralTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdInvestigationRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdInvestigationRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColumnInvestigationReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColumnInvestigationReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColumnInvestigationOpened()
				{
					super.row.showOpened(0);
				}
				public String getColumnInvestigation()
				{
					return (String)super.row.get(0);
				}
				public void setColumnInvestigation(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColumnInvestigationTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColumnDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColumnDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColumnDateOpened()
				{
					super.row.showOpened(1);
				}
				public ims.framework.utils.Date getColumnDate()
				{
					return (ims.framework.utils.Date)super.row.get(1);
				}
				public void setColumnDate(ims.framework.utils.Date value)
				{
					super.row.set(1, value);
				}
				public void setCellColumnDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdInvestigationRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdInvestigationRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdInvestigationRow get(int index)
				{
					return new grdInvestigationRow(super.collection.get(index));
				}
				public grdInvestigationRow newRow()
				{
					return new grdInvestigationRow(super.collection.newRow());
				}
				public grdInvestigationRow newRow(boolean autoSelect)
				{
					return new grdInvestigationRow(super.collection.newRow(autoSelect));
				}
				public grdInvestigationRow newRowAt(int index)
				{
					return new grdInvestigationRow(super.collection.newRowAt(index));
				}
				public grdInvestigationRow newRowAt(int index, boolean autoSelect)
				{
					return new grdInvestigationRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdInvestigationGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdInvestigationRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdInvestigationRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdInvestigationRowCollection getRows()
				{
					return new grdInvestigationRowCollection(super.grid.getRows());
				}
				public grdInvestigationRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdInvestigationRow(row);
				}
				public void setColumnInvestigationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColumnInvestigationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColumnDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColumnDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
		
			public static class ansCurrentAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class ansPatientKnownPainServiceAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 424, 136, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Linked PAS Admission Details", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 24, 429, 93, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "to Pain Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 376, 83, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "to Pain Clinic:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 208, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Investigations:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 530, 144, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Planned Discharge Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 504, 58, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Current?:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 474, 139, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Approx duration of use:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 450, 139, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Medication / Analgesia:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 24, 418, 87, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Patient known", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 24, 394, 115, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Date of Pain Onset:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 365, 115, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Reason for Referral", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 24, 178, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnosis:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 448, 122, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Bleep Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 448, 98, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referrer:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 668, 74, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Time of Referral:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 448, 74, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date of Referral:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 448, 50, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referral Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 24, 122, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Admission:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 24, 98, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 24, 74, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 24, 50, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Admission:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 172, 472, 640, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 172, 448, 640, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 172, 368, 640, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 172, 176, 640, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 556, 120, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 556, 96, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 172, 120, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 172, 72, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 172, 48, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 172, 96, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 172, 528, 148, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 172, 392, 148, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 556, 72, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 556, 48, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbReferralTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReferralTypeTemp);
				cmbReferralTypeComboBox cmbReferralType = (cmbReferralTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReferralTypeComboBox.class, m_cmbReferralTypeTemp);
				super.addComboBox(cmbReferralType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 172, 208, 640, 144, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdInvestigationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuChronicReferralInvestigationGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdInvestigationTemp);
				grdInvestigationGrid grdInvestigation = (grdInvestigationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInvestigationGrid.class, m_grdInvestigationTemp);
				grdInvestigation.addStringColumn("Investigation", 0, 0, 500, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInvestigation.addDateColumn("Date", 0, 0, -1, false, true, null, false, 0, true);
				super.addGrid(grdInvestigation);
		
				// Time Controls
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 772, 72, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
		
				// AnswerBox Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 170, 504, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				AnswerBox tmpansCurrent = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
				super.addControl(tmpansCurrent);
				ansCurrentAnswerBox ansCurrent = (ansCurrentAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansCurrentAnswerBox.class, tmpansCurrent);
				super.addAnswerBox(ansCurrent);
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 170, 424, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				AnswerBox tmpansPatientKnownPainService = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
				super.addControl(tmpansPatientKnownPainService);
				ansPatientKnownPainServiceAnswerBox ansPatientKnownPainService = (ansPatientKnownPainServiceAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansPatientKnownPainServiceAnswerBox.class, tmpansPatientKnownPainService);
				super.addAnswerBox(ansPatientKnownPainService);
			}

			public TextBox txtApproxDuration()
			{
				return (TextBox)super.getControl(21);
			}
			public TextBox txtMedication()
			{
				return (TextBox)super.getControl(22);
			}
			public TextBox txtReasonPainClinic()
			{
				return (TextBox)super.getControl(23);
			}
			public TextBox txtDiagnosis()
			{
				return (TextBox)super.getControl(24);
			}
			public TextBox txtBleep()
			{
				return (TextBox)super.getControl(25);
			}
			public TextBox txtReferrer()
			{
				return (TextBox)super.getControl(26);
			}
			public TextBox txtReasonForAdmission()
			{
				return (TextBox)super.getControl(27);
			}
			public TextBox txtConsultant()
			{
				return (TextBox)super.getControl(28);
			}
			public TextBox txtDateOfAdmission()
			{
				return (TextBox)super.getControl(29);
			}
			public TextBox txtWard()
			{
				return (TextBox)super.getControl(30);
			}
			public DateControl dtePlannedDischargeDate()
			{
				return (DateControl)super.getControl(31);
			}
			public DateControl dteDateOfPainOnset()
			{
				return (DateControl)super.getControl(32);
			}
			public DateControl dteDateOfReferral()
			{
				return (DateControl)super.getControl(33);
			}
			public cmbReferralTypeComboBox cmbReferralType()
			{
				return (cmbReferralTypeComboBox)super.getComboBox(0);
			}
			public grdInvestigationGrid grdInvestigation()
			{
				return (grdInvestigationGrid)super.getGrid(0);
			}
			public TimeControl timTimeOfReferral()
			{
				return (TimeControl)super.getControl(36);
			}
			public ansCurrentAnswerBox ansCurrent()
			{
				return (ansCurrentAnswerBox)super.getAnswerBox(0);
			}
			public ansPatientKnownPainServiceAnswerBox ansPatientKnownPainService()
			{
				return (ansPatientKnownPainServiceAnswerBox)super.getAnswerBox(1);
			}
		}
		public static class tabActionPlanContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdReasonRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdReasonRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColumnReasonReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColumnReasonReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColumnReasonOpened()
				{
					super.row.showOpened(0);
				}
				public String getColumnReason()
				{
					return (String)super.row.get(0);
				}
				public void setColumnReason(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColumnReasonTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColumnTickReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColumnTickReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColumnTickOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColumnTick()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColumnTick(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColumnTickTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdReasonRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdReasonRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdReasonRow get(int index)
				{
					return new grdReasonRow(super.collection.get(index));
				}
				public grdReasonRow newRow()
				{
					return new grdReasonRow(super.collection.newRow());
				}
				public grdReasonRow newRow(boolean autoSelect)
				{
					return new grdReasonRow(super.collection.newRow(autoSelect));
				}
				public grdReasonRow newRowAt(int index)
				{
					return new grdReasonRow(super.collection.newRowAt(index));
				}
				public grdReasonRow newRowAt(int index, boolean autoSelect)
				{
					return new grdReasonRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdReasonGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdReasonRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdReasonRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdReasonRowCollection getRows()
				{
					return new grdReasonRowCollection(super.grid.getRows());
				}
				public grdReasonRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdReasonRow(row);
				}
				public void setColumnReasonHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColumnReasonHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColumnTickHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColumnTickHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdWhomRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdWhomRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColumnWhomReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColumnWhomReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColumnWhomOpened()
				{
					super.row.showOpened(0);
				}
				public String getColumnWhom()
				{
					return (String)super.row.get(0);
				}
				public void setColumnWhom(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColumnWhomTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColumnTickReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColumnTickReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColumnTickOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColumnTick()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColumnTick(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColumnTickTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdWhomRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdWhomRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdWhomRow get(int index)
				{
					return new grdWhomRow(super.collection.get(index));
				}
				public grdWhomRow newRow()
				{
					return new grdWhomRow(super.collection.newRow());
				}
				public grdWhomRow newRow(boolean autoSelect)
				{
					return new grdWhomRow(super.collection.newRow(autoSelect));
				}
				public grdWhomRow newRowAt(int index)
				{
					return new grdWhomRow(super.collection.newRowAt(index));
				}
				public grdWhomRow newRowAt(int index, boolean autoSelect)
				{
					return new grdWhomRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdWhomGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdWhomRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdWhomRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdWhomRowCollection getRows()
				{
					return new grdWhomRowCollection(super.grid.getRows());
				}
				public grdWhomRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdWhomRow(row);
				}
				public void setColumnWhomHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColumnWhomHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColumnTickHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColumnTickHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
		
			public static class ansInappropriateReferralAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class ansReferAsOutPatientAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class ansSeeOnWardRouondAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class ansWrittenReferralAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class ansFollowUpAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class ansTelephoneAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 16, 522, 41, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Other:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 16, 384, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "If Yes, Reason(s):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 16, 352, 139, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Inappropriate Referral?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 16, 328, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Refer as Out Patient?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 224, 304, 161, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of ward round review:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 16, 304, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "See on Ward Round?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 160, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Written referral requested?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 144, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "If Yes, by whom?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 120, 115, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Need to Follow Up?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "If Yes, Advice Given:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 16, 24, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Telephone advice given?", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 184, 520, 624, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 184, 48, 624, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 392, 302, 136, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 184, 384, 624, 128, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdReasonTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdReasonTemp);
				grdReasonGrid grdReason = (grdReasonGrid)GridFlyweightFactory.getInstance().createGridBridge(grdReasonGrid.class, m_grdReasonTemp);
				grdReason.addStringColumn("Reason", 0, 0, 550, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdReason.addBoolColumn(" ", 0, 0, -1, false, true, 0, true);
				super.addGrid(grdReason);
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 184, 144, 624, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdWhomTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdWhomTemp);
				grdWhomGrid grdWhom = (grdWhomGrid)GridFlyweightFactory.getInstance().createGridBridge(grdWhomGrid.class, m_grdWhomTemp);
				grdWhom.addStringColumn("Column Header", 0, 0, 550, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWhom.addBoolColumn(" ", 0, 0, -1, false, false, 0, true);
				super.addGrid(grdWhom);
		
				// AnswerBox Controls
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 182, 352, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				AnswerBox tmpansInappropriateReferral = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
				super.addControl(tmpansInappropriateReferral);
				ansInappropriateReferralAnswerBox ansInappropriateReferral = (ansInappropriateReferralAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansInappropriateReferralAnswerBox.class, tmpansInappropriateReferral);
				super.addAnswerBox(ansInappropriateReferral);
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 182, 328, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				AnswerBox tmpansReferAsOutPatient = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
				super.addControl(tmpansReferAsOutPatient);
				ansReferAsOutPatientAnswerBox ansReferAsOutPatient = (ansReferAsOutPatientAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansReferAsOutPatientAnswerBox.class, tmpansReferAsOutPatient);
				super.addAnswerBox(ansReferAsOutPatient);
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 182, 304, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				AnswerBox tmpansSeeOnWardRouond = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
				super.addControl(tmpansSeeOnWardRouond);
				ansSeeOnWardRouondAnswerBox ansSeeOnWardRouond = (ansSeeOnWardRouondAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansSeeOnWardRouondAnswerBox.class, tmpansSeeOnWardRouond);
				super.addAnswerBox(ansSeeOnWardRouond);
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 182, 280, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				AnswerBox tmpansWrittenReferral = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
				super.addControl(tmpansWrittenReferral);
				ansWrittenReferralAnswerBox ansWrittenReferral = (ansWrittenReferralAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansWrittenReferralAnswerBox.class, tmpansWrittenReferral);
				super.addAnswerBox(ansWrittenReferral);
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 182, 120, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				AnswerBox tmpansFollowUp = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
				super.addControl(tmpansFollowUp);
				ansFollowUpAnswerBox ansFollowUp = (ansFollowUpAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansFollowUpAnswerBox.class, tmpansFollowUp);
				super.addAnswerBox(ansFollowUp);
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 182, 24, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				AnswerBox tmpansTelephone = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
				super.addControl(tmpansTelephone);
				ansTelephoneAnswerBox ansTelephone = (ansTelephoneAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansTelephoneAnswerBox.class, tmpansTelephone);
				super.addAnswerBox(ansTelephone);
			}

			public TextBox txtOther()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox txtAdviceGiven()
			{
				return (TextBox)super.getControl(12);
			}
			public DateControl dteWardRoundReview()
			{
				return (DateControl)super.getControl(13);
			}
			public grdReasonGrid grdReason()
			{
				return (grdReasonGrid)super.getGrid(0);
			}
			public grdWhomGrid grdWhom()
			{
				return (grdWhomGrid)super.getGrid(1);
			}
			public ansInappropriateReferralAnswerBox ansInappropriateReferral()
			{
				return (ansInappropriateReferralAnswerBox)super.getAnswerBox(0);
			}
			public ansReferAsOutPatientAnswerBox ansReferAsOutPatient()
			{
				return (ansReferAsOutPatientAnswerBox)super.getAnswerBox(1);
			}
			public ansSeeOnWardRouondAnswerBox ansSeeOnWardRouond()
			{
				return (ansSeeOnWardRouondAnswerBox)super.getAnswerBox(2);
			}
			public ansWrittenReferralAnswerBox ansWrittenReferral()
			{
				return (ansWrittenReferralAnswerBox)super.getAnswerBox(3);
			}
			public ansFollowUpAnswerBox ansFollowUp()
			{
				return (ansFollowUpAnswerBox)super.getAnswerBox(4);
			}
			public ansTelephoneAnswerBox ansTelephone()
			{
				return (ansTelephoneAnswerBox)super.getAnswerBox(5);
			}
		}
		public static class tabVisitDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdVisitsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdVisitsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColumnDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColumnDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColumnDateOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Date getColumnDate()
				{
					return (ims.framework.utils.Date)super.row.get(0);
				}
				public void setColumnDate(ims.framework.utils.Date value)
				{
					super.row.set(0, value);
				}
				public void setCellColumnDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColumnCommentReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColumnCommentReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColumnCommentOpened()
				{
					super.row.showOpened(1);
				}
				public String getColumnComment()
				{
					return (String)super.row.get(1);
				}
				public void setColumnComment(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColumnCommentTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColumnUserReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColumnUserReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColumnUserOpened()
				{
					super.row.showOpened(2);
				}
				public String getColumnUser()
				{
					return (String)super.row.get(2);
				}
				public void setColumnUser(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColumnUserTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdVisitsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdVisitsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdVisitsRow get(int index)
				{
					return new grdVisitsRow(super.collection.get(index));
				}
				public grdVisitsRow newRow()
				{
					return new grdVisitsRow(super.collection.newRow());
				}
				public grdVisitsRow newRow(boolean autoSelect)
				{
					return new grdVisitsRow(super.collection.newRow(autoSelect));
				}
				public grdVisitsRow newRowAt(int index)
				{
					return new grdVisitsRow(super.collection.newRowAt(index));
				}
				public grdVisitsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdVisitsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdVisitsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdVisitsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdVisitsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdVisitsRowCollection getRows()
				{
					return new grdVisitsRowCollection(super.grid.getRows());
				}
				public grdVisitsRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdVisitsRow(row);
				}
				public void setColumnDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColumnDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColumnCommentHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColumnCommentHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColumnUserHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColumnUserHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 808, 536, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdVisitsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuChronicReferralVisitGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdVisitsTemp);
				grdVisitsGrid grdVisits = (grdVisitsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdVisitsGrid.class, m_grdVisitsTemp);
				grdVisits.addDateColumn("Visit Date", 0, 0, 100, false, true, null, false, 0, true);
				grdVisits.addStringColumn("Comment", 0, 0, 500, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdVisits.addStringColumn("User Initials", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdVisits);
			}

			public grdVisitsGrid grdVisits()
			{
				return (grdVisitsGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabReferralDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Referral Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabReferralDetailsContainer m_tabReferralDetailsContainer = (tabReferralDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabReferralDetailsContainer.class, m_tabReferralDetails, factory);
			super.addContainer(m_tabReferralDetails, m_tabReferralDetailsContainer);
			ims.framework.utils.SizeInfo m_tabReferralDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabReferralDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper63.getWidth(), anchoringHelper63.getHeight());
			m_tabReferralDetailsContainer.setContext(form, appForm, m_tabReferralDetails, loader, contextMenus, startControlID, m_tabReferralDetailsDesignSize, m_tabReferralDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabActionPlan = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Action Plan", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabActionPlanContainer m_tabActionPlanContainer = (tabActionPlanContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabActionPlanContainer.class, m_tabActionPlan, factory);
			super.addContainer(m_tabActionPlan, m_tabActionPlanContainer);
			ims.framework.utils.SizeInfo m_tabActionPlanDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabActionPlanRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper64.getWidth(), anchoringHelper64.getHeight());
			m_tabActionPlanContainer.setContext(form, appForm, m_tabActionPlan, loader, contextMenus, startControlID, m_tabActionPlanDesignSize, m_tabActionPlanRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabVisitDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Visit Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabVisitDetailsContainer m_tabVisitDetailsContainer = (tabVisitDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabVisitDetailsContainer.class, m_tabVisitDetails, factory);
			super.addContainer(m_tabVisitDetails, m_tabVisitDetailsContainer);
			ims.framework.utils.SizeInfo m_tabVisitDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabVisitDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper65.getWidth(), anchoringHelper65.getHeight());
			m_tabVisitDetailsContainer.setContext(form, appForm, m_tabVisitDetails, loader, contextMenus, startControlID, m_tabVisitDetailsDesignSize, m_tabVisitDetailsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabReferralDetails().setVisible(false);
			tabActionPlan().setVisible(false);
			tabVisitDetails().setVisible(false);
		}
		public void settabReferralDetailsEnabled(boolean value)
		{
			tabReferralDetails().setEnabled(value);
		}
		public void settabActionPlanEnabled(boolean value)
		{
			tabActionPlan().setEnabled(value);
		}
		public void settabVisitDetailsEnabled(boolean value)
		{
			tabVisitDetails().setEnabled(value);
		}
		public void showtabReferralDetails()
		{
			tabActionPlan().setVisible(false);
			tabVisitDetails().setVisible(false);
			tabReferralDetails().setVisible(true);
		}
		public void showtabActionPlan()
		{
			tabReferralDetails().setVisible(false);
			tabVisitDetails().setVisible(false);
			tabActionPlan().setVisible(true);
		}
		public void showtabVisitDetails()
		{
			tabReferralDetails().setVisible(false);
			tabActionPlan().setVisible(false);
			tabVisitDetails().setVisible(true);
		}

		public tabReferralDetailsContainer tabReferralDetails()
		{
			return (tabReferralDetailsContainer)super.layers.get(0);
		}
		public tabActionPlanContainer tabActionPlan()
		{
			return (tabActionPlanContainer)super.layers.get(1);
		}
		public tabVisitDetailsContainer tabVisitDetails()
		{
			return (tabVisitDetailsContainer)super.layers.get(2);
		}
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuChronicReferralInvestigationGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuChronicReferralInvestigationGridADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuChronicReferralInvestigationGrid.add(contextMenus.Clinical.contextMenuChronicReferralInvestigationGridADDItem);
		contextMenus.Clinical.contextMenuChronicReferralInvestigationGridREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Clinical.contextMenuChronicReferralInvestigationGrid.add(contextMenus.Clinical.contextMenuChronicReferralInvestigationGridREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuChronicReferralInvestigationGrid);
		contextMenus.Clinical.contextMenuChronicReferralVisitGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuChronicReferralVisitGridADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuChronicReferralVisitGrid.add(contextMenus.Clinical.contextMenuChronicReferralVisitGridADDItem);
		contextMenus.Clinical.contextMenuChronicReferralVisitGridREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Clinical.contextMenuChronicReferralVisitGrid.add(contextMenus.Clinical.contextMenuChronicReferralVisitGridREMOVEItem);
		form.registerMenu(contextMenus.Clinical.contextMenuChronicReferralVisitGrid);


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 685, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 54), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 57), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}


	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(5);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(6);
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ChronicReferralInvestigationGrid implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int REMOVE = 2;
			}
			public void disableAllChronicReferralInvestigationGridMenuItems()
			{
				this.contextMenuChronicReferralInvestigationGridADDItem.setEnabled(false);
				this.contextMenuChronicReferralInvestigationGridREMOVEItem.setEnabled(false);
			}
			public void hideAllChronicReferralInvestigationGridMenuItems()
			{
				this.contextMenuChronicReferralInvestigationGridADDItem.setVisible(false);
				this.contextMenuChronicReferralInvestigationGridREMOVEItem.setVisible(false);
			}
			private Menu contextMenuChronicReferralInvestigationGrid;
			public ReadOnlyMenuItem getChronicReferralInvestigationGridADDItem()
			{
				return this.contextMenuChronicReferralInvestigationGridADDItem;
			}
			private MenuItem contextMenuChronicReferralInvestigationGridADDItem;
			public ReadOnlyMenuItem getChronicReferralInvestigationGridREMOVEItem()
			{
				return this.contextMenuChronicReferralInvestigationGridREMOVEItem;
			}
			private MenuItem contextMenuChronicReferralInvestigationGridREMOVEItem;
			public final class ChronicReferralVisitGrid implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 3;
				public static final int REMOVE = 4;
			}
			public void disableAllChronicReferralVisitGridMenuItems()
			{
				this.contextMenuChronicReferralVisitGridADDItem.setEnabled(false);
				this.contextMenuChronicReferralVisitGridREMOVEItem.setEnabled(false);
			}
			public void hideAllChronicReferralVisitGridMenuItems()
			{
				this.contextMenuChronicReferralVisitGridADDItem.setVisible(false);
				this.contextMenuChronicReferralVisitGridREMOVEItem.setVisible(false);
			}
			private Menu contextMenuChronicReferralVisitGrid;
			public ReadOnlyMenuItem getChronicReferralVisitGridADDItem()
			{
				return this.contextMenuChronicReferralVisitGridADDItem;
			}
			private MenuItem contextMenuChronicReferralVisitGridADDItem;
			public ReadOnlyMenuItem getChronicReferralVisitGridREMOVEItem()
			{
				return this.contextMenuChronicReferralVisitGridREMOVEItem;
			}
			private MenuItem contextMenuChronicReferralVisitGridREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
