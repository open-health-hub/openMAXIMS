//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.cliniclistactionsummary;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbAppOutcomeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.ApptOutcome value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.ApptOutcome value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.ApptOutcome value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.ApptOutcome value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.ApptOutcome value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.ApptOutcome getValue()
		{
			return (ims.scheduling.vo.lookups.ApptOutcome)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.ApptOutcome value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbActionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.AppointmentAction value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.AppointmentAction value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.AppointmentAction value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.AppointmentAction value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.AppointmentAction value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.AppointmentAction getValue()
		{
			return (ims.scheduling.vo.lookups.AppointmentAction)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.AppointmentAction value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbClinicComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.SessionShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.SessionShortVo getValue()
		{
			return (ims.scheduling.vo.SessionShortVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdResultsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdResultsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolICPReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolICPReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolICPOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolICP(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Image getcolICP()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setcolICP(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellcolICPTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolHospnumReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolHospnumReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolHospnumOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolHospnum(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolHospnum()
		{
			return (String)super.row.get(1);
		}
		public void setcolHospnum(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolHospnumTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolSurnameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolSurnameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolSurname(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolSurname()
		{
			return (String)super.row.get(2);
		}
		public void setcolSurname(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolSurnameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolForenameReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolForenameReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolForenameOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolForename(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolForename()
		{
			return (String)super.row.get(3);
		}
		public void setcolForename(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolForenameTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolSexReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolSexReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolSexOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolSex(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolSex()
		{
			return (String)super.row.get(4);
		}
		public void setcolSex(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolSexTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolDobReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolDobReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolDobOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolDob(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getcolDob()
		{
			return (String)super.row.get(5);
		}
		public void setcolDob(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolDobTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolConsultantReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolConsultantOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForcolConsultant(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getcolConsultant()
		{
			return (String)super.row.get(6);
		}
		public void setcolConsultant(String value)
		{
			super.row.set(6, value);
		}
		public void setCellcolConsultantTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setcolApptTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean iscolApptTimeReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showcolApptTimeOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForcolApptTime(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.framework.utils.Time getcolApptTime()
		{
			return (ims.framework.utils.Time)super.row.get(7);
		}
		public void setcolApptTime(ims.framework.utils.Time value)
		{
			super.row.set(7, value);
		}
		public void setCellcolApptTimeTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setcolOutcomeReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean iscolOutcomeReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showcolOutcomeOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForcolOutcome(String value)
		{
			super.row.setTooltip(8, value);
		}
		public String getcolOutcome()
		{
			return (String)super.row.get(8);
		}
		public void setcolOutcome(String value)
		{
			super.row.set(8, value);
		}
		public void setCellcolOutcomeTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setcolWReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean iscolWReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showcolWOpened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForcolW(String value)
		{
			super.row.setTooltip(9, value);
		}
		public ims.framework.utils.Image getcolW()
		{
			return (ims.framework.utils.Image)super.row.get(9);
		}
		public void setcolW(ims.framework.utils.Image value)
		{
			super.row.set(9, value);
		}
		public void setCellcolWTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setcolBReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean iscolBReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showcolBOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForcolB(String value)
		{
			super.row.setTooltip(10, value);
		}
		public ims.framework.utils.Image getcolB()
		{
			return (ims.framework.utils.Image)super.row.get(10);
		}
		public void setcolB(ims.framework.utils.Image value)
		{
			super.row.set(10, value);
		}
		public void setCellcolBTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public void setcolPReadOnly(boolean value)
		{
			super.row.setReadOnly(11, value);
		}
		public boolean iscolPReadOnly()
		{
			return super.row.isReadOnly(11);
		}
		public void showcolPOpened()
		{
			super.row.showOpened(11);
		}
		public void setTooltipForcolP(String value)
		{
			super.row.setTooltip(11, value);
		}
		public ims.framework.utils.Image getcolP()
		{
			return (ims.framework.utils.Image)super.row.get(11);
		}
		public void setcolP(ims.framework.utils.Image value)
		{
			super.row.set(11, value);
		}
		public void setCellcolPTooltip(String value)
		{
			super.row.setTooltip(11, value);
		}
		public void setcolFReadOnly(boolean value)
		{
			super.row.setReadOnly(12, value);
		}
		public boolean iscolFReadOnly()
		{
			return super.row.isReadOnly(12);
		}
		public void showcolFOpened()
		{
			super.row.showOpened(12);
		}
		public void setTooltipForcolF(String value)
		{
			super.row.setTooltip(12, value);
		}
		public ims.framework.utils.Image getcolF()
		{
			return (ims.framework.utils.Image)super.row.get(12);
		}
		public void setcolF(ims.framework.utils.Image value)
		{
			super.row.set(12, value);
		}
		public void setCellcolFTooltip(String value)
		{
			super.row.setTooltip(12, value);
		}
		public void setcolOReadOnly(boolean value)
		{
			super.row.setReadOnly(13, value);
		}
		public boolean iscolOReadOnly()
		{
			return super.row.isReadOnly(13);
		}
		public void showcolOOpened()
		{
			super.row.showOpened(13);
		}
		public void setTooltipForcolO(String value)
		{
			super.row.setTooltip(13, value);
		}
		public ims.framework.utils.Image getcolO()
		{
			return (ims.framework.utils.Image)super.row.get(13);
		}
		public void setcolO(ims.framework.utils.Image value)
		{
			super.row.set(13, value);
		}
		public void setCellcolOTooltip(String value)
		{
			super.row.setTooltip(13, value);
		}
		public void setcolTReadOnly(boolean value)
		{
			super.row.setReadOnly(14, value);
		}
		public boolean iscolTReadOnly()
		{
			return super.row.isReadOnly(14);
		}
		public void showcolTOpened()
		{
			super.row.showOpened(14);
		}
		public void setTooltipForcolT(String value)
		{
			super.row.setTooltip(14, value);
		}
		public ims.framework.utils.Image getcolT()
		{
			return (ims.framework.utils.Image)super.row.get(14);
		}
		public void setcolT(ims.framework.utils.Image value)
		{
			super.row.set(14, value);
		}
		public void setCellcolTTooltip(String value)
		{
			super.row.setTooltip(14, value);
		}
		public ims.icp.vo.OutpatientEpisodeWithICPInfoVo getValue()
		{
			return (ims.icp.vo.OutpatientEpisodeWithICPInfoVo)super.row.getValue();
		}
		public void setValue(ims.icp.vo.OutpatientEpisodeWithICPInfoVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdResultsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdResultsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdResultsRow get(int index)
		{
			return new grdResultsRow(super.collection.get(index));
		}
		public grdResultsRow newRow()
		{
			return new grdResultsRow(super.collection.newRow());
		}
		public grdResultsRow newRow(boolean autoSelect)
		{
			return new grdResultsRow(super.collection.newRow(autoSelect));
		}
		public grdResultsRow newRowAt(int index)
		{
			return new grdResultsRow(super.collection.newRowAt(index));
		}
		public grdResultsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdResultsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdResultsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public void setcolHospnumCaption(String value)
		{
			this.grid.setColumnCaption(1, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
		}
		public ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection getValues()
		{
			ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection listOfValues = new ims.icp.vo.OutpatientEpisodeWithICPInfoVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.icp.vo.OutpatientEpisodeWithICPInfoVo getValue()
		{
			return (ims.icp.vo.OutpatientEpisodeWithICPInfoVo)super.grid.getValue();
		}
		public void setValue(ims.icp.vo.OutpatientEpisodeWithICPInfoVo value)
		{
			super.grid.setValue(value);
		}
		public grdResultsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdResultsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdResultsRowCollection getRows()
		{
			return new grdResultsRowCollection(super.grid.getRows());
		}
		public grdResultsRow getRowByValue(ims.icp.vo.OutpatientEpisodeWithICPInfoVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdResultsRow(row);
		}
		public void setcolICPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolICPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolHospnumHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolHospnumHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolForenameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolForenameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolSexHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolSexHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolDobHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolDobHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setcolApptTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getcolApptTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setcolOutcomeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getcolOutcomeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setcolWHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getcolWHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setcolBHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getcolBHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
		public void setcolPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(11, value);
		}
		public String getcolPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(11);
		}
		public void setcolFHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(12, value);
		}
		public String getcolFHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(12);
		}
		public void setcolOHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(13, value);
		}
		public String getcolOHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(13);
		}
		public void setcolTHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(14, value);
		}
		public String getcolTHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(14);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.IPandOPSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.IPandOPSearchCriteriaVo' of the global context variable 'UKSHOutPatientWardViewSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.IPandOPSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.IPandOPSearchCriteriaVo' of the global context variable 'Clinical.ClinicListActionSummarySearchCriteria' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(88);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuClinicListActionSummaryMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuClinicListActionSummaryMenuADD_TO_WAITING_LISTItem = factory.createMenuItem(startControlID.intValue() + 1, "Add to Waiting List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5480001)))
			contextMenus.Clinical.contextMenuClinicListActionSummaryMenu.add(contextMenus.Clinical.contextMenuClinicListActionSummaryMenuADD_TO_WAITING_LISTItem);
		contextMenus.Clinical.contextMenuClinicListActionSummaryMenuADD_TO_BOOKED_LISTItem = factory.createMenuItem(startControlID.intValue() + 2, "Add to Booked List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5480002)))
			contextMenus.Clinical.contextMenuClinicListActionSummaryMenu.add(contextMenus.Clinical.contextMenuClinicListActionSummaryMenuADD_TO_BOOKED_LISTItem);
		contextMenus.Clinical.contextMenuClinicListActionSummaryMenuADD_TO_PLANNED_LISTItem = factory.createMenuItem(startControlID.intValue() + 3, "Add to Planned List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5480003)))
			contextMenus.Clinical.contextMenuClinicListActionSummaryMenu.add(contextMenus.Clinical.contextMenuClinicListActionSummaryMenuADD_TO_PLANNED_LISTItem);
		contextMenus.Clinical.contextMenuClinicListActionSummaryMenuBOOK_APPOINTMENTItem = factory.createMenuItem(startControlID.intValue() + 4, "Book Appointment", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5480004)))
			contextMenus.Clinical.contextMenuClinicListActionSummaryMenu.add(contextMenus.Clinical.contextMenuClinicListActionSummaryMenuBOOK_APPOINTMENTItem);
		form.registerMenu(contextMenus.Clinical.contextMenuClinicListActionSummaryMenu);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 613, 66, 25, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "and", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 352, 66, 117, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Appt. req. between:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 352, 42, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Action:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 352, 18, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Appointment Outcome:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total : 0", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 66, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 672, 597, 168, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Flag Task(s) as Complete", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 573, 597, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "View Outcome", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 646, 64, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 486, 64, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 59, 64, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 486, 16, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbAppOutcomeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAppOutcomeTemp);
		cmbAppOutcomeComboBox cmbAppOutcome = (cmbAppOutcomeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAppOutcomeComboBox.class, m_cmbAppOutcomeTemp);
		super.addComboBox(cmbAppOutcome);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 59, 16, 277, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 486, 40, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbActionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbActionTemp);
		cmbActionComboBox cmbAction = (cmbActionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActionComboBox.class, m_cmbActionTemp);
		super.addComboBox(cmbAction);
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 59, 40, 277, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbClinicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbClinicTemp);
		cmbClinicComboBox cmbClinic = (cmbClinicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbClinicComboBox.class, m_cmbClinicTemp);
		super.addComboBox(cmbClinic);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 264, 66, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Complete", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 832, 496, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdResultsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(44), Boolean.TRUE, contextMenus.Clinical.contextMenuClinicListActionSummaryMenu, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdResultsTemp);
		grdResultsGrid grdResults = (grdResultsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdResultsGrid.class, m_grdResultsTemp);
		grdResults.addImageColumn(" ", 0, 0, 23, false, 2);
		grdResults.addStringColumn("Hospital No.", 0, 0, 80, true, false, 1, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Surname", 0, 0, 106, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Forename", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Sex", 0, 0, 40, true, false, 1, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("D.O.B", 0, 0, 65, true, false, 2, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addStringColumn("Consultant", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addTimeColumn("Appt.\nTime", 0, 0, 43, true, true, true, null, false, 1, true);
		grdResults.addStringColumn("Outcome", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdResults.addImageColumn("W", 1, 1, 23, true, 0);
		grdResults.setcolWHeaderTooltip("Waiting List");
		grdResults.addImageColumn("B", 1, 1, 23, true, 0);
		grdResults.setcolBHeaderTooltip("Booked List");
		grdResults.addImageColumn("P", 1, 1, 23, true, 0);
		grdResults.setcolPHeaderTooltip("Planned List");
		grdResults.addImageColumn("F", 1, 1, 23, true, 0);
		grdResults.setcolFHeaderTooltip("Future Appointment");
		grdResults.addImageColumn("O", 1, 1, 23, true, 0);
		grdResults.setcolOHeaderTooltip("Onward Referral");
		grdResults.addImageColumn("T", 1, 1, 23, true, 0);
		grdResults.setcolTHeaderTooltip("Transfer to Other Provider");
		super.addGrid(grdResults);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 808, 11, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 776, 11, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblAnd()
	{
		return (Label)super.getControl(0);
	}
	public Label lblAppReqBetwwen()
	{
		return (Label)super.getControl(1);
	}
	public Label lblTotal()
	{
		return (Label)super.getControl(4);
	}
	public Label lblClinic()
	{
		return (Label)super.getControl(7);
	}
	public Button btnTaskComplete()
	{
		return (Button)super.getControl(8);
	}
	public Button btnViewOutcome()
	{
		return (Button)super.getControl(9);
	}
	public DateControl dteTo()
	{
		return (DateControl)super.getControl(10);
	}
	public DateControl dteFrom()
	{
		return (DateControl)super.getControl(11);
	}
	public DateControl dteDate()
	{
		return (DateControl)super.getControl(12);
	}
	public cmbAppOutcomeComboBox cmbAppOutcome()
	{
		return (cmbAppOutcomeComboBox)super.getComboBox(0);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(1);
	}
	public cmbActionComboBox cmbAction()
	{
		return (cmbActionComboBox)super.getComboBox(2);
	}
	public cmbClinicComboBox cmbClinic()
	{
		return (cmbClinicComboBox)super.getComboBox(3);
	}
	public CheckBox chkComplete()
	{
		return (CheckBox)super.getControl(17);
	}
	public grdResultsGrid grdResults()
	{
		return (grdResultsGrid)super.getGrid(0);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(19);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(20);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Scheduling = new SchedulingForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				NewElectiveListTCIErodDialog = new LocalFormName(134224);
				BookAppointmentDialog = new LocalFormName(134134);
			}
			public final FormName NewElectiveListTCIErodDialog;
			public final FormName BookAppointmentDialog;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				AppointmentOutcomeDialog = new LocalFormName(114171);
			}
			public final FormName AppointmentOutcomeDialog;
		}

		public RefManForms RefMan;
		public SchedulingForms Scheduling;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			ICP = new ICPImages();
			RefMan = new RefManImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				ICP = new ImageHelper(118104, "Images/ICP/ICP.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ICP;
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				AddLater16 = new ImageHelper(134138, "Images/RefMan/AddLater16.png", new Integer(16), new Integer(16));
				AddNow16 = new ImageHelper(134139, "Images/RefMan/AddNow16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image AddLater16;
			public final ims.framework.utils.Image AddNow16;
		}
		public final CoreImages Core;
		public final ICPImages ICP;
		public final RefManImages RefMan;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SortOrderDOB = new ims.framework.ContextVariable("SortOrderDOB", prefix + "_lv_Clinical.ClinicListActionSummary.__internal_x_context__SortOrderDOB_" + componentIdentifier + "");
			cxl_SortOrderICPImage = new ims.framework.ContextVariable("SortOrderICPImage", prefix + "_lv_Clinical.ClinicListActionSummary.__internal_x_context__SortOrderICPImage_" + componentIdentifier + "");
			cxl_TaskCompleteMessageBoxID = new ims.framework.ContextVariable("TaskCompleteMessageBoxID", prefix + "_lv_Clinical.ClinicListActionSummary.__internal_x_context__TaskCompleteMessageBoxID_" + componentIdentifier + "");
		}
		
		public boolean getSortOrderDOBIsNotNull()
		{
			return !cxl_SortOrderDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderDOB.getValue(context);
		}
		public void setSortOrderDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderDOB = null;
		public boolean getSortOrderICPImageIsNotNull()
		{
			return !cxl_SortOrderICPImage.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderICPImage()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderICPImage.getValue(context);
		}
		public void setSortOrderICPImage(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderICPImage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderICPImage = null;
		public boolean getTaskCompleteMessageBoxIDIsNotNull()
		{
			return !cxl_TaskCompleteMessageBoxID.getValueIsNull(context);
		}
		public Integer getTaskCompleteMessageBoxID()
		{
			return (Integer)cxl_TaskCompleteMessageBoxID.getValue(context);
		}
		public void setTaskCompleteMessageBoxID(Integer value)
		{
			cxl_TaskCompleteMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TaskCompleteMessageBoxID = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ClinicListActionSummaryMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_TO_WAITING_LIST = 1;
				public static final int ADD_TO_BOOKED_LIST = 2;
				public static final int ADD_TO_PLANNED_LIST = 3;
				public static final int BOOK_APPOINTMENT = 4;
			}
			public void disableAllClinicListActionSummaryMenuMenuItems()
			{
				this.contextMenuClinicListActionSummaryMenuADD_TO_WAITING_LISTItem.setEnabled(false);
				this.contextMenuClinicListActionSummaryMenuADD_TO_BOOKED_LISTItem.setEnabled(false);
				this.contextMenuClinicListActionSummaryMenuADD_TO_PLANNED_LISTItem.setEnabled(false);
				this.contextMenuClinicListActionSummaryMenuBOOK_APPOINTMENTItem.setEnabled(false);
			}
			public void hideAllClinicListActionSummaryMenuMenuItems()
			{
				this.contextMenuClinicListActionSummaryMenuADD_TO_WAITING_LISTItem.setVisible(false);
				this.contextMenuClinicListActionSummaryMenuADD_TO_BOOKED_LISTItem.setVisible(false);
				this.contextMenuClinicListActionSummaryMenuADD_TO_PLANNED_LISTItem.setVisible(false);
				this.contextMenuClinicListActionSummaryMenuBOOK_APPOINTMENTItem.setVisible(false);
			}
			private Menu contextMenuClinicListActionSummaryMenu;
			public ReadOnlyMenuItem getClinicListActionSummaryMenuADD_TO_WAITING_LISTItem()
			{
				return this.contextMenuClinicListActionSummaryMenuADD_TO_WAITING_LISTItem;
			}
			private MenuItem contextMenuClinicListActionSummaryMenuADD_TO_WAITING_LISTItem;
			public ReadOnlyMenuItem getClinicListActionSummaryMenuADD_TO_BOOKED_LISTItem()
			{
				return this.contextMenuClinicListActionSummaryMenuADD_TO_BOOKED_LISTItem;
			}
			private MenuItem contextMenuClinicListActionSummaryMenuADD_TO_BOOKED_LISTItem;
			public ReadOnlyMenuItem getClinicListActionSummaryMenuADD_TO_PLANNED_LISTItem()
			{
				return this.contextMenuClinicListActionSummaryMenuADD_TO_PLANNED_LISTItem;
			}
			private MenuItem contextMenuClinicListActionSummaryMenuADD_TO_PLANNED_LISTItem;
			public ReadOnlyMenuItem getClinicListActionSummaryMenuBOOK_APPOINTMENTItem()
			{
				return this.contextMenuClinicListActionSummaryMenuBOOK_APPOINTMENTItem;
			}
			private MenuItem contextMenuClinicListActionSummaryMenuBOOK_APPOINTMENTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[74];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_ICP.PatientICPRecord", "BO-1100100000-ID", "ID_PatientICP");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
