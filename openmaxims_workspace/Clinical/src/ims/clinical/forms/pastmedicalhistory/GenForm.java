//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.pastmedicalhistory;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbSourceOfInformationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.SourceofInformation value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.SourceofInformation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.SourceofInformation value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.SourceofInformation getValue()
		{
			return (ims.core.vo.lookups.SourceofInformation)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.SourceofInformation value)
		{
			super.control.setValue(value);
		}
	}
	public static class gridDiagnosisRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridDiagnosisRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolDiagProcReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolDiagProcReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolDiagProcOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolDiagProc()
		{
			return (String)super.row.get(0);
		}
		public void setcolDiagProc(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolDiagProcTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolDescription()
		{
			return (String)super.row.get(1);
		}
		public void setcolDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolDateOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolDate()
		{
			return (String)super.row.get(2);
		}
		public void setcolDate(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolSourceReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolSourceReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolSourceOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolSource()
		{
			return (String)super.row.get(3);
		}
		public void setcolSource(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolSourceTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolCommentsReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolCommentsReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolCommentsOpened()
		{
			super.row.showOpened(4);
		}
		public String getcolComments()
		{
			return (String)super.row.get(4);
		}
		public void setcolComments(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolCommentsTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(Object value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridDiagnosisRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridDiagnosisRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridDiagnosisRow get(int index)
		{
			return new gridDiagnosisRow(super.collection.get(index));
		}
		public gridDiagnosisRow newRow()
		{
			return new gridDiagnosisRow(super.collection.newRow());
		}
		public gridDiagnosisRow newRow(boolean autoSelect)
		{
			return new gridDiagnosisRow(super.collection.newRow(autoSelect));
		}
		public gridDiagnosisRow newRowAt(int index)
		{
			return new gridDiagnosisRow(super.collection.newRowAt(index));
		}
		public gridDiagnosisRow newRowAt(int index, boolean autoSelect)
		{
			return new gridDiagnosisRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridDiagnosisGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public Object[] getValues()
		{
			Object[] listOfValues = new Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(Object value)
		{
			super.grid.setValue(value);
		}
		public gridDiagnosisRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridDiagnosisRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridDiagnosisRowCollection getRows()
		{
			return new gridDiagnosisRowCollection(super.grid.getRows());
		}
		public gridDiagnosisRow getRowByValue(Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridDiagnosisRow(row);
		}
		public void setcolDiagProcHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolDiagProcHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolSourceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolSourceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolCommentsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolCommentsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}

	public static class grpTypeRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 142, 416, 80, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Diagnosis", startTabIndex.intValue() + 1);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 230, 416, 80, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Procedure", startTabIndex.intValue() + 2);
		}
		public void setText(grpTypeEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpTypeEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpTypeEnumeration.None;
				case 0: return grpTypeEnumeration.rdoDiagnosis;
				case 1: return grpTypeEnumeration.rdoProcedure;
			}
			return null;
		}
		public void setValue(grpTypeEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpTypeEnumeration.None.id);
		}
		public boolean isEnabled(grpTypeEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpTypeEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpTypeEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpTypeEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpTypeEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpTypeEnumeration None = new grpTypeEnumeration(-1);
		public static grpTypeEnumeration rdoDiagnosis = new grpTypeEnumeration(0);
		public static grpTypeEnumeration rdoProcedure = new grpTypeEnumeration(1);
		private grpTypeEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpTypeEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getRieRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 392, 816, 192, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Details", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 448, 504, 376, 64, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 1007, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(448), new Integer(504), new Integer(376), new Integer(64), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 1007), m_customControlAuthoringInfoForm, instance1 } );
		ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 1007), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringInfoControl);
		Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 30, 440, 392, 64, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ims.framework.FormUiLogic m_customControlDiagProcForm = loader.loadComponent(123133, appForm, startControlID * 10 + 2000, anchoringHelper5.getSize(), instance2, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_customControlDiagProcControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(30), new Integer(440), new Integer(392), new Integer(64), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 3), m_customControlDiagProcForm, instance2 } );
		ims.framework.Control m_customControlDiagProcControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 3), m_customControlDiagProcForm, instance2, Boolean.FALSE } );
		super.addControl(m_customControlDiagProcControl);
		Menu[] menus2 = m_customControlDiagProcForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 38, 416, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 456, 448, 134, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Source of Information:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 456, 416, 95, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Date Identified:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 38, 512, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 2010), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 757, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 142, 512, 264, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// PartialDateBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 608, 416, 120, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Invalid Date Identified entered. Be sure you enter a four digit year.", Boolean.FALSE, Boolean.FALSE}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 608, 448, 200, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ComboBox m_cmbSourceOfInformationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSourceOfInformationTemp);
		cmbSourceOfInformationComboBox cmbSourceOfInformation = (cmbSourceOfInformationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfInformationComboBox.class, m_cmbSourceOfInformationTemp);
		super.addComboBox(cmbSourceOfInformation);

		// Grid Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 816, 368, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_gridDiagnosisTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_gridDiagnosisTemp);
		gridDiagnosisGrid gridDiagnosis = (gridDiagnosisGrid)GridFlyweightFactory.getInstance().createGridBridge(gridDiagnosisGrid.class, m_gridDiagnosisTemp);
		gridDiagnosis.addStringColumn("Diagnosis / Procedure", 0, 0, 200, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridDiagnosis.addStringColumn("Description", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridDiagnosis.addStringColumn("Date", 0, 0, 75, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridDiagnosis.addStringColumn("Source", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridDiagnosis.addStringColumn("Comments", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(gridDiagnosis);

		// RadioButton Controls
		RadioButton tmpgrpType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE});
		super.addControl(tmpgrpType);
		grpTypeRadioButton grpType = (grpTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpTypeRadioButton.class, tmpgrpType);
		grpType.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpType);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean iscustomControlAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setcustomControlAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public ims.clinical.forms.clinicalcoding.IComponent customControlDiagProc()
	{
		return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
	}
	public void setcustomControlDiagProcValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
	}
	public void setcustomControlDiagProcVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setVisible(value);
	}
	public boolean iscustomControlDiagProcVisible()
	{
		return ((ims.framework.Control)super.getControl(2)).isVisible();
	}
	public void setcustomControlDiagProcEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setEnabled(value);
	}
	public boolean iscustomControlDiagProcEnabled()
	{
		return ((ims.framework.Control)super.getControl(2)).isEnabled();
	}
	public Button btnNew()
	{
		return (Button)super.getControl(7);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(8);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(9);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(10);
	}
	public TextBox txtComments()
	{
		return (TextBox)super.getControl(11);
	}
	public PartialDateBox pdtDate()
	{
		return (PartialDateBox)super.getControl(12);
	}
	public cmbSourceOfInformationComboBox cmbSourceOfInformation()
	{
		return (cmbSourceOfInformationComboBox)super.getComboBox(0);
	}
	public gridDiagnosisGrid gridDiagnosis()
	{
		return (gridDiagnosisGrid)super.getGrid(0);
	}
	public grpTypeRadioButton grpType()
	{
		return (grpTypeRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
			Core = new CoreForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				FormReports = new LocalFormName(103128);
			}
			public final FormName FormReports;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				TaxonomySearch = new LocalFormName(104102);
				YesNoDialog = new LocalFormName(102107);
			}
			public final FormName TaxonomySearch;
			public final FormName YesNoDialog;
		}

		public AdminForms Admin;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Search = new ImageHelper(102120, "Images/Core/bin.gif", new Integer(15), new Integer(15));
			}
			public final ims.framework.utils.Image Search;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PMHRecordVo = new ims.framework.ContextVariable("PMHRecordVo", prefix + "_lv_Clinical.PastMedicalHistory.__internal_x_context__PMHRecordVo_" + componentIdentifier + "");
			cxl_bUpdatingRecord = new ims.framework.ContextVariable("bUpdatingRecord", prefix + "_lv_Clinical.PastMedicalHistory.__internal_x_context__bUpdatingRecord_" + componentIdentifier + "");
			cxl_Diagnosis = new ims.framework.ContextVariable("Diagnosis", prefix + "_lv_Clinical.PastMedicalHistory.__internal_x_context__Diagnosis_" + componentIdentifier + "");
			cxl_Procedure = new ims.framework.ContextVariable("Procedure", prefix + "_lv_Clinical.PastMedicalHistory.__internal_x_context__Procedure_" + componentIdentifier + "");
			cxl_RieRecord = new ims.framework.ContextVariable("RieRecord", prefix + "_lv_Clinical.PastMedicalHistory.__internal_x_context__RieRecord_" + componentIdentifier + "");
			cxl_CodingItemTextSubmitted = new ims.framework.ContextVariable("CodingItemTextSubmitted", prefix + "_lv_Clinical.PastMedicalHistory.__internal_x_context__CodingItemTextSubmitted_" + componentIdentifier + "");
			cxl_DateSortOrder = new ims.framework.ContextVariable("DateSortOrder", prefix + "_lv_Clinical.PastMedicalHistory.__internal_x_context__DateSortOrder_" + componentIdentifier + "");
		}
		
		public boolean getPMHRecordVoIsNotNull()
		{
			return !cxl_PMHRecordVo.getValueIsNull(context);
		}
		public ims.core.vo.PatientPastMedicalHistoryVo getPMHRecordVo()
		{
			return (ims.core.vo.PatientPastMedicalHistoryVo)cxl_PMHRecordVo.getValue(context);
		}
		public void setPMHRecordVo(ims.core.vo.PatientPastMedicalHistoryVo value)
		{
			cxl_PMHRecordVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PMHRecordVo = null;
		public boolean getbUpdatingRecordIsNotNull()
		{
			return !cxl_bUpdatingRecord.getValueIsNull(context);
		}
		public Boolean getbUpdatingRecord()
		{
			return (Boolean)cxl_bUpdatingRecord.getValue(context);
		}
		public void setbUpdatingRecord(Boolean value)
		{
			cxl_bUpdatingRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bUpdatingRecord = null;
		public boolean getDiagnosisIsNotNull()
		{
			return !cxl_Diagnosis.getValueIsNull(context);
		}
		public ims.core.vo.PatientDiagnosisVo getDiagnosis()
		{
			return (ims.core.vo.PatientDiagnosisVo)cxl_Diagnosis.getValue(context);
		}
		public void setDiagnosis(ims.core.vo.PatientDiagnosisVo value)
		{
			cxl_Diagnosis.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Diagnosis = null;
		public boolean getProcedureIsNotNull()
		{
			return !cxl_Procedure.getValueIsNull(context);
		}
		public ims.core.vo.PatientProcedureShortVo getProcedure()
		{
			return (ims.core.vo.PatientProcedureShortVo)cxl_Procedure.getValue(context);
		}
		public void setProcedure(ims.core.vo.PatientProcedureShortVo value)
		{
			cxl_Procedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Procedure = null;
		public boolean getRieRecordIsNotNull()
		{
			return !cxl_RieRecord.getValueIsNull(context);
		}
		public ims.vo.ValueObject getRieRecord()
		{
			return (ims.vo.ValueObject)cxl_RieRecord.getValue(context);
		}
		public void setRieRecord(ims.vo.ValueObject value)
		{
			cxl_RieRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RieRecord = null;
		public boolean getCodingItemTextSubmittedIsNotNull()
		{
			return !cxl_CodingItemTextSubmitted.getValueIsNull(context);
		}
		public String getCodingItemTextSubmitted()
		{
			return (String)cxl_CodingItemTextSubmitted.getValue(context);
		}
		public void setCodingItemTextSubmitted(String value)
		{
			cxl_CodingItemTextSubmitted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CodingItemTextSubmitted = null;
		public boolean getDateSortOrderIsNotNull()
		{
			return !cxl_DateSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getDateSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_DateSortOrder.getValue(context);
		}
		public void setDateSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_DateSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DateSortOrder = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[76];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PastMedicalHistory.__internal_x_context__PMHRecordVo_" + componentIdentifier, "BO-1003100009-ID", "ID_PastMedicalHistory");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PastMedicalHistory.__internal_x_context__PMHRecordVo_" + componentIdentifier, "BO-1003100009-PATIENT", "Patient");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
