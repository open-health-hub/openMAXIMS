//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.surgicalauditpreoperationcheckstheatrenurse;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbOperationTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ProcedureUrgency value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ProcedureUrgency value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ProcedureUrgency value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ProcedureUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ProcedureUrgency value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ProcedureUrgency getValue()
		{
			return (ims.core.vo.lookups.ProcedureUrgency)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ProcedureUrgency value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTheatreNameNumberComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdPlannedProceduresRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPlannedProceduresRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnProceduresReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnProceduresReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnProceduresOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColumnProcedures(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColumnProcedures()
		{
			return (String)super.row.get(0);
		}
		public void setColumnProcedures(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnProceduresTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnPrimaryReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnPrimaryReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnPrimaryOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColumnPrimary(String value)
		{
			super.row.setTooltip(1, value);
		}
		public boolean getColumnPrimary()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColumnPrimary(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColumnPrimaryTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo getValue()
		{
			return (ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPlannedProceduresRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPlannedProceduresRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPlannedProceduresRow get(int index)
		{
			return new grdPlannedProceduresRow(super.collection.get(index));
		}
		public grdPlannedProceduresRow newRow()
		{
			return new grdPlannedProceduresRow(super.collection.newRow());
		}
		public grdPlannedProceduresRow newRow(boolean autoSelect)
		{
			return new grdPlannedProceduresRow(super.collection.newRow(autoSelect));
		}
		public grdPlannedProceduresRow newRowAt(int index)
		{
			return new grdPlannedProceduresRow(super.collection.newRowAt(index));
		}
		public grdPlannedProceduresRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPlannedProceduresRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPlannedProceduresGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection getValues()
		{
			ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection listOfValues = new ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo getValue()
		{
			return (ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo value)
		{
			super.grid.setValue(value);
		}
		public grdPlannedProceduresRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPlannedProceduresRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPlannedProceduresRowCollection getRows()
		{
			return new grdPlannedProceduresRowCollection(super.grid.getRows());
		}
		public grdPlannedProceduresRow getRowByValue(ims.clinical.vo.PatientProcedureForSurgicalAuditPreOpChecksVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPlannedProceduresRow(row);
		}
		public void setColumnProceduresHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnProceduresHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnPrimaryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnPrimaryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(824, 545);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuSurgicalAuditPlannedProcedures = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuSurgicalAuditPlannedProceduresADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4710001)))
			contextMenus.Clinical.contextMenuSurgicalAuditPlannedProcedures.add(contextMenus.Clinical.contextMenuSurgicalAuditPlannedProceduresADDItem);
		contextMenus.Clinical.contextMenuSurgicalAuditPlannedProceduresEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4710002)))
			contextMenus.Clinical.contextMenuSurgicalAuditPlannedProcedures.add(contextMenus.Clinical.contextMenuSurgicalAuditPlannedProceduresEDITItem);
		form.registerMenu(contextMenus.Clinical.contextMenuSurgicalAuditPlannedProcedures);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 192, 442, 384, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ims.framework.FormUiLogic m_ccTheatreNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 7, skipContextValidation);
		//ims.framework.Control m_ccTheatreNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(192), new Integer(442), new Integer(384), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 7), m_ccTheatreNurseForm, instance1 } );
		ims.framework.Control m_ccTheatreNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 7), m_ccTheatreNurseForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccTheatreNurseControl);
		Menu[] menus1 = m_ccTheatreNurseForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 194, 394, 75, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Locum Nurse?", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 12, 394, 175, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Accompanying Theatre Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 12, 346, 84, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Surgery Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 11, 416, 0, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 12, 468, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 11, 370, 144, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Theatre Name/ Number:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planned Procedures:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 738, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 660, 516, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 192, 416, 368, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 192, 466, 368, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 192, 344, 368, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbOperationTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbOperationTypeTemp);
		cmbOperationTypeComboBox cmbOperationType = (cmbOperationTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOperationTypeComboBox.class, m_cmbOperationTypeTemp);
		super.addComboBox(cmbOperationType);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 192, 368, 368, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbTheatreNameNumberTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTheatreNameNumberTemp);
		cmbTheatreNameNumberComboBox cmbTheatreNameNumber = (cmbTheatreNameNumberComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTheatreNameNumberComboBox.class, m_cmbTheatreNameNumberTemp);
		super.addComboBox(cmbTheatreNameNumber);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 274, 394, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 805, 296, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdPlannedProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Clinical.contextMenuSurgicalAuditPlannedProcedures, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPlannedProceduresTemp);
		grdPlannedProceduresGrid grdPlannedProcedures = (grdPlannedProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPlannedProceduresGrid.class, m_grdPlannedProceduresTemp);
		grdPlannedProcedures.addStringColumn("Procedures", 0, 0, 700, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPlannedProcedures.addBoolColumn("Primary", 1, 1, -1, false, true, 0, true);
		super.addGrid(grdPlannedProcedures);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.mosquery.IComponent ccTheatreNurse()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccTheatreNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccTheatreNurseVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccTheatreNurseVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccTheatreNurseEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccTheatreNurseEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(8);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(9);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(10);
	}
	public TextBox txtAccompanyingTheatreNurse()
	{
		return (TextBox)super.getControl(11);
	}
	public TextBox txtComments()
	{
		return (TextBox)super.getControl(12);
	}
	public cmbOperationTypeComboBox cmbOperationType()
	{
		return (cmbOperationTypeComboBox)super.getComboBox(0);
	}
	public cmbTheatreNameNumberComboBox cmbTheatreNameNumber()
	{
		return (cmbTheatreNameNumberComboBox)super.getComboBox(1);
	}
	public CheckBox chkLocumAccompanyingTheatreNurse()
	{
		return (CheckBox)super.getControl(15);
	}
	public grdPlannedProceduresGrid grdPlannedProcedures()
	{
		return (grdPlannedProceduresGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				PatientProceduresDialog = new LocalFormName(123250);
			}
			public final FormName PatientProceduresDialog;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_OperationDetail = new ims.framework.ContextVariable("OperationDetail", prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__OperationDetail_" + componentIdentifier + "");
			cxl_CareContext = new ims.framework.ContextVariable("CareContext", prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__CareContext_" + componentIdentifier + "");
			cxl_PatientRef = new ims.framework.ContextVariable("PatientRef", prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__PatientRef_" + componentIdentifier + "");
			cxl_CurrentLocationRef = new ims.framework.ContextVariable("CurrentLocationRef", prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__CurrentLocationRef_" + componentIdentifier + "");
			cxl_SurgicalAuditOperationDetails = new ims.framework.ContextVariable("SurgicalAuditOperationDetails", prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__SurgicalAuditOperationDetails_" + componentIdentifier + "");
			cxl_selectedEvent = new ims.framework.ContextVariable("selectedEvent", prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__selectedEvent_" + componentIdentifier + "");
			cxl_ConfirmPatDet = new ims.framework.ContextVariable("ConfirmPatDet", prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__ConfirmPatDet_" + componentIdentifier + "");
		}
		
		public boolean getOperationDetailIsNotNull()
		{
			return !cxl_OperationDetail.getValueIsNull(context);
		}
		public ims.clinical.vo.SurgicalAuditOperationDetailVo getOperationDetail()
		{
			return (ims.clinical.vo.SurgicalAuditOperationDetailVo)cxl_OperationDetail.getValue(context);
		}
		public void setOperationDetail(ims.clinical.vo.SurgicalAuditOperationDetailVo value)
		{
			cxl_OperationDetail.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OperationDetail = null;
		public boolean getCareContextIsNotNull()
		{
			return !cxl_CareContext.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getCareContext()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_CareContext.getValue(context);
		}
		public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CareContext' RefVo context variable.");
			if(value == null)
				cxl_CareContext.setValue(context, null);
			else
				cxl_CareContext.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CareContext = null;
		public boolean getPatientRefIsNotNull()
		{
			return !cxl_PatientRef.getValueIsNull(context);
		}
		public ims.core.patient.vo.PatientRefVo getPatientRef()
		{
			return (ims.core.patient.vo.PatientRefVo)cxl_PatientRef.getValue(context);
		}
		public void setPatientRef(ims.core.patient.vo.PatientRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PatientRef' RefVo context variable.");
			if(value == null)
				cxl_PatientRef.setValue(context, null);
			else
				cxl_PatientRef.setValue(context, new ims.core.patient.vo.PatientRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PatientRef = null;
		public boolean getCurrentLocationRefIsNotNull()
		{
			return !cxl_CurrentLocationRef.getValueIsNull(context);
		}
		public ims.core.resource.place.vo.LocationRefVo getCurrentLocationRef()
		{
			return (ims.core.resource.place.vo.LocationRefVo)cxl_CurrentLocationRef.getValue(context);
		}
		public void setCurrentLocationRef(ims.core.resource.place.vo.LocationRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CurrentLocationRef' RefVo context variable.");
			if(value == null)
				cxl_CurrentLocationRef.setValue(context, null);
			else
				cxl_CurrentLocationRef.setValue(context, new ims.core.resource.place.vo.LocationRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CurrentLocationRef = null;
		public boolean getSurgicalAuditOperationDetailsIsNotNull()
		{
			return !cxl_SurgicalAuditOperationDetails.getValueIsNull(context);
		}
		public ims.clinical.vo.SurgicalAuditOperationDetailRefVo getSurgicalAuditOperationDetails()
		{
			return (ims.clinical.vo.SurgicalAuditOperationDetailRefVo)cxl_SurgicalAuditOperationDetails.getValue(context);
		}
		public void setSurgicalAuditOperationDetails(ims.clinical.vo.SurgicalAuditOperationDetailRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'SurgicalAuditOperationDetails' RefVo context variable.");
			if(value == null)
				cxl_SurgicalAuditOperationDetails.setValue(context, null);
			else
				cxl_SurgicalAuditOperationDetails.setValue(context, new ims.clinical.vo.SurgicalAuditOperationDetailRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_SurgicalAuditOperationDetails = null;
		public boolean getselectedEventIsNotNull()
		{
			return !cxl_selectedEvent.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent getselectedEvent()
		{
			return (ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent)cxl_selectedEvent.getValue(context);
		}
		public void setselectedEvent(ims.clinical.vo.enums.SurgicalAuditPreOpChecksEvent value)
		{
			cxl_selectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedEvent = null;
		public boolean getConfirmPatDetIsNotNull()
		{
			return !cxl_ConfirmPatDet.getValueIsNull(context);
		}
		public Boolean getConfirmPatDet()
		{
			return (Boolean)cxl_ConfirmPatDet.getValue(context);
		}
		public void setConfirmPatDet(Boolean value)
		{
			cxl_ConfirmPatDet.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfirmPatDet = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class SurgicalAuditPlannedProcedures implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
			}
			public void disableAllSurgicalAuditPlannedProceduresMenuItems()
			{
				this.contextMenuSurgicalAuditPlannedProceduresADDItem.setEnabled(false);
				this.contextMenuSurgicalAuditPlannedProceduresEDITItem.setEnabled(false);
			}
			public void hideAllSurgicalAuditPlannedProceduresMenuItems()
			{
				this.contextMenuSurgicalAuditPlannedProceduresADDItem.setVisible(false);
				this.contextMenuSurgicalAuditPlannedProceduresEDITItem.setVisible(false);
			}
			private Menu contextMenuSurgicalAuditPlannedProcedures;
			public ReadOnlyMenuItem getSurgicalAuditPlannedProceduresADDItem()
			{
				return this.contextMenuSurgicalAuditPlannedProceduresADDItem;
			}
			private MenuItem contextMenuSurgicalAuditPlannedProceduresADDItem;
			public ReadOnlyMenuItem getSurgicalAuditPlannedProceduresEDITItem()
			{
				return this.contextMenuSurgicalAuditPlannedProceduresEDITItem;
			}
			private MenuItem contextMenuSurgicalAuditPlannedProceduresEDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[99];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromSurgicalAudit", "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-CARECONTEXT", "CareContext");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureMarkedAsPrimary", "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__OperationDetail_" + componentIdentifier, "BO-1072100108-ID", "ID_SurgicalAuditOperationDetail");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__OperationDetail_" + componentIdentifier, "BO-1072100108-PATIENT", "Patient");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__OperationDetail_" + componentIdentifier, "BO-1072100108-CARECONTEXT", "CareContext");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__OperationDetail_" + componentIdentifier, "BO-1072100108-OPERATIONCANCELLED", "OperationCancelled");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__OperationDetail_" + componentIdentifier, "BO-1072100108-REASONFORCANCELLATION", "ReasonForCancellation");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__OperationDetail_" + componentIdentifier, "BO-1072100108-REASONFORCANCELLATIONCOMMENT", "ReasonForCancellationComment");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__PatientRef_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__CurrentLocationRef_" + componentIdentifier, "BO-1007100007-ID", "ID_Location");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.SurgicalAuditPreOperationChecksTheatreNurse.__internal_x_context__SurgicalAuditOperationDetails_" + componentIdentifier, "BO-1072100108-ID", "ID_SurgicalAuditOperationDetail");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
