//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.39 build 2153.19769)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.clinical.forms.pmhchecklist;

import ims.clinical.forms.pmhchecklist.GenForm.grdPMHChecklistRow;
import ims.clinical.vo.DiagnosisListVo;
import ims.clinical.vo.DiagnosisListVoCollection;
import ims.clinical.vo.PatientPMHChecklistDiagnosisVo;
import ims.clinical.vo.PatientPMHChecklistDiagnosisVoCollection;
import ims.clinical.vo.PatientPMHChecklistProcedureVo;
import ims.clinical.vo.PatientPMHChecklistProcedureVoCollection;
import ims.clinical.vo.PatientPMHChecklistVo;
import ims.clinical.vo.ProcedureListVo;
import ims.clinical.vo.ProcedureListVoCollection;
import ims.clinicaladmin.vo.PMHChecklistConfigVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.PatientDiagnosisVo;
import ims.core.vo.PatientDiagnosisVoCollection;
import ims.core.vo.PatientPastMedicalHistoryVo;
import ims.core.vo.PatientProcedureShortVo;
import ims.core.vo.PatientProcedureShortVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}
	private void open() 
	{
		form.setMode(FormMode.VIEW);
		clearScreen();
		updateMenuItems();
		
		if(setUpBlankPMHChecklistGrid() == false)
		{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(false);
			return;
		}

		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			PatientPMHChecklistVo voPatientPMHChecklist = domain.getPatientPMHChecklist(form.getGlobalContext().Core.getCurrentCareContext());
			PatientPastMedicalHistoryVo voPMH = domain.getPastMedicalHistory(form.getGlobalContext().Core.getPatientShort());
			form.getLocalContext().setPastMedicalHistory(voPMH);
			
			if(voPatientPMHChecklist != null)
			{
				form.getLocalContext().setvoPatientPMHChecklist(voPatientPMHChecklist);
				form.btnNew().setVisible(false);
				form.btnUpdate().setVisible(true);
				populateScreenFromData();
			}
			else
			{
				form.btnNew().setVisible(true);
				form.btnUpdate().setVisible(false);
				displayPastMedicalHistory();
			}
		}
	}
	private void displayPastMedicalHistory()
	{
		PatientPastMedicalHistoryVo voPMH = form.getLocalContext().getPastMedicalHistory();
		
		if(voPMH == null)
			return;
		
		PatientDiagnosisVoCollection collDiag = form.getLocalContext().getPatientDiagnosis();
		PatientProcedureShortVoCollection collProc = form.getLocalContext().getPatientProcedures();
		
		//tick the Diagnosis that matches PMH
		if(voPMH.getDiagnosisIsNotNull())
		{
			for(int i = 0; i < voPMH.getDiagnosis().size(); i++)
			{
				PatientDiagnosisVo patDiag = voPMH.getDiagnosis().get(i);
				
				//see if we find this diagnosis in the tree
				grdPMHChecklistRow row = getDiagnosisRowFromCheckList(patDiag.getDiagnosis());
				if(row != null)
				{
					//we can have multiple PatientDiagnosisVo for the same DiagnosisVo in PatientPastMedicalHistoryVo
					PatientDiagnosisVo lastPatDiag = getLastPatientDiagnosisFromCollection(patDiag.getDiagnosis(), voPMH.getDiagnosis());
					
					row.setcolSelect(YesNoUnknown.YES);
					row.setcolDiagnosisDate(lastPatDiag.getDiagnosedDate());
					row.setcolSource(lastPatDiag.getSourceofInformationIsNotNull() ? lastPatDiag.getSourceofInformation() : null);
					row.setcolNotes(lastPatDiag.getNotes());
					
					if(collDiag == null)
						collDiag = new PatientDiagnosisVoCollection();
					
					collDiag.add(lastPatDiag);
				}
			}
		}
		
		//tick the Procedures that matches PMH
		if(voPMH.getProcedureIsNotNull())
		{
			for(int i = 0; i < voPMH.getProcedure().size(); i++)
			{
				PatientProcedureShortVo patProc = voPMH.getProcedure().get(i);
				
				//see if we find this diagnosis in the tree
				grdPMHChecklistRow row = getProcedureRowFromCheckList(patProc.getProcedure());
				if(row != null)
				{
					//we can have multiple PatientProcedureVo for the same ProcedureVo in PatientPastMedicalHistoryVo
					PatientProcedureShortVo lastPatProc = getLastPatientProcedureFromCollection(patProc.getProcedure(), voPMH.getProcedure());
					
					row.setcolSelect(YesNoUnknown.YES);
					row.setcolDiagnosisDate(lastPatProc.getProcDate());
					row.setcolSource(lastPatProc.getInfoSourceIsNotNull() ? lastPatProc.getInfoSource() : null);
					row.setcolNotes(lastPatProc.getNotes());
					
					if(collProc == null)
						collProc = new PatientProcedureShortVoCollection();
					
					collProc.add(lastPatProc);
				}
			}
		}
		
		form.getLocalContext().setPastMedicalHistory(voPMH);
		form.getLocalContext().setPatientDiagnosis(collDiag);
		form.getLocalContext().setPatientProcedures(collProc);
	}
	
	private grdPMHChecklistRow getProcedureRowFromCheckList(ProcedureLiteVo procedure)
	{
		for(int i = 0; i < form.grdPMHChecklist().getRows().get(1).getRows().size(); i++)
		{
			grdPMHChecklistRow row = form.grdPMHChecklist().getRows().get(1).getRows().get(i);
			
			if(row.getValue() != null && row.getValue() instanceof ProcedureLiteVo && row.getValue().equals(procedure))
				return row;
		}
		
		return null;
	}
	private PatientProcedureShortVo getLastPatientProcedureFromCollection(ProcedureLiteVo procedure, PatientProcedureShortVoCollection coll)
	{
		PatientProcedureShortVo mostRecentItem = null;
		
		for(int i = 0; i < coll.size(); i++)
		{
			PatientProcedureShortVo item = coll.get(i);
			
			if(item.getProcedure().equals(procedure))
			{
				if(mostRecentItem == null)
					mostRecentItem = item;
				else
				{
					if(item.getProcDateIsNotNull())
					{
						if(mostRecentItem.getProcDateIsNotNull())
						{
							if(item.getProcDate().isDate() && item.getProcDate().toDate().compareTo(mostRecentItem.getProcDate().toDate()) > 0)
								mostRecentItem = item;
						}
						else
						{
							mostRecentItem = item;
						}
					}
					else
					{
						if(!mostRecentItem.getProcDateIsNotNull())
						{
							//if both dates are null we compare by id
							if(item.getID_PatientProcedure().intValue() > mostRecentItem.getID_PatientProcedure().intValue())
								mostRecentItem = item;
						}
					}
				}
			}
		}
		
		return mostRecentItem;
	}
	private PatientDiagnosisVo getLastPatientDiagnosisFromCollection(DiagLiteVo diagnosis, PatientDiagnosisVoCollection coll)
	{
		PatientDiagnosisVo mostRecentItem = null;
		
		for(int i = 0; i < coll.size(); i++)
		{
			PatientDiagnosisVo item = coll.get(i);
			
			if(item.getDiagnosis().equals(diagnosis))
			{
				if(mostRecentItem == null)
					mostRecentItem = item;
				else
				{
					if(item.getDiagnosedDateIsNotNull())
					{
						if(mostRecentItem.getDiagnosedDateIsNotNull())
						{
							if(item.getDiagnosedDate().isDate() && item.getDiagnosedDate().toDate().compareTo(mostRecentItem.getDiagnosedDate().toDate()) > 0)
								mostRecentItem = item;
						}
						else
						{
							mostRecentItem = item;
						}
					}
					else
					{
						if(!mostRecentItem.getDiagnosedDateIsNotNull())
						{
							//if both dates are null we compare by id
							if(item.getID_PatientDiagnosis().intValue() > mostRecentItem.getID_PatientDiagnosis().intValue())
								mostRecentItem = item;
						}
					}
				}
			}
		}
		
		return mostRecentItem;
	}
	
	private grdPMHChecklistRow getDiagnosisRowFromCheckList(DiagLiteVo diagnosis)
	{
		for(int i = 0; i < form.grdPMHChecklist().getRows().get(0).getRows().size(); i++)
		{
			grdPMHChecklistRow row = form.grdPMHChecklist().getRows().get(0).getRows().get(i);
			
			if(row.getValue() != null && row.getValue() instanceof DiagLiteVo && row.getValue().equals(diagnosis))
				return row;
		}
		
		return null;
	}
	
	private boolean setUpBlankPMHChecklistGrid() 
	{
		PMHChecklistConfigVo config = null;

		//PMHChecklistConfigVo config = domain.getPMHCheckListConfig();
		
		if ((form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()) 
			&&(!form.getGlobalContext().Core.getCurrentClinicalContact().getSpecialtyIsNotNull()) )
		{
			engine.showMessage("There is no Specialty for this Contact so no PMH checklist can be displayed!");
			return false;
		}

		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			config = domain.getPMHCheckListConfigForSpecialty(form.getGlobalContext().Core.getCurrentClinicalContact());
			if(config == null)
			{
				engine.showMessage("Please configure the PMH checklist first!");
				return false;
			}
		}
		else if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			Specialty lkupSpecialty = domain.getSpecialtyForEpisodeOfCare(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare());
			config = domain.getPMHCheckListConfigForSpecialty(lkupSpecialty);
			if(config == null)
			{
				engine.showMessage("Please configure the PMH checklist first!");
				return false;
			}
		}
		
		form.grdPMHChecklist().getRows().clear();

		//Setup the diagnosis list in the grid
		DiagnosisListVoCollection diagColl = config.getDiagnosisList().sort();
		if(diagColl != null)
		{
			GenForm.grdPMHChecklistRow row = form.grdPMHChecklist().getRows().newRow();
			
			row.setcolHxOf("Diagnosis:");
			row.setBold(true);
			row.setBackColor(Color.Beige);
			row.setExpandedImage(form.getImages().Core.BlueSquare);
			row.setCollapsedImage(form.getImages().Core.BlueSquare);
			row.setSelectedImage(form.getImages().Core.BlueSquare);
			row.setReadOnly(true);
			row.setIsParentRow(true);
			
			for(int i = 0; i < diagColl.size(); i++)
			{
				GenForm.grdPMHChecklistRow childDiagnosis = row.getRows().newRow();
				
				DiagnosisListVo descr = diagColl.get(i);
				
				childDiagnosis.setcolHxOf(descr.getDiagnosis().getDiagnosisName());
				childDiagnosis.setValue(descr.getDiagnosis());
			}
		}
		//Set up the procedure list in the grid
		ProcedureListVoCollection procColl = config.getProcedureList().sort();
		if(procColl != null)
		{
			GenForm.grdPMHChecklistRow row = form.grdPMHChecklist().getRows().newRow();
			
			row.setcolHxOf("Procedure:");
			row.setBold(true);
			row.setBackColor(Color.Beige);
			row.setExpandedImage(form.getImages().Core.GreenSquare);
			row.setCollapsedImage(form.getImages().Core.GreenSquare);
			row.setSelectedImage(form.getImages().Core.GreenSquare);
			row.setReadOnly(true);
			row.setIsParentRow(true);
			
			for(int i = 0; i < procColl.size(); i++)
			{
				GenForm.grdPMHChecklistRow childProcedure = row.getRows().newRow();
				
				ProcedureListVo descr = procColl.get(i);
				
				childProcedure.setcolHxOf(descr.getProcedure().getProcedureName());
				childProcedure.setValue(descr.getProcedure());
			}
		}
		form.grdPMHChecklist().expandAll();
		
		if(diagColl == null && procColl == null)
		{
			engine.showMessage("Please configure the PMH checklist first!");
			return false;
		}
		
		return true;
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		enableControls(false);
		enableGrid();
	}
	private void enableGrid() 
	{
		form.grdPMHChecklist().isEnabled();
		form.grdPMHChecklist().setEnabled(true);
		form.grdPMHChecklist().setReadOnly(false);
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		enableControls(false);
		enableGrid();
	}
	
	private void enableControls(boolean bEnabled) 
	{
		form.btnNew().setVisible(bEnabled);
		form.btnUpdate().setVisible(bEnabled);
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateScreenData() == false)
			return;
		
		populateDataFromScreen();
		
		PatientPMHChecklistVo voPatientPMHChecklist = form.getLocalContext().getvoPatientPMHChecklist();
		voPatientPMHChecklist.setPresComplaint("Demo"); //to satisfy validation
		ClinicalContactShortVo voClinContactShort = form.getGlobalContext().Core.getCurrentClinicalContact();
		
		voPatientPMHChecklist.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voPatientPMHChecklist.setClinicalContact(voClinContactShort);
		String[] arrErrors = voPatientPMHChecklist.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			voPatientPMHChecklist = domain.savePatientPMHChecklist(voPatientPMHChecklist, form.getGlobalContext().Core.getPatientShort());
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		catch (UniqueKeyViolationException ue)
		{
			engine.showMessage(ue.getMessage());
			return;
		}

		
		form.getLocalContext().setvoPatientPMHChecklist(voPatientPMHChecklist);
		form.setMode(FormMode.VIEW);
		open();
	}
	
	private boolean validateScreenData()
	{
		if(form.grdPMHChecklist().getRows().size() > 0)
		{
			if(validateBranch(0) == false)
				return false;
		}
		if(form.grdPMHChecklist().getRows().size() > 1)
		{
			if(validateBranch(1) == false)
				return false;
		}
		
		return true;
	}
	private boolean validateBranch(int rowIndex)
	{
		for (int i = 0; i < form.grdPMHChecklist().getRows().get(rowIndex).getRows().size(); i++)
		{
			grdPMHChecklistRow row = form.grdPMHChecklist().getRows().get(rowIndex).getRows().get(i);
			
			if(row.getcolSelect() == null)
			{
				if(row.getcolDiagnosisDate() != null || row.getcolSource() != null)
				{
					engine.showMessage("Please tick the '" + row.getcolHxOf() + "' row !");
					return false;
				}

				if(row.getcolNotes() != null && row.getcolNotes().length() > 0)
				{
					engine.showMessage("Please tick the '" + row.getcolHxOf() + "' row !");
					return false;
				}
			}
			else
			{
				if(!row.getcolSelect().equals(YesNoUnknown.YES) && row.getcolDiagnosisDate() != null)
				{
					engine.showMessage("Please clear the date for '" + row.getcolHxOf() + "' row !");
					return false;
				}
				if (row.getcolSelect().equals(YesNoUnknown.YES) && new PartialDate(new Date()).isLessThan(row.getcolDiagnosisDate()))
				{
					engine.showMessage("Diagnosis date for '"+row.getcolHxOf()+"' row cannot be in the future");
					return false;
				}
				
			}
		}
		
		return true;
	}
	protected void clearScreen()
	{
		form.grdPMHChecklist().getRows().clear();
	}
	protected void populateScreenFromData()
	{
		resetDiagnosisAndProcedures();
		
		PatientPMHChecklistVo voPatientPMHChecklist = form.getLocalContext().getvoPatientPMHChecklist();
		if(voPatientPMHChecklist == null)
			return;
		
		populateGridFromData();
		
	}
	private void populateGridFromData() 
	{
		PatientPMHChecklistVo voPatientPMHChecklist = form.getLocalContext().getvoPatientPMHChecklist();
		if(voPatientPMHChecklist == null)
		{
			engine.showMessage("Could not retrieve the list of Procedures and Diagnosis!");
			return;
		}
		
		resetDiagnosisAndProcedures();

		//Setup the diagnosis list in the grid
		PatientDiagnosisVoCollection collPositiveDiagnosis = voPatientPMHChecklist.getPositiveDiagnosis();
		PatientPMHChecklistDiagnosisVoCollection collNegativeDiagnosis = voPatientPMHChecklist.getOtherDiagnosis();

		if(collPositiveDiagnosis != null)
		{
			for(int i = 0; i < collPositiveDiagnosis.size(); i++)
			{
				PatientDiagnosisVo voPatientDiagnosis = collPositiveDiagnosis.get(i);

				GenForm.grdPMHChecklistRow childDiagnosis = getDiagnosisRowFromCheckList(voPatientDiagnosis.getDiagnosis());
				
				if(childDiagnosis == null)
				{
					childDiagnosis = form.grdPMHChecklist().getRows().get(0).getRows().newRow();
					childDiagnosis.setcolHxOf(voPatientDiagnosis.getDiagnosis().getDiagnosisName());
					childDiagnosis.setValue(voPatientDiagnosis.getDiagnosis());
				}
				childDiagnosis.setcolSelect(YesNoUnknown.YES);
				childDiagnosis.setcolSelectReadOnly(true);
				childDiagnosis.setcolSource(voPatientDiagnosis.getSourceofInformation());

				//if(voPatientDiagnosis.getDiagnosedDateIsNotNull())
				childDiagnosis.setcolDiagnosisDate(voPatientDiagnosis.getDiagnosedDate());
				
				childDiagnosis.setcolNotes(voPatientDiagnosis.getNotes());
			}
		}
		if(collNegativeDiagnosis != null)
		{
			for(int i = 0; i < collNegativeDiagnosis.size(); i++)
			{
				PatientPMHChecklistDiagnosisVo voNegativeDiagList = collNegativeDiagnosis.get(i);

				GenForm.grdPMHChecklistRow childDiagnosis = getDiagnosisRowFromCheckList(voNegativeDiagList.getDiagnosis());
				
				if(childDiagnosis == null)
				{
					childDiagnosis = form.grdPMHChecklist().getRows().get(0).getRows().newRow();
					childDiagnosis.setcolHxOf(voNegativeDiagList.getDiagnosis().getDiagnosisName());
					childDiagnosis.setValue(voNegativeDiagList.getDiagnosis());
				}
				childDiagnosis.setcolSelect(voNegativeDiagList.getSelected());
				childDiagnosis.setcolNotes(voNegativeDiagList.getNotes());
				childDiagnosis.setcolSource(voNegativeDiagList.getSourceofInformation());
			}
		}
		
		//Set up the procedure list in the grid
		PatientProcedureShortVoCollection collPositiveProcedure = voPatientPMHChecklist.getPositiveProcedure();
		PatientPMHChecklistProcedureVoCollection collNegativeProcedure = voPatientPMHChecklist.getOtherProcedure();

		if(collPositiveProcedure != null)
		{
			for(int i = 0; i < collPositiveProcedure.size(); i++)
			{
				PatientProcedureShortVo voPatientProcedure = collPositiveProcedure.get(i);
				GenForm.grdPMHChecklistRow childProcedure = getProcedureRowFromCheckList(voPatientProcedure.getProcedure());
				
				if(childProcedure == null)
				{
					childProcedure = form.grdPMHChecklist().getRows().get(1).getRows().newRow();
					
					childProcedure.setcolHxOf(voPatientProcedure.getProcedure().getProcedureName());
					childProcedure.setValue(voPatientProcedure.getProcedure());
				}
				childProcedure.setcolSelect(YesNoUnknown.YES);
				childProcedure.setcolSelectReadOnly(true);
				childProcedure.setcolSource(voPatientProcedure.getInfoSource());

				//if(voPatientProcedure.getProcDateIsNotNull())
				childProcedure.setcolDiagnosisDate(voPatientProcedure.getProcDate());
				
				childProcedure.setcolNotes(voPatientProcedure.getNotes());
			}
		}
		if(collNegativeProcedure != null)
		{
			for(int i = 0; i < collNegativeProcedure.size(); i++)
			{
				PatientPMHChecklistProcedureVo voNegativeProcList = collNegativeProcedure.get(i);
				
				
				GenForm.grdPMHChecklistRow childProcedure = getProcedureRowFromCheckList(voNegativeProcList.getProcedure());
				
				if(childProcedure == null)
				{
					childProcedure = form.grdPMHChecklist().getRows().get(1).getRows().newRow();
					
					childProcedure.setcolHxOf(voNegativeProcList.getProcedure().getProcedureName());
					childProcedure.setValue(voNegativeProcList.getProcedure());
				}
				childProcedure.setcolSelect(voNegativeProcList.getSelected());
				childProcedure.setcolNotes(voNegativeProcList.getNotes());
				childProcedure.setcolSource(voNegativeProcList.getSourceofInformation());
			}
		}
		
		form.grdPMHChecklist().expandAll();
		
		form.getLocalContext().setPatientDiagnosis(collPositiveDiagnosis);
		form.getLocalContext().setPatientProcedures(collPositiveProcedure);
	}
	private void resetDiagnosisAndProcedures()
	{
		if(form.grdPMHChecklist().getRows().size() > 0)
		{
			for(int i = 0; i < form.grdPMHChecklist().getRows().get(0).getRows().size(); i++)
			{
				resetRow(form.grdPMHChecklist().getRows().get(0).getRows().get(i));
			}
		}
		if(form.grdPMHChecklist().getRows().size() > 1)
		{
			for(int i = 0; i < form.grdPMHChecklist().getRows().get(1).getRows().size(); i++)
			{
				resetRow(form.grdPMHChecklist().getRows().get(1).getRows().get(i));
			}
		}
	}
	private void resetRow(grdPMHChecklistRow row)
	{
		row.setcolDiagnosisDate(null);
		row.setcolNotes(null);
		row.setcolSelect(null);
		row.setcolSource(null);
	}
	private void populateDataFromGrid() 
	{
		PatientPMHChecklistVo voPatientPMHChecklist = form.getLocalContext().getvoPatientPMHChecklist();
		if(voPatientPMHChecklist == null)
			voPatientPMHChecklist = new PatientPMHChecklistVo();
		
		//Save Diagnosis data from screen
		PatientDiagnosisVoCollection collPositiveDiag = new PatientDiagnosisVoCollection();
		PatientPMHChecklistDiagnosisVoCollection collNegativeDiag = new PatientPMHChecklistDiagnosisVoCollection();
		for (int j=0; j < form.grdPMHChecklist().getRows().get(0).getRows().size(); j++)
		{							
			GenForm.grdPMHChecklistRow diagnosisRow = form.grdPMHChecklist().getRows().get(0).getRows().get(j);
			
			if (diagnosisRow.getcolSelect() != null)
			{
				if (diagnosisRow.getcolSelect().equals(YesNoUnknown.YES))
				{
					DiagLiteVo voDiagnosis = (DiagLiteVo) diagnosisRow.getValue();
					if(voDiagnosis == null)
						voDiagnosis = new DiagLiteVo();
					
					//PatientDiagnosisVo voPatientDiagnosis = domain.getPatientDiagnosisForDiagnosis(voDiagnosis);

					PatientDiagnosisVo positiveDiag = getExistingPatientDiagnosisOrCreateNew(voDiagnosis);
					
					if (!positiveDiag.getID_PatientDiagnosisIsNotNull())
					{
						positiveDiag.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
						positiveDiag.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					}
					
					positiveDiag.setDiagnosis(voDiagnosis);
					
	
					voDiagnosis.setDiagnosisName(diagnosisRow.getcolHxOf());
	
					if(diagnosisRow.getcolNotes() != null)
						positiveDiag.setNotes(diagnosisRow.getcolNotes());
					
					positiveDiag.setDiagnosedDate(diagnosisRow.getcolDiagnosisDate());
					AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo(); 
					Object hcp = domain.getHcpLiteUser();
					if(hcp!=null)
						voAuthoringInformation.setAuthoringHcp((HcpLiteVo)hcp);
					voAuthoringInformation.setAuthoringDateTime(new DateTime());
					positiveDiag.setAuthoringInfo(voAuthoringInformation);
					
					positiveDiag.setDiagnosisDescription(diagnosisRow.getcolHxOf());
					/*
					if(diagnosisRow.getcolDiagnosisDate() != null)
					{
						PartialDate parDateValue = new PartialDate(diagnosisRow.getcolDiagnosisDate());
						positiveDiag.setDiagnosedDate(parDateValue);
					}
					else
						positiveDiag.setDiagnosedDate(null);
					*/
					
					//Mandatory Information in the PatientDiagnosisVo
					positiveDiag.setSourceofInformation(diagnosisRow.getcolSource());
					
					collPositiveDiag.add(positiveDiag);
					
				}
				else
				{
					PatientPMHChecklistDiagnosisVo negativeDiag = new PatientPMHChecklistDiagnosisVo();
					negativeDiag.setDiagnosis((DiagLiteVo) diagnosisRow.getValue());
					negativeDiag.setSelected(diagnosisRow.getcolSelect());
					negativeDiag.setNotes(diagnosisRow.getcolNotes());
					negativeDiag.setSourceofInformation(diagnosisRow.getcolSource());
					collNegativeDiag.add(negativeDiag);
				}
			}
		}
		
		//Save Procedure data from screen
		PatientProcedureShortVoCollection collPositiveProc = new PatientProcedureShortVoCollection();
		PatientPMHChecklistProcedureVoCollection collNegativeProc = new PatientPMHChecklistProcedureVoCollection();
		for (int j=0; j < form.grdPMHChecklist().getRows().get(1).getRows().size(); j++)
		{							
			GenForm.grdPMHChecklistRow procedureRow =form.grdPMHChecklist().getRows().get(1).getRows().get(j);
			if (procedureRow.getcolSelect() != null)
			{
				if(procedureRow.getcolSelect().equals(YesNoUnknown.YES))
				{
					ProcedureLiteVo voProcedure = (ProcedureLiteVo) procedureRow.getValue();

					PatientProcedureShortVo positiveProc = getExistingPatientProcedureOrCreateNew(voProcedure);
					
					if (!positiveProc.getID_PatientProcedureIsNotNull())
					{
						positiveProc.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
						positiveProc.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					}
					
					//voProcedure.setProcedureName(procedureRow.getcolHxOf());
					positiveProc.setProcedure(voProcedure);
	
					if(procedureRow.getcolNotes() != null)
						positiveProc.setNotes(procedureRow.getcolNotes());
					
					positiveProc.setProcDate(procedureRow.getcolDiagnosisDate());
					/*
					if(procedureRow.getcolDiagnosisDate() != null)
					{
						PartialDate parDateValue = new PartialDate(procedureRow.getcolDiagnosisDate());
						positiveProc.setProcDate(parDateValue);
					}
					else
						positiveProc.setProcDate(null);
					*/
					AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo(); 
					Object hcp = domain.getHcpLiteUser();
					if(hcp!=null)
						voAuthoringInformation.setAuthoringHcp((HcpLiteVo)hcp);
					voAuthoringInformation.setAuthoringDateTime(new DateTime());
					positiveProc.setAuthoringInformation(voAuthoringInformation);
					
					positiveProc.setProcedureDescription(voProcedure.getProcedureName());
					positiveProc.setProcedureStatus(PatientProcedureStatus.PERFORMED);
					
					//Mandatory Information in the PatientDiagnosisVo
					positiveProc.setInfoSource(procedureRow.getcolSource());
					
					collPositiveProc.add(positiveProc);
				}
				else
				{
					PatientPMHChecklistProcedureVo negativeProc = new PatientPMHChecklistProcedureVo();
					negativeProc.setProcedure((ProcedureLiteVo) procedureRow.getValue());
					negativeProc.setSelected(procedureRow.getcolSelect());
					negativeProc.setNotes(procedureRow.getcolNotes());
					negativeProc.setSourceofInformation(procedureRow.getcolSource());
					collNegativeProc.add(negativeProc);
				}
			}
		}
		voPatientPMHChecklist.setPositiveDiagnosis(collPositiveDiag);
		voPatientPMHChecklist.setOtherDiagnosis(collNegativeDiag);
		voPatientPMHChecklist.setPositiveProcedure(collPositiveProc);
		voPatientPMHChecklist.setOtherProcedure(collNegativeProc);
		
		form.getLocalContext().setvoPatientPMHChecklist(voPatientPMHChecklist);
	}
	private PatientProcedureShortVo getExistingPatientProcedureOrCreateNew(ProcedureLiteVo voProcedure)
	{
		PatientProcedureShortVoCollection collProc = form.getLocalContext().getPatientProcedures();
		
		if(collProc == null)
			return new PatientProcedureShortVo();
		
		for(int i = 0; i < collProc.size(); i++)
		{
			if(collProc.get(i).getProcedure().getID_Procedure().equals(voProcedure.getID_Procedure()))
				return collProc.get(i);
		}
		
		return new PatientProcedureShortVo();
	}
	private PatientDiagnosisVo getExistingPatientDiagnosisOrCreateNew(DiagLiteVo voDiagnosis)
	{
		PatientDiagnosisVoCollection collDiag = form.getLocalContext().getPatientDiagnosis();
		
		if(collDiag == null)
			return new PatientDiagnosisVo();
		
		for(int i = 0; i < collDiag.size(); i++)
		{
			if(collDiag.get(i).getDiagnosis().getID_Diagnosis().equals(voDiagnosis.getID_Diagnosis()))
				return collDiag.get(i);
		}
		
		return new PatientDiagnosisVo();
	}
	protected void populateDataFromScreen()
	{
		PatientPMHChecklistVo voPatientPMHChecklist = form.getLocalContext().getvoPatientPMHChecklist();
		if(voPatientPMHChecklist == null)
		{
			voPatientPMHChecklist = new PatientPMHChecklistVo();
			voPatientPMHChecklist.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voPatientPMHChecklist.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		}
		form.getLocalContext().setvoPatientPMHChecklist(voPatientPMHChecklist);
		
		populateDataFromGrid();
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdPMHChecklist().setEnabled(false);
		form.setMode(FormMode.VIEW);
		open();
	}
	protected void ongrdPMHChecklistGridcolSelectColumnAnswerBoxValueChanged(grdPMHChecklistRow row)
	{
		if(row.getcolSelect() != null)
		{	
			row.setcolNotesReadOnly(!row.getcolSelect().equals(YesNoUnknown.YES));
			row.setcolDiagnosisDateReadOnly(!row.getcolSelect().equals(YesNoUnknown.YES));
		}
	}
	protected void onGrdPMHChecklistSelectionChanged() throws PresentationLogicException
	{
		updateMenuItems();
	}
	private void updateMenuItems()
	{
		grdPMHChecklistRow row = form.grdPMHChecklist().getRowByValue(form.grdPMHChecklist().getValue());
		form.getContextMenus().getHistoryChkLstBREAK_LINKItem().setVisible(row != null && row.iscolSelectReadOnly() && form.getMode().equals(FormMode.EDIT));
	
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.HistoryChkLst.BREAK_LINK :
				breakLink();
				break;
			default :
				break;
		}
		updateMenuItems();
		
	}
	private void breakLink()
	{
		grdPMHChecklistRow row = form.grdPMHChecklist().getRowByValue(form.grdPMHChecklist().getValue());
		
		if(row != null && row.iscolSelectReadOnly())
		{
			row.setcolDiagnosisDate(null);
			row.setcolNotes(null);
			row.setcolSelect(null);
			row.setcolSource(null);
			
			row.setcolSelectReadOnly(false);
			
			if(row.getValue() instanceof DiagLiteVo)
			{
				DiagLiteVo diagnosis = (DiagLiteVo)row.getValue();
				PatientDiagnosisVoCollection coll = form.getLocalContext().getPatientDiagnosis();
				
				if(coll != null)
				{
					for(int i = 0; i < coll.size(); i++)
					{
						if(coll.get(i).getDiagnosis().getID_Diagnosis().equals(diagnosis.getID_Diagnosis()))
						{
							coll.remove(i);
							form.getLocalContext().setPatientDiagnosis(coll);
							break;
						}
					}
				}
			}
			else if(row.getValue() instanceof ProcedureLiteVo)
			{
				ProcedureLiteVo procedure = (ProcedureLiteVo)row.getValue();
				PatientProcedureShortVoCollection coll = form.getLocalContext().getPatientProcedures();
				
				if(coll != null)
				{
					for(int i = 0; i < coll.size(); i++)
					{
						if(coll.get(i).getProcedure().getID_Procedure().equals(procedure.getID_Procedure()))
						{
							coll.remove(i);
							form.getLocalContext().setPatientProcedures(coll);
							break;
						}
					}
				}
			}
		}
	}
	protected void onFormModeChanged()
	{
		updateMenuItems();
	}
}
