//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.pmhchecklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdPMHChecklistRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPMHChecklistRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setcolHxOfReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolHxOfReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolHxOfOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolHxOf()
		{
			return (String)super.row.get(0);
		}
		public void setcolHxOf(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolHxOfTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSelectOpened()
		{
			super.row.showOpened(1);
		}
		public ims.core.vo.lookups.YesNoUnknown getcolSelect()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.row.get(1);
		}
		public void setcolSelect(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.row.set(1, value, true);
		}
		public void setCellcolSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolDiagnosisDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolDiagnosisDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolDiagnosisDateOpened()
		{
			super.row.showOpened(2);
		}
		public ims.framework.utils.PartialDate getcolDiagnosisDate()
		{
			return (ims.framework.utils.PartialDate)super.row.get(2);
		}
		public void setcolDiagnosisDate(ims.framework.utils.PartialDate value)
		{
			super.row.set(2, value);
		}
		public void setCellcolDiagnosisDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolSourceReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolSourceReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolSourceOpened()
		{
			super.row.showOpened(3);
		}
		public ims.core.vo.lookups.SourceofInformation getcolSource()
		{
			return (ims.core.vo.lookups.SourceofInformation)super.row.get(3);
		}
		public void setcolSource(ims.core.vo.lookups.SourceofInformation value)
		{
			super.row.set(3, value, true);
		}
		public void setCellcolSourceTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolNotesReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolNotesReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolNotesOpened()
		{
			super.row.showOpened(4);
		}
		public String getcolNotes()
		{
			return (String)super.row.get(4);
		}
		public void setcolNotes(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolNotesTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
		public grdPMHChecklistRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdPMHChecklistRow(super.row.getParent());
		}
		public grdPMHChecklistRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdPMHChecklistRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdPMHChecklistRowCollection collection;
	}
	public static class grdPMHChecklistRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPMHChecklistRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPMHChecklistRow get(int index)
		{
			return new grdPMHChecklistRow(super.collection.get(index));
		}
		public grdPMHChecklistRow newRow()
		{
			return new grdPMHChecklistRow(super.collection.newRow());
		}
		public grdPMHChecklistRow newRow(boolean autoSelect)
		{
			return new grdPMHChecklistRow(super.collection.newRow(autoSelect));
		}
		public grdPMHChecklistRow newRowAt(int index)
		{
			return new grdPMHChecklistRow(super.collection.newRowAt(index));
		}
		public grdPMHChecklistRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPMHChecklistRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPMHChecklistGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdPMHChecklistRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdPMHChecklistRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdPMHChecklistRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdPMHChecklistRow[] result = new GenForm.grdPMHChecklistRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdPMHChecklistRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdPMHChecklistRow[] getAllRows(GenForm.grdPMHChecklistRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdPMHChecklistRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdPMHChecklistRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdPMHChecklistRow[] result = new GenForm.grdPMHChecklistRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdPMHChecklistRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdPMHChecklistRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdPMHChecklistRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdPMHChecklistRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
		{
			super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
		}
		public void answerBoxColumnClear(int column)
		{
			super.grid.answerBoxColumnClear(column);
		}
		public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
		{
			super.grid.answerBoxColumnNewOption(column, option);
		}
		private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdPMHChecklistRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPMHChecklistRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPMHChecklistRowCollection getRows()
		{
			return new grdPMHChecklistRowCollection(super.grid.getRows());
		}
		public grdPMHChecklistRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPMHChecklistRow(row);
		}
		public void setcolHxOfHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolHxOfHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridMutableAnswerBox colSelectAnswerBox()
		{
			return null;//return new GridMutableAnswerBox(super.grid, 1);
		}
		public void setcolDiagnosisDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolDiagnosisDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolSourceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolSourceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public GridComboBox colSourceComboBox()
		{
			return new GridComboBox(super.grid, 3);
		}
		public void setcolNotesHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolNotesHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuHistoryChkLst = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuHistoryChkLstBREAK_LINKItem = factory.createMenuItem(startControlID.intValue() + 1, "Break Link", true, false, new Integer(102103), true, false);
		contextMenus.contextMenuHistoryChkLst.add(contextMenus.contextMenuHistoryChkLstBREAK_LINKItem);
		form.registerMenu(contextMenus.contextMenuHistoryChkLst);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"PMH Checklist ", new Integer(1), ""}));

		// Button Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 816, 536, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdPMHChecklistTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuHistoryChkLst, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPMHChecklistTemp);
		grdPMHChecklistGrid grdPMHChecklist = (grdPMHChecklistGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPMHChecklistGrid.class, m_grdPMHChecklistTemp);
		grdPMHChecklist.addTreeColumn("History of Diagnosis/Procedures", 0, 270, false, true);
		grdPMHChecklist.addAnswerBoxColumn("Select", 1, 1, 60, false, true, 10, true, true);
		grdPMHChecklist.addPartialDateColumn("Diagnosis Date", 0, 0, 100, false, true, null, false, 0, true);
		grdPMHChecklist.addComboBoxColumn("Source of Information", 0, 0, 150, false, true, false, false, true, -1);
		grdPMHChecklist.addStringColumn("Notes", 0, 0, -1, false, false, 0, 500, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdPMHChecklist);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnNew()
	{
		return (Button)super.getControl(1);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public grdPMHChecklistGrid grdPMHChecklist()
	{
		return (grdPMHChecklistGrid)super.getGrid(0);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled16 = new ImageHelper(102165, "Images/Core/FindDisabled16.gif", new Integer(16), new Integer(16));
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
				BlueSquare = new ImageHelper(102121, "Images/Core/circle_blue.png", new Integer(16), new Integer(16));
				GreenSquare = new ImageHelper(102124, "Images/Core/circle_green.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindDisabled16;
			public final ims.framework.utils.Image FindEnabled16;
			public final ims.framework.utils.Image BlueSquare;
			public final ims.framework.utils.Image GreenSquare;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_voPatientPMHChecklist = new ims.framework.ContextVariable("voPatientPMHChecklist", prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklist_" + componentIdentifier + "");
			cxl_voPatientPMHChecklistDiagnosis = new ims.framework.ContextVariable("voPatientPMHChecklistDiagnosis", prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklistDiagnosis_" + componentIdentifier + "");
			cxl_voPatientPMHChecklistProcedure = new ims.framework.ContextVariable("voPatientPMHChecklistProcedure", prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklistProcedure_" + componentIdentifier + "");
			cxl_PastMedicalHistory = new ims.framework.ContextVariable("PastMedicalHistory", prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__PastMedicalHistory_" + componentIdentifier + "");
			cxl_PatientDiagnosis = new ims.framework.ContextVariable("PatientDiagnosis", prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__PatientDiagnosis_" + componentIdentifier + "");
			cxl_PatientProcedures = new ims.framework.ContextVariable("PatientProcedures", prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__PatientProcedures_" + componentIdentifier + "");
		}
		
		public boolean getvoPatientPMHChecklistIsNotNull()
		{
			return !cxl_voPatientPMHChecklist.getValueIsNull(context);
		}
		public ims.clinical.vo.PatientPMHChecklistVo getvoPatientPMHChecklist()
		{
			return (ims.clinical.vo.PatientPMHChecklistVo)cxl_voPatientPMHChecklist.getValue(context);
		}
		public void setvoPatientPMHChecklist(ims.clinical.vo.PatientPMHChecklistVo value)
		{
			cxl_voPatientPMHChecklist.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voPatientPMHChecklist = null;
		public boolean getvoPatientPMHChecklistDiagnosisIsNotNull()
		{
			return !cxl_voPatientPMHChecklistDiagnosis.getValueIsNull(context);
		}
		public ims.clinical.vo.PatientPMHChecklistDiagnosisVo getvoPatientPMHChecklistDiagnosis()
		{
			return (ims.clinical.vo.PatientPMHChecklistDiagnosisVo)cxl_voPatientPMHChecklistDiagnosis.getValue(context);
		}
		public void setvoPatientPMHChecklistDiagnosis(ims.clinical.vo.PatientPMHChecklistDiagnosisVo value)
		{
			cxl_voPatientPMHChecklistDiagnosis.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voPatientPMHChecklistDiagnosis = null;
		public boolean getvoPatientPMHChecklistProcedureIsNotNull()
		{
			return !cxl_voPatientPMHChecklistProcedure.getValueIsNull(context);
		}
		public ims.clinical.vo.PatientPMHChecklistProcedureVo getvoPatientPMHChecklistProcedure()
		{
			return (ims.clinical.vo.PatientPMHChecklistProcedureVo)cxl_voPatientPMHChecklistProcedure.getValue(context);
		}
		public void setvoPatientPMHChecklistProcedure(ims.clinical.vo.PatientPMHChecklistProcedureVo value)
		{
			cxl_voPatientPMHChecklistProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voPatientPMHChecklistProcedure = null;
		public boolean getPastMedicalHistoryIsNotNull()
		{
			return !cxl_PastMedicalHistory.getValueIsNull(context);
		}
		public ims.core.vo.PatientPastMedicalHistoryVo getPastMedicalHistory()
		{
			return (ims.core.vo.PatientPastMedicalHistoryVo)cxl_PastMedicalHistory.getValue(context);
		}
		public void setPastMedicalHistory(ims.core.vo.PatientPastMedicalHistoryVo value)
		{
			cxl_PastMedicalHistory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PastMedicalHistory = null;
		public boolean getPatientDiagnosisIsNotNull()
		{
			return !cxl_PatientDiagnosis.getValueIsNull(context);
		}
		public ims.core.vo.PatientDiagnosisVoCollection getPatientDiagnosis()
		{
			return (ims.core.vo.PatientDiagnosisVoCollection)cxl_PatientDiagnosis.getValue(context);
		}
		public void setPatientDiagnosis(ims.core.vo.PatientDiagnosisVoCollection value)
		{
			cxl_PatientDiagnosis.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientDiagnosis = null;
		public boolean getPatientProceduresIsNotNull()
		{
			return !cxl_PatientProcedures.getValueIsNull(context);
		}
		public ims.core.vo.PatientProcedureShortVoCollection getPatientProcedures()
		{
			return (ims.core.vo.PatientProcedureShortVoCollection)cxl_PatientProcedures.getValue(context);
		}
		public void setPatientProcedures(ims.core.vo.PatientProcedureShortVoCollection value)
		{
			cxl_PatientProcedures.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientProcedures = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class HistoryChkLst implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int BREAK_LINK = 1;
		}
		public void disableAllHistoryChkLstMenuItems()
		{
			this.contextMenuHistoryChkLstBREAK_LINKItem.setEnabled(false);
		}
		public void hideAllHistoryChkLstMenuItems()
		{
			this.contextMenuHistoryChkLstBREAK_LINKItem.setVisible(false);
		}
		private Menu contextMenuHistoryChkLst;
		public MenuItem getHistoryChkLstBREAK_LINKItem()
		{
			return this.contextMenuHistoryChkLstBREAK_LINKItem;
		}
		private MenuItem contextMenuHistoryChkLstBREAK_LINKItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[85];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklist_" + componentIdentifier, "BO-1072100015-ID", "ID_PatientPMHChecklist");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklist_" + componentIdentifier, "BO-1072100015-PMHINFOTEXT", "PMHInfoText");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklist_" + componentIdentifier, "BO-1072100015-PRESCOMPLAINT", "PresComplaint");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklist_" + componentIdentifier, "BO-1072100015-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklistDiagnosis_" + componentIdentifier, "BO-1072100016-ID", "ID_PatientPMHChecklistDiagnosis");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklistDiagnosis_" + componentIdentifier, "BO-1072100016-SELECTED", "Selected");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklistDiagnosis_" + componentIdentifier, "BO-1072100016-NOTES", "Notes");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklistDiagnosis_" + componentIdentifier, "BO-1072100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklistProcedure_" + componentIdentifier, "BO-1072100017-ID", "ID_PatientPMHChecklistProcedure");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklistProcedure_" + componentIdentifier, "BO-1072100017-SELECTED", "Selected");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklistProcedure_" + componentIdentifier, "BO-1072100017-NOTES", "Notes");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__voPatientPMHChecklistProcedure_" + componentIdentifier, "BO-1072100017-SOURCEOFINFORMATION", "SourceofInformation");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__PastMedicalHistory_" + componentIdentifier, "BO-1003100009-ID", "ID_PastMedicalHistory");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Clinical.PMHCheckList.__internal_x_context__PastMedicalHistory_" + componentIdentifier, "BO-1003100009-PATIENT", "Patient");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
