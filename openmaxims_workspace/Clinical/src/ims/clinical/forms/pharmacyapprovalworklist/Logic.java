//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3922.16454)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.pharmacyapprovalworklist;

import ims.clinical.forms.pharmacyapprovalworklist.GenForm.grdWorklistRow;
import ims.clinical.vo.PharmacyApprovalSearchCriteriaVo;
import ims.clinical.vo.TTAMedicationAndPharmacyShortVo;
import ims.clinical.vo.TTAMedicationAndPharmacyShortVoCollection;
import ims.clinical.vo.lookups.TTAStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.framework.Control;
import ims.framework.controls.Timer;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int TIMER_INTERVAL = ConfigFlag.UI.REFRESH_PHARMACY_TTA_RECORDS_EVERY_N_SECONDS.getValue() < 2 ? 2 : ConfigFlag.UI.REFRESH_PHARMACY_TTA_RECORDS_EVERY_N_SECONDS.getValue();
	
	
	private static final int COL_DOB = 2;
	
	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	// Event handlers
	// --------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();

		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		// Perform search - the called function will also validate the search
		// criteria
		search(true);
		
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		// Clear screen
		clear();

		// Clear global context containing persistent
		form.getGlobalContext().Clinical.setPharmacyApprovalSearchCriteria(null);

		// Stop the timer
		timersEnabled(false);

		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onImbAutoRefreshClick() throws PresentationLogicException
	{
		// Toggle timer
		timersEnabled(true);
	}

	@Override
	protected void onQmbResponsibleClinicianTextSubmited(String value) throws PresentationLogicException
	{
		// List responsible clinicians
		listResponsableClinicians(value);
	}

	@Override
	protected void onQmbLocationTextSubmited(String value) throws PresentationLogicException
	{
		// List wards
		listWards(value);
	}

	@Override
	protected void onGrdWorklistSelectionChanged() throws PresentationLogicException
	{
		// Need to update context menu
		updateControlsState();
	}

	@Override
	protected void onGrdWorklistGridHeaderClicked(int column) throws PresentationLogicException
	{
		switch (column)
		{
			case COL_DOB:
				
				// Set sort order
				if (!SortOrder.ASCENDING.equals(form.getLocalContext().getColumnDOBSortOrder()))
					form.getLocalContext().setColumnDOBSortOrder(SortOrder.ASCENDING);
				else
					form.getLocalContext().setColumnDOBSortOrder(SortOrder.DESCENDING);
				
				// Get values
				TTAMedicationAndPharmacyShortVoCollection list = form.grdWorklist().getValues();
				
				// Save selected value
				TTAMedicationAndPharmacyShortVo selected = form.grdWorklist().getValue();
				
				// Sort values
				populateResultsToScreen(list.sort(new DoBComparator(form.getLocalContext().getColumnDOBSortOrder())));
				
				// Re-select the saved value
				form.grdWorklist().setValue(selected);
				
				break;
		}
		// Update controls state
		updateControlsState();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.View:

				// Check for a value in the grid 
				if (form.grdWorklist().getValue() == null)
					throw new CodingRuntimeException("Can not open data for a null record. Please ensure there is a value selected");

				// Set current CareContext global context
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(form.grdWorklist().getValue().getCareContext()));
				
				// Open eDischargeSTHK form
				engine.open(form.getForms().Clinical.EDischargeSTHK);
				
				break;

			default:
				break;
		}
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		TTAMedicationAndPharmacyShortVo selected = form.grdWorklist().getValue();
		search(false);
		form.grdWorklist().setValue(selected);
		updateControlsState();
		 
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	// Form presentation functions
	// --------------------------------------------------------------------------------------------------------------------------------------------------------

	private void initialize() throws PresentationLogicException
	{
		// Hide all context menu options
		form.getContextMenus().hideAllGenericGridMenuItems();

		// Set text to context menu option VIEW
		form.getContextMenus().getGenericGridViewItem().setText("View eDischarge");
		
		// Remove DRAFT value from Pharmacy status
		form.cmbPharmacyStatus().removeRow(TTAStatus.DRAFT);
		form.cmbPharmacyStatus().removeRow(TTAStatus.NOT_REQUIRED);

		// Set auto-refresh false
		form.getLocalContext().setAutoRefresh(Boolean.FALSE);

		// Set timer interval
		form.getTimers().getSearchTimer().setInterval(TIMER_INTERVAL);
		
		// Clear sort order
		form.getLocalContext().setColumnDOBSortOrder(SortOrder.NONE);
	}

	private void open() throws PresentationLogicException
	{
		// Check global context
		if (form.getGlobalContext().Clinical.getPharmacyApprovalSearchCriteriaIsNotNull())
		{
			// Populate the search criteria fields
			populateSearchFieldsFromData(form.getGlobalContext().Clinical.getPharmacyApprovalSearchCriteria());

			// Perform the search - the called function will also validate the
			// search criteria
			search(false);
		}

		// Set form to VIEW mode
		form.setMode(FormMode.VIEW);
	}

	private void search(boolean manual) throws PresentationLogicException
	{
		if (manual)		// Get data from screen only when manual searching
		{
			// Validate data from screen
			String errors[] = validateUIRules();

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);

				return;
			}

			// Get data into global context
			form.getGlobalContext().Clinical.setPharmacyApprovalSearchCriteria(populateSearchFilterFromScreen());
		}

		// Clear results
		form.grdWorklist().getRows().clear();

		// Retrieve data from domain
		TTAMedicationAndPharmacyShortVoCollection results = domain.listTTAMedicationAndPharmacy(form.getGlobalContext().Clinical.getPharmacyApprovalSearchCriteria());

		// If no results were found display message and exit the function
		if (results == null || results.size() == 0)
		{
			// Display this message only when manual searching
			if (manual)
				engine.showMessage("No results matching search criteria were found.");
			
			return;
		}

		// Display data to screen
		populateResultsToScreen(results);
	}

	private void clear()
	{
		// Clear search criteria values
		clearSearchCriteria();

		// Clear search results
		form.grdWorklist().getRows().clear();
	}

	private void clearSearchCriteria()
	{
		// Clear search criteria fields
		form.dteFromDate().setValue(null);
		form.dteDateTo().setValue(null);
		form.qmbLocation().clear();
		form.qmbResponsibleClinician().clear();
		form.txtHospitalNumber().setValue(null);
		form.cmbPharmacyStatus().setValue(null);
	}

	private void updateControlsState()
	{
		form.imbAutoRefresh().setEnabled(form.getGlobalContext().Clinical.getPharmacyApprovalSearchCriteriaIsNotNull());
		
		// Update context menu option
		form.getContextMenus().getGenericGridViewItem().setVisible(form.grdWorklist().getValue() != null);
	}

	private void timersEnabled(boolean toggle)
	{
		// Evaluate toggle conditions (if the toggle is true - pressed image button for refresh, and currently the refresh is off)
		boolean toggleCondition = toggle && Boolean.FALSE.equals(form.getLocalContext().getAutoRefresh());
		
		form.getTimers().getSearchTimer().setEnabled(toggleCondition);
		form.getLocalContext().setAutoRefresh(toggleCondition);
		
		// Change the image if need to (I was too lazy to think of a one line condition) 
		if (form.getTimers().getSearchTimer().isEnabled())
		{
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
		}
		else if (!form.getTimers().getSearchTimer().isEnabled())
		{
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
		}
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange functions
	// --------------------------------------------------------------------------------------------------------------------------------------------------------

	private void populateSearchFieldsFromData(PharmacyApprovalSearchCriteriaVo pharmacyApprovalSearchCriteria)
	{
		// Populate dates
		form.dteFromDate().setValue(pharmacyApprovalSearchCriteria.getFromDate());
		form.dteDateTo().setValue(pharmacyApprovalSearchCriteria.getToDate());

		// Populate Location Ward
		form.qmbLocation().clear();
		if (pharmacyApprovalSearchCriteria.getLocationIsNotNull())
		{
			form.qmbLocation().newRow(pharmacyApprovalSearchCriteria.getLocation(), pharmacyApprovalSearchCriteria.getLocation().getName());
			form.qmbLocation().setValue(pharmacyApprovalSearchCriteria.getLocation());
		}

		// Populate responsible clinician
		form.qmbResponsibleClinician().clear();
		if (pharmacyApprovalSearchCriteria.getHCPIsNotNull())
		{
			form.qmbResponsibleClinician().newRow(pharmacyApprovalSearchCriteria.getHCP(), pharmacyApprovalSearchCriteria.getHCP().toString());
			form.qmbResponsibleClinician().setValue(pharmacyApprovalSearchCriteria.getHCP());
		}

		// Populate Hospital Number & populate pharmacy status
		form.txtHospitalNumber().setValue(pharmacyApprovalSearchCriteria.getHospitalNumber());
		form.cmbPharmacyStatus().setValue(pharmacyApprovalSearchCriteria.getStatus());
	}

	private PharmacyApprovalSearchCriteriaVo populateSearchFilterFromScreen()
	{
		// Create a new VO
		PharmacyApprovalSearchCriteriaVo criteria = new PharmacyApprovalSearchCriteriaVo();

		// Get dates
		criteria.setFromDate(form.dteFromDate().getValue());
		criteria.setToDate(form.dteDateTo().getValue());

		// Get location
		criteria.setLocation(form.qmbLocation().getValue());
		// Get responsible clinician
		criteria.setHCP(form.qmbResponsibleClinician().getValue());

		// Get Hospital number
		criteria.setHospitalNumber(form.txtHospitalNumber().getValue());
		// Get status
		criteria.setStatus(form.cmbPharmacyStatus().getValue());

		return criteria;
	}

	private void listResponsableClinicians(String value)
	{
		// Clear HCPs
		form.qmbResponsibleClinician().clear();
		
		// Get HCPs from domain
		HcpLiteVoCollection listHcp = domain.listHcp(value);

		// Check for null or empty list
		if (listHcp == null || listHcp.size() == 0)
		{
			form.qmbResponsibleClinician().showOpened();
			return;
		}

		// Add results into query combo-box
		for (HcpLiteVo hcp : listHcp)
		{
			form.qmbResponsibleClinician().newRow(hcp, hcp.toString());
		}

		// If only one value is returned then default to it
		if (listHcp.size() == 1)
		{
			form.qmbResponsibleClinician().setValue(listHcp.get(0));
		}
		else
		// Else expand the query combo-box
		{
			form.qmbResponsibleClinician().showOpened();
		}
	}

	private void listWards(String value)
	{
		// Clear wards
		form.qmbLocation().clear();
		
		// Get Wards from domain
		LocationLiteVoCollection listWards = domain.listWards(value);

		// Check for null or empty list
		if (listWards == null || listWards.size() == 0)
		{
			form.qmbLocation().showOpened();
			return;
		}

		// Add results into query combo-box
		for (LocationLiteVo ward : listWards)
		{
			form.qmbLocation().newRow(ward, ward.getName());
		}

		// If only one value is returned then default to it
		if (listWards.size() == 1)
		{
			form.qmbLocation().setValue(listWards.get(0));
		}
		else
		// Else expand the query combo-box
		{
			form.qmbLocation().showOpened();
		}
	}

	private void populateResultsToScreen(TTAMedicationAndPharmacyShortVoCollection results)
	{
		// Clear results grid
		form.grdWorklist().getRows().clear();

		// Terminate function if the results collection is null
		if (results == null)
			return;

		// Add each result to grid
		for (TTAMedicationAndPharmacyShortVo result : results)
		{
			if (result == null)
				continue;

			populateResultRow(result, form.grdWorklist().getRows().newRow());
		}
	}

	private void populateResultRow(TTAMedicationAndPharmacyShortVo result, grdWorklistRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Expected row can not be null");

		if (result == null)
			throw new CodingRuntimeException("Expected value can not be null");

		// Check patient (mandatory field - must not be null)
		if (!result.getPatientIsNotNull())
			throw new CodingRuntimeException("Expected patient can not be null");

		// Set column values
		row.setColHospNumber(result.getPatient().getHospnum() != null ? result.getPatient().getHospnum().getValue() : "");
		row.setColPatientName(result.getPatient().getName().toString());
		row.setColDob(result.getPatient().getDob());
		row.setColSex(result.getPatient().getSexIsNotNull() ? result.getPatient().getSex().getText() : "");
		row.setColLocWard(result.getCareContext().getPasEventIsNotNull() && result.getCareContext().getPasEvent().getLocationIsNotNull() ? result.getCareContext().getPasEvent().getLocation().getName() : "");
		row.setColExpDateOfDisch(result.getCareContext().getEstimatedDischargeDate());
		row.setColDateSubmitt(result.getDateSubmittedToPharmacy());
		row.setColPharmacyStatus(result.getCurrentTTAStatusIsNotNull() && result.getCurrentTTAStatus().getStatusIsNotNull() ? result.getCurrentTTAStatus().getStatus().getText() : "");

		// Set row value
		row.setValue(result);
	}

	private String[] validateUIRules()
	{
		// Create a new list of arrays
		ArrayList<String> listOfErrors = new ArrayList<String>();

		// Check to see if any data is completed for search criteria
		if (form.dteFromDate().getValue() == null && form.dteDateTo().getValue() == null && form.qmbLocation().getValue() == null && form.qmbResponsibleClinician().getValue() == null && (form.txtHospitalNumber().getValue() == null || form.txtHospitalNumber().getValue().length() == 0) && form.cmbPharmacyStatus().getValue() == null)
		{
			listOfErrors.add("Please provide at least one search criteria.");
		}

		// Check to see if both dates were filled
		if ((form.dteDateTo().getValue() != null && form.dteFromDate().getValue() == null) || (form.dteDateTo().getValue() == null && form.dteFromDate().getValue() != null))
		{
			listOfErrors.add("From and To dates must be both completed.");
		}
		
		// Check From and To date to be in succession
		if (form.dteDateTo().getValue() != null && form.dteFromDate().getValue() != null && form.dteDateTo().getValue().isLessThan(form.dteFromDate().getValue()))
		{
			listOfErrors.add("From date can not be set after To date.");
		}

		// Check to see if any errors were found
		int errorCount = listOfErrors.size();

		if (errorCount == 0)
			return null;

		// Transform the error list into an array
		String[] errors = new String[errorCount];

		for (int i = 0; i < errorCount; i++)
		{
			errors[i] = listOfErrors.get(i);
		}

		// Return the array of errors
		return errors;
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Comparators
	// --------------------------------------------------------------------------------------------------------------------------------------------------------

	private class DoBComparator implements Comparator<TTAMedicationAndPharmacyShortVo>
	{
		private int direction = 1;
		
		public DoBComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DoBComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}

		public int compare(TTAMedicationAndPharmacyShortVo o1, TTAMedicationAndPharmacyShortVo o2)
		{
			if (o1 == null || o2 == null)
				return 0;
			
			if (!o1.getPatientIsNotNull() || !o2.getPatientIsNotNull())
				return 0;
			
			if (o1.getPatient().getDobIsNotNull())
				return direction * o1.getPatient().getDob().compareTo(o2.getPatient().getDob());
			
			if (o2.getPatient().getDobIsNotNull())
				return (-1) * direction;
			
			return 0;
		}
		
	}
}
