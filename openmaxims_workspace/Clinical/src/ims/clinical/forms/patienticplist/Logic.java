//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3520.27738)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.patienticplist;

import ims.clinical.forms.patienticplist.GenForm.grdICPSRow;
import ims.configuration.gen.ConfigFlag;
import ims.core.helper.ResetPIDBarHelper;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.icp.vo.PatientICPMediumVo;
import ims.icp.vo.PatientICPMediumVoCollection;
import ims.vo.ValueObjectRef;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int START_DATE_COL_INDEX = 0;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}
	
	private void search() 
	{
		//WDEV-13361 
		form.getContextMenus().Clinical.hideAllPatientICPListMenuItems();

		PatientICPMediumVoCollection list = domain.listPatientICPs(form.getGlobalContext().Core.getPatientShort());
		if (list == null || list.size() == 0)
		{
			engine.showMessage("No records match your search criteria.", "No data found", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}

		form.getLocalContext().setPatientICPsCol(list);
		form.getLocalContext().setSortOrder(SortOrder.DESCENDING);
		populateICPGrid(sortListByStartDate(form.getLocalContext().getSortOrder()));
	}

	private void populateICPGrid(PatientICPMediumVoCollection list) 
	{
		if(list == null)
			return;
		
		form.grdICPS().getRows().clear();
		
		for (int i = 0 ; list != null && i < list.size() ; i++)
		{
			grdICPSRow row = form.grdICPS().getRows().newRow();

			row.setcolAdmissionDate(list.get(i).getStartedDateTimeIsNotNull() ? list.get(i).getStartedDateTime().toString() : "");
			row.setcolAuthoring(list.get(i).getAuthoringInformationIsNotNull() && list.get(i).getAuthoringInformation().getAuthoringHcpIsNotNull() ? list.get(i).getAuthoringInformation().getAuthoringHcp().getName().toString() : "");
			row.setcolICP(list.get(i).getICPIsNotNull() ? list.get(i).getICP().getName() : "");
			row.setcolCompleted(list.get(i).getCompletedDateTimeIsNotNull() ? list.get(i).getCompletedDateTime().toString() : "");
			
			if (list.get(i).getICPIsNotNull())
			{
				if(list.get(i).getHasOutstandingNursingActionsIsNotNull() 
				&& list.get(i).getHasOutstandingNursingActions())
				{
					row.setcolNurseAction(form.getImages().Admin.Nurse24);
					row.setTooltipForcolNurseAction("Nursing Action Required for ICP : " + (list.get(i).getICPIsNotNull() ? list.get(i).getICP().getName().toString() : ""));
				}
				else
					row.setcolNurseAction(null);
			
				if (list.get(i).getHasOutstandingClinicalActionsIsNotNull() 
					&& list.get(i).getHasOutstandingClinicalActions())
				{
					row.setcolDoctorAction(form.getImages().Admin.Stethoscope24);
					row.setTooltipForcolDoctorAction("Medical Action Required for ICP : " + (list.get(i).getICPIsNotNull() ? list.get(i).getICP().getName().toString() : ""));
				}
				else
					row.setcolDoctorAction(null);

				if (list.get(i).getHasOutstandingPhysioActionsIsNotNull() 
					&& list.get(i).getHasOutstandingPhysioActions())
				{
					row.setcolPhysioAction(form.getImages().Admin.Doctor24);
					row.setTooltipForcolPhysioAction("Physio Action Required for ICP : " + (list.get(i).getICPIsNotNull() ? list.get(i).getICP().getName().toString() : ""));
				}
				else
					row.setcolPhysioAction(null);

				if(list.get(i).getHasOutstandingAdminActionsIsNotNull()
					&& list.get(i).getHasOutstandingAdminActions())
				{
					row.setcolAdminAction(form.getImages().Admin.AdminAction24);
					row.setTooltipForcolAdminAction("Admin Action Required for ICP : " + (list.get(i).getICPIsNotNull() ? list.get(i).getICP().getName().toString() : ""));
				}
				else
					row.setcolAdminAction(null);
			}

			
			row.setValue(list.get(i));
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case ims.clinical.forms.patienticplist.GenForm.ContextMenus.ClinicalNamespace.PatientICPList.VIEW_EDIT_ICP:
				form.getGlobalContext().ICP.setPatientICPRecord(form.grdICPS().getValue());
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShort(form.grdICPS().getValue().getCareContext()));
				resetPIDBarText(); //WDEV-14660
				engine.open(form.getForms().ICP.PatientICP);
			break;
			case ims.clinical.forms.patienticplist.GenForm.ContextMenus.ClinicalNamespace.PatientICPList.SET_STATUS_TO_OPEN: //WDEV-13361
				openCloseICP();//WDEV-12965
				break;
			case ims.clinical.forms.patienticplist.GenForm.ContextMenus.ClinicalNamespace.PatientICPList.SET_STATUS_TO_COMPLETED: //WDEV-13361
				openCloseICP();//WDEV-12965
				break;
			default:
		}
	
		//WDEV-12518
		updateControlsState();
	}

	//WDEV-14660
	private void resetPIDBarText() 
	{
		if (form.getGlobalContext().Core.getPatientShort() == null)
			return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare()));
	}

	private void openCloseICP()//WDEV-12965
	{
		PatientICPMediumVo record = form.grdICPS().getValue();
		if (record == null)
			throw new CodingRuntimeException("Should not get here without a selected row in the grid");
		
		//	WDEV-13198
		if(record.getCompletedDateTime() == null)//set to complete 
		{
			if(domain.hasOpenAppointments(record))
			{
				engine.showMessage("Cannot complete Patient ICP. Check opened appointments.");
				return;
			}
		}
		
		record.setCompletedDateTime(record.getCompletedDateTimeIsNotNull()?null:new DateTime());
		String[] validate = record.validate();
		if (validate!=null && validate.length>0)
		{
			engine.showErrors(validate);
		}
		else
		{
			try
			{
				domain.save(record);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
		}
		search();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		//WDEV-12518
		updateControlsState();
	}

	@Override
	protected void onGrdICPSSelectionChanged() throws PresentationLogicException 
	{
		//WDEV-12518
		updateControlsState();
	}

	//WDEV-12518
	private void updateControlsState() 
	{
		form.getContextMenus().Clinical.hideAllPatientICPListMenuItems();
		
		if(form.grdICPS().getValue() != null) 
		{
			//WDEV-13361 
			form.getContextMenus().Clinical.getPatientICPListVIEW_EDIT_ICPItem().setVisible(true);

			if(form.grdICPS().getValue().getCompletedDateTimeIsNotNull())
				form.getContextMenus().Clinical.getPatientICPListSET_STATUS_TO_OPENItem().setVisible(true);
			else
				form.getContextMenus().Clinical.getPatientICPListSET_STATUS_TO_COMPLETEDItem().setVisible(true);
		}
	}

	@Override
	protected void onGrdICPSGridHeaderClicked(int column) throws PresentationLogicException 
	{
		if(column == START_DATE_COL_INDEX)
		{
			if (form.getLocalContext().getSortOrder() == null || !form.getLocalContext().getSortOrder().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortOrder(SortOrder.DESCENDING);
			
			populateICPGrid(sortListByStartDate(form.getLocalContext().getSortOrder()));
		}
		
		//WDEV-12518
		updateControlsState();
	}

	private PatientICPMediumVoCollection sortListByStartDate(SortOrder sortOrder) 
	{
		PatientICPMediumVoCollection patientICPsColl = new PatientICPMediumVoCollection();
		ArrayList patientICPsArray = getArrayList(form.getLocalContext().getPatientICPsCol());
		Collections.sort(patientICPsArray, new StarDateComparator(sortOrder));
		copyArrayListIntoColl(patientICPsColl, patientICPsArray);
		
		return patientICPsColl;
	}
	
	private ArrayList getArrayList(Object obj)
	{
		ArrayList<ValueObjectRef> list = new ArrayList<ValueObjectRef>();
			
		if (obj instanceof PatientICPMediumVoCollection) 
		{
			PatientICPMediumVoCollection coll = (PatientICPMediumVoCollection)obj;
			for (int i = 0; i < coll.size(); i++)
			{
				list.add(coll.get(i));
			}	
		}
		return list;
	}
	
	private void copyArrayListIntoColl(Object obj, ArrayList patientICPsArray)
	{
		PatientICPMediumVoCollection coll = (PatientICPMediumVoCollection)obj;
		coll.clear();
			
		for (int i = 0; patientICPsArray  != null && i < patientICPsArray.size(); i++)
			coll.add((PatientICPMediumVo)patientICPsArray.get(i));
	}

	public class StarDateComparator implements Comparator
	{
		private int direction = 1;
		
		public StarDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public StarDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}
		
		public int compare(Object o1, Object o2)
		{
			DateTime startDate1 = null;
			DateTime startDate2 = null;
			
			if(o1 instanceof PatientICPMediumVo)
			{
				PatientICPMediumVo patientIcp1 = ((PatientICPMediumVo) o1);
				startDate1 = patientIcp1.getStartedDateTimeIsNotNull() ? patientIcp1.getStartedDateTime() : null;
			}
			
			if(o2 instanceof PatientICPMediumVo)
			{
				PatientICPMediumVo patientIcp2 = ((PatientICPMediumVo) o2);
				startDate2 = patientIcp2.getStartedDateTimeIsNotNull() ? patientIcp2.getStartedDateTime() : null;
			}
			
			if(startDate1 != null)
				return startDate1.compareTo(startDate2)*direction;
			
			if(startDate2 != null)
				return startDate2.compareTo(startDate1)*direction;
						
			return 0;
		}
	}
}
