//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.70 build 3545.21176)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.searchgraphicalassessment;

import ims.assessment.vo.GraphicAssessmentShortVo;
import ims.assessment.vo.GraphicAssessmentShortVoCollection;
import ims.clinical.forms.searchgraphicalassessment.GenForm.GroupSpecialityEnumeration;
import ims.clinical.forms.searchgraphicalassessment.GenForm.grdGraphicAssessmentsRow;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	/**args that may be passed to this form
	 *args[0] - GraphicAssessmentShortVoCollection must be not null and size >0
	 *args[1] - String filter used to get this collection not null and size > 2
	 *args[2] - java.lang.Boolean allow other search (can modify the filter and hit search) not null
	 *ATTENTION!! if any of this arg fails to comply with above conditions all 3 args will be ignored
	 *   (non-Javadoc)
	 * @see ims.clinical.forms.searchgraphicalassessment.Handlers#onFormOpen(java.lang.Object[])
	 */
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open(args);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
		
	}
	@Override
	protected void onBtnSelectClick() throws ims.framework.exceptions.PresentationLogicException
	{
		GraphicAssessmentShortVo record = form.grdGraphicAssessments().getValue();
		if (record == null)
		{
			throw new PresentationLogicException("A row selected in the grid was expected");
		}
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(record);
		engine.close(DialogResult.OK);
		
	}

	@Override
	protected void onGrdGraphicAssessmentsSelectionChanged() throws PresentationLogicException {
		updateEditBtnState();
		
	}

	@Override
	protected void onGrdGraphicAssessmentsSelectionCleared() throws PresentationLogicException {
		updateEditBtnState();
		
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException {
		clearScreen();
		
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException 
	{
		
		String filter = form.txtAssessmentName().getValue();
		if (filter ==null || filter.length() <3)
		{
			engine.showErrors(new String[]{"Please enter at least 3 character to search upon"});
			return;
		}
		
		boolean speciality = GroupSpecialityEnumeration.rdoMySpeciality.equals(form.GroupSpeciality().getValue());
		GraphicAssessmentShortVoCollection graphicAssessments = domain.listGraphicAssessments(filter,speciality);
		if (graphicAssessments == null || graphicAssessments.size() == 0)
		{
			engine.showMessage( "No Records were found !","No Records", MessageButtons.OK, MessageIcon.INFORMATION);
			return;
		}
		populateGridFromData(graphicAssessments);
	}
	
	private void initialize()
	{
		form.GroupSpeciality().setValue(GroupSpecialityEnumeration.rdoMySpeciality);
		form.getLocalContext().setAllowSearch(Boolean.TRUE);
	}
	private void open(Object[] args)
	{
		if (validateArgs(args))
		{
			populateSearchFilterFromData((String) args[1]);
			populateGridFromData((GraphicAssessmentShortVoCollection) args[0]);
			form.getLocalContext().setAllowSearch((Boolean) args[2]);
		}
		form.setMode(FormMode.EDIT);
		updateControlState();
	}
	private void updateControlState()
	{
		if (FormMode.EDIT.equals(form.getMode()))
		{
			Boolean allowSearch = form.getLocalContext().getAllowSearchIsNotNull() && form.getLocalContext().getAllowSearch();
			form.txtAssessmentName().setEnabled(allowSearch);
			form.imbClear().setEnabled(allowSearch);
			form.imbSearch().setEnabled(allowSearch);
			form.GroupSpeciality().setEnabled(allowSearch);
			updateEditBtnState();
		}
	}
	private void updateEditBtnState()
	{
		if (FormMode.EDIT.equals(form.getMode()))
		{
			form.btnSelect().setEnabled(form.grdGraphicAssessments().getSelectedRowIndex()>=0);
		}
	}
	private void clearScreen()
	{
		form.txtAssessmentName().setValue(null);
		form.grdGraphicAssessments().getRows().clear();
		form.GroupSpeciality().setValue(GroupSpecialityEnumeration.rdoMySpeciality);
	}
	private void populateSearchFilterFromData(String filter)
	{
		form.txtAssessmentName().setValue(filter);
	}
	private void populateGridFromData(GraphicAssessmentShortVoCollection graphicAssessments)
	{
		form.grdGraphicAssessments().getRows().clear();
		if (graphicAssessments == null)
			return;
		for (int i=0 ; i<graphicAssessments.size() ; i++)
		{
			GraphicAssessmentShortVo graphicAssessmentVo = graphicAssessments.get(i);
			if (graphicAssessmentVo != null)
			{
			grdGraphicAssessmentsRow newRow = form.grdGraphicAssessments().getRows().newRow();
			newRow.setcolName(graphicAssessmentVo.getName());
			newRow.setValue(graphicAssessmentVo);
			}
			
		}
	}
	private boolean validateArgs(Object[] args)
	{
		if (!(args[0] instanceof GraphicAssessmentShortVoCollection && ((GraphicAssessmentShortVoCollection)args[0]).size()>0))
		{
			return false;
		}
		if (!(args[1] instanceof String && ((String)args[1]).length()>2))
		{
			return false;
		}
		if (!(args[2] instanceof Boolean))
			return false;
		
		return true;
	}
}
