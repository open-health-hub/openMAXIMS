//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.forms.dementiaassessmentamtscomponent;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void onFormModeChanged();
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRIEClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupMedicationValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupPRotocolValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditFollowUpClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewFollowUpClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkRecallYesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCountYesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkMonarchYesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkYearWW2YesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkRecogniseYesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNameHospitalYesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCurrentTimeYesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCurrentYearYesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkDBYesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAgeYesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkRecallNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCountNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkMonarchNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkYearWW2NoValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkRecogniseNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNameHospitalNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCurrentTimeNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCurrentYearNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkDBNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAgeNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnRIE().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRIEClick();
			}
		});
		this.form.GroupMedication().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupMedicationValueChanged();
			}
		});
		this.form.GroupPRotocol().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupPRotocolValueChanged();
			}
		});
		this.form.btnEditFollowUp().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditFollowUpClick();
			}
		});
		this.form.btnNewFollowUp().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewFollowUpClick();
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.chkRecallYes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkRecallYesValueChanged();
			}
		});
		this.form.chkCountYes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCountYesValueChanged();
			}
		});
		this.form.chkMonarchYes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkMonarchYesValueChanged();
			}
		});
		this.form.chkYearWW2Yes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkYearWW2YesValueChanged();
			}
		});
		this.form.chkRecogniseYes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkRecogniseYesValueChanged();
			}
		});
		this.form.chkNameHospitalYes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNameHospitalYesValueChanged();
			}
		});
		this.form.chkCurrentTimeYes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCurrentTimeYesValueChanged();
			}
		});
		this.form.chkCurrentYearYes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCurrentYearYesValueChanged();
			}
		});
		this.form.chkDBYes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkDBYesValueChanged();
			}
		});
		this.form.chkAgeYes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAgeYesValueChanged();
			}
		});
		this.form.chkRecallNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkRecallNoValueChanged();
			}
		});
		this.form.chkCountNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCountNoValueChanged();
			}
		});
		this.form.chkMonarchNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkMonarchNoValueChanged();
			}
		});
		this.form.chkYearWW2No().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkYearWW2NoValueChanged();
			}
		});
		this.form.chkRecogniseNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkRecogniseNoValueChanged();
			}
		});
		this.form.chkNameHospitalNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNameHospitalNoValueChanged();
			}
		});
		this.form.chkCurrentTimeNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCurrentTimeNoValueChanged();
			}
		});
		this.form.chkCurrentYearNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCurrentYearNoValueChanged();
			}
		});
		this.form.chkDBNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkDBNoValueChanged();
			}
		});
		this.form.chkAgeNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAgeNoValueChanged();
			}
		});
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIComponentEngine engine;
	protected GenForm form;
}
