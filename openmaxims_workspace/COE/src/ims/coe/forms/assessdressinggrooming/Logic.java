//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40614.1100)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assessdressinggrooming;

import ims.coe.vo.AssessmentDressingAndGrooming;
import ims.coe.vo.lookups.DressingAndGroomingActivities;
import ims.coe.vo.lookups.DressingAndGroomingActivitiesCollection;
import ims.coe.vo.lookups.DressingAndGroomingPreferences;
import ims.coe.vo.lookups.DressingAndGroomingPreferencesCollection;
import ims.coe.vo.lookups.LookupHelper;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		form.gridGrooming().setFocus();
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setyesNoColl(ims.core.vo.lookups.LookupHelper.getYesNoUnknown(domain.getLookupService()));
		form.bSave().setEnabled(true);	
		form.gridCarePlan().setReadOnly(false);
		form.checkBoxCopy().setEnabled(false);
			
		// If there is an assessment in the global context, we want to call the get component domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo voAssHeaderInfo = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setassmnt(voAssHeaderInfo);
		if (voAssHeaderInfo != null && voAssHeaderInfo.getID_AssessmentIsNotNull())
		{		
			//AssessmentDressingAndGrooming assessDG = (AssessmentDressingAndGrooming)domain.getComponent(assmnt.getCurrentComponent(), AssessmentComponentType.DRESSING);
			AssessmentDressingAndGrooming voAssessDressAndGroom = (AssessmentDressingAndGrooming)domain.getComponent(voAssHeaderInfo,AssessmentComponentType.DRESSING);
			form.getLocalContext().setassmntDG(voAssessDressAndGroom);
			populateInstanceControl(voAssessDressAndGroom);			
		}
		else
		{
			// check if there is a relevant component
			getLastAssessmentComponent();
		}
	}

	private void initialize()
	{
		loadGroomingGrd();
		loadPreferenceGrd();
		loadCarePlanGrd();
	}

	private void loadCarePlanGrd() 
	{
		// Populate the Grid CarePlan Templates
		CarePlanTemplateTitleCollection votempColl = domain.listCarePlanTemplates(AssessmentComponentType.DRESSING);
		if (votempColl != null)
		{
			 form.gridCarePlan().getRows().clear();
			 GenForm.gridCarePlanRow tempRow;
			 for (int i=0; i<votempColl.size(); i++)
			 {
				  CarePlanTemplateTitle votemplate = votempColl.get(i);
				  tempRow = form.gridCarePlan().getRows().newRow();
				  tempRow.setValue(votemplate);
				  tempRow.setcolCarePlans(votemplate.getTitle());
			 }
		}
	}

	private void loadPreferenceGrd() 
	{
		GenForm.gridPreferenceRow pRow;
		form.gridPreference().getRows().clear();
		DressingAndGroomingPreferencesCollection prefColl = LookupHelper.getDressingAndGroomingPreferences(domain.getLookupService());
		for (int i=0; i<prefColl.size(); i++)
		{
			DressingAndGroomingPreferences preference = prefColl.get(i);
			pRow = form.gridPreference().getRows().newRow();
			pRow.setcolCondition(preference);
		}
	}

	private void loadGroomingGrd() 
	{
		GenForm.gridGroomingRow row;
		form.gridGrooming().getRows().clear();
		DressingAndGroomingActivitiesCollection activityColl = LookupHelper.getDressingAndGroomingActivities(domain.getLookupService());
		for (int i=0; i<activityColl.size(); i++)
		{
			String tooltipActivity = new String();
			DressingAndGroomingActivities act = activityColl.get(i);
			tooltipActivity = "" + act.getText();
			row = form.gridGrooming().getRows().newRow();
			row.setcolActivities(act);
			row.setTooltipForcolActivities(tooltipActivity);
		}
	}
	
	private void populateInstanceControl(AssessmentDressingAndGrooming voAssessDG)
	{
		if (voAssessDG == null)
			return;	
		
		form.checkBoxComplete().setValue(voAssessDG.getIsComplete().booleanValue());
		if (voAssessDG.getIsComplete().booleanValue() == true)  // Complete
		{
			form.bSave().setEnabled(false);
			form.checkBoxComplete().setEnabled(false);
			form.setMode(FormMode.VIEW);
			form.checkBoxCopy().setEnabled(false);
			form.gridCarePlan().setReadOnly(true);
		}
		
		form.checkBoxCopy().setValue(voAssessDG.getCopy().booleanValue());
		if (voAssessDG.getCopy().booleanValue() == true)
			form.checkBoxCopy().setEnabled(false);
			
		form.comboBoxShaving().setValue(voAssessDG.getShavingPreference());
		form.textBoxShavingPattern().setValue(voAssessDG.getShavingPattern());
		form.answerBoxRequireAssistance().setValue(voAssessDG.getAssistanceWithDressingAndGrooming());
		
		// Populate the grid information
		populateGroomingGrd(voAssessDG.getActivities());
		
		// Populate the grid information
		populatePreferenceGrd(voAssessDG.getPreferences());
		
		// Populate the correct selected careplan template if one saved with the component
		populateCarePlanGrd(voAssessDG.getCarePlanTemplate());
	
	}

	private void populateCarePlanGrd(CarePlanTemplateCollection voCarePlanTemplateColl) 
	{
		if (voCarePlanTemplateColl != null && voCarePlanTemplateColl.size() > 0)
		{
			 GenForm.gridCarePlanRow cpRow;
			 int i=0;
			 // Find the correct row to set to selected
			 for (int j=0; j<form.gridCarePlan().getRows().size(); j++)
			 {
				 cpRow = form.gridCarePlan().getRows().get(j);
				 for (i=0; i<voCarePlanTemplateColl.size(); i++)
				 {
				 	
					CarePlanTemplate template = voCarePlanTemplateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				 }
			 }
		}
	}

	private void populatePreferenceGrd(ims.coe.vo.DressingAndGroomingPreferencesCollection voPreferencesColl) 
	{
		if (voPreferencesColl != null)
		{
			GenForm.gridPreferenceRow pRow;
			for (int i=0; i<voPreferencesColl.size(); i++)
			{
				ims.coe.vo.DressingAndGroomingPreferences pref = voPreferencesColl.get(i);
				int j=0;
				for (j=0; j<form.gridPreference().getRows().size(); j++)
				{
					pRow = form.gridPreference().getRows().get(j);
					if (pRow.getcolCondition().equals(pref.getPreferences()))
					{
						pRow.setColStatus(pref.getStatus());
						pRow.setColDet2(pref.getDetails());
						pRow.setValue(pref);
						break;
					}
				}
				if(j == form.gridPreference().getRows().size())
				{
					pRow = form.gridPreference().getRows().newRow();
					pRow.setValue(pref);
					pRow.setcolCondition(pref.getPreferences());
					pRow.setColStatus(pref.getStatus());
					pRow.setColDet2(pref.getDetails());
									
				}
			}
		}
		
	}

	private void populateGroomingGrd(ims.nursing.vo.DressingAndGroomingActivitiesCollection voActivities) 
	{
		if (voActivities != null)
		{
			GenForm.gridGroomingRow gRow;
			for (int i=0; i<voActivities.size(); i++)
			{
				ims.nursing.vo.DressingAndGroomingActivities act = voActivities.get(i);
				int j=0;
				for (j=0; j<form.gridGrooming().getRows().size(); j++)
				{
					gRow = form.gridGrooming().getRows().get(j);
					if (gRow.getcolActivities().equals(act.getActivities()))
					{
						String abilityToolTip, detailToolTip = new String();
						gRow.setcolAbility(act.getAbility());
						if(act.getAbilityIsNotNull())
						{
							abilityToolTip = "" + act.getAbility();
							gRow.setTooltipForcolAbility(abilityToolTip);
						}
						gRow.setColDet1(act.getDetails());
						if(act.getDetailsIsNotNull())
						{
							detailToolTip = "" + act.getDetails();
							gRow.setTooltipForColDet1(detailToolTip);
						}
						gRow.setValue(act);
						break;
					}
				}
				if(j == form.gridGrooming().getRows().size())
				{
					gRow = form.gridGrooming().getRows().newRow();
					gRow.setcolActivities(act.getActivities());
					gRow.setcolAbility(act.getAbility());
					gRow.setColDet1(act.getDetails());
					gRow.setValue(act);					
				}
			}
		}
	}

	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssessDG() == null)
			return;
		
		form.getLocalContext().getPrevAssessDG().setIsComplete(new Boolean(false));
		form.getLocalContext().getPrevAssessDG().setCarePlanTemplate(null);
		populateInstanceControl(form.getLocalContext().getPrevAssessDG());
		form.checkBoxCopy().setValue(true);
		form.checkBoxCopy().setEnabled(false);
	}

	protected void getLastAssessmentComponent()
	{
		AssessmentDressingAndGrooming tmpAssessDG = (AssessmentDressingAndGrooming)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(),AssessmentComponentType.DRESSING);
		if (tmpAssessDG == null)
		{
			this.form.checkBoxCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessDG(tmpAssessDG);
		form.checkBoxCopy().setEnabled(true);
	}
	
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			AssessmentDressingAndGrooming assessDG= form.getLocalContext().getassmntDG();
			if (assessDG == null)
			{
				assessDG = new AssessmentDressingAndGrooming();
				assessDG.setComponentType(AssessmentComponentType.DRESSING);
			}
		
			assessDG.setIsComplete(new Boolean(this.form.checkBoxComplete().getValue()));
			assessDG.setCopy(new Boolean(this.form.checkBoxCopy().getValue()));
			assessDG.setAssistanceWithDressingAndGrooming(form.answerBoxRequireAssistance().getValue());
			assessDG.setShavingPattern(form.textBoxShavingPattern().getValue());
			assessDG.setShavingPreference(form.comboBoxShaving().getValue());
			

			// Save the Preferences grid information
			ims.coe.vo.DressingAndGroomingPreferencesCollection preferences = new ims.coe.vo.DressingAndGroomingPreferencesCollection();
			GenForm.gridPreferenceRow pRow;
			for (int i=0; i<form.gridPreference().getRows().size(); i++)
			{
				pRow = form.gridPreference().getRows().get(i);
				ims.coe.vo.DressingAndGroomingPreferences pref = pRow.getValue();
				if (pref == null)
					pref = new ims.coe.vo.DressingAndGroomingPreferences();
				
				pref.setDetails(pRow.getColDet2());
				pref.setPreferences(pRow.getcolCondition());
				pref.setStatus(pRow.getColStatus());						
				preferences.add(pref);

			}
			assessDG.setPreferences(preferences);			
			
			// Save the Grooming Activities grid information
			ims.nursing.vo.DressingAndGroomingActivitiesCollection activities = new ims.nursing.vo.DressingAndGroomingActivitiesCollection();
			GenForm.gridGroomingRow gRow;
			for (int i=0; i<form.gridGrooming().getRows().size(); i++)
			 {
				 gRow = form.gridGrooming().getRows().get(i);
				 ims.nursing.vo.DressingAndGroomingActivities act = gRow.getValue();
				 if (act == null)
					act = new ims.nursing.vo.DressingAndGroomingActivities();

				 act.setDetails(gRow.getColDet1());
				 act.setAbility(gRow.getcolAbility());
				 act.setActivities(gRow.getcolActivities());
				 activities.add(act);
			 }
			 assessDG.setActivities(activities);
			
			String[] messages = assessDG.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			AssessmentHeaderInfo newAssmnt = form.getLocalContext().getassmnt();
			
			if (newAssmnt.getCareContext() == null)
				newAssmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (newAssmnt.getClinicalContact() == null)
				newAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

			newAssmnt = domain.saveComponent(newAssmnt, assessDG);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
			
			// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.gridCarePlan().getReadOnly() == false)
		{
			CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			GenForm.gridCarePlanRow row;
			for (int i=0; i<form.gridCarePlan().getRows().size(); i++)
			{
				row = form.gridCarePlan().getRows().get(i);
				if (row.getcolSelected() && !row.isReadOnly())
					templList.add(row.getValue());
			}
			if (templList.size() > 0)
			{
				form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				engine.open(form.getForms().Nursing.CarePlanStep2);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		catch(StaleObjectException e) {
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
	
			onFormOpen();
			return;				
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Dressing and Grooming Assessment record already exists. " + e.getMessage());
			open();
			return;
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			
			onFormOpen();
			return;			
		}
		
		
	}
	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getassmntDG() != null && form.getLocalContext().getassmntDG().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getassmntDG().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}
}
