//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.forms.assessdressinggrooming;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class comboBoxShavingComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.coe.vo.lookups.ShavingPreference value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.coe.vo.lookups.ShavingPreference value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.coe.vo.lookups.ShavingPreference value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.coe.vo.lookups.ShavingPreference value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.coe.vo.lookups.ShavingPreference value)
		{
			return super.control.removeRow(value);
		}
		public ims.coe.vo.lookups.ShavingPreference getValue()
		{
			return (ims.coe.vo.lookups.ShavingPreference)super.control.getValue();
		}
		public void setValue(ims.coe.vo.lookups.ShavingPreference value)
		{
			super.control.setValue(value);
		}
	}
	public static class gridCarePlanRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridCarePlanRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolCarePlansReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolCarePlansReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolCarePlansOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolCarePlans()
		{
			return (String)super.row.get(0);
		}
		public void setcolCarePlans(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolCarePlansTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSelectedReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSelectedReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSelectedOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getcolSelected()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setcolSelected(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellcolSelectedTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.nursing.vo.CarePlanTemplateTitle getValue()
		{
			return (ims.nursing.vo.CarePlanTemplateTitle)super.row.getValue();
		}
		public void setValue(ims.nursing.vo.CarePlanTemplateTitle value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridCarePlanRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridCarePlanRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridCarePlanRow get(int index)
		{
			return new gridCarePlanRow(super.collection.get(index));
		}
		public gridCarePlanRow newRow()
		{
			return new gridCarePlanRow(super.collection.newRow());
		}
		public gridCarePlanRow newRow(boolean autoSelect)
		{
			return new gridCarePlanRow(super.collection.newRow(autoSelect));
		}
		public gridCarePlanRow newRowAt(int index)
		{
			return new gridCarePlanRow(super.collection.newRowAt(index));
		}
		public gridCarePlanRow newRowAt(int index, boolean autoSelect)
		{
			return new gridCarePlanRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridCarePlanGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.nursing.vo.CarePlanTemplateTitle[] getValues()
		{
			ims.nursing.vo.CarePlanTemplateTitle[] listOfValues = new ims.nursing.vo.CarePlanTemplateTitle[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.nursing.vo.CarePlanTemplateTitle getValue()
		{
			return (ims.nursing.vo.CarePlanTemplateTitle)super.grid.getValue();
		}
		public void setValue(ims.nursing.vo.CarePlanTemplateTitle value)
		{
			super.grid.setValue(value);
		}
		public gridCarePlanRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridCarePlanRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridCarePlanRowCollection getRows()
		{
			return new gridCarePlanRowCollection(super.grid.getRows());
		}
		public gridCarePlanRow getRowByValue(ims.nursing.vo.CarePlanTemplateTitle value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridCarePlanRow(row);
		}
		public void setcolCarePlansHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolCarePlansHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSelectedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSelectedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class gridPreferenceRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridPreferenceRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolConditionReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolConditionReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolConditionOpened()
		{
			super.row.showOpened(0);
		}
		public ims.coe.vo.lookups.DressingAndGroomingPreferences getcolCondition()
		{
			return (ims.coe.vo.lookups.DressingAndGroomingPreferences)super.row.get(0);
		}
		public void setcolCondition(ims.coe.vo.lookups.DressingAndGroomingPreferences value)
		{
			super.row.set(0, value);
		}
		public void setCellcolConditionTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColStatusReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColStatusOpened()
		{
			super.row.showOpened(1);
		}
		public ims.core.vo.lookups.YesNoUnknown getColStatus()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.row.get(1);
		}
		public void setColStatus(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.row.set(1, value, true);
		}
		public void setCellColStatusTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColDet2ReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColDet2ReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColDet2Opened()
		{
			super.row.showOpened(2);
		}
		public String getColDet2()
		{
			return (String)super.row.get(2);
		}
		public void setColDet2(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColDet2Tooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.coe.vo.DressingAndGroomingPreferences getValue()
		{
			return (ims.coe.vo.DressingAndGroomingPreferences)super.row.getValue();
		}
		public void setValue(ims.coe.vo.DressingAndGroomingPreferences value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridPreferenceRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridPreferenceRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridPreferenceRow get(int index)
		{
			return new gridPreferenceRow(super.collection.get(index));
		}
		public gridPreferenceRow newRow()
		{
			return new gridPreferenceRow(super.collection.newRow());
		}
		public gridPreferenceRow newRow(boolean autoSelect)
		{
			return new gridPreferenceRow(super.collection.newRow(autoSelect));
		}
		public gridPreferenceRow newRowAt(int index)
		{
			return new gridPreferenceRow(super.collection.newRowAt(index));
		}
		public gridPreferenceRow newRowAt(int index, boolean autoSelect)
		{
			return new gridPreferenceRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridPreferenceGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
		{
			super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
		}
		public void answerBoxColumnClear(int column)
		{
			super.grid.answerBoxColumnClear(column);
		}
		public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
		{
			super.grid.answerBoxColumnNewOption(column, option);
		}
		public ims.coe.vo.DressingAndGroomingPreferences[] getValues()
		{
			ims.coe.vo.DressingAndGroomingPreferences[] listOfValues = new ims.coe.vo.DressingAndGroomingPreferences[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.coe.vo.DressingAndGroomingPreferences getValue()
		{
			return (ims.coe.vo.DressingAndGroomingPreferences)super.grid.getValue();
		}
		public void setValue(ims.coe.vo.DressingAndGroomingPreferences value)
		{
			super.grid.setValue(value);
		}
		public gridPreferenceRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridPreferenceRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridPreferenceRowCollection getRows()
		{
			return new gridPreferenceRowCollection(super.grid.getRows());
		}
		public gridPreferenceRow getRowByValue(ims.coe.vo.DressingAndGroomingPreferences value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridPreferenceRow(row);
		}
		public void setcolConditionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolConditionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridMutableAnswerBox ColStatusAnswerBox()
		{
			return null;//return new GridMutableAnswerBox(super.grid, 1);
		}
		public void setColDet2HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColDet2HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class gridGroomingRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridGroomingRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolActivitiesReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolActivitiesReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolActivitiesOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolActivities(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.coe.vo.lookups.DressingAndGroomingActivities getcolActivities()
		{
			return (ims.coe.vo.lookups.DressingAndGroomingActivities)super.row.get(0);
		}
		public void setcolActivities(ims.coe.vo.lookups.DressingAndGroomingActivities value)
		{
			super.row.set(0, value);
		}
		public void setCellcolActivitiesTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolAbilityReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolAbilityReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolAbilityOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolAbility(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.nursing.vo.lookups.Ability getcolAbility()
		{
			return (ims.nursing.vo.lookups.Ability)super.row.get(1);
		}
		public void setcolAbility(ims.nursing.vo.lookups.Ability value)
		{
			super.row.set(1, value, true);
		}
		public void setCellcolAbilityTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColDet1ReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColDet1ReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColDet1Opened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColDet1(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColDet1()
		{
			return (String)super.row.get(2);
		}
		public void setColDet1(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColDet1Tooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.nursing.vo.DressingAndGroomingActivities getValue()
		{
			return (ims.nursing.vo.DressingAndGroomingActivities)super.row.getValue();
		}
		public void setValue(ims.nursing.vo.DressingAndGroomingActivities value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridGroomingRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridGroomingRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridGroomingRow get(int index)
		{
			return new gridGroomingRow(super.collection.get(index));
		}
		public gridGroomingRow newRow()
		{
			return new gridGroomingRow(super.collection.newRow());
		}
		public gridGroomingRow newRow(boolean autoSelect)
		{
			return new gridGroomingRow(super.collection.newRow(autoSelect));
		}
		public gridGroomingRow newRowAt(int index)
		{
			return new gridGroomingRow(super.collection.newRowAt(index));
		}
		public gridGroomingRow newRowAt(int index, boolean autoSelect)
		{
			return new gridGroomingRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridGroomingGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public ims.nursing.vo.DressingAndGroomingActivities[] getValues()
		{
			ims.nursing.vo.DressingAndGroomingActivities[] listOfValues = new ims.nursing.vo.DressingAndGroomingActivities[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.nursing.vo.DressingAndGroomingActivities getValue()
		{
			return (ims.nursing.vo.DressingAndGroomingActivities)super.grid.getValue();
		}
		public void setValue(ims.nursing.vo.DressingAndGroomingActivities value)
		{
			super.grid.setValue(value);
		}
		public gridGroomingRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridGroomingRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridGroomingRowCollection getRows()
		{
			return new gridGroomingRowCollection(super.grid.getRows());
		}
		public gridGroomingRow getRowByValue(ims.nursing.vo.DressingAndGroomingActivities value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridGroomingRow(row);
		}
		public void setcolActivitiesHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolActivitiesHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolAbilityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolAbilityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox colAbilityComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
		public void setColDet1HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColDet1HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}

	public static class answerBoxRequireAssistanceAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNoUnknown option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 704, 568, 110, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Section Complete?", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 368, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Shaving Pattern:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 344, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Shaving Preference:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 392, 332, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient require assistance with  dressing and grooming?", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 757, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 144, 368, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(200), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 144, 344, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_comboBoxShavingTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_comboBoxShavingTemp);
		comboBoxShavingComboBox comboBoxShaving = (comboBoxShavingComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(comboBoxShavingComboBox.class, m_comboBoxShavingTemp);
		super.addComboBox(comboBoxShaving);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 816, 568, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Copy Previous Assessment", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 416, 816, 144, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_gridCarePlanTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_gridCarePlanTemp);
		gridCarePlanGrid gridCarePlan = (gridCarePlanGrid)GridFlyweightFactory.getInstance().createGridBridge(gridCarePlanGrid.class, m_gridCarePlanTemp);
		gridCarePlan.addStringColumn("Care Plans", 0, 0, 650, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridCarePlan.addBoolColumn("Selected", 1, 1, -1, false, false, 0, true);
		super.addGrid(gridCarePlan);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 184, 816, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_gridPreferenceTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_gridPreferenceTemp);
		gridPreferenceGrid gridPreference = (gridPreferenceGrid)GridFlyweightFactory.getInstance().createGridBridge(gridPreferenceGrid.class, m_gridPreferenceTemp);
		gridPreference.addStringColumn("Preferences", 0, 0, 260, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridPreference.addAnswerBoxColumn("Status", 1, 1, 60, false, false, 10, true, true);
		gridPreference.addStringColumn("Details / Including Aids", 0, 0, -1, false, false, 0, 255, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(gridPreference);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_gridGroomingTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_gridGroomingTemp);
		gridGroomingGrid gridGrooming = (gridGroomingGrid)GridFlyweightFactory.getInstance().createGridBridge(gridGroomingGrid.class, m_gridGroomingTemp);
		gridGrooming.addStringColumn("Grooming activities", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridGrooming.addComboBoxColumn("Ability", 0, 0, 180, false, true, false, false, true, -1);
		gridGrooming.addStringColumn("Details / Including Aids", 0, 0, -1, false, false, 0, 255, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(gridGrooming);

		// Link Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 792, 8, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Info", Boolean.FALSE, null}));

		// AnswerBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 336, 392, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		AnswerBox tmpanswerBoxRequireAssistance = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
		super.addControl(tmpanswerBoxRequireAssistance);
		answerBoxRequireAssistanceAnswerBox answerBoxRequireAssistance = (answerBoxRequireAssistanceAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(answerBoxRequireAssistanceAnswerBox.class, tmpanswerBoxRequireAssistance);
		super.addAnswerBox(answerBoxRequireAssistance);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button bCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button bSave()
	{
		return (Button)super.getControl(5);
	}
	public TextBox textBoxShavingPattern()
	{
		return (TextBox)super.getControl(6);
	}
	public comboBoxShavingComboBox comboBoxShaving()
	{
		return (comboBoxShavingComboBox)super.getComboBox(0);
	}
	public CheckBox checkBoxComplete()
	{
		return (CheckBox)super.getControl(8);
	}
	public CheckBox checkBoxCopy()
	{
		return (CheckBox)super.getControl(9);
	}
	public gridCarePlanGrid gridCarePlan()
	{
		return (gridCarePlanGrid)super.getGrid(0);
	}
	public gridPreferenceGrid gridPreference()
	{
		return (gridPreferenceGrid)super.getGrid(1);
	}
	public gridGroomingGrid gridGrooming()
	{
		return (gridGroomingGrid)super.getGrid(2);
	}
	public Link linkInfo()
	{
		return (Link)super.getControl(13);
	}
	public answerBoxRequireAssistanceAnswerBox answerBoxRequireAssistance()
	{
		return (answerBoxRequireAssistanceAnswerBox)super.getAnswerBox(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Nursing = new NursingForms();
		}
		public final class NursingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingForms()
			{
				AssessmentInfo = new LocalFormName(101117);
				AdmissionAssessOverview = new LocalFormName(101100);
				CarePlanStep2 = new LocalFormName(101129);
			}
			public final FormName AssessmentInfo;
			public final FormName AdmissionAssessOverview;
			public final FormName CarePlanStep2;
		}

		public NursingForms Nursing;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_Clear = new ImageHelper(102104, "Images/Core/AnswerBox_Clear.jpg", new Integer(10), new Integer(10));
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				AnswerBox_NotAvailable = new ImageHelper(102103, "Images/Core/AnswerBox_NotAvailable.gif", new Integer(10), new Integer(10));
				AnswerBox_Unknown = new ImageHelper(102102, "Images/Core/AnswerBox_Unknown.gif", new Integer(10), new Integer(10));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
			}
			public final ims.framework.utils.Image AnswerBox_Clear;
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image AnswerBox_NotAvailable;
			public final ims.framework.utils.Image AnswerBox_Unknown;
			public final ims.framework.utils.Image AnswerBox_Yes;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_assmnt = new ims.framework.ContextVariable("assmnt", prefix + "_lv_COE.AssessDressingGrooming.__internal_x_context__assmnt_" + componentIdentifier + "");
			cxl_assmntDG = new ims.framework.ContextVariable("assmntDG", prefix + "_lv_COE.AssessDressingGrooming.__internal_x_context__assmntDG_" + componentIdentifier + "");
			cxl_yesNoColl = new ims.framework.ContextVariable("yesNoColl", prefix + "_lv_COE.AssessDressingGrooming.__internal_x_context__yesNoColl_" + componentIdentifier + "");
			cxl_PrevAssessDG = new ims.framework.ContextVariable("PrevAssessDG", prefix + "_lv_COE.AssessDressingGrooming.__internal_x_context__PrevAssessDG_" + componentIdentifier + "");
		}
		
		public boolean getassmntIsNotNull()
		{
			return !cxl_assmnt.getValueIsNull(context);
		}
		public ims.nursing.vo.AssessmentHeaderInfo getassmnt()
		{
			return (ims.nursing.vo.AssessmentHeaderInfo)cxl_assmnt.getValue(context);
		}
		public void setassmnt(ims.nursing.vo.AssessmentHeaderInfo value)
		{
			cxl_assmnt.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_assmnt = null;
		public boolean getassmntDGIsNotNull()
		{
			return !cxl_assmntDG.getValueIsNull(context);
		}
		public ims.coe.vo.AssessmentDressingAndGrooming getassmntDG()
		{
			return (ims.coe.vo.AssessmentDressingAndGrooming)cxl_assmntDG.getValue(context);
		}
		public void setassmntDG(ims.coe.vo.AssessmentDressingAndGrooming value)
		{
			cxl_assmntDG.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_assmntDG = null;
		public boolean getyesNoCollIsNotNull()
		{
			return !cxl_yesNoColl.getValueIsNull(context);
		}
		public ims.core.vo.lookups.YesNoUnknownCollection getyesNoColl()
		{
			return (ims.core.vo.lookups.YesNoUnknownCollection)cxl_yesNoColl.getValue(context);
		}
		public void setyesNoColl(ims.core.vo.lookups.YesNoUnknownCollection value)
		{
			cxl_yesNoColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_yesNoColl = null;
		public boolean getPrevAssessDGIsNotNull()
		{
			return !cxl_PrevAssessDG.getValueIsNull(context);
		}
		public ims.coe.vo.AssessmentDressingAndGrooming getPrevAssessDG()
		{
			return (ims.coe.vo.AssessmentDressingAndGrooming)cxl_PrevAssessDG.getValue(context);
		}
		public void setPrevAssessDG(ims.coe.vo.AssessmentDressingAndGrooming value)
		{
			cxl_PrevAssessDG.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrevAssessDG = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[78];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-ID", "ID_Assessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTTYPE", "AssessmentType");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTSTATUS", "AssessmentStatus");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-DATETIMECOMPLETE", "DateTimeComplete");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
