//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40601.1700)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assessbreathing;

import ims.coe.forms.assessbreathing.GenForm.gridSmokingRow;
import ims.coe.vo.AssessmentBreathingCoughVo;
import ims.coe.vo.AssessmentBreathingVo;
import ims.coe.vo.lookups.SputumType;
import ims.coe.vo.lookups.SputumTypeCollection;
import ims.core.vo.Smoking;
import ims.core.vo.SmokingDetails;
import ims.core.vo.SmokingDetailsCollection;
import ims.core.vo.lookups.SmokingCurrentHistoric;
import ims.core.vo.lookups.SmokingStatus;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;
import ims.nursing.vo.lookups.BreathingDyspnoea;
import ims.nursing.vo.lookups.BreathingDyspnoeaCollection;
import ims.nursing.vo.lookups.LookupHelper;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	
	private void open() throws FormOpenException 
	{
		// If there is an assessment in the global context, we want to call the get component domain method
		// Otherwise, it is a new assessment component
		form.ansDifficulty().setFocus();
		form.setMode(FormMode.EDIT);
		form.bSave().setEnabled(true);
		form.gridSputum().setReadOnly(true);
		form.gridCarePlans().setReadOnly(false);
		form.chkCopyPrev().setEnabled(false);
		
		AssessmentBreathingVo assessBreath = null;
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setassmnt(assmnt);
		
		
		if (assmnt != null && assmnt.getID_AssessmentIsNotNull())
		{	
			assessBreath = (AssessmentBreathingVo)domain.getComponent(assmnt,AssessmentComponentType.BREATHING);
			form.getLocalContext().setassessBreath(assessBreath);
		}
		else
		{
			// check if there is a relevant component
			getLastAssessmentComponent();
		}
		if (assessBreath != null)
			populateInstanceControl(assessBreath);
		
		
		//when updating,+ ansSputum has been selected from last time then the grid must be editable
	    if(form.ansSputum().getValue() != null && form.ansSputum().getValue().equals(YesNoUnknown.YES))
	    {
		     form.gridSputum().setReadOnly(false);
	    }
	    
		try
		{
		    onAnsDifficultyValueChanged();
		    onComboBoxStatusValueChanged();
		    onAnsSputumValueChanged();
		} 
		catch (PresentationLogicException e)
		{
			throw new FormOpenException(e.getMessage(),e);			
		}
		
		if(form.chkComplete().getValue()== true)
	    {
			enableGrids(true);
		    form.gridDyspnoea().setReadOnly(true);
		    form.bSmoking().setEnabled(false);
		    form.btnRemove().setEnabled(false);
	    }
		
		if(form.chkCopyPrev().isEnabled())
			enableGrids(false);
	}

	private void enableGrids(boolean enable) 
	{
		form.gridSputum().setReadOnly(enable);
		form.comboBoxDyspnoea().setEnabled(!enable);
		form.comboBoxSputum().setEnabled(!enable);
	}

	private void initialize() 
	{
		loadDyspnoeaGrd();
		loadSputumGrd();
		loadCarePlanGrd();
	}

	private void loadCarePlanGrd()
	{
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.BREATHING);
		if (tempColl != null)
		{
			 form.gridCarePlans().getRows().clear();
			 GenForm.gridCarePlansRow tempRow;
			 for (int i=0; i<tempColl.size(); i++)
			 {
				 CarePlanTemplateTitle template = tempColl.get(i);
				 tempRow = form.gridCarePlans().getRows().newRow();
				 tempRow.setValue(template);
				 tempRow.setcolCarePlans(template.getTitle());
			 }
		}
	}

	private void loadSputumGrd() 
	{
		GenForm.gridSputumRow sputumRow;
		form.gridSputum().getRows().clear();
		SputumTypeCollection sputumColl = ims.coe.vo.lookups.LookupHelper.getSputumType(domain.getLookupService());
		for (int i = 0; i < sputumColl.size(); i++)
		{
			SputumType sputumType = sputumColl.get(i);
			sputumRow = this.form.gridSputum().getRows().newRow();
			sputumRow.setValue(sputumType);
			sputumRow.setColType(sputumType.getText());
		}
	}

	private void loadDyspnoeaGrd() 
	{
		GenForm.gridDyspnoeaRow row;
		form.gridDyspnoea().getRows().clear();
		BreathingDyspnoeaCollection sColl = LookupHelper.getBreathingDyspnoea(domain.getLookupService());
		for (int i = 0; i < sColl.size(); i++)
		{
			BreathingDyspnoea bDyspnoea = sColl.get(i);
			row = this.form.gridDyspnoea().getRows().newRow();
			row.setValue(bDyspnoea);
			row.setColDyspnoea(bDyspnoea.getText());
		}
	}

	private void populateInstanceControl(AssessmentBreathingVo voAssBreathing)
	{
		// Set the AcuteChronic value
		form.comboBoxDyspnoea().setValue(voAssBreathing.getAcuteChronic());
		form.ansDifficulty().setValue(voAssBreathing.getDifficultyBreathing());
		form.chkComplete().setValue(voAssBreathing.getIsComplete().booleanValue());

	 	// Set the smoking status value
		if (voAssBreathing.getSmoking() != null)
		{
			 form.comboBoxStatus().setValue(voAssBreathing.getSmoking().getCurrentSmokingStatus());
			
			 // Fill in the grid if there is any data
			 GenForm.gridSmokingRow rowSmoke;
			 form.gridSmoking().getRows().clear();
			 
			 for (int i=0; i < voAssBreathing.getSmoking().getSmokingDetails().size(); i++)
			 {
				SmokingDetails smoke = voAssBreathing.getSmoking().getSmokingDetails().get(i);
				rowSmoke = form.gridSmoking().getRows().newRow();
				rowSmoke.setValue(smoke);
				rowSmoke.setColAmt(smoke.getAmountPerDay());
				rowSmoke.setColNrYrs(smoke.getNumberOfYears());
				rowSmoke.setColStatus(smoke.getStatus());
				rowSmoke.setColWhat(smoke.getSmokingWhat());
				rowSmoke.setColWhenStopped(smoke.getWhenStopped());
			 }
		 }
		 
		if(voAssBreathing.getBreathingCoughIsNotNull())
		{
			AssessmentBreathingCoughVo voBreathCough = voAssBreathing.getBreathingCough();
			form.ansCough().setValue(voBreathCough.getAnyCough());
		    form.ansSputum().setValue(voBreathCough.getProductiveOfSputum());
		  	form.comboBoxSputum().setValue(voBreathCough.getSputumAmount());
		  	
		  	//Check for already configured values for this grid
			if (voAssBreathing != null)
			{
				SputumTypeCollection coll = voBreathCough.getSputumType();
				GenForm.gridSputumRow rowSputum;
				if (coll != null)
				{
					for (int j=0; j<coll.size(); j++)
					{
						SputumType sputum = coll.get(j);
						int i=0;
						for (i=0; i<form.gridSputum().getRows().size(); i++)
						{
							rowSputum = form.gridSputum().getRows().get(i);
							if (rowSputum.getValue().getId() == sputum.getId())
							{
								rowSputum.setColSelected(true);
								break;
							}
						}	
						if(i == form.gridSputum().getRows().size())
						{
							rowSputum = form.gridSputum().getRows().newRow();
							rowSputum.setValue(sputum);
							rowSputum.setColType(sputum.getText());
							rowSputum.setColSelected(true);
						}				
					}
				}
			}
				
		}
	    
	  	
		// Populate the correct selected careplan template if one saved with the component
		if (voAssBreathing.getCarePlanTemplate() != null && voAssBreathing.getCarePlanTemplate().size() > 0)
		{
			GenForm.gridCarePlansRow cpRow;
			CarePlanTemplateCollection templateColl =voAssBreathing.getCarePlanTemplate(); 
			CarePlanTemplate template;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.gridCarePlans().getRows().size(); j++)
			{
				cpRow = form.gridCarePlans().getRows().get(j);
				for (i=0; i<templateColl.size(); i++)
				{
					template = templateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}
	
		if (voAssBreathing != null)
		{
			BreathingDyspnoeaCollection coll = voAssBreathing.getBreathingDyspnoea();
			GenForm.gridDyspnoeaRow rowDyp;
			if (coll != null)
			{
				 for (int j=0; j<coll.size(); j++)
				 {
					 BreathingDyspnoea dyspnoea = coll.get(j);
					 int i=0;
					 for (i=0; i<form.gridDyspnoea().getRows().size(); i++)
					 {
						 rowDyp = form.gridDyspnoea().getRows().get(i);
						 if (rowDyp.getValue().getId() == dyspnoea.getId())
						 {
							 rowDyp.setColSelected(true);
							 break;
						 }
					 }
					 if(i == form.gridDyspnoea().getRows().size())
					 {
						 rowDyp = form.gridDyspnoea().getRows().newRow();
						 rowDyp.setValue(dyspnoea);
						 rowDyp.setColDyspnoea(dyspnoea.getText());
						 rowDyp.setColSelected(true);
					 }
				 }
			}
		}	
		
		
		if (voAssBreathing.getIsComplete().booleanValue() == true)  // Complete
		{
			form.chkComplete().setEnabled(false);
			form.bSave().setEnabled(false);
			form.setMode(FormMode.VIEW);
			//form.gridSputum().setReadOnly(true);
			form.gridCarePlans().setReadOnly(true);
			form.chkCopyPrev().setEnabled(false);
		}
		if (voAssBreathing.getCopy().booleanValue() == true)
		{
			form.chkCopyPrev().setValue(true);
			form.chkCopyPrev().setEnabled(false);
		}
	}
	
	
	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getassessBreath() != null && form.getLocalContext().getassessBreath().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getassessBreath().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}
	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssessBreath() == null)
			return;
		
		form.getLocalContext().getPrevAssessBreath().setIsComplete(new Boolean(false));			//???????????
		form.getLocalContext().getPrevAssessBreath().setCarePlanTemplate(null);
		populateInstanceControl(form.getLocalContext().getPrevAssessBreath());
		form.chkCopyPrev().setValue(true);
		form.chkCopyPrev().setEnabled(false);
		
		if (form.ansDifficulty().getValue() != null)
		{
			if (form.ansDifficulty().getValue().equals(YesNoUnknown.YES))
				form.gridDyspnoea().setReadOnly(false);
		}
	}
	
	protected void getLastAssessmentComponent()
	{
		AssessmentBreathingVo tmpAssessBreathing = (AssessmentBreathingVo)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(),form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.BREATHING);
		if (tmpAssessBreathing == null)
		{
			this.form.chkCopyPrev().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessBreath(tmpAssessBreathing);
		form.chkCopyPrev().setEnabled(true);
	}
	
	protected void onBSmokingClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.gridSmoking().getRows().newRow();
	}
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AssessmentBreathingVo voAssessBreath = populateInstanceData();
		if(voAssessBreath == null)
			return;
		
		try
		{
			String[] messages = voAssessBreath.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			AssessmentHeaderInfo newAssmnt = form.getLocalContext().getassmnt();
			
			if (newAssmnt.getCareContext() == null)
				newAssmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (newAssmnt.getClinicalContact() == null)
				newAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
		    newAssmnt = domain.saveComponent(newAssmnt, voAssessBreath);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			open();
			return;				
		} 
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("A Breathing Assessment record already exists. " + e.getMessage());
			open();
			return;
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			open();
			return;	
		}
		
		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.gridCarePlans().getReadOnly() == false)
		{
		 CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
		 GenForm.gridCarePlansRow cpRow;
		 for (int i=0; i<form.gridCarePlans().getRows().size(); i++)
		 {
			cpRow = form.gridCarePlans().getRows().get(i);
			if (cpRow.getcolSelected() && !cpRow.isReadOnly())
			 templList.add(cpRow.getValue());
		 }
		 if (templList.size() > 0)
		 {
			 form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
			 engine.open(form.getForms().Nursing.CarePlanStep2);
		 }
		 else
			 engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
		 engine.open(form.getForms().Nursing.AdmissionAssessOverview);	
	}
	
	private AssessmentBreathingVo populateInstanceData() 
	{
		AssessmentBreathingCoughVo voAssBreathCough = null;
		AssessmentBreathingVo voAssessBreath = form.getLocalContext().getassessBreath();
		
		if (voAssessBreath == null)
		{
			voAssessBreath = new AssessmentBreathingVo();
			voAssessBreath.setComponentType(AssessmentComponentType.BREATHING);
		}
		
		voAssessBreath.setDifficultyBreathing(form.ansDifficulty().getValue());
		voAssessBreath.setAcuteChronic(form.comboBoxDyspnoea().getValue());
		voAssessBreath.setIsComplete(new Boolean(this.form.chkComplete().getValue()));
		voAssessBreath.setCopy(new Boolean(this.form.chkCopyPrev().getValue()));
		
		// Setup the Breathing values to save
		BreathingDyspnoeaCollection dyspnoeaColl = new BreathingDyspnoeaCollection();	
		GenForm.gridDyspnoeaRow row;	
		for (int i=0; i<form.gridDyspnoea().getRows().size(); i++)
		{
			row = form.gridDyspnoea().getRows().get(i);
			if (row.getColSelected())
				dyspnoeaColl.add(row.getValue());
		}
		voAssessBreath.setBreathingDyspnoea(dyspnoeaColl);		
	    
		//Cough
		if(voAssBreathCough == null)
			voAssBreathCough = new AssessmentBreathingCoughVo();
		voAssBreathCough.setAnyCough(form.ansCough().getValue());
		voAssBreathCough.setProductiveOfSputum(form.ansSputum().getValue());
		voAssBreathCough.setSputumAmount(form.comboBoxSputum().getValue());
	    
		// Setup the cough values
		SputumTypeCollection sputumColl = new SputumTypeCollection();
		GenForm.gridSputumRow sputumRow;	
		for (int i=0; i<form.gridSputum().getRows().size(); i++)
		{
			sputumRow = form.gridSputum().getRows().get(i);
			if (sputumRow.getColSelected())
				sputumColl.add(sputumRow.getValue());
		}
		voAssBreathCough.setSputumType(sputumColl);
		voAssessBreath.setBreathingCough(voAssBreathCough);

		// Setup the Smoking values to save
		Smoking voSmoke = new Smoking();
		voSmoke.setCurrentSmokingStatus(form.comboBoxStatus().getValue());
		SmokingDetailsCollection smokeColl = new SmokingDetailsCollection();
		GenForm.gridSmokingRow smokeRow;	
		for (int i=0; i < form.gridSmoking().getRows().size(); i++)
		{			
			smokeRow = form.gridSmoking().getRows().get(i);
			
			if (smokeRow.getColAmt() == null &&
					smokeRow.getColNrYrs() == null &&
						smokeRow.getColStatus() == null &&
							smokeRow.getColWhat() == null &&
								smokeRow.getColWhenStopped() == null)
			{
				continue;
			}
			
			SmokingDetails detail = new SmokingDetails();
			
			if(form.comboBoxStatus().getValue() != null)
			{
				if (form.comboBoxStatus().getValue().equals(SmokingStatus.SMOKER) && 
						smokeRow.getColStatus() != null &&
							smokeRow.getColStatus().equals(SmokingCurrentHistoric.CURRENT) && 
								smokeRow.getColWhenStopped() != null)
				{
					engine.showMessage("Smoking: A 'When Stopped' value is not required where the status is current" );
					form.gridSmoking().setFocus();
					return null;
				}
				if (form.comboBoxStatus().getValue().equals(SmokingStatus.EXSMOKER) && smokeRow.getColStatus().equals(SmokingCurrentHistoric.CURRENT))
				{
					engine.showMessage("Smoking: 'Current' smoking details cannot be entered for an Ex-Smoker" );
					form.gridSmoking().setFocus();
					return null;
				}
			}
			
			detail.setStatus(smokeRow.getColStatus());
			detail.setAmountPerDay(smokeRow.getColAmt());
			detail.setNumberOfYears(smokeRow.getColNrYrs());
			//detail.setSmokingWhat((SmokingWhat)smokeRow.getColWhat());
			detail.setSmokingWhat(smokeRow.getColWhat());
			detail.setWhenStopped(smokeRow.getColWhenStopped());
			smokeColl.add(detail);
		}
		voSmoke.setSmokingDetails(smokeColl);
		voAssessBreath.setSmoking(voSmoke);
		
		return voAssessBreath;
	}

	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}

	protected void onAnsSputumValueChanged() throws PresentationLogicException 
	{
		  if(form.ansSputum().getValue() != null && form.ansSputum().getValue().equals(YesNoUnknown.YES))
		  {
			  form.gridSputum().setReadOnly(false);
			  form.comboBoxSputum().setEnabled(true);
		  }
		  else
		  {
			for(int i=0; i< form.gridSputum().getRows().size();i++)
			{
				form.gridSputum().getRows().get(i).setColSelected(false);
			}
		    
			form.gridSputum().setReadOnly(true);
			form.comboBoxSputum().setValue(null);
			form.comboBoxSputum().setEnabled(false);
		  }
	}

	protected void onBtnRemoveClick() throws PresentationLogicException 
	{
		if (form.gridSmoking().getSelectedRowIndex() >= 0)
			form.gridSmoking().getRows().remove(form.gridSmoking().getSelectedRowIndex());	
	}
	
	protected void onAnsDifficultyValueChanged() throws PresentationLogicException
	{
		if(form.ansDifficulty().getValue() == null || !form.ansDifficulty().getValue().equals(YesNoUnknown.YES))
		{
			for(int i = 0; i < form.gridDyspnoea().getRows().size(); i++)
				form.gridDyspnoea().getRows().get(i).setColSelected(false);
			
			form.gridDyspnoea().setReadOnly(true);
			form.comboBoxDyspnoea().setValue(null);
			form.comboBoxDyspnoea().setEnabled(false);
		}
		else
		{
			form.gridDyspnoea().setReadOnly(false);
			form.comboBoxDyspnoea().setEnabled(true);
		}
	}
	
	protected void onComboBoxStatusValueChanged() throws PresentationLogicException
	{
		//doesn't allow to change status from SMOKER TO NEVERSMOKED if there are entries in the grid
		if(form.comboBoxStatus().getValue() != null && form.comboBoxStatus().getValue().equals(SmokingStatus.NEVERSMOKED) && form.gridSmoking().getRows().size() > 0)
			form.comboBoxStatus().setValue(SmokingStatus.SMOKER);
		
		if(form.comboBoxStatus().getValue() != null && form.comboBoxStatus().getValue().equals(SmokingStatus.NEVERSMOKED))
		{
			form.bSmoking().setEnabled(false);
			form.btnRemove().setEnabled(false);
		}
		else
		{
			form.bSmoking().setEnabled(true);
			form.btnRemove().setEnabled(true);
		}
	
	}
	
	
	protected void onGridSmokingGridComboBoxSelectionChanged(int column, gridSmokingRow row, Object value) throws PresentationLogicException
	{
		if(form.comboBoxStatus().getValue() == null || value == null || row == null)
			return;
				
		if(column == 0 && form.comboBoxStatus().getValue().equals(SmokingStatus.EXSMOKER) && !value.equals(SmokingCurrentHistoric.HISTORIC))
			row.setColStatus(SmokingCurrentHistoric.HISTORIC);
				
		if(column == 0  && form.comboBoxStatus().getValue().equals(SmokingStatus.SMOKER) && value.equals(SmokingCurrentHistoric.CURRENT))
			row.setColWhenStopped(null);
	}
}
