//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.forms.assessbreathing;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcomboBoxDyspnoeaLookup();
	abstract protected void defaultcomboBoxDyspnoeaLookupValue();
	abstract protected void bindansDifficultyLookup();
	abstract protected void defaultansDifficultyLookupValue();
	abstract protected void bindcomboBoxSputumLookup();
	abstract protected void defaultcomboBoxSputumLookupValue();
	abstract protected void bindansCoughLookup();
	abstract protected void defaultansCoughLookupValue();
	abstract protected void bindansSputumLookup();
	abstract protected void defaultansSputumLookupValue();
	abstract protected void bindcomboBoxStatusLookup();
	abstract protected void defaultcomboBoxStatusLookupValue();
	abstract protected void bindgridSmokingColStatusLookup();
	abstract protected void bindgridSmokingColWhatLookup();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncomboBoxDyspnoeaValueSet(Object value);
	abstract protected void onansDifficultyValueSet(Object value);
	abstract protected void onAnsDifficultyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncomboBoxSputumValueSet(Object value);
	abstract protected void onansCoughValueSet(Object value);
	abstract protected void onansSputumValueSet(Object value);
	abstract protected void onAnsSputumValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncomboBoxStatusValueSet(Object value);
	abstract protected void onComboBoxStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGridSmokingGridComboBoxSelectionChanged(int column, GenForm.gridSmokingRow row, Object value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBSmokingClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRemoveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.comboBoxDyspnoea().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxDyspnoeaValueSet(value);
			}
		});
		this.form.ansDifficulty().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansDifficultyValueSet(value);
			}
		});
		this.form.ansDifficulty().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onAnsDifficultyValueChanged();
			}
		});
		this.form.comboBoxSputum().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxSputumValueSet(value);
			}
		});
		this.form.ansCough().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansCoughValueSet(value);
			}
		});
		this.form.ansSputum().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansSputumValueSet(value);
			}
		});
		this.form.ansSputum().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onAnsSputumValueChanged();
			}
		});
		this.form.comboBoxStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxStatusValueSet(value);
			}
		});
		this.form.comboBoxStatus().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onComboBoxStatusValueChanged();
			}
		});
		this.form.gridSmoking().setGridComboBoxSelectionChangedEvent(new GridComboBoxSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, Object value) throws ims.framework.exceptions.PresentationLogicException
			{
				onGridSmokingGridComboBoxSelectionChanged(column, new GenForm.gridSmokingRow(row), value);
			}
		});
		this.form.bSmoking().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBSmokingClick();
			}
		});
		this.form.btnRemove().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRemoveClick();
			}
		});
		this.form.bSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBSaveClick();
			}
		});
		this.form.bCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBCancelClick();
			}
		});
		this.form.chkCopyPrev().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCopyPrevAssessmentValueChanged();
			}
		});
		this.form.infoLink().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onInfoLinkClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindcomboBoxDyspnoeaLookup();
		bindansDifficultyLookup();
		bindcomboBoxSputumLookup();
		bindansCoughLookup();
		bindansSputumLookup();
		bindcomboBoxStatusLookup();
		bindgridSmokingColStatusLookup();
		bindgridSmokingColWhatLookup();
	}
	protected void rebindAllLookups()
	{
		bindcomboBoxDyspnoeaLookup();
		bindansDifficultyLookup();
		bindcomboBoxSputumLookup();
		bindansCoughLookup();
		bindansSputumLookup();
		bindcomboBoxStatusLookup();
		bindgridSmokingColStatusLookup();
		bindgridSmokingColWhatLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcomboBoxDyspnoeaLookupValue();
		defaultansDifficultyLookupValue();
		defaultcomboBoxSputumLookupValue();
		defaultansCoughLookupValue();
		defaultansSputumLookupValue();
		defaultcomboBoxStatusLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
