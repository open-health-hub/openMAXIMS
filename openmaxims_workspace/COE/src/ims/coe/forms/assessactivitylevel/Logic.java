//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40531.1500)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assessactivitylevel;

import ims.coe.vo.ActivityLevelDetails;
import ims.coe.vo.ActivityLevelDetailsCollection;
import ims.coe.vo.AssessmentActivityLevel;
import ims.coe.vo.lookups.ActivityLevelActivity;
import ims.coe.vo.lookups.ActivityLevelActivityCollection;
import ims.coe.vo.lookups.LookupHelper;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.lookups.AssessmentComponentType;

public class Logic extends BaseLogic
{
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}

	private void open() 
	{		
		// If there is an assessment in the global context, we want to call the get component domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo voAssHeaderInfo = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setassmnt(voAssHeaderInfo);

		AssessmentActivityLevel voAssessActivity = null;
		if (voAssHeaderInfo != null && voAssHeaderInfo.getID_AssessmentIsNotNull())
		{
			voAssessActivity = (AssessmentActivityLevel)domain.getComponent(voAssHeaderInfo,AssessmentComponentType.ACTIVITY_LEVEL);
			form.getLocalContext().setassessActivity(voAssessActivity);
		}
		else
		{
			// check if there is a relevant component
			getLastAssessmentComponent();
		}
		
		if (voAssessActivity != null)
			fillActivityGrid(voAssessActivity);
		
		form.gridActivity().setFocus();
		
		if (!form.chkComplete().getValue())
		{
			form.setMode(FormMode.EDIT);
		}
		
		
		form.btnSave().setEnabled(!form.chkComplete().getValue());
		
		form.chkCopyPrev().setEnabled(false);
	}

	private void initialize() 
	{
		ActivityLevelActivityCollection activityColl = LookupHelper.getActivityLevelActivity(domain.getLookupService());
		GenForm.gridActivityRow row;
		form.gridActivity().getRows().clear();
		for (int i=0; i<activityColl.size(); i++)
		{
			String activityTooltip = new String();
			ActivityLevelActivity act = activityColl.get(i);
			row = form.gridActivity().getRows().newRow();
			row.setcolActivity(act);
			activityTooltip = "" + act.getText();
			row.setTooltipForcolActivity(activityTooltip);
		}
	}

	protected void getLastAssessmentComponent()
	{
		AssessmentActivityLevel votmpAssessmentActivity = (AssessmentActivityLevel)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(), AssessmentComponentType.ACTIVITY_LEVEL);
		if (votmpAssessmentActivity == null)
		{
			this.form.chkCopyPrev().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessmentActivity(votmpAssessmentActivity);
		form.chkCopyPrev().setEnabled(true);
	}

	private void fillActivityGrid(AssessmentActivityLevel voAssActivity)
	{
		if (voAssActivity.getIsComplete().booleanValue() == true)  // Complete
		{
			form.setMode(FormMode.VIEW);
			form.chkComplete().setValue(true);
			form.chkComplete().setEnabled(false);
			form.btnSave().setEnabled(false);
			form.chkCopyPrev().setEnabled(false);
		}
		if (voAssActivity.getCopy().booleanValue() == true)
		{
			form.chkCopyPrev().setValue(true);
			form.chkCopyPrev().setEnabled(false);
		}
		
		populateActivityGrd(voAssActivity.getActivityDetails());
	
	}
	private void populateActivityGrd(ActivityLevelDetailsCollection voActivityDetailsColl) 
	{
		GenForm.gridActivityRow row;
		if (voActivityDetailsColl != null && voActivityDetailsColl != null)
		{
			for (int j=0; j<voActivityDetailsColl.size(); j++)
			{
				ActivityLevelDetails voActivityDetail = voActivityDetailsColl.get(j);
				int i=0;
				for (i=0; i<form.gridActivity().getRows().size(); i++)
				{
					row = form.gridActivity().getRows().get(i);
					if (row.getcolActivity().equals(voActivityDetail.getActivity()))
					{
						String detailsTooltip, abilityTooltip, aidsTooltip = new String();
						row.setColDetails(voActivityDetail.getDetails()); 
						if(voActivityDetail.getDetailsIsNotNull())
						{
							detailsTooltip = "" + voActivityDetail.getDetails();
							row.setTooltipForColDetails(detailsTooltip);
						}
						
						row.setcolAbility(voActivityDetail.getAbility());
						if(voActivityDetail.getAbilityIsNotNull())
						{
							abilityTooltip = "" + voActivityDetail.getAbility();
							row.setTooltipForcolAbility(abilityTooltip);
						}
						
						row.setColAids(voActivityDetail.getAidsUsed());
						if(voActivityDetail.getAidsUsedIsNotNull())
						{
							aidsTooltip = "" + voActivityDetail.getAidsUsed();
							row.setTooltipForColAids(aidsTooltip);
						}
						row.setValue(voActivityDetail);
						break;
					}				
				}
				if(i == form.gridActivity().getRows().size())
				{
					row = form.gridActivity().getRows().newRow();
					row.setcolActivity(voActivityDetail.getActivity());
					row.setcolAbility(voActivityDetail.getAbility());
					row.setColAids(voActivityDetail.getAidsUsed());
					row.setValue(voActivityDetail);
				}	
			}
		}
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
//RF 27/08/2004 should not return to COE.AdmissionAssessOverview		engine.open(form.getForms().COE.AdmissionAssessOverview);	
	}
	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getassessActivity() != null && form.getLocalContext().getassessActivity().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getassessActivity().getAssessmentInfo());
		engine.open(form.getForms().Nursing.AssessmentInfo);
		}

	}
	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssessmentActivity() == null)
			return;
		
		form.getLocalContext().getPrevAssessmentActivity().setIsComplete(new Boolean(false));
		
		fillActivityGrid(form.getLocalContext().getPrevAssessmentActivity());
		
		form.chkCopyPrev().setValue(true);
		form.chkCopyPrev().setEnabled(false);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AssessmentActivityLevel voAssessActivity = populateInstanceData();
		if(voAssessActivity == null)
			return;

		try
		{
			String[] messages = voAssessActivity.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			AssessmentHeaderInfo voNewAssmntHeader = form.getLocalContext().getassmnt();
			
			if (voNewAssmntHeader.getCareContext() == null)
				voNewAssmntHeader.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (voNewAssmntHeader.getClinicalContact() == null)
				voNewAssmntHeader.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
			voNewAssmntHeader = domain.saveComponent(voNewAssmntHeader, voAssessActivity);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(voNewAssmntHeader);
		}catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getLocalContext().setassmnt(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			open();
			return;								
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("An Activity Level Assessment record already exists. " + e.getMessage());
			onFormOpen();
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getLocalContext().setassmnt(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			open();
			return;	
		}
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	private AssessmentActivityLevel populateInstanceData() 
	{
		AssessmentActivityLevel voAssessActivity = form.getLocalContext().getassessActivity();
		if (voAssessActivity == null)
		{
			voAssessActivity = new AssessmentActivityLevel();
			voAssessActivity.setComponentType(AssessmentComponentType.ACTIVITY_LEVEL);
		}
		
		ActivityLevelDetailsCollection voActivityDetailsColl = new ActivityLevelDetailsCollection();
		// Fill in the activity details values from the grid
		GenForm.gridActivityRow row;	
		for (int i=0; i<form.gridActivity().getRows().size(); i++)
		{
			row = form.gridActivity().getRows().get(i);
			
			if (row.getcolActivity() != null && row.getcolAbility() == null)
			{
				engine.showMessage("Please enter an Ability for " + row.getcolActivity().getText());
				return null;
			}
			if (row.getcolAbility() != null || row.getColAids() != null || !row.getColDetails().equals("") )
			{
				ActivityLevelDetails voActivityDetail;
				if (row.getValue() != null)
					voActivityDetail = row.getValue();
				else
					voActivityDetail = new ActivityLevelDetails();
				
				voActivityDetail.setDetails(row.getColDetails());
				voActivityDetail.setAbility(row.getcolAbility());
				voActivityDetail.setAidsUsed(row.getColAids());
				voActivityDetail.setActivity(row.getcolActivity());
				voActivityDetailsColl.add(voActivityDetail);
			}
		}
		voAssessActivity.setActivityDetails(voActivityDetailsColl);			
		voAssessActivity.setCopy(new Boolean(this.form.chkCopyPrev().getValue()));
		voAssessActivity.setIsComplete(new Boolean(this.form.chkComplete().getValue()));	
		return voAssessActivity;
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
}
