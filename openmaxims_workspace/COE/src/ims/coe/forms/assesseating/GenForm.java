//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.forms.assesseating;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class container1Container extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class comboBoxAppetiteComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.coe.vo.lookups.DescribeAppetite value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.coe.vo.lookups.DescribeAppetite value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.coe.vo.lookups.DescribeAppetite value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.coe.vo.lookups.DescribeAppetite value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.coe.vo.lookups.DescribeAppetite value)
			{
				return super.control.removeRow(value);
			}
			public ims.coe.vo.lookups.DescribeAppetite getValue()
			{
				return (ims.coe.vo.lookups.DescribeAppetite)super.control.getValue();
			}
			public void setValue(ims.coe.vo.lookups.DescribeAppetite value)
			{
				super.control.setValue(value);
			}
		}
		public static class comboBoxDietComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.nursing.vo.lookups.SpecialDiet value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.nursing.vo.lookups.SpecialDiet value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.nursing.vo.lookups.SpecialDiet value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.nursing.vo.lookups.SpecialDiet value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.nursing.vo.lookups.SpecialDiet value)
			{
				return super.control.removeRow(value);
			}
			public ims.nursing.vo.lookups.SpecialDiet getValue()
			{
				return (ims.nursing.vo.lookups.SpecialDiet)super.control.getValue();
			}
			public void setValue(ims.nursing.vo.lookups.SpecialDiet value)
			{
				super.control.setValue(value);
			}
		}
		public static class gridSwallowRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected gridSwallowRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolSwallowReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolSwallowReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolSwallowOpened()
			{
				super.row.showOpened(0);
			}
			public ims.coe.vo.lookups.SwallowingAbility getcolSwallow()
			{
				return (ims.coe.vo.lookups.SwallowingAbility)super.row.get(0);
			}
			public void setcolSwallow(ims.coe.vo.lookups.SwallowingAbility value)
			{
				super.row.set(0, value);
			}
			public void setCellcolSwallowTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColStatusReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColStatusOpened()
			{
				super.row.showOpened(1);
			}
			public ims.core.vo.lookups.YesNoUnknown getColStatus()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.row.get(1);
			}
			public void setColStatus(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.row.set(1, value, true);
			}
			public void setCellColStatusTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.coe.vo.SwallowingAssessment getValue()
			{
				return (ims.coe.vo.SwallowingAssessment)super.row.getValue();
			}
			public void setValue(ims.coe.vo.SwallowingAssessment value)
			{
				super.row.setValue(value);
			}
		}
		public static class gridSwallowRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private gridSwallowRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public gridSwallowRow get(int index)
			{
				return new gridSwallowRow(super.collection.get(index));
			}
			public gridSwallowRow newRow()
			{
				return new gridSwallowRow(super.collection.newRow());
			}
			public gridSwallowRow newRow(boolean autoSelect)
			{
				return new gridSwallowRow(super.collection.newRow(autoSelect));
			}
			public gridSwallowRow newRowAt(int index)
			{
				return new gridSwallowRow(super.collection.newRowAt(index));
			}
			public gridSwallowRow newRowAt(int index, boolean autoSelect)
			{
				return new gridSwallowRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class gridSwallowGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
			{
				super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
			}
			public void answerBoxColumnClear(int column)
			{
				super.grid.answerBoxColumnClear(column);
			}
			public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
			{
				super.grid.answerBoxColumnNewOption(column, option);
			}
			public ims.coe.vo.SwallowingAssessment[] getValues()
			{
				ims.coe.vo.SwallowingAssessment[] listOfValues = new ims.coe.vo.SwallowingAssessment[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.coe.vo.SwallowingAssessment getValue()
			{
				return (ims.coe.vo.SwallowingAssessment)super.grid.getValue();
			}
			public void setValue(ims.coe.vo.SwallowingAssessment value)
			{
				super.grid.setValue(value);
			}
			public gridSwallowRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new gridSwallowRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public gridSwallowRowCollection getRows()
			{
				return new gridSwallowRowCollection(super.grid.getRows());
			}
			public gridSwallowRow getRowByValue(ims.coe.vo.SwallowingAssessment value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new gridSwallowRow(row);
			}
			public void setcolSwallowHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolSwallowHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridMutableAnswerBox ColStatusAnswerBox()
			{
				return null;//return new GridMutableAnswerBox(super.grid, 1);
			}
		}
		public static class gridOralRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected gridOralRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColDentalReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColDentalReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColDentalOpened()
			{
				super.row.showOpened(0);
			}
			public ims.coe.vo.lookups.OralAssessment getColDental()
			{
				return (ims.coe.vo.lookups.OralAssessment)super.row.get(0);
			}
			public void setColDental(ims.coe.vo.lookups.OralAssessment value)
			{
				super.row.set(0, value);
			}
			public void setCellColDentalTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColStatusReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColStatusOpened()
			{
				super.row.showOpened(1);
			}
			public ims.core.vo.lookups.YesNoUnknown getColStatus()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.row.get(1);
			}
			public void setColStatus(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.row.set(1, value, true);
			}
			public void setCellColStatusTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.nursing.vo.OralAssessment getValue()
			{
				return (ims.nursing.vo.OralAssessment)super.row.getValue();
			}
			public void setValue(ims.nursing.vo.OralAssessment value)
			{
				super.row.setValue(value);
			}
		}
		public static class gridOralRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private gridOralRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public gridOralRow get(int index)
			{
				return new gridOralRow(super.collection.get(index));
			}
			public gridOralRow newRow()
			{
				return new gridOralRow(super.collection.newRow());
			}
			public gridOralRow newRow(boolean autoSelect)
			{
				return new gridOralRow(super.collection.newRow(autoSelect));
			}
			public gridOralRow newRowAt(int index)
			{
				return new gridOralRow(super.collection.newRowAt(index));
			}
			public gridOralRow newRowAt(int index, boolean autoSelect)
			{
				return new gridOralRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class gridOralGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
			{
				super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
			}
			public void answerBoxColumnClear(int column)
			{
				super.grid.answerBoxColumnClear(column);
			}
			public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
			{
				super.grid.answerBoxColumnNewOption(column, option);
			}
			public ims.nursing.vo.OralAssessment[] getValues()
			{
				ims.nursing.vo.OralAssessment[] listOfValues = new ims.nursing.vo.OralAssessment[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.nursing.vo.OralAssessment getValue()
			{
				return (ims.nursing.vo.OralAssessment)super.grid.getValue();
			}
			public void setValue(ims.nursing.vo.OralAssessment value)
			{
				super.grid.setValue(value);
			}
			public gridOralRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new gridOralRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public gridOralRowCollection getRows()
			{
				return new gridOralRowCollection(super.grid.getRows());
			}
			public gridOralRow getRowByValue(ims.nursing.vo.OralAssessment value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new gridOralRow(row);
			}
			public void setColDentalHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColDentalHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridMutableAnswerBox ColStatusAnswerBox()
			{
				return null;//return new GridMutableAnswerBox(super.grid, 1);
			}
		}
		public static class gridNutritionalRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected gridNutritionalRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColNutritionalReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColNutritionalReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColNutritionalOpened()
			{
				super.row.showOpened(0);
			}
			public String getColNutritional()
			{
				return (String)super.row.get(0);
			}
			public void setColNutritional(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColNutritionalTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColSelectedReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColSelectedReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColSelectedOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getColSelected()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setColSelected(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellColSelectedTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.nursing.vo.lookups.NutritionalMethod getValue()
			{
				return (ims.nursing.vo.lookups.NutritionalMethod)super.row.getValue();
			}
			public void setValue(ims.nursing.vo.lookups.NutritionalMethod value)
			{
				super.row.setValue(value);
			}
		}
		public static class gridNutritionalRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private gridNutritionalRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public gridNutritionalRow get(int index)
			{
				return new gridNutritionalRow(super.collection.get(index));
			}
			public gridNutritionalRow newRow()
			{
				return new gridNutritionalRow(super.collection.newRow());
			}
			public gridNutritionalRow newRow(boolean autoSelect)
			{
				return new gridNutritionalRow(super.collection.newRow(autoSelect));
			}
			public gridNutritionalRow newRowAt(int index)
			{
				return new gridNutritionalRow(super.collection.newRowAt(index));
			}
			public gridNutritionalRow newRowAt(int index, boolean autoSelect)
			{
				return new gridNutritionalRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class gridNutritionalGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.nursing.vo.lookups.NutritionalMethod[] getValues()
			{
				ims.nursing.vo.lookups.NutritionalMethod[] listOfValues = new ims.nursing.vo.lookups.NutritionalMethod[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.nursing.vo.lookups.NutritionalMethod getValue()
			{
				return (ims.nursing.vo.lookups.NutritionalMethod)super.grid.getValue();
			}
			public void setValue(ims.nursing.vo.lookups.NutritionalMethod value)
			{
				super.grid.setValue(value);
			}
			public gridNutritionalRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new gridNutritionalRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public gridNutritionalRowCollection getRows()
			{
				return new gridNutritionalRowCollection(super.grid.getRows());
			}
			public gridNutritionalRow getRowByValue(ims.nursing.vo.lookups.NutritionalMethod value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new gridNutritionalRow(row);
			}
			public void setColNutritionalHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColNutritionalHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColSelectedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColSelectedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class gridDexerityRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected gridDexerityRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolDexterityReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolDexterityReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolDexterityOpened()
			{
				super.row.showOpened(0);
			}
			public ims.coe.vo.lookups.ManualDexterity getcolDexterity()
			{
				return (ims.coe.vo.lookups.ManualDexterity)super.row.get(0);
			}
			public void setcolDexterity(ims.coe.vo.lookups.ManualDexterity value)
			{
				super.row.set(0, value);
			}
			public void setCellcolDexterityTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColStatusReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColStatusOpened()
			{
				super.row.showOpened(1);
			}
			public ims.core.vo.lookups.YesNoUnknown getColStatus()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.row.get(1);
			}
			public void setColStatus(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.row.set(1, value, true);
			}
			public void setCellColStatusTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.coe.vo.ManualDexterity getValue()
			{
				return (ims.coe.vo.ManualDexterity)super.row.getValue();
			}
			public void setValue(ims.coe.vo.ManualDexterity value)
			{
				super.row.setValue(value);
			}
		}
		public static class gridDexerityRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private gridDexerityRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public gridDexerityRow get(int index)
			{
				return new gridDexerityRow(super.collection.get(index));
			}
			public gridDexerityRow newRow()
			{
				return new gridDexerityRow(super.collection.newRow());
			}
			public gridDexerityRow newRow(boolean autoSelect)
			{
				return new gridDexerityRow(super.collection.newRow(autoSelect));
			}
			public gridDexerityRow newRowAt(int index)
			{
				return new gridDexerityRow(super.collection.newRowAt(index));
			}
			public gridDexerityRow newRowAt(int index, boolean autoSelect)
			{
				return new gridDexerityRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class gridDexerityGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
			{
				super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
			}
			public void answerBoxColumnClear(int column)
			{
				super.grid.answerBoxColumnClear(column);
			}
			public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
			{
				super.grid.answerBoxColumnNewOption(column, option);
			}
			public ims.coe.vo.ManualDexterity[] getValues()
			{
				ims.coe.vo.ManualDexterity[] listOfValues = new ims.coe.vo.ManualDexterity[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.coe.vo.ManualDexterity getValue()
			{
				return (ims.coe.vo.ManualDexterity)super.grid.getValue();
			}
			public void setValue(ims.coe.vo.ManualDexterity value)
			{
				super.grid.setValue(value);
			}
			public gridDexerityRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new gridDexerityRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public gridDexerityRowCollection getRows()
			{
				return new gridDexerityRowCollection(super.grid.getRows());
			}
			public gridDexerityRow getRowByValue(ims.coe.vo.ManualDexterity value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new gridDexerityRow(row);
			}
			public void setcolDexterityHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolDexterityHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridMutableAnswerBox ColStatusAnswerBox()
			{
				return null;//return new GridMutableAnswerBox(super.grid, 1);
			}
		}
		public static class gridCarePlanRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected gridCarePlanRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolCarePlansReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolCarePlansReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolCarePlansOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolCarePlans()
			{
				return (String)super.row.get(0);
			}
			public void setcolCarePlans(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolCarePlansTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectedReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectedReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectedOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelected()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelected(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectedTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.nursing.vo.CarePlanTemplateTitle getValue()
			{
				return (ims.nursing.vo.CarePlanTemplateTitle)super.row.getValue();
			}
			public void setValue(ims.nursing.vo.CarePlanTemplateTitle value)
			{
				super.row.setValue(value);
			}
		}
		public static class gridCarePlanRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private gridCarePlanRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public gridCarePlanRow get(int index)
			{
				return new gridCarePlanRow(super.collection.get(index));
			}
			public gridCarePlanRow newRow()
			{
				return new gridCarePlanRow(super.collection.newRow());
			}
			public gridCarePlanRow newRow(boolean autoSelect)
			{
				return new gridCarePlanRow(super.collection.newRow(autoSelect));
			}
			public gridCarePlanRow newRowAt(int index)
			{
				return new gridCarePlanRow(super.collection.newRowAt(index));
			}
			public gridCarePlanRow newRowAt(int index, boolean autoSelect)
			{
				return new gridCarePlanRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class gridCarePlanGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.nursing.vo.CarePlanTemplateTitle[] getValues()
			{
				ims.nursing.vo.CarePlanTemplateTitle[] listOfValues = new ims.nursing.vo.CarePlanTemplateTitle[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.nursing.vo.CarePlanTemplateTitle getValue()
			{
				return (ims.nursing.vo.CarePlanTemplateTitle)super.grid.getValue();
			}
			public void setValue(ims.nursing.vo.CarePlanTemplateTitle value)
			{
				super.grid.setValue(value);
			}
			public gridCarePlanRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new gridCarePlanRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public gridCarePlanRowCollection getRows()
			{
				return new gridCarePlanRowCollection(super.grid.getRows());
			}
			public gridCarePlanRow getRowByValue(ims.nursing.vo.CarePlanTemplateTitle value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new gridCarePlanRow(row);
			}
			public void setcolCarePlansHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolCarePlansHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
	
		public static class answerBoxSpecialDietAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class answerBoxRequireAssistanceAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class answerBoxDifficultySwallowingAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 220, 10, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Score:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 672, 1148, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Section Complete?", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 265, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient have any difficulties in swallowing?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 848, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Any Special Diet?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 1008, 271, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Does the patient require assistance eating / drinking?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 816, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Describe appetite:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 880, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Special Diet:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 976, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Favourite:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 944, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Dislike:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 912, 164, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Particular foods the patient like:", new Integer(0), null, new Integer(0)}));
	
			// Button Controls
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 645, 1168, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 725, 1168, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 184, 912, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 184, 976, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 184, 944, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 184, 816, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_comboBoxAppetiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_comboBoxAppetiteTemp);
			comboBoxAppetiteComboBox comboBoxAppetite = (comboBoxAppetiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(comboBoxAppetiteComboBox.class, m_comboBoxAppetiteTemp);
			super.addComboBox(comboBoxAppetite);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 184, 880, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_comboBoxDietTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_comboBoxDietTemp);
			comboBoxDietComboBox comboBoxDiet = (comboBoxDietComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(comboBoxDietComboBox.class, m_comboBoxDietTemp);
			super.addComboBox(comboBoxDiet);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 784, 1148, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 240, 465, 384, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_gridSwallowTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_gridSwallowTemp);
			gridSwallowGrid gridSwallow = (gridSwallowGrid)GridFlyweightFactory.getInstance().createGridBridge(gridSwallowGrid.class, m_gridSwallowTemp);
			gridSwallow.addStringColumn("Ability to Swallow", 0, 0, 390, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridSwallow.addAnswerBoxColumn("Status", 1, 1, -1, false, false, 10, true, true);
			super.addGrid(gridSwallow);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 424, 40, 376, 168, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_gridOralTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_gridOralTemp);
			gridOralGrid gridOral = (gridOralGrid)GridFlyweightFactory.getInstance().createGridBridge(gridOralGrid.class, m_gridOralTemp);
			gridOral.addStringColumn("Oral Assessment", 0, 0, 275, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridOral.addAnswerBoxColumn("Status", 1, 1, -1, false, false, 10, true, true);
			super.addGrid(gridOral);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 389, 168, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_gridNutritionalTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_gridNutritionalTemp);
			gridNutritionalGrid gridNutritional = (gridNutritionalGrid)GridFlyweightFactory.getInstance().createGridBridge(gridNutritionalGrid.class, m_gridNutritionalTemp);
			gridNutritional.addStringColumn("Nutritional Method", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridNutritional.addBoolColumn("Selected", 1, 1, -1, false, false, 0, true);
			super.addGrid(gridNutritional);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 632, 465, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_gridDexerityTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_gridDexerityTemp);
			gridDexerityGrid gridDexerity = (gridDexerityGrid)GridFlyweightFactory.getInstance().createGridBridge(gridDexerityGrid.class, m_gridDexerityTemp);
			gridDexerity.addStringColumn("Manual Dexterity", 0, 0, 390, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridDexerity.addAnswerBoxColumn("Status", 1, 1, -1, false, false, 10, true, true);
			super.addGrid(gridDexerity);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 1032, 784, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_gridCarePlanTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_gridCarePlanTemp);
			gridCarePlanGrid gridCarePlan = (gridCarePlanGrid)GridFlyweightFactory.getInstance().createGridBridge(gridCarePlanGrid.class, m_gridCarePlanTemp);
			gridCarePlan.addStringColumn("Care Plans", 0, 0, 650, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridCarePlan.addBoolColumn("Selected", 1, 1, -1, false, false, 0, true);
			super.addGrid(gridCarePlan);
	
			// DecimalBox Controls
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 267, 8, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(1), "The decimal value is invalid. A valid value can have up to 4 digits and up to 1 decimals.", null, Boolean.FALSE}));
	
			// Link Controls
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 142, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Mini Nutritional Assessment", Boolean.FALSE, null}));
	
			// AnswerBox Controls
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 184, 848, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			AnswerBox tmpanswerBoxSpecialDiet = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpanswerBoxSpecialDiet);
			answerBoxSpecialDietAnswerBox answerBoxSpecialDiet = (answerBoxSpecialDietAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(answerBoxSpecialDietAnswerBox.class, tmpanswerBoxSpecialDiet);
			super.addAnswerBox(answerBoxSpecialDiet);
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 288, 1008, 33, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			AnswerBox tmpanswerBoxRequireAssistance = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpanswerBoxRequireAssistance);
			answerBoxRequireAssistanceAnswerBox answerBoxRequireAssistance = (answerBoxRequireAssistanceAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(answerBoxRequireAssistanceAnswerBox.class, tmpanswerBoxRequireAssistance);
			super.addAnswerBox(answerBoxRequireAssistance);
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 288, 224, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpanswerBoxDifficultySwallowing = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpanswerBoxDifficultySwallowing);
			answerBoxDifficultySwallowingAnswerBox answerBoxDifficultySwallowing = (answerBoxDifficultySwallowingAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(answerBoxDifficultySwallowingAnswerBox.class, tmpanswerBoxDifficultySwallowing);
			super.addAnswerBox(answerBoxDifficultySwallowing);
		}
		public Button bSave()
		{
			return (Button)super.getControl(10);
		}
		public Button bCancel()
		{
			return (Button)super.getControl(11);
		}
		public TextBox textBoxLike()
		{
			return (TextBox)super.getControl(12);
		}
		public TextBox textBoxFavourite()
		{
			return (TextBox)super.getControl(13);
		}
		public TextBox textBoxDislike()
		{
			return (TextBox)super.getControl(14);
		}
		public comboBoxAppetiteComboBox comboBoxAppetite()
		{
			return (comboBoxAppetiteComboBox)super.getComboBox(0);
		}
		public comboBoxDietComboBox comboBoxDiet()
		{
			return (comboBoxDietComboBox)super.getComboBox(1);
		}
		public CheckBox checkBoxComplete()
		{
			return (CheckBox)super.getControl(17);
		}
		public gridSwallowGrid gridSwallow()
		{
			return (gridSwallowGrid)super.getGrid(0);
		}
		public gridOralGrid gridOral()
		{
			return (gridOralGrid)super.getGrid(1);
		}
		public gridNutritionalGrid gridNutritional()
		{
			return (gridNutritionalGrid)super.getGrid(2);
		}
		public gridDexerityGrid gridDexerity()
		{
			return (gridDexerityGrid)super.getGrid(3);
		}
		public gridCarePlanGrid gridCarePlan()
		{
			return (gridCarePlanGrid)super.getGrid(4);
		}
		public DecimalBox decMNAScore()
		{
			return (DecimalBox)super.getControl(23);
		}
		public Link linkMNA()
		{
			return (Link)super.getControl(24);
		}
		public answerBoxSpecialDietAnswerBox answerBoxSpecialDiet()
		{
			return (answerBoxSpecialDietAnswerBox)super.getAnswerBox(0);
		}
		public answerBoxRequireAssistanceAnswerBox answerBoxRequireAssistance()
		{
			return (answerBoxRequireAssistanceAnswerBox)super.getAnswerBox(1);
		}
		public answerBoxDifficultySwallowingAnswerBox answerBoxDifficultySwallowing()
		{
			return (answerBoxDifficultySwallowingAnswerBox)super.getAnswerBox(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Container Clasess
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 824, 576, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_container1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_container1);
		container1Container container1 = (container1Container)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(container1Container.class, m_container1, factory);
		ims.framework.utils.SizeInfo m_container1DesignSize = new ims.framework.utils.SizeInfo(824, 576);
		ims.framework.utils.SizeInfo m_container1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper29.getWidth(), anchoringHelper29.getHeight());
		container1.setContext(form, appForm, m_container1, loader, this.getImages(), startControlID, m_container1DesignSize, m_container1RuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(container1);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 24, 8, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Copy Previous Assessment", Boolean.TRUE, null}));

		// Link Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 792, 8, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Info", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public container1Container container1()
	{
		return (container1Container)super.getContainer(0);
	}
	public CheckBox checkBoxCopy()
	{
		return (CheckBox)super.getControl(1);
	}
	public Link linkInfo()
	{
		return (Link)super.getControl(2);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Nursing = new NursingForms();
		}
		public final class NursingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingForms()
			{
				AdmissionAssessOverview = new LocalFormName(101100);
				AssessmentInfo = new LocalFormName(101117);
				CarePlanStep2 = new LocalFormName(101129);
				MNAInput = new LocalFormName(101135);
			}
			public final FormName AdmissionAssessOverview;
			public final FormName AssessmentInfo;
			public final FormName CarePlanStep2;
			public final FormName MNAInput;
		}

		public NursingForms Nursing;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_Clear = new ImageHelper(102104, "Images/Core/AnswerBox_Clear.jpg", new Integer(10), new Integer(10));
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				AnswerBox_NotAvailable = new ImageHelper(102103, "Images/Core/AnswerBox_NotAvailable.gif", new Integer(10), new Integer(10));
				AnswerBox_Unknown = new ImageHelper(102102, "Images/Core/AnswerBox_Unknown.gif", new Integer(10), new Integer(10));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
			}
			public final ims.framework.utils.Image AnswerBox_Clear;
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image AnswerBox_NotAvailable;
			public final ims.framework.utils.Image AnswerBox_Unknown;
			public final ims.framework.utils.Image AnswerBox_Yes;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Assmnt = new ims.framework.ContextVariable("Assmnt", prefix + "_lv_COE.AssessEating.__internal_x_context__Assmnt_" + componentIdentifier + "");
			cxl_AssmntEating = new ims.framework.ContextVariable("AssmntEating", prefix + "_lv_COE.AssessEating.__internal_x_context__AssmntEating_" + componentIdentifier + "");
			cxl_YesNoColl = new ims.framework.ContextVariable("YesNoColl", prefix + "_lv_COE.AssessEating.__internal_x_context__YesNoColl_" + componentIdentifier + "");
			cxl_PrevAssmntEating = new ims.framework.ContextVariable("PrevAssmntEating", prefix + "_lv_COE.AssessEating.__internal_x_context__PrevAssmntEating_" + componentIdentifier + "");
		}
		
		public boolean getAssmntIsNotNull()
		{
			return !cxl_Assmnt.getValueIsNull(context);
		}
		public ims.nursing.vo.AssessmentHeaderInfo getAssmnt()
		{
			return (ims.nursing.vo.AssessmentHeaderInfo)cxl_Assmnt.getValue(context);
		}
		public void setAssmnt(ims.nursing.vo.AssessmentHeaderInfo value)
		{
			cxl_Assmnt.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Assmnt = null;
		public boolean getAssmntEatingIsNotNull()
		{
			return !cxl_AssmntEating.getValueIsNull(context);
		}
		public ims.coe.vo.AssessmentEatingAndDrinking getAssmntEating()
		{
			return (ims.coe.vo.AssessmentEatingAndDrinking)cxl_AssmntEating.getValue(context);
		}
		public void setAssmntEating(ims.coe.vo.AssessmentEatingAndDrinking value)
		{
			cxl_AssmntEating.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AssmntEating = null;
		public boolean getYesNoCollIsNotNull()
		{
			return !cxl_YesNoColl.getValueIsNull(context);
		}
		public ims.core.vo.lookups.YesNoUnknownCollection getYesNoColl()
		{
			return (ims.core.vo.lookups.YesNoUnknownCollection)cxl_YesNoColl.getValue(context);
		}
		public void setYesNoColl(ims.core.vo.lookups.YesNoUnknownCollection value)
		{
			cxl_YesNoColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_YesNoColl = null;
		public boolean getPrevAssmntEatingIsNotNull()
		{
			return !cxl_PrevAssmntEating.getValueIsNull(context);
		}
		public ims.coe.vo.AssessmentEatingAndDrinking getPrevAssmntEating()
		{
			return (ims.coe.vo.AssessmentEatingAndDrinking)cxl_PrevAssmntEating.getValue(context);
		}
		public void setPrevAssmntEating(ims.coe.vo.AssessmentEatingAndDrinking value)
		{
			cxl_PrevAssmntEating.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrevAssmntEating = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[99];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-ID", "ID_AssessmentComponent");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-ISCOMPLETE", "IsComplete");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-COPY", "Copy");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-COMPONENTTYPE", "ComponentType");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-ID", "ID_Assessment");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTTYPE", "AssessmentType");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTSTATUS", "AssessmentStatus");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-DATETIMECOMPLETE", "DateTimeComplete");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_COE.MNARecord", "BO-1003100002-ID", "ID_Assessment");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_COE.MNARecord", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_COE.MNARecord", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_COE.MNARecord", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1015100001-ID", "ID_AssessmentComponent");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1015100001-ISCOMPLETE", "IsComplete");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1015100001-COPY", "Copy");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1015100001-COMPONENTTYPE", "ComponentType");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1012100022-DIFFICULTIESWITHSWALLOWING", "DifficultiesWithSwallowing");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1012100022-DESCRIBEAPPETITE", "DescribeAppetite");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1012100022-ANYSPECIALDIET", "AnySpecialDiet");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1012100022-SPECIALDIET", "SpecialDiet");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1012100022-FOODPATIENTLIKES", "FoodPatientLikes");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1012100022-FOODPATIENTDISLIKES", "FoodPatientDislikes");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1012100022-FOODPATIENTFAVOURITE", "FoodPatientFavourite");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1012100022-REQUIREASSISTANCE", "RequireAssistance");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_COE.AssessmentEatingAndDrinking", "BO-1012100022-MNASCORE", "MNAScore");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
