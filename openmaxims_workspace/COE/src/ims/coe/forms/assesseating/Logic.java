//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40616.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assesseating;

import ims.coe.forms.assesseating.GenForm.container1Container.gridCarePlanRowCollection;
import ims.coe.forms.assesseating.GenForm.container1Container.gridDexerityRowCollection;
import ims.coe.forms.assesseating.GenForm.container1Container.gridNutritionalRowCollection;
import ims.coe.forms.assesseating.GenForm.container1Container.gridOralRowCollection;
import ims.coe.forms.assesseating.GenForm.container1Container.gridSwallowRowCollection;
import ims.coe.vo.AssessmentEatingAndDrinking;
import ims.coe.vo.RiskAssessmentCollection;
import ims.coe.vo.SwallowingAssessment;
import ims.coe.vo.SwallowingAssessmentCollection;
import ims.coe.vo.lookups.LookupHelper;
import ims.coe.vo.lookups.ManualDexterity;
import ims.coe.vo.lookups.ManualDexterityCollection;
import ims.coe.vo.lookups.OralAssessment;
import ims.coe.vo.lookups.OralAssessmentCollection;
import ims.coe.vo.lookups.SwallowingAbility;
import ims.coe.vo.lookups.SwallowingAbilityCollection;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;
import ims.nursing.vo.lookups.NutritionalMethod;
import ims.nursing.vo.lookups.NutritionalMethodCollection;


public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();	
	}
	
	private void open() 
	{
		form.container1().linkMNA().setFocus();
		form.container1().linkMNA().setTooltip("<b>Screening score</b> (subtotal max. 14 points)<br>12 points or greater Normal - not at risk - no need to complete assessment <br> 11 points or below Possible malnutrition - continue assessment <br><br>Total Assessment (max. 30 points)<br> <b>Malnutrition Indicator Score </b><br>17 to 23.5 points at risk of malnutrition <br>Less than 17 points malnourished");
		form.setMode(FormMode.EDIT);
		form.container1().bSave().setEnabled(true);
		form.container1().comboBoxDiet().setEnabled(false);
		form.container1().gridCarePlan().setReadOnly(false);
		form.getLocalContext().setYesNoColl(ims.core.vo.lookups.LookupHelper.getYesNoUnknown(domain.getLookupService()));
		form.checkBoxCopy().setEnabled(false);
		form.container1().checkBoxComplete().setEnabled(false);
		
		// If there is an assessment in the global context, we want to call the get component
		// domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssmnt(assmnt);
		if (assmnt != null && assmnt.getID_AssessmentIsNotNull())
		{		
			//AssessmentEatingAndDrinking assessEat = (AssessmentEatingAndDrinking)domain.getComponent(assmnt.getCurrentComponent(), AssessmentComponentType.EATING);
			AssessmentEatingAndDrinking voAssessEat = (AssessmentEatingAndDrinking)domain.getComponent(assmnt,AssessmentComponentType.EATING);
			if (voAssessEat == null)
				return;
			
			if (voAssessEat != null)
				form.getLocalContext().setAssmntEating(voAssessEat);
			populateInstanceControl(voAssessEat);			
		
			//If there is a MNA entered then we are allowed to Complete this section
			if (voAssessEat.getMiniNutritionalAssessment() != null)
				form.container1().checkBoxComplete().setEnabled(true);
		
			//If the Section has been completed previously then set the check box accordingly
			if(voAssessEat.getIsComplete().booleanValue() == true)
			{
				form.container1().checkBoxComplete().setValue(true);
				form.container1().checkBoxComplete().setEnabled(false);
			}
		}
		else
		{
			form.container1().checkBoxComplete().setEnabled(false);
			form.setMode(FormMode.EDIT);
			
			//check if there is a relevant component
			getLastAssessmentComponent();
		}
		
	}

	private void initialize() 
	{
		prePopulateGrds();
	}

	private void prePopulateGrds()
	{
		prePopulateNutritionalGrd();
		prePopulateOralGrd();
		prePopulateSwallowGrd();
		prePopulateDexerityGrd();
		prePopulateCarePlanGrd();		
	}

	private void prePopulateCarePlanGrd()
	{
		// Populate the Grid CarePlan Templates
 	    CarePlanTemplateTitleCollection votempColl = domain.listCarePlanTemplates(AssessmentComponentType.EATING);
		if (votempColl != null)
		{
			  form.container1().gridCarePlan().getRows().clear();
			  GenForm.container1Container.gridCarePlanRow tempRow;
			  for (int i=0; i<votempColl.size(); i++)
			  {
				   CarePlanTemplateTitle votemplate = votempColl.get(i);
				   tempRow = form.container1().gridCarePlan().getRows().newRow();
				   tempRow.setValue(votemplate);
				   tempRow.setcolCarePlans(votemplate.getTitle());
			  }
		}
	}

	private void prePopulateDexerityGrd() 
	{
		// Populate gridDexterity with lookup values
		ManualDexterityCollection mColl = LookupHelper.getManualDexterity(domain.getLookupService());
		form.container1().gridDexerity().getRows().clear();
		GenForm.container1Container.gridDexerityRow dRow;
		for (int i=0; i<mColl.size(); i++)
		{
			ManualDexterity dexterity = mColl.get(i);
			dRow = form.container1().gridDexerity().getRows().newRow();
			dRow.setcolDexterity(dexterity);
			dRow.setColStatus(null);
		}
	}

	private void prePopulateSwallowGrd() 
	{
		//Populate gridSwallow with lookup values
		SwallowingAbilityCollection swColl = LookupHelper.getSwallowingAbility(domain.getLookupService());
		form.container1().gridSwallow().getRows().clear();
		GenForm.container1Container.gridSwallowRow sRow;
		for (int i=0; i<swColl.size(); i++)
		{
			SwallowingAbility swallow = swColl.get(i);
			sRow = form.container1().gridSwallow().getRows().newRow();
			sRow.setcolSwallow(swallow);
			sRow.setColStatus(null);
		}
	}

	private void prePopulateOralGrd() 
	{
		// Populate gridOral with lookup values
		OralAssessmentCollection oralColl = LookupHelper.getOralAssessment(domain.getLookupService());
		form.container1().gridOral().getRows().clear();
		GenForm.container1Container.gridOralRow oRow;
		for (int i=0; i<oralColl.size(); i++)
		{
			OralAssessment oral = oralColl.get(i);
			oRow = form.container1().gridOral().getRows().newRow();
			oRow.setColDental(oral);
			oRow.setColStatus(null);
		}
	}

	private void prePopulateNutritionalGrd() 
	{
		// Populate gridNutritional with lookup values
		NutritionalMethodCollection nutColl = ims.nursing.vo.lookups.LookupHelper.getNutritionalMethod(domain.getLookupService());
		form.container1().gridNutritional().getRows().clear();	
		GenForm.container1Container.gridNutritionalRow nRow;
		for (int i=0; i<nutColl.size(); i++)
		{
			NutritionalMethod method = nutColl.get(i);
			nRow = form.container1().gridNutritional().getRows().newRow();
			nRow.setValue(method);
			nRow.setColNutritional(method.getText());
			nRow.setColSelected(false);
		}
	}

	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssmntEating() == null)
			return;
		
		form.getLocalContext().getPrevAssmntEating().setIsComplete(new Boolean(false));
		form.getLocalContext().getPrevAssmntEating().setCarePlanTemplate(null);
		form.getLocalContext().getPrevAssmntEating().setMNAScore(null);
		form.getLocalContext().getPrevAssmntEating().setMiniNutritionalAssessment(null);
		populateInstanceControl(form.getLocalContext().getPrevAssmntEating());
		form.checkBoxCopy().setValue(true);
		form.checkBoxCopy().setEnabled(false);
	}
	
	protected void getLastAssessmentComponent()
	{
		AssessmentEatingAndDrinking assessEat= (AssessmentEatingAndDrinking)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.EATING);
		if (assessEat == null)
		{
			this.form.checkBoxCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssmntEating(assessEat);
		form.checkBoxCopy().setEnabled(true);
	}
	
	private void populateInstanceControl(AssessmentEatingAndDrinking voAssessEat)
	{
		clearScreen();
		if (voAssessEat == null)
			return;
			
		form.container1().answerBoxSpecialDiet().setValue(voAssessEat.getAnySpecialDiet());
		form.container1().answerBoxDifficultySwallowing().setValue(voAssessEat.getDifficultiesWithSwallowing());
		form.container1().answerBoxRequireAssistance().setValue(voAssessEat.getRequireAssistance());

		form.checkBoxCopy().setValue(voAssessEat.getCopy().booleanValue());
		if (voAssessEat.getCopy().booleanValue()  == true)
			form.checkBoxCopy().setEnabled(false);
				
		form.container1().checkBoxComplete().setValue(voAssessEat.getIsComplete().booleanValue());
		if (voAssessEat.getIsComplete().booleanValue() == true)  // Complete
		{
			form.container1().bSave().setEnabled(false);
			form.setMode(FormMode.VIEW);
			form.container1().checkBoxComplete().setEnabled(false);
			form.checkBoxCopy().setEnabled(false);
			form.container1().gridCarePlan().setReadOnly(true);
		}
			
		form.container1().comboBoxAppetite().setValue(voAssessEat.getDescribeAppetite());
		form.container1().comboBoxDiet().setValue(voAssessEat.getSpecialDiet());
		form.container1().textBoxDislike().setValue(voAssessEat.getFoodPatientDislikes());
		form.container1().textBoxFavourite().setValue(voAssessEat.getFoodPatientFavourite());
		form.container1().textBoxLike().setValue(voAssessEat.getFoodPatientLikes());
		form.container1().decMNAScore().setValue(voAssessEat.getMNAScore()); 
		
		// Nutritional Methods
		populateNutritionalGrd(voAssessEat.getNutritionalMethod());
	
		// Oral Assessment
		populateOralGrd(voAssessEat.getOralAssessment());
		
		// Swallowing Assessment
		populateSwallowGrd(voAssessEat.getSwallowing());
		
		// Manual Dexterity
		populateManualGrd(voAssessEat.getManualDexterity());
		
		// Populate the correct selected careplan template if one saved with the component
		populateCarePlanGrd(voAssessEat.getCarePlanTemplate());

	}
	
	private void clearScreen()
	{
		form.container1().answerBoxSpecialDiet().setValue(null);
		form.container1().answerBoxDifficultySwallowing().setValue(null);
		form.container1().answerBoxRequireAssistance().setValue(null);

		form.checkBoxCopy().setValue(null);
				
		form.container1().checkBoxComplete().setValue(null);
					
		form.container1().comboBoxAppetite().setValue(null);
		form.container1().comboBoxDiet().setValue(null);
		form.container1().textBoxDislike().setValue(null);
		form.container1().textBoxFavourite().setValue(null);
		form.container1().textBoxLike().setValue(null);
		form.container1().decMNAScore().setValue(null); 
		
		// Nutritional Methods
		clearNutritionalGrd();
	
		// Oral Assessment
		clearOralGrd();
		
		// Swallowing Assessment
		clearSwallowGrd();
		
		// Manual Dexterity
		clearManualGrd();
		
		// CarePlan Templates
		clearCarePlanGrd();
		
	}

	private void clearCarePlanGrd()
	{
		gridCarePlanRowCollection rows = form.container1().gridCarePlan().getRows();
		for (int i  = 0 ; i < rows.size() ; i++)
		{
			rows.get(i).setReadOnly(false);
			rows.get(i).setcolSelected(false);
		}
	}

	private void clearManualGrd()
	{
		gridDexerityRowCollection rows = form.container1().gridDexerity().getRows();
		for (int i = 0 ; i < rows.size() ; i++)
		{
			rows.get(i).setValue(null);
			rows.get(i).setColStatus(null);
		}
	}

	private void clearSwallowGrd()
	{
		gridSwallowRowCollection rows = form.container1().gridSwallow().getRows();
		for (int i = 0 ; i < rows.size() ; i++)
		{
			rows.get(i).setValue(null);
			rows.get(i).setColStatus(null);
		}
		
	}

	private void clearOralGrd()
	{
		gridOralRowCollection rows = form.container1().gridOral().getRows();
		for (int i = 0 ; i < rows.size() ; i++)
		{
			rows.get(i).setValue(null);
			rows.get(i).setColStatus(null);
		}
		
	}

	private void clearNutritionalGrd()
	{
		gridNutritionalRowCollection rows = form.container1().gridNutritional().getRows();
		for (int i = 0 ; i<rows.size(); i++)
		{
			rows.get(i).setColSelected(false);
		}
		
	}

	private void populateCarePlanGrd(CarePlanTemplateCollection voCarePlanTempColl) 
	{
		if (voCarePlanTempColl != null && voCarePlanTempColl.size() > 0)
		{
			 //form.container1().gridCarePlan().setReadOnly(true);
			 GenForm.container1Container.gridCarePlanRow cpRow;
			 CarePlanTemplate template;
			 int i=0;
			 // Find the correct row to set to selected
			 for (int j=0; j<form.container1().gridCarePlan().getRows().size(); j++)
			 {
				 cpRow = form.container1().gridCarePlan().getRows().get(j);
				 for (i=0; i<voCarePlanTempColl.size(); i++)
				 {
				 	 template = voCarePlanTempColl.get(i);
					 if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					 {
					 	 cpRow.setReadOnly(true);
						 cpRow.setcolSelected(true);
						 break;
					 }
				 }
			 }
		}
	}

	private void populateManualGrd(ims.coe.vo.ManualDexterityCollection voManualDexColl) 
	{
		if (voManualDexColl != null)
		{
			GenForm.container1Container.gridDexerityRow dRow;
			for (int i=0; i<voManualDexColl.size(); i++)
			{
				ims.coe.vo.ManualDexterity dexterity = voManualDexColl.get(i);
				int k=0;
				for (k=0; k<form.container1().gridDexerity().getRows().size(); k++)
				{
					dRow = form.container1().gridDexerity().getRows().get(k);
					if (dRow.getcolDexterity().equals(dexterity.getManualDexterity()))
					{
						dRow.setValue(dexterity);
						dRow.setColStatus(dexterity.getStatus());
						break;
					}
				}
				if(k == form.container1().gridDexerity().getRows().size())
				{
					dRow = form.container1().gridDexerity().getRows().newRow();
					dRow.setValue(dexterity);
					dRow.setcolDexterity(dexterity.getManualDexterity());
					dRow.setColStatus(dexterity.getStatus());		
				}
			}
		}
	}

	private void populateSwallowGrd(SwallowingAssessmentCollection voSwallowAssessColl) 
	{
		if (voSwallowAssessColl != null)
		{
			GenForm.container1Container.gridSwallowRow sRow;
			for (int i=0; i<voSwallowAssessColl.size(); i++)
			{
				SwallowingAssessment swallow = voSwallowAssessColl.get(i);
				int k=0;
				for (k=0; k<form.container1().gridSwallow().getRows().size(); k++)
				{
					sRow = form.container1().gridSwallow().getRows().get(k);
					if (sRow.getcolSwallow().equals(swallow.getSwallowAbility()))
					{
						sRow.setValue(swallow);
						sRow.setColStatus(swallow.getStatus());
						break;
					}
				}
				if(k == form.container1().gridSwallow().getRows().size())
				{
					sRow = form.container1().gridSwallow().getRows().newRow();
					sRow.setcolSwallow(swallow.getSwallowAbility());
					sRow.setValue(swallow);
					sRow.setColStatus(swallow.getStatus());	
				}
			}
		}
	}

	private void populateOralGrd(ims.nursing.vo.OralAssessmentCollection voOralAssessColl) 
	{
		if (voOralAssessColl != null)
		{
			GenForm.container1Container.gridOralRow oRow;
			for (int i=0; i<voOralAssessColl.size(); i++)
			{
				ims.nursing.vo.OralAssessment oral = voOralAssessColl.get(i);
				int k=0;
				for (k=0; k<form.container1().gridOral().getRows().size(); k++)
				{
					oRow = form.container1().gridOral().getRows().get(k);
					if (oRow.getColDental().equals(oral.getOralAssessment()))
					{
						oRow.setValue(oral);
						oRow.setColStatus(oral.getStatus());
						break;
					}
				}
				if(k == form.container1().gridOral().getRows().size())
				{
					oRow = form.container1().gridOral().getRows().newRow();
					oRow.setColDental(oral.getOralAssessment());
					oRow.setValue(oral);
					oRow.setColStatus(oral.getStatus());
				}
			}
		}
	}

	private void populateNutritionalGrd(NutritionalMethodCollection voNutritionalMetColl) 
	{
		if (voNutritionalMetColl != null)
		{
			GenForm.container1Container.gridNutritionalRow nRow;
			for (int i=0; i<voNutritionalMetColl.size(); i++)
			{
				NutritionalMethod method = voNutritionalMetColl.get(i);
				nRow = form.container1().gridNutritional().getRowByValue(method);
				if (nRow != null)
					nRow.setColSelected(true);
				else
				{
					nRow = form.container1().gridNutritional().getRows().newRow();
					nRow.setValue(method);
					nRow.setColNutritional(method.getText());
					nRow.setColSelected(true);
				}
			}
		}
		
	}

	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssmntEating() != null && form.getLocalContext().getAssmntEating().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssmntEating().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}
	
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.container1().answerBoxRequireAssistance().getValue() != null && form.container1().answerBoxRequireAssistance().getValue().equals(YesNoUnknown.YES) && form.container1().checkBoxComplete().getValue() == true)
		{
			if(form.container1().gridCarePlan().getRows().size() == 0 || isAnyCarePlanSelected() == false)
			{
				engine.showMessage("Please select a care plan first !");
				return;
			}
		}
		
		AssessmentEatingAndDrinking assessEat = null;
		try
		{
			assessEat = loadDataFromScreen();
			if (assessEat == null)
				return;
			
			String[] messages = assessEat.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}			
			AssessmentHeaderInfo newAssmnt = form.getLocalContext().getAssmnt();
			
			if (newAssmnt.getCareContext() == null)
				newAssmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (newAssmnt.getClinicalContact() == null)
				newAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		    newAssmnt = domain.saveComponent(newAssmnt, assessEat);
		    form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			open();
			return;				
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("An Eating Assessment record already exists. " + e.getMessage());
			open();
			return;
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			open();
			return;
		}

		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.container1().gridCarePlan().getReadOnly() == false)
		{
			CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			GenForm.container1Container.gridCarePlanRow cpRow;
			for (int i=0; i<form.container1().gridCarePlan().getRows().size(); i++)
			{
				cpRow = form.container1().gridCarePlan().getRows().get(i);
				if (cpRow.getcolSelected() && !cpRow.isReadOnly())
					templList.add(cpRow.getValue());
			}
			if (templList.size() > 0)
			{
				form.getGlobalContext().Nursing.setAssessmentComponent(assessEat);
				
				form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				engine.open(form.getForms().Nursing.CarePlanStep2);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	
	private boolean isAnyCarePlanSelected()
	{
		for(int i = 0; i < form.container1().gridCarePlan().getRows().size(); i++)
		{
			if(form.container1().gridCarePlan().getRows().get(i).getcolSelected() == true)
				return true;
		}
		
		return false;
	}

	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}

	protected void onAnswerBoxSpecialDietValueChanged() throws PresentationLogicException 
	{
		if(form.container1().answerBoxSpecialDiet().getValue() != null && form.container1().answerBoxSpecialDiet().getValue().equals(YesNoUnknown.YES))
		{
			form.container1().comboBoxDiet().setEnabled(true);
		}
		else
		{
			form.container1().comboBoxDiet().setValue(null);
			form.container1().comboBoxDiet().setEnabled(false);
		}
	}

	protected AssessmentEatingAndDrinking loadDataFromScreen()
	{	
		AssessmentEatingAndDrinking assessEat = form.getLocalContext().getAssmntEating();
		if (assessEat == null)
		{
			assessEat = new AssessmentEatingAndDrinking();
			assessEat.setComponentType(AssessmentComponentType.EATING);
		}
		
		assessEat.setIsComplete(new Boolean(this.form.container1().checkBoxComplete().getValue()));
		assessEat.setCopy(new Boolean(this.form.checkBoxCopy().getValue()));
		assessEat.setDescribeAppetite(form.container1().comboBoxAppetite().getValue());
		assessEat.setFoodPatientDislikes(form.container1().textBoxDislike().getValue());
		assessEat.setFoodPatientFavourite(form.container1().textBoxFavourite().getValue());
		assessEat.setFoodPatientLikes(form.container1().textBoxLike().getValue());
		assessEat.setSpecialDiet(form.container1().comboBoxDiet().getValue());
		
		assessEat.setAnySpecialDiet(form.container1().answerBoxSpecialDiet().getValue());
		assessEat.setDifficultiesWithSwallowing(form.container1().answerBoxDifficultySwallowing().getValue());
		assessEat.setRequireAssistance(form.container1().answerBoxRequireAssistance().getValue());
		
		//MNA score
		assessEat.setMNAScore(form.container1().decMNAScore().getValue());
		
		// Save the nutritional methods from the grid
		NutritionalMethodCollection coll = new NutritionalMethodCollection();
		
		GenForm.container1Container.gridNutritionalRow nRow;
		for (int i=0; i<form.container1().gridNutritional().getRows().size(); i++)
		{
			nRow = form.container1().gridNutritional().getRows().get(i);
			if (nRow.getColSelected())
			{
				coll.add(nRow.getValue());
			}
		}
		assessEat.setNutritionalMethod(coll);			
		
		// Save the oral assessments from the grid
		ims.nursing.vo.OralAssessmentCollection oColl = new ims.nursing.vo.OralAssessmentCollection();
		GenForm.container1Container.gridOralRow oRow;
		for (int i=0; i<form.container1().gridOral().getRows().size(); i++)
		{
			oRow = form.container1().gridOral().getRows().get(i);
			ims.nursing.vo.OralAssessment oral = oRow.getValue();
			if (oral == null)
				oral = new 	ims.nursing.vo.OralAssessment();
			oral.setOralAssessment(oRow.getColDental());
			oral.setStatus(oRow.getColStatus());
			oColl.add(oral);

		}
		assessEat.setOralAssessment(oColl);			
		
		//	Save the swallow assessments from the grid
		ims.coe.vo.SwallowingAssessmentCollection sColl =  new ims.coe.vo.SwallowingAssessmentCollection();
		GenForm.container1Container.gridSwallowRow sRow;
		for (int i=0; i<form.container1().gridSwallow().getRows().size(); i++)
		{
			sRow = form.container1().gridSwallow().getRows().get(i);
			
			ims.coe.vo.SwallowingAssessment swallow = sRow.getValue();
			if (swallow == null)
				swallow = new SwallowingAssessment();
			swallow.setSwallowAbility(sRow.getcolSwallow());
			swallow.setStatus(sRow.getColStatus());
			sColl.add(swallow);

		}
		assessEat.setSwallowing(sColl);		
		
		
		//	Save the dexterity assessments from the grid
		ims.coe.vo.ManualDexterityCollection mColl = new ims.coe.vo.ManualDexterityCollection();
		GenForm.container1Container.gridDexerityRow dRow;
		for (int i=0; i<form.container1().gridDexerity().getRows().size(); i++)
		{
			dRow = form.container1().gridDexerity().getRows().get(i);
			
			ims.coe.vo.ManualDexterity dexterity = dRow.getValue();
			if (dexterity == null)
				dexterity = new ims.coe.vo.ManualDexterity();
			
			dexterity.setManualDexterity(dRow.getcolDexterity());
			dexterity.setStatus(dRow.getColStatus());
			mColl.add(dexterity);
		}
		assessEat.setManualDexterity(mColl);		
		
		form.getLocalContext().setAssmntEating(assessEat);
		return assessEat;
	}
	
	
	
	protected void onLinkMNAClick() throws PresentationLogicException 
	{
		AssessmentEatingAndDrinking assessEat = loadDataFromScreen();
		if (assessEat == null)
			return;

		RiskAssessmentCollection risks = form.getGlobalContext().COE.getMNAAssessments();
		
		if(risks == null)
		{
			try
			{
				risks = ims.nursing.helper.RiskAssessmentHelper.getMNARisks();
				form.getGlobalContext().COE.setMNAAssessments(risks);
			}
			catch (PresentationLogicException e)
			{
				throw new PresentationLogicException("DocumentException occurred loading risks", e);
			}
			form.getGlobalContext().COE.setMNAAssessments(risks);
		}

		
		form.getGlobalContext().Nursing.setAssessmentComponent(assessEat);
		
		//Set MNA in context
		if (assessEat.getMiniNutritionalAssessment() !=  null)
			form.getGlobalContext().COE.setMNARecord(assessEat.getMiniNutritionalAssessment());
		
		form.getGlobalContext().COE.setDisplayScore(Boolean.TRUE);
		engine.open(form.getForms().Nursing.MNAInput);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		// If there is an assessment in the global context, we want to call the get component
		// domain method
		// Otherwise, it is a new assessment component
		if(formName.equals(form.getForms().Nursing.MNAInput))
		{
			AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
			form.getLocalContext().setAssmnt(assmnt);
			form.container1().decMNAScore().setValue(form.getGlobalContext().COE.getAssessmentScore()); 
			if (assmnt != null && assmnt.getCurrentComponent() != null)
			{		
				//AssessmentEatingAndDrinking assessEat = (AssessmentEatingAndDrinking)domain.getComponent(assmnt.getCurrentComponent(), AssessmentComponentType.EATING);
				AssessmentEatingAndDrinking assessEat = (AssessmentEatingAndDrinking)domain.getComponent(assmnt.getCurrentComponent());
				if (assessEat == null)
					return;
				
				if (assessEat != null)
					form.getLocalContext().setAssmntEating(assessEat);
				populateInstanceControl(assessEat);
				
				if(formName.equals(form.getForms().Nursing.MNAInput) && form.getGlobalContext().COE.getAssessmentScoreIsNotNull())
				{
					form.container1().decMNAScore().setValue(form.getGlobalContext().COE.getAssessmentScore());
					//engine.showMessage("The total score is " + String.valueOf(form.getGlobalContext().COE.getAssessmentScore()));
					//return;
				}
				 
				
				if (assessEat.getMiniNutritionalAssessment() != null)
					form.container1().checkBoxComplete().setEnabled(true);
				
				if(assessEat.getIsComplete().booleanValue() == true)
				{
					form.container1().checkBoxComplete().setValue(true);
					form.container1().checkBoxComplete().setEnabled(false);
				}
				
			}
			else
			{
				form.container1().checkBoxComplete().setEnabled(form.container1().decMNAScore().getValue() != null ? true : false);
				form.setMode(FormMode.EDIT);
			}
		}
	}
}
