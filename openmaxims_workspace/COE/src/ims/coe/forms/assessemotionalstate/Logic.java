//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40616.1545)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assessemotionalstate;

import ims.coe.vo.AssessmentEmotionalState;
import ims.coe.vo.EmotionalState;
import ims.coe.vo.EmotionalStateCollection;
import ims.coe.vo.lookups.EmotionalStateAssessment;
import ims.coe.vo.lookups.EmotionalStateAssessmentCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		form.container1().gridEmotional().setFocus();
		form.setMode(FormMode.EDIT);
		form.container1().bSave().setEnabled(true);
		form.container1().gridCarePlan().setReadOnly(false);
		form.checkBoxCopy().setEnabled(false);
		
		// If there is an assessment in the global context, we want to call the get component domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo voAssmntHeader = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssmnt(voAssmntHeader);
		if (voAssmntHeader != null && voAssmntHeader.getID_AssessmentIsNotNull())
		{		
			//AssessmentEmotionalState assessEM = (AssessmentEmotionalState)domain.getComponent(assmnt.getCurrentComponent(), AssessmentComponentType.EMOTIONAL_STATE);
			AssessmentEmotionalState voAssessEM = (AssessmentEmotionalState)domain.getComponent(voAssmntHeader,AssessmentComponentType.EMOTIONAL_STATE);
			form.getLocalContext().setAssessEmotionalState(voAssessEM);
			populateInstanceControl(voAssessEM);			
		}
		else
		{
			// check if there is a relevant component
			getLastAssessmentComponent();
		}
	}

	private void initialize()
	{
		form.getLocalContext().setYesNoColl(ims.core.vo.lookups.LookupHelper.getYesNoUnknown(domain.getLookupService()));
		form.getLocalContext().setEmotStateColl(ims.coe.vo.lookups.LookupHelper.getEmotionalStateAssessment(domain.getLookupService()));
		
		EmotionalStateAssessmentCollection coll = form.getLocalContext().getEmotStateColl();
		
		form.container1().gridEmotional().populateTree(coll);
		form.container1().gridEmotional().expandAll();
		
		// Populate the Grid CarePlan Templates
		prePopulateCarePlanGrd();		
	}

	private void prePopulateCarePlanGrd() 
	{
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.EMOTIONAL_STATE);
		if (tempColl != null)
		{
			form.container1().gridCarePlan().getRows().clear();
			GenForm.container1Container.gridCarePlanRow tempRow;
			
			for (int i=0; i<tempColl.size(); i++)
			{
				CarePlanTemplateTitle template = tempColl.get(i);
				tempRow = form.container1().gridCarePlan().getRows().newRow();
				tempRow.setValue(template);
				tempRow.setcolCarePlans(template.getTitle());
			}
		}
	}
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AssessmentEmotionalState assessEM = form.getLocalContext().getAssessEmotionalState();
		if (assessEM == null)
		{
			assessEM = new AssessmentEmotionalState();
			assessEM.setComponentType(AssessmentComponentType.EMOTIONAL_STATE);
		}
		
		assessEM.setIsComplete(new Boolean(this.form.container1().checkBoxComplete().getValue()));
		assessEM.setCopy(new Boolean(this.form.checkBoxCopy().getValue()));
		assessEM.setSexuality(form.container1().textBoxSexuality().getValue());
		
		// Save the Emotional State Grid Information
		GenForm.container1Container.gridEmotionalRow[] allRows = form.container1().gridEmotional().getAllRows();
		
		EmotionalStateCollection emColl = new EmotionalStateCollection();
		
		GenForm.container1Container.gridEmotionalRow row;
		
		for (int i=0; i<allRows.length; i++)
		{
			row = allRows[i];
			if(row.getColStatus() != null && !row.getColStatus().equals(""))
			{
				EmotionalState state = row.getValue();
				if (state == null)
					state = new EmotionalState();
				state.setAssessment(row.getColEmotion());
				state.setSelect(row.getColStatus());
				emColl.add(state);
			}
		}
		
		assessEM.setStateAssessment(emColl);
		
		String[] messages = assessEM.validate();
		if (messages != null)
		{
			engine.showErrors("Validation Errors", messages);
			return;
		}
				
		try
		{			
			AssessmentHeaderInfo newAssmnt = form.getLocalContext().getAssmnt();
			
			if (newAssmnt.getCareContext() == null)
				newAssmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (newAssmnt.getClinicalContact() == null)
				newAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
	
		  newAssmnt = domain.saveComponent(newAssmnt, assessEM);
		  form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			onFormOpen();
			return;				
		} 
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("An Emotional State Assessment record already exists. " + e.getMessage());
			open();
			return;
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			onFormOpen();
			return;
		}
		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.container1().gridCarePlan().getReadOnly() == false)
		{
			CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			GenForm.container1Container.gridCarePlanRow cpRow;
			for (int i=0; i<form.container1().gridCarePlan().getRows().size(); i++)
			{
				cpRow = form.container1().gridCarePlan().getRows().get(i);
				if (cpRow.getcolSelected() && !cpRow.isReadOnly())
					templList.add(cpRow.getValue());
			}
			if (templList.size() > 0)
			{
				form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				engine.open(form.getForms().Nursing.CarePlanStep2);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}


	
	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssessEmotionalState() == null)
			return;
		
		// We don't want to set the complete or template values
		form.getLocalContext().getPrevAssessEmotionalState().setIsComplete(new Boolean(false));
		form.getLocalContext().getPrevAssessEmotionalState().setCarePlanTemplate(null);
		
		populateInstanceControl(form.getLocalContext().getPrevAssessEmotionalState());
		form.checkBoxCopy().setValue(true);
		form.checkBoxCopy().setEnabled(false);
	}
	
	protected void getLastAssessmentComponent()
	{
		AssessmentEmotionalState assessEM = (AssessmentEmotionalState)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(),AssessmentComponentType.EMOTIONAL_STATE);
		if (assessEM == null)
		{
			this.form.checkBoxCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessEmotionalState(assessEM);
		form.checkBoxCopy().setEnabled(true);
	}
	
	private void populateInstanceControl(AssessmentEmotionalState assessEM)
	{
		if (assessEM == null)
			return;
		
		form.checkBoxCopy().setValue(assessEM.getCopy().booleanValue());
		if (assessEM.getCopy().booleanValue() == true)
			form.checkBoxCopy().setEnabled(false);
		
		form.container1().checkBoxComplete().setValue(assessEM.getIsComplete().booleanValue());
		if (assessEM.getIsComplete().booleanValue() == true)  // Complete
		{
			form.container1().bSave().setEnabled(false);
			form.setMode(FormMode.VIEW);
			form.container1().checkBoxComplete().setEnabled(false);
			form.checkBoxCopy().setEnabled(false);
			form.container1().gridCarePlan().setReadOnly(true);
		}
		
		form.container1().textBoxSexuality().setValue(assessEM.getSexuality());

		EmotionalStateCollection collInactive = new EmotionalStateCollection();
		// Populate the Grid
		if (assessEM.getStateAssessment() != null)
		{
			GenForm.container1Container.gridEmotionalRow row;
			EmotionalStateCollection emColl = assessEM.getStateAssessment();
			for (int i=0; i<emColl.size(); i++)
			{
				EmotionalState state = emColl.get(i);	
				int k=0;
				for (k=0; k<form.container1().gridEmotional().getAllRows().length; k++)
				{
					row = form.container1().gridEmotional().getAllRows()[k];
					if (row.getColEmotion().equals(state.getAssessment()))
					{
						row.setValue(state);
						row.setColStatus(state.getSelect());
						break;
					}
				}
				if(k == form.container1().gridEmotional().getAllRows().length)
				{
					collInactive.add(state);
				}
			}
		}
		
		//inactive record handling
		EmotionalState item = null;
		EmotionalStateAssessment itemParent = null;
		for(int i=0;i<collInactive.size();i++)
		{
			item = collInactive.get(i);
			itemParent = item.getAssessment().getParent();
			GenForm.container1Container.gridEmotionalRow row = null;
			if(itemParent != null)
			{
				GenForm.container1Container.gridEmotionalRow rowChild = null;
				int j=0;
				for(j=0;j<form.container1().gridEmotional().getRows().size();j++)
				{
					row = form.container1().gridEmotional().getRows().get(j);
					if(row.getColEmotion().equals(itemParent))
					{
						rowChild = row.getRows().newRow();
						rowChild.setColEmotion(item.getAssessment());
						rowChild.setValue(item);
						rowChild.setColStatus(item.getSelect());
						break;
					}
				}
				if(j == form.container1().gridEmotional().getAllRows().length)
				{
					row = form.container1().gridEmotional().getRows().newRow();
					row.setColEmotion(item.getAssessment());
					row.setValue(item);
					row.setColStatus(item.getSelect());
				}
			}
			else
			{
				row = form.container1().gridEmotional().getRows().newRow();
				row.setColEmotion(item.getAssessment());
				row.setValue(item);
				row.setColStatus(item.getSelect());
			}
		}	
		
		
		// Populate the correct selected careplan template if one saved with the component
		if (assessEM.getCarePlanTemplate() != null && assessEM.getCarePlanTemplate().size() > 0)
		{
			GenForm.container1Container.gridCarePlanRow cpRow;
			CarePlanTemplateCollection templateColl = assessEM.getCarePlanTemplate();
			CarePlanTemplate template;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.container1().gridCarePlan().getRows().size(); j++)
			{
				cpRow = form.container1().gridCarePlan().getRows().get(j);
				for (i=0; i<templateColl.size(); i++)
				{
					template = templateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}
	}
	
	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssessEmotionalState() != null && form.getLocalContext().getAssessEmotionalState().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessEmotionalState().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}
}
