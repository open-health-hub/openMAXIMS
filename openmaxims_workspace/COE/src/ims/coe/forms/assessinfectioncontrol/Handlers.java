//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.forms.assessinfectioncontrol;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindansInfectionControlReqLookup();
	abstract protected void defaultansInfectionControlReqLookupValue();
	abstract protected void bindansNorovirusLookup();
	abstract protected void defaultansNorovirusLookupValue();
	abstract protected void bindansTBLookup();
	abstract protected void defaultansTBLookupValue();
	abstract protected void bindansESBCLookup();
	abstract protected void defaultansESBCLookupValue();
	abstract protected void bindansVRELookup();
	abstract protected void defaultansVRELookupValue();
	abstract protected void bindansClostridiumLookup();
	abstract protected void defaultansClostridiumLookupValue();
	abstract protected void bindansMRSALookup();
	abstract protected void defaultansMRSALookupValue();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansInfectionControlReqValueSet(Object value);
	abstract protected void onansNorovirusValueSet(Object value);
	abstract protected void onAnsNorovirusValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansTBValueSet(Object value);
	abstract protected void onAnsTBValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansESBCValueSet(Object value);
	abstract protected void onAnsESBCValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansVREValueSet(Object value);
	abstract protected void onAnsVREValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansClostridiumValueSet(Object value);
	abstract protected void onAnsClostridiumValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkRepeatableAssessmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansMRSAValueSet(Object value);
	abstract protected void onAnsMRSAValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkInfoClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.ansInfectionControlReq().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansInfectionControlReqValueSet(value);
			}
		});
		this.form.ansNorovirus().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansNorovirusValueSet(value);
			}
		});
		this.form.ansNorovirus().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onAnsNorovirusValueChanged();
			}
		});
		this.form.ansTB().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansTBValueSet(value);
			}
		});
		this.form.ansTB().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onAnsTBValueChanged();
			}
		});
		this.form.ansESBC().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansESBCValueSet(value);
			}
		});
		this.form.ansESBC().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onAnsESBCValueChanged();
			}
		});
		this.form.ansVRE().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansVREValueSet(value);
			}
		});
		this.form.ansVRE().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onAnsVREValueChanged();
			}
		});
		this.form.ansClostridium().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansClostridiumValueSet(value);
			}
		});
		this.form.ansClostridium().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onAnsClostridiumValueChanged();
			}
		});
		this.form.lnkRepeatableAssessment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkRepeatableAssessmentClick();
			}
		});
		this.form.ansMRSA().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansMRSAValueSet(value);
			}
		});
		this.form.ansMRSA().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onAnsMRSAValueChanged();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.chkCopyPrevAssessment().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCopyPrevAssessmentValueChanged();
			}
		});
		this.form.lnkInfo().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkInfoClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindansInfectionControlReqLookup();
		bindansNorovirusLookup();
		bindansTBLookup();
		bindansESBCLookup();
		bindansVRELookup();
		bindansClostridiumLookup();
		bindansMRSALookup();
	}
	protected void rebindAllLookups()
	{
		bindansInfectionControlReqLookup();
		bindansNorovirusLookup();
		bindansTBLookup();
		bindansESBCLookup();
		bindansVRELookup();
		bindansClostridiumLookup();
		bindansMRSALookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultansInfectionControlReqLookupValue();
		defaultansNorovirusLookupValue();
		defaultansTBLookupValue();
		defaultansESBCLookupValue();
		defaultansVRELookupValue();
		defaultansClostridiumLookupValue();
		defaultansMRSALookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
