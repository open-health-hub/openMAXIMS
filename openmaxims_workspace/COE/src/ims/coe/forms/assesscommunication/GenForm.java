//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.forms.assesscommunication;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class container1Container extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class comboBoxEarsComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.LateralityLRB getValue()
			{
				return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.LateralityLRB value)
			{
				super.control.setValue(value);
			}
		}
		public static class comboBoxEyesComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.LateralityLRB getValue()
			{
				return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.LateralityLRB value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSpokenLangComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.Language value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.Language value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.Language getValue()
			{
				return (ims.core.vo.lookups.Language)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.Language value)
			{
				super.control.setValue(value);
			}
		}
		public static class gridCarePlanRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected gridCarePlanRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolCarePlansReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolCarePlansReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolCarePlansOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolCarePlans()
			{
				return (String)super.row.get(0);
			}
			public void setcolCarePlans(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolCarePlansTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectedReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectedReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectedOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelected()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelected(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectedTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.nursing.vo.CarePlanTemplateTitle getValue()
			{
				return (ims.nursing.vo.CarePlanTemplateTitle)super.row.getValue();
			}
			public void setValue(ims.nursing.vo.CarePlanTemplateTitle value)
			{
				super.row.setValue(value);
			}
		}
		public static class gridCarePlanRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private gridCarePlanRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public gridCarePlanRow get(int index)
			{
				return new gridCarePlanRow(super.collection.get(index));
			}
			public gridCarePlanRow newRow()
			{
				return new gridCarePlanRow(super.collection.newRow());
			}
			public gridCarePlanRow newRow(boolean autoSelect)
			{
				return new gridCarePlanRow(super.collection.newRow(autoSelect));
			}
			public gridCarePlanRow newRowAt(int index)
			{
				return new gridCarePlanRow(super.collection.newRowAt(index));
			}
			public gridCarePlanRow newRowAt(int index, boolean autoSelect)
			{
				return new gridCarePlanRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class gridCarePlanGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.nursing.vo.CarePlanTemplateTitle[] getValues()
			{
				ims.nursing.vo.CarePlanTemplateTitle[] listOfValues = new ims.nursing.vo.CarePlanTemplateTitle[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.nursing.vo.CarePlanTemplateTitle getValue()
			{
				return (ims.nursing.vo.CarePlanTemplateTitle)super.grid.getValue();
			}
			public void setValue(ims.nursing.vo.CarePlanTemplateTitle value)
			{
				super.grid.setValue(value);
			}
			public gridCarePlanRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new gridCarePlanRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public gridCarePlanRowCollection getRows()
			{
				return new gridCarePlanRowCollection(super.grid.getRows());
			}
			public gridCarePlanRow getRowByValue(ims.nursing.vo.CarePlanTemplateTitle value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new gridCarePlanRow(row);
			}
			public void setcolCarePlansHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolCarePlansHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class gridVerballyRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected gridVerballyRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolVerballyReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolVerballyReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolVerballyOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolVerbally()
			{
				return (String)super.row.get(0);
			}
			public void setcolVerbally(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolVerballyTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectedReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectedReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectedOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelected()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelected(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectedTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.coe.vo.lookups.Verbally getValue()
			{
				return (ims.coe.vo.lookups.Verbally)super.row.getValue();
			}
			public void setValue(ims.coe.vo.lookups.Verbally value)
			{
				super.row.setValue(value);
			}
		}
		public static class gridVerballyRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private gridVerballyRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public gridVerballyRow get(int index)
			{
				return new gridVerballyRow(super.collection.get(index));
			}
			public gridVerballyRow newRow()
			{
				return new gridVerballyRow(super.collection.newRow());
			}
			public gridVerballyRow newRow(boolean autoSelect)
			{
				return new gridVerballyRow(super.collection.newRow(autoSelect));
			}
			public gridVerballyRow newRowAt(int index)
			{
				return new gridVerballyRow(super.collection.newRowAt(index));
			}
			public gridVerballyRow newRowAt(int index, boolean autoSelect)
			{
				return new gridVerballyRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class gridVerballyGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.coe.vo.lookups.Verbally[] getValues()
			{
				ims.coe.vo.lookups.Verbally[] listOfValues = new ims.coe.vo.lookups.Verbally[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.coe.vo.lookups.Verbally getValue()
			{
				return (ims.coe.vo.lookups.Verbally)super.grid.getValue();
			}
			public void setValue(ims.coe.vo.lookups.Verbally value)
			{
				super.grid.setValue(value);
			}
			public gridVerballyRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new gridVerballyRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public gridVerballyRowCollection getRows()
			{
				return new gridVerballyRowCollection(super.grid.getRows());
			}
			public gridVerballyRow getRowByValue(ims.coe.vo.lookups.Verbally value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new gridVerballyRow(row);
			}
			public void setcolVerballyHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolVerballyHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class gridCommunicatesRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected gridCommunicatesRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolCommunicatesReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolCommunicatesReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolCommunicatesOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolCommunicates()
			{
				return (String)super.row.get(0);
			}
			public void setcolCommunicates(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolCommunicatesTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectedReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectedReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectedOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelected()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelected(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectedTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.coe.vo.lookups.Communicates getValue()
			{
				return (ims.coe.vo.lookups.Communicates)super.row.getValue();
			}
			public void setValue(ims.coe.vo.lookups.Communicates value)
			{
				super.row.setValue(value);
			}
		}
		public static class gridCommunicatesRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private gridCommunicatesRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public gridCommunicatesRow get(int index)
			{
				return new gridCommunicatesRow(super.collection.get(index));
			}
			public gridCommunicatesRow newRow()
			{
				return new gridCommunicatesRow(super.collection.newRow());
			}
			public gridCommunicatesRow newRow(boolean autoSelect)
			{
				return new gridCommunicatesRow(super.collection.newRow(autoSelect));
			}
			public gridCommunicatesRow newRowAt(int index)
			{
				return new gridCommunicatesRow(super.collection.newRowAt(index));
			}
			public gridCommunicatesRow newRowAt(int index, boolean autoSelect)
			{
				return new gridCommunicatesRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class gridCommunicatesGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.coe.vo.lookups.Communicates[] getValues()
			{
				ims.coe.vo.lookups.Communicates[] listOfValues = new ims.coe.vo.lookups.Communicates[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.coe.vo.lookups.Communicates getValue()
			{
				return (ims.coe.vo.lookups.Communicates)super.grid.getValue();
			}
			public void setValue(ims.coe.vo.lookups.Communicates value)
			{
				super.grid.setValue(value);
			}
			public gridCommunicatesRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new gridCommunicatesRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public gridCommunicatesRowCollection getRows()
			{
				return new gridCommunicatesRowCollection(super.grid.getRows());
			}
			public gridCommunicatesRow getRowByValue(ims.coe.vo.lookups.Communicates value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new gridCommunicatesRow(row);
			}
			public void setcolCommunicatesHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolCommunicatesHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class gridCoherentRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected gridCoherentRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolQuestReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolQuestReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolQuestOpened()
			{
				super.row.showOpened(0);
			}
			public ims.coe.vo.lookups.SpeechAndLanguageUnderstanding getcolQuest()
			{
				return (ims.coe.vo.lookups.SpeechAndLanguageUnderstanding)super.row.get(0);
			}
			public void setcolQuest(ims.coe.vo.lookups.SpeechAndLanguageUnderstanding value)
			{
				super.row.set(0, value);
			}
			public void setCellcolQuestTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolStatusReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolStatusOpened()
			{
				super.row.showOpened(1);
			}
			public ims.core.vo.lookups.YesNoUnknown getcolStatus()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.row.get(1);
			}
			public void setcolStatus(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.row.set(1, value, true);
			}
			public void setCellcolStatusTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.coe.vo.CommunicationUnderstanding getValue()
			{
				return (ims.coe.vo.CommunicationUnderstanding)super.row.getValue();
			}
			public void setValue(ims.coe.vo.CommunicationUnderstanding value)
			{
				super.row.setValue(value);
			}
		}
		public static class gridCoherentRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private gridCoherentRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public gridCoherentRow get(int index)
			{
				return new gridCoherentRow(super.collection.get(index));
			}
			public gridCoherentRow newRow()
			{
				return new gridCoherentRow(super.collection.newRow());
			}
			public gridCoherentRow newRow(boolean autoSelect)
			{
				return new gridCoherentRow(super.collection.newRow(autoSelect));
			}
			public gridCoherentRow newRowAt(int index)
			{
				return new gridCoherentRow(super.collection.newRowAt(index));
			}
			public gridCoherentRow newRowAt(int index, boolean autoSelect)
			{
				return new gridCoherentRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class gridCoherentGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
			{
				super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
			}
			public void answerBoxColumnClear(int column)
			{
				super.grid.answerBoxColumnClear(column);
			}
			public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
			{
				super.grid.answerBoxColumnNewOption(column, option);
			}
			public ims.coe.vo.CommunicationUnderstanding[] getValues()
			{
				ims.coe.vo.CommunicationUnderstanding[] listOfValues = new ims.coe.vo.CommunicationUnderstanding[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.coe.vo.CommunicationUnderstanding getValue()
			{
				return (ims.coe.vo.CommunicationUnderstanding)super.grid.getValue();
			}
			public void setValue(ims.coe.vo.CommunicationUnderstanding value)
			{
				super.grid.setValue(value);
			}
			public gridCoherentRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new gridCoherentRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public gridCoherentRowCollection getRows()
			{
				return new gridCoherentRowCollection(super.grid.getRows());
			}
			public gridCoherentRow getRowByValue(ims.coe.vo.CommunicationUnderstanding value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new gridCoherentRow(row);
			}
			public void setcolQuestHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolQuestHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridMutableAnswerBox colStatusAnswerBox()
			{
				return null;//return new GridMutableAnswerBox(super.grid, 1);
			}
		}
	
		public static class ansCommDifficultyAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansHearingImpAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansHearingAidAdmissionAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansHearingAidAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansBatteriesAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansVisImpairAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansGlassesAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansWearLensesAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansRegBlindAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansSLDifficultyAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 568, 793, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Hearing", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 416, 793, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Vision", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 793, 376, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Speech and Language", new Integer(2), ""}));
	
			// Label Controls
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 673, 812, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Section Complete?", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 432, 608, 302, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient have hearing aid with them on admission?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 432, 656, 124, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Year of last hearing test", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 432, 632, 135, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Are the batteries in order?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 32, 648, 189, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient wear a hearing aid?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 32, 600, 230, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient have a hearing impairment?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 32, 624, 100, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Which ear / ears?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 32, 520, 192, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Number of pairs brought into hospital", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 432, 520, 158, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is the patient registered blind?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 432, 448, 155, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient wear lenses?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 32, 496, 160, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient wear glasses?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 32, 472, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Which eye / eyes?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 432, 496, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Year of last eye test ", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 432, 472, 169, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other (eg magnifying glass, etc.)", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 32, 448, 221, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient have a visual impairment?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 32, 64, 288, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient have any speech or language difficulty?", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 432, 64, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Spoken Language:", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 32, 8, 257, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient have difficulty in communicating?", new Integer(0), null, new Integer(0)}));
	
			// Button Controls
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 734, 832, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 656, 832, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 616, 472, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 264, 624, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_comboBoxEarsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_comboBoxEarsTemp);
			comboBoxEarsComboBox comboBoxEars = (comboBoxEarsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(comboBoxEarsComboBox.class, m_comboBoxEarsTemp);
			super.addComboBox(comboBoxEars);
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 264, 472, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_comboBoxEyesTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_comboBoxEyesTemp);
			comboBoxEyesComboBox comboBoxEyes = (comboBoxEyesComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(comboBoxEyesComboBox.class, m_comboBoxEyesTemp);
			super.addComboBox(comboBoxEyes);
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 544, 64, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbSpokenLangTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSpokenLangTemp);
			cmbSpokenLangComboBox cmbSpokenLang = (cmbSpokenLangComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpokenLangComboBox.class, m_cmbSpokenLangTemp);
			super.addComboBox(cmbSpokenLang);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 785, 812, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 704, 793, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_gridCarePlanTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_gridCarePlanTemp);
			gridCarePlanGrid gridCarePlan = (gridCarePlanGrid)GridFlyweightFactory.getInstance().createGridBridge(gridCarePlanGrid.class, m_gridCarePlanTemp);
			gridCarePlan.addStringColumn("Care Plans", 0, 0, 660, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridCarePlan.addBoolColumn("Selected", 1, 1, -1, false, false, 0, true);
			super.addGrid(gridCarePlan);
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 433, 92, 345, 165, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_gridVerballyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_gridVerballyTemp);
			gridVerballyGrid gridVerbally = (gridVerballyGrid)GridFlyweightFactory.getInstance().createGridBridge(gridVerballyGrid.class, m_gridVerballyTemp);
			gridVerbally.addStringColumn("If Verbally", 0, 0, 255, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridVerbally.addBoolColumn("Selected", 0, 1, -1, false, false, 0, true);
			super.addGrid(gridVerbally);
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 32, 92, 365, 165, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_gridCommunicatesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_gridCommunicatesTemp);
			gridCommunicatesGrid gridCommunicates = (gridCommunicatesGrid)GridFlyweightFactory.getInstance().createGridBridge(gridCommunicatesGrid.class, m_gridCommunicatesTemp);
			gridCommunicates.addStringColumn("Communicates", 0, 0, 255, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridCommunicates.addBoolColumn("Selected", 1, 1, -1, false, false, 0, true);
			super.addGrid(gridCommunicates);
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 32, 272, 365, 123, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_gridCoherentTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_gridCoherentTemp);
			gridCoherentGrid gridCoherent = (gridCoherentGrid)GridFlyweightFactory.getInstance().createGridBridge(gridCoherentGrid.class, m_gridCoherentTemp);
			gridCoherent.addStringColumn(" Is the patients communication", 0, 0, 255, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			gridCoherent.addAnswerBoxColumn("Status", 1, 1, -1, false, false, 10, true, true);
			super.addGrid(gridCoherent);
	
			// IntBox Controls
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 616, 656, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 616, 496, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 264, 520, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
	
			// AnswerBox Controls
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 288, 8, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansCommDifficulty = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansCommDifficulty);
			ansCommDifficultyAnswerBox ansCommDifficulty = (ansCommDifficultyAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansCommDifficultyAnswerBox.class, tmpansCommDifficulty);
			super.addAnswerBox(ansCommDifficulty);
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 264, 600, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansHearingImp = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansHearingImp);
			ansHearingImpAnswerBox ansHearingImp = (ansHearingImpAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansHearingImpAnswerBox.class, tmpansHearingImp);
			super.addAnswerBox(ansHearingImp);
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 736, 608, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansHearingAidAdmission = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansHearingAidAdmission);
			ansHearingAidAdmissionAnswerBox ansHearingAidAdmission = (ansHearingAidAdmissionAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansHearingAidAdmissionAnswerBox.class, tmpansHearingAidAdmission);
			super.addAnswerBox(ansHearingAidAdmission);
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 264, 648, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansHearingAid = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansHearingAid);
			ansHearingAidAnswerBox ansHearingAid = (ansHearingAidAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansHearingAidAnswerBox.class, tmpansHearingAid);
			super.addAnswerBox(ansHearingAid);
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 616, 632, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansBatteries = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansBatteries);
			ansBatteriesAnswerBox ansBatteries = (ansBatteriesAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansBatteriesAnswerBox.class, tmpansBatteries);
			super.addAnswerBox(ansBatteries);
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 264, 448, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansVisImpair = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansVisImpair);
			ansVisImpairAnswerBox ansVisImpair = (ansVisImpairAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansVisImpairAnswerBox.class, tmpansVisImpair);
			super.addAnswerBox(ansVisImpair);
			RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 264, 496, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansGlasses = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansGlasses);
			ansGlassesAnswerBox ansGlasses = (ansGlassesAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansGlassesAnswerBox.class, tmpansGlasses);
			super.addAnswerBox(ansGlasses);
			RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 616, 448, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansWearLenses = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansWearLenses);
			ansWearLensesAnswerBox ansWearLenses = (ansWearLensesAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansWearLensesAnswerBox.class, tmpansWearLenses);
			super.addAnswerBox(ansWearLenses);
			RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 616, 520, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansRegBlind = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansRegBlind);
			ansRegBlindAnswerBox ansRegBlind = (ansRegBlindAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansRegBlindAnswerBox.class, tmpansRegBlind);
			super.addAnswerBox(ansRegBlind);
			RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 320, 64, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansSLDifficulty = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansSLDifficulty);
			ansSLDifficultyAnswerBox ansSLDifficulty = (ansSLDifficultyAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansSLDifficultyAnswerBox.class, tmpansSLDifficulty);
			super.addAnswerBox(ansSLDifficulty);
		}
		public Button bCancel()
		{
			return (Button)super.getControl(21);
		}
		public Button bSave()
		{
			return (Button)super.getControl(22);
		}
		public TextBox txtOther()
		{
			return (TextBox)super.getControl(23);
		}
		public comboBoxEarsComboBox comboBoxEars()
		{
			return (comboBoxEarsComboBox)super.getComboBox(0);
		}
		public comboBoxEyesComboBox comboBoxEyes()
		{
			return (comboBoxEyesComboBox)super.getComboBox(1);
		}
		public cmbSpokenLangComboBox cmbSpokenLang()
		{
			return (cmbSpokenLangComboBox)super.getComboBox(2);
		}
		public CheckBox chkComplete()
		{
			return (CheckBox)super.getControl(27);
		}
		public gridCarePlanGrid gridCarePlan()
		{
			return (gridCarePlanGrid)super.getGrid(0);
		}
		public gridVerballyGrid gridVerbally()
		{
			return (gridVerballyGrid)super.getGrid(1);
		}
		public gridCommunicatesGrid gridCommunicates()
		{
			return (gridCommunicatesGrid)super.getGrid(2);
		}
		public gridCoherentGrid gridCoherent()
		{
			return (gridCoherentGrid)super.getGrid(3);
		}
		public IntBox intYearLastHearTest()
		{
			return (IntBox)super.getControl(32);
		}
		public IntBox intYearLastEyeTest()
		{
			return (IntBox)super.getControl(33);
		}
		public IntBox intNoGlasses()
		{
			return (IntBox)super.getControl(34);
		}
		public ansCommDifficultyAnswerBox ansCommDifficulty()
		{
			return (ansCommDifficultyAnswerBox)super.getAnswerBox(0);
		}
		public ansHearingImpAnswerBox ansHearingImp()
		{
			return (ansHearingImpAnswerBox)super.getAnswerBox(1);
		}
		public ansHearingAidAdmissionAnswerBox ansHearingAidAdmission()
		{
			return (ansHearingAidAdmissionAnswerBox)super.getAnswerBox(2);
		}
		public ansHearingAidAnswerBox ansHearingAid()
		{
			return (ansHearingAidAnswerBox)super.getAnswerBox(3);
		}
		public ansBatteriesAnswerBox ansBatteries()
		{
			return (ansBatteriesAnswerBox)super.getAnswerBox(4);
		}
		public ansVisImpairAnswerBox ansVisImpair()
		{
			return (ansVisImpairAnswerBox)super.getAnswerBox(5);
		}
		public ansGlassesAnswerBox ansGlasses()
		{
			return (ansGlassesAnswerBox)super.getAnswerBox(6);
		}
		public ansWearLensesAnswerBox ansWearLenses()
		{
			return (ansWearLensesAnswerBox)super.getAnswerBox(7);
		}
		public ansRegBlindAnswerBox ansRegBlind()
		{
			return (ansRegBlindAnswerBox)super.getAnswerBox(8);
		}
		public ansSLDifficultyAnswerBox ansSLDifficulty()
		{
			return (ansSLDifficultyAnswerBox)super.getAnswerBox(9);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Container Clasess
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_container1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_container1);
		container1Container container1 = (container1Container)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(container1Container.class, m_container1, factory);
		ims.framework.utils.SizeInfo m_container1DesignSize = new ims.framework.utils.SizeInfo(832, 584);
		ims.framework.utils.SizeInfo m_container1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper46.getWidth(), anchoringHelper46.getHeight());
		container1.setContext(form, appForm, m_container1, loader, this.getImages(), startControlID, m_container1DesignSize, m_container1RuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(container1);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 40, 8, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Copy Previous Assessment", Boolean.TRUE, null}));

		// Link Controls
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 792, 8, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Info", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public container1Container container1()
	{
		return (container1Container)super.getContainer(0);
	}
	public CheckBox chkCopyPrev()
	{
		return (CheckBox)super.getControl(1);
	}
	public Link infoLink()
	{
		return (Link)super.getControl(2);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Nursing = new NursingForms();
		}
		public final class NursingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingForms()
			{
				AdmissionAssessOverview = new LocalFormName(101100);
				AssessmentInfo = new LocalFormName(101117);
				CarePlanStep2 = new LocalFormName(101129);
			}
			public final FormName AdmissionAssessOverview;
			public final FormName AssessmentInfo;
			public final FormName CarePlanStep2;
		}

		public NursingForms Nursing;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				AnswerBox_NotAvailable = new ImageHelper(102103, "Images/Core/AnswerBox_NotAvailable.gif", new Integer(10), new Integer(10));
				AnswerBox_Unknown = new ImageHelper(102102, "Images/Core/AnswerBox_Unknown.gif", new Integer(10), new Integer(10));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
				AnswerBox_Clear = new ImageHelper(102104, "Images/Core/AnswerBox_Clear.jpg", new Integer(10), new Integer(10));
			}
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image AnswerBox_NotAvailable;
			public final ims.framework.utils.Image AnswerBox_Unknown;
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image AnswerBox_Clear;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_communication = new ims.framework.ContextVariable("communication", prefix + "_lv_COE.AssessCommunication.__internal_x_context__communication_" + componentIdentifier + "");
			cxl_verballyColl = new ims.framework.ContextVariable("verballyColl", prefix + "_lv_COE.AssessCommunication.__internal_x_context__verballyColl_" + componentIdentifier + "");
			cxl_speechColl = new ims.framework.ContextVariable("speechColl", prefix + "_lv_COE.AssessCommunication.__internal_x_context__speechColl_" + componentIdentifier + "");
			cxl_yesNoColl = new ims.framework.ContextVariable("yesNoColl", prefix + "_lv_COE.AssessCommunication.__internal_x_context__yesNoColl_" + componentIdentifier + "");
			cxl_assmnt = new ims.framework.ContextVariable("assmnt", prefix + "_lv_COE.AssessCommunication.__internal_x_context__assmnt_" + componentIdentifier + "");
			cxl_PrevAssessCommunication = new ims.framework.ContextVariable("PrevAssessCommunication", prefix + "_lv_COE.AssessCommunication.__internal_x_context__PrevAssessCommunication_" + componentIdentifier + "");
		}
		
		public boolean getcommunicationIsNotNull()
		{
			return !cxl_communication.getValueIsNull(context);
		}
		public ims.coe.vo.AssessmentCommunication getcommunication()
		{
			return (ims.coe.vo.AssessmentCommunication)cxl_communication.getValue(context);
		}
		public void setcommunication(ims.coe.vo.AssessmentCommunication value)
		{
			cxl_communication.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_communication = null;
		public boolean getverballyCollIsNotNull()
		{
			return !cxl_verballyColl.getValueIsNull(context);
		}
		public ims.coe.vo.lookups.VerballyCollection getverballyColl()
		{
			return (ims.coe.vo.lookups.VerballyCollection)cxl_verballyColl.getValue(context);
		}
		public void setverballyColl(ims.coe.vo.lookups.VerballyCollection value)
		{
			cxl_verballyColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_verballyColl = null;
		public boolean getspeechCollIsNotNull()
		{
			return !cxl_speechColl.getValueIsNull(context);
		}
		public ims.coe.vo.lookups.SpeechAndLanguageUnderstandingCollection getspeechColl()
		{
			return (ims.coe.vo.lookups.SpeechAndLanguageUnderstandingCollection)cxl_speechColl.getValue(context);
		}
		public void setspeechColl(ims.coe.vo.lookups.SpeechAndLanguageUnderstandingCollection value)
		{
			cxl_speechColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_speechColl = null;
		public boolean getyesNoCollIsNotNull()
		{
			return !cxl_yesNoColl.getValueIsNull(context);
		}
		public ims.core.vo.lookups.YesNoUnknownCollection getyesNoColl()
		{
			return (ims.core.vo.lookups.YesNoUnknownCollection)cxl_yesNoColl.getValue(context);
		}
		public void setyesNoColl(ims.core.vo.lookups.YesNoUnknownCollection value)
		{
			cxl_yesNoColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_yesNoColl = null;
		public boolean getassmntIsNotNull()
		{
			return !cxl_assmnt.getValueIsNull(context);
		}
		public ims.nursing.vo.AssessmentHeaderInfo getassmnt()
		{
			return (ims.nursing.vo.AssessmentHeaderInfo)cxl_assmnt.getValue(context);
		}
		public void setassmnt(ims.nursing.vo.AssessmentHeaderInfo value)
		{
			cxl_assmnt.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_assmnt = null;
		public boolean getPrevAssessCommunicationIsNotNull()
		{
			return !cxl_PrevAssessCommunication.getValueIsNull(context);
		}
		public ims.coe.vo.AssessmentCommunication getPrevAssessCommunication()
		{
			return (ims.coe.vo.AssessmentCommunication)cxl_PrevAssessCommunication.getValue(context);
		}
		public void setPrevAssessCommunication(ims.coe.vo.AssessmentCommunication value)
		{
			cxl_PrevAssessCommunication.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrevAssessCommunication = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[78];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-ID", "ID_Assessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTTYPE", "AssessmentType");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTSTATUS", "AssessmentStatus");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-DATETIMECOMPLETE", "DateTimeComplete");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
