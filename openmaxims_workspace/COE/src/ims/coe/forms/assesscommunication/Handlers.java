//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.forms.assesscommunication;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindansCommDifficultyLookup();
	abstract protected void defaultansCommDifficultyLookupValue();
	abstract protected void bindansHearingImpLookup();
	abstract protected void defaultansHearingImpLookupValue();
	abstract protected void bindcomboBoxEarsLookup();
	abstract protected void defaultcomboBoxEarsLookupValue();
	abstract protected void bindansHearingAidAdmissionLookup();
	abstract protected void defaultansHearingAidAdmissionLookupValue();
	abstract protected void bindansHearingAidLookup();
	abstract protected void defaultansHearingAidLookupValue();
	abstract protected void bindansBatteriesLookup();
	abstract protected void defaultansBatteriesLookupValue();
	abstract protected void bindcomboBoxEyesLookup();
	abstract protected void defaultcomboBoxEyesLookupValue();
	abstract protected void bindansVisImpairLookup();
	abstract protected void defaultansVisImpairLookupValue();
	abstract protected void bindansGlassesLookup();
	abstract protected void defaultansGlassesLookupValue();
	abstract protected void bindansWearLensesLookup();
	abstract protected void defaultansWearLensesLookupValue();
	abstract protected void bindansRegBlindLookup();
	abstract protected void defaultansRegBlindLookupValue();
	abstract protected void bindcmbSpokenLangLookup();
	abstract protected void defaultcmbSpokenLangLookupValue();
	abstract protected void bindgridCoherentcolStatusLookup();
	abstract protected void bindansSLDifficultyLookup();
	abstract protected void defaultansSLDifficultyLookupValue();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansCommDifficultyValueSet(Object value);
	abstract protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansHearingImpValueSet(Object value);
	abstract protected void onAnsHearingImpValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncomboBoxEarsValueSet(Object value);
	abstract protected void onansHearingAidAdmissionValueSet(Object value);
	abstract protected void onansHearingAidValueSet(Object value);
	abstract protected void onansBatteriesValueSet(Object value);
	abstract protected void oncomboBoxEyesValueSet(Object value);
	abstract protected void onansVisImpairValueSet(Object value);
	abstract protected void onAnsVisImpairValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onansGlassesValueSet(Object value);
	abstract protected void onansWearLensesValueSet(Object value);
	abstract protected void onansRegBlindValueSet(Object value);
	abstract protected void oncmbSpokenLangValueSet(Object value);
	abstract protected void onansSLDifficultyValueSet(Object value);
	abstract protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.container1().ansCommDifficulty().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansCommDifficultyValueSet(value);
			}
		});
		this.form.container1().bCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBCancelClick();
			}
		});
		this.form.container1().bSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBSaveClick();
			}
		});
		this.form.container1().ansHearingImp().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansHearingImpValueSet(value);
			}
		});
		this.form.container1().ansHearingImp().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onAnsHearingImpValueChanged();
			}
		});
		this.form.container1().comboBoxEars().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxEarsValueSet(value);
			}
		});
		this.form.container1().ansHearingAidAdmission().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansHearingAidAdmissionValueSet(value);
			}
		});
		this.form.container1().ansHearingAid().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansHearingAidValueSet(value);
			}
		});
		this.form.container1().ansBatteries().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansBatteriesValueSet(value);
			}
		});
		this.form.container1().comboBoxEyes().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncomboBoxEyesValueSet(value);
			}
		});
		this.form.container1().ansVisImpair().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansVisImpairValueSet(value);
			}
		});
		this.form.container1().ansVisImpair().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onAnsVisImpairValueChanged();
			}
		});
		this.form.container1().ansGlasses().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansGlassesValueSet(value);
			}
		});
		this.form.container1().ansWearLenses().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansWearLensesValueSet(value);
			}
		});
		this.form.container1().ansRegBlind().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansRegBlindValueSet(value);
			}
		});
		this.form.container1().cmbSpokenLang().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpokenLangValueSet(value);
			}
		});
		this.form.container1().ansSLDifficulty().setValueSetEvent(new AnswerBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				onansSLDifficultyValueSet(value);
			}
		});
		this.form.chkCopyPrev().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCopyPrevAssessmentValueChanged();
			}
		});
		this.form.infoLink().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onInfoLinkClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindansCommDifficultyLookup();
		bindansHearingImpLookup();
		bindcomboBoxEarsLookup();
		bindansHearingAidAdmissionLookup();
		bindansHearingAidLookup();
		bindansBatteriesLookup();
		bindcomboBoxEyesLookup();
		bindansVisImpairLookup();
		bindansGlassesLookup();
		bindansWearLensesLookup();
		bindansRegBlindLookup();
		bindcmbSpokenLangLookup();
		bindgridCoherentcolStatusLookup();
		bindansSLDifficultyLookup();
	}
	protected void rebindAllLookups()
	{
		bindansCommDifficultyLookup();
		bindansHearingImpLookup();
		bindcomboBoxEarsLookup();
		bindansHearingAidAdmissionLookup();
		bindansHearingAidLookup();
		bindansBatteriesLookup();
		bindcomboBoxEyesLookup();
		bindansVisImpairLookup();
		bindansGlassesLookup();
		bindansWearLensesLookup();
		bindansRegBlindLookup();
		bindcmbSpokenLangLookup();
		bindgridCoherentcolStatusLookup();
		bindansSLDifficultyLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultansCommDifficultyLookupValue();
		defaultansHearingImpLookupValue();
		defaultcomboBoxEarsLookupValue();
		defaultansHearingAidAdmissionLookupValue();
		defaultansHearingAidLookupValue();
		defaultansBatteriesLookupValue();
		defaultcomboBoxEyesLookupValue();
		defaultansVisImpairLookupValue();
		defaultansGlassesLookupValue();
		defaultansWearLensesLookupValue();
		defaultansRegBlindLookupValue();
		defaultcmbSpokenLangLookupValue();
		defaultansSLDifficultyLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
