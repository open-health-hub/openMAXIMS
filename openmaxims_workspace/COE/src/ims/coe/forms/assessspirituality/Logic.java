//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40616.1545)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assessspirituality;

import ims.coe.vo.AssessmentSpirituality;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	private void open()
	{
		form.setMode(FormMode.EDIT);
		form.bSave().setEnabled(true);
		form.gridCarePlan().setReadOnly(false);
		form.getLocalContext().setYesNoColl(ims.core.vo.lookups.LookupHelper.getYesNoUnknown(domain.getLookupService()));
		form.checkBoxCopy().setEnabled(false);
		
		// If there is an assessment in the global context, we want to call the get component domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo voAssmntHeader = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssmnt(voAssmntHeader);
		
		if (voAssmntHeader != null  && voAssmntHeader.getID_AssessmentIsNotNull())
		{		
			//AssessmentSpirituality assessSP = (AssessmentSpirituality)domain.getComponent(assmnt.getCurrentComponent(), AssessmentComponentType.SPIRITUALITY);
			AssessmentSpirituality voAssessSP = (AssessmentSpirituality)domain.getComponent(voAssmntHeader,AssessmentComponentType.SPIRITUALITY);
			form.getLocalContext().setAssessSpirituality(voAssessSP);
			populateInstanceControl(voAssessSP);			
		}
		else
		{
			if (form.getGlobalContext().Core.getPatientShort().getReligion() != null)
				form.textBoxReligion().setValue(form.getGlobalContext().Core.getPatientShort().getReligion().getText());
			
			// check if there is a relevant component
			getLastAssessmentComponent();
		}
		
		beliefOrFaith();
	}
	private void initialize() 
	{
		prePopulateCarePlanGrd();
	}
	private void prePopulateCarePlanGrd() 
	{
		//Populate the Grid CarePlan Templates
		CarePlanTemplateTitleCollection votempColl = domain.listCarePlanTemplates(AssessmentComponentType.SPIRITUALITY);
		if (votempColl != null)
		{
			form.gridCarePlan().getRows().clear();
			GenForm.gridCarePlanRow tempRow;
			for (int i=0; i<votempColl.size(); i++)
			{
				CarePlanTemplateTitle votemplate = votempColl.get(i);
				tempRow = form.gridCarePlan().getRows().newRow();
				tempRow.setValue(votemplate);
				tempRow.setcolCarePlans(votemplate.getTitle());
			}
		}
	}
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AssessmentSpirituality voAssessSP = populateInstanceData();					

		try
		{			
			String[] messages = voAssessSP.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			
			AssessmentHeaderInfo voNewAssmnt = form.getLocalContext().getAssmnt();
			
			if (voNewAssmnt.getCareContext() == null)
				voNewAssmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (voNewAssmnt.getClinicalContact() == null)
				voNewAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
			voNewAssmnt = domain.saveComponent(voNewAssmnt, voAssessSP);
		    form.getGlobalContext().Nursing.setAssessmentHeaderInfo(voNewAssmnt);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
		
			open();
			return;
		} catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Spirituality Assessment record already exists. " + e.getMessage());
			open();
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			open();
			return;
		}
		
		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.gridCarePlan().getReadOnly() == false)
		{
			CarePlanTemplateTitleCollection votemplList = new CarePlanTemplateTitleCollection();
			GenForm.gridCarePlanRow cpRow;
			for (int i=0; i<form.gridCarePlan().getRows().size(); i++)
			{
				cpRow = form.gridCarePlan().getRows().get(i);
				if (cpRow.getcolSelected() && !cpRow.isReadOnly())
					votemplList.add(cpRow.getValue());
			}
			if (votemplList.size() > 0)
			{
				form.getGlobalContext().COE.CarePlan.setTemplateList(votemplList);
				engine.open(form.getForms().Nursing.CarePlanStep2);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	private AssessmentSpirituality populateInstanceData() 
	{
		AssessmentSpirituality voAssessSP = form.getLocalContext().getAssessSpirituality();
		if (voAssessSP == null)
		{
			voAssessSP = new AssessmentSpirituality();
			voAssessSP.setComponentType(AssessmentComponentType.SPIRITUALITY);
		}
		voAssessSP.setIsComplete(new Boolean(this.form.checkBoxComplete().getValue()));
		voAssessSP.setCopy(new Boolean(this.form.checkBoxCopy().getValue()));
		voAssessSP.setAddress(form.textBoxAddress().getValue());
		voAssessSP.setName(form.textBoxName().getValue());
		voAssessSP.setReligion(form.textBoxReligion().getValue());
		voAssessSP.setRequirements(form.textBoxRequirements().getValue());
		voAssessSP.setTelephoneNumber(form.txtBoxTelephone().getValue());
		
		// Save the answerbox values
		voAssessSP.setBeliefOrFaith(form.answerBoxBeliefOrFaith().getValue());
		voAssessSP.setContinuePracticing(form.answerBoxContinuePracticing().getValue());
		voAssessSP.setPracticingMember(form.answerBoxPracticingMember().getValue());
		return voAssessSP;
	}
	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssessSpirituality() != null && form.getLocalContext().getAssessSpirituality().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessSpirituality().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}
	
	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{				
		if (form.getLocalContext().getPrevAssessSpirituality() == null)
			return;
		
		form.getLocalContext().getPrevAssessSpirituality().setIsComplete(new Boolean(false));
		form.getLocalContext().getPrevAssessSpirituality().setCarePlanTemplate(null);
		
		populateInstanceControl(form.getLocalContext().getPrevAssessSpirituality());
		form.checkBoxCopy().setValue(true);
		form.checkBoxCopy().setEnabled(false);
	}
	
	protected void getLastAssessmentComponent()
	{
		AssessmentSpirituality voAssessSP = (AssessmentSpirituality)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(),AssessmentComponentType.SPIRITUALITY);
		if (voAssessSP == null)
		{
			this.form.checkBoxCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessSpirituality(voAssessSP);
		form.checkBoxCopy().setEnabled(true);
	}
	
	private void populateInstanceControl(AssessmentSpirituality voAssessSP)
	{
		if (voAssessSP == null)
			return;
			
		form.checkBoxComplete().setValue(voAssessSP.getIsComplete().booleanValue());
		if (voAssessSP.getIsComplete().booleanValue() == true) // Complete
		{
			form.bSave().setEnabled(false);
			form.setMode(FormMode.VIEW);
			form.checkBoxComplete().setEnabled(false);
			form.gridCarePlan().setReadOnly(true);
			form.checkBoxCopy().setEnabled(false);
		}
		form.checkBoxCopy().setValue(voAssessSP.getCopy().booleanValue());
		if (voAssessSP.getCopy().booleanValue()== true)
			form.checkBoxCopy().setEnabled(false);
	
		form.textBoxAddress().setValue(voAssessSP.getAddress());
		form.textBoxName().setValue(voAssessSP.getName());
		form.textBoxReligion().setValue(voAssessSP.getReligion());
		form.textBoxRequirements().setValue(voAssessSP.getRequirements());
		form.txtBoxTelephone().setValue(voAssessSP.getTelephoneNumber());

		form.answerBoxBeliefOrFaith().setValue(voAssessSP.getBeliefOrFaith());
		form.answerBoxContinuePracticing().setValue(voAssessSP.getContinuePracticing());
    	form.answerBoxPracticingMember().setValue(voAssessSP.getPracticingMember());

		// Populate the correct selected careplan template if one saved with the component
		if (voAssessSP.getCarePlanTemplate() != null && voAssessSP.getCarePlanTemplate().size() > 0)
		{
			GenForm.gridCarePlanRow cpRow;
			CarePlanTemplateCollection templateColl = voAssessSP.getCarePlanTemplate();
			CarePlanTemplate template;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.gridCarePlan().getRows().size(); j++)
			{
				cpRow = form.gridCarePlan().getRows().get(j);
				for (i=0; i<templateColl.size(); i++)
				{
					template = templateColl.get(i);
			 		if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
			 		{
				 		cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
				 		break;
			 		}
			 	}
		 	}
		}
	}
	
	
	protected void onAnswerBoxBeliefOrFaithValueChanged()throws PresentationLogicException
	{
		beliefOrFaith();
	}
	private void beliefOrFaith() 
	{
		if(form.answerBoxBeliefOrFaith().getValue() == null || !form.answerBoxBeliefOrFaith().getValue().equals(YesNoUnknown.YES))
		{
			form.answerBoxContinuePracticing().setValue(null);
			form.answerBoxPracticingMember().setValue(null);

			if (form.getMode().equals(FormMode.EDIT))
			{
				form.answerBoxContinuePracticing().setEnabled(false);
				form.answerBoxPracticingMember().setEnabled(false);
			}
		}
		else
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.answerBoxContinuePracticing().setEnabled(true);
				form.answerBoxPracticingMember().setEnabled(true);
			}
		}
	}
}
