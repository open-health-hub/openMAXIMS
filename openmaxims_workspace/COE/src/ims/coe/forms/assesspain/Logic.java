//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40616.1545)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assesspain;

import ims.coe.vo.AssessmentPain;
import ims.coe.vo.PainMedication;
import ims.coe.vo.PainMedicationCollection;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.gridCarePlan().setReadOnly(false);
		form.bUpdateMed().setEnabled(false);
		form.bPainRelief().setEnabled(false);
		form.checkBoxCopy().setEnabled(false);
		
		// Populate the Grid CarePlan Templates
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.PAIN);
		if (tempColl != null)
		{
			form.gridCarePlan().getRows().clear();
			GenForm.gridCarePlanRow tempRow;
			for (int i=0; i<tempColl.size(); i++)
			{
				CarePlanTemplateTitle template = tempColl.get(i);
				tempRow = form.gridCarePlan().getRows().newRow();
				tempRow.setValue(template);
				tempRow.setcolCarePlan(template.getTitle());
			}
		}
		
		// If there is an assessment in the global context, we want to call the get component
		// domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		if (assmnt != null)
			form.getLocalContext().setAssmnt(assmnt);
		
		form.checkBoxComplete().setEnabled(false);
		if (assmnt != null && assmnt.getID_AssessmentIsNotNull())
		{		
			//AssessmentPain assessPain = (AssessmentPain)domain.getComponent(assmnt.getCurrentComponent(), AssessmentComponentType.PAIN);
			AssessmentPain assessPain = (AssessmentPain)domain.getComponent(assmnt,AssessmentComponentType.PAIN);
			if (assessPain != null)
				form.getLocalContext().setAssessPain(assessPain);
			
			populateFormInfo(assessPain);
			
			form.linkPA().setEnabled(true);
	
//			if (form.answerBoxExpereincePain().getValue() != null)
//			{
//				assessPain.setPatientExperiencePainAnyTime(form.answerBoxExpereincePain().getValue());
//				
//				if (assessPain.getPatientExperiencePainAnyTime().equals(ims.core.vo.lookups.YesNoUnknown.YES)) // Equals to YES
//					form.checkBoxComplete().setEnabled(false);
//				else if (assessPain.getPatientExperiencePainAnyTime().equals(ims.core.vo.lookups.YesNoUnknown.NO)) //Equals to NO
//					form.checkBoxComplete().setEnabled(true);
//				
//			}
//							
//			//If there is a Pain Chart entry then we are allowed to Complete this section
//			if (assessPain.getOptionalPainAssessment() != null)
//				form.checkBoxComplete().setEnabled(true);
			if (form.answerBoxExpereincePain().getValue() != null)
			{
				assessPain.setPatientExperiencePainAnyTime(form.answerBoxExpereincePain().getValue());
				
				if (form.answerBoxExpereincePain().getValue().equals(ims.core.vo.lookups.YesNoUnknown.YES)
					&& (assessPain != null) && (assessPain.getOptionalPainAssessment() != null)) // Equals to YES
				{
					form.checkBoxComplete().setEnabled(true);
				}
				else if (form.answerBoxExpereincePain().getValue().equals(ims.core.vo.lookups.YesNoUnknown.NO)) // Equals to NO
				{
					form.checkBoxComplete().setEnabled(true);
				}
			}
			
		//	//If the Section has been completed previously then set the check box accordingly
		//	form.checkBoxComplete().setEnabled(!assessPain.getIsComplete().booleanValue());
		}
		else  
		{
			// Probably a Cancel was hit on the linked Form and no AssessmentHeaderInfo is saved so 
			// refresh the screen with any data that was entered befor using the link.
			if (form.getGlobalContext().Nursing.getAssessmentComponent() != null)		
			{
				AssessmentPain assessPain = (AssessmentPain)form.getGlobalContext().Nursing.getAssessmentComponent();
				populateFormInfo(assessPain);
				if (form.answerBoxExpereincePain().getValue() != null)
				{
					assessPain.setPatientExperiencePainAnyTime(form.answerBoxExpereincePain().getValue());
					
					if (form.answerBoxExpereincePain().getValue().equals(ims.core.vo.lookups.YesNoUnknown.YES)
						&& (assessPain != null) && (assessPain.getOptionalPainAssessment() != null)) // Equals to YES
					{
						form.checkBoxComplete().setEnabled(true);
					}
					else if (form.answerBoxExpereincePain().getValue().equals(ims.core.vo.lookups.YesNoUnknown.NO)) // Equals to NO
					{
						form.checkBoxComplete().setEnabled(true);
					}
				}
			}
			
		//	check if there is a relevant component
			getLastAssessmentComponent();
			
			form.setMode(FormMode.EDIT);
		}
	}
	
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	
	protected AssessmentPain loadDataFromScreen()
	{	
		AssessmentPain assessPain = form.getLocalContext().getAssessPain();
		if (assessPain == null)
		{
			assessPain = new AssessmentPain();
			assessPain.setComponentType(AssessmentComponentType.PAIN);
		}
		
		assessPain.setIsComplete(new Boolean(this.form.checkBoxComplete().getValue()));
		assessPain.setCopy(new Boolean(this.form.checkBoxCopy().getValue()));
		assessPain.setOtherMethods(form.textBoxOtherMethods().getValue());
				
		// Save the answerbox values
		assessPain.setPatientExperiencePainAnyTime(form.answerBoxExpereincePain().getValue());
		assessPain.setPatientTakePainMeds(form.answerBoxTakeMeds().getValue());

		// Save the Medication Grid Information
		GenForm.gridPainReliefRow mRow;
		PainMedicationCollection medColl = new PainMedicationCollection();
		for (int i=0; i<form.gridPainRelief().getRows().size(); i++)
		{
			mRow = form.gridPainRelief().getRows().get(i);
			medColl.add(mRow.getValue());
		}
		
		//Now save the Inactive records
		PainMedicationCollection lstInActiveList = form.getLocalContext().getInActiveMedicationsList();
		if (lstInActiveList != null)
		{
			for (int j = 0;  j < lstInActiveList.size() ; j++)
				medColl.add(lstInActiveList.get(j));
		}
		
		assessPain.setPainMedication(medColl);
	
		String[] messages = assessPain.validate();
		if (messages != null)
		{
			engine.showErrors("Validation Errors", messages);
			return null;
		}
		return assessPain;
	}
	
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AssessmentPain assessPain = null;
		try
		{
			assessPain = loadDataFromScreen();
			if (assessPain == null)
				return;
						
			AssessmentHeaderInfo newAssmnt = form.getLocalContext().getAssmnt();
			
			if (newAssmnt.getCareContext() == null)
				newAssmnt.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (newAssmnt.getClinicalContact() == null)
				newAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
			newAssmnt = domain.saveComponent(newAssmnt, assessPain);
		    form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
	
			onFormOpen();
			return;				
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Pain Assessment record already exists. " + e.getMessage());
			onFormOpen();
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));
			
			onFormOpen();
			return;	
		}
		
		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.gridCarePlan().getReadOnly() == false)
		{
			CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			GenForm.gridCarePlanRow cpRow;
			for (int i=0; i<form.gridCarePlan().getRows().size(); i++)
			{
				cpRow = form.gridCarePlan().getRows().get(i);
				if (cpRow.getcolSelected() && !cpRow.isReadOnly())
					templList.add(cpRow.getValue());
			}
			if (templList.size() > 0)
			{
				form.getGlobalContext().Nursing.setAssessmentComponent(assessPain);		
				
				form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				engine.open(form.getForms().Nursing.CarePlanStep2);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	
	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssessPain() == null)
			return;
		
		form.getLocalContext().getPrevAssessPain().setIsComplete(new Boolean(false));
		form.getLocalContext().getPrevAssessPain().setCarePlanTemplate(null);
	
		populateFormInfo(form.getLocalContext().getPrevAssessPain());
		form.checkBoxCopy().setValue(true);
		form.checkBoxCopy().setEnabled(false);
	}
	
	protected void getLastAssessmentComponent()
	{
		AssessmentPain assessPain = (AssessmentPain)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(),AssessmentComponentType.PAIN);
		if (assessPain == null)
		{
			this.form.checkBoxCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessPain(assessPain);
		form.checkBoxCopy().setEnabled(true);
	}
	
	private void populateFormInfo(AssessmentPain assessPain)
	{
		if (assessPain == null)
			return;
		
		form.checkBoxComplete().setValue(assessPain.getIsComplete().booleanValue());
		if (assessPain.getIsComplete() != null && assessPain.getIsComplete().booleanValue() == true)  // Complete
		{
			form.bSave().setEnabled(false);
			form.setMode(FormMode.VIEW);
			form.checkBoxComplete().setEnabled(false);
			form.checkBoxCopy().setEnabled(false);
			form.gridCarePlan().setReadOnly(true);
		}
		else
			form.setMode(FormMode.EDIT);
		
		form.checkBoxCopy().setValue(assessPain.getCopy().booleanValue());
		//Disable copy() if incomplete.
		if (assessPain.getCopy().booleanValue() == true || (assessPain.getIsComplete() != null && assessPain.getIsComplete().booleanValue()))
			form.checkBoxCopy().setEnabled(false);
			
		form.textBoxOtherMethods().setValue(assessPain.getOtherMethods());
		form.answerBoxExpereincePain().setValue(assessPain.getPatientExperiencePainAnyTime());
		form.answerBoxTakeMeds().setValue(assessPain.getPatientTakePainMeds());
		if(assessPain.getPatientTakePainMeds() != null && assessPain.getPatientTakePainMeds().equals(YesNoUnknown.YES))
			form.bPainRelief().setEnabled(true && form.getMode().equals(FormMode.EDIT));
		
		form.getLocalContext().setInActiveMedicationsList(null);

		// Populate the Pain Relief Grid
		if (assessPain.getPainMedication() != null)
		{
			GenForm.gridPainReliefRow pRow;
			PainMedicationCollection medColl = assessPain.getPainMedication();
			form.gridPainRelief().getRows().clear();
			
			for (int i=0; i<medColl.size(); i++)
			{
				PainMedication med = medColl.get(i);
				
				if (med.getIsCurrentlyActive().booleanValue())
				{
					pRow = form.gridPainRelief().getRows().newRow();
					pRow.setValue(med);
					pRow.setColDose(med.getDose());
					pRow.setColeffectiveFor(med.getEffectiveFor());
					pRow.setColFrequency(med.getFrequency());
					if (med.getMedication() != null)
						pRow.setColMedication(med.getMedication().getText());
					else
						pRow.setColMedication(med.getOther());
					pRow.setColRoute(med.getRoute());
					pRow.setColTakenWith(med.getTakenWithAnything());
				}
				else
				{
					PainMedicationCollection lstInActiveList = form.getLocalContext().getInActiveMedicationsList();
					if (lstInActiveList == null)
						lstInActiveList = new ims.coe.vo.PainMedicationCollection();
					lstInActiveList.add(med);
					form.getLocalContext().setInActiveMedicationsList(lstInActiveList);
				}
			}
		}
		
			// Populate the correct selected careplan template if one saved with the component
		if (assessPain.getCarePlanTemplate() != null && assessPain.getCarePlanTemplate().size() > 0)
		{
			GenForm.gridCarePlanRow cpRow;
			CarePlanTemplateCollection templateColl = assessPain.getCarePlanTemplate();
			CarePlanTemplate template;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.gridCarePlan().getRows().size(); j++)
			{
				cpRow = form.gridCarePlan().getRows().get(j);
				for (i=0; i<templateColl.size(); i++)
				{
					template = templateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}
	}
	
	protected void onBPainReliefClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCurIndex(null);
		form.getGlobalContext().COE.setPainMedication(null);
		engine.open(form.getForms().COE.AssessPainMedication);
	}
	
	protected void onGridMedSelChanged()
	{
		form.getGlobalContext().COE.setPainMedication(form.gridPainRelief().getValue());
		form.getLocalContext().setCurIndex(new Integer(form.gridPainRelief().getSelectedRowIndex()));
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.bUpdateMed().setEnabled(true);
		}
	}
	
	protected void onDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().COE.AssessPainMedication) && result == ims.framework.enumerations.DialogResult.OK)
		{
			// Get the medication from the global context
			PainMedication med = form.getGlobalContext().COE.getPainMedication();
			// Check to see if the value is already on the grid, if it is
			// update that row.  Otherwise, create another row
			GenForm.gridPainReliefRow row = null;
			if ( !med.getIsCurrentlyActive().booleanValue())//Has been made Inactive
			{
				PainMedicationCollection lstInActiveList = form.getLocalContext().getInActiveMedicationsList();
				if (lstInActiveList == null)
					lstInActiveList = new ims.coe.vo.PainMedicationCollection();
				lstInActiveList.add(med);
				form.getLocalContext().setInActiveMedicationsList(lstInActiveList);
				
				if (form.getLocalContext().getCurIndex() != null)
					form.gridPainRelief().getRows().remove(form.getLocalContext().getCurIndex().intValue());
			}
			else
			{
				if (form.getLocalContext().getCurIndex() == null)
				{
					row = form.gridPainRelief().getRows().newRow();
					row.setValue(med);
					//form.getLocalContext().setCurIndex(new Integer(form.gridPainRelief().getRows().size()));
				}
				else
				{
					row = form.gridPainRelief().getRows().get(form.getLocalContext().getCurIndex().intValue());
					row.setValue(med);
				}
				row.setColDose(med.getDose());
				row.setColeffectiveFor(med.getEffectiveFor());
				row.setColFrequency(med.getFrequency());
				if (med.getMedication() != null)
					row.setColMedication(med.getMedication().getText());
				else
					row.setColMedication(med.getOther());
				row.setColRoute(med.getRoute());
				row.setColTakenWith(med.getTakenWithAnything());
			}
		}
		
		form.bUpdateMed().setEnabled(false);
	}
	
	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssessPain() != null && form.getLocalContext().getAssessPain().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessPain().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}

	}

	protected void onAnswerBoxTakeMedsValueChanged() throws PresentationLogicException 
	{
		//27/08/04 - Enable AddMedicine button if checked 
		if(form.answerBoxTakeMeds().getValue() != null && form.answerBoxTakeMeds().getValue().equals(YesNoUnknown.YES))
		{
			form.bPainRelief().setEnabled(true);
		}
		else
		{
			if(form.gridPainRelief().getRows().size() > 0)
			{
				engine.showMessage("Please remove all medications from grid.");
				form.answerBoxTakeMeds().setValue(YesNoUnknown.YES);
				form.bPainRelief().setEnabled(true);
				return;
			}
			form.bPainRelief().setEnabled(false);
		}
	}

	protected void onLinkPAClick() throws PresentationLogicException 
	{
		AssessmentPain assessMob = loadDataFromScreen();
		if (assessMob == null)
			return;

		form.getGlobalContext().Nursing.setAssessmentComponent(assessMob);		
		engine.open(form.getForms().Nursing.PainBodyChart);
	}

	protected void onAnswerBoxExpereincePainValueChanged() throws PresentationLogicException 
	{
//		if (form.answerBoxExpereincePain().getValue() != null)
//		{
//			if (form.answerBoxExpereincePain().getValue().equals(ims.core.vo.lookups.YesNoUnknown.YES)) // Equals to YES
//				form.checkBoxComplete().setEnabled(false);
//			else if (form.answerBoxExpereincePain().getValue().equals(ims.core.vo.lookups.YesNoUnknown.NO)) // Equals to NO
//				form.checkBoxComplete().setEnabled(true);
//			else
//				form.checkBoxComplete().setEnabled(false);
//		}
//		else
//			form.checkBoxComplete().setEnabled(false);
//		
//		AssessmentPain assessPain = form.getLocalContext().getAssessPain();
//		if ( (assessPain != null) && (assessPain.getOptionalPainAssessment() != null) )
//			form.checkBoxComplete().setEnabled(true);
		
		AssessmentPain assessPain = form.getLocalContext().getAssessPain();
		
		if (form.answerBoxExpereincePain().getValue() != null)
		{
			if (form.answerBoxExpereincePain().getValue().equals(ims.core.vo.lookups.YesNoUnknown.YES)
				&& (assessPain != null) && (assessPain.getOptionalPainAssessment() != null)) // Equals to YES
			{
				form.checkBoxComplete().setEnabled(true);
				return;
			}
			 else if (form.answerBoxExpereincePain().getValue().equals(ims.core.vo.lookups.YesNoUnknown.NO)) // Equals to NO
			{
				form.checkBoxComplete().setEnabled(true);
				return;
			}
		}
		
		form.checkBoxComplete().setEnabled(false);
	}

	protected void onUpdateMedClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().COE.AssessPainMedication);
	}
}
