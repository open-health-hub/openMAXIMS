//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.forms.assesspain;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class gridCarePlanRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridCarePlanRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolCarePlanReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolCarePlanReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolCarePlanOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolCarePlan()
		{
			return (String)super.row.get(0);
		}
		public void setcolCarePlan(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolCarePlanTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSelectedReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSelectedReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSelectedOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getcolSelected()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setcolSelected(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellcolSelectedTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.nursing.vo.CarePlanTemplateTitle getValue()
		{
			return (ims.nursing.vo.CarePlanTemplateTitle)super.row.getValue();
		}
		public void setValue(ims.nursing.vo.CarePlanTemplateTitle value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridCarePlanRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridCarePlanRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridCarePlanRow get(int index)
		{
			return new gridCarePlanRow(super.collection.get(index));
		}
		public gridCarePlanRow newRow()
		{
			return new gridCarePlanRow(super.collection.newRow());
		}
		public gridCarePlanRow newRow(boolean autoSelect)
		{
			return new gridCarePlanRow(super.collection.newRow(autoSelect));
		}
		public gridCarePlanRow newRowAt(int index)
		{
			return new gridCarePlanRow(super.collection.newRowAt(index));
		}
		public gridCarePlanRow newRowAt(int index, boolean autoSelect)
		{
			return new gridCarePlanRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridCarePlanGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.nursing.vo.CarePlanTemplateTitle[] getValues()
		{
			ims.nursing.vo.CarePlanTemplateTitle[] listOfValues = new ims.nursing.vo.CarePlanTemplateTitle[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.nursing.vo.CarePlanTemplateTitle getValue()
		{
			return (ims.nursing.vo.CarePlanTemplateTitle)super.grid.getValue();
		}
		public void setValue(ims.nursing.vo.CarePlanTemplateTitle value)
		{
			super.grid.setValue(value);
		}
		public gridCarePlanRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridCarePlanRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridCarePlanRowCollection getRows()
		{
			return new gridCarePlanRowCollection(super.grid.getRows());
		}
		public gridCarePlanRow getRowByValue(ims.nursing.vo.CarePlanTemplateTitle value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridCarePlanRow(row);
		}
		public void setcolCarePlanHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolCarePlanHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSelectedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSelectedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class gridPainReliefRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridPainReliefRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColMedicationReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColMedicationReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColMedicationOpened()
		{
			super.row.showOpened(0);
		}
		public String getColMedication()
		{
			return (String)super.row.get(0);
		}
		public void setColMedication(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColMedicationTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColRouteReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColRouteReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColRouteOpened()
		{
			super.row.showOpened(1);
		}
		public ims.core.vo.lookups.MedicationRoute getColRoute()
		{
			return (ims.core.vo.lookups.MedicationRoute)super.row.get(1);
		}
		public void setColRoute(ims.core.vo.lookups.MedicationRoute value)
		{
			super.row.set(1, value, true);
		}
		public void setCellColRouteTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColDoseReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColDoseReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColDoseOpened()
		{
			super.row.showOpened(2);
		}
		public String getColDose()
		{
			return (String)super.row.get(2);
		}
		public void setColDose(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColDoseTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColFrequencyReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColFrequencyReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColFrequencyOpened()
		{
			super.row.showOpened(3);
		}
		public ims.core.vo.lookups.MedicationFrequency getColFrequency()
		{
			return (ims.core.vo.lookups.MedicationFrequency)super.row.get(3);
		}
		public void setColFrequency(ims.core.vo.lookups.MedicationFrequency value)
		{
			super.row.set(3, value, true);
		}
		public void setCellColFrequencyTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColTakenWithReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColTakenWithReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColTakenWithOpened()
		{
			super.row.showOpened(4);
		}
		public String getColTakenWith()
		{
			return (String)super.row.get(4);
		}
		public void setColTakenWith(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColTakenWithTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColeffectiveForReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColeffectiveForReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColeffectiveForOpened()
		{
			super.row.showOpened(5);
		}
		public String getColeffectiveFor()
		{
			return (String)super.row.get(5);
		}
		public void setColeffectiveFor(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColeffectiveForTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.coe.vo.PainMedication getValue()
		{
			return (ims.coe.vo.PainMedication)super.row.getValue();
		}
		public void setValue(ims.coe.vo.PainMedication value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridPainReliefRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridPainReliefRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridPainReliefRow get(int index)
		{
			return new gridPainReliefRow(super.collection.get(index));
		}
		public gridPainReliefRow newRow()
		{
			return new gridPainReliefRow(super.collection.newRow());
		}
		public gridPainReliefRow newRow(boolean autoSelect)
		{
			return new gridPainReliefRow(super.collection.newRow(autoSelect));
		}
		public gridPainReliefRow newRowAt(int index)
		{
			return new gridPainReliefRow(super.collection.newRowAt(index));
		}
		public gridPainReliefRow newRowAt(int index, boolean autoSelect)
		{
			return new gridPainReliefRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridPainReliefGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public ims.coe.vo.PainMedication[] getValues()
		{
			ims.coe.vo.PainMedication[] listOfValues = new ims.coe.vo.PainMedication[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.coe.vo.PainMedication getValue()
		{
			return (ims.coe.vo.PainMedication)super.grid.getValue();
		}
		public void setValue(ims.coe.vo.PainMedication value)
		{
			super.grid.setValue(value);
		}
		public gridPainReliefRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridPainReliefRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridPainReliefRowCollection getRows()
		{
			return new gridPainReliefRowCollection(super.grid.getRows());
		}
		public gridPainReliefRow getRowByValue(ims.coe.vo.PainMedication value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridPainReliefRow(row);
		}
		public void setColMedicationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColMedicationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColRouteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColRouteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox ColRouteComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
		public void setColDoseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColDoseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColFrequencyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColFrequencyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public GridComboBox ColFrequencyComboBox()
		{
			return new GridComboBox(super.grid, 3);
		}
		public void setColTakenWithHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColTakenWithHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColeffectiveForHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColeffectiveForHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}

	public static class answerBoxExpereincePainAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNoUnknown option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}

	public static class answerBoxTakeMedsAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNoUnknown option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 24, 104, 808, 264, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Pain relief", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 704, 572, 110, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Section Complete?", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 32, 157, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pain Assessment Complete", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 72, 266, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient experience pain at any time?", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 40, 288, 329, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details of other methods the patient uses to relieve pain:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 40, 136, 178, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does patient take medication?", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 757, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 40, 312, 752, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 816, 572, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 8, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Copy Previous Assessment", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 24, 384, 808, 176, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_gridCarePlanTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_gridCarePlanTemp);
		gridCarePlanGrid gridCarePlan = (gridCarePlanGrid)GridFlyweightFactory.getInstance().createGridBridge(gridCarePlanGrid.class, m_gridCarePlanTemp);
		gridCarePlan.addStringColumn("Care Plan", 0, 0, 660, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridCarePlan.addBoolColumn("Selected", 1, 1, -1, false, false, 0, true);
		super.addGrid(gridCarePlan);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 40, 160, 752, 118, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_gridPainReliefTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_gridPainReliefTemp);
		gridPainReliefGrid gridPainRelief = (gridPainReliefGrid)GridFlyweightFactory.getInstance().createGridBridge(gridPainReliefGrid.class, m_gridPainReliefTemp);
		gridPainRelief.addStringColumn("Medication", 0, 0, 200, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridPainRelief.addComboBoxColumn("Route", 0, 0, 70, false, true, false, false, true, -1);
		gridPainRelief.addStringColumn("Dose", 0, 0, 70, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridPainRelief.addComboBoxColumn("Frequency", 0, 0, 100, false, true, false, false, true, -1);
		gridPainRelief.addStringColumn("Taken with", 0, 0, 140, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridPainRelief.addStringColumn("Effective for", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(gridPainRelief);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 796, 176, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.NewRecordEnabled24, this.getImages().Core.NewRecordDisabled24, "Add a new Record", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 796, 208, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.EditRecordEnabled24, this.getImages().Core.EditRecordDisabled24, "Update selected Record", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// Link Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 24, 32, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Pain Assessment", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 784, 8, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Info", Boolean.FALSE, null}));

		// AnswerBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 296, 72, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		AnswerBox tmpanswerBoxExpereincePain = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
		super.addControl(tmpanswerBoxExpereincePain);
		answerBoxExpereincePainAnswerBox answerBoxExpereincePain = (answerBoxExpereincePainAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(answerBoxExpereincePainAnswerBox.class, tmpanswerBoxExpereincePain);
		super.addAnswerBox(answerBoxExpereincePain);
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 224, 136, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		AnswerBox tmpanswerBoxTakeMeds = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
		super.addControl(tmpanswerBoxTakeMeds);
		answerBoxTakeMedsAnswerBox answerBoxTakeMeds = (answerBoxTakeMedsAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(answerBoxTakeMedsAnswerBox.class, tmpanswerBoxTakeMeds);
		super.addAnswerBox(answerBoxTakeMeds);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button bCancel()
	{
		return (Button)super.getControl(6);
	}
	public Button bSave()
	{
		return (Button)super.getControl(7);
	}
	public TextBox textBoxOtherMethods()
	{
		return (TextBox)super.getControl(8);
	}
	public CheckBox checkBoxComplete()
	{
		return (CheckBox)super.getControl(9);
	}
	public CheckBox checkBoxCopy()
	{
		return (CheckBox)super.getControl(10);
	}
	public gridCarePlanGrid gridCarePlan()
	{
		return (gridCarePlanGrid)super.getGrid(0);
	}
	public gridPainReliefGrid gridPainRelief()
	{
		return (gridPainReliefGrid)super.getGrid(1);
	}
	public ImageButton bPainRelief()
	{
		return (ImageButton)super.getControl(13);
	}
	public ImageButton bUpdateMed()
	{
		return (ImageButton)super.getControl(14);
	}
	public Link linkPA()
	{
		return (Link)super.getControl(15);
	}
	public Link linkInfo()
	{
		return (Link)super.getControl(16);
	}
	public answerBoxExpereincePainAnswerBox answerBoxExpereincePain()
	{
		return (answerBoxExpereincePainAnswerBox)super.getAnswerBox(0);
	}
	public answerBoxTakeMedsAnswerBox answerBoxTakeMeds()
	{
		return (answerBoxTakeMedsAnswerBox)super.getAnswerBox(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Nursing = new NursingForms();
			COE = new COEForms();
		}
		public final class NursingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingForms()
			{
				AdmissionAssessOverview = new LocalFormName(101100);
				AssessmentInfo = new LocalFormName(101117);
				CarePlanStep2 = new LocalFormName(101129);
				PainBodyChart = new LocalFormName(101168);
			}
			public final FormName AdmissionAssessOverview;
			public final FormName AssessmentInfo;
			public final FormName CarePlanStep2;
			public final FormName PainBodyChart;
		}
		public final class COEForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private COEForms()
			{
				AssessPainMedication = new LocalFormName(101120);
			}
			public final FormName AssessPainMedication;
		}

		public NursingForms Nursing;
		public COEForms COE;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_Clear = new ImageHelper(102104, "Images/Core/AnswerBox_Clear.jpg", new Integer(10), new Integer(10));
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				AnswerBox_NotAvailable = new ImageHelper(102103, "Images/Core/AnswerBox_NotAvailable.gif", new Integer(10), new Integer(10));
				AnswerBox_Unknown = new ImageHelper(102102, "Images/Core/AnswerBox_Unknown.gif", new Integer(10), new Integer(10));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
				EditRecordDisabled24 = new ImageHelper(102530, "Images/Core/field_write_disabled_24.png", new Integer(24), new Integer(24));
				EditRecordEnabled24 = new ImageHelper(102529, "Images/Core/field_write_enabled_24.png", new Integer(24), new Integer(24));
				NewRecordDisabled24 = new ImageHelper(102524, "Images/Core/field_add_disabled_24.png", new Integer(24), new Integer(24));
				NewRecordEnabled24 = new ImageHelper(102523, "Images/Core/field_add_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image AnswerBox_Clear;
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image AnswerBox_NotAvailable;
			public final ims.framework.utils.Image AnswerBox_Unknown;
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image EditDisabled;
			public final ims.framework.utils.Image EditRecordDisabled24;
			public final ims.framework.utils.Image EditRecordEnabled24;
			public final ims.framework.utils.Image NewRecordDisabled24;
			public final ims.framework.utils.Image NewRecordEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Assmnt = new ims.framework.ContextVariable("Assmnt", prefix + "_lv_COE.AssessPain.__internal_x_context__Assmnt_" + componentIdentifier + "");
			cxl_AssessPain = new ims.framework.ContextVariable("AssessPain", prefix + "_lv_COE.AssessPain.__internal_x_context__AssessPain_" + componentIdentifier + "");
			cxl_SectionCompletable = new ims.framework.ContextVariable("SectionCompletable", prefix + "_lv_COE.AssessPain.__internal_x_context__SectionCompletable_" + componentIdentifier + "");
			cxl_InActiveMedicationsList = new ims.framework.ContextVariable("InActiveMedicationsList", prefix + "_lv_COE.AssessPain.__internal_x_context__InActiveMedicationsList_" + componentIdentifier + "");
			cxl_CurIndex = new ims.framework.ContextVariable("CurIndex", prefix + "_lv_COE.AssessPain.__internal_x_context__CurIndex_" + componentIdentifier + "");
			cxl_PrevAssessPain = new ims.framework.ContextVariable("PrevAssessPain", prefix + "_lv_COE.AssessPain.__internal_x_context__PrevAssessPain_" + componentIdentifier + "");
		}
		
		public boolean getAssmntIsNotNull()
		{
			return !cxl_Assmnt.getValueIsNull(context);
		}
		public ims.nursing.vo.AssessmentHeaderInfo getAssmnt()
		{
			return (ims.nursing.vo.AssessmentHeaderInfo)cxl_Assmnt.getValue(context);
		}
		public void setAssmnt(ims.nursing.vo.AssessmentHeaderInfo value)
		{
			cxl_Assmnt.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Assmnt = null;
		public boolean getAssessPainIsNotNull()
		{
			return !cxl_AssessPain.getValueIsNull(context);
		}
		public ims.coe.vo.AssessmentPain getAssessPain()
		{
			return (ims.coe.vo.AssessmentPain)cxl_AssessPain.getValue(context);
		}
		public void setAssessPain(ims.coe.vo.AssessmentPain value)
		{
			cxl_AssessPain.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AssessPain = null;
		public boolean getSectionCompletableIsNotNull()
		{
			return !cxl_SectionCompletable.getValueIsNull(context);
		}
		public Boolean getSectionCompletable()
		{
			return (Boolean)cxl_SectionCompletable.getValue(context);
		}
		public void setSectionCompletable(Boolean value)
		{
			cxl_SectionCompletable.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SectionCompletable = null;
		public boolean getInActiveMedicationsListIsNotNull()
		{
			return !cxl_InActiveMedicationsList.getValueIsNull(context);
		}
		public ims.coe.vo.PainMedicationCollection getInActiveMedicationsList()
		{
			return (ims.coe.vo.PainMedicationCollection)cxl_InActiveMedicationsList.getValue(context);
		}
		public void setInActiveMedicationsList(ims.coe.vo.PainMedicationCollection value)
		{
			cxl_InActiveMedicationsList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InActiveMedicationsList = null;
		public boolean getCurIndexIsNotNull()
		{
			return !cxl_CurIndex.getValueIsNull(context);
		}
		public Integer getCurIndex()
		{
			return (Integer)cxl_CurIndex.getValue(context);
		}
		public void setCurIndex(Integer value)
		{
			cxl_CurIndex.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurIndex = null;
		public boolean getPrevAssessPainIsNotNull()
		{
			return !cxl_PrevAssessPain.getValueIsNull(context);
		}
		public ims.coe.vo.AssessmentPain getPrevAssessPain()
		{
			return (ims.coe.vo.AssessmentPain)cxl_PrevAssessPain.getValue(context);
		}
		public void setPrevAssessPain(ims.coe.vo.AssessmentPain value)
		{
			cxl_PrevAssessPain.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrevAssessPain = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[91];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_COE.PainMedication", "BO-1012100033-ID", "ID_PainMedication");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_COE.PainMedication", "BO-1012100033-MEDICATION", "Medication");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_COE.PainMedication", "BO-1012100033-OTHER", "Other");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_COE.PainMedication", "BO-1012100033-ROUTE", "Route");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_COE.PainMedication", "BO-1012100033-DOSE", "Dose");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_COE.PainMedication", "BO-1012100033-FREQUENCY", "Frequency");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_COE.PainMedication", "BO-1012100033-TAKENWITHANYTHING", "TakenWithAnything");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_COE.PainMedication", "BO-1012100033-EFFECTIVEFOR", "EffectiveFor");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_COE.PainMedication", "BO-1012100033-ISCURRENTLYACTIVE", "IsCurrentlyActive");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-ID", "ID_AssessmentComponent");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-ISCOMPLETE", "IsComplete");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-COPY", "Copy");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentComponent", "BO-1015100001-COMPONENTTYPE", "ComponentType");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-ID", "ID_Assessment");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTTYPE", "AssessmentType");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTSTATUS", "AssessmentStatus");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-DATETIMECOMPLETE", "DateTimeComplete");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
