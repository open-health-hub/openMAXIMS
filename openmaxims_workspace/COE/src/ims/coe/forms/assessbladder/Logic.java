//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.18 build 40616.1545)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.coe.forms.assessbladder;


import ims.coe.vo.AssessmentBladder;
import ims.coe.vo.BladderSkills;
import ims.coe.vo.BladderSkillsCollection;
import ims.coe.vo.MicturitionVo;
import ims.coe.vo.lookups.ContinenceType;
import ims.coe.vo.lookups.ContinenceTypeCollection;
import ims.coe.vo.lookups.LookupHelper;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.BladderManagement;
import ims.nursing.vo.BladderManagementCollection;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.ContinenceVo;
import ims.nursing.vo.lookups.AssessmentComponentType;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	
	private void open()
	{
		prepareControls();
		
		// If there is an assessment in the global context, we want to call the get component domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo voAssmntHeader = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssmnt(voAssmntHeader);
		if (voAssmntHeader != null && voAssmntHeader.getID_AssessmentIsNotNull())
		{		
			AssessmentBladder voAssessBladder = (AssessmentBladder)domain.getComponent(voAssmntHeader,AssessmentComponentType.BLADDER);
			form.getLocalContext().setAssessBladder(voAssessBladder);
			populateInstanceControl(voAssessBladder);			
		}
		else
		{
			//check if there is a relevant component
			getLastAssessmentComponent();	
		}
		
		checkRequireAssistance();
	}

	private void prepareControls()
	{
		form.container1().answerBoxRequireAssistance().setFocus();
		form.setMode(FormMode.EDIT);
		form.container1().gridCarePlan().setReadOnly(false);
		form.container1().bSave().setEnabled(true);
		form.container1().bRemove().setEnabled(false);
		form.checkBoxCopy().setEnabled(false);		
	}

	private void initialize() 
	{
		form.getLocalContext().setYesNoColl(ims.core.vo.lookups.LookupHelper.getYesNoUnknown(domain.getLookupService()));
		prePopulateGrds();
	}

	/**
	 * Pre-Populates the grids with lookup information
	 *
	 */
	private void prePopulateGrds()
	{
		prePopulateContinenceGrd();
		prePopulateSkillsGrd();
		prePopulateCarePlanGrd();
	}
	
	private void prePopulateCarePlanGrd() 
	{
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.BLADDER);
		if (tempColl != null)
		{
			form.container1().gridCarePlan().getRows().clear();
			GenForm.container1Container.gridCarePlanRow tempRow;
			for (int i=0; i<tempColl.size(); i++)
			{
				CarePlanTemplateTitle template = tempColl.get(i);
				tempRow = form.container1().gridCarePlan().getRows().newRow();
				tempRow.setValue(template);
				tempRow.setcolCarePlans(template.getTitle());
			}
		}
	}

	private void prePopulateSkillsGrd()
	{
		GenForm.container1Container.gridSkillsRow sRow;
		form.container1().gridSkills().getRows().clear();
		ims.coe.vo.lookups.BladderSkillsCollection sColl = LookupHelper.getBladderSkills(domain.getLookupService());
		for (int i=0; i<sColl.size(); i++)
		{
			ims.coe.vo.lookups.BladderSkills skill = sColl.get(i);
			sRow = form.container1().gridSkills().getRows().newRow();
			sRow.setcolSkills(skill);
		}
	}

	private void prePopulateContinenceGrd()
	{
		GenForm.container1Container.gridContinenceRow cRow;
		form.container1().gridContinence().getRows().clear();
		ContinenceTypeCollection problems = LookupHelper.getContinenceType(domain.getLookupService());
		for (int i=0; i<problems.size(); i++)
		{
			ContinenceType problem = problems.get(i);
			cRow = form.container1().gridContinence().getRows().newRow();
			cRow.setValue(problem);
			cRow.setColType(problem.getText());
		}
	}

	/**
	 * Populates the form with data
	 * @param assessBladder
	 */
	private void populateInstanceControl(AssessmentBladder voAssessBladder)
	{
		if (voAssessBladder == null)
			return;
	
		form.container1().answerBoxRequireAssistance().setValue(voAssessBladder.getAssistanceContinence());
		form.container1().answerBoxEmptySpontaneously().setValue(voAssessBladder.getContinence().getBladderEmptySpontaneously());
		form.checkBoxCopy().setValue(voAssessBladder.getCopy().booleanValue());
		if (voAssessBladder.getCopy().booleanValue() == true)
			form.checkBoxCopy().setEnabled(false);		
	
		form.container1().checkBoxComplete().setValue(voAssessBladder.getIsComplete().booleanValue());
		if (voAssessBladder.getIsComplete().booleanValue() == true) // Complete
		{
			form.container1().bSave().setEnabled(false);
			form.container1().checkBoxComplete().setEnabled(false);
			form.setMode(FormMode.VIEW);
			form.checkBoxCopy().setEnabled(false);
			form.container1().answerBoxEmptySpontaneously().setEnabled(false);
			form.container1().gridCarePlan().setReadOnly(true);
			form.container1().comboBoxDay().setEnabled(false);
			form.container1().comboBoxNight().setEnabled(false);
			form.container1().textBoxOther().setEnabled(false);
			form.container1().bMiturition().setEnabled(false);
		}
		form.container1().comboBoxDay().setValue(voAssessBladder.getContinence().getDay());
		form.container1().comboBoxNight().setValue(voAssessBladder.getContinence().getNight());
		form.container1().comboBoxDiversion().setValue(voAssessBladder.getBladderMicturition().getUrinaryDiversion());
		form.container1().textBoxAppliances().setValue(voAssessBladder.getBladderMicturition().getAppliancesUsed());
		form.container1().textBoxOther().setValue(voAssessBladder.getContinence().getOtherProblem());
		
		// Populate Grid Continence
		populateContinenceGrd(voAssessBladder.getContinence().getProblemType());
		
		// Populate Grid Management
		populateManagementGrd(voAssessBladder.getBladderMicturition().getBladderManagement());
		
		// Populate Grid Skills
		populateSkillsGrd(voAssessBladder.getBladderSkills());
	
		// Populate the correct selected careplan template if one saved with the component
		populateCarePlanGrd(voAssessBladder.getCarePlanTemplate());
		
	}
	
	private void populateCarePlanGrd(CarePlanTemplateCollection voCarePlanTempColl) 
	{
		if (voCarePlanTempColl != null && voCarePlanTempColl.size() > 0)
		{
			GenForm.container1Container.gridCarePlanRow cpRow;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.container1().gridCarePlan().getRows().size(); j++)
			{
				cpRow = form.container1().gridCarePlan().getRows().get(j);
				
				for (i=0; i<voCarePlanTempColl.size(); i++)
				{
					CarePlanTemplate voTemplate = voCarePlanTempColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(voTemplate.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}
		
	}

	private void populateSkillsGrd(BladderSkillsCollection voBladderSkillsColl) 
	{
		if (voBladderSkillsColl != null)
		{
			GenForm.container1Container.gridSkillsRow sRow;
			for (int i=0; i<voBladderSkillsColl.size(); i++)
			{
				BladderSkills voSkill = voBladderSkillsColl.get(i);
				int j = 0;
				for (j=0; j<form.container1().gridSkills().getRows().size(); j++)
				{
					sRow = form.container1().gridSkills().getRows().get(j);
					if (sRow.getcolSkills().equals(voSkill.getSkills()))
					{
						sRow.setcolDependency(voSkill.getDependency());
						sRow.setcolDetails(voSkill.getDetails());
						sRow.setValue(voSkill);
						break;
					}
				}
				if(j == form.container1().gridSkills().getRows().size())
				{
					sRow = form.container1().gridSkills().getRows().newRow();
					sRow.setcolSkills(voSkill.getSkills());
					sRow.setcolDependency(voSkill.getDependency());
					sRow.setcolDetails(voSkill.getDetails());
					sRow.setValue(voSkill);
				}
			}
		}
		
	}

	private void populateManagementGrd(BladderManagementCollection voBladderManagement) 
	{
		if (voBladderManagement != null)
		{
			GenForm.container1Container.gridManagementRow mRow;
			form.container1().gridManagement().getRows().clear();
			
			for (int i=0; i<voBladderManagement.size(); i++)
			{
				BladderManagement manage = voBladderManagement.get(i);
				if ( manage.getIsCurrentlyActive().booleanValue() )
				{	
					mRow = form.container1().gridManagement().getRows().newRow();
					mRow.setValue(manage);
					if (manage.getDateInserted() != null)
						mRow.setColDateInserted(manage.getDateInserted());
					if (manage.getDateNextChange() != null)
						mRow.setColDateNextChange(manage.getDateNextChange());
					if (manage.getMethod() != null)
						mRow.setColMethod(manage.getMethod());
					if (manage.getSize() != null)
						mRow.setColSize(manage.getSize());
					if (manage.getType() != null)
						mRow.setColType(manage.getType());
				}
				else
				{
					BladderManagementCollection volstInActiveList = form.getLocalContext().getInActiveDeviceList();
					if (volstInActiveList == null)
						volstInActiveList = new ims.nursing.vo.BladderManagementCollection();
					volstInActiveList.add(manage);
					form.getLocalContext().setInActiveDeviceList(volstInActiveList);
				}
			}
		}
		
	}

	private void populateContinenceGrd(ContinenceTypeCollection ContinenceTypeColl)
	{
		if (ContinenceTypeColl != null)
		{
			GenForm.container1Container.gridContinenceRow cRow;
			for (int i=0; i<ContinenceTypeColl.size(); i++)
			{
				ContinenceType problem = ContinenceTypeColl.get(i);
				cRow = form.container1().gridContinence().getRowByValue(problem);
				if (cRow != null)
					cRow.setColSelected(true);
				else
				{
					cRow = form.container1().gridContinence().getRows().newRow();
					cRow.setValue(problem);
					cRow.setColType(problem.getText());	
					cRow.setColSelected(true);	
				}
			}
		}
	}

	protected void onInfoLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssessBladder() != null && form.getLocalContext().getAssessBladder().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessBladder().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}
	
	protected void onCopyPrevAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPrevAssessBladder() == null)
			return;
		
		//We don't want to set the complete or template values
		form.getLocalContext().getPrevAssessBladder().setIsComplete(new Boolean(false));
		form.getLocalContext().getPrevAssessBladder().setCarePlanTemplate(null);
		populateInstanceControl(form.getLocalContext().getPrevAssessBladder());
		form.checkBoxCopy().setValue(true);
		form.checkBoxCopy().setEnabled(false);
	}
	
	protected void getLastAssessmentComponent()
	{
		AssessmentBladder tmpAssessBladder = (AssessmentBladder)domain.getLastAssessmentComponent(form.getGlobalContext().Core.getPatientShort(),form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.BLADDER);
		if (tmpAssessBladder == null)
		{
			this.form.checkBoxCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPrevAssessBladder(tmpAssessBladder);
		form.checkBoxCopy().setEnabled(true);
	}
	
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AssessmentBladder voAssessBladder = form.getLocalContext().getAssessBladder();
		if (voAssessBladder == null)
		{
			voAssessBladder = new AssessmentBladder();
			voAssessBladder.setComponentType(AssessmentComponentType.BLADDER);
		}
		
		voAssessBladder.setIsComplete(new Boolean(this.form.container1().checkBoxComplete().getValue()));
		voAssessBladder.setCopy(new Boolean(this.form.checkBoxCopy().getValue()));
		voAssessBladder.setAssistanceContinence(form.container1().answerBoxRequireAssistance().getValue());
		
		MicturitionVo voMicturition = voAssessBladder.getBladderMicturition();
		if (voMicturition == null)
			voMicturition = new MicturitionVo();
		
		voMicturition.setAppliancesUsed(form.container1().textBoxAppliances().getValue());
		voMicturition.setUrinaryDiversion(form.container1().comboBoxDiversion().getValue());
		voAssessBladder.setBladderMicturition(voMicturition);
		
		ContinenceVo voContinence = voAssessBladder.getContinence();
		if (voContinence == null)
			voContinence = new ContinenceVo();
			
		voContinence.setDay(form.container1().comboBoxDay().getValue());
		voContinence.setNight(form.container1().comboBoxNight().getValue());
		voContinence.setOtherProblem(form.container1().textBoxOther().getValue());
		voContinence.setBladderEmptySpontaneously(form.container1().answerBoxEmptySpontaneously().getValue());
		voAssessBladder.setContinence(voContinence);
		
		// Save Grid Continence Information
		ContinenceTypeCollection problems = new ContinenceTypeCollection();
		GenForm.container1Container.gridContinenceRow cRow;
		for (int i=0; i<form.container1().gridContinence().getRows().size(); i++)
		{
			cRow = form.container1().gridContinence().getRows().get(i);
			if (cRow.getColSelected())
			{
				problems.add(cRow.getValue());
			}
		}
		voAssessBladder.getContinence().setProblemType(problems);
		
		// Save Grid Management Information
		BladderManagementCollection voBladderManageColl = new BladderManagementCollection();
		GenForm.container1Container.gridManagementRow mRow;
		for (int i=0; i<form.container1().gridManagement().getRows().size(); i++)
		{
			mRow = form.container1().gridManagement().getRows().get(i);
			BladderManagement voBladderManage = mRow.getValue();
			voBladderManage.setDateInserted(mRow.getColDateInserted());
			voBladderManage.setDateNextChange(mRow.getColDateNextChange());
			voBladderManage.setMethod(mRow.getColMethod());
			voBladderManage.setSize(mRow.getColSize());
			voBladderManage.setType(mRow.getColType());
			voBladderManageColl.add(voBladderManage);
		}
		//Now save the Inactive records
		BladderManagementCollection lstInActiveList = form.getLocalContext().getInActiveDeviceList();
		if (lstInActiveList != null)
		{
			for (int j = 0;  j < lstInActiveList.size() ; j++)
				voBladderManageColl.add(lstInActiveList.get(j));
		}
		voAssessBladder.getBladderMicturition().setBladderManagement(voBladderManageColl);
		
		// Save Skills Grid
		GenForm.container1Container.gridSkillsRow sRow;
		BladderSkillsCollection voSkillColl = new BladderSkillsCollection();
		for (int i=0; i<form.container1().gridSkills().getRows().size(); i++)
		{
			sRow = form.container1().gridSkills().getRows().get(i);
			if (sRow.getcolDependency() != null || (sRow.getcolDetails() != null && !sRow.getcolDetails().equals("")) || sRow.getcolSkills() != null)
			{
				BladderSkills voSkill = sRow.getValue();
				if (voSkill == null)
					voSkill = new BladderSkills();
				voSkill.setDependency(sRow.getcolDependency());
				voSkill.setDetails(sRow.getcolDetails());
				voSkill.setSkills(sRow.getcolSkills());
				voSkillColl.add(voSkill);
			}
		}
		voAssessBladder.setBladderSkills(voSkillColl);
			
		try
		{			
			String[] messages = voAssessBladder.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			AssessmentHeaderInfo voNewAssmntHeader = form.getLocalContext().getAssmnt();
			
			if (voNewAssmntHeader.getCareContext() == null)
				voNewAssmntHeader.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			if (voNewAssmntHeader.getClinicalContact() == null)
				voNewAssmntHeader.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
	
			voNewAssmntHeader = domain.saveComponent(voNewAssmntHeader, voAssessBladder);
		    form.getGlobalContext().Nursing.setAssessmentHeaderInfo(voNewAssmntHeader);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));	
			open();
			return;						
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Bladder Assessment record already exists. " + e.getMessage());
			open();
			return;
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(domain.getAssessment(form.getGlobalContext().Core.getCurrentCareContext()));	
			open();
			return;	
		}

		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.container1().gridCarePlan().getReadOnly() == false)
		{
			CarePlanTemplateTitleCollection votemplList = new CarePlanTemplateTitleCollection();
			GenForm.container1Container.gridCarePlanRow row;
			for (int i=0; i<form.container1().gridCarePlan().getRows().size(); i++)
			{
				row = form.container1().gridCarePlan().getRows().get(i);
				if (row.getcolSelected() && !row.isReadOnly())
					votemplList.add(row.getValue());
			}
			if (votemplList.size() > 0)
			{
				form.getGlobalContext().COE.CarePlan.setTemplateList(votemplList);
				engine.open(form.getForms().Nursing.CarePlanStep2);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	protected void onManSelChanged()
	{
		form.container1().bRemove().setEnabled(true);
	
		if(form.getLocalContext().getAssessBladder() != null)
		{
			if(form.getLocalContext().getAssessBladder().getIsComplete().booleanValue() == true)
				form.container1().bRemove().setEnabled(false);
		}
			
		form.getGlobalContext().Nursing.setBladderManagement(form.container1().gridManagement().getValue());
		form.getLocalContext().setCurIndex(new Integer(form.container1().gridManagement().getSelectedRowIndex()));
	}
	
	protected void onBMituritionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Nursing.setBladderManagement(null);
		form.getLocalContext().setCurIndex(null);
		engine.open(form.getForms().COE.AssessBladderManagement);
	}
	
	protected void onBRemoveClick()
	{
		engine.open(form.getForms().COE.AssessBladderManagement);
	}
	
	protected void onDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().COE.AssessBladderManagement) && result == ims.framework.enumerations.DialogResult.OK)
		{
			// Get the medication from the global context
			GenForm.container1Container.gridManagementRow row;
			BladderManagement man = form.getGlobalContext().Nursing.getBladderManagement();
			if ( !man.getIsCurrentlyActive().booleanValue())//Has been made Inactive
			{
				BladderManagementCollection lstInActiveList = form.getLocalContext().getInActiveDeviceList();
				if (lstInActiveList == null)
					lstInActiveList = new ims.nursing.vo.BladderManagementCollection();
				lstInActiveList.add(man);
				form.getLocalContext().setInActiveDeviceList(lstInActiveList);
				
				if (form.getLocalContext().getCurIndex() != null)
					form.container1().gridManagement().getRows().remove(form.getLocalContext().getCurIndex().intValue());
			}
			else
			{
				if (form.getLocalContext().getCurIndex() == null)
				{
					row = form.container1().gridManagement().getRows().newRow();
					row.setValue(man);
				}
				else
				{	
					row = form.container1().gridManagement().getRows().get(form.getLocalContext().getCurIndex().intValue());
					row.setValue(man);
				}
				
				if (man.getDateInserted() != null)
					row.setColDateInserted(man.getDateInserted());
				if (man.getDateNextChange() != null)
					row.setColDateNextChange(man.getDateNextChange());
				if (man.getMethod() != null)
					row.setColMethod(man.getMethod());
				if (man.getSize() != null)
					row.setColSize(man.getSize());
				if (man.getType() != null)
					row.setColType(man.getType());
			}
		}
		form.container1().bRemove().setEnabled(form.container1().gridManagement().getValue()!=null);
	}

	
	protected void onAnswerBoxRequireAssistanceValueChanged()throws PresentationLogicException
	{
		checkRequireAssistance();
	}

	private void checkRequireAssistance() 
	{
		if(form.container1().answerBoxRequireAssistance().getValue() == null || !form.container1().answerBoxRequireAssistance().getValue().equals(YesNoUnknown.YES))
		{
			form.container1().answerBoxEmptySpontaneously().setValue(null);
			for(int i = 0; i < form.container1().gridContinence().getRows().size(); i++)
			{
				form.container1().gridContinence().getRows().get(i).setColSelected(false);
			}
			form.container1().textBoxOther().setValue(null);
			form.container1().comboBoxDay().setValue(null);
			form.container1().comboBoxNight().setValue(null);
			
			form.container1().answerBoxEmptySpontaneously().setEnabled(false);
			if (form.getMode().equals(FormMode.EDIT)) 
			{
				enableControls(false);
			}
		}
		else
		{
			form.container1().answerBoxEmptySpontaneously().setEnabled(true);
			if(form.getLocalContext().getAssessBladder() != null)
			{
				if(form.getLocalContext().getAssessBladder().getIsComplete().booleanValue() == true)
					form.container1().answerBoxEmptySpontaneously().setEnabled(false);
			}
			
			if (form.getMode().equals(FormMode.EDIT)) 
			{
				enableControls(true);
			} 
		}
	}

	private void enableControls(boolean enable) 
	{
		form.container1().gridContinence().setReadOnly(!enable);
		form.container1().textBoxOther().setEnabled(enable);
		form.container1().comboBoxDay().setEnabled(enable);
		form.container1().comboBoxNight().setEnabled(enable);
	}
}
