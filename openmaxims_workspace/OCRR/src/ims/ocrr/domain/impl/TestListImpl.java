//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.30 build 2012.21169)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.domain.ServiceShortVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.DomainFactory;
import ims.domain.impl.DomainImpl;
import ims.ocrr.configuration.domain.objects.InvestigationIndex;
import ims.ocrr.domain.ProfileList;
import ims.ocrr.vo.InvSynonymVo;
import ims.ocrr.vo.InvSynonymVoCollection;
import ims.ocrr.vo.InvestigationIndexShortVoCollection;
import ims.ocrr.vo.InvestigationIndexVo;
import ims.ocrr.vo.domain.InvestigationIndexShortVoAssembler;
import ims.ocrr.vo.domain.InvestigationIndexVoAssembler;
import ims.ocrr.vo.lookups.Category;

public class TestListImpl extends DomainImpl implements ims.ocrr.domain.TestList, ProfileList, ims.domain.impl.Transactional
{
	/**
	 * 
	 */
	private static final long	serialVersionUID	= 1L;

	/**
	* listInvestigationIndex
	*/
	public InvestigationIndexShortVoCollection listInvestigationIndex(String name, ServiceShortVo service,  Category categoryLookup, PreActiveActiveInactiveStatus status,Boolean isProfile)
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = " select distinct invIndex from InvestigationIndex invIndex "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		// please ensure no other criteria goes above this search element///
		if(service != null)
		{
			condStr.append(andStr + " join invIndex.investigations as inv where inv.activeStatus.id <> :activeStatusId and inv.providerService.locationService.service.id = :idService");
			//WDEV-17025
			markers.add("activeStatusId");
			values.add(PreActiveActiveInactiveStatus.INACTIVE.getID());
 			markers.add("idService");
			values.add(service.getID_Service());
			andStr = " and ";		
		}
		else
			andStr = " where ";
		////////////////////////////////////////////////////////////////////
		
		if(name != null)
		{
			condStr.append(andStr + " invIndex.upperName like :name");
 			markers.add("name");
			values.add(name.toUpperCase() + "%");
			andStr = " and ";	
		}	
		
		if(categoryLookup != null)
		{
			condStr.append(andStr + " invIndex.category = :category");
 			markers.add("category");
			values.add(getDomLookup(categoryLookup));
			andStr = " and ";	
		}	
			
		if(isProfile != null)
		{
			condStr.append(andStr + " invIndex.isProfile = :isProfile");
			markers.add("isProfile");
			values.add(isProfile);
			andStr = " and ";
		}
		
		if(status != null)
		{
			condStr.append(andStr + " invIndex.activeStatus = :status");
			markers.add("status");
			values.add(getDomLookup(status));
			andStr = " and ";
		}

		hql += condStr.toString();
		return InvestigationIndexShortVoAssembler.createInvestigationIndexShortVoCollectionFromInvestigationIndex(factory.find(hql,markers,values)).sort();
	}

	/**
	* listInvestigationIndex
	*/
	public InvestigationIndexShortVoCollection listInvestigationIndex(String name, String investigationCode, ServiceShortVo service, Category categoryLookup, PreActiveActiveInactiveStatus status, Boolean isProfile)
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = " select distinct invIndex from Investigation as inv left join inv.investigationIndex as invIndex"; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
	
		// please ensure no other criteria goes above this search element///
		if (investigationCode != null)
		{
			condStr.append(andStr + " where inv.providerInvCode = :invCode");
			markers.add("invCode");
			values.add(investigationCode);
			andStr = " and ";
		}
		else
			andStr = " where ";
		////////////////////////////////////////////////////////////////////
		
		if(name != null)
		{
			condStr.append(andStr + " invIndex.upperName like :name");
 			markers.add("name");
			values.add(name.toUpperCase() + "%");
			andStr = " and ";	
		}
		
		if(categoryLookup != null)
		{
			condStr.append(andStr + " invIndex.category = :category");
 			markers.add("category");
			values.add(getDomLookup(categoryLookup));
			andStr = " and ";	
		}	
			
		if(isProfile != null)
		{
			condStr.append(andStr + " invIndex.isProfile = :isProfile");
			markers.add("isProfile");
			values.add(isProfile);
			andStr = " and ";
		}
		
		if(status != null)
		{
			condStr.append(andStr + " invIndex.activeStatus = :status");
			markers.add("status");
			values.add(getDomLookup(status));
			andStr = " and ";
		}

		hql += condStr.toString();
		return InvestigationIndexShortVoAssembler.createInvestigationIndexShortVoCollectionFromInvestigationIndex(factory.find(hql,markers,values)).sort();
	}

	public InvestigationIndexVo getInvestigationIndex(Integer recordId)
	{
		if(recordId == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		InvestigationIndexVo voInvestigationIndex = InvestigationIndexVoAssembler.create((InvestigationIndex) factory.getDomainObject(InvestigationIndex.class,recordId));
		
		//WDEV-16994
		if (voInvestigationIndex == null)
			return null;
		
		if(voInvestigationIndex.getSynonymsIsNotNull() && voInvestigationIndex.getSynonyms().size() > 0)
		{
			InvSynonymVoCollection coll = new InvSynonymVoCollection();
			for(int i = 0; i < voInvestigationIndex.getSynonyms().size(); i++)
			{
				InvSynonymVo syn = voInvestigationIndex.getSynonyms().get(i);
				if(syn.getActiveStatusIsNotNull() && syn.getActiveStatus().equals(Boolean.TRUE))
					coll.add(syn);
			}
			voInvestigationIndex.setSynonyms(coll);
		}
		return voInvestigationIndex;	
	}

	public ServiceShortVoCollection listServiceforLocationByType(LocationType locationType) 
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = "Select distinct locService.service from LocationService locService where locService.location.type = :locationType and locService.service.isActive = :isActive";
		List services = factory.find(hql,new String[]{"locationType","isActive"},new Object[]{getDomLookup(locationType),Boolean.TRUE});
	
		return ServiceShortVoAssembler.createServiceShortVoCollectionFromService(services);
	}

	//WDEV-17122
	public ServiceShortVoCollection listServiceforCategoryByType(ServiceCategory serviceCategory)
	{
		DomainFactory factory = getDomainFactory();
			
		String hql = "Select serv from Service as serv where serv.serviceCategory = :serviceCategory and serv.isActive = :isActive";
		List services = factory.find(hql,new String[]{"serviceCategory","isActive"},new Object[]{getDomLookup(serviceCategory),Boolean.TRUE});
		
		return ServiceShortVoAssembler.createServiceShortVoCollectionFromService(services);
	}
}
