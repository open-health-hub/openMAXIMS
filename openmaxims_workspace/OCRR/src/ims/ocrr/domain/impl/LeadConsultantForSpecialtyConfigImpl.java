//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.ocrr.domain.impl;

import java.util.List;

import ims.domain.DomainFactory;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.configuration.domain.objects.SpecialtyLeadConsultant;
import ims.ocrr.domain.base.impl.BaseLeadConsultantForSpecialtyConfigImpl;
import ims.ocrr.vo.LeadConsultantForSpecialtyConfigVo;
import ims.ocrr.vo.domain.LeadConsultantForSpecialtyConfigVoAssembler;

public class LeadConsultantForSpecialtyConfigImpl extends BaseLeadConsultantForSpecialtyConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.ocrr.vo.LeadConsultantForSpecialtyConfigVoCollection listLeadConsultantForSpecialty()
	{
		DomainFactory factory = getDomainFactory();
		String query = "from SpecialtyLeadConsultant as specLeadCons";

		List<?> LeadConsList = factory.find(query);
		return LeadConsultantForSpecialtyConfigVoAssembler.createLeadConsultantForSpecialtyConfigVoCollectionFromSpecialtyLeadConsultant(LeadConsList);
	
	}
	
	public void removeLeadCons(LeadConsultantForSpecialtyConfigVo leadCons) throws ForeignKeyViolationException
	{
		if (leadCons == null)
			throw new CodingRuntimeException("Cannot remove LeadConsultant if null . ");
		
		try
		{
			DomainFactory factory = getDomainFactory();
			SpecialtyLeadConsultant domainLeadCons = LeadConsultantForSpecialtyConfigVoAssembler.extractSpecialtyLeadConsultant(factory, leadCons);			
			factory.delete(domainLeadCons);
		}
		catch (ForeignKeyViolationException e)
		{
			throw new ForeignKeyViolationException("This Configuration is in use!", e);
		}
	}

	public Boolean isStale(LeadConsultantForSpecialtyConfigVo globalContext)
	{
		if (globalContext == null || globalContext.getID_SpecialtyLeadConsultant()== null)
		{
			throw new CodingRuntimeException("Cannot get LeadConsultantForSpecialtyConfigFBVo on null Id ");
		}
				
		DomainFactory factory = getDomainFactory();
		SpecialtyLeadConsultant domainLeadCons = (SpecialtyLeadConsultant) factory.getDomainObject(SpecialtyLeadConsultant.class, globalContext.getID_SpecialtyLeadConsultant());
		
		if(domainLeadCons==null)
		{
			return true;
		}
		
		if (domainLeadCons.getVersion() > globalContext.getVersion_SpecialtyLeadConsultant())
		{
			return true;
		}
		
		return false;
	}
}
