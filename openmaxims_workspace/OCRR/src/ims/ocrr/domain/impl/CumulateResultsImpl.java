//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.45 build 2446.15058)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.ChartResultVo;
import ims.core.vo.ChartResultVoCollection;
import ims.core.vo.DataSetTypeVo;
import ims.core.vo.domain.ChartResultVoAssembler;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.ocrr.configuration.domain.objects.Analyte;
import ims.ocrr.configuration.vo.AnalyteRefVo;
import ims.ocrr.configuration.vo.AnalyteRefVoCollection;
import ims.ocrr.domain.base.impl.BaseCumulateResultsImpl;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.orderingresults.domain.objects.OrderSpecimen;
import ims.ocrr.orderingresults.domain.objects.ResultComponent;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.orderingresults.vo.OrderSpecimenRefVo;
import ims.ocrr.vo.ChartResultAnalyteWithDatasetVo;
import ims.ocrr.vo.OrderInvestigationChartVo;
import ims.ocrr.vo.OrderInvestigationDFTForCumulateResultsVo;
import ims.ocrr.vo.OrderInvestigationVo;
import ims.ocrr.vo.OrderSpecimenLabSpecCommentsVo;
import ims.ocrr.vo.OrderSpecimenLiteVo;
import ims.ocrr.vo.domain.ChartResultAnalyteWithDatasetVoAssembler;
import ims.ocrr.vo.domain.OrderInvestigationChartVoAssembler;
import ims.ocrr.vo.domain.OrderInvestigationDFTForCumulateResultsVoAssembler;
import ims.ocrr.vo.domain.OrderInvestigationVoAssembler;
import ims.ocrr.vo.domain.OrderSpecimenLabSpecCommentsVoAssembler;
import ims.ocrr.vo.domain.OrderSpecimenLiteVoAssembler;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.ResultValueType;

import java.util.ArrayList;
import java.util.List;

public class CumulateResultsImpl extends BaseCumulateResultsImpl
{
  
	private static final long serialVersionUID = 1L;

	/**
	 * WDEV-12607
	* lists all results
	*/
	public ims.core.vo.ChartResultVoCollection listResults(PatientRefVo patient, AnalyteRefVoCollection analytes, Date startDate, Date endDate, Boolean isTabularView) throws ims.domain.exceptions.DomainInterfaceException
	{
		if(patient == null || patient.getID_Patient() == null)
			throw new DomainInterfaceException("Invalid patient");
		if(startDate == null)
			throw new DomainInterfaceException("Invalid start date");
		if(endDate == null)
			throw new DomainInterfaceException("Invalid end date");
		
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		String analytesID = buildAnalytesStringID(analytes);
		
		StringBuffer query = new StringBuffer();

		query.append("SELECT component, investigation, specimen ");
		
		query.append("FROM OcsOrderSession AS ord JOIN ord.patient AS patient JOIN ord.investigations AS investigation ");
		query.append(" JOIN investigation.investigation as inv JOIN inv.investigationIndex AS invIndex JOIN inv.eventType as eType");
		query.append(" JOIN investigation.resultDetails as results JOIN results.pathologyResultDetails AS resultDetails JOIN resultDetails.resultComponents AS component LEFT JOIN component.analyte AS analyte ");
		query.append(" JOIN investigation.specimen AS specimen ");
		
		query.append("WHERE ");
		query.append(" analyte.id IN (").append(analytesID).append(") AND ");
		query.append(" component.obsDateTime BETWEEN :StartDate AND :EndDate AND (component.resValType.id = :NMResultType" + (Boolean.TRUE.equals(isTabularView) ? " or component.resValType.id = :SNResultType or component.resValType.id = :STResultType" : "") + ") AND patient.id = :PatientID AND eType.id <> :TimeSeries ");//WDEV-16232
		
		query.append("ORDER BY component.obsDateTime DESC ");
		
		
		paramNames.add("PatientID");
		paramValues.add(patient.getID_Patient());
		paramNames.add("StartDate");
		paramValues.add(new DateTime(startDate, new Time(0,0,0)).getJavaDate());
		paramNames.add("EndDate");		
		paramValues.add(new DateTime(endDate, new Time(23,59,59)).getJavaDate());
		paramNames.add("NMResultType");
		paramValues.add(new Integer(ResultValueType.NM.getID()));	
		
		if(isTabularView)//WDEV-16232
		{
			paramNames.add("SNResultType");
			paramValues.add(new Integer(ResultValueType.SN.getID()));
			
			paramNames.add("STResultType");
			paramValues.add(new Integer(ResultValueType.ST.getID()));
		}
		
		paramNames.add("TimeSeries");
		paramValues.add(InvEventType.TIME_SERIES.getID());	
		
		
		List<?> searchResults = getDomainFactory().find(query.toString(), paramNames, paramValues);
		
		if (searchResults == null || searchResults.size() == 0)
			return null;
		
		ChartResultVoCollection results = new ChartResultVoCollection();
		
		for (int i = 0; i < searchResults.size(); i++)
		{
			Object[] record = (Object[]) searchResults.get(i);
			
			if (record != null && record.length != 0)
			{
				ChartResultVo chartResult = ChartResultVoAssembler.create((ResultComponent) record[0]);
				
				if (record.length > 1 && record[1] != null)
				{
					OrderInvestigationChartVo orderInvestigation = OrderInvestigationChartVoAssembler.create((OrderInvestigation) record[1]);
					
					chartResult.setInvestigationData(orderInvestigation);
				}
				
				if (record.length > 2 && record[2] != null)
				{
					OrderSpecimenLabSpecCommentsVo labResults = OrderSpecimenLabSpecCommentsVoAssembler.create((OrderSpecimen) record[2]);
					chartResult.setSpecimenComments(labResults);
				}
				
				results.add(chartResult);
			}
		}
		
		return results;
	}
	
	
	
	private String buildAnalytesStringID(AnalyteRefVoCollection analytes)
	{
		if (analytes == null)
			return null;
		
		StringBuilder analyteID = new StringBuilder();
		
		for (int i = 0; i < analytes.size(); i++)
		{
			if (i > 0)
				analyteID.append(", ");
			
			analyteID.append(analytes.get(i).getID_Analyte());
		}

		return analyteID.toString();
	}
	
	
	public DataSetTypeVo getDataset(AnalyteRefVo analyte)
	{
		if(analyte == null || analyte.getID_Analyte() == null)
			throw new DomainRuntimeException("Invalid analyte");
		
		ChartResultAnalyteWithDatasetVo resultAnalyte = ChartResultAnalyteWithDatasetVoAssembler.create((Analyte)getDomainFactory().getDomainObject(Analyte.class, analyte.getID_Analyte()));		
		return resultAnalyte.getDatasetType();
	}
	public OrderInvestigationVo getOrder(OrderInvestigationRefVo orderRef) 
	{
		if(orderRef == null)
			return null;
		
		return OrderInvestigationVoAssembler.create((OrderInvestigation)getDomainFactory().getDomainObject(orderRef));
	}
	public OrderSpecimenLiteVo getOrderSpecimen(OrderSpecimenRefVo specimenRef) 
	{
		if(specimenRef == null)
			return null;
		
		return OrderSpecimenLiteVoAssembler.create((OrderSpecimen)getDomainFactory().getDomainObject(specimenRef));
	}
	
	public OrderInvestigationDFTForCumulateResultsVo getDTFOrderInvestigation(OrderInvestigationRefVo orderInvestigationRef) 
	{
		if(orderInvestigationRef == null)
			return null;
		
		return OrderInvestigationDFTForCumulateResultsVoAssembler.create((OrderInvestigation)getDomainFactory().getDomainObject(orderInvestigationRef));
	}
	
	public OrderInvestigationChartVo getOrderInvestigation(OrderInvestigationRefVo orderInvestigationRef) 
	{
		if(orderInvestigationRef == null)
			return null;
		
		return OrderInvestigationChartVoAssembler.create((OrderInvestigation)getDomainFactory().getDomainObject(orderInvestigationRef));
	}
}
