//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2400.16317)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import ims.core.resource.place.vo.LocationRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.ocrr.domain.MyOrder;
import ims.ocrr.domain.base.impl.BaseWardSpecimenMoveToImpl;
import ims.ocrr.orderingresults.domain.objects.SpecimenWorkListItem;
import ims.ocrr.vo.OrderSpecimenListVo;
import ims.ocrr.vo.PhlebotomyRoundShortVoCollection;
import ims.ocrr.vo.SpecimenCollectionListConfigDetailsVoCollection;
import ims.ocrr.vo.SpecimenWorkListItemListVo;
import ims.ocrr.vo.domain.SpecimenWorkListItemListVoAssembler;
import ims.ocrr.vo.lookups.SpecimenCollectionMethod;
import ims.ocrr.vo.lookups.SpecimenCollectionTime;

public class WardSpecimenMoveToImpl extends BaseWardSpecimenMoveToImpl
{

	private static final long serialVersionUID = 1L;

	public SpecimenCollectionListConfigDetailsVoCollection listSpecimenCollectionDetails(SpecimenCollectionMethod type, Date date)
	{
		MyOrder myOrderImpl = (MyOrder) getDomainImpl(MyOrderImpl.class);
		return myOrderImpl.listSpecimenCollectionDetails(type, date);
	}

	public SpecimenWorkListItemListVo saveWorkListItem(SpecimenWorkListItemListVo specimenWorkListItem, SpecimenWorkListItemListVo prevSpecimenWorkListItem) throws StaleObjectException
	{
		if(specimenWorkListItem == null || prevSpecimenWorkListItem == null)
			throw new CodingRuntimeException("Cannot save null SpecimenWorkListItemListVo");
		if(specimenWorkListItem.isValidated() == false)
		{
			throw new RuntimeException("Current SpecimenWorkListItemListVo is not validated");
		}
		if(prevSpecimenWorkListItem.isValidated() == false)
		{
			throw new RuntimeException("Parent SpecimenWorkListItemListVo is not validated");
		}
				
		DomainFactory factory = getDomainFactory();

		//Save previous specimen
		SpecimenWorkListItem doPrevSpecimen = SpecimenWorkListItemListVoAssembler.extractSpecimenWorkListItem(factory, prevSpecimenWorkListItem);
		factory.save(doPrevSpecimen);
		SpecimenWorkListItemListVo voPrevSpecimen = SpecimenWorkListItemListVoAssembler.create(doPrevSpecimen);

		//Avoid stale object Exception by setting again the specimen and setting the comment from the old vo
		OrderSpecimenListVo newSpecimen = voPrevSpecimen.getSpecimen();
		specimenWorkListItem.getSpecimen().setCollectorComment(newSpecimen.getCollectorComment());
		specimenWorkListItem.setSpecimen(newSpecimen);
		//Save the newly created specimen
		SpecimenWorkListItem doSpecimen = SpecimenWorkListItemListVoAssembler.extractSpecimenWorkListItem(factory, specimenWorkListItem);
		factory.save(doSpecimen);

		return voPrevSpecimen;
	}

	public PhlebotomyRoundShortVoCollection listClosedRounds(Date date, SpecimenCollectionTime round, LocationRefVo ward)
	{
		MyOrder myOrderImpl = (MyOrder) getDomainImpl(MyOrderImpl.class);
		return myOrderImpl.listClosedRounds(date, round, ward);
		
	}
}
