//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.30 build 2012.21169)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import ims.domain.DomainFactory;
import ims.domain.DomainFactory.ORDERMODE;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.hibernate3.IMSCriteria;
import ims.domain.impl.DomainImpl;
import ims.ocrr.configuration.domain.objects.PathSpecimenContainer;
import ims.ocrr.vo.PathSpecimenContainerVo;
import ims.ocrr.vo.PathSpecimenContainerVoCollection;
import ims.ocrr.vo.domain.PathSpecimenContainerVoAssembler;

import java.util.List;

public class SpecimenContainerListImpl extends DomainImpl implements ims.ocrr.domain.SpecimenContainerList, ims.domain.impl.Transactional
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	* lists PathSpecimenContainers
	*/
	public ims.ocrr.vo.PathSpecimenContainerVoCollection listPathSpecimenContainers(PathSpecimenContainerVo filter)
	{
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc= new IMSCriteria (PathSpecimenContainer.class,factory);
		imsc.addOrder("pathSpecimenOrder", ORDERMODE.ASC);
		if (filter!=null)
		{
			if (filter.getNameIsNotNull())
			{
				imsc.like("name", "%"+filter.getName()+"%");
			}
			if (filter.getManufacturerIsNotNull())
				imsc.equal("manufacturer.id", getDomLookup(filter.getManufacturer()).getId());
			if (filter.getIsActiveIsNotNull())
				imsc.equal("isActive", filter.getIsActive());
		}
			
		List<?> containers=imsc.find();
		return PathSpecimenContainerVoAssembler.createPathSpecimenContainerVoCollectionFromPathSpecimenContainer(containers);
	}

	public void savePathSpecimenContainers(PathSpecimenContainerVoCollection specimens) throws StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();
		
		for (int i=0;i<specimens.size();i++)
		{
			factory.save(PathSpecimenContainerVoAssembler.extractPathSpecimenContainer(factory, specimens.get(i)));
		}
		
	}

	
}
