//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.54 build 2714.21485)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.domain.ResultDialog;
import ims.ocrr.domain.base.impl.BaseResultHistoryImpl;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.vo.OrderResultHistoryVo;
import ims.ocrr.vo.OrderResultHistoryVoCollection;
import ims.ocrr.vo.PathologyResultDetailVo;
import ims.ocrr.vo.SpecimenNameVoCollection;
import ims.ocrr.vo.domain.OrderResultHistoryVoAssembler;
import ims.ocrr.vo.domain.SpecimenNameVoAssembler;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.InvType;
import ims.ocrr.vo.lookups.LookupHelper;
import ims.ocrr.vo.lookups.ResultStatus;
import ims.vo.LookupInstVo;

public class ResultHistoryImpl extends BaseResultHistoryImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listResultHistory
	*/
	public ims.ocrr.vo.OrderResultHistoryVoCollection listResultHistory(ims.ocrr.orderingresults.vo.OrderInvestigationRefVo orderInv)
	{
		if(orderInv == null || orderInv.getID_OrderInvestigation() == null)
			throw new CodingRuntimeException("orderInv parameter is null in method listResultHistory");
		
		DomainFactory factory = getDomainFactory();
		OrderInvestigation doOrderInv = (OrderInvestigation) factory.getDomainObject(orderInv);
		
		InvType investigationType = LookupHelper.getInvTypeInstance(getLookupService(), doOrderInv.getInvestigation().getType().getId());
		InvEventType investigationEventType = LookupHelper.getInvEventTypeInstance(getLookupService(), doOrderInv.getInvestigation().getEventType().getId());
		boolean isDFT = isDFT(investigationEventType);
		
		OrderResultHistoryVoCollection voCollResult =  OrderResultHistoryVoAssembler.createOrderResultHistoryVoCollectionFromOrderResultHistory(doOrderInv.getResultHistory()).sort(SortOrder.DESCENDING);
		
		//adding unmapped fields
		for(int i=0;i<voCollResult.size();i++)
		{
			if(doOrderInv.getInvestigation() != null &&    doOrderInv.getInvestigation().getInvestigationIndex() != null)
				voCollResult.get(i).setInvestigationName(doOrderInv.getInvestigation().getInvestigationIndex().getName());

			if(doOrderInv.getInvestigation() != null &&    doOrderInv.getInvestigation().getInvestigationIndex() != null)
				voCollResult.get(i).setOrderAbility( LookupHelper.getInvestigationOrderabilityInstance(getLookupService(), doOrderInv.getInvestigation().getInvestigationIndex().getOrderability().getId()));
			
			if(doOrderInv.getRequestedLocation() != null)
				voCollResult.get(i).setRequestedLocation(LocationLiteVoAssembler.create(doOrderInv.getRequestedLocation()));
			
			if(isDFT)// 	WDEV-16232
			{
				voCollResult.get(i).setSpecimen(buildOrderSpecimenCollection(voCollResult.get(i)));
			}
			else
			{
				if (doOrderInv.getSpecimen() != null)// 	WDEV-16232
				{
					voCollResult.get(i).setSpecimen(SpecimenNameVoAssembler.createSpecimenNameVoCollectionFromOrderSpecimen(doOrderInv.getSpecimen()));
				}
			}
			
			if (doOrderInv.getResultSpecimenType() != null)
				voCollResult.get(i).setSpecimenType(new LookupInstVo(doOrderInv.getResultSpecimenType().getId(), doOrderInv.getResultSpecimenType().getText(), true));
			
			if(doOrderInv.getInvestigation() != null && doOrderInv.getInvestigation().getType() != null)
			{
				voCollResult.get(i).setInvType(investigationType);
			}

			if(doOrderInv.getInvestigation() != null && doOrderInv.getInvestigation().getEventType() != null)
			{
				voCollResult.get(i).setInvEventType(investigationEventType);
			}
		}
		
		return voCollResult;
	}

	private SpecimenNameVoCollection buildOrderSpecimenCollection(OrderResultHistoryVo orderResultHistoryVo) 
	{
		if(orderResultHistoryVo == null || orderResultHistoryVo.getResultDetail() == null || orderResultHistoryVo.getResultDetail().getPathologyResultDetails() == null)
			return null;
		
		SpecimenNameVoCollection spec = new SpecimenNameVoCollection();
		
		for(PathologyResultDetailVo pathResult : orderResultHistoryVo.getResultDetail().getPathologyResultDetails())
		{
			if(pathResult == null)
				continue;
			
			spec.add(pathResult.getOrderSpecimen());
		}
		
		return spec;
	}

	private boolean isDFT(InvEventType investigationEventType) 
	{
		if(investigationEventType == null)
			return false;
		
		if(InvEventType.TIME_SERIES.equals(investigationEventType))
			return true;
			
		return false;
	}

	// 	WDEV-15783
	public String getMappingForResultStatusLookup(ResultStatus resultStatusInstance, TaxonomyType extSystem) 
	{
		ResultDialog impl = (ResultDialog) getDomainImpl(PathologyDialogImpl.class);
		return impl.getMappingForResultStatusLookup(resultStatusInstance, extSystem);
	}
}
