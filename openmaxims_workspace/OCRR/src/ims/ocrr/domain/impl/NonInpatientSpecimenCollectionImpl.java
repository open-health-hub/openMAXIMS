//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.55 build 2750.16668)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.ocrr.domain.WardSpecimenCollection;
import ims.ocrr.domain.base.impl.BaseNonInpatientSpecimenCollectionImpl;
import ims.ocrr.vo.domain.SpecimenWorkListItemListVoAssembler;
import ims.ocrr.vo.lookups.SpecimenCollectionMethod;
import ims.ocrr.vo.lookups.SpecimenCollectionStatus;

public class NonInpatientSpecimenCollectionImpl extends BaseNonInpatientSpecimenCollectionImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* list the WorkListItems returned by the search criteria
	*/
	public ims.ocrr.vo.SpecimenWorkListItemListVoCollection listWorkListItems(ims.ocrr.vo.lookups.SpecimenCollectionStatus specimenStatus, ims.ocrr.vo.lookups.SpecimenCollectionStatus secondStatus, ims.framework.utils.Date startDate, ims.framework.utils.Time startTime, ims.framework.utils.Date endDate, ims.framework.utils.Time endTime)
	{
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " where ";
		
		StringBuffer hql = new StringBuffer(" from SpecimenWorkListItem sp ");


		hql.append(andStr);
		hql.append("sp.listType.parent = :LT ");
		markers.add("LT");
		values.add(getDomLookup(SpecimenCollectionMethod.OTHER));
		andStr = " and ";
		
		if (specimenStatus != null)
		{
			boolean hasSecondStatus = secondStatus != null;

			hql.append(andStr);
			if(hasSecondStatus)
				hql.append(" (");
			
			hql.append(" sp.collectionStatus = :COLSTAT ");
			markers.add("COLSTAT");
			values.add(getDomLookup(specimenStatus));
			
			andStr = " and ";
			
			if(hasSecondStatus)
			{
				hql.append(" or ");
				hql.append(" sp.collectionStatus = :COLSTAT2 ");
				markers.add("COLSTAT2");
				values.add(getDomLookup(secondStatus));
			}
			
			if(hasSecondStatus)
				hql.append(")");
		}
		else
		{
			hql.append(andStr);
			hql.append(" sp.collectionStatus <> :COLSTAT ");
			markers.add("COLSTAT");
			values.add(getDomLookup(SpecimenCollectionStatus.AWAITING_AUTHORISATION));
			andStr = " and ";
		}

		String startDateTimeQuery = "((sp.dateToCollect >= :STARTDATE and sp.timeToCollect = null) or (sp.dateToCollect > :STARTDATE or (sp.dateToCollect = :STARTDATE and sp.timeToCollect >= :STARTTIME)))";
		String endDateTimeQuery   = "((sp.dateToCollect <= :ENDDATE   and sp.timeToCollect = null) or (sp.dateToCollect < :ENDDATE   or (sp.dateToCollect = :ENDDATE   and sp.timeToCollect <= :ENDTIME)))";
		if(startTime == null && endTime == null)
		{
			hql.append(andStr);
			hql.append("(sp.dateToCollect  between :STARTDATE and :ENDDATE)");
			markers.add("STARTDATE");
			markers.add("ENDDATE");
			values.add(startDate.getDate());
			values.add(endDate.getDate());
		}
		else if(startTime != null && endTime != null)
		{
			hql.append(andStr);
			hql.append(startDateTimeQuery);
			hql.append(" and ");
			hql.append(endDateTimeQuery);
			markers.add("STARTDATE");
			markers.add("STARTTIME");
			markers.add("ENDDATE");
			markers.add("ENDTIME");
			values.add(startDate.getDate());
			values.add(startTime.toString());
			values.add(endDate.getDate());
			values.add(endTime.toString());
			andStr = " and ";
		}
		else if(startTime != null && endTime == null)
		{
			hql.append(andStr);
			hql.append(startDateTimeQuery);
			hql.append(" and ");
			hql.append("(sp.dateToCollect <= :ENDDATE)");
			markers.add("STARTDATE");
			markers.add("STARTTIME");
			markers.add("ENDDATE");
			values.add(startDate.getDate());
			values.add(startTime.toString());
			values.add(endDate.getDate());
			andStr = " and ";
		}
		else if(startTime == null && endTime != null)
		{
			hql.append(andStr);
			hql.append("(sp.dateToCollect >= :STARTDATE)");
			hql.append(" and ");
			hql.append(endDateTimeQuery);
			markers.add("STARTDATE");
			markers.add("ENDDATE");
			markers.add("ENDTIME");
			values.add(startDate.getDate());
			values.add(endDate.getDate());
			values.add(endTime.toString());
			andStr = " and ";
		}
		
		hql.append(andStr);
		hql.append("sp.specimen.order.patient.ward is null");
		
		hql.append(" order by sp.dateToCollect asc, sp.timeToCollect asc");

		List list = getDomainFactory().find(hql.toString(), markers, values);
		return SpecimenWorkListItemListVoAssembler.createSpecimenWorkListItemListVoCollectionFromSpecimenWorkListItem(list).sort();
	}

	/**
	* Returns a MosList based on the search criteria in the passed in filter
	*/
	public ims.core.vo.MemberOfStaffShortVoCollection listMembersOfStaff(ims.core.vo.MemberOfStaffShortVo filter)
	{
		WardSpecimenCollection impl = (WardSpecimenCollection) getDomainImpl(WardSpecimenCollectionImpl.class);
		return impl.listMembersOfStaff(filter);
	}

	/**
	* saveOrderSpecimen
	*/
	public ims.ocrr.vo.SpecimenWorkListItemListVo saveWorkListItem(ims.ocrr.vo.SpecimenWorkListItemListVo orderSpecimenVo) throws ims.domain.exceptions.StaleObjectException
	{
		WardSpecimenCollection impl = (WardSpecimenCollection) getDomainImpl(WardSpecimenCollectionImpl.class);
		return impl.saveWorkListItem(orderSpecimenVo);
	}

	/**
	* checks to see if there is at least one InvestigationIndex having phlebMayCollect = true for the current SpecimenWorkListItem
	*/
	public Boolean isAtLeastOneActivePhlebMayCollect(ims.ocrr.orderingresults.vo.SpecimenWorkListItemRefVo specimenWorkListItemRefVo)
	{
		WardSpecimenCollection impl = (WardSpecimenCollection) getDomainImpl(WardSpecimenCollectionImpl.class);
		return impl.isAtLeastOneActivePhlebMayCollect(specimenWorkListItemRefVo);
	}

	/**
	* get the PatientShort
	*/
	public ims.core.vo.PatientShort getPatient(ims.core.patient.vo.PatientRefVo patientRefVo)
	{
		WardSpecimenCollection impl = (WardSpecimenCollection) getDomainImpl(WardSpecimenCollectionImpl.class);
		return impl.getPatient(patientRefVo);
	}
}
