//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.71 build 3716.26758)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.ocrr.domain.impl;

import ims.admin.vo.AppRoleLiteVoCollection;
import ims.admin.vo.domain.AppRoleLiteVoAssembler;
import ims.core.configuration.domain.objects.AppRole;
import ims.core.configuration.vo.AppRoleRefVo;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.configuration.domain.objects.RoleDisciplineSecurityLevel;
import ims.ocrr.domain.base.impl.BaseRoleSecurityLevelConfigImpl;
import ims.ocrr.vo.RoleDisciplineSecurityLevelVoCollection;
import ims.ocrr.vo.domain.RoleDisciplineSecurityLevelVoAssembler;
import ims.ocrr.vo.domain.SecurityLevelLiteVoAssembler;

import java.util.Iterator;
import java.util.List;

public class RoleSecurityLevelConfigImpl extends BaseRoleSecurityLevelConfigImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listActiveAppRole
	*/
	public ims.admin.vo.AppRoleLiteVoCollection listActiveAppRole()
	{
		return  AppRoleLiteVoAssembler.createAppRoleLiteVoCollectionFromAppRole(getDomainFactory().listDomainObjects(AppRole.class)).sort();
	}

	/**
	* listActiveServiceByCategories a list of the active services for the PATHOLOGY & RADIOLOGY ServiceCategory lookup instances
	*/
	public ims.core.vo.ServiceLiteVoCollection listActiveServiceByOCSCategories()
	{
		String hql = "from Service ser where ser.serviceCategory in ( " + getIdString(new ServiceCategory[]{ServiceCategory.PATHOLOGY_DISCIPLINE, ServiceCategory.RADIOLOGY_MODALITY, ServiceCategory.CLINICAL}) + " ) and ser.isActive = true order by ser.serviceName ";
		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(getDomainFactory().find(hql));
	}

	private String getIdString(ServiceCategory[] categories)
	{
		if(categories == null || categories.length == 0)
			throw new CodingRuntimeException("no ocs categories provided in method getIdString");
		
		String idString = "";
		
		for(int i=0;i<categories.length;i++)
		{
			idString += categories[i].getID();
			idString += ((categories.length - (i+1)) > 0 ? "," : "");
		}
		
		return idString;
	}
	
	/**
	* listSecurityLevel - order by securitylevel ascending
	*/
	public ims.ocrr.vo.SecurityLevelLiteVoCollection listSecurityLevel()
	{
		String hql = "from SecurityLevel sec order by sec.securityLevel asc";
		List lstSecs = getDomainFactory().find(hql);
		return SecurityLevelLiteVoAssembler.createSecurityLevelLiteVoCollectionFromSecurityLevel(lstSecs);
	}

	public RoleDisciplineSecurityLevelVoCollection listRoleDisciplineSecurityLevelByRole(AppRoleRefVo voRole)
	{
		String hql = "from RoleDisciplineSecurityLevel rds where rds.role.id = " + voRole.getID_AppRole();
		List lstRdss = getDomainFactory().find(hql);
		return RoleDisciplineSecurityLevelVoAssembler.createRoleDisciplineSecurityLevelVoCollectionFromRoleDisciplineSecurityLevel(lstRdss);
	}

	public AppRoleLiteVoCollection listRolesNotUsedInRoleDisciplineSecurityLevel()
	{
		String hql = "select aRole from AppRole as aRole where aRole.id not in (select rds.role from RoleDisciplineSecurityLevel rds)";
		List lstRoles = getDomainFactory().find(hql);
		return AppRoleLiteVoAssembler.createAppRoleLiteVoCollectionFromAppRole(lstRoles);	
	}

	public void saveRoleDisciplineSecurity(RoleDisciplineSecurityLevelVoCollection voCollRoleDisciplineSecurity) throws StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		
		List doLstRoleDispSec = RoleDisciplineSecurityLevelVoAssembler.extractRoleDisciplineSecurityLevelList(factory, voCollRoleDisciplineSecurity);
		Iterator it = doLstRoleDispSec.iterator();
		while(it.hasNext())
		{
			RoleDisciplineSecurityLevel doRoleDispSec = (RoleDisciplineSecurityLevel)it.next();
			factory.save(doRoleDispSec);
		}
	}
}
