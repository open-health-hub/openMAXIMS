//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4696.13908)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.dftcollectiontypeconfigurations;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.ocrr.forms.dftcollectiontypeconfigurations.GenForm.grdSiteCollectionTypeRow;
import ims.ocrr.vo.DFTCollectionTypesConfigVo;
import ims.ocrr.vo.lookups.LookupHelper;
import ims.ocrr.vo.lookups.SpecimenCollectionType;
import ims.ocrr.vo.lookups.SpecimenCollectionTypeCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;


	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.setMode(FormMode.VIEW);
		
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save())
			open();
	}
	private boolean save()
	{
		String[] uiErrors = getUIErrors();
		if (uiErrors != null)
		{
			engine.showErrors(uiErrors);
			return false;
		}
		DFTCollectionTypesConfigVo record = populateDataFromScreen(form.getLocalContext().getCurrentDFTCollectionTypesConfig());
		String[] errors = record.validate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try 
		{
			domain.save(record);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		return true;
	}
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		boolean allarefalse = true;
		for(int i = 0; i < form.grdSiteCollectionType().getRows().size();i++)
		{
			if( form.grdSiteCollectionType().getRows().get(i).getColumnSelect() == true )
			{
				allarefalse = false;
				break;
			}
		}
		
		if( allarefalse == true)
		{
			errors.add(" Please select at least one Type");
		}
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	private DFTCollectionTypesConfigVo populateDataFromScreen( DFTCollectionTypesConfigVo record)
	{
		if( record == null )
			record = new DFTCollectionTypesConfigVo();
		SpecimenCollectionTypeCollection tempColl = new SpecimenCollectionTypeCollection();
		for(int i = 0; i < form.grdSiteCollectionType().getRows().size();i++)
		{
			if( form.grdSiteCollectionType().getRows().get(i).getColumnSelect() == true)
			{
				tempColl.add(form.grdSiteCollectionType().getRows().get(i).getValue());
			}
		}
		record.setSiteCollectionType(tempColl);
		return record;
	}
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	private void open()
	{
		clearControls();
		form.getLocalContext().setCurrentDFTCollectionTypesConfig(domain.getDFTCollectionTypesConfigVo());
		populatehardcodedrowsgrid();
		if( form.getLocalContext().getCurrentDFTCollectionTypesConfigIsNotNull() )
		{
			populateScreenFromData(form.getLocalContext().getCurrentDFTCollectionTypesConfig());
		}
		form.setMode(FormMode.VIEW);
	}
	private void clearControls()
	{
		form.grdSiteCollectionType().getRows().clear();
	}
	private void populateScreenFromData(DFTCollectionTypesConfigVo dftcol)
	{
		
		if( dftcol == null || !dftcol.getSiteCollectionTypeIsNotNull() || dftcol.getSiteCollectionType().size() < 1)
			return;
		
		for( int i = 0; i < form.grdSiteCollectionType().getRows().size();i++)
		{
			
			for(int j = 0 ;j < dftcol.getSiteCollectionType().size(); j++)
			{
				if( form.grdSiteCollectionType().getRows().get(i).getValue().equals(dftcol.getSiteCollectionType().get(j)))
				{
					grdSiteCollectionTypeRow row = form.grdSiteCollectionType().getRows().get(i);
					row.setColumnSelect(true);
					break;
				}
			}
		}
		
	}
	private void populatehardcodedrowsgrid()
	{
		
		ims.framework.cn.data.TreeNode[] rootNodes = LookupHelper.getSpecimenCollectionType(domain.getLookupService()).getRootNodes();
		for (int i = 0; i < rootNodes.length; i++)
		{
			SpecimenCollectionType spectype = (SpecimenCollectionType) rootNodes[i];
			grdSiteCollectionTypeRow row = form.grdSiteCollectionType().getRows().newRow();
			row.setColumnType(spectype.getText());
			row.setColumnSelect(false);
			row.setValue(spectype);
			
			
		}
		
	}
}
