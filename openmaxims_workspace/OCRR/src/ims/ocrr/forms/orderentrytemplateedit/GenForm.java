//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.orderentrytemplateedit;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabComponentsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbColorSeparatorComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.framework.utils.Color value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.framework.utils.Color value)
				{
					return super.control.removeRow(value);
				}
				public ims.framework.utils.Color getValue()
				{
					return (ims.framework.utils.Color)super.control.getValue();
				}
				public void setValue(ims.framework.utils.Color value)
				{
					// should add value if does not exist
					if(value != null && super.control.getValues() != null)
					{
						boolean exist = false;
						for(int x = 0; x < super.control.getValues().size(); x++)
						{
							ims.framework.utils.Color item = (ims.framework.utils.Color)super.control.getValues().get(x);
							if(item != null && item.equals(value))
							{
								exist = true;
								break;
							}
						}
						if(!exist)
						{
							newRow(value, value.getText(), value.getImage());
						}
					}
					super.control.setValue(value);
				}
			}
			public static class grdColumnNamesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdColumnNamesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolImageReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolImageReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolImageOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getcolImage()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setcolImage(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellcolImageTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolNameOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolName()
				{
					return (String)super.row.get(1);
				}
				public void setcolName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.ocrr.vo.OrderEntryTemplateColumnVo getValue()
				{
					return (ims.ocrr.vo.OrderEntryTemplateColumnVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.OrderEntryTemplateColumnVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdColumnNamesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdColumnNamesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdColumnNamesRow get(int index)
				{
					return new grdColumnNamesRow(super.collection.get(index));
				}
				public grdColumnNamesRow newRow()
				{
					return new grdColumnNamesRow(super.collection.newRow());
				}
				public grdColumnNamesRow newRow(boolean autoSelect)
				{
					return new grdColumnNamesRow(super.collection.newRow(autoSelect));
				}
				public grdColumnNamesRow newRowAt(int index)
				{
					return new grdColumnNamesRow(super.collection.newRowAt(index));
				}
				public grdColumnNamesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdColumnNamesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdColumnNamesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.ocrr.vo.OrderEntryTemplateColumnVoCollection getValues()
				{
					ims.ocrr.vo.OrderEntryTemplateColumnVoCollection listOfValues = new ims.ocrr.vo.OrderEntryTemplateColumnVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.OrderEntryTemplateColumnVo getValue()
				{
					return (ims.ocrr.vo.OrderEntryTemplateColumnVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.OrderEntryTemplateColumnVo value)
				{
					super.grid.setValue(value);
				}
				public grdColumnNamesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdColumnNamesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdColumnNamesRowCollection getRows()
				{
					return new grdColumnNamesRowCollection(super.grid.getRows());
				}
				public grdColumnNamesRow getRowByValue(ims.ocrr.vo.OrderEntryTemplateColumnVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdColumnNamesRow(row);
				}
				public void setcolImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdComponentsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdComponentsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolImageReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolImageReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolImageOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getcolImage()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setcolImage(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellcolImageTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolNameOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolName()
				{
					return (String)super.row.get(1);
				}
				public void setcolName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(2);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getcolStatus()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.row.get(2);
				}
				public void setcolStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.row.set(2, value, true);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.ocrr.vo.OrderEntryTemplateComponentShortVo getValue()
				{
					return (ims.ocrr.vo.OrderEntryTemplateComponentShortVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.OrderEntryTemplateComponentShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdComponentsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdComponentsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdComponentsRow get(int index)
				{
					return new grdComponentsRow(super.collection.get(index));
				}
				public grdComponentsRow newRow()
				{
					return new grdComponentsRow(super.collection.newRow());
				}
				public grdComponentsRow newRow(boolean autoSelect)
				{
					return new grdComponentsRow(super.collection.newRow(autoSelect));
				}
				public grdComponentsRow newRowAt(int index)
				{
					return new grdComponentsRow(super.collection.newRowAt(index));
				}
				public grdComponentsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdComponentsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdComponentsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.ocrr.vo.OrderEntryTemplateComponentShortVoCollection getValues()
				{
					ims.ocrr.vo.OrderEntryTemplateComponentShortVoCollection listOfValues = new ims.ocrr.vo.OrderEntryTemplateComponentShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.OrderEntryTemplateComponentShortVo getValue()
				{
					return (ims.ocrr.vo.OrderEntryTemplateComponentShortVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.OrderEntryTemplateComponentShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdComponentsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdComponentsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdComponentsRowCollection getRows()
				{
					return new grdComponentsRowCollection(super.grid.getRows());
				}
				public grdComponentsRow getRowByValue(ims.ocrr.vo.OrderEntryTemplateComponentShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdComponentsRow(row);
				}
				public void setcolImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public GridComboBox colStatusComboBox()
				{
					return new GridComboBox(super.grid, 2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 560, 266, 45, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Colour:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 560, 234, 34, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Text:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 560, 208, 178, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Selected Separator Properties:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 560, 8, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Column Names:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Components:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 608, 232, 184, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 608, 264, 184, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbColorSeparatorTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbColorSeparatorTemp);
				cmbColorSeparatorComboBox cmbColorSeparator = (cmbColorSeparatorComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbColorSeparatorComboBox.class, m_cmbColorSeparatorTemp);
				super.addComboBox(cmbColorSeparator);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 608, 296, 48, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Bold", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 560, 32, 232, 168, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				Grid m_grdColumnNamesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdColumnNamesTemp);
				grdColumnNamesGrid grdColumnNames = (grdColumnNamesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdColumnNamesGrid.class, m_grdColumnNamesTemp);
				grdColumnNames.addImageColumn(" ", 0, 0, 20, true, 0);
				grdColumnNames.addStringColumn("Name", 0, 0, -1, false, false, 0, 250, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdColumnNames);
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 536, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdComponentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRROrderEntryTemplateEdit, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdComponentsTemp);
				grdComponentsGrid grdComponents = (grdComponentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdComponentsGrid.class, m_grdComponentsTemp);
				grdComponents.addImageColumn(" ", 0, 0, 24, false, 0);
				grdComponents.addStringColumn("Component", 0, 0, 350, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdComponents.addComboBoxColumn("Status", 0, 0, -1, true, true, false, false, true, -1);
				super.addGrid(grdComponents);
			}

			public TextBox txtTextSeparator()
			{
				return (TextBox)super.getControl(5);
			}
			public cmbColorSeparatorComboBox cmbColorSeparator()
			{
				return (cmbColorSeparatorComboBox)super.getComboBox(0);
			}
			public CheckBox chkSeparatorIsBold()
			{
				return (CheckBox)super.getControl(7);
			}
			public grdColumnNamesGrid grdColumnNames()
			{
				return (grdColumnNamesGrid)super.getGrid(0);
			}
			public grdComponentsGrid grdComponents()
			{
				return (grdComponentsGrid)super.getGrid(1);
			}
		}
		public static class tabTextContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Rich Text Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 792, 320, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
			}

			public RichTextControl richFormText()
			{
				return (RichTextControl)super.getControl(0);
			}
		}
		public static class tabLocationsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdLocationsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdLocationsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolSelectionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolSelectionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolSelectionOpened()
				{
					super.row.showOpened(0);
				}
				public boolean getcolSelection()
				{
					return ((Boolean)super.row.get(0)).booleanValue();
				}
				public void setcolSelection(boolean value)
				{
					super.row.set(0, new Boolean(value));
				}
				public void setCellcolSelectionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolImageReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolImageReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolImageOpened()
				{
					super.row.showOpened(1);
				}
				public ims.framework.utils.Image getcolImage()
				{
					return (ims.framework.utils.Image)super.row.get(1);
				}
				public void setcolImage(ims.framework.utils.Image value)
				{
					super.row.set(1, value);
				}
				public void setCellcolImageTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolNameReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolNameReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolNameOpened()
				{
					super.row.showOpened(2);
				}
				public String getcolName()
				{
					return (String)super.row.get(2);
				}
				public void setcolName(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolNameTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.ocrr.vo.TemplateLocationShortVo getValue()
				{
					return (ims.ocrr.vo.TemplateLocationShortVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.TemplateLocationShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdLocationsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdLocationsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdLocationsRow get(int index)
				{
					return new grdLocationsRow(super.collection.get(index));
				}
				public grdLocationsRow newRow()
				{
					return new grdLocationsRow(super.collection.newRow());
				}
				public grdLocationsRow newRow(boolean autoSelect)
				{
					return new grdLocationsRow(super.collection.newRow(autoSelect));
				}
				public grdLocationsRow newRowAt(int index)
				{
					return new grdLocationsRow(super.collection.newRowAt(index));
				}
				public grdLocationsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdLocationsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdLocationsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.ocrr.vo.TemplateLocationShortVoCollection getValues()
				{
					ims.ocrr.vo.TemplateLocationShortVoCollection listOfValues = new ims.ocrr.vo.TemplateLocationShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.TemplateLocationShortVo getValue()
				{
					return (ims.ocrr.vo.TemplateLocationShortVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.TemplateLocationShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdLocationsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdLocationsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdLocationsRowCollection getRows()
				{
					return new grdLocationsRowCollection(super.grid.getRows());
				}
				public grdLocationsRow getRowByValue(ims.ocrr.vo.TemplateLocationShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdLocationsRow(row);
				}
				public void setcolSelectionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolSelectionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 792, 320, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdLocationsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdLocationsTemp);
				grdLocationsGrid grdLocations = (grdLocationsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdLocationsGrid.class, m_grdLocationsTemp);
				grdLocations.addBoolColumn("Selected", 0, 0, 55, false, false, 0, false);
				grdLocations.addImageColumn(" ", 0, 0, 20, false, 0);
				grdLocations.addStringColumn("Location", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdLocations);
			}

			public grdLocationsGrid grdLocations()
			{
				return (grdLocationsGrid)super.getGrid(0);
			}
		}
		public static class tabRolesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdRolesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdRolesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolSelectReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolSelectOpened()
				{
					super.row.showOpened(0);
				}
				public boolean getcolSelect()
				{
					return ((Boolean)super.row.get(0)).booleanValue();
				}
				public void setcolSelect(boolean value)
				{
					super.row.set(0, new Boolean(value));
				}
				public void setCellcolSelectTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolImageReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolImageReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolImageOpened()
				{
					super.row.showOpened(1);
				}
				public ims.framework.utils.Image getcolImage()
				{
					return (ims.framework.utils.Image)super.row.get(1);
				}
				public void setcolImage(ims.framework.utils.Image value)
				{
					super.row.set(1, value);
				}
				public void setCellcolImageTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolRoleReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolRoleReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolRoleOpened()
				{
					super.row.showOpened(2);
				}
				public String getcolRole()
				{
					return (String)super.row.get(2);
				}
				public void setcolRole(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolRoleTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.ocrr.vo.TemplateRoleShortVo getValue()
				{
					return (ims.ocrr.vo.TemplateRoleShortVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.TemplateRoleShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdRolesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdRolesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdRolesRow get(int index)
				{
					return new grdRolesRow(super.collection.get(index));
				}
				public grdRolesRow newRow()
				{
					return new grdRolesRow(super.collection.newRow());
				}
				public grdRolesRow newRow(boolean autoSelect)
				{
					return new grdRolesRow(super.collection.newRow(autoSelect));
				}
				public grdRolesRow newRowAt(int index)
				{
					return new grdRolesRow(super.collection.newRowAt(index));
				}
				public grdRolesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdRolesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdRolesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.ocrr.vo.TemplateRoleShortVoCollection getValues()
				{
					ims.ocrr.vo.TemplateRoleShortVoCollection listOfValues = new ims.ocrr.vo.TemplateRoleShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.TemplateRoleShortVo getValue()
				{
					return (ims.ocrr.vo.TemplateRoleShortVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.TemplateRoleShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdRolesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdRolesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdRolesRowCollection getRows()
				{
					return new grdRolesRowCollection(super.grid.getRows());
				}
				public grdRolesRow getRowByValue(ims.ocrr.vo.TemplateRoleShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdRolesRow(row);
				}
				public void setcolSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolRoleHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolRoleHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 792, 320, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdRolesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdRolesTemp);
				grdRolesGrid grdRoles = (grdRolesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRolesGrid.class, m_grdRolesTemp);
				grdRoles.addBoolColumn("Select", 0, 0, 55, false, false, 0, true);
				grdRoles.addImageColumn(" ", 0, 0, 20, true, 0);
				grdRoles.addStringColumn("Roles", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdRoles);
			}

			public grdRolesGrid grdRoles()
			{
				return (grdRolesGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 816, 360, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabComponents = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Components", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabComponentsContainer m_tabComponentsContainer = (tabComponentsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabComponentsContainer.class, m_tabComponents, factory);
			super.addContainer(m_tabComponents, m_tabComponentsContainer);
			ims.framework.utils.SizeInfo m_tabComponentsDesignSize = new ims.framework.utils.SizeInfo(816, 360);
			ims.framework.utils.SizeInfo m_tabComponentsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
			m_tabComponentsContainer.setContext(form, appForm, m_tabComponents, loader, form_images_local, contextMenus, startControlID, m_tabComponentsDesignSize, m_tabComponentsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 816, 360, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabText = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Form Text", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabTextContainer m_tabTextContainer = (tabTextContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTextContainer.class, m_tabText, factory);
			super.addContainer(m_tabText, m_tabTextContainer);
			ims.framework.utils.SizeInfo m_tabTextDesignSize = new ims.framework.utils.SizeInfo(816, 360);
			ims.framework.utils.SizeInfo m_tabTextRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
			m_tabTextContainer.setContext(form, appForm, m_tabText, loader, form_images_local, contextMenus, startControlID, m_tabTextDesignSize, m_tabTextRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 816, 360, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabLocations = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Locations", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabLocationsContainer m_tabLocationsContainer = (tabLocationsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabLocationsContainer.class, m_tabLocations, factory);
			super.addContainer(m_tabLocations, m_tabLocationsContainer);
			ims.framework.utils.SizeInfo m_tabLocationsDesignSize = new ims.framework.utils.SizeInfo(816, 360);
			ims.framework.utils.SizeInfo m_tabLocationsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
			m_tabLocationsContainer.setContext(form, appForm, m_tabLocations, loader, form_images_local, contextMenus, startControlID, m_tabLocationsDesignSize, m_tabLocationsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 816, 360, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabRoles = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Roles", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabRolesContainer m_tabRolesContainer = (tabRolesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRolesContainer.class, m_tabRoles, factory);
			super.addContainer(m_tabRoles, m_tabRolesContainer);
			ims.framework.utils.SizeInfo m_tabRolesDesignSize = new ims.framework.utils.SizeInfo(816, 360);
			ims.framework.utils.SizeInfo m_tabRolesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
			m_tabRolesContainer.setContext(form, appForm, m_tabRoles, loader, form_images_local, contextMenus, startControlID, m_tabRolesDesignSize, m_tabRolesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabComponents().setVisible(false);
			tabText().setVisible(false);
			tabLocations().setVisible(false);
			tabRoles().setVisible(false);
		}
		public void settabComponentsEnabled(boolean value)
		{
			tabComponents().setEnabled(value);
		}
		public void settabTextEnabled(boolean value)
		{
			tabText().setEnabled(value);
		}
		public void settabLocationsEnabled(boolean value)
		{
			tabLocations().setEnabled(value);
		}
		public void settabRolesEnabled(boolean value)
		{
			tabRoles().setEnabled(value);
		}
		public void showtabComponents()
		{
			tabText().setVisible(false);
			tabLocations().setVisible(false);
			tabRoles().setVisible(false);
			tabComponents().setVisible(true);
		}
		public void showtabText()
		{
			tabComponents().setVisible(false);
			tabLocations().setVisible(false);
			tabRoles().setVisible(false);
			tabText().setVisible(true);
		}
		public void showtabLocations()
		{
			tabComponents().setVisible(false);
			tabText().setVisible(false);
			tabRoles().setVisible(false);
			tabLocations().setVisible(true);
		}
		public void showtabRoles()
		{
			tabComponents().setVisible(false);
			tabText().setVisible(false);
			tabLocations().setVisible(false);
			tabRoles().setVisible(true);
		}

		public tabComponentsContainer tabComponents()
		{
			return (tabComponentsContainer)super.layers.get(0);
		}
		public tabTextContainer tabText()
		{
			return (tabTextContainer)super.layers.get(1);
		}
		public tabLocationsContainer tabLocations()
		{
			return (tabLocationsContainer)super.layers.get(2);
		}
		public tabRolesContainer tabRoles()
		{
			return (tabRolesContainer)super.layers.get(3);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCategoryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ocrr.vo.lookups.TemplateCategories value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ocrr.vo.lookups.TemplateCategories value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ocrr.vo.lookups.TemplateCategories value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ocrr.vo.lookups.TemplateCategories value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ocrr.vo.lookups.TemplateCategories value)
		{
			return super.control.removeRow(value);
		}
		public ims.ocrr.vo.lookups.TemplateCategories getValue()
		{
			return (ims.ocrr.vo.lookups.TemplateCategories)super.control.getValue();
		}
		public void setValue(ims.ocrr.vo.lookups.TemplateCategories value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("OCRR.OrderEntryTemplateEditorReadOnly", "_cv_OCRR.OrderEntryTemplateEditorReadOnly").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'OCRR.OrderEntryTemplateEditorReadOnly' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuOCRROrderEntryTemplateEdit = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Order Sets", true, false, new Integer(116104), true, false);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditADDPROFILESItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Profiles", true, false, new Integer(116108), true, false);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditADDPROFILESItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Investigations", true, false, new Integer(116105), true, false);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem = factory.createMenuItem(startControlID.intValue() + 4, "Add Column Separator", true, false, new Integer(116107), true, true);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Separator", true, false, new Integer(116106), true, false);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditMOVEUPItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditMOVEUPItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem = factory.createMenuItem(startControlID.intValue() + 7, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditREMOVEItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102148), true, true);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditREMOVEItem);
		form.registerMenu(contextMenus.contextMenuOCRROrderEntryTemplateEdit);


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 194, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 162, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 57, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Menu Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 27, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Form Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Preview", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 104, 88, 728, 59, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 104, 54, 728, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 104, 24, 728, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 104, 192, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 104, 160, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbCategoryTemp);
		cmbCategoryComboBox cmbCategory = (cmbCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCategoryComboBox.class, m_cmbCategoryTemp);
		super.addComboBox(cmbCategory);

		// Link Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 736, 0, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Button btnPreview()
	{
		return (Button)super.getControl(9);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(10);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(11);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(12);
	}
	public TextBox txtDescription()
	{
		return (TextBox)super.getControl(13);
	}
	public TextBox txtMenuName()
	{
		return (TextBox)super.getControl(14);
	}
	public TextBox txtFormName()
	{
		return (TextBox)super.getControl(15);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(0);
	}
	public cmbCategoryComboBox cmbCategory()
	{
		return (cmbCategoryComboBox)super.getComboBox(1);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(18);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				OrderEntryTemplateList = new LocalFormName(116122);
				ItemSelection = new LocalFormName(116105);
				OrderEntryTemplatePreviewDialog = new LocalFormName(116110);
			}
			public final FormName OrderEntryTemplateList;
			public final FormName ItemSelection;
			public final FormName OrderEntryTemplatePreviewDialog;
		}

		public OCRRForms OCRR;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			OCRR = new OCRRImages();
			Admin = new AdminImages();
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				ColumnSeparator = new ImageHelper(116107, "Images/OCRR/ColumnSeparator.gif", new Integer(16), new Integer(16));
				Separator = new ImageHelper(116106, "Images/OCRR/Separator.gif", new Integer(16), new Integer(16));
				Investigation = new ImageHelper(116105, "Images/OCRR/Investigation.gif", new Integer(16), new Integer(16));
				Profile = new ImageHelper(116108, "Images/OCRR/Profile.gif", new Integer(16), new Integer(16));
				OrderSet = new ImageHelper(116104, "Images/OCRR/OrderSet.gif", new Integer(16), new Integer(16));
				Role = new ImageHelper(116114, "Images/OCRR/User-Properties.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ColumnSeparator;
			public final ims.framework.utils.Image Separator;
			public final ims.framework.utils.Image Investigation;
			public final ims.framework.utils.Image Profile;
			public final ims.framework.utils.Image OrderSet;
			public final ims.framework.utils.Image Role;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Location = new ImageHelper(103104, "Images/Admin/location.png", new Integer(16), new Integer(16));
				LocationSite = new ImageHelper(103100, "Images/Admin/location_site.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Location;
			public final ims.framework.utils.Image LocationSite;
		}
		public final OCRRImages OCRR;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_EditedRecord = new ims.framework.ContextVariable("EditedRecord", prefix + "_lv_OCRR.OrderEntryTemplateEdit.__internal_x_context__EditedRecord_" + componentIdentifier + "");
		}
		
		public boolean getEditedRecordIsNotNull()
		{
			return !cxl_EditedRecord.getValueIsNull(context);
		}
		public ims.ocrr.vo.OrderEntryTemplateVo getEditedRecord()
		{
			return (ims.ocrr.vo.OrderEntryTemplateVo)cxl_EditedRecord.getValue(context);
		}
		public void setEditedRecord(ims.ocrr.vo.OrderEntryTemplateVo value)
		{
			cxl_EditedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditedRecord = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class OCRROrderEntryTemplateEdit implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADDORDERSETS = 1;
			public static final int ADDPROFILES = 2;
			public static final int ADDINVESTIGATION = 3;
			public static final int ADDCOLUMNSEPARATOR = 4;
			public static final int ADDSEPARATOR = 5;
			public static final int MOVEUP = 6;
			public static final int MOVEDOWN = 7;
			public static final int REMOVE = 8;
		}
		public void disableAllOCRROrderEntryTemplateEditMenuItems()
		{
			this.contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditADDPROFILESItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditMOVEUPItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditREMOVEItem.setEnabled(false);
		}
		public void hideAllOCRROrderEntryTemplateEditMenuItems()
		{
			this.contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditADDPROFILESItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditMOVEUPItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditREMOVEItem.setVisible(false);
		}
		private Menu contextMenuOCRROrderEntryTemplateEdit;
		public MenuItem getOCRROrderEntryTemplateEditADDORDERSETSItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem;
		public MenuItem getOCRROrderEntryTemplateEditADDPROFILESItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditADDPROFILESItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditADDPROFILESItem;
		public MenuItem getOCRROrderEntryTemplateEditADDINVESTIGATIONItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem;
		public MenuItem getOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem;
		public MenuItem getOCRROrderEntryTemplateEditADDSEPARATORItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem;
		public MenuItem getOCRROrderEntryTemplateEditMOVEUPItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditMOVEUPItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditMOVEUPItem;
		public MenuItem getOCRROrderEntryTemplateEditMOVEDOWNItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem;
		public MenuItem getOCRROrderEntryTemplateEditREMOVEItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditREMOVEItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditREMOVEItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[85];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_OCRR.PreviewedOrderEntryTemplate", "BO-1061100005-ID", "ID_OrderEntryTemplate");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_OCRR.PreviewedOrderEntryTemplate", "BO-1061100005-FORMNAME", "FormName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_OCRR.PreviewedOrderEntryTemplate", "BO-1061100005-MENUNAME", "MenuName");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_OCRR.PreviewedOrderEntryTemplate", "BO-1061100005-DESCRIPTION", "Description");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_OCRR.PreviewedOrderEntryTemplate", "BO-1061100005-TEMPLATECATEGORY", "TemplateCategory");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_OCRR.PreviewedOrderEntryTemplate", "BO-1061100005-ACTIVESTATUS", "ActiveStatus");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_OCRR.PreviewedOrderEntryTemplate", "BO-1061100005-FORMTEXT", "FormText");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderEntryTemplateEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1061100005-ID", "ID_OrderEntryTemplate");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderEntryTemplateEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1061100005-FORMNAME", "FormName");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderEntryTemplateEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1061100005-MENUNAME", "MenuName");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderEntryTemplateEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1061100005-DESCRIPTION", "Description");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderEntryTemplateEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1061100005-TEMPLATECATEGORY", "TemplateCategory");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderEntryTemplateEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1061100005-ACTIVESTATUS", "ActiveStatus");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderEntryTemplateEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1061100005-FORMTEXT", "FormText");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
