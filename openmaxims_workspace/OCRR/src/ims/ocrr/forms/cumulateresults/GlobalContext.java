//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.cumulateresults;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		OCRR = new OCRRContext(context);
		Core = new CoreContext(context);
	}
	public final class OCRRContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private OCRRContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCumulateAnalytesIsNotNull()
		{
			return !cx_OCRRCumulateAnalytes.getValueIsNull(context);
		}
		public ims.ocrr.configuration.vo.AnalyteRefVoCollection getCumulateAnalytes()
		{
			return (ims.ocrr.configuration.vo.AnalyteRefVoCollection)cx_OCRRCumulateAnalytes.getValue(context);
		}

		private ims.framework.ContextVariable cx_OCRRCumulateAnalytes = new ims.framework.ContextVariable("OCRR.CumulateAnalytes", "_cv_OCRR.CumulateAnalytes");
		public boolean getResultDisplayDateIsNotNull()
		{
			return !cx_OCRRResultDisplayDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getResultDisplayDate()
		{
			return (ims.framework.utils.Date)cx_OCRRResultDisplayDate.getValue(context);
		}
		public void setResultDisplayDate(ims.framework.utils.Date value)
		{
			cx_OCRRResultDisplayDate.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OCRRResultDisplayDate = new ims.framework.ContextVariable("OCRR.ResultDisplayDate", "_cv_OCRR.ResultDisplayDate");
		public boolean getSelectGroupsInViewGraphicIsNotNull()
		{
			return !cx_OCRRSelectGroupsInViewGraphic.getValueIsNull(context);
		}
		public Boolean getSelectGroupsInViewGraphic()
		{
			return (Boolean)cx_OCRRSelectGroupsInViewGraphic.getValue(context);
		}
		public void setSelectGroupsInViewGraphic(Boolean value)
		{
			cx_OCRRSelectGroupsInViewGraphic.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OCRRSelectGroupsInViewGraphic = new ims.framework.ContextVariable("OCRR.SelectGroupsInViewGraphic", "_cvp_OCRR.SelectGroupsInViewGraphic");
		public boolean getOrderInvestigationReferenceIsNotNull()
		{
			return !cx_OCRROrderInvestigationReference.getValueIsNull(context);
		}
		public ims.ocrr.orderingresults.vo.OrderInvestigationRefVo getOrderInvestigationReference()
		{
			return (ims.ocrr.orderingresults.vo.OrderInvestigationRefVo)cx_OCRROrderInvestigationReference.getValue(context);
		}

		private ims.framework.ContextVariable cx_OCRROrderInvestigationReference = new ims.framework.ContextVariable("OCRR.OrderInvestigationReference", "_cv_OCRR.OrderInvestigationReference");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getChartDatasetSelectionIsNotNull()
		{
			return !cx_CoreChartDatasetSelection.getValueIsNull(context);
		}
		public ims.vo.interfaces.IChartValueGroup[] getChartDatasetSelection()
		{
			return (ims.vo.interfaces.IChartValueGroup[])cx_CoreChartDatasetSelection.getValue(context);
		}
		public void setChartDatasetSelection(ims.vo.interfaces.IChartValueGroup[] value)
		{
			cx_CoreChartDatasetSelection.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreChartDatasetSelection = new ims.framework.ContextVariable("Core.ChartDatasetSelection", "_cv_Core.ChartDatasetSelection");
		public boolean getSecondPatientShortIsNotNull()
		{
			return !cx_CoreSecondPatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getSecondPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CoreSecondPatientShort.getValue(context);
		}
		public void setSecondPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CoreSecondPatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreSecondPatientShort = new ims.framework.ContextVariable("Core.SecondPatientShort", "_cv_Core.SecondPatientShort");

		private ims.framework.Context context;
	}

	public OCRRContext OCRR;
	public CoreContext Core;
}
