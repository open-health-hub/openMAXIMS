//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.45 build 2385.22037)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.ordersummarydialog;

import ims.admin.vo.SelectItemVo;
import ims.admin.vo.SelectItemVoCollection;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.PatientShort;
import ims.core.vo.enums.SelectItemType;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.forms.ordersummarydialog.GenForm.grdSpecimenRow;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVoCollection;
import ims.ocrr.vo.OcsOrderShortVo;
import ims.ocrr.vo.OcsOrderSummaryVo;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.OcsPathRadResultVoCollection;
import ims.ocrr.vo.OrderInvestigationListVo;
import ims.ocrr.vo.OrderInvestigationListVoCollection;
import ims.ocrr.vo.OrderedInvestigationStatusVo;
import ims.ocrr.vo.PathologyInvestigationVo;
import ims.ocrr.vo.PathologySpecimenOrderInvestigationVo;
import ims.ocrr.vo.PathologySpecimenOrderInvestigationVoCollection;
import ims.ocrr.vo.PathologySpecimenVo;
import ims.ocrr.vo.PathologySpecimenVoCollection;
import ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.ocrr.vo.lookups.SpecimenType;

import com.sun.org.apache.xml.internal.utils.StringVector;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws FormOpenException
	{
		initialise();
		open();
		
		// WDEV-13999
		updateControlsState();
	}


	// WDEV-13999
	@Override
	protected void onGrdSpecimenSelectionChanged() throws PresentationLogicException
	{
		// Auto-generated method stub
		
	}

	/**
	 *	WDEV-13999
	 *	Event handler for 'Amend' button
	 */
	protected void onBtnAmendClick() throws PresentationLogicException
	{
		// Check if 
		if (form.getLocalContext().getOrderSummary() == null || form.getLocalContext().getOrderSummary().getInvestigations() == null)
			return;

		// Build list of investigations that can be amended
		form.getGlobalContext().OCRR.setRejectedInvestigations(new OrderInvestigationListVoCollection());
		
		
		for (OrderInvestigationListVo investigation : form.getLocalContext().getOrderSummary().getInvestigations())
		{
			if (investigation.getOrdInvCurrentStatusIsNotNull() && OrderInvStatus.REJECTED.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus()))
			{
				form.getGlobalContext().OCRR.getRejectedInvestigations().add(investigation);
			}
		}
		
		// Open dialog to select investigation to amend
		engine.open(form.getForms().OCRR.AmendOrderInvestigationDialog, "Select Investigation to amend");
	}
	
	/**
	 * WDEV-13999
	 * Function used to update state of controls
	 */
	private void updateControlsState()
	{
		boolean userHasAuthorizeRoles = engine.hasRight(AppRight.CAN_AUTHORIZE_PATHOLOGY_ORDERS) && engine.hasRight(AppRight.CAN_AUTHORIZE_CLINICAL_IMAGING_ORDERS);
		boolean canOrderBeAuthorized = canOrderBeAuthorized();
		
		
		form.btnCancel().setVisible(engine.hasRight(AppRight.ALLOW_CANCEL_ORDERINVESTIGATION));
		
		form.btnAmend().setVisible(canOrderBeAmmended() && ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") && engine.hasRight(AppRight.ALLOW_ORDERINVESTIGATIONS_CAREUK));
		
		form.btnAuthorise().setVisible(canOrderBeAuthorized);
		form.btnAuthorise().setEnabled(!isCancelled(form.getLocalContext().getOrderSummary()));
		form.btnUpdate().setVisible(canOrderBeAuthorized);
		form.btnUpdate().setEnabled(!isCancelled(form.getLocalContext().getOrderSummary()) && userHasAuthorizeRoles);
	}
	
	private boolean isCancelled(OcsOrderSummaryVo orderSummary)
	{
		if (orderSummary == null || orderSummary.getInvestigations() == null)
			return false;
		
		for (OrderInvestigationListVo investigation : orderSummary.getInvestigations())
		{
			if (!OrderInvStatus.CANCEL_REQUEST.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus())
					&& !OrderInvStatus.CANCELLED.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus()))
				return false;
		}
		
		return true;
	}


	/**
	 * Function used to determine if the oder can be authorised
	 * This works of analysing the local context value for the order
	 */
	private boolean canOrderBeAuthorized()
	{
		OcsOrderSummaryVo orderSummary = form.getLocalContext().getOrderSummary();

		if (orderSummary == null || orderSummary.getInvestigations() == null)
			return false;
		
		// Check order status - not to be cancelled
		int ordersAwaitingAuthorization = 0;
		
		for (OrderInvestigationListVo investigation : orderSummary.getInvestigations())
		{
			if (investigation.getOrdInvCurrentStatus() != null && OrderInvStatus.AWAITING_AUTHORISATION.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus()))
				ordersAwaitingAuthorization++;
			
			if (Category.PATHOLOGY.equals(investigation.getInvestigation().getInvestigationIndex().getCategory())
					&& !engine.hasRight(AppRight.CAN_AUTHORIZE_PATHOLOGY_ORDERS)
					&& investigation.getOrdInvCurrentStatus() != null
					&& OrderInvStatus.AWAITING_AUTHORISATION.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus()))
				return false;
			
			if (Category.CLINICALIMAGING.equals(investigation.getInvestigation().getInvestigationIndex().getCategory())
					&& !engine.hasRight(AppRight.CAN_AUTHORIZE_CLINICAL_IMAGING_ORDERS)
					&& investigation.getOrdInvCurrentStatus() != null
					&& OrderInvStatus.AWAITING_AUTHORISATION.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus()))
				return false;
		}
		
		if (ordersAwaitingAuthorization == 0)
			return false;
		
		if (engine.hasRight(AppRight.CAN_AUTHORIZE_CLINICAL_IMAGING_ORDERS) && engine.hasRight(AppRight.CAN_AUTHORIZE_PATHOLOGY_ORDERS))
			return true;

		return false;
	}


	/**
	 * WDEV-13999
	 * Function used to determine if the order can be amended
	 * This works of analysing the local context value
	 */
	private boolean canOrderBeAmmended()
	{
		if (form.getLocalContext().getOrderSummary() == null)
			return false;
		
		OcsOrderSummaryVo orderSummary = form.getLocalContext().getOrderSummary();
		
		if (orderSummary.getInvestigations() == null)
			return false;
		
		for (OrderInvestigationListVo investigation : orderSummary.getInvestigations())
		{
			if (investigation.getOrdInvCurrentStatusIsNotNull() && OrderInvStatus.REJECTED.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus()))
				return true;
		}
		
		return false;
	}
	
	//WDEV-12947  - if the Order record contains any Investigations that the status is set to 'Awaiting Authorisation','Ordered','Ordered Awaiting Appointment' 
	private boolean doesOrderedInvestigationExist() 
	{
		if(form.getLocalContext().getOrderSummaryIsNotNull())
		{
			OcsOrderSummaryVo voOrderSummary = form.getLocalContext().getOrderSummary();
			if(voOrderSummary.getInvestigationsIsNotNull())
			{
				for(OrderInvestigationListVo investigation : voOrderSummary.getInvestigations())
				{
					if(investigation.getOrdInvCurrentStatusIsNotNull() && investigation.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull())
					{
						boolean invSentRadiologyFromSchedulingService = (Category.CLINICALIMAGING.equals(investigation.getInvestigation().getInvestigationIndex().getCategory()) 
								&& !isInvestigationCompletedOrResulted(investigation))
								&& !isCancelledOrCancelRequested(investigation)
								&& canBeScheduled(investigation);

						
						if(investigation.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.AWAITING_AUTHORISATION)
								||  investigation.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.ORDERED)
								|| investigation.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.ORDERED_AWAITING_APPT)
								|| invSentRadiologyFromSchedulingService)
						{
							if(investigation.getPassesSecurity() == null || (investigation.getPassesSecurityIsNotNull() && investigation.getPassesSecurity()))
								return true;
						}
					}
				}
			}
		}
			
		return false;
	}
	
	private void initialise()
	{
		form.getLocalContext().setPatientType(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		form.btnViewPACS().setVisible(false);
		form.getGlobalContext().OCRR.CentricityWebPACS.setAccessionNumber(null);

		form.getGlobalContext().OCRR.setSelectedInvs(null);
		if(form.getGlobalContext().OCRR.getOrderAwaitingAuthorisation() == null)
		{
			form.btnAuthorise().setVisible(false);
			form.btnUpdate().setVisible(false);
			form.btnCancel().setVisible(false);
		}
		else
		{
			form.btnAuthorise().setVisible(engine.hasRight(AppRight.CAN_AUTHORIZE_PATHOLOGY_ORDERS) || engine.hasRight(AppRight.CAN_AUTHORIZE_CLINICAL_IMAGING_ORDERS));
			form.btnUpdate().setVisible(true);
			form.btnCancel().setVisible(true);
		}
				
		//WDEV-4758
		if(!ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
		{
			form.lblPasEpisodeID().setVisible(false);
			form.txtPasEpisodeID().setVisible(false);
		}
		else
		{
			form.txtPasEpisodeID().setEnabled(false);
		}
		
		if(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) //WDEV-11881
		{
			form.btnCancel().setText("Cancel Investigation(s)");
			form.btnCancel().setVisible(true);
		}
		
		//security level WDEV-9780
		RoleDisciplineSecurityLevelLiteGCVo voRoleDisciplineSecurityLevels = form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels();
		if(voRoleDisciplineSecurityLevels == null || (voRoleDisciplineSecurityLevels != null &&  voRoleDisciplineSecurityLevels.getIsConfigLoadedIsNotNull() && !voRoleDisciplineSecurityLevels.getIsConfigLoaded().equals(false)))
			form.getGlobalContext().OCRR.setRoleDisciplineSecurityLevels(domain.getRoleDisciplineSecurityLevels(engine.getLoggedInRole()));
		
		
		form.getLocalContext().setSelectOrderInvForPACS(null);	//wdev-17378
	}

	private void open()
	{
		clearAllControls();
		populateDemographics();
		
		OcsOrderSummaryVo orderSummary = domain.getOrderSummary(form.getGlobalContext().OCRR.PathologyResults.getOrder());
		
		//WDEV-11080
		orderSummary = enforceSecurity(orderSummary);
		
		populateOrderSummary(orderSummary);
		form.getGlobalContext().OCRR.setQuestionsNotes(orderSummary);
		
		updateControlsState();
	}

	//go through the order summary doing security checks - if they pass set a boolean in each record - store the updated order summary in the local context
	private OcsOrderSummaryVo enforceSecurity(OcsOrderSummaryVo voOrderSummary)
	{		
		if(voOrderSummary == null)
			return null;
		
		//investigations collection
		if(voOrderSummary.getInvestigationsIsNotNull())
		{
			for(OrderInvestigationListVo voOrderInv : voOrderSummary.getInvestigations())
			{
				// WDEV-11080
				voOrderInv.setPassesSecurity(true);
				if (form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
				{
					ServiceRefVo voInvService = voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getProviderServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? voOrderInv.getInvestigation().getProviderService().getLocationService().getService() : null;
					SecurityLevelConfigVo voInvSecurityLevel = voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() ? voOrderInv.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

					//set a boolean in the for security check
					if(!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel,false)) //WDEV-11622
						voOrderInv.setPassesSecurity(false);
				}
				
				//we have done all the investigations above so just need to copy security check result into each record within the specimen's investigation collection
				if(voOrderSummary.getSpecimensIsNotNull())
				{
					for(PathologySpecimenVo voSpec : voOrderSummary.getSpecimens())
					{
						if(voSpec.getInvestigationsIsNotNull())
						{
							for(PathologySpecimenOrderInvestigationVo voSpecOrdInv : voSpec.getInvestigations())
							{
								if(voOrderInv.getBoId().equals(voSpecOrdInv.getBoId()))
								{
									voSpecOrdInv.setPassesSecurity(voOrderInv.getPassesSecurity());
									break;
								}
							}
						}
					}
				}	
			}
		}
		form.getLocalContext().setOrderSummary(voOrderSummary);
		return voOrderSummary;
	}

	private void populateDemographics()
	{
		PatientShort voPatientShort = form.getGlobalContext().Core.getPatientShort();
		
		if(voPatientShort.getNameIsNotNull())
			form.txtName().setValue(voPatientShort.getName().toShortForm());
		if(voPatientShort.getDobIsNotNull())
			form.txtDOB().setValue(voPatientShort.getDob().toString());
		if (voPatientShort.getSexIsNotNull())
			form.txtSex().setValue(voPatientShort.getSex().getText());
		if(voPatientShort.getIdentifiersIsNotNull())
		{
			displayID(voPatientShort);
		}
	}


	private void displayID(PatientShort patient)
	{
		form.lbl2().setValue(form.getLocalContext().getPatientType());
		if(form.getLocalContext().getPatientType().equals("HOSPNUM"))
		{
			if (patient.getHospnum()!=null)

				form.txtHospNo().setValue(patient.getHospnum().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("PKEY"))
		{
			if (patient.getPkey()!=null)
				form.txtHospNo().setValue(patient.getPkey().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("NHSN"))
		{
			if (patient.getNhsn()!=null)
				form.txtHospNo().setValue(patient.getNhsn().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("PPSN"))
		{
			if (patient.getPpsn()!=null)
				form.txtHospNo().setValue(patient.getPpsn().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("CHARTNUM"))
		{
			if (patient.getChartnum()!=null)
				form.txtHospNo().setValue(patient.getChartnum().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("NTPFNUM"))
		{
			if (patient.getNtpfnum()!=null)
				form.txtHospNo().setValue(patient.getNtpfnum().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("SENTNUM"))
		{
			if (patient.getSentnum()!=null)
				form.txtHospNo().setValue(patient.getSentnum().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("DISTRICT"))
		{
			if (patient.getDistrict()!=null)
				form.txtHospNo().setValue(patient.getDistrict().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("EMPI"))
		{
			if (patient.getEmpi()!=null)
				form.txtHospNo().setValue(patient.getEmpi().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("CASENUM"))
		{
			if (patient.getCaseNum()!=null)
				form.txtHospNo().setValue(patient.getCaseNum().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("CLIENTID"))
		{
			if (patient.getClientId()!=null)
				form.txtHospNo().setValue(patient.getClientId().getValue());
		}
		else if(form.getLocalContext().getPatientType().equals("GMSID"))
		{
			if (patient.getGmsId()!=null)
				form.txtHospNo().setValue(patient.getGmsId().getValue());
		}
	}



	private void populateOrderSummary(OcsOrderSummaryVo voOrderSummary)
	{
		form.getGlobalContext().OCRR.setSelectedInvs(null);
		form.getLocalContext().setOrderSummary(voOrderSummary);
		
		if(voOrderSummary == null) 
			return;
		
		if (voOrderSummary.getSpecimens() == null || voOrderSummary.getSpecimens().size() == 0)
		{
			populateOrderDetails(domain.getOrderDetails(form.getGlobalContext().OCRR.PathologyResults.getOrder()));
		}
		else
		{
			PathologySpecimenVo voPathologySpecimen = voOrderSummary.getSpecimens().get(0);
			
			populateOrderDetails(voPathologySpecimen.getOrder());
			
			populateSpecimens(voOrderSummary.getSpecimens());
			cleanUpInvsGrid();
		}
		
		populateInvestigations(voOrderSummary.getInvestigations());
	}

	private void populateInvestigations(OrderInvestigationListVoCollection investigations) 
	{
		form.getLocalContext().setSelectedOrderInvsForCancel(getCancelableOrderInvs(investigations));
		form.btnCancel().setEnabled(form.getLocalContext().getSelectedOrderInvsForCancelIsNotNull());
		form.getLocalContext().setSelectOrderInvForPACS(null);				//wdev-17378
		
		if(investigations == null) 
			return;
		
		for(int i = 0; i< investigations.size(); i++)
		{
			OrderInvestigationListVo inv = investigations.get(i);
			// WDEV-11080
			if (form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
			{
				ServiceRefVo voInvService = inv.getInvestigationIsNotNull() && inv.getInvestigation().getProviderServiceIsNotNull() && inv.getInvestigation().getProviderService().getLocationServiceIsNotNull() && inv.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? inv.getInvestigation().getProviderService().getLocationService().getService() : null;
				SecurityLevelConfigVo voInvSecurityLevel = inv.getInvestigationIsNotNull() && inv.getInvestigation().getInvestigationIndexIsNotNull() ? inv.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

				if (!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel,false)) //WDEV-11622
					continue;
			}
			
			addToSelectedInvs(investigations.get(i));	
			
			OrderInvestigationListVo voInvestigation = investigations.get(i);
			boolean isDft = isDFT(voInvestigation);// 	WDEV-16232
			
			if(voInvestigation.getInvestigationIsNotNull() && voInvestigation.getInvestigation().getInvestigationIndexIsNotNull() )
			{
				if(isDft && (voInvestigation.getSpecimen() == null || voInvestigation.getSpecimen().size() == 0))//WDEV-16504
				{
					PathologySpecimenVo voPathologySpecimen = new PathologySpecimenVo();
					PathologySpecimenOrderInvestigationVo ordinv = domain.getOrdInvestigation(voInvestigation);
					
					SpecimenType specimenS = (ordinv.getInvestigation() != null 
							&& ordinv.getInvestigation().getPathInvDetails() != null 
							&& ordinv.getInvestigation().getPathInvDetails().getSpecimens() != null 
							&& ordinv.getInvestigation().getPathInvDetails().getSpecimens().size() > 0 
							&& ordinv.getInvestigation().getPathInvDetails().getSpecimens().get(0) != null) 
							? ordinv.getInvestigation().getPathInvDetails().getSpecimens().get(0).getType() : null;
					
					voPathologySpecimen.setSpecimenSource(specimenS);
					
					voPathologySpecimen.setInvestigations(new PathologySpecimenOrderInvestigationVoCollection());
					voPathologySpecimen.getInvestigations().add(ordinv);
					
					addOrderSpecimen(voPathologySpecimen, null, true);
				}
				else if ((voInvestigation.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && (voInvestigation.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICALIMAGING) ||voInvestigation.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL))))
				{
					StringBuilder szDisplayText = new StringBuilder();
					szDisplayText.append(voInvestigation.getInvestigation().getInvestigationIndex().getName());
					
					if (voInvestigation.getRequestedLocationIsNotNull())
					{
						szDisplayText.append(" (");
						szDisplayText.append(voInvestigation.getRequestedLocation());
						szDisplayText.append(")");
					}
					
					if (voInvestigation.getOrdInvCurrentStatus() != null)
					{
						szDisplayText.append(" - Current Status: ").append(voInvestigation.getOrdInvCurrentStatus().getOrdInvStatus().getText());
					}
					
					//WDEV-16457 
					szDisplayText.append(voInvestigation.getPlacerOrdNum() != null ?  " - OCS Number: " + voInvestigation.getPlacerOrdNum() : "");
					
					//wdev-16385
					if( voInvestigation.getExpectedDateTimeIsNotNull() && isDft == false && !isResultedStatus(voInvestigation.getOrdInvCurrentStatus().getOrdInvStatus()))//WDEV-16763
					{
						szDisplayText.append(" - Expected Result Date Time: ").append(inv.getExpectedDateTime().toString());
						//if( inv.getExpectedDateTime().isLessThan(new DateTime()))
						//{
						//	cRow.setBackColor(ConfigFlag.UI.OCS_EXPECTED_RESULT_DATETIME_BREACH_COLOUR.getValue());
						//}
					}
					//--------
					GenForm.grdSpecimenRow parentRow = form.grdSpecimen().getRows().newRow();
					parentRow.setColSpecimen(szDisplayText.toString());
					
					//WDEV-12054
					if(voInvestigation.getOrdInvXOStatusHistoryIsNotNull())
						parentRow.setTooltip(voInvestigation.getOrdInvXOStatusHistory().generateXoStatusTooltip());
					
					parentRow.setExpanded(true);
				}
			}
			
			if ( (engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.RadiologyOrders) 
				|| engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.ClinicalImagingResults)
				|| engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.NewResultsSearch)           
				|| (engine.getParentDialogFormName() != null && (engine.getParentDialogFormName().equals(form.getForms().Emergency.AttendanceResultList) //WDEV-17571
				|| engine.getParentDialogFormName().equals(form.getForms().Emergency.AttendanceResultListDialog)))) // 	WDEV-17106,wdev-17377 
				/*&& !form.btnViewPACS().isVisible()*/)   //wdev-17378
			{
				form.getGlobalContext().OCRR.CentricityWebPACS.setAccessionNumber(domain.getCentricityPacsAccessionNumber(voInvestigation));
				
				if (form.getGlobalContext().OCRR.CentricityWebPACS.getAccessionNumberIsNotNull())
				{
					form.btnViewPACS().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.USE_PACS_FUNCTIONALITY.getValue())); //WDEV-17382
					
					//wdev-17378
					OrderInvestigationListVoCollection tempColl = form.getLocalContext().getSelectOrderInvForPACS();
					if( tempColl == null )
						tempColl = new OrderInvestigationListVoCollection();
					tempColl.add(voInvestigation);
					form.getLocalContext().setSelectOrderInvForPACS(tempColl);
					//-----
				}
			}
		}
	}
	
	//WDEV-16763
	private boolean isResultedStatus(OrderInvStatus status)
	{
		if (status.equals(OrderInvStatus.NEW_RESULT) || status.equals(OrderInvStatus.CHECKED) || status.equals(OrderInvStatus.SEEN) 
				|| status.equals(OrderInvStatus.UPDATED_RESULT) || status.equals(OrderInvStatus.UNSEEN) 
				|| status.equals(OrderInvStatus.REVIEW)	|| status.equals(OrderInvStatus.COMPLETE)
				|| status.equals(OrderInvStatus.RESULTED))
		{
			return true;
		}
		
		return false;
	}

	// 	WDEV-16232
	private boolean isDFT(OrderInvestigationListVo orderInvestigationListVo) 
	{
		if(orderInvestigationListVo == null || orderInvestigationListVo.getInvestigation() == null)
			return false;
		
		if(InvEventType.TIME_SERIES.equals(orderInvestigationListVo.getInvestigation().getEventType()))
			return true;
			
		return false;
	}

	//WDEV-12947 - 'Cancelleable' Order Investigations will have a status of 'Awaiting Authorisation','Ordered','Ordered Awaiting Appointment'  
	private OrderInvestigationListVoCollection getCancelableOrderInvs(OrderInvestigationListVoCollection investigations)
	{
		OrderInvestigationListVoCollection voCollOrddInvForCancel = new OrderInvestigationListVoCollection();
		
		for(OrderInvestigationListVo item : investigations)
		{
			if(item.getOrdInvCurrentStatusIsNotNull() && item.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull())
			{
				if(item.getOrdInvCurrentStatusIsNotNull() & item.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull())
				{
					boolean invAwaitingAuthorisation = item.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.AWAITING_AUTHORISATION);
					boolean invOrdered = item.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.ORDERED);
					boolean invAwaitingAppointment = item.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.ORDERED_AWAITING_APPT);
					boolean invSentRadiologyFromSchedulingService = (Category.CLINICALIMAGING.equals(item.getInvestigation().getInvestigationIndex().getCategory()) 
							&& !isInvestigationCompletedOrResulted(item))
							&& !isCancelledOrCancelRequested(item)
							&& canBeScheduled(item);
					
					if(invAwaitingAuthorisation || invOrdered || invAwaitingAppointment || invSentRadiologyFromSchedulingService)
					{
						if(item.getPassesSecurityIsNotNull() && !item.getPassesSecurity())
							continue;
						
						voCollOrddInvForCancel.add(item);
					}
				}				
			}	
		}
	
		return voCollOrddInvForCancel.size() > 0 ? voCollOrddInvForCancel : null;
		
	}

	private boolean isCancelledOrCancelRequested(OrderInvestigationListVo investigation)
	{
		if (investigation == null || investigation.getOrdInvCurrentStatus() == null)
			return false;
		
		if (OrderInvStatus.CANCEL_REQUEST.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus()))
			return true;
		
		if (OrderInvStatus.CANCELLED.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus()))
			return true;
		
		return false;
	}


	//http://jira/browse/WDEV-13340
	private boolean isInvestigationCompletedOrResulted(OrderInvestigationListVo inv)
	{
		if (inv!=null&&inv.getOrdInvStatusHistoryIsNotNull())
		{
			for (OrderedInvestigationStatusVo status : inv.getOrdInvStatusHistory())
			{
				if(status.getOrdInvStatusIsNotNull()
						&&(OrderInvStatus.NEW_RESULT.equals(status.getOrdInvStatus())
								||OrderInvStatus.UPDATED_RESULT.equals(status.getOrdInvStatus())
								||OrderInvStatus.RESULTED.equals(status.getOrdInvStatus())
								||OrderInvStatus.COMPLETE.equals(status.getOrdInvStatus())))
						{
							return true;
						}
			} 
		}
		
		return false;
	}
	
	
	private Boolean canBeScheduled(OrderInvestigationListVo item)
	{
		if (item == null)
			return false;
		
		if (item.getInvestigation() == null || item.getInvestigation().getProviderService() == null)
			return false;
		
		if (item.getInvestigation().getProviderService().getLocationService() == null || item.getInvestigation().getProviderService().getLocationService().getService() == null)
			return false;
		//WDEV-15487 
		if ( ServiceCategory.PATHOLOGY_DISCIPLINE.equals(item.getInvestigation().getProviderService().getLocationService().getService().getServiceCategory()))
			return false;
		
		return Boolean.TRUE.equals(item.getInvestigation().getProviderService().getLocationService().getService().getCanBeScheduled());
	}
	
	
	private void populateOrderDetails(OcsOrderShortVo order)
	{
		if(order == null) return;
		
   		form.txtLocation().setValue(order.getCorrectLocation());    	
    	form.txtResponsible().setValue(order.getCorrectClinician());
    
    	if(order.getOrderedByIsNotNull() && order.getOrderedBy().getNameIsNotNull())
    		form.txtRequestedBy().setValue(order.getOrderedBy().getName().toString());
    	
    	if (order.getSysInfo() != null)
    		form.txtOrderDt().setValue(order.getSysInfo().getCreationDateTime().toString());

    	//WDEV-4758
    	if(order.getCareContextIsNotNull() && order.getCareContext().getPasEventIsNotNull())
    		form.txtPasEpisodeID().setValue(order.getCareContext().getPasEvent().getPasEpisodeId());
	}

	private void populateSpecimens(PathologySpecimenVoCollection voPathologySpecimenColl)
	{	
		if(voPathologySpecimenColl == null) 
			return;
		
		StringVector specimenAlreadyAdded = new StringVector();
			
		for(int i = 0; i< voPathologySpecimenColl.size(); i++)
		{
			addOrderSpecimen(voPathologySpecimenColl.get(i), specimenAlreadyAdded, false);//WDEV-16504
		}
	}
	
	//WDEV-16504
	private void addOrderSpecimen(PathologySpecimenVo voPathologySpecimen, StringVector specimenAlreadyAdded, boolean isInvWithoutOrderSpecimen) 
	{
		if(voPathologySpecimen == null)
			return;
		
		if(specimenAlreadyAdded == null)
			specimenAlreadyAdded = new StringVector();
		
		String ocsNumber = null;
		//WDEV-16476
		if (voPathologySpecimen.getInvestigations() != null && voPathologySpecimen.getInvestigations().size() > 0)
		{
			ocsNumber = voPathologySpecimen.getInvestigations().get(0).getPlacerOrdNum(); //we will take the PlacerOrdNum from the first investigations as this is the same for all of them
		}
		
		if (ocsNumber != null && specimenAlreadyAdded.contains(ocsNumber))
		{
			return;
		}
		else if (ocsNumber != null)
		{
			specimenAlreadyAdded.addElement(ocsNumber);
		}
		
		GenForm.grdSpecimenRow parentRow = form.grdSpecimen().getRows().newRow();
		
		String specimenAndSiteText = "";
	    if(voPathologySpecimen.getSpecimenSourceIsNotNull())
	    	specimenAndSiteText += voPathologySpecimen.getSpecimenSource().getText();
	    if(voPathologySpecimen.getSiteCdIsNotNull())
	    	specimenAndSiteText += " - " + voPathologySpecimen.getSiteCd().getText();
	    
		parentRow.setBold(true);
		
		if(voPathologySpecimen.getInvestigationsIsNotNull())
		{
			for (PathologySpecimenOrderInvestigationVo inv : voPathologySpecimen.getInvestigations())
			{
				if ((inv.getPassesSecurityIsNotNull() && inv.getPassesSecurity()) || isInvWithoutOrderSpecimen)
				{
					addToSelectedInvs(inv);
					
					GenForm.grdSpecimenRow cRow = parentRow.getRows().newRow();
					if (inv.getInvestigationIsNotNull())
					{
						PathologyInvestigationVo voPathologyInvestigation = inv.getInvestigation();
						
						StringBuilder investigationDisplayString = new StringBuilder();
						
						if(voPathologyInvestigation.getInvestigationIndexIsNotNull())
						{
							investigationDisplayString.append(voPathologyInvestigation.getInvestigationIndex().getName());
						}
						else
						{
							investigationDisplayString.append("Unknown Investigation");
						}
						
						if (inv.getOrdInvCurrentStatus() != null)
						{
							investigationDisplayString.append(" - Current Status: ").append(inv.getOrdInvCurrentStatus().getOrdInvStatus().getText());
						}
						//wdev-16385
						boolean isDftP  = false;
						if( inv.getInvestigationIsNotNull() && inv.getInvestigation().getEventTypeIsNotNull() && inv.getInvestigation().getEventType().equals(InvEventType.TIME_SERIES))
							isDftP = true;
						
						if( inv.getExpectedDateTimeIsNotNull() && isDftP == false && !isResultedStatus(inv.getOrdInvCurrentStatus().getOrdInvStatus()))//WDEV-16763
						{
							investigationDisplayString.append(" - Expected Result Date Time: ").append(inv.getExpectedDateTime().toString());
							//if( inv.getExpectedDateTime().isLessThan(new DateTime()))
							//{
							//	cRow.setBackColor(ConfigFlag.UI.OCS_EXPECTED_RESULT_DATETIME_BREACH_COLOUR.getValue());
							//}
						}
						//--------
						
						cRow.setColSpecimen(investigationDisplayString.toString());
					}	
				}
				
				//WDEV-16457
				parentRow.setColSpecimen(specimenAndSiteText + (inv.getPlacerOrdNum() != null ? " - OCS Number: " + inv.getPlacerOrdNum() :"")); //WDEV-12066
				parentRow.setTooltip(inv.getPlacerOrdNum() != null ? "OCS Number: " + inv.getPlacerOrdNum() :"");
			}
		}
		
		parentRow.setExpanded(true);
	}

	/**
	 * if there are any parent rows with no children - remove them ie. there are no viewable results
	 * for this specimen - WDEV-3953
	 */
	private void cleanUpInvsGrid()
	{
		for(int i=form.grdSpecimen().getRows().size();i>0;i--)
		{
			grdSpecimenRow pRow = form.grdSpecimen().getRows().get(i-1);
			if(pRow.getRows().size() == 0)
				form.grdSpecimen().getRows().remove(i-1);
		}	
	}
	

	private void addToSelectedInvs(ims.vo.ValueObject orderInv)
	{
		OcsPathRadResultVoCollection selectedInvs = form.getGlobalContext().OCRR.getSelectedInvs();
		if(selectedInvs == null)
			selectedInvs = new OcsPathRadResultVoCollection(); 
		
		boolean bItemExists = false;
		for(int i=0;i<selectedInvs.size();i++)
		{
			if(selectedInvs.get(i).getOrderInvestigation().equals(orderInv))
			{
				bItemExists = true;
				break;
			}
		}
		
		if(!bItemExists)
		{
			if(orderInv instanceof PathologySpecimenOrderInvestigationVo)
			{
				OcsPathRadResultVo ordInv = new OcsPathRadResultVo();
				ordInv.setCategory(Category.PATHOLOGY);
				ordInv.setOrderInvestigation((OrderInvestigationRefVo) orderInv);
				ordInv.setDescription(((PathologySpecimenOrderInvestigationVo) orderInv).getIOrderResultDisplayInvName());
				selectedInvs.add(ordInv);
			}
			else if(orderInv instanceof OrderInvestigationListVo)
			{
				OcsPathRadResultVo ordInv = new OcsPathRadResultVo();
				ordInv.setCategory(((OrderInvestigationListVo) orderInv).getInvestigationIsNotNull() && ((OrderInvestigationListVo) orderInv).getInvestigation().getInvestigationIndexIsNotNull() ? ((OrderInvestigationListVo) orderInv).getInvestigation().getInvestigationIndex().getCategory() : null);
				ordInv.setOrderInvestigation((OrderInvestigationRefVo) orderInv);
				ordInv.setDescription(((OrderInvestigationListVo) orderInv).getInvestigation().getInvestigationIndex().getName());
				selectedInvs.add(ordInv);
			}
		
			form.getGlobalContext().OCRR.setSelectedInvs(selectedInvs);
		}
	}

	private void clearAllControls()
	{
		form.txtName().setValue(null);
		form.txtDOB().setValue(null);
		form.txtHospNo().setValue(null);
		form.txtLocation().setValue(null);
		form.txtSex().setValue(null);
		form.txtRequestedBy().setValue(null);
		form.txtResponsible().setValue(null);
		form.grdSpecimen().getRows().clear();		
	}

	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.OK);
	}

	protected void onBtnAuthoriseClick() throws PresentationLogicException
	{
		try
		{
			domain.authoriseOrder(form.getGlobalContext().OCRR.getOrderAwaitingAuthorisation());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		engine.showMessage("Order placed successfully");
		engine.close(DialogResult.OK);
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		engine.open(form.getForms().OCRR.MyOrderDialog);
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		SelectItemVoCollection voCollItems = new SelectItemVoCollection();
		OrderInvestigationListVoCollection voCollOrderInv = form.getLocalContext().getSelectedOrderInvsForCancel();
		if (voCollOrderInv != null)
		{
			for (int i = 0; i < voCollOrderInv.size(); i++)
			{					
				SelectItemVo voSelectItem = new SelectItemVo();
				voSelectItem.setItem(voCollOrderInv.get(i));
				voSelectItem.setSelected(Boolean.FALSE);
				voCollItems.add(voSelectItem);
			}
		}

		form.getGlobalContext().Core.setItems(voCollItems.size() > 0 ? voCollItems : null);			
		engine.open(form.getForms().OCRR.CancelOrderInvestigationDialog, "Select Investigation");
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().OCRR.CancelOrderInvestigationDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if(processCancelOrderInvestigation())
				{
					engine.showMessage("Investigation(s) successfully cancelled");
					open();
				}
				else
					engine.showMessage("Nothing was cancelled");
			}
			else if(result.equals(DialogResult.CANCEL)) //wdev-10564
			{
					open(); //wdev-10546
			}
			form.getGlobalContext().OCRR.setInvestigationCancelComment(null);
			form.getGlobalContext().OCRR.setInvestigationStatusChangeReason(null);
		}
		else if(formName.equals(form.getForms().OCRR.MyOrderDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				form.getGlobalContext().OCRR.setOrderInvestigationToAmend(null);
				engine.close(result);
			}
			else if(result.equals(DialogResult.CANCEL)) //WDEV-16748
			{
				open();
			}
		}
		else if (formName.equals(form.getForms().OCRR.SelectAndOrderDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				form.getGlobalContext().OCRR.setOrderInvestigationToAmend(null);
				engine.close(result);
			}
		}
		else if (formName.equals(form.getForms().OCRR.AmendOrderInvestigationDialog))
		{
			if (DialogResult.OK.equals(result))
			{
				form.getGlobalContext().OCRR.getOrderInvestigationToAmend();
				// Open 'Select Order' dialog
				engine.open(form.getForms().OCRR.SelectAndOrderDialog);
			}
			else
			{
				form.getGlobalContext().OCRR.setOrderInvestigationToAmend(null);
			}
		}
		else if (form.getForms().OCRR.OrderInvStatusHistory.equals(formName))
		{
			open();
		}
	}

	private boolean processCancelOrderInvestigation()
	{
		SelectItemVoCollection voCollItem = form.getGlobalContext().Core.getItems();
		if(voCollItem == null || voCollItem.size() == 0)
			return false;
	
		OrderInvestigationRefVoCollection voCollOrderInv = new OrderInvestigationRefVoCollection();
		
		for(SelectItemVo voItem : voCollItem)
		{
			if(voItem.getItem().getIGenericItemTypeSelectItemType().equals(SelectItemType.ORDERINV))
			{
				if(voItem.getSelected())
					voCollOrderInv.add((OrderInvestigationRefVo) voItem.getItem());
			}
		}
		//wdev-10546
		for(int i = 0;i< voCollOrderInv.size();i++)
		{
			OrderInvestigationRefVo temp = domain.getOrderInvestigation(voCollOrderInv.get(i));
			if(temp != null)
			{
				if(temp.getVersion_OrderInvestigation() != voCollOrderInv.get(i).getVersion_OrderInvestigation())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					open();
					return false;
				}
			}
		}
		//--------------
		try
		{
			if(voCollOrderInv.size() > 0)
			{
				domain.cancelOrderInvestigations(form.getGlobalContext().Core.getPatientShort(), voCollOrderInv, form.getGlobalContext().OCRR.getInvestigationStatusChangeReason(), form.getGlobalContext().OCRR.getInvestigationCancelComment());
				if(form.getGlobalContext().RefMan.getCatsReferral() != null)
					domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral());
			}
			else
				return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		
		return true;
	}

	protected void onBtnPrintClick() throws PresentationLogicException
	{
		engine.open(form.getForms().OCRR.PrintOrder);
	}

	protected void onBtnStatusHistoryClick() throws PresentationLogicException
	{
		engine.open(form.getForms().OCRR.OrderInvStatusHistory);
	}

	@Override
	protected void onBtnViewOrderClinicalDetailsClick() throws PresentationLogicException
	{
		engine.open(form.getForms().OCRR.QuestionsNotes, "Order Notes");		
	}

	@Override
	protected void onBtnViewPACSClick() throws PresentationLogicException 
	{
		//wdev-17378
		if( form.getLocalContext().getSelectOrderInvForPACSIsNotNull() && form.getLocalContext().getSelectOrderInvForPACS().size() > 1)
		{
			engine.open(form.getForms().OCRR.ViewPACSIMagesDialog,new Object[] {form.getLocalContext().getSelectOrderInvForPACS()});
		}
		else
		{
			if( form.getLocalContext().getSelectOrderInvForPACSIsNotNull() && form.getLocalContext().getSelectOrderInvForPACS().size() > 0)
				form.getGlobalContext().OCRR.CentricityWebPACS.setAccessionNumber(form.getLocalContext().getSelectOrderInvForPACS().get(0).getAccessionNumber());
			engine.open(form.getForms().OCRR.CentricityWebPACSViewer,true,true);
		}
	}
}
