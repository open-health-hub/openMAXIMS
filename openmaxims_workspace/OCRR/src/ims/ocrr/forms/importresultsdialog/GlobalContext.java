//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.importresultsdialog;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Core = new CoreContext(context);
		RefMan = new RefManContext(context);
		OCRR = new OCRRContext(context);
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getUploadDocumentActionIsNotNull()
		{
			return !cx_CoreUploadDocumentAction.getValueIsNull(context);
		}
		public ims.core.vo.enums.UploadDocumentAction getUploadDocumentAction()
		{
			return (ims.core.vo.enums.UploadDocumentAction)cx_CoreUploadDocumentAction.getValue(context);
		}
		public void setUploadDocumentAction(ims.core.vo.enums.UploadDocumentAction value)
		{
			cx_CoreUploadDocumentAction.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreUploadDocumentAction = new ims.framework.ContextVariable("Core.UploadDocumentAction", "_cv_Core.UploadDocumentAction");
		public boolean getPatientDocumentIsNotNull()
		{
			return !cx_CorePatientDocument.getValueIsNull(context);
		}
		public ims.core.vo.PatientDocumentVo getPatientDocument()
		{
			return (ims.core.vo.PatientDocumentVo)cx_CorePatientDocument.getValue(context);
		}
		public void setPatientDocument(ims.core.vo.PatientDocumentVo value)
		{
			cx_CorePatientDocument.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientDocument = new ims.framework.ContextVariable("Core.PatientDocument", "_cv_Core.PatientDocument");
		public boolean getUploadDocumentAbsolutePathIsNotNull()
		{
			return !cx_CoreUploadDocumentAbsolutePath.getValueIsNull(context);
		}
		public String getUploadDocumentAbsolutePath()
		{
			return (String)cx_CoreUploadDocumentAbsolutePath.getValue(context);
		}
		public void setUploadDocumentAbsolutePath(String value)
		{
			cx_CoreUploadDocumentAbsolutePath.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreUploadDocumentAbsolutePath = new ims.framework.ContextVariable("Core.UploadDocumentAbsolutePath", "_cv_Core.UploadDocumentAbsolutePath");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");

		private ims.framework.Context context;
	}
	public final class RefManContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private RefManContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCatsReferralIsNotNull()
		{
			return !cx_RefManCatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralRefVo getCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralRefVo)cx_RefManCatsReferral.getValue(context);
		}
		public void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)
		{
			cx_RefManCatsReferral.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManCatsReferral = new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral");
		public boolean getUploadDocumentsDialogDocumentTypeIsNotNull()
		{
			return !cx_RefManUploadDocumentsDialogDocumentType.getValueIsNull(context);
		}
		public ims.core.vo.lookups.DocumentCategory getUploadDocumentsDialogDocumentType()
		{
			return (ims.core.vo.lookups.DocumentCategory)cx_RefManUploadDocumentsDialogDocumentType.getValue(context);
		}
		public void setUploadDocumentsDialogDocumentType(ims.core.vo.lookups.DocumentCategory value)
		{
			cx_RefManUploadDocumentsDialogDocumentType.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManUploadDocumentsDialogDocumentType = new ims.framework.ContextVariable("RefMan.UploadDocumentsDialogDocumentType", "_cv_RefMan.UploadDocumentsDialogDocumentType");

		private ims.framework.Context context;
	}
	public final class OCRRContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private OCRRContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getReferralAppointmentDetailsOcsOrderVoCollectionIsNotNull()
		{
			return !cx_OCRRReferralAppointmentDetailsOcsOrderVoCollection.getValueIsNull(context);
		}
		public ims.ocrr.vo.ReferralAppointmentDetailsOcsOrderVoCollection getReferralAppointmentDetailsOcsOrderVoCollection()
		{
			return (ims.ocrr.vo.ReferralAppointmentDetailsOcsOrderVoCollection)cx_OCRRReferralAppointmentDetailsOcsOrderVoCollection.getValue(context);
		}
		public void setReferralAppointmentDetailsOcsOrderVoCollection(ims.ocrr.vo.ReferralAppointmentDetailsOcsOrderVoCollection value)
		{
			cx_OCRRReferralAppointmentDetailsOcsOrderVoCollection.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OCRRReferralAppointmentDetailsOcsOrderVoCollection = new ims.framework.ContextVariable("OCRR.ReferralAppointmentDetailsOcsOrderVoCollection", "_cv_OCRR.ReferralAppointmentDetailsOcsOrderVoCollection");

		private ims.framework.Context context;
	}

	public CoreContext Core;
	public RefManContext RefMan;
	public OCRRContext OCRR;
}
