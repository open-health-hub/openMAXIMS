//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.45 build 2327.20708)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.newresults;

import java.util.Comparator;

import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.ClinicLiteVo;
import ims.core.vo.ClinicLiteVoCollection;
import ims.core.vo.GpLiteVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MOSQueryEvent;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.framework.FormName;
import ims.framework.controls.Timer;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.ocrr.forms.newresults.GenForm.OrdLocGrpEnumeration;
import ims.ocrr.forms.newresults.GenForm.grdResultsRow;
import ims.ocrr.orderingresults.vo.OrderSpecimenRefVo;
import ims.ocrr.vo.NewResultsListOrderInvestigationStatusVo;
import ims.ocrr.vo.NewResultsListVo;
import ims.ocrr.vo.NewResultsListVoCollection;
import ims.ocrr.vo.NewResultsSearchCriteriaVo;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.OrderSpecimenCommentsVo;
import ims.ocrr.vo.OrderSpecimenCommentsVoCollection;
import ims.ocrr.vo.ResultCommentsLiteVo;
import ims.ocrr.vo.ResultCommentsLiteVoCollection;
import ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.ocrr.vo.lookups.OrderInvStatusCollection;
import ims.vo.ValueObject;
import ims.vo.ValueObjectCollection;
import ims.vo.ValueObjectMixedCollection;

public class Logic extends BaseLogic
{
	private static class NewResultsDateComparator implements Comparator<NewResultsListVo>
	{
		private int sortOrder = 1;
		
		public NewResultsDateComparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				sortOrder = 1;
			else
				sortOrder = -1;
		}
		
		public int compare(NewResultsListVo result1, NewResultsListVo result2)
		{
			DateTime dateForResult1 = result1.getRepDateTime();
			DateTime dateForResult2 = result2.getRepDateTime();
			
			// If the OrderInvestigation is marked "For Review" then AllocatedDateForReview takes precedence
			if (result1.getOrdInvCurrentStatus() != null && OrderInvStatus.REVIEW.equals(result1.getOrdInvCurrentStatus().getOrdInvStatus()))
			{
				dateForResult1 = result1.getAllocatedDateForReview();
			}

			if (result2.getOrdInvCurrentStatus() != null && OrderInvStatus.REVIEW.equals(result2.getOrdInvCurrentStatus().getOrdInvStatus()))
			{
				dateForResult2 = result2.getAllocatedDateForReview();
			}
			
			if (dateForResult1 == null && dateForResult2 == null)
				return result1.getOrdInvSeq().compareTo(result2.getOrdInvSeq());
				
			if (dateForResult1 == null && dateForResult2 != null)
				return sortOrder * (-1);
			
			if (dateForResult1 != null && dateForResult2 == null)
				return sortOrder;

			int sort = dateForResult1.compareTo(dateForResult2) * sortOrder;
			
			if (sort == 0)
				return result1.getOrdInvSeq().compareTo(result2.getOrdInvSeq());
			
			return sort;
		}

	}


	private static final long serialVersionUID = 1L;

	//-------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers region
	//-------------------------------------------------------------------------------------------------------------------------------
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}

	
	@Override
	protected void onChkInpatientOrdersChecked() throws PresentationLogicException
	{
		if (form.chkInpatientOrders().getValue())
		{
			form.qmbOrderingLocation().setValue(null);
			form.chkOutpatientOrders().setValue(false);
		}
	}


	@Override
	protected void onChkOutpatientOrdersChecked() throws PresentationLogicException
	{
		if (form.chkOutpatientOrders().getValue())
		{
			form.qmbOrderingLocation().setValue(null);
			form.chkInpatientOrders().setValue(false);
		}
	}

	
	@Override
	protected void onRadioButtonOrdLocGrpValueChanged()
	{
		form.qmbOrderingLocation().clear();
		form.cmbHospital().setEnabled(true);

		if (form.cmbHospital().getValue() == null)
		{
			form.qmbOrderingLocation().setEnabled(false);
			form.OrdLocGrp().setEnabled(false);
		}
		
		if (OrdLocGrpEnumeration.rdoAne.equals(form.OrdLocGrp().getValue()))
		{
			form.chkInpatientOrders().setValue(false);
			form.chkOutpatientOrders().setValue(false);
		}
		else
		{
			form.chkExcludeInpatients().setValue(null);
			form.ccCurrentRespClin().setEnabled(true);
		}
		
		updateControlsState();
	}


	protected void onImbResetClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clear();
		resetResults();
		form.ccOrderingHCP().clear();
		updateResponsibleClinician();
		form.cmbDiscipline().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.cmbDays().setValue(null);
		form.getLocalContext().setbTimerOn(false);
		form.imbAutoRefresh().setEnabled(false);
		form.imbAutoRefresh().setTooltip("This button will be enabled once a search of New Results is executed");
		form.getTimers().gettimerSearch().setEnabled(false);
		
		updateControlsState();
	}

	
	private void clear()
	{
		form.cmbHospital().setValue(null);
		form.OrdLocGrp().setValue(null);
		form.OrdLocGrp().setEnabled(false);
		form.qmbOrderingLocation().setEnabled(false);
		form.qmbOrderingLocation().setValue(null);
		form.qmbOrderingClinician().setValue(null);
		form.qmbReviewingHCP().clear();						// WDEV-13876

		form.chkNew().setValue(false);//wdev-11837
		form.chkSeenChecked().setValue(false);
		form.chkChecked().setValue(false);
		
		form.chkReview().setValue(false);	//wdev-11837
		form.chkCompleted().setValue(false); //wdev-12432
		form.chkInpatientOrders().setValue(false);
		form.chkOutpatientOrders().setValue(false);
		form.chkExcludeInpatients().setValue(false);

	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!validateSeachCriteria())
		{
			enableAutoRefeshStart(false);
			return;
		}

		enableAutoRefeshStart(true);

		search();
	}

	private void enableAutoRefeshStart(boolean bEnabled)
	{
		form.imbAutoRefresh().setEnabled(bEnabled);

		form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
		form.imbAutoRefresh().setDisabledImage(form.getImages().Core.TimerStartDisabled24);

		if (bEnabled)
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of New Results");
		else
			form.imbAutoRefresh().setTooltip("This button will be enabled once a search of New Results is executed");

	}

	private void enableAutoRefeshStop(boolean bEnable)
	{
		form.imbAutoRefresh().setEnabled(bEnable);

		form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
		form.imbAutoRefresh().setDisabledImage(form.getImages().Core.TimerStopEnabled24);

		form.imbAutoRefresh().setTooltip("Click button to stop the automatic refresh of New Results");

		form.getLocalContext().setbTimerOn(bEnable);

	}

	protected void onQmbOrderingClinicianTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		searchClinicians(value);
	}
	
	/**
	 * WDEV-13876
	 */
	@Override
	protected void onQmbReviewingHCPTextSubmited(String value) throws PresentationLogicException					// WDEV-13876
	{
		populateReviweingHCP(domain.listReviewingHCP(value));
	}
	
	/**
	 * WDEV-13876
	 */
	@Override
	protected void onQmbReviewingHCPValueChanged() throws PresentationLogicException
	{
		if (form.qmbReviewingHCP().getValue() != null)
		{
			form.chkReview().setValue(true);
		}
	}


	protected void onQmbOrderingLocationTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		searchLocations(value);
	}

	private void initialize()
	{
		populateDays(ConfigFlag.DOM.OCS_NEWRES_DAYS_MAX.getValue());

		form.chkInpatientOrders().setValue(false);
		form.chkOutpatientOrders().setValue(false);

		setCurrentResponsibleClinician();
		loadDiscipline();

		form.cmbHospital().clear();
		LocationLiteVoCollection hospColl = domain.listHospitals();
		for (int i = 0; i < hospColl.size(); i++)
		{
			LocationLiteVo hosp = hospColl.get(i);
			form.cmbHospital().newRow(hosp, hosp.getName());
		}
		
		LocationLiteVo currentHospital = domain.getCurrentHospital(engine.getCurrentLocation());
		form.cmbHospital().setValue(currentHospital);

		resetSearchControlsToDefault();

		setWatchDefaultButtonState();

		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.OCRR_NEW_RESULTS_TIMER_REFRESH_RATE.getValue());
		
		form.chkCompleted().setVisible(ConfigFlag.UI.DISPLAY_COMPLETE_FILTER_RESULTS_STATUS.getValue());//wdev-17322

		//WDEV-9946
		form.ccOrderingHCP().initialize(MosType.HCP);

		// security level WDEV-9780
		RoleDisciplineSecurityLevelLiteGCVo voRoleDisciplineSecurityLevels = form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels();
		if (voRoleDisciplineSecurityLevels == null || (voRoleDisciplineSecurityLevels != null && voRoleDisciplineSecurityLevels.getIsConfigLoadedIsNotNull() && !voRoleDisciplineSecurityLevels.getIsConfigLoaded().equals(false)))
			form.getGlobalContext().OCRR.setRoleDisciplineSecurityLevels(domain.getRoleDisciplineSecurityLevels(engine.getLoggedInRole()));
	
		if (form.getGlobalContext().OCRR.getNewResultsSearchCriteriaIsNotNull())
		{
			displaySearchCriteria();
			search();
		}
		
		updateControlsState();
	}

	private void setCurrentResponsibleClinician()
	{
		if (ConfigFlag.UI.NEW_RESULTS_ALLOW_RETRIEVAL_BY_THE_CURRENT_RESPONSIBLE_CONSULTANT_FOR_PATIENT.getValue())
		{
			setCurrentResponsibleClinicianVisible(true);
			form.ccCurrentRespClin().initialize(MosType.HCP);
		}
		else
		{
			setCurrentResponsibleClinicianVisible(false);
		}
	}

	private void setCurrentResponsibleClinicianVisible(boolean isVisible)
	{
		form.ccCurrentRespClin().setVisible(isVisible);
		form.lblCurrent().setVisible(isVisible);
		form.lblRespClinician().setVisible(isVisible);
	}


	private void displaySearchCriteria() {
	
		NewResultsSearchCriteriaVo newResultsSearchCriteria = form.getGlobalContext().OCRR.getNewResultsSearchCriteria();
		form.cmbHospital().setValue(newResultsSearchCriteria.getHospital());
		
		if(newResultsSearchCriteria.getOrderingLocationTypeIsNotNull()){
			if(newResultsSearchCriteria.getOrderingLocationType().equals(1))
				form.OrdLocGrp().setValue(OrdLocGrpEnumeration.rdoWard);
			else if(newResultsSearchCriteria.getOrderingLocationType().equals(2))
				form.OrdLocGrp().setValue(OrdLocGrpEnumeration.rdoAne);
			else if(newResultsSearchCriteria.getOrderingLocationType().equals(3))
				form.OrdLocGrp().setValue(OrdLocGrpEnumeration.rdoClinic);
			else if(newResultsSearchCriteria.getOrderingLocationType().equals(4))
				form.OrdLocGrp().setValue(OrdLocGrpEnumeration.rdoOther);
		}
		
		if(newResultsSearchCriteria.getOrderingLocationIsNotNull()){
			form.qmbOrderingLocation().newRow(newResultsSearchCriteria.getOrderingLocation(), newResultsSearchCriteria.getOrderingLocation().toString());
			form.qmbOrderingLocation().setValue(newResultsSearchCriteria.getOrderingLocation());
		}
		if(newResultsSearchCriteria.getOrderingClinicianIsNotNull()){
			form.qmbOrderingClinician().newRow(newResultsSearchCriteria.getOrderingClinician(), newResultsSearchCriteria.getOrderingClinician().toString());
			form.qmbOrderingClinician().setValue(newResultsSearchCriteria.getOrderingClinician());
		}
		else
			form.qmbOrderingClinician().setValue(null);
		
		form.ccOrderingHCP().setValue(newResultsSearchCriteria.getOrderingHCP());
		form.ccCurrentRespClin().setValue(newResultsSearchCriteria.getResponsibleClinician());
		
		// WDEV-14085
		if (newResultsSearchCriteria.getReviewingHCP() != null && !form.qmbReviewingHCP().getValues().contains(newResultsSearchCriteria.getReviewingHCP()))
		{
			form.qmbReviewingHCP().newRow(newResultsSearchCriteria.getReviewingHCP(), newResultsSearchCriteria.getReviewingHCP().toString());
		}
		form.qmbReviewingHCP().setValue(newResultsSearchCriteria.getReviewingHCP());		// WDEV-13876
		
		if(Boolean.TRUE.equals(newResultsSearchCriteria.getNewUpdated()))//wdev-11753
			form.chkNew().setValue(true);
		else
			form.chkNew().setValue(false);
		if(Boolean.TRUE.equals(newResultsSearchCriteria.getSeenChecked()))//wdev-11753
			form.chkSeenChecked().setValue(true);
		else
			form.chkSeenChecked().setValue(false);
		
		if (Boolean.TRUE.equals(newResultsSearchCriteria.getChecked()))
			form.chkChecked().setValue(true);
		else
			form.chkChecked().setValue(false);
		
		if (Boolean.TRUE.equals(newResultsSearchCriteria.getExcludeInpatients()))
			form.chkExcludeInpatients().setValue(true);
		else
			form.chkExcludeInpatients().setValue(false);
		
		if(Boolean.TRUE.equals(newResultsSearchCriteria.getForReview()))//wdev--11753
			form.chkReview().setValue(true);
		else
			form.chkReview().setValue(false);
		if(Boolean.TRUE.equals(newResultsSearchCriteria.getCompleted()))//wdev-11753
			form.chkCompleted().setValue(true);
		else
			form.chkCompleted().setValue(false);
		
		if(newResultsSearchCriteria.getInpatientsIsNotNull())
		{
			if(newResultsSearchCriteria.getInpatients().equals(1))
				form.chkInpatientOrders().setValue(true);
			else if(newResultsSearchCriteria.getInpatients().equals(2))
				form.chkOutpatientOrders().setValue(true);
			else
			{
				form.chkInpatientOrders().setValue(false);
				form.chkOutpatientOrders().setValue(false);
			}
				
		}
		form.cmbDiscipline().setValue(newResultsSearchCriteria.getDiscipline());
		form.dteFrom().setValue(newResultsSearchCriteria.getFromDate());
		form.dteTo().setValue(newResultsSearchCriteria.getToDate());//WDEV-16310	
		
		form.cmbDays().setValue(newResultsSearchCriteria.getDays());
	}

	private void loadDiscipline()
	{
		form.cmbDiscipline().clear();

		ServiceLiteVoCollection discipline = domain.listDiscipline();
		if (discipline == null)
			return;

		for (int x = 0; x < discipline.size(); x++)
		{
			if (discipline.get(x) != null && discipline.get(x).getServiceNameIsNotNull())
			{
				form.cmbDiscipline().newRow(discipline.get(x), discipline.get(x).getServiceName());
			}
		}
	}

	private void setWatchDefaultButtonState()
	{

		if (form.getTimers().gettimerSearch().isEnabled())
		{
			form.getLocalContext().setbTimerOn(true);
			enableAutoRefeshStart(true);
		}
		else
		{
			form.getLocalContext().setbTimerOn(false);
			enableAutoRefeshStart(false);
		}

	}

	private void resetSearchControlsToDefault()
	{
		form.OrdLocGrp().setValue(null);
		form.chkNew().setValue(true);
		form.chkSeenChecked().setValue(false);
		form.chkChecked().setValue(false);
		form.chkReview().setValue(true);
		
		if (ConfigFlag.UI.USE_PACS_FUNCTIONALITY.getValue())//wdev-17322
		{
			form.chkCompleted().setValue(true);
		}
		
		resetDaysToDefault();
		presetClinician();
		presetReviewingHCP();
		setLocationDefaults();
		onRadioButtonOrdLocGrpValueChanged();
	}

	private void resetResults()
	{
		form.grdResults().getRows().clear();
		updateSearchTotal(0);
	}

	private void search()
	{
		resetResults();

		OrderInvStatusCollection stColl = getRequiredInvStatuses();

		if (ConfigFlag.GEN.RELEASE_MODE.getValue())
		{
			if (form.qmbOrderingLocation().getValue() == null)
			{
				form.cmbHospital().setValue(null);
				form.OrdLocGrp().setEnabled(false);
				form.OrdLocGrp().setValue(null);
				form.qmbOrderingLocation().setEnabled(false);
			}
		}

		int nOrderingHCPId = -1;
		if (form.ccOrderingHCP().getValue() != null)
			nOrderingHCPId = form.ccOrderingHCP().getValue().getIMosId(); //WDEV-9946
		
		NewResultsListVoCollection newResults = domain.listNewResultsByDateRange(form.dteFrom().getValue(), form.dteTo().getValue(), form.qmbOrderingLocation().getValue(), form.qmbOrderingClinician().getValue(), stColl, form.chkInpatientOrders().getValue(), form.chkOutpatientOrders().getValue(), form.chkExcludeInpatients().getValue(), nOrderingHCPId, (HcpLiteVo) form.ccCurrentRespClin().getValue(), form.qmbReviewingHCP().getValue(), form.cmbDiscipline().getValue());
		if (newResults == null)
			return;
		
		// Sort the results collection
		newResults.sort(new NewResultsDateComparator(SortOrder.DESCENDING));
		
		Integer nNewResUnseenDays = new Integer(ConfigFlag.DOM.OCS_NEWRES_UNSEEN_CUTOFF.getValue());
		Date dateUnseen = new Date().addDay(-1 * nNewResUnseenDays.intValue());

		for (int x = 0; x < newResults.size(); x++)
		{
			NewResultsListVo newResult = newResults.get(x);
			addNewResult(newResult, dateUnseen);
		}
		
		// WDEV-9454
		if (newResults.size() == 0)
		{
			engine.showMessage("No results found.", "Message");
			form.getGlobalContext().OCRR.setNewResultsSearchCriteria(null);
		}
		else
			storeSearchCriteria();

		updateSearchTotal(form.grdResults().getRows().size());
	}

	private void storeSearchCriteria() {
		NewResultsSearchCriteriaVo newResultsSearchCriteria = new NewResultsSearchCriteriaVo();
	
		newResultsSearchCriteria.setHospital(form.cmbHospital().getValue());
		
		if(form.OrdLocGrp().getValue().equals(OrdLocGrpEnumeration.rdoWard))
			newResultsSearchCriteria.setOrderingLocationType(1);
		else if(form.OrdLocGrp().getValue().equals(OrdLocGrpEnumeration.rdoAne))
			newResultsSearchCriteria.setOrderingLocationType(2);
		else if(form.OrdLocGrp().getValue().equals(OrdLocGrpEnumeration.rdoClinic))
			newResultsSearchCriteria.setOrderingLocationType(3);
		else if(form.OrdLocGrp().getValue().equals(OrdLocGrpEnumeration.rdoOther))
			newResultsSearchCriteria.setOrderingLocationType(4);
		
		newResultsSearchCriteria.setOrderingLocation(form.qmbOrderingLocation().getValue());
		newResultsSearchCriteria.setOrderingClinician(form.qmbOrderingClinician().getValue());
		newResultsSearchCriteria.setReviewingHCP(form.qmbReviewingHCP().getValue());
		newResultsSearchCriteria.setOrderingHCP((HcpLiteVo) form.ccOrderingHCP().getValue());
		newResultsSearchCriteria.setResponsibleClinician((HcpLiteVo) form.ccCurrentRespClin().getValue());
		
		if(form.chkNew().getValue())
			newResultsSearchCriteria.setNewUpdated(true);
		else
			newResultsSearchCriteria.setNewUpdated(false);
		
		if(form.chkSeenChecked().getValue())
			newResultsSearchCriteria.setSeenChecked(true);
		else
			newResultsSearchCriteria.setSeenChecked(false);
		
		if (form.chkChecked().getValue())
			newResultsSearchCriteria.setChecked(true);
		else
			newResultsSearchCriteria.setChecked(false);
		
		if(form.chkReview().getValue())
			newResultsSearchCriteria.setForReview(true);
		else
			newResultsSearchCriteria.setForReview(false);

		if(form.chkCompleted().getValue())
			newResultsSearchCriteria.setCompleted(true);
		else
			newResultsSearchCriteria.setCompleted(false);

		if(form.chkInpatientOrders().getValue())
		{
			newResultsSearchCriteria.setInpatients(1);
		}
		else if(form.chkOutpatientOrders().getValue())
		{
			newResultsSearchCriteria.setInpatients(2);
		}
		else
		{
			newResultsSearchCriteria.setInpatients(0);
		}
		
		if(form.chkExcludeInpatients().getValue())
			newResultsSearchCriteria.setExcludeInpatients(true);
		else
			newResultsSearchCriteria.setExcludeInpatients(false);
		
		newResultsSearchCriteria.setDiscipline(form.cmbDiscipline().getValue());
		newResultsSearchCriteria.setFromDate(form.dteFrom().getValue());
		newResultsSearchCriteria.setToDate(form.dteTo().getValue());//WDEV-16310	
		
		newResultsSearchCriteria.setDays(form.cmbDays().getValue());
		
		form.getGlobalContext().OCRR.setNewResultsSearchCriteria(newResultsSearchCriteria);
		
	}

	private OrderInvStatusCollection getRequiredInvStatuses()
	{
		OrderInvStatusCollection stColl = new OrderInvStatusCollection();
		if (form.chkNew().getValue())
		{
			stColl.add(OrderInvStatus.NEW_RESULT);
			stColl.add(OrderInvStatus.UPDATED_RESULT);
			stColl.add(OrderInvStatus.RESULTED);
		}
		if (form.chkReview().getValue())
		{
			stColl.add(OrderInvStatus.REVIEW);
		}
		if (form.chkSeenChecked().getValue())
		{
			stColl.add(OrderInvStatus.SEEN);
			//stColl.add(OrderInvStatus.CHECKED);
		}
		
		if (form.chkChecked().getValue())
		{
			stColl.add(OrderInvStatus.CHECKED);
		}

		if (form.chkCompleted().getValue())
			stColl.add(OrderInvStatus.COMPLETE);
		
		return stColl;
	}

	private void addNewResult(NewResultsListVo newResult, Date dateUnseen)
	{
		if (newResult == null)
			return;
		
		boolean isDft = isDFT(newResult);

		// WDEV-9780
		if (form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
		{
			ServiceRefVo voInvService = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getProviderServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? newResult.getInvestigation().getProviderService().getLocationService().getService() : null;
			SecurityLevelConfigVo voInvSecurityLevel = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

			if (!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel, false)) //WDEV-11622
				return;
		}

		grdResultsRow row = createOrFindSpecimenGridRow(newResult);

		// RepDateTime
		if (newResult.getRepDateTimeIsNotNull())
		{
			if (newResult.getOrdInvCurrentStatus() != null && OrderInvStatus.REVIEW.equals(newResult.getOrdInvCurrentStatus().getOrdInvStatus()))
			{
				row.setRepDate(newResult.getAllocatedDateForReview() != null ? newResult.getAllocatedDateForReview().toString() : "-");
			}
			else if (newResult.getSpecimen() != null && newResult.getSpecimen().size() > 0 && newResult.getSpecimen().get(0) != null && Boolean.FALSE.equals(newResult.getSpecimen().get(0).getColTimeFillerSupplied()))//WDEV-16232
			{
				row.setRepDate(newResult.getRepDateTime().getDate().toString());
			}
			else
			{
				row.setRepDate(newResult.getRepDateTime().toString());
			}
		}
		
		/*if(isDft)// 	WDEV-16232
		{
			OrderSpecimenCommentsVo specimen = getFirstSpecimenCollected(newResult.getSpecimen());
			
			if(specimen != null && specimen.getCollDateTimeFiller() != null)
			{
				if(Boolean.FALSE.equals(specimen.getColTimeFillerSupplied()))
				{
					row.setRepDate(specimen.getCollDateTimeFiller().getDate().toString());
				}
				else
				{
					row.setRepDate(specimen.getCollDateTimeFiller().toString());
				}
			}
		}*/

		// Investigation
		if (newResult.getInvestigationIsNotNull())
		{
			if (newResult.getInvestigation().getInvestigationIndexIsNotNull())
			{
				row.setInvestigation(newResult.getInvestigation().getInvestigationIndex().getName());
				row.setTooltipForInvestigation(row.getInvestigation());
			}
		}

		// ABN
		if (newResult.getResultDetails() != null && newResult.getResultDetails().getPathologyResultDetails() != null)//WDEV-16232
		{
			for(int i=0; i<newResult.getResultDetails().getPathologyResultDetails().size(); i++)
			{
				if (newResult.getResultDetails().getPathologyResultDetails().get(i) != null && newResult.getResultDetails().getPathologyResultDetails().get(i).getIsAbnormalIsNotNull() && newResult.getResultDetails().getPathologyResultDetails().get(i).getIsAbnormal().booleanValue())//WDEV-16232
				{
					row.setABN(form.getImages().Core.CriticalError);
					row.setTooltipForABN("Abnormal Result");
					
					break;
				}
			}
		}

		// Status
		String szTooltip = "";
		if (newResult.getOrdInvCurrentStatusIsNotNull() && newResult.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull())
		{
			OrderInvStatus currStat = newResult.getOrdInvCurrentStatus().getOrdInvStatus();

			Image image = newResult.getOrdInvCurrentStatus().getOrdInvStatus().getImage();
			szTooltip = generateStatusTooltip(newResult.getOrdInvCurrentStatus());
			
			//WDEV-16679
			if (currStat.equals(OrderInvStatus.REVIEW) && newResult.getAllocatedHCPforReview() != null)
			{
				szTooltip = (szTooltip + "<br><b>Review HCP: </b>" + newResult.getAllocatedHCPforReview().toString());
				szTooltip = (szTooltip + "<br><b>Review Date: </b>" + newResult.getAllocatedDateForReview());
			}

			if (newResult.getRepDateTimeIsNotNull() && dateUnseen != null)
			{
				if (currStat.equals(OrderInvStatus.NEW_RESULT) || currStat.equals(OrderInvStatus.UPDATED_RESULT))
				{
					if (newResult.getRepDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Unseen");
					}
				}
				else if (currStat.equals(OrderInvStatus.REVIEW))
				{
					if (newResult.getOrdInvCurrentStatus().getChangeDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Requires Attention");
					}
				}
			}
			row.setStatus(image);
			
			if(!isDft)
			{
				row.setTooltipForStatus(szTooltip);
			}
		}
		
		//WDEV-17030 F/P display for each result specimen row - starts here
		if (newResult.getResultStatusIsNotNull())
		{
			row.setColPF(newResult.getResultStatusIsNotNull() ? newResult.getResultStatus().getText(): "");
		}
		//WDEV-17030 - end

		//WDEV-12054
		if(newResult.getOrdInvXOStatusHistoryIsNotNull() && newResult.getOrdInvXOStatusHistory().size() > 0)
		{
			szTooltip += "<br>" + newResult.getOrdInvXOStatusHistory().generateXoStatusTooltip();
			if(!isDft)
			{
				row.setTooltipForStatus(szTooltip);
			}
		}

		Category category = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getCategory() : null;
		
		// WDEV-13320
		// Add latest comment to result
		if (Category.CLINICALIMAGING.equals(category) || Category.CLINICAL.equals(category))
		{
			if (newResult.getResultConclusionCommentsIsNotNull() && newResult.getResultConclusionComments().size() > 0)
			{
				ResultCommentsLiteVoCollection comments = newResult.getResultConclusionComments();
				
				// WDEV-13876 - Also pre-append authoring date and authoring info of the last comment
				comments.sort(SortOrder.DESCENDING);
				ResultCommentsLiteVo lastComment = comments.get(0);
				
				szTooltip += "<br><b>Last Annotation Comment: " + lastComment.getAuthoringInformation().getAuthoringDateTime().toString() + " ";
				szTooltip += lastComment.getAuthoringInformation().getAuthoringHcp().getName().toString() + ":</b> " + lastComment.getComment();
				
				// WDEV-13872 - Append correction
				if (lastComment.getCorrectingDateTimeIsNotNull())
				{
					szTooltip += "<br><b>Corrected " + lastComment.getCorrectingDateTime().toString() + " ";
					szTooltip += lastComment.getCorrectingHcp().getName().toString() + ":</b> " + lastComment.getCorrectionReason();
				}
				
				row.setTooltipForStatus(szTooltip);
			}
		}
		else if (Category.PATHOLOGY.equals(category))
		{
			if (newResult.getSpecimenIsNotNull() && newResult.getSpecimen().size() > 0 && newResult.getSpecimen().get(0) != null && newResult.getSpecimen().get(0).getResultConclusionCommentsIsNotNull() && newResult.getSpecimen().get(0).getResultConclusionComments().size() > 0)//WDEV-16232
			{
				ResultCommentsLiteVoCollection comments = newResult.getSpecimen().get(0).getResultConclusionComments();//WDEV-16232

				// WDEV-13876 - Also pre-append authoring date and authoring info of the last comment
				comments.sort(SortOrder.DESCENDING);
				ResultCommentsLiteVo lastComment = comments.get(0);
				
				szTooltip += "<br><b>Last Annotation Comment: " + lastComment.getAuthoringInformation().getAuthoringDateTime().toString() + " ";
				szTooltip += lastComment.getAuthoringInformation().getAuthoringHcp().getName().toString() + ":</b> " + lastComment.getComment();
				
				// WDEV-13872 - Append correction
				if (lastComment.getCorrectingDateTimeIsNotNull())
				{
					szTooltip += "<br><b>Corrected " + lastComment.getCorrectingDateTime().toString() + " ";
					szTooltip += lastComment.getCorrectingHcp().getName().toString() + ":</b> " + lastComment.getCorrectionReason();
				}
				
				if(!isDft)
				{
					row.setTooltipForStatus(szTooltip);
				}
			}
		}
		
		OcsPathRadResultVo res = new OcsPathRadResultVo();
		res.setCategory(category);
		res.setOrderInvestigation(newResult);
		res.setPatient(newResult.getOrderDetails().getPatient());//wdev-10391
		// WDEV-13320
		res.setHasComments((Category.CLINICALIMAGING.equals(category) && newResult.getResultConclusionCommentsIsNotNull() && newResult.getResultConclusionComments().size() > 0)
				|| (Category.PATHOLOGY.equals(category) && newResult.getSpecimenIsNotNull() && newResult.getSpecimen().size() > 0 && newResult.getSpecimen().get(0) != null && newResult.getSpecimen().get(0).getResultConclusionCommentsIsNotNull() && newResult.getSpecimen().get(0).getResultConclusionComments().size() > 0));//WDEV-16232
		row.setValue(res);
	}

	// 	WDEV-16232
	private OrderSpecimenCommentsVo getFirstSpecimenCollected(OrderSpecimenCommentsVoCollection specimenColl) 
	{
		if(specimenColl == null || specimenColl.size() == 0)
			return null;
		
		OrderSpecimenCommentsVo specimenMin = specimenColl.get(0);
		for(OrderSpecimenCommentsVo specimen : specimenColl)
		{
			if(specimen == null)
				continue;
			
			if(specimenMin.getSysInfo().getCreationDateTime().isGreaterThan(specimen.getSysInfo().getCreationDateTime()))
				specimenMin = specimen;
		}
		
		return specimenMin;
	}


	private boolean isDFT(NewResultsListVo newResult) //WDEV-16232
	{
		if(newResult == null || newResult.getInvestigation() == null)
			return false;
		
		if(InvEventType.TIME_SERIES.equals(newResult.getInvestigation().getEventType()))
			return true;
			
		return false;
	}


	private String generateStatusTooltip(NewResultsListOrderInvestigationStatusVo ordInvCurrentStatus)
	{
		if (ordInvCurrentStatus != null && ordInvCurrentStatus.getOrdInvStatus() != null)
		{
			StringBuffer sb = new StringBuffer();
			sb.append("<b>Current status: </b>" + ordInvCurrentStatus.getOrdInvStatus().getText());

			if (ordInvCurrentStatus.getStatusReason() != null && ordInvCurrentStatus.getStatusReason().length() > 0 && ordInvCurrentStatus.getOrdInvStatus().equals(OrderInvStatus.CANCELLED))
				sb.append("<br><b>Current status reason: </b>" + ordInvCurrentStatus.getStatusReason());

			sb.append("<br><b>Date changed: </b>" + ordInvCurrentStatus.getChangeDateTime());
			sb.append("<br><b>Changed by: </b>" + (ordInvCurrentStatus.getChangeUserIsNotNull() ? ordInvCurrentStatus.getChangeUser().toString() : ""));

			return sb.toString();
		}
		return null;
	}

	private GenForm.grdResultsRow createOrFindSpecimenGridRow(NewResultsListVo newResult)
	{
		if (newResult == null)
			return null;

		OrderSpecimenRefVo specimen = null;//WDEV-16232
		
		if(newResult.getSpecimen() != null && newResult.getSpecimen().size() > 0)//WDEV-16232
		{
			for(int i=0; i<newResult.getSpecimen().size(); i++)
			{
				specimen = newResult.getSpecimen().get(i);//WDEV-16232
	
				for (int x = 0; x < form.grdResults().getRows().size(); x++)
				{
					GenForm.grdResultsRow row = form.grdResults().getRows().get(x);
					NewResultsListVo rowValue = (NewResultsListVo) row.getValue().getOrderInvestigation();
					if (rowValue != null && rowValue.getSpecimen() != null)// && rowValue.getSpecimen().size() > 0 && rowValue.getSpecimen().get(0) != null && rowValue.getSpecimen().get(0).equals(specimen))//WDEV-16232
					{
						for(int j=0; j<rowValue.getSpecimen().size(); j++)
						{
							if(rowValue.getSpecimen().get(j).equals(specimen))
							{
								row = row.getRows().newRow();
								row.setSelectable(false);
								row.setBackColor(row.getParentRow().getBackColor());
								return row;
							}
						}
					}
				}
			}

		}
		
		GenForm.grdResultsRow row = form.grdResults().getRows().newRow();
		row.setExpanded(true);
		row.setSelectable(true);
		if (form.grdResults().getRows().size() % 2 == 0)
			row.setBackColor(Color.Beige);

		boolean isPathResult = newResult.getInvestigation().getInvestigationIndex().getCategory().equals(Category.PATHOLOGY);
		boolean isClinicalResult = newResult.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL);//WDEV-16361
		
		if (isPathResult)
		{
			row.setCategory(form.getImages().Admin.Activity);
			row.setTooltipForCategory("Pathology Result");
		}
		else if (isClinicalResult) //WDEV-16361
		{
			row.setCategory(form.getImages().Admin.AdminAction24);
			row.setTooltipForCategory("Clinical Result");
		}
		else
		{
			row.setCategory(form.getImages().Admin.ActivityGroup);
			row.setTooltipForCategory("Radiology Result");
		}

		// Discipline
		if (newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getProviderServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getService().getServiceNameIsNotNull())
		{
			row.setDiscipline(newResult.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
			row.setTooltipForDiscipline(row.getDiscipline());
		}

		// Location or Clinician
		if (newResult.getOrderDetailsIsNotNull())
		{
			StringBuffer locClin = new StringBuffer();
			if (newResult.getOrderDetails().getPatientLocation() != null)
				locClin.append(newResult.getOrderDetails().getPatientLocation().getName());
			else if (newResult.getOrderDetails().getPatientClinic() != null)
				locClin.append(newResult.getOrderDetails().getPatientClinic().getClinicName());
				else if (newResult.getOrderDetails().getOutpatientDeptIsNotNull()) //WDEV-14351
					locClin.append(newResult.getOrderDetails().getOutpatientDept().getName()); 

			if (locClin.length() > 0)
				locClin.append(" / ");

			if (newResult.getOrderDetails().getResponsibleClinician() != null)
				locClin.append(newResult.getOrderDetails().getResponsibleClinician().getName().toString());
			else if (newResult.getOrderDetails().getResponsibleGp() != null)
				locClin.append(newResult.getOrderDetails().getResponsibleGp().getName().toString());

			row.setLocation(locClin.toString());
			row.setTooltipForLocation(row.getLocation());
		}

		// Patient details
		if (newResult.getOrderDetailsIsNotNull() && newResult.getOrderDetails().getPatientIsNotNull())
		{
			PatientShort patient = newResult.getOrderDetails().getPatient();

			StringBuffer sb = new StringBuffer();
			StringBuffer patientIdentifiers = new StringBuffer();

			if (patient.getName() != null)
			{
				sb.append(patient.getName().toShortForm());
				patientIdentifiers.append("<b>Patient:</b> " +patient.getName().toShortForm());
			}
			
			if (patient.getDisplayId() != null)
			{
				sb.append(" (" + patient.getDisplayId().getValue() + ")");
			}

			//WDEV-16710
			PatientIdCollection identifiers = patient.getIdentifiers();
			
			if (identifiers != null)
			{
				for (int a = 0; a< identifiers.size(); a++)
				{
					patientIdentifiers.append("<br><b>" + identifiers.get(a).getType().toString() + ":</b> " + identifiers.get(a).getValue() );
				}
			}
			
			row.setPatient(sb.toString());
			row.setTooltipForPatient(patientIdentifiers.toString());
		}
		
		//wdev-11753 - starts here
		if (newResult.getResultStatusIsNotNull())
		{
			//row.setColPF(domain.getMappingForResultStatusLookup(newResult.getResultStatus(), TaxonomyType.DISPLAY_TEXT));//WDEV-15709
			row.setColPF(newResult.getResultStatus().getText());// 	WDEV-15783
		}
		//wdev-11753 - ends here

		OcsPathRadResultVo res = new OcsPathRadResultVo();
		Category category = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getCategory() : null;
		res.setCategory(category);
		res.setOrderInvestigation(newResult);
		res.setDescription(newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getName() : "<not set>");
		row.setValue(res);

		return row;
	}

	private boolean validateSeachCriteria()
	{
		boolean ret = true;

		if(form.dteFrom().getValue() == null)
		{
			engine.showMessage("The \"From Date\" is required.");
			return false;
		}
		
		// WDEV-4053
		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null)
		{
			if (form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("The \"From Date\" is after the \"To Date\"");
				return false;

			}
		}

		if (form.dteFrom().getValue() == null && form.dteTo().getValue() == null && form.cmbDays().getValue() == null)
		{
			engine.showMessage("Invalid date range specified.");
			return false;
		}
		if (form.dteFrom().getValue() == null && form.dteTo().getValue() == null && form.cmbDays().getValue() != null)
		{
			calculateAndSetDateRange();
		}
		
		if (form.qmbReviewingHCP().getValue() != null && form.chkReview().getValue() == false)
		{
			engine.showMessage("If Reviewing HCP is selected, 'For Review' status must be checked.");
			return false;
		}

		if (form.chkNew().getValue() == false && form.chkSeenChecked().getValue() == false && form.chkChecked().getValue() == false && form.chkReview().getValue() == false && form.chkCompleted().getValue() == false)
		{
			engine.showMessage("At least one of the checkboxes for Result Status must be checked");
			return false;
		}
		
		if (form.ccCurrentRespClin().getValue() == null && form.qmbOrderingClinician().getValue() == null && form.qmbReviewingHCP().getValue() == null	&& form.qmbOrderingLocation().getValue() == null && form.ccOrderingHCP().getValue() == null)
		{
			engine.showMessage("A Location, Ordering Responsible Clinician, Current Responsible Clinician, Ordering HCP or Reviewing HCP must be specified.");
			return false;
		}

		return ret;
	}

	private void updateSearchTotal(int count)
	{
		form.lblTotal().setValue("Total : " + count);
	}

	private void searchClinicians(String value)
	{
		if (value == null)
			return;

		form.qmbOrderingClinician().clear();

		ValueObjectCollection clinicians = domain.listClinicians(value);

		if (clinicians == null)
		{
			form.chkInpatientOrders().setValue(false);
			form.chkOutpatientOrders().setValue(false);

			return;
		}

		ValueObjectMixedCollection mixedClinicians = clinicians.getValueObjectMixedCollection();
		int size = mixedClinicians.size();
		for (int x = 0; x < size; x++)
		{
			addClinician(mixedClinicians.get(x));
		}

		if (size > 1)
			form.qmbOrderingClinician().showOpened();
		else if (size == 1)
		{
			form.qmbOrderingClinician().setValue(mixedClinicians.get(0));
		}
		
		updateControlsState();
	}
	
	/**
	 * WDEV-13876
	 * @param reviewingHCPs
	 */
	private void populateReviweingHCP(HcpLiteVoCollection reviewingHCPs)
	{
		// Clear the query combobox for reviewing HCP
		form.qmbReviewingHCP().clear();
		
		// Check list of reviewing HCPs
		if (reviewingHCPs == null)
			return;
		
		// Add HCPs from list
		for (HcpLiteVo hcp : reviewingHCPs)
		{
			form.qmbReviewingHCP().newRow(hcp, hcp.getName() != null ? hcp.getName().toString() : "<unknown HCP>");
		}
		
		if (reviewingHCPs.size() != 1)
		{
			form.qmbReviewingHCP().showOpened();
		}
		else if (reviewingHCPs.size() == 1)
		{
			form.qmbReviewingHCP().setValue(reviewingHCPs.get(0));
			form.chkReview().setValue(true);
		}
	}



	private void addClinician(ValueObject clinician)
	{
		if (clinician instanceof HcpLiteVo)
			addHcp((HcpLiteVo) clinician);
		else if (clinician instanceof GpLiteVo)
			addGp((GpLiteVo) clinician);
	}

	private void addHcp(HcpLiteVo hcp)
	{
		addHcp(hcp, false);
	}

	private void addHcp(HcpLiteVo hcp, boolean select)
	{
		if (hcp == null)
			return;
		form.qmbOrderingClinician().newRow(hcp, hcp.getName() != null ? hcp.getName().toString() : "<unknown HCP>");
		if (select)
			form.qmbOrderingClinician().setValue(hcp);
	}

	private void addGp(GpLiteVo gp)
	{
		if (gp == null)
			return;
		form.qmbOrderingClinician().newRow(gp, gp.getName() != null ? gp.getName().toString() : "<unknown GP>");
	}

	private void searchLocations(String value)
	{
		if (value == null)
			return;

		form.qmbOrderingLocation().clear();

		LocationLiteVoCollection locations = null;
		ClinicLiteVoCollection clinics = null;
		if (form.OrdLocGrp().getValue().equals(OrdLocGrpEnumeration.rdoWard))
		{
			locations = domain.listWards(value, form.cmbHospital().getValue());
		}
		else if (form.OrdLocGrp().getValue().equals(OrdLocGrpEnumeration.rdoAne))
		{
			locations = domain.listErDepts(value, form.cmbHospital().getValue());
		}
		else if (form.OrdLocGrp().getValue().equals(OrdLocGrpEnumeration.rdoClinic))
		{
			clinics = domain.listClinics(value, form.cmbHospital().getValue());
		}
		else if (form.OrdLocGrp().getValue().equals(OrdLocGrpEnumeration.rdoOther))
		{
			locations = domain.listOtherLocations(value, form.cmbHospital().getValue());
		}

		if (locations != null)
		{
			for (int x = 0; x < locations.size(); x++)
			{
				addLocation(locations.get(x));
			}
		}
		else if (clinics != null)
		{
			for (int x = 0; x < clinics.size(); x++)
			{
				addLocation(clinics.get(x));
			}
		}

		if ((locations != null && locations.size() > 1) || (clinics != null && clinics.size() > 1))
			form.qmbOrderingLocation().showOpened();
		else if (locations != null && locations.size() == 1)
			form.qmbOrderingLocation().setValue(locations.get(0));
		else if (clinics != null && clinics.size() == 1)
			form.qmbOrderingLocation().setValue(clinics.get(0));
	}

	private void addLocation(ValueObject location)
	{
		addLocation(location, false);
	}

	private void addLocation(ValueObject location, boolean select)
	{
		if (location == null)
			return;
		if (location instanceof LocationLiteVo)
		{
			LocationLiteVo loc = (LocationLiteVo) location;
			form.qmbOrderingLocation().newRow(loc, loc.getNameIsNotNull() ? loc.getName() : "<unknown>");
		}
		else if (location instanceof ClinicLiteVo)
		{
			ClinicLiteVo loc = (ClinicLiteVo) location;
			form.qmbOrderingLocation().newRow(loc, loc.getClinicNameIsNotNull() ? loc.getClinicName() : "<unknown>");
		}
		if (select)
			form.qmbOrderingLocation().setValue(location);
	}

	private void populateDays(int maxDays)
	{
		form.cmbDays().clear();
		for (int x = 1; x <= maxDays; x++)
		{
			form.cmbDays().newRow(new Integer(x), String.valueOf(x));
		}
	}

	private void resetDaysToDefault()
	{
		form.cmbDays().setValue(new Integer(ConfigFlag.DOM.OCS_NEWRES_DAYS_DEFAULT.getValue()));
		onCmbDaysValueChanged();
	}

	/**
	 * WDEV-13876
	 * Default responsible HCP only if it is marked as such
	 */
	private void presetClinician()
	{
		form.qmbOrderingClinician().clear();
		
		HcpLiteVo hcp = (HcpLiteVo) domain.getHcpLiteUser();
		
		if (hcp != null && Boolean.TRUE.equals(hcp.getIsHCPaResponsibleHCP()))
		{
			addHcp(hcp, true);
		}
	}
	

	/**
	 * WDEV-13876
	 * Default 'Reviewing HCP' to current user only if current user is 'HCP responsible' and is of discipline MEDICAL
	 */
	private void presetReviewingHCP()
	{
		form.qmbReviewingHCP().clear();
		
		HcpLiteVo hcp = (HcpLiteVo) domain.getHcpLiteUser();
		
		if (hcp != null && Boolean.TRUE.equals(hcp.getIsHCPaResponsibleHCP()) && HcpDisType.MEDICAL.equals(hcp.getHcpType()))
		{
			form.qmbReviewingHCP().newRow(hcp, hcp.getName() != null ? hcp.getName().toString() : "<unknown HCP>");
			form.qmbReviewingHCP().setValue(hcp);
			
			form.chkReview().setValue(true);
		}
	}

	private void viewResult()
	{
		OcsPathRadResultVo value = form.grdResults().getValue();
		if (value == null)
			throw new CodingRuntimeException("grid selection is null");

		form.getGlobalContext().OCRR.setCurrentPathRadResult(value);
		form.getGlobalContext().OCRR.setSelectedPathRadResults(form.grdResults().getValues());
		engine.open(form.getForms().OCRR.ResultDialog, false);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().OCRR.ResultDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if (validateSeachCriteria())//wdev-10395
					search();
			}
			
			if(result.equals(DialogResult.YES))
			{
				engine.open(ConfigFlag.UI.DEMOGRAPHICS_FORM.getValue());
			}
			form.getGlobalContext().Core.setPatientShort(null);//WDEV-11737
			
		}
	}

	protected void onRadioButtonHcpGpGrpValueChanged()
	{
		form.qmbOrderingClinician().clear();
	}

	protected void onDteFromValueChanged() throws PresentationLogicException
	{
		if (form.dteFrom().getValue() != null)
		{
			form.cmbDays().setValue(null);
			if (form.dteTo().getValue() == null)
				form.dteTo().setValue(form.dteFrom().getValue());
		}
	}

	protected void onDteToValueChanged() throws PresentationLogicException
	{
		if (form.dteTo().getValue() != null)
		{
			form.cmbDays().setValue(null);
			if (form.dteFrom().getValue() == null)
				form.dteFrom().setValue(form.dteTo().getValue());
		}
	}

	protected void onCmbDaysValueChanged()
	{
		calculateAndSetDateRange();

	}

	private void calculateAndSetDateRange()
	{
		if (form.cmbDays().getValue() != null)
		{
			int days = form.cmbDays().getValue().intValue();
			form.dteTo().setValue(new Date());
			form.dteFrom().setValue(new Date().addDay(-1 * days));
		}

	}

	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		setLocationDefaults();
		updateControlsState();
	}

	private void setLocationDefaults()
	{
		if (form.cmbHospital().getValue() == null)
		{
			form.OrdLocGrp().setValue(OrdLocGrpEnumeration.None);
			form.chkExcludeInpatients().setValue(false);
			form.ccCurrentRespClin().setEnabled(true);
		}
		else if (form.cmbHospital().getValue() != null && form.OrdLocGrp().getValue().equals(OrdLocGrpEnumeration.None))
		{
			form.OrdLocGrp().setValue(OrdLocGrpEnumeration.rdoWard);
			form.chkExcludeInpatients().setValue(false);
		}
		
		form.qmbOrderingLocation().setValue(null);
		form.qmbOrderingLocation().clear();
	}


	protected void onGrdResultsSelectionChanged() throws PresentationLogicException
	{
		viewResult();
	}

	private void enableSearchCriteria(boolean bEnable)
	{
		form.chkNew().setEnabled(bEnable);
		form.chkReview().setEnabled(bEnable);
		form.chkSeenChecked().setEnabled(bEnable);

		form.chkChecked().setEnabled(bEnable);
		form.chkCompleted().setEnabled(bEnable);
		form.cmbDays().setEnabled(bEnable);
		form.cmbHospital().setEnabled(bEnable);
		form.dteFrom().setEnabled(bEnable);
		form.dteTo().setEnabled(bEnable);
		form.imbSearch().setEnabled(bEnable);
		form.imbClear().setEnabled(bEnable);
		form.OrdLocGrp().setEnabled(bEnable);

		form.qmbOrderingClinician().setEnabled(bEnable);
		form.qmbOrderingLocation().setEnabled(bEnable);
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		if (timer.equals(form.getTimers().gettimerSearch()))
			search();

	}

	@Override
	protected void onImbAutoRefreshClick() throws PresentationLogicException
	{
		if (form.getLocalContext().getbTimerOn().booleanValue())
		{
			form.getLocalContext().setbTimerOn(false);
			form.getTimers().gettimerSearch().setEnabled(false);

			enableAutoRefeshStart(false);
			enableSearchCriteria(true);
		}
		else
		{
			form.getLocalContext().setbTimerOn(true);
			form.getTimers().gettimerSearch().setEnabled(true);
			enableAutoRefeshStop(true);
			enableSearchCriteria(false);
		}
		
		updateControlsState();
	}

	@Override
	protected void onQmbOrderingClinicianValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}


	private void updateControlsState()
	{
		form.OrdLocGrp().setEnabled(form.cmbHospital().getValue() != null);
		form.qmbOrderingLocation().setEnabled(form.cmbHospital().getValue() != null && form.OrdLocGrp().getValue() != null);
		
		form.chkInpatientOrders().setEnabled(!OrdLocGrpEnumeration.rdoAne.equals(form.OrdLocGrp().getValue()));
		form.chkOutpatientOrders().setEnabled(!OrdLocGrpEnumeration.rdoAne.equals(form.OrdLocGrp().getValue()) && form.ccCurrentRespClin().getValue() == null);

		form.chkExcludeInpatients().setEnabled(OrdLocGrpEnumeration.rdoAne.equals(form.OrdLocGrp().getValue()));
	}


	@Override
	protected void onCcCurrentRespClinValueChanged() throws PresentationLogicException
	{
		if (MOSQueryEvent.VALUE_CHANGED.equals(form.ccCurrentRespClin().getEventFired()))
		{
			form.chkOutpatientOrders().setValue(false);
		}
		
		updateControlsState();
	}


	@Override
	protected void onChkExcludeInpatientsValueChanged() throws PresentationLogicException
	{
		updateResponsibleClinician();
	}


	private void updateResponsibleClinician()
	{
		form.ccCurrentRespClin().clear();
		form.ccCurrentRespClin().setEnabled( ! Boolean.TRUE.equals(form.chkExcludeInpatients().getValue()));
	}
}
