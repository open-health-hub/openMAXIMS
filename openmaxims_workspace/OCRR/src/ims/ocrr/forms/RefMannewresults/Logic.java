//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.65 build 3208.19246)

package ims.ocrr.forms.RefMannewresults;

import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.Specialty;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.Timer;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Image;
import ims.ocrr.forms.RefMannewresults.GenForm.grdResultsRow;
import ims.ocrr.orderingresults.vo.OrderSpecimenRefVo;
import ims.ocrr.vo.NewResultsListOrderInvestigationStatusVo;
import ims.ocrr.vo.NewResultsListVo;
import ims.ocrr.vo.NewResultsListVoCollection;
import ims.ocrr.vo.NewResultsSearchCriteriaVo;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.ResultCommentsLiteVo;
import ims.ocrr.vo.ResultCommentsLiteVoCollection;
import ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.ocrr.vo.lookups.OrderInvStatusCollection;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	@Override
	protected void onFormOpen() throws PresentationLogicException {
	
		initialize();
	}

	protected void onImbResetClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clear();
		form.chkNew().setValue(null);
		form.chkReview().setValue(null);
		resetResults();
		form.getLocalContext().setbTimerOn(false);
		form.imbAutoRefresh().setEnabled(false);
		form.imbAutoRefresh().setTooltip("This button will be enabled once a search of New Results is executed");
		form.getTimers().gettimerSearch().setEnabled(false);
		form.getGlobalContext().OCRR.setRefManNewResultsSearchCriteria(null);
	}

	private void clear()
	{
		form.chkNew().setValue(true);
		form.chkSeen().setValue(false);
		form.chkReview().setValue(true);
		
		form.chkSpecialty().setValue(false);
		form.cmbSpecialty().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.cmbDays().setValue(null);
		form.ccOrderingHCP().setValue(null);
		form.qmbInitiallySeenBy().setValue(null);
		specialtyChanged();
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//wdev-13174
		if (form.dteFrom().getValue() != null)
		{
			form.cmbDays().setValue(null);
			if (form.dteTo().getValue() == null)
				form.dteTo().setValue(form.dteFrom().getValue());
		}
		
		if (form.dteTo().getValue() != null)
		{
			form.cmbDays().setValue(null);
			if (form.dteFrom().getValue() == null)
				form.dteFrom().setValue(form.dteTo().getValue());
		}
		//-------------
		if (!validateSeachCriteria())
		{
			enableAutoRefeshStart(false);
			return;
		}
		storeSearchCriteria();
		
		enableAutoRefeshStart(true);

		search();
	}

	private void enableAutoRefeshStart(boolean bEnabled)
	{
		form.imbAutoRefresh().setEnabled(bEnabled);

		form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
		form.imbAutoRefresh().setDisabledImage(form.getImages().Core.TimerStartDisabled24);

		if (bEnabled)
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of New Results");
		else
			form.imbAutoRefresh().setTooltip("This button will be enabled once a search of New Results is executed");

	}

	private void enableAutoRefeshStop(boolean bEnable)
	{
		form.imbAutoRefresh().setEnabled(bEnable);

		form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
		form.imbAutoRefresh().setDisabledImage(form.getImages().Core.TimerStopEnabled24);

		form.imbAutoRefresh().setTooltip("Click button to stop the automatic refresh of New Results");

		form.getLocalContext().setbTimerOn(bEnable);

	}

	private void initialize() throws PresentationLogicException
	{
		populateDays(ConfigFlag.DOM.OCS_NEWRES_DAYS_MAX.getValue());

		loadDiscipline();
		
		resetSearchControlsToDefault();

		setWatchDefaultButtonState();

		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.OCRR_NEW_RESULTS_TIMER_REFRESH_RATE.getValue());

		//WDEV-9946
		form.ccOrderingHCP().initialize(MosType.HCP);
		
		//security level WDEV-9780
		RoleDisciplineSecurityLevelLiteGCVo voRoleDisciplineSecurityLevels = form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels();
		if(voRoleDisciplineSecurityLevels == null || (voRoleDisciplineSecurityLevels != null &&  voRoleDisciplineSecurityLevels.getIsConfigLoadedIsNotNull() && !voRoleDisciplineSecurityLevels.getIsConfigLoaded().equals(false)))
			form.getGlobalContext().OCRR.setRoleDisciplineSecurityLevels(domain.getRoleDisciplineSecurityLevels(engine.getLoggedInRole()));
		
		if (form.getGlobalContext().OCRR.getRefManNewResultsSearchCriteriaIsNotNull())
		{
			displaySearchCriteria();
			enableAutoRefeshStart(true);
			search();
		}
	}
	
	private void displaySearchCriteria() {
		
		NewResultsSearchCriteriaVo newResultsSearchCriteria = form.getGlobalContext().OCRR.getRefManNewResultsSearchCriteria();
		
		form.ccOrderingHCP().setValue(newResultsSearchCriteria.getOrderingHCP());
		if(newResultsSearchCriteria.getInitiallySeenByHCPIsNotNull()){
			form.qmbInitiallySeenBy().newRow(newResultsSearchCriteria.getInitiallySeenByHCP(), newResultsSearchCriteria.getInitiallySeenByHCP().toString());
			form.qmbInitiallySeenBy().setValue(newResultsSearchCriteria.getInitiallySeenByHCP());
		}
		
		if(newResultsSearchCriteria.getNewUpdated() != null && newResultsSearchCriteria.getNewUpdated())
			form.chkNew().setValue(true);
		else
			form.chkNew().setValue(false);
		if(newResultsSearchCriteria.getSeenChecked() != null && newResultsSearchCriteria.getSeenChecked())
			form.chkSeen().setValue(true);
		else
			form.chkSeen().setValue(false);
		if(newResultsSearchCriteria.getForReview() != null && newResultsSearchCriteria.getForReview())
			form.chkReview().setValue(true);
		else
			form.chkReview().setValue(false);
		
		if(newResultsSearchCriteria.getSpecialty() != null && newResultsSearchCriteria.getSpecialty()){
			form.chkSpecialty().setValue(true);
			form.cmbSpecialty().setVisible(true);
		}
		else
			form.chkSpecialty().setValue(false);
		
		if(newResultsSearchCriteria.getSpecialtyInstanceIsNotNull())
			form.cmbSpecialty().setValue((Specialty) newResultsSearchCriteria.getSpecialtyInstance());
			
		form.dteFrom().setValue(newResultsSearchCriteria.getFromDate());
		form.dteFrom().setValue(newResultsSearchCriteria.getToDate());	
		
		form.cmbDays().setValue(newResultsSearchCriteria.getDays());
	}

	private void loadDiscipline() 
	{
		ServiceLiteVoCollection discipline = domain.listDiscipline();
		if (discipline == null)
			return;

	}

	private void setWatchDefaultButtonState()
	{

		if (form.getTimers().gettimerSearch().isEnabled())
		{
			form.getLocalContext().setbTimerOn(true);
			enableAutoRefeshStart(true);
		}
		else
		{
			form.getLocalContext().setbTimerOn(false);
			enableAutoRefeshStart(false);
		}

	}

	private void resetSearchControlsToDefault() throws PresentationLogicException
	{
		// form.HcpGpGrp().setValue(HcpGpGrpEnumeration.rdoHcp);
		form.chkNew().setValue(true);
		form.chkSeen().setValue(false);
		form.chkReview().setValue(true);
		form.chkSpecialty().setValue(false);
		onChkSpecialtyValueChanged();
		resetDaysToDefault();
	}

	private void resetResults()
	{
		form.grdResults().getRows().clear();
		updateSearchTotal(0);
	}

	private void search()
	{

		resetResults();

		OrderInvStatusCollection stColl = getRequiredInvStatuses();

		int nOrderingHCPId = -1;
		if(form.ccOrderingHCP().getValue()!=null)
			nOrderingHCPId = form.ccOrderingHCP().getValue().getIMosId(); //WDEV-9946

//		public NewResultsListVoCollection listNewResultsByDateRange(Date dateFrom, Date dateTo, ValueObject location, ValueObject clinician, OrderInvStatusCollection statuses, Boolean includeCurrentInpatients, Boolean excludeInpatients, Integer orderingHCPId, ServiceRefVo discipline,Specialty specialty) {
		NewResultsListVoCollection newResults = domain.listNewResultsByDateRange(form.dteFrom().getValue(), form.dteTo().getValue(), null, null, stColl, false, false, nOrderingHCPId, null, (form.chkSpecialty().getValue() ? form.cmbSpecialty().getValue() : null), form.qmbInitiallySeenBy().getValue());
		
		//WDEV-13869
		if (newResults == null || newResults.size()==0)
		{
			engine.showMessage("No records match your search criteria.", "No data found", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}

		
		Integer nNewResUnseenDays = new Integer(ConfigFlag.DOM.OCS_NEWRES_UNSEEN_CUTOFF.getValue());
		Date dateUnseen = new Date().addDay(-1 * nNewResUnseenDays.intValue());
		
		for (int x = 0; x < newResults.size(); x++)
		{
			NewResultsListVo newResult = newResults.get(x);
			addNewResult(newResult, dateUnseen);
		}

		updateSearchTotal(form.grdResults().getRows().size());//WDEV-11170
		
		
	}
	
	private void storeSearchCriteria() {
		NewResultsSearchCriteriaVo newResultsSearchCriteria = new NewResultsSearchCriteriaVo();
		
		newResultsSearchCriteria.setOrderingHCP((HcpLiteVo) form.ccOrderingHCP().getValue());
		newResultsSearchCriteria.setInitiallySeenByHCP(form.qmbInitiallySeenBy().getValue());
			
		if(form.chkNew().getValue())
			newResultsSearchCriteria.setNewUpdated(true);
		else
			newResultsSearchCriteria.setNewUpdated(false);
		if(form.chkSeen().getValue())
			newResultsSearchCriteria.setSeenChecked(true);
		else
			newResultsSearchCriteria.setSeenChecked(false);
		if(form.chkReview().getValue())
			newResultsSearchCriteria.setForReview(true);
		else
			newResultsSearchCriteria.setForReview(false);
		
		newResultsSearchCriteria.setSpecialty(form.chkSpecialty().getValue());
		
		newResultsSearchCriteria.setSpecialtyInstance(form.cmbSpecialty().getValue());
		
		newResultsSearchCriteria.setFromDate(form.dteFrom().getValue());
		newResultsSearchCriteria.setToDate(form.dteFrom().getValue());	
		
		newResultsSearchCriteria.setDays(form.cmbDays().getValue());
		
		form.getGlobalContext().OCRR.setRefManNewResultsSearchCriteria(newResultsSearchCriteria);
		
	}

	private OrderInvStatusCollection getRequiredInvStatuses()
	{
		OrderInvStatusCollection stColl = new OrderInvStatusCollection();
		if (form.chkNew().getValue())
		{
			stColl.add(OrderInvStatus.NEW_RESULT);
			stColl.add(OrderInvStatus.UPDATED_RESULT);
			stColl.add(OrderInvStatus.RESULTED);
		}
		if (form.chkReview().getValue())
		{
			stColl.add(OrderInvStatus.REVIEW);
		}
		if (form.chkSeen().getValue())
		{
			stColl.add(OrderInvStatus.SEEN);
			stColl.add(OrderInvStatus.CHECKED);
		}
		return stColl;
	}

	private void addNewResult(NewResultsListVo newResult, Date dateUnseen)
	{
		if (newResult == null)
			return;

		//WDEV-9780
		if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
		{
			ServiceRefVo voInvService =  newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getProviderServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? newResult.getInvestigation().getProviderService().getLocationService().getService() : null;
			SecurityLevelConfigVo voInvSecurityLevel = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

			if(!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel,false)) //WDEV-11622
				return;
		}	

		grdResultsRow row = createOrFindSpecimenGridRow(newResult);

		// RepDateTime
		if (newResult.getRepDateTimeIsNotNull())
		{
			if (newResult.getSpecimen() != null && newResult.getSpecimen().size() >0 && newResult.getSpecimen().get(0) != null && Boolean.FALSE.equals(newResult.getSpecimen().get(0).getColTimeFillerSupplied()))// 	WDEV-16232
			{
				row.setRepDate(newResult.getRepDateTime().getDate().toString());
			}
			else
			{
				row.setRepDate(newResult.getRepDateTime().toString());
			}
		}

		// Investigation
		if (newResult.getInvestigationIsNotNull())
		{
			if (newResult.getInvestigation().getInvestigationIndexIsNotNull())
			{
				row.setInvestigation(newResult.getInvestigation().getInvestigationIndex().getName());
				row.setTooltipForInvestigation(row.getInvestigation());
			}
		}

		// ABN
		if (newResult.getResultDetails() != null && newResult.getResultDetails().getPathologyResultDetails() != null && newResult.getResultDetails().getPathologyResultDetails().size() > 0 && newResult.getResultDetails().getPathologyResultDetails().get(0) != null)//WDEV-16232
		{
			if (newResult.getResultDetails().getPathologyResultDetails().get(0).getIsAbnormalIsNotNull() && newResult.getResultDetails().getPathologyResultDetails().get(0).getIsAbnormal().booleanValue())//WDEV-16232
			{
				row.setABN(form.getImages().Core.CriticalError);
				row.setTooltipForABN("Abnormal Result");
			}
		}

		// Status
		String szTooltip = "";		// WDEV-13320
		if (newResult.getOrdInvCurrentStatusIsNotNull() && newResult.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull())
		{
			OrderInvStatus currStat = newResult.getOrdInvCurrentStatus().getOrdInvStatus();

			Image image = newResult.getOrdInvCurrentStatus().getOrdInvStatus().getImage();
			szTooltip = generateStatusTooltip(newResult.getOrdInvCurrentStatus());

			if (newResult.getRepDateTimeIsNotNull() && dateUnseen != null)
			{
				if (currStat.equals(OrderInvStatus.NEW_RESULT) || currStat.equals(OrderInvStatus.UPDATED_RESULT))
				{
					if (newResult.getRepDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Unseen");
					}
				}
				else if (currStat.equals(OrderInvStatus.REVIEW))
				{
					if (newResult.getOrdInvCurrentStatus().getChangeDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Requires Attention");
					}
				}
			}
			row.setStatus(image);
			row.setTooltipForStatus(szTooltip);
		}
		
		//WDEV-17030 F/P display for each result specimen row - starts here
		if (newResult.getResultStatusIsNotNull())
		{
			row.setColPF(newResult.getResultStatusIsNotNull() ? newResult.getResultStatus().getText(): "");
		}
		//WDEV-17030 - end

		Category category = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getCategory() : null;

		// WDEV-13320
		// Add latest comment to result
		if (Category.CLINICALIMAGING.equals(category))
		{
			if (newResult.getResultConclusionCommentsIsNotNull() && newResult.getResultConclusionComments().size() > 0)
			{
				ResultCommentsLiteVoCollection comments = newResult.getResultConclusionComments();
				comments.sort(SortOrder.DESCENDING);
				ResultCommentsLiteVo lastComment = comments.get(0);

				szTooltip += "<br><b>Last Annotation Comment: " + lastComment.getAuthoringInformation().getAuthoringDateTime().toString() + " ";
				szTooltip += lastComment.getAuthoringInformation().getAuthoringHcp().getName().toString() + ":</b> " + lastComment.getComment();
				row.setTooltipForStatus(szTooltip);
			}
		}
		else if (Category.PATHOLOGY.equals(category))
		{
			row.setColNoSpecimens(newResult.getSpecimen() != null ? newResult.getSpecimen().size() : 0);//WDEV-16232
			
			if (newResult.getSpecimenIsNotNull() && newResult.getSpecimen().size() > 0 && newResult.getSpecimen().get(0) != null &&  newResult.getSpecimen().get(0).getResultConclusionCommentsIsNotNull() && newResult.getSpecimen().get(0).getResultConclusionComments().size() > 0)// 	WDEV-16232
			{
				ResultCommentsLiteVoCollection comments = newResult.getSpecimen().get(0).getResultConclusionComments();// 	WDEV-16232
				comments.sort(SortOrder.DESCENDING);
				ResultCommentsLiteVo lastComment = comments.get(0);

				szTooltip += "<br><b>Last Annotation Comment: " + lastComment.getAuthoringInformation().getAuthoringDateTime().toString() + " ";
				szTooltip += lastComment.getAuthoringInformation().getAuthoringHcp().getName().toString() + ":</b> " + lastComment.getComment();
				row.setTooltipForStatus(szTooltip);
			}
		}
		
		OcsPathRadResultVo res = new OcsPathRadResultVo();
		res.setCategory(category);
		res.setOrderInvestigation(newResult);
		res.setPatient(newResult.getOrderDetails().getPatient());//wdev-10391
		// WDEV-13320
		res.setHasComments((Category.CLINICALIMAGING.equals(category) && newResult.getResultConclusionCommentsIsNotNull() && newResult.getResultConclusionComments().size() > 0)
				|| (Category.PATHOLOGY.equals(category) && newResult.getSpecimenIsNotNull() && newResult.getSpecimen().size() > 0 && newResult.getSpecimen().get(0) != null && newResult.getSpecimen().get(0).getResultConclusionCommentsIsNotNull() && newResult.getSpecimen().get(0).getResultConclusionComments().size() > 0));// 	WDEV-16232
		
		row.setValue(res);
	}

	private String generateStatusTooltip(NewResultsListOrderInvestigationStatusVo ordInvCurrentStatus)
	{
		if (ordInvCurrentStatus != null && ordInvCurrentStatus.getOrdInvStatus() != null)
		{
			StringBuffer sb = new StringBuffer();
			sb.append("<b>Current status: </b>" + ordInvCurrentStatus.getOrdInvStatus().getText());

			if (ordInvCurrentStatus.getStatusReason() != null && ordInvCurrentStatus.getStatusReason().length() > 0 && ordInvCurrentStatus.getOrdInvStatus().equals(OrderInvStatus.CANCELLED))
				sb.append("<br><b>Current status reason: </b>" + ordInvCurrentStatus.getStatusReason());

			sb.append("<br><b>Date changed: </b>" + ordInvCurrentStatus.getChangeDateTime());
			sb.append("<br><b>Changed by: </b>" + (ordInvCurrentStatus.getChangeUserIsNotNull() ? ordInvCurrentStatus.getChangeUser().toString() : ""));

			return sb.toString();
		}
		return null;
	}

	private grdResultsRow createOrFindSpecimenGridRow(NewResultsListVo newResult)
	{
		if (newResult == null)
			return null;

		OrderSpecimenRefVo specimen = null;//WDEV-16232
		
		if(newResult.getSpecimen() != null && newResult.getSpecimen().size() > 0)//WDEV-16232
		{
			specimen = newResult.getSpecimen().get(0);
		}

		for (int x = 0; x < form.grdResults().getRows().size(); x++)
		{
			GenForm.grdResultsRow row = form.grdResults().getRows().get(x);
			NewResultsListVo rowValue = (NewResultsListVo) row.getValue().getOrderInvestigation();
			if (rowValue != null && rowValue.getSpecimen() != null && rowValue.getSpecimen().size() > 0 && rowValue.getSpecimen().get(0) != null && rowValue.getSpecimen().get(0).equals(specimen))//WDEV-16232
			{
				row = row.getRows().newRow();
				row.setSelectable(false);
				row.setBackColor(row.getParentRow().getBackColor());
				return row;
			}
		}

		GenForm.grdResultsRow row = form.grdResults().getRows().newRow();
		row.setExpanded(true);
		row.setSelectable(true);
		if (form.grdResults().getRows().size() % 2 == 0)
			row.setBackColor(Color.Beige);

		boolean isPathResult = newResult.getInvestigation().getInvestigationIndex().getCategory().equals(Category.PATHOLOGY);
		if (isPathResult)
		{
			row.setCategory(form.getImages().Admin.Activity);
			row.setTooltipForCategory("Pathology Result");
		}
		else
		{
			row.setCategory(form.getImages().Admin.ActivityGroup);
			row.setTooltipForCategory("Radiology Result");
		}

		// Discipline
		if (newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getProviderServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getService().getServiceNameIsNotNull())
		{
			row.setDiscipline(newResult.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
			row.setTooltipForDiscipline(row.getDiscipline());
		}

		// Location or Clinician
		if (newResult.getOrderDetailsIsNotNull())
		{
			StringBuffer locClin = new StringBuffer();
			if (newResult.getOrderDetails().getPatientLocation() != null)
				locClin.append(newResult.getOrderDetails().getPatientLocation().getName());
			else if (newResult.getOrderDetails().getPatientClinic() != null)
				locClin.append(newResult.getOrderDetails().getPatientClinic().getClinicName());

			if (locClin.length() > 0)
				locClin.append(" / ");

			if (newResult.getOrderDetails().getResponsibleClinician() != null)
				locClin.append(newResult.getOrderDetails().getResponsibleClinician().getName().toString());
			else if (newResult.getOrderDetails().getResponsibleGp() != null)
				locClin.append(newResult.getOrderDetails().getResponsibleGp().getName().toString());

		}

		// Patient details
		if (newResult.getOrderDetailsIsNotNull() && newResult.getOrderDetails().getPatientIsNotNull())
		{
			PatientShort patient = newResult.getOrderDetails().getPatient();

			StringBuffer sb = new StringBuffer();

			if (patient.getName() != null)
			{
				sb.append(patient.getName().toShortForm());
			}
			if (patient.getDisplayId() != null)
			{
				sb.append(" (" + patient.getDisplayId().getValue() + ")");
			}

			row.setPatient(sb.toString());
			row.setTooltipForPatient(row.getPatient());
			
			row.setPatientShortVo(patient);
		}
		
		//wdev-11753 - starts here
		if (newResult.getResultStatusIsNotNull())
		{
			//row.setColPF(domain.getMappingForResultStatusLookup(newResult.getResultStatus(), TaxonomyType.DISPLAY_TEXT));//WDEV-15709
			row.setColPF(newResult.getResultStatus().getText());// 	WDEV-15783
		}
		//wdev-11753 - ends here

		OcsPathRadResultVo res = new OcsPathRadResultVo();
		Category category = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getCategory() : null;
		res.setCategory(category);
		res.setOrderInvestigation(newResult);
		res.setDescription(newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getName() : "<not set>");
		row.setValue(res);

		return row;
	}

	private boolean validateSeachCriteria()
	{
		boolean ret = true;
		
		
		if(form.dteFrom().getValue() == null)
		{
			engine.showMessage("The \"From Date\" is required.");
			return false;
		}
		
		if (form.chkSpecialty().getValue() &&
				form.cmbSpecialty().getValue() == null)
		{
			engine.showMessage("Please select Specialty.");
			return false;
		}
		
		//WDEV-4053
		if(form.dteFrom().getValue() != null && form.dteTo().getValue() != null)
		{
			if (form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("The \"From Date\" is after the \"To Date\"");
				return false;
				
			}
		}
			
		if (form.dteFrom().getValue() == null && form.dteTo().getValue() == null && form.cmbDays().getValue() == null)
		{
			engine.showMessage("Invalid date range specified.");
			return false;
		}
		if (form.dteFrom().getValue() == null && form.dteTo().getValue() == null && form.cmbDays().getValue() != null)
		{
			calculateAndSetDateRange();
		}
		if (form.chkNew().getValue() == false && form.chkSeen().getValue() == false && form.chkReview().getValue() == false)
		{
			engine.showMessage("At least one of the checkboxes for Result Status must be checked");
			return false;
		}
		
		return ret;
	}

	

	private void updateSearchTotal(int count)
	{
		form.lblTotal().setValue("Total : " + count);
	}

	private void populateDays(int maxDays)
	{
		form.cmbDays().clear();
		for (int x = 1; x <= maxDays; x++)
		{
			form.cmbDays().newRow(new Integer(x), String.valueOf(x));
		}
	}

	private void resetDaysToDefault()
	{
		form.cmbDays().setValue(new Integer(ConfigFlag.DOM.OCS_NEWRES_DAYS_DEFAULT.getValue()));
		onCmbDaysValueChanged();
	}

	/*
	 * private void presetLocation() { form.qmbOrderingLocation().clear();
	 * MemberOfStaffShortVo mos = (MemberOfStaffShortVo) domain.getMosUser(); if
	 * (mos != null && mos.getPrimaryLocationIsNotNull()) { LocationLiteVo
	 * defaultLocation = mos.getPrimaryLocation(); addLocation(defaultLocation,
	 * true); LocSiteShortVo voHospital =
	 * domain.getParentHospital(defaultLocation);
	 * form.cmbHospital().setValue(voHospital); setLocationDefaults(); } }
	 */

	private void viewResult()
	{
		OcsPathRadResultVo value = form.grdResults().getValue();
		if (value == null)
			throw new CodingRuntimeException("grid selection is null");

		form.getGlobalContext().OCRR.setCurrentPathRadResult(value);
		form.getGlobalContext().OCRR.setSelectedPathRadResults(form.grdResults().getValues());
		engine.open(form.getForms().OCRR.ResultDialog, false);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().OCRR.ResultDialog))
		{
			if (DialogResult.YES.equals(result))
			{
				engine.open(form.getForms().Core.Demographics);
				return;
			}
			form.getGlobalContext().Core.setPatientShort(null);
			if (validateSeachCriteria()) //wdev-10395
				search();
		}
	}

	/*protected void onDteFromValueChanged() throws PresentationLogicException
	{
		if (form.dteFrom().getValue() != null)
		{
			form.cmbDays().setValue(null);
			if (form.dteTo().getValue() == null)
				form.dteTo().setValue(form.dteFrom().getValue());
		}
	}*/

	/*protected void onDteToValueChanged() throws PresentationLogicException
	{
		if (form.dteTo().getValue() != null)
		{
			form.cmbDays().setValue(null);
			if (form.dteFrom().getValue() == null)
				form.dteFrom().setValue(form.dteTo().getValue());
		}
	}*/

	protected void onCmbDaysValueChanged()
	{
		calculateAndSetDateRange();

	}

	private void calculateAndSetDateRange()
	{
		if (form.cmbDays().getValue() != null)
		{
			int days = form.cmbDays().getValue().intValue();
			form.dteTo().setValue(new Date());
			form.dteFrom().setValue(new Date().addDay(-1 * days));
		}

	}

	protected void onGrdResultsSelectionChanged() throws PresentationLogicException
	{
		viewResult();

		if (form.grdResults().getSelectedRow().getPatientShortVo() != null)
		{
			form.getGlobalContext().Core.setPatientShort(null);
			form.getGlobalContext().Core.setCurrentCareContext(null);
			form.getGlobalContext().RefMan.setCatsReferral(null);
			form.getGlobalContext().RefMan.setReferralContractTypeForPatient(null);//wdev-12682
		}

	}

	private void enableSearchCriteria(boolean bEnable)
	{
		form.chkNew().setEnabled(bEnable);
		form.chkReview().setEnabled(bEnable);
		form.chkSeen().setEnabled(bEnable);
		form.cmbDays().setEnabled(bEnable);
		form.dteFrom().setEnabled(bEnable);
		form.dteTo().setEnabled(bEnable);
		form.imbSearch().setEnabled(bEnable);
		form.imbClear().setEnabled(bEnable);
		form.chkSpecialty().setEnabled(bEnable);
		form.cmbSpecialty().setEnabled(bEnable);
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		if (timer.equals(form.getTimers().gettimerSearch()))
			search();

	}

	@Override
	protected void onImbAutoRefreshClick() throws PresentationLogicException
	{
		if (form.getLocalContext().getbTimerOn().booleanValue())
		{
			form.getLocalContext().setbTimerOn(false);
			form.getTimers().gettimerSearch().setEnabled(false);

			enableAutoRefeshStart(false);
			enableSearchCriteria(true);
		}
		else
		{
			form.getLocalContext().setbTimerOn(true);
			form.getTimers().gettimerSearch().setEnabled(true);
			enableAutoRefeshStop(true);
			enableSearchCriteria(false);
		}
	}

	@Override
	protected void onChkSpecialtyValueChanged() throws PresentationLogicException 
	{
		specialtyChanged();
	}

	private void specialtyChanged() 
	{
		if (form.chkSpecialty().getValue())
		{
			form.cmbSpecialty().setVisible(true);
		}
		else
		{
			form.cmbSpecialty().setValue(null);
			form.cmbSpecialty().setVisible(false);	
		}		
	}

	@Override
	protected void onQmbInitiallySeenByTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbInitiallySeenBy().clear();
		if (value == null || value.equals(""))
		{
			engine.showMessage("Please enter at least one character to search on");
			return;
		}

		HcpLiteVoCollection voCollHcp = domain.listHcpLiteByName(value);
		if (voCollHcp != null && voCollHcp.size()>0)
		{
			for (int i = 0; i < voCollHcp.size(); i++)
			{
				form.qmbInitiallySeenBy().newRow(voCollHcp.get(i), voCollHcp.get(i).getIMosName());
			}
			if (voCollHcp.size() == 1)
			{
				form.qmbInitiallySeenBy().setValue(voCollHcp.get(0));
			}
			else
			{
				form.qmbInitiallySeenBy().showOpened();
			}
		}
		else
			engine.showMessage("No matching records found");
		
	}

}
