//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.30 build 2012.21169)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.testlist;

import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.lookups.ServiceCategory;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.ocrr.vo.InvestigationIndexShortVo;
import ims.ocrr.vo.InvestigationIndexShortVoCollection;
import ims.ocrr.vo.InvestigationProfileListSearchCriteriaVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.CategoryCollection;
import ims.ocrr.vo.lookups.LookupHelper;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		restoreSearchCriteria();
		search();
	}

	protected void onCmbCategoryValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		loadDiscipline(form.cmbCategory().getValue());
	}

	private void restoreSearchCriteria()
	{
		InvestigationProfileListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getInvestigationListSearchCriteria();
		if (searchCriteria == null)
			return;

		form.txtname().setValue(searchCriteria.getText());
		form.txtCode().setValue(searchCriteria.getInvestigationCode());
		form.cmbCategory().setValue(searchCriteria.getCategory());
		loadDiscipline(form.cmbCategory().getValue());
		form.cmbDiscipline().setValue(searchCriteria.getDiscipline());
		form.cmbStatus().setValue(searchCriteria.getStatus());
	}

	private void initialize()
	{
		form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
		loadCategory();
	}

	private void buildSearchCriteria()
	{
		InvestigationProfileListSearchCriteriaVo searchCriteria = new InvestigationProfileListSearchCriteriaVo();
		searchCriteria.setCategory(form.cmbCategory().getValue());
		searchCriteria.setDiscipline(form.cmbDiscipline().getValue());
		searchCriteria.setStatus(form.cmbStatus().getValue());
		searchCriteria.setInvestigationCode(form.txtCode().getValue());
		searchCriteria.setText(form.txtname().getValue());
		form.getGlobalContext().OCRR.setInvestigationListSearchCriteria(searchCriteria);
	}

	private void loadDiscipline(Category value)
	{
		form.cmbDiscipline().clear();
		if (value == null)
			return;

		ServiceShortVoCollection voCollServiceShort = new ServiceShortVoCollection();

		//WDEV-17122
		if (form.cmbCategory().getValue().equals(Category.PATHOLOGY))
			voCollServiceShort = domain.listServiceforCategoryByType(ServiceCategory.PATHOLOGY_DISCIPLINE);
		else if (Category.CLINICALIMAGING.equals(form.cmbCategory().getValue()))
			voCollServiceShort = domain.listServiceforCategoryByType(ServiceCategory.RADIOLOGY_MODALITY);
		else
			voCollServiceShort = domain.listServiceforCategoryByType(ServiceCategory.CLINICAL);

		for (int i = 0; i < voCollServiceShort.size(); i++)
		{
			form.cmbDiscipline().newRow(voCollServiceShort.get(i), voCollServiceShort.get(i).getServiceName());
		}

	}

	protected void onGrdQuestionsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		changeContextMenuStatus();
	}

	protected void onFormModeChanged()
	{
		changeContextMenuStatus();
	}

	private void changeContextMenuStatus()
	{
		form.getContextMenus().getOCRRTestListUPDATE_TESTItem().setVisible(false);
		form.getContextMenus().getOCRRTestListADD_TESTItem().setVisible(false);
		form.getContextMenus().getOCRRTestListVIEW_TESTItem().setVisible(false);

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().getOCRRTestListADD_TESTItem().setVisible(true);

			if (form.grdTests().getSelectedRowIndex() != -1)
			{
				form.getContextMenus().getOCRRTestListUPDATE_TESTItem().setVisible(true);
				form.getContextMenus().getOCRRTestListVIEW_TESTItem().setVisible(true);
			}
		}
	}

	private void loadCategory()
	{
		Category category;

		form.cmbCategory().clear();

		CategoryCollection coll = LookupHelper.getCategory(domain.getLookupService());
		ims.framework.cn.data.TreeNode[] rootNodes = coll.getRootNodes();

		for (int i = 0; i < rootNodes.length; i++)
		{
			category = (Category) rootNodes[i];

			if (!Category.PAS.equals(category))
			{
				form.cmbCategory().newRow(category, category.getText());
			}
		}
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.OCRRTestList.ADD_TEST :
				addRecord();
			break;
			case GenForm.ContextMenus.OCRRTestList.UPDATE_TEST :
				updateRecord();
			break;
			case GenForm.ContextMenus.OCRRTestList.VIEW_TEST :
				viewRecord();
			break;
			default :
			break;
		}
	}

	private void viewRecord()
	{
		Integer recordId = null;
		if (form.grdTests().getValue() != null)
			recordId = form.grdTests().getValue().getID_InvestigationIndex();
		form.getGlobalContext().OCRR.setSelectedTest(domain.getInvestigationIndex(recordId));
		form.getGlobalContext().OCRR.setNewInvestigation(Boolean.FALSE);
		form.getGlobalContext().OCRR.setNewProfile(Boolean.FALSE);
		engine.open(form.getForms().OCRR.TestEdit, "Investigation Edit");
	}

	private void updateRecord()
	{
		Integer recordId = null;
		if (form.grdTests().getValue() != null)
			recordId = form.grdTests().getValue().getID_InvestigationIndex();
		form.getGlobalContext().OCRR.setSelectedTest(domain.getInvestigationIndex(recordId));
		form.getGlobalContext().OCRR.setNewInvestigation(Boolean.TRUE);
		form.getGlobalContext().OCRR.setNewProfile(Boolean.FALSE);
		engine.open(form.getForms().OCRR.TestEdit, "Investigation Edit");
	}

	private void addRecord()
	{
		form.getGlobalContext().OCRR.setSelectedTest(null);
		form.getGlobalContext().OCRR.setNewInvestigation(null);
		form.getGlobalContext().OCRR.setNewProfile(Boolean.FALSE);
		engine.open(form.getForms().OCRR.TestEdit, "Investigation Edit");
	}

	private boolean isValidSearchCriteria()
	{
		InvestigationProfileListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getInvestigationListSearchCriteria();
		if (searchCriteria == null)
			return false;

		if(searchCriteria.getTextIsNotNull())
			return true;
		if (searchCriteria.getInvestigationCodeIsNotNull())
			return true;
		if (searchCriteria.getCategoryIsNotNull())
			return true;
		if (searchCriteria.getDisciplineIsNotNull())
			return true;
		if (searchCriteria.getStatusIsNotNull())
			return true;

		return false;
	}

	private void search()
	{
		form.grdTests().getRows().clear();

		InvestigationProfileListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getInvestigationListSearchCriteria();
		if (searchCriteria == null)
			return;

		if (!isValidSearchCriteria())
		{
			engine.showMessage("Please Enter Some Search Criteria");
			form.getGlobalContext().OCRR.setInvestigationListSearchCriteria(null);
			return;
		}

		InvestigationIndexShortVoCollection coll = null;
		if(form.txtCode().getValue()!=null)
			coll = domain.listInvestigationIndex(form.txtname().getValue(), form.txtCode().getValue(), form.cmbDiscipline().getValue(), form.cmbCategory().getValue(), form.cmbStatus().getValue(), Boolean.FALSE);
		else
			coll = domain.listInvestigationIndex(form.txtname().getValue(), form.cmbDiscipline().getValue(), form.cmbCategory().getValue(), form.cmbStatus().getValue(), Boolean.FALSE);

		form.grdTests().getRows().clear();

		if (coll == null)
		{
			engine.showMessage("There are no Records for the Search Criteria Provided");
			return;
		}

		if (coll.size() == 0)
		{
			engine.showMessage("There are no Records for the Search Criteria Provided");
			return;
		}

		populateScreenFromData(coll);
		changeContextMenuStatus();
	}

	private void populateScreenFromData(InvestigationIndexShortVoCollection coll)
	{
		for (int i = 0; i < coll.size(); i++)
		{
			InvestigationIndexShortVo item = coll.get(i);

			GenForm.grdTestsRow row = form.grdTests().getRows().newRow();

			row.setcolImage(form.getImages().OCRR.Investigation);
			row.setcolName(item.getName());
			row.setcolDescription(item.getDescription());
			if (item.getColourIsNotNull())
			{
				Color color = Color.getColor(item.getColour().getName());
				if (color != null)
					row.setcolColour(color.getImage());
			}
			row.setcolCategory(item.getCategoryIsNotNull() ? item.getCategory().getText() : "");

			if (item.getActiveStatusIsNotNull())
				row.setcolStatus(item.getActiveStatus().getText());
			row.setValue(item);
		}
	}

	protected void onGrdTestsGridHeaderClicked(int column) throws PresentationLogicException
	{
		if (column == 4)
		{
			if (form.getLocalContext().getSortOrder() == null)
			{
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
			}

			InvestigationIndexShortVoCollection voCollInIndexShort = form.grdTests().getValues();
			voCollInIndexShort.sort(InvestigationIndexShortVo.getColourComparator(form.getLocalContext().getSortOrder()));

			if (form.getLocalContext().getSortOrder().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrder(SortOrder.DESCENDING);
			else if (form.getLocalContext().getSortOrder().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);

			form.grdTests().getRows().clear();
			populateScreenFromData(voCollInIndexShort);
		}
	}

	protected void onImbResetClick() throws PresentationLogicException
	{
		form.getGlobalContext().OCRR.setInvestigationListSearchCriteria(null);
		
		form.grdTests().getRows().clear();
		form.cmbCategory().setValue(null);
		form.cmbDiscipline().setValue(null);
		form.cmbDiscipline().clear();
		form.cmbStatus().setValue(null);

		form.txtname().setValue("");
		form.txtCode().setValue(null);
		
		changeContextMenuStatus();
	}

	protected void onImbSearchClick() throws PresentationLogicException
	{
		buildSearchCriteria();
		search();
	}
}
