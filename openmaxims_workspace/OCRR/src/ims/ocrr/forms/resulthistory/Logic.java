//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.54 build 2714.17603)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.resulthistory;

import ims.core.vo.lookups.TaxonomyType;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.helper.ResultDisplayHelper;
import ims.ocrr.vo.OcsPathRadResultVoCollection;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.OrderResultHistoryVoCollection;
import ims.ocrr.vo.OrderResultHistoryVo;
import ims.ocrr.vo.lookups.Category;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
	}

	private void initialise()
	{
		loadOrderInvestigations();
	}

	private void loadOrderInvestigations()
	{
		form.cmbInvestigation().clear();
		OcsPathRadResultVoCollection collResults = form.getGlobalContext().OCRR.getSelectedInvsWithResults();
		OcsPathRadResultVo item = null;
		if(collResults != null && collResults.size() > 0)
		{
			for(int i=0;i<collResults.size();i++)
			{
				item = collResults.get(i);
				form.cmbInvestigation().newRow(item.getOrderInvestigation(), item.getDescription());				
			}
		}
		else
			throw new CodingRuntimeException("No Results passed to dialog");
		
		//default selection to the first one
		form.cmbInvestigation().setValue(collResults.get(0).getOrderInvestigation());
		cmbInvestigationChanged();
	}

	protected void onCmbInvestigationValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		cmbInvestigationChanged();
	}

	private void cmbInvestigationChanged()
	{
		Category cat = form.getGlobalContext().OCRR.getSelectedInvsWithResults().get(0).getCategory();
		ResultDisplayHelper helper = null;
		
		form.dyngrdResults().getColumns().clear();
		form.dyngrdResults().getRows().clear();
		form.dyngrdResults().clear();
		
		if(form.cmbInvestigation().getValue() != null)
		{
			OrderResultHistoryVoCollection voCollResult = domain.listResultHistory(form.cmbInvestigation().getValue());
			if(voCollResult != null)
			{
				for(OrderResultHistoryVo item : voCollResult)
				{
					if(cat != null)
					{
						String displayTextMappingForResultStatus = null;// 	WDEV-15783
						if(item != null && item.getResultStatus() != null)// 	WDEV-15783
						{
							displayTextMappingForResultStatus = domain.getMappingForResultStatusLookup(item.getResultStatus(), TaxonomyType.DISPLAY_TEXT);
						}
						
						if(cat.equals(Category.PATHOLOGY))
						{
							helper = new ResultDisplayHelper(item, form.dyngrdResults(), engine);
							helper.addPathResult(true, displayTextMappingForResultStatus);// 	WDEV-15783
						}
						else if(cat.equals(Category.CLINICALIMAGING))
						{
							helper = new ResultDisplayHelper(item, form.dyngrdResults(), true, engine);
							helper.addRadResult(true, displayTextMappingForResultStatus);// 	WDEV-15783
						}
					}
					
				}
				form.dyngrdResults().getRows().expandAll();
			}
		}
		
		form.dyngrdResults().setReadOnly(true); //WDEV-15625 
	}

	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
}
