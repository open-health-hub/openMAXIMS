//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.phlebotomycollectionround;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		OCRR = new OCRRContext(context);
		Core = new CoreContext(context);
	}
	public final class OCRRContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private OCRRContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getClosedRoundIsNotNull()
		{
			return !cx_OCRRClosedRound.getValueIsNull(context);
		}
		public ims.ocrr.vo.PhlebotomyRoundShortVo getClosedRound()
		{
			return (ims.ocrr.vo.PhlebotomyRoundShortVo)cx_OCRRClosedRound.getValue(context);
		}
		public void setClosedRound(ims.ocrr.vo.PhlebotomyRoundShortVo value)
		{
			cx_OCRRClosedRound.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OCRRClosedRound = new ims.framework.ContextVariable("OCRR.ClosedRound", "_cv_OCRR.ClosedRound");
		public boolean getRoundDateIsNotNull()
		{
			return !cx_OCRRRoundDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getRoundDate()
		{
			return (ims.framework.utils.Date)cx_OCRRRoundDate.getValue(context);
		}
		public void setRoundDate(ims.framework.utils.Date value)
		{
			cx_OCRRRoundDate.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OCRRRoundDate = new ims.framework.ContextVariable("OCRR.RoundDate", "_cv_OCRR.RoundDate");
		public boolean getRoundToCollectIsNotNull()
		{
			return !cx_OCRRRoundToCollect.getValueIsNull(context);
		}
		public ims.ocrr.vo.lookups.SpecimenCollectionTime getRoundToCollect()
		{
			return (ims.ocrr.vo.lookups.SpecimenCollectionTime)cx_OCRRRoundToCollect.getValue(context);
		}
		public void setRoundToCollect(ims.ocrr.vo.lookups.SpecimenCollectionTime value)
		{
			cx_OCRRRoundToCollect.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OCRRRoundToCollect = new ims.framework.ContextVariable("OCRR.RoundToCollect", "_cv_OCRR.RoundToCollect");
		public boolean getWorkListItemsIsNotNull()
		{
			return !cx_OCRRWorkListItems.getValueIsNull(context);
		}
		public ims.ocrr.vo.SpecimenWorkListitemCustomVoCollection getWorkListItems()
		{
			return (ims.ocrr.vo.SpecimenWorkListitemCustomVoCollection)cx_OCRRWorkListItems.getValue(context);
		}
		public void setWorkListItems(ims.ocrr.vo.SpecimenWorkListitemCustomVoCollection value)
		{
			cx_OCRRWorkListItems.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OCRRWorkListItems = new ims.framework.ContextVariable("OCRR.WorkListItems", "_cv_OCRR.WorkListItems");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getItemsIsNotNull()
		{
			return !cx_CoreItems.getValueIsNull(context);
		}
		public ims.admin.vo.SelectItemVoCollection getItems()
		{
			return (ims.admin.vo.SelectItemVoCollection)cx_CoreItems.getValue(context);
		}
		public void setItems(ims.admin.vo.SelectItemVoCollection value)
		{
			cx_CoreItems.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreItems = new ims.framework.ContextVariable("Core.Items", "_cv_Core.Items");
		public boolean getReportIDIsNotNull()
		{
			return !cx_CoreReportID.getValueIsNull(context);
		}
		public Integer getReportID()
		{
			return (Integer)cx_CoreReportID.getValue(context);
		}
		public void setReportID(Integer value)
		{
			cx_CoreReportID.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreReportID = new ims.framework.ContextVariable("Core.ReportID", "_cv_Core.ReportID");
		public boolean getTemplateIDIsNotNull()
		{
			return !cx_CoreTemplateID.getValueIsNull(context);
		}
		public Integer getTemplateID()
		{
			return (Integer)cx_CoreTemplateID.getValue(context);
		}
		public void setTemplateID(Integer value)
		{
			cx_CoreTemplateID.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreTemplateID = new ims.framework.ContextVariable("Core.TemplateID", "_cv_Core.TemplateID");

		private ims.framework.Context context;
	}

	public OCRRContext OCRR;
	public CoreContext Core;
}
