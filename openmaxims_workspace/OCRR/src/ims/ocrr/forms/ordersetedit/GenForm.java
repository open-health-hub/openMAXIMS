//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.ordersetedit;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbColorComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.framework.utils.Color value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.framework.utils.Color value)
		{
			return super.control.removeRow(value);
		}
		public ims.framework.utils.Color getValue()
		{
			return (ims.framework.utils.Color)super.control.getValue();
		}
		public void setValue(ims.framework.utils.Color value)
		{
			// should add value if does not exist
			if(value != null && super.control.getValues() != null)
			{
				boolean exist = false;
				for(int x = 0; x < super.control.getValues().size(); x++)
				{
					ims.framework.utils.Color item = (ims.framework.utils.Color)super.control.getValues().get(x);
					if(item != null && item.equals(value))
					{
						exist = true;
						break;
					}
				}
				if(!exist)
				{
					newRow(value, value.getText(), value.getImage());
				}
			}
			super.control.setValue(value);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdHelpTextRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdHelpTextRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolTitleReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolTitleReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolTitleOpened()
		{
			super.row.showOpened(0);
		}
		public ims.ocrr.vo.lookups.HelpTextCategory getcolTitle()
		{
			return (ims.ocrr.vo.lookups.HelpTextCategory)super.row.get(0);
		}
		public void setcolTitle(ims.ocrr.vo.lookups.HelpTextCategory value)
		{
			super.row.set(0, value, true);
		}
		public void setCellcolTitleTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolTextReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolTextReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolTextOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolText()
		{
			return (String)super.row.get(1);
		}
		public void setcolText(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolTextTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.ocrr.vo.HelpTextVo getValue()
		{
			return (ims.ocrr.vo.HelpTextVo)super.row.getValue();
		}
		public void setValue(ims.ocrr.vo.HelpTextVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdHelpTextRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdHelpTextRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdHelpTextRow get(int index)
		{
			return new grdHelpTextRow(super.collection.get(index));
		}
		public grdHelpTextRow newRow()
		{
			return new grdHelpTextRow(super.collection.newRow());
		}
		public grdHelpTextRow newRow(boolean autoSelect)
		{
			return new grdHelpTextRow(super.collection.newRow(autoSelect));
		}
		public grdHelpTextRow newRowAt(int index)
		{
			return new grdHelpTextRow(super.collection.newRowAt(index));
		}
		public grdHelpTextRow newRowAt(int index, boolean autoSelect)
		{
			return new grdHelpTextRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdHelpTextGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
		{
			super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
		}
		public ims.ocrr.vo.HelpTextVoCollection getValues()
		{
			ims.ocrr.vo.HelpTextVoCollection listOfValues = new ims.ocrr.vo.HelpTextVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ocrr.vo.HelpTextVo getValue()
		{
			return (ims.ocrr.vo.HelpTextVo)super.grid.getValue();
		}
		public void setValue(ims.ocrr.vo.HelpTextVo value)
		{
			super.grid.setValue(value);
		}
		public grdHelpTextRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdHelpTextRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdHelpTextRowCollection getRows()
		{
			return new grdHelpTextRowCollection(super.grid.getRows());
		}
		public grdHelpTextRow getRowByValue(ims.ocrr.vo.HelpTextVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdHelpTextRow(row);
		}
		public void setcolTitleHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolTitleHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox colTitleComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setcolTextHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolTextHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdComponentsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdComponentsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolImageReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolImageReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolImageOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Image getcolImage()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setcolImage(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellcolImageTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolName()
		{
			return (String)super.row.get(1);
		}
		public void setcolName(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolStatusReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolStatusOpened()
		{
			super.row.showOpened(2);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getcolStatus()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.row.get(2);
		}
		public void setcolStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			super.row.set(2, value, true);
		}
		public void setCellcolStatusTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.ocrr.vo.OrderSetComponentEditVo getValue()
		{
			return (ims.ocrr.vo.OrderSetComponentEditVo)super.row.getValue();
		}
		public void setValue(ims.ocrr.vo.OrderSetComponentEditVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdComponentsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdComponentsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdComponentsRow get(int index)
		{
			return new grdComponentsRow(super.collection.get(index));
		}
		public grdComponentsRow newRow()
		{
			return new grdComponentsRow(super.collection.newRow());
		}
		public grdComponentsRow newRow(boolean autoSelect)
		{
			return new grdComponentsRow(super.collection.newRow(autoSelect));
		}
		public grdComponentsRow newRowAt(int index)
		{
			return new grdComponentsRow(super.collection.newRowAt(index));
		}
		public grdComponentsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdComponentsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdComponentsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public ims.ocrr.vo.OrderSetComponentEditVoCollection getValues()
		{
			ims.ocrr.vo.OrderSetComponentEditVoCollection listOfValues = new ims.ocrr.vo.OrderSetComponentEditVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ocrr.vo.OrderSetComponentEditVo getValue()
		{
			return (ims.ocrr.vo.OrderSetComponentEditVo)super.grid.getValue();
		}
		public void setValue(ims.ocrr.vo.OrderSetComponentEditVo value)
		{
			super.grid.setValue(value);
		}
		public grdComponentsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdComponentsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdComponentsRowCollection getRows()
		{
			return new grdComponentsRowCollection(super.grid.getRows());
		}
		public grdComponentsRow getRowByValue(ims.ocrr.vo.OrderSetComponentEditVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdComponentsRow(row);
		}
		public void setcolImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public GridComboBox colStatusComboBox()
		{
			return new GridComboBox(super.grid, 2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("OCRR.OrderSetEditorReadOnly", "_cv_OCRR.OrderSetEditorReadOnly").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'OCRR.OrderSetEditorReadOnly' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuOCRRHelpText = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuOCRRHelpTextADD_HELPTEXTItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Help Text", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuOCRRHelpText.add(contextMenus.contextMenuOCRRHelpTextADD_HELPTEXTItem);
		contextMenus.contextMenuOCRRHelpTextREMOVE_HELPTEXTItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove Help Text", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOCRRHelpText.add(contextMenus.contextMenuOCRRHelpTextREMOVE_HELPTEXTItem);
		form.registerMenu(contextMenus.contextMenuOCRRHelpText);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Order Sets", true, false, new Integer(116104), true, false);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditADDPROFILESItem = factory.createMenuItem(startControlID.intValue() + 4, "Add Profiles", true, false, new Integer(116108), true, false);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditADDPROFILESItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Investigations", true, false, new Integer(116105), true, false);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem = factory.createMenuItem(startControlID.intValue() + 6, "Add Column Separator", true, false, new Integer(116107), true, true);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem = factory.createMenuItem(startControlID.intValue() + 7, "Add Separator", true, false, new Integer(116106), true, false);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditMOVEUPItem = factory.createMenuItem(startControlID.intValue() + 8, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditMOVEUPItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem = factory.createMenuItem(startControlID.intValue() + 9, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem);
		contextMenus.contextMenuOCRROrderEntryTemplateEditREMOVEItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove", true, false, new Integer(102148), true, true);
		contextMenus.contextMenuOCRROrderEntryTemplateEdit.add(contextMenus.contextMenuOCRROrderEntryTemplateEditREMOVEItem);
		form.registerMenu(contextMenus.contextMenuOCRROrderEntryTemplateEdit);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 472, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Help Text:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 122, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Display Colour:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 98, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 26, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 50, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Common Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 74, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 152, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Components:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 72, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 680, 600, 72, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 72, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 120, 48, 712, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 120, 24, 712, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 72, 712, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 120, 120, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbColorTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbColorTemp);
		cmbColorComboBox cmbColor = (cmbColorComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbColorComboBox.class, m_cmbColorTemp);
		super.addComboBox(cmbColor);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 120, 96, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);

		// Grid Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 120, 472, 712, 120, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdHelpTextTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRRHelpText, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdHelpTextTemp);
		grdHelpTextGrid grdHelpText = (grdHelpTextGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHelpTextGrid.class, m_grdHelpTextTemp);
		grdHelpText.addComboBoxColumn("Category", 0, 0, 220, false, true, true, false, true, -1);
		grdHelpText.addWrapTextColumn("Text", 0, 0, -1, false, false, 500, true);
		super.addGrid(grdHelpText);
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 120, 152, 712, 312, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdComponentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRROrderEntryTemplateEdit, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdComponentsTemp);
		grdComponentsGrid grdComponents = (grdComponentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdComponentsGrid.class, m_grdComponentsTemp);
		grdComponents.addImageColumn(" ", 0, 0, 24, false, 0);
		grdComponents.addStringColumn("Name", 0, 0, 500, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdComponents.addComboBoxColumn("Status", 0, 0, -1, true, true, false, false, true, -1);
		super.addGrid(grdComponents);

		// Link Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 736, 0, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(7);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(8);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(9);
	}
	public TextBox txtCommonName()
	{
		return (TextBox)super.getControl(10);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(11);
	}
	public TextBox txtDescription()
	{
		return (TextBox)super.getControl(12);
	}
	public cmbColorComboBox cmbColor()
	{
		return (cmbColorComboBox)super.getComboBox(0);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(1);
	}
	public grdHelpTextGrid grdHelpText()
	{
		return (grdHelpTextGrid)super.getGrid(0);
	}
	public grdComponentsGrid grdComponents()
	{
		return (grdComponentsGrid)super.getGrid(1);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(17);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				ItemSelection = new LocalFormName(116105);
				OrderSetList = new LocalFormName(116119);
			}
			public final FormName ItemSelection;
			public final FormName OrderSetList;
		}

		public OCRRForms OCRR;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			OCRR = new OCRRImages();
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Profile = new ImageHelper(116108, "Images/OCRR/Profile.gif", new Integer(16), new Integer(16));
				Investigation = new ImageHelper(116105, "Images/OCRR/Investigation.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Profile;
			public final ims.framework.utils.Image Investigation;
		}
		public final OCRRImages OCRR;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_EditedRecord = new ims.framework.ContextVariable("EditedRecord", prefix + "_lv_OCRR.OrderSetEdit.__internal_x_context__EditedRecord_" + componentIdentifier + "");
		}
		
		public boolean getEditedRecordIsNotNull()
		{
			return !cxl_EditedRecord.getValueIsNull(context);
		}
		public ims.ocrr.vo.OrderSetEditVo getEditedRecord()
		{
			return (ims.ocrr.vo.OrderSetEditVo)cxl_EditedRecord.getValue(context);
		}
		public void setEditedRecord(ims.ocrr.vo.OrderSetEditVo value)
		{
			cxl_EditedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditedRecord = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class OCRRHelpText implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD_HELPTEXT = 1;
			public static final int REMOVE_HELPTEXT = 2;
		}
		public void disableAllOCRRHelpTextMenuItems()
		{
			this.contextMenuOCRRHelpTextADD_HELPTEXTItem.setEnabled(false);
			this.contextMenuOCRRHelpTextREMOVE_HELPTEXTItem.setEnabled(false);
		}
		public void hideAllOCRRHelpTextMenuItems()
		{
			this.contextMenuOCRRHelpTextADD_HELPTEXTItem.setVisible(false);
			this.contextMenuOCRRHelpTextREMOVE_HELPTEXTItem.setVisible(false);
		}
		private Menu contextMenuOCRRHelpText;
		public MenuItem getOCRRHelpTextADD_HELPTEXTItem()
		{
			return this.contextMenuOCRRHelpTextADD_HELPTEXTItem;
		}
		private MenuItem contextMenuOCRRHelpTextADD_HELPTEXTItem;
		public MenuItem getOCRRHelpTextREMOVE_HELPTEXTItem()
		{
			return this.contextMenuOCRRHelpTextREMOVE_HELPTEXTItem;
		}
		private MenuItem contextMenuOCRRHelpTextREMOVE_HELPTEXTItem;
		public final class OCRROrderEntryTemplateEdit implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADDORDERSETS = 3;
			public static final int ADDPROFILES = 4;
			public static final int ADDINVESTIGATION = 5;
			public static final int ADDCOLUMNSEPARATOR = 6;
			public static final int ADDSEPARATOR = 7;
			public static final int MOVEUP = 8;
			public static final int MOVEDOWN = 9;
			public static final int REMOVE = 10;
		}
		public void disableAllOCRROrderEntryTemplateEditMenuItems()
		{
			this.contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditADDPROFILESItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditMOVEUPItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem.setEnabled(false);
			this.contextMenuOCRROrderEntryTemplateEditREMOVEItem.setEnabled(false);
		}
		public void hideAllOCRROrderEntryTemplateEditMenuItems()
		{
			this.contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditADDPROFILESItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditMOVEUPItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem.setVisible(false);
			this.contextMenuOCRROrderEntryTemplateEditREMOVEItem.setVisible(false);
		}
		private Menu contextMenuOCRROrderEntryTemplateEdit;
		public MenuItem getOCRROrderEntryTemplateEditADDORDERSETSItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditADDORDERSETSItem;
		public MenuItem getOCRROrderEntryTemplateEditADDPROFILESItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditADDPROFILESItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditADDPROFILESItem;
		public MenuItem getOCRROrderEntryTemplateEditADDINVESTIGATIONItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditADDINVESTIGATIONItem;
		public MenuItem getOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem;
		public MenuItem getOCRROrderEntryTemplateEditADDSEPARATORItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditADDSEPARATORItem;
		public MenuItem getOCRROrderEntryTemplateEditMOVEUPItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditMOVEUPItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditMOVEUPItem;
		public MenuItem getOCRROrderEntryTemplateEditMOVEDOWNItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditMOVEDOWNItem;
		public MenuItem getOCRROrderEntryTemplateEditREMOVEItem()
		{
			return this.contextMenuOCRROrderEntryTemplateEditREMOVEItem;
		}
		private MenuItem contextMenuOCRROrderEntryTemplateEditREMOVEItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[77];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderSetEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1058100008-ID", "ID_OrderSet");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderSetEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1058100008-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderSetEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1058100008-COMMONNAME", "CommonName");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderSetEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1058100008-DESCRIPTION", "Description");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderSetEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1058100008-ACTIVESTATUS", "ActiveStatus");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.OrderSetEdit.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1058100008-COLOR", "Color");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
