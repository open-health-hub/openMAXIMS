//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.searchdisciplines;

import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.forms.searchdisciplines.GenForm.grdDisciplineRow;
import ims.ocrr.forms.searchdisciplines.GenForm.grdDisciplineRowCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSelectClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().OCRR.setSelectedDisciplines(getSelectedDisciplinesFromGridDiscipline());
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onGrdDisciplineGridCheckBoxClicked(int column, grdDisciplineRow row, boolean isChecked) throws PresentationLogicException
	{
		if(row.getParentRow() == null)
		{
			updateChilds(row, isChecked);
		}
		else
		{
			updateParent(row);
		}
		
		
		updateControlState();
	}
	
	private void updateParent(grdDisciplineRow row) 
	{
		if(row == null || row.getParentRow() == null)
			return;
		
		row.getParentRow().setColumnSelect(areAllChildsChecked(row.getParentRow()));
	}

	private boolean areAllChildsChecked(grdDisciplineRow parentRow) 
	{
		if(parentRow == null)
			return false;
		
		for(int i=0; i<parentRow.getRows().size(); i++)
		{
			if(!parentRow.getRows().get(i).getColumnSelect())
				return false;
		}
		
		return true;
	}

	private void updateChilds(grdDisciplineRow row, boolean isChecked) 
	{
		if(row == null)
			return;
		
		if(isChecked)
		{
			for(int i=0; i<row.getRows().size(); i++)
			{
				row.getRows().get(i).setColumnSelect(isChecked);
			}
		}
	}

	private void open() throws PresentationLogicException
	{
		doSearchAndShowInGrid();
		updateControlState();
		
		form.setMode(FormMode.VIEW);
	}

	private void doSearchAndShowInGrid() throws PresentationLogicException
	{
		form.grdDiscipline().getRows().clear();
		
		ServiceLiteVoCollection disciplines = null;
		
		try 
		{
			disciplines = domain.listDiscipline();
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			throw new PresentationLogicException(e);
		}
		
		if (disciplines == null || disciplines.size() == 0)
		{
			engine.showMessage( "No Disciplines were found.","No results", MessageButtons.OK, MessageIcon.INFORMATION);
			return;
		}
		
		populateGridDisciplineFromData(disciplines);
	}

	private void populateGridDisciplineFromData(ServiceLiteVoCollection diciplines)
	{
		if (diciplines == null || diciplines.size() == 0)
			return;
		
		for (int i = 0; i < diciplines.size(); i++)
		{
			addDisciplineInGridDiscipline(diciplines.get(i));
		}
		
		checkIfParentsShouldBeChecked();
	}

	private void checkIfParentsShouldBeChecked() 
	{
		for(int i=0; i<form.grdDiscipline().getRows().size(); i++)
		{
			grdDisciplineRow row = form.grdDiscipline().getRows().get(i);
			row.setColumnSelect(areAllChildsChecked(row));
		}
	}

	private void addDisciplineInGridDiscipline(ServiceLiteVo serviceLiteVo)
	{
		if(serviceLiteVo == null)
			return;
		
		grdDisciplineRow parentRow = getParentRow(serviceLiteVo);
		
		if(parentRow == null)
			return;
		
		grdDisciplineRow newRow = parentRow.getRows().newRow();
		newRow.setValue(serviceLiteVo);
		newRow.setColumnName(serviceLiteVo.getServiceName());
		
		newRow.setColumnSelect(isDisciplineSelected(serviceLiteVo));
	}

	private grdDisciplineRow getParentRow(ServiceLiteVo serviceLiteVo) 
	{
		if(serviceLiteVo == null)
			return null;;
		
		for(int i=0; i<form.grdDiscipline().getRows().size(); i++)
		{
			grdDisciplineRow row = form.grdDiscipline().getRows().get(i);
			
			if(row.getValue() instanceof ServiceCategory && row.getValue().equals(serviceLiteVo.getServiceCategory()))
			{
				return row;
			}
		}
		
		grdDisciplineRow row = form.grdDiscipline().getRows().newRow();
		row.setColumnName(serviceLiteVo.getServiceCategory().getText());
		row.setValue(serviceLiteVo.getServiceCategory());
		row.setBold(true);
		row.setExpanded(true);
		
		return row;
	}

	private boolean isDisciplineSelected(ServiceLiteVo serviceLiteVo) 
	{
		if(serviceLiteVo == null)
			return false;
		
		if(form.getGlobalContext().OCRR.getSelectedDisciplines() == null || form.getGlobalContext().OCRR.getSelectedDisciplines().size() == 0)
			return false;
		
		for(ServiceLiteVo selected : form.getGlobalContext().OCRR.getSelectedDisciplines())
		{
			if(selected == null)
				continue;
			
			if(selected.equals(serviceLiteVo))
				return true;
		}
		
		return false;
	}

	private ServiceLiteVoCollection getSelectedDisciplinesFromGridDiscipline()
	{
		grdDisciplineRowCollection rows = form.grdDiscipline().getRows();
		
		if (rows == null || rows.size() == 0)
			return null;
		
		ServiceLiteVoCollection values = new ServiceLiteVoCollection();
		for (int i = 0; i < rows.size(); i++)
		{
			grdDisciplineRow categoryRow = rows.get(i);
			
			for(int j = 0; j<categoryRow.getRows().size(); j++)
			{
				grdDisciplineRow disciplineRow = categoryRow.getRows().get(j);
				
				if (disciplineRow.getColumnSelect() == true && disciplineRow.getValue() instanceof ServiceLiteVo)
				{
					values.add((ServiceLiteVo) disciplineRow.getValue());
				}
			}
		}
		
		return values;
	}

	private void updateControlState()
	{
		boolean disciplineSelectedInGridDiscipline = isDisciplineSelectedInGridDiscipline();
		form.btnSelect().setEnabled(disciplineSelectedInGridDiscipline);
	}

	private boolean isDisciplineSelectedInGridDiscipline()
	{
		grdDisciplineRowCollection rows = form.grdDiscipline().getRows();
		if (rows == null)
			return false;
		
		for (int i=0 ; i<rows.size() ; i++)
		{
			if(rows.get(i) == null)
				continue;
			
			for(int j=0; j<rows.get(i).getRows().size(); j++)
			{
				if (rows.get(i).getRows().get(j).getColumnSelect() == true)
				{
					return true;
				}
			}
		}
		
		return false;
	}
}
