//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.45 build 2263.21661)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.resultdialog;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainObject;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridCellItemCollection;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateFormat;
import ims.ocrr.configuration.vo.AnalyteRefVo;
import ims.ocrr.configuration.vo.AnalyteRefVoCollection;
import ims.ocrr.helper.ResultDisplayHelper;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.ClinicalImagingResultVo;
import ims.ocrr.vo.ClinicalResultVo;
import ims.ocrr.vo.NewResultOcsOrderVo;
import ims.ocrr.vo.NewResultSpecDocVo;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.OcsPathRadResultVoCollection;
import ims.ocrr.vo.OrderInvestigationVo;
import ims.ocrr.vo.PathologySpecimenOrderInvestigationVo;
import ims.ocrr.vo.PathologySpecimenOrderInvestigationVoCollection;
import ims.ocrr.vo.PathologySpecimenVo;
import ims.ocrr.vo.ResultDemographicsVo;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.ocrr.vo.lookups.ResultStatus;
import ims.ocrr.vo.lookups.ResultValueType;

import java.io.File;
import java.util.ArrayList;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final String PREVIOUS_TEXT_BUTTON = "Previous";// 	WDEV-15894
	private static final String CHECKED_TEXT_BUTTON = "Checked";// 	WDEV-15894
	private static final String NEXT_TEXT_BUTTON = "Next";// 	WDEV-15894
	private static final String EXIT_TEXT_BUTTON = "Exit";// 	WDEV-15894
	private static final String PROVISIONAL = "Provisional";// 	WDEV-16675
	private static final String FINAL = "Final";// 	WDEV-16675
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
		updateHistory(); //WDEV-11253 mark result as viewed in the history
	}
	
	private void updateHistory()
	{
		try
		{
			form.getGlobalContext().OCRR.setCurrentPathRadResult(domain.addViewedToStatusHistory(form.getGlobalContext().OCRR.getCurrentPathRadResult()));
		}
		catch (StaleObjectException e)
		{
			//do nothing here as no reasonable action to take
		}
	}
	private void initialize()
	{
		initialiseNavigationButtons();//WDEV-15894
		setSpecimenDetailsControlsVisible(false);
		
		form.getGlobalContext().OCRR.setSelectedInvs(null);
		
		form.txtLabRadNo().setEnabled(false);
		form.txtCollOrStat().setEnabled(false);
		form.txtReceived().setEnabled(false);
		
		form.lblSite().setVisible(false);// 	WDEV-16773
		form.txtSite().setVisible(false);// 	WDEV-16773
		
		// WDEV-13321
		form.ccMedicReview().initialize(MosType.HCP, HcpDisType.MEDICAL);
		form.ccMedicReview().isRequired(Boolean.TRUE);
		
		form.txtTypeOrExamDt().setVisible(true);
		form.txtTypeOrExamDt().setEnabled(false);
		
		//WDEV-4758
		if(!ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
		{
			form.lblPasEpisodeId().setVisible(false);
			form.txtPasEpisodeID().setVisible(false);
		}
		else
		{
			form.txtPasEpisodeID().setEnabled(false);
		}
		
		form.setMode(FormMode.VIEW);
		
		if(!ConfigFlag.UI.DISPLAY_HOSPNO_FIELD_ON_RESULTS_FORM.getValue())
		{
			form.txtHospnum().setVisible(false);
			form.lblPatId().setVisible(false);
		}
		else
			form.txtHospnum().setEnabled(false);
		
		//WDEV-13879
		form.btnClericalTask().setVisible(engine.hasRight(AppRight.CAN_ALLOCATE_PATIENT_CLERICAL_TASKS));
		
	}
	
	//WDEV-15894
	private void initialiseNavigationButtons() 
	{
		form.imbClose().setVisible(!isSTHKModeResultCheck());
		form.imbNextSpec().setVisible(!isSTHKModeResultCheck());
		form.imbPrevSpec().setVisible(!isSTHKModeResultCheck());
	}

	protected void onLnkViewOrderNotesClick() throws PresentationLogicException 
	{
		form.htmDocument().setHTML("");
		engine.open(form.getForms().OCRR.QuestionsNotes, "Order Notes");
	}
	
	protected void onImbCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		close();// 	WDEV-15894
	}

	// 	WDEV-15894
	private void close() 
	{
		if(form.getLocalContext().getTempFilesIsNotNull() && form.getLocalContext().getTempFiles().size() > 0)
		{
			ArrayList<String> tempFiles =form.getLocalContext().getTempFiles();
			for (String tempFile : tempFiles) 
			{
				File fileToBeDeleted = new File(tempFile);
				if(!fileToBeDeleted.delete())
				{
					fileToBeDeleted.deleteOnExit();
				}				
			}
		}
		
		if(updateRecord() == false)
		{
			return;
		}		
		engine.close(DialogResult.OK);
	}
	
	private boolean updateRecord()
	{
		try
		{
			HcpRefVo hcp = (HcpRefVo) form.ccMedicReview().getValue();

			Integer pickValue = form.getLocalContext().getPickValue();
			if (pickValue == null)
			{
				engine.showMessage("No value has been chosen from the pick list at the bottom of the report.");
				return false;
			}

			if (pickValue.equals(ResultDisplayHelper.PICK_VIEWED))
			{
				domain.resetAllocatedReviewHCP(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
				return true;
			}

			OrderInvStatus status = null;
			if (pickValue.equals(ResultDisplayHelper.PICK_CHKD))
			{
				status = OrderInvStatus.CHECKED;
			}
			else if (pickValue.equals(ResultDisplayHelper.PICK_SEEN))
			{
				status = OrderInvStatus.SEEN;
			}
			else if (pickValue.equals(ResultDisplayHelper.PICK_QRY))
			{
				status = OrderInvStatus.REVIEW;

				// WDEV-13321
				if (hcp == null)
				{
					engine.showMessage("Allocate for review medic is mandatory.");
					return false;
				}
			}
			

			if (form.getGlobalContext().OCRR.getCurrentPathRadResult().getCategoryIsNotNull() && form.getGlobalContext().OCRR.getCurrentPathRadResult().getCategory().equals(Category.PATHOLOGY))
			{
				form.getGlobalContext().OCRR.getCurrentPathRadResult().setOrderInvestigation(domain.updatePathologyResultStatus(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation(), status, hcp)); // wdev-11555, WDEV-13321
			}
			else
			{
				// -wdev-11555
				OrderInvestigationVo temp = domain.updateRadResultStatus(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation(), status, hcp);	// WDEV-13321
				if (temp != null)
					form.getGlobalContext().OCRR.getCurrentPathRadResult().setOrderInvestigation(temp);
				// wdev-11555
			}
		}
		catch (StaleObjectException e)
		{
			// The updated Order Investigation will be returned within the StaleObjectException
			// We need to update the global context with the new value so that future status updates will work
			DomainObject obj = e.getStaleObject();
			form.getGlobalContext().OCRR.getCurrentPathRadResult().setOrderInvestigation(new OrderInvestigationRefVo(obj.getId(), obj.getVersion()));
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		form.getGlobalContext().OCRR.setLastUpdatedPathRadResult(form.getGlobalContext().OCRR.getCurrentPathRadResult());
		return true;
	}
	
	protected void onImbNextSpecClick() throws PresentationLogicException 
	{
		// WDEV-13321
		move(true);
		
		updateControlsState();
	}
	
	protected void onImbPrevSpecClick() throws PresentationLogicException 
	{
		// WDEV-13321
		move(false);
		
		updateControlsState();
	}
	
	private void open()
	{
		form.getLocalContext().setPickValue(null);
		//this is used for reporting
		form.getLocalContext().setOrderInv(form.getGlobalContext().OCRR.getCurrentPathRadResultIsNotNull() ? form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation() : null);
		
		form.dyngrdResults().getRows().clear();
		form.getGlobalContext().OCRR.setSelectedInvsWithResults(null);
		form.getLocalContext().setAnalytes(null);
		
		form.setMode(FormMode.VIEW);
		disableNavigation();		
		form.imbClose().setEnabled(false);
		form.lnkViewPatientDetails().setVisible(false);
		//form.imbPrint().setEnabled(false);
		populateCurrentReport();	
		
		if(!ConfigFlag.DOM.OCRR_KEEP_RESULT_HISTORY.getValue())
			form.btnResultHistory().setVisible(false);
		
		//WDEV-13190
		updateSecondaryMatchingLabel();
		
		// WDEV-13321
		updateCurrentlyForReview();
		updateControlsState();
	}
	
	/**
	 * WDEV-13321
	 * Function used to update the label for 'Currently Allocated for Review to:" 
	 */
	private void updateCurrentlyForReview()
	{
		StringBuilder displayText = new StringBuilder("");
		
		NewResultSpecDocVo orderInvestigation = domain.getOrderInvestigation(form.getLocalContext().getOrderInv());
		
		if (orderInvestigation != null && orderInvestigation.getAllocatedHCPforReviewIsNotNull())
		{
			//WDEV-13976
			displayText.append(orderInvestigation.getAllocatedHCPforReview().toString());
			form.lblAllocatedForReview().setValue("Currently Allocated for Review to: ");
			form.htmAllocatedForReview().setHTML("<b>"+displayText.toString()+"</b>");
			//end WDEV-13976
		}
		
	}
	

	//WDEV-13190
	private void updateSecondaryMatchingLabel() 
	{
		boolean showWasSecondaryMatching = false;
		
		if(form.getLocalContext().getOrderInvIsNotNull() && form.getLocalContext().getOrderInv().getID_OrderInvestigationIsNotNull())
		{
			showWasSecondaryMatching = domain.wasSecondaryMatching(form.getLocalContext().getOrderInv());
		}
		
		form.lblSecondaryMatching().setVisible(showWasSecondaryMatching);
		form.lblSecondaryMatching().setTextColor(Color.Red);
		form.lblSecondaryMatching().setValue(ConfigFlag.UI.SECONDARY_RESULT_MATCHING_WARNING_MESSAGE.getValue());
	}

	private void disableNavigation()
	{
		form.imbPrevSpec().setEnabled(false);
		form.imbNextSpec().setEnabled(false);
	}
	private void clearAllControls()
	{
		form.txtName().setValue(null);
		form.txtDOB().setValue(null);
		form.txtHospnum().setValue(null);
		form.txtNHSNo().setValue(null);
		
		form.txtLabRadNo().setValue(null);
		form.lblName().setValue("");//WDEV-16952
		form.txtOrderingLocation().setValue(null);
		form.txtClinician().setValue(null);
		form.txtRequestedBy().setValue(null);
		
		form.txtTypeOrExamDt().setValue(null);
		form.txtCollOrStat().setValue(null);
		form.txtReceived().setValue(null);
		form.txtSite().setValue(null);//WDEV-16773
		form.lnkViewOrderNotes().setEnabled(false);
		form.lnkViewOrderNotes().setTooltip("");
		form.dyngrdResults().clear();
		
		form.chkEnableExit().setValue(false);
		form.chkMarkAsSeen().setValue(false);
		form.chkMarkAsChecked().setVisible(false);
		form.chkMarkForReview().setValue(false);

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		if(dispIdType != null && dispIdType.getText() != null)
		{
			if (PatIdType.NHSN.equals(dispIdType) && ConfigFlag.UI.DISPLAY_HOSPNO_FIELD_ON_RESULTS_FORM.getValue())
			{
				form.lblPatId().setValue(PatIdType.HOSPNUM.getText());
			}
			else
			{
				form.lblPatId().setValue(dispIdType.getText() + ":");
			}
		}
		
		// WDEV-13321
		// Clear "Allocated for Review" controls
		form.lblAllocatedForReview().setValue("");
		form.htmAllocatedForReview().setHTML("");//WDEV-13976
		form.ccMedicReview().clear();
	}

	private void setNavigationState()
	{
		if(form.getGlobalContext().OCRR.getSelectedPathRadResults() == null 
				|| form.getGlobalContext().OCRR.getSelectedPathRadResults().size() < 2
				|| form.getGlobalContext().OCRR.getCurrentPathRadResult() == null)
		{
			disableNavigation();
		}
		else
		{
			int count = form.getGlobalContext().OCRR.getSelectedPathRadResults().size();
			int index = form.getGlobalContext().OCRR.getSelectedPathRadResults().indexOf(form.getGlobalContext().OCRR.getCurrentPathRadResult()) + 1;
			
			if(index == 1)
			{
				form.imbPrevSpec().setEnabled(false);
				form.imbNextSpec().setEnabled(true);
				
				//form.imbPrevDiscip().setEnabled(false);
				//form.imbNextDiscip().setEnabled(true);
			}
			else if(index == count)
			{
				form.imbPrevSpec().setEnabled(true);
				form.imbNextSpec().setEnabled(false);
				
				//form.imbPrevDiscip().setEnabled(true);
				//form.imbNextDiscip().setEnabled(false);
			}
			else
			{
				form.imbPrevSpec().setEnabled(true);
				form.imbNextSpec().setEnabled(true);
				
				//form.imbPrevDiscip().setEnabled(true);
				//form.imbNextDiscip().setEnabled(true);
			}
		}
	}
	
	
	private void move(boolean next)
	{	
		//WDEV-11253
		form.getGlobalContext().OCRR.setSelectedInvs(null);
		
		if (!updateRecord())
			return;
			
		int index = form.getGlobalContext().OCRR.getSelectedPathRadResults().indexOf(form.getGlobalContext().OCRR.getCurrentPathRadResult()) + 1;
		index = index + (next ? 1 : -1);		
		form.getGlobalContext().OCRR.setCurrentPathRadResult(form.getGlobalContext().OCRR.getSelectedPathRadResults().get(index - 1));
		
		open(); //WDEV-12083
		//WDEV-11253
		updateHistory();
		
		//WDEV-12083populateCurrentReport();
		//WDEV-12083disableNavigation();
		
		
		if (form.dyngrdResults().getRows().size() > 0
			|| (form.getLocalContext().gethtmlStringIsNotNull()
					&& form.getLocalContext().gethtmlString().length() > 0))
		{
			form.imbClose().setEnabled(false);
			form.lnkViewPatientDetails().setVisible(false);
		}
		
		// WDEV-13321
		// Clear picked value ('Seen', 'For Review', 'Enable Exit') when moving forward or backward in collection
		form.getLocalContext().setPickValue(null);
		//this is used for reporting
		form.getLocalContext().setOrderInv(form.getGlobalContext().OCRR.getCurrentPathRadResultIsNotNull() ? form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation() : null);
	}
	
	private void setLabels(Category cat, boolean isDFTInv)
	{
		if(cat == null)
			throw new CodingRuntimeException("cat cannot be null in method setLabels");
		
		if (cat.equals(Category.PATHOLOGY))
		{
			engine.setCaption("Pathology - Results");
			form.pnlSpecOrExam().setValue("Specimen Details");
			form.lblLabRadNo().setValue("Path No.");
			form.lblTypeOrExamDt().setValue("Type:");
			form.lblCollOrStat().setValue("Collected:");
			form.lblRcvd().setValue("Received:");
			
			form.lblTypeOrExamDt().setVisible(!isDFTInv && Boolean.FALSE.equals(ConfigFlag.UI.DISPLAY_SPECIMEN_TYPE_AT_INVESTIGATION_LEVEL.getValue()));
			form.txtTypeOrExamDt().setVisible(!isDFTInv && Boolean.FALSE.equals(ConfigFlag.UI.DISPLAY_SPECIMEN_TYPE_AT_INVESTIGATION_LEVEL.getValue()));
		}
		else if (cat.equals(Category.CLINICALIMAGING))
		{
			engine.setCaption("Clinical Imaging - Results");			
			form.pnlSpecOrExam().setValue("Exam Details");
			form.lblLabRadNo().setValue("Rad Order. No.");
			form.lblTypeOrExamDt().setValue("Exam Date:");
			form.lblCollOrStat().setValue("Report Status:");
			form.lblRcvd().setValue("Report Date:");			
		}
		else if (cat.equals(Category.CLINICAL))
		{
			engine.setCaption("Clinical - Results");			
			form.pnlSpecOrExam().setValue("Exam Details");
			form.lblLabRadNo().setValue("Order. No.");
			form.lblTypeOrExamDt().setValue("Exam Date:");
			form.lblCollOrStat().setValue("Report Status:");
			form.lblRcvd().setValue("Report Date:");			
		}
		
	}
		
	private boolean populateCurrentReport() 
	{		
		makeButtonsVisibleThatThisSuperCodeMayHaveHiddenForManualResult();
		if(form.getGlobalContext().OCRR.getCurrentPathRadResult() == null)
			return false;
	
		form.btnViewPACS().setVisible(false);

		OcsPathRadResultVo currRep = form.getGlobalContext().OCRR.getCurrentPathRadResult();
		if(currRep.getCategoryIsNotNull())
		{
			if (engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.RefManNewResults)//wdev-10391
				|| engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.NewResults)//wdev-10391
				|| engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.NewResultsSearch)//WDEV-16715
				|| engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.PathologyOrders)//wdev-10391
				|| engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.RadiologyOrders))//wdev-10391
				{
				form.getGlobalContext().Core.setPatientShort(currRep.getPatient());//wdev-10391
				}
			
			if (currRep.getCategory().equals(Category.PATHOLOGY))
			{
				//Display Cumalate button for Pathology Reports
				form.btnCumulResult().setVisible(true);

				NewResultSpecDocVo voOrderInvestigation = domain.getOrderInvestigation(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
				updateButtonStateIfManualResult(voOrderInvestigation != null && voOrderInvestigation.getResultDetails() != null && voOrderInvestigation.getResultDetails().getDocumentResultDetailsIsNotNull());//WDEV-16232
				return populateCurrentSpecimen(voOrderInvestigation);
			}
			else if(currRep.getCategory().equals(Category.CLINICALIMAGING))
			{
				//Hide Cumalate button for Clinical Imaging Reports
				form.btnCumulResult().setVisible(false);
				
				ClinicalImagingResultVo radRes = domain.getClinicalImagingResult(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
				ResultDisplayHelper resultHelper = new ResultDisplayHelper(radRes, form.dyngrdResults(), true, engine);
				updateButtonStateIfManualResult(radRes.getResultDetails() != null && radRes.getResultDetails().getDocumentResultDetailsIsNotNull());//WDEV-16232
				
				form.getGlobalContext().OCRR.CentricityWebPACS.setAccessionNumber(domain.getCentricityPacsAccessionNumber(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation()));
				
				if (form.getGlobalContext().OCRR.CentricityWebPACS.getAccessionNumberIsNotNull()
					&& ConfigFlag.UI.USE_PACS_FUNCTIONALITY.getValue())//wdev-17322
					form.btnViewPACS().setVisible(true);

				return populateCurrentClinicalImaging(radRes,resultHelper);
			}
			//WDEV-16361
			else if(currRep.getCategory().equals(Category.CLINICAL))
			{
				form.btnCumulResult().setVisible(false);
				
				ClinicalResultVo radRes = domain.getClinicalResult(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
				updateButtonStateIfManualResult(radRes.getResultDetails() != null && radRes.getResultDetails().getDocumentResultDetailsIsNotNull());
				
				form.getGlobalContext().OCRR.CentricityWebPACS.setAccessionNumber(domain.getCentricityPacsAccessionNumber(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation()));
				
				if (form.getGlobalContext().OCRR.CentricityWebPACS.getAccessionNumberIsNotNull()
					&& ConfigFlag.UI.USE_PACS_FUNCTIONALITY.getValue())//wdev-17322
					form.btnViewPACS().setVisible(true);

				return populateCurrentClinical(radRes);
			}
			else
			{
				//hide Cumalate button for Clinical Reports
				form.btnCumulResult().setVisible(false);
				
				NewResultSpecDocVo voOrderInvestigation = domain.getOrderInvestigation(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
				updateButtonStateIfManualResult(voOrderInvestigation.getResultDetails() != null && voOrderInvestigation.getResultDetails().getDocumentResultDetailsIsNotNull());//WDEV-16232
				return populateCurrentSpecimen(voOrderInvestigation);
				
			}
		}
		
		return true;
	}

	//WDEV-16361
	private boolean populateCurrentClinical(ClinicalResultVo invest)
	{
		if(invest == null)
			return false;
			
		clearAllControls();	
		
		displaySpecimenDetailsControlsForDFT(false, null);// 	WDEV-16501
		displaySite(null);// 	WDEV-16773
		
		if(invest != null && invest.getInvestigationIsNotNull() &&  invest.getInvestigation().getInvestigationIndexIsNotNull())
			setLabels(invest.getInvestigation().getInvestigationIndex().getCategory(), false);
		
		setNameLabel(invest); //WDEV-16952
		populateResultClinicalDemographics(invest.getOrderDetails().getPatient());
		populateOrderDetails(invest.getOrderDetails());
	
		if (invest != null && invest.getResultConclusionCommentsIsNotNull() && invest.getResultConclusionComments().size() > 0)
		{
			form.btnComments().setImage(form.getImages().Core.Copy);
		}
		else
		{
			form.btnComments().setImage(null);
		}
		
		//If current status RESULTED display document 
		if(invest.getResultDetails() != null && invest.getResultDetails().getDocumentResultDetailsIsNotNull())//WDEV-16232
		{
			form.pnlSpecOrExam().setVisible(true);
			form.htmDocument().setVisible(true);
			showResultStatusOptions(true);
			form.dyngrdResults().setVisible(false);
			if(ConfigFlag.UI.DISPLAY_RESULT_PATIENT_DETAILS_LINK.getValue())
				form.lnkViewPatientDetails().setVisible(true);
			else
				form.lnkViewPatientDetails().setVisible(false);
			form.getLocalContext().setPickValue(ResultDisplayHelper.PICK_VIEWED);
			//form.htmDocument().setHTML("<embed src='"+ getFileServerURL() + invest.getResultDetails().getDocumentResultDetails().getServerDocument().getFileName() + "#navpanes=0' width='835' height='411'></embed>");//WDEV-16232
			form.htmDocument().setHTML("<IFRAME id=\"PostFrame\" name=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + getFileServerURL() + invest.getResultDetails().getDocumentResultDetails().getServerDocument().getFileName() +  "'></IFRAME>");//WDEV-16651
		}		
		
		form.txtLabRadNo().setValue(invest.getPlacerOrdNum());
		
		if (invest.getRepDateTime() != null)
			form.txtReceived().setValue(invest.getRepDateTime().toString());
		
		if (invest.getResultStatus() != null)
			form.txtCollOrStat().setValue(invest.getResultStatus().getText());

		OcsPathRadResultVoCollection voCollInvs = form.getGlobalContext().OCRR.getSelectedInvs();
		if(voCollInvs == null)
			voCollInvs = new OcsPathRadResultVoCollection();
		
		OcsPathRadResultVo voPathRadResult = new OcsPathRadResultVo();
		voPathRadResult.setOrderInvestigation(invest);
		voPathRadResult.setDescription((invest.getInvestigationIsNotNull() && invest.getInvestigation().getInvestigationIndexIsNotNull() && invest.getInvestigation().getInvestigationIndex().getNameIsNotNull()) ? invest.getInvestigation().getInvestigationIndex().getName():null);
		voPathRadResult.setCategory(Category.CLINICAL);
		
		
		//Security levels
		boolean passesSecurity = true;
		if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
		{
			ServiceRefVo voInvService =  invest.getInvestigationIsNotNull() && invest.getInvestigation().getProviderServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? invest.getInvestigation().getProviderService().getLocationService().getService() : null;
			SecurityLevelConfigVo voInvSecurityLevel = invest.getInvestigationIsNotNull() && invest.getInvestigation().getInvestigationIndexIsNotNull() ? invest.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

			if(!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel, false)) //WDEV-11622
				passesSecurity = false;
		}	

		if(passesSecurity)
			voCollInvs.add(voPathRadResult);
		
		form.getGlobalContext().OCRR.setSelectedInvs(voCollInvs);

		return true;
	}

	//WDEV-16952
	private void setNameLabel(ClinicalResultVo invest)
	{
		if(invest != null && invest.getInvestigationIsNotNull() && invest.getInvestigation().getProviderServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationService().getLocation() != null) //wdev-14023
		{
			form.lblName().setValue(invest.getInvestigation().getProviderService().getLocationService().getLocation().getName());
			if (invest.getInvestigation().getProviderService().getLocationService().getService() != null)
			{
				form.lblName().setValue(form.lblName().getValue() + " (" + invest.getInvestigation().getProviderService().getLocationService().getService().getServiceName() + ")");
			}
		}
		
		if(invest != null && invest.getInvestigationIsNotNull() && invest.getInvestigation().getProviderServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationService().getContact() != null)  //wdev-14023
		{
			StringBuffer val = new StringBuffer();
			
			if(invest.getInvestigation().getProviderService().getLocationService().getContact().getName() != null)
			{
				if(invest.getInvestigation().getProviderService().getLocationService().getContact().getName().getForenameIsNotNull())
				{
					val.append(invest.getInvestigation().getProviderService().getLocationService().getContact().getName().getForename());
				}
				if(invest.getInvestigation().getProviderService().getLocationService().getContact().getName().getSurnameIsNotNull())
				{
					val.append(" ").append(invest.getInvestigation().getProviderService().getLocationService().getContact().getName().getSurname());
				}

			}
			if(invest.getInvestigation().getProviderService().getLocationService().getContact().getContactNumberIsNotNull())
			{
				val.append(" (").append(invest.getInvestigation().getProviderService().getLocationService().getContact().getContactNumber()).append(")");
			}
			
			form.lblName().setValue(form.lblName().getValue() + " - " + val);

		}
		
	}

	//WDEV-16361
	private void populateResultClinicalDemographics(PatientShort patient)
	{
		if(patient == null)
			return;
		
			if(patient.getNameIsNotNull())
			{
				form.txtName().setValue(patient.getName().toShortForm().toString());
			}
			if(patient.getDobIsNotNull())
			{
				form.txtDOB().setValue(patient.getDob().toString(DateFormat.STANDARD));
			}
			
			if (patient.getIdentifiersIsNotNull())
			{
				PatientIdCollection collIdentifiers = patient.getIdentifiers();
				for (int i=0;i<collIdentifiers.size();i++)
				{
					if(collIdentifiers.get(i)!=null && PatIdType.HOSPNUM.equals(collIdentifiers.get(i).getType()))
        			{
        				form.txtHospnum().setValue(collIdentifiers.get(i).getValue());
        			}
        			if(collIdentifiers.get(i)!=null && PatIdType.NHSN.equals(collIdentifiers.get(i).getType()))
        			{
        				form.txtNHSNo().setValue(collIdentifiers.get(i).getValue());
        			}
				}
			}
			
			if (patient.getSex() != null)
			{
				form.txtSex().setValue(patient.getSex().getText());
			}
		
	}

	private void updateButtonStateIfManualResult(boolean hideButtons)
	{
		if(hideButtons)
		{
			form.btnCumulResult().setVisible(false);
			form.btnPrintOrder().setVisible(false);
			form.btnPrintResult().setVisible(false);
			form.btnResultHistory().setVisible(false);
			form.btnStatusHistory().setVisible(false);
		}
	}
	
	private void makeButtonsVisibleThatThisSuperCodeMayHaveHiddenForManualResult()
	{
		form.btnCumulResult().setVisible(true);
		form.btnPrintOrder().setVisible(true);
		form.btnPrintResult().setVisible(true);
		form.btnResultHistory().setVisible(true);
		form.btnStatusHistory().setVisible(true);
	}
	
	private boolean populateCurrentSpecimen(NewResultSpecDocVo voOrderInvestigation) 
	{
		if(voOrderInvestigation == null)
			return false;	

		clearAllControls();
		
		boolean isDFTInv = isDFT(voOrderInvestigation);
		
		displaySpecimenDetailsControlsForDFT(isDFTInv, voOrderInvestigation);// 	WDEV-16501
		displaySite(voOrderInvestigation);// 	WDEV-16773
		
		// WDEV-13320
		if (voOrderInvestigation.getSpecimenIsNotNull() && voOrderInvestigation.getSpecimen().size() > 0 && voOrderInvestigation.getSpecimen().get(0) != null && voOrderInvestigation.getSpecimen().get(0).getResultConclusionCommentsIsNotNull() && voOrderInvestigation.getSpecimen().get(0).getResultConclusionComments().size() > 0)
		{
			form.btnComments().setImage(form.getImages().Core.Copy);
		}
		else
		{
			form.btnComments().setImage(null);
		}
		
		if(voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getInvestigationIndexIsNotNull() && voOrderInvestigation.getInvestigation().getInvestigationIndex().getCategoryIsNotNull())
			setLabels(voOrderInvestigation.getInvestigation().getInvestigationIndex().getCategory(), isDFTInv);
		
		boolean bPopulateGrid = false;
		

		form.getLocalContext().sethtmlString("");
		//If current status RESULTED display document otherwise populate grid
		if(voOrderInvestigation.getResultDetails() != null && voOrderInvestigation.getResultDetails().getDocumentResultDetailsIsNotNull())//WDEV-16232
		{
			form.pnlSpecOrExam().setVisible(true);
			form.htmDocument().setVisible(true);
			showResultStatusOptions(true);
			form.dyngrdResults().setVisible(false);
			//WDEV-10904
			String htmlString = "<IFRAME id=\"PostFrame\" name=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + getFileServerURL() + voOrderInvestigation.getResultDetails().getDocumentResultDetails().getServerDocument().getFileName() + "'></IFRAME>";//WDEV-16232
			form.getLocalContext().sethtmlString(htmlString);
			form.htmDocument().setHTML(htmlString);
			
			if(voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getInvestigationIndexIsNotNull() && voOrderInvestigation.getInvestigation().getInvestigationIndex().getCategoryIsNotNull())
				if(voOrderInvestigation.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL))
				{
					populateOrderDetails(domain.getNewResultOcsOrderVo(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation()));
					return true;
				}
			
		}		
		else{
			form.pnlSpecOrExam().setVisible(false);
			form.htmDocument().setVisible(false);
			showResultStatusOptions(false);
			form.dyngrdResults().setVisible(true);
			
			bPopulateGrid = true;			
		}
		
		PathologySpecimenVo specimen = null;
		
		if(voOrderInvestigation.getSpecimenIsNotNull() && voOrderInvestigation.getSpecimen().size() > 0)
		{
			specimen = voOrderInvestigation.getSpecimen().get(0);
		}
		
		if (specimen == null)
		{
			if(ConfigFlag.UI.DISPLAY_RESULT_PATIENT_DETAILS_LINK.getValue())
				form.lnkViewPatientDetails().setVisible(true);
			else
				form.lnkViewPatientDetails().setVisible(false);
		}
		else if (specimen != null)
		{
			if(!isDFTInv)
			{
				form.txtLabRadNo().setValue(specimen.getFillerOrdNum());
				
				//WDEV-11630
				String display = "";
	/*WDEV-15552 			if(specimen.getResultSpecimenSourceIsNotNull())
					display = specimen.getResultSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : "");
	else*/ if (specimen.getSpecimenSourceIsNotNull())
					display = specimen.getSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : "");
				
			    form.txtTypeOrExamDt().setValue(display);
				if (specimen.getCollDateTimeFillerIsNotNull())
			    {
					if (Boolean.FALSE.equals(specimen.getColTimeFillerSupplied()))
					{
						form.txtCollOrStat().setValue(specimen.getCollDateTimeFiller().getDate().toString());
					}
					else
					{				
						form.txtCollOrStat().setValue(specimen.getCollDateTimeFiller().toString());
					}
			    }
			    else
			    {
			    	if(specimen.getCollDateTimePlacerIsNotNull())
			        {
			    		if (Boolean.FALSE.equals(specimen.getColTimeFillerSupplied()))
			    		{
			    			form.txtCollOrStat().setValue(specimen.getCollDateTimePlacer().getDate().toString());
			    		}
			    		else
			    		{
			    			form.txtCollOrStat().setValue(specimen.getCollDateTimePlacer().toString());
			    		}
			        }
			    }
			    if(specimen.getReceivedDateTimeIsNotNull())
			    {
			    	if(specimen.getReceivedTimeSuppliedIsNotNull() && specimen.getReceivedTimeSupplied().booleanValue())
			    		form.txtReceived().setValue(specimen.getReceivedDateTime().toString());
			    	else if(specimen.getReceivedDateTime().getDate() != null)
			    		form.txtReceived().setValue(specimen.getReceivedDateTime().getDate().toString());
			    }
			}
		    
		    populateOrderDetails(specimen.getOrder());
			if(specimen.getInvestigationsIsNotNull())
			{
				//JME: 20061017: Sorting them by sysinfo 
				specimen.getInvestigations().sort();
				if(specimen.getInvestigations().size() > 0)
				{				
					for (int i=0; i<specimen.getInvestigations().size(); i++)
					{
						PathologySpecimenOrderInvestigationVo vo = specimen.getInvestigations().get(i);
						ResultDemographicsVo demog=vo.getResultDemographics();
						if (demog != null && demog.getNameIsNotNull())
						{
							populateResultDemographics(demog);
							break;
						}
					}
					populateLabDetails(specimen.getInvestigations().get(0));
					if(bPopulateGrid)
						populateResults(specimen.getInvestigations(), bPopulateGrid);
				}
			}
			if(bPopulateGrid)
			{
				createPickerRow(isDFTInv, voOrderInvestigation.getResultStatus());		
				form.dyngrdResults().resetScrollPosition();
				form.dyngrdResults().getRows().expandAll();
			}
		}
	    
		
		return true;		
	}
	
	// 	WDEV-16773
	private void displaySite(NewResultSpecDocVo voOrderInvestigation) 
	{
		form.lblSite().setVisible(false);
		form.txtSite().setVisible(false);
		
		if(voOrderInvestigation == null || voOrderInvestigation.getSpecimen() == null || voOrderInvestigation.getSpecimen().size() == 0)
			return;
		
		PathologySpecimenVo lastSpecimen = voOrderInvestigation.getSpecimen().get(voOrderInvestigation.getSpecimen().size() - 1);
		
		if(lastSpecimen == null || lastSpecimen.getSiteCd() == null)
			return;
		
		form.lblSite().setVisible(true);
		form.txtSite().setVisible(true);
		form.txtSite().setEnabled(false);
		form.txtSite().setValue(lastSpecimen.getSiteCd().getText());
	}

	//WDEV-16232
	private void displaySpecimenDetailsControlsForDFT(boolean isDFTInv, NewResultSpecDocVo voOrderInvestigation)// 	WDEV-16501
	{
		form.lblLabRadNo().setVisible(!isDFTInv);
		form.lblTypeOrExamDt().setVisible(!isDFTInv);
		form.lblCollOrStat().setVisible(!isDFTInv);
		form.lblRcvd().setVisible(!isDFTInv);
		form.txtLabRadNo().setVisible(!isDFTInv);
		form.txtTypeOrExamDt().setVisible(!isDFTInv);
		form.txtCollOrStat().setVisible(!isDFTInv);
		form.txtReceived().setVisible(!isDFTInv);
		
		form.btnComments().setVisible(!isDFTInv);
		
		setSpecimenDetailsControlsVisible(isDFTInv);
		
		if(voOrderInvestigation == null)
			return;
		
		form.txtSpecimenCollected().setValue(voOrderInvestigation.getSpecimen() != null ? "" + voOrderInvestigation.getSpecimen().size() : null);
		form.txtSpecimenResulted().setValue((voOrderInvestigation.getResultDetails() != null && voOrderInvestigation.getResultDetails().getPathologyResultDetails() != null)? "" + voOrderInvestigation.getResultDetails().getPathologyResultDetails().size() : null);
		form.txtOrderStatus().setValue(getOrderStatus(voOrderInvestigation.getResultStatus()));// 	WDEV-16675
	}

	// 	WDEV-16675
	private String getOrderStatus(ResultStatus resultStatus) 
	{
		if(resultStatus == null)
			return null;
		
		if(ResultStatus.PROVISIONAL.equals(resultStatus))
			return PROVISIONAL;
		else if(ResultStatus.FINAL.equals(resultStatus))
			return FINAL;
			
		return resultStatus.getText();
	}

	private void setSpecimenDetailsControlsVisible(boolean visible) 
	{
		form.lblSpecCollected().setVisible(visible);
		form.lblSpecResulted().setVisible(visible);
		form.lblOderStatus().setVisible(visible);// 	WDEV-16675
		form.txtSpecimenCollected().setVisible(visible);
		form.txtSpecimenResulted().setVisible(visible);
		form.txtOrderStatus().setVisible(visible);// 	WDEV-16675
		
		if(visible)
		{
			form.txtSpecimenCollected().setEnabled(false);
			form.txtSpecimenResulted().setEnabled(false);
			form.txtOrderStatus().setEnabled(false);// 	WDEV-16675
		}
	}

	private void showResultStatusOptions(boolean bVisible)
	{
		form.chkEnableExit().setVisible(bVisible);
		
		form.chkMarkAsSeen().setVisible(bVisible && engine.hasRight(AppRight.CAN_UPDATE_RESULT_STATUS) && !engine.hasRight(AppRight.MARK_RESULT_AS_CHECKED));
		form.chkMarkAsChecked().setVisible(bVisible && engine.hasRight(AppRight.CAN_UPDATE_RESULT_STATUS) && engine.hasRight(AppRight.MARK_RESULT_AS_CHECKED));
		
		form.chkMarkForReview().setVisible(bVisible && engine.hasRight(AppRight.CAN_UPDATE_RESULT_STATUS));
	}

	private String getFileServerURL()
	{ 
		return ConfigFlag.GEN.FILE_SERVER_URL.getValue();
	}

	private boolean populateCurrentClinicalImaging(ClinicalImagingResultVo invest, ResultDisplayHelper resultHelper) 
	{
		if(invest == null)
			return false;
		
		OcsPathRadResultVoCollection voCollResult = new OcsPathRadResultVoCollection();
		
		clearAllControls();	
		
		displaySpecimenDetailsControlsForDFT(false, null);// 	WDEV-16501
		displaySite(null);// 	WDEV-16773
		
		if(invest != null && invest.getInvestigationIsNotNull() &&  invest.getInvestigation().getInvestigationIndexIsNotNull())
			setLabels(invest.getInvestigation().getInvestigationIndex().getCategory(), false);
		
		setNameLabel(invest);
		populateResultDemographics(invest.getResultDemographics());
		populateOrderDetails(invest.getOrderDetails());
		
		// WDEV-13320
		if (invest != null && invest.getResultConclusionCommentsIsNotNull() && invest.getResultConclusionComments().size() > 0)
		{
			form.btnComments().setImage(form.getImages().Core.Copy);
		}
		else
		{
			form.btnComments().setImage(null);
		}
		
		boolean bPopulateGrid = false;
		
		//If current status RESULTED display document otherwise populate grid
		if(invest.getResultDetails() != null && invest.getResultDetails().getDocumentResultDetailsIsNotNull())//WDEV-16232
		{
			form.pnlSpecOrExam().setVisible(true);
			form.htmDocument().setVisible(true);
			showResultStatusOptions(true);
			form.dyngrdResults().setVisible(false);
			if(ConfigFlag.UI.DISPLAY_RESULT_PATIENT_DETAILS_LINK.getValue())
				form.lnkViewPatientDetails().setVisible(true);
			else
				form.lnkViewPatientDetails().setVisible(false);
			form.getLocalContext().setPickValue(ResultDisplayHelper.PICK_VIEWED);
			form.htmDocument().setHTML("<embed src='"+ getFileServerURL() + invest.getResultDetails().getDocumentResultDetails().getServerDocument().getFileName() + "#navpanes=0' width='835' height='411'></embed>");//WDEV-16232
		}		
		else{
			form.pnlSpecOrExam().setVisible(false);
			form.htmDocument().setVisible(false);
			showResultStatusOptions(false);
			form.dyngrdResults().setVisible(true);
			
			bPopulateGrid = true;			
		}
		
		form.txtLabRadNo().setValue(invest.getFillerOrdNum());
		if (invest.getResultDetails() != null && invest.getResultDetails().getClinicalResultDetails() != null && invest.getResultDetails().getClinicalResultDetails().getExamDateTime() != null)//WDEV-16232		
		{
			if (invest.getResultDetails().getClinicalResultDetails().getExamTimeSupplied().booleanValue())//WDEV-16232
				form.txtTypeOrExamDt().setValue(invest.getResultDetails().getClinicalResultDetails().getExamDateTime().toString());//WDEV-16232
			else
				form.txtTypeOrExamDt().setValue(invest.getResultDetails().getClinicalResultDetails().getExamDateTime().getDate().toString());//WDEV-16232
		}
		// JP 09/11/2006 WDEV-2102
		if (invest.getRepDateTime() != null)
			form.txtReceived().setValue(invest.getRepDateTime().toString());
		
		if (invest.getResultStatus() != null)
			form.txtCollOrStat().setValue(invest.getResultStatus().getText());

		OcsPathRadResultVoCollection voCollInvs = form.getGlobalContext().OCRR.getSelectedInvs();
		if(voCollInvs == null)
			voCollInvs = new OcsPathRadResultVoCollection();
		
		OcsPathRadResultVo voPathRadResult = new OcsPathRadResultVo();
		voPathRadResult.setOrderInvestigation(invest);
		voPathRadResult.setDescription(invest.getIOrderResultDisplayInvName());
		voPathRadResult.setCategory(Category.CLINICALIMAGING);
		
		
		//WDEV-9780 - security levels
		boolean passesSecurity = true;
		if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
		{
			ServiceRefVo voInvService =  invest.getInvestigationIsNotNull() && invest.getInvestigation().getProviderServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? invest.getInvestigation().getProviderService().getLocationService().getService() : null;
			SecurityLevelConfigVo voInvSecurityLevel = invest.getInvestigationIsNotNull() && invest.getInvestigation().getInvestigationIndexIsNotNull() ? invest.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

			if(!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel, false)) //WDEV-11622
				passesSecurity = false;
		}	

		if(passesSecurity)
			voCollInvs.add(voPathRadResult);
		
		form.getGlobalContext().OCRR.setSelectedInvs(voCollInvs);
		
		String displayTextMappingForResultStatus = null;// 	WDEV-15783
		if(invest.getResultStatus() != null)// 	WDEV-15783
		{
			displayTextMappingForResultStatus = domain.getMappingForResultStatusLookup(invest.getResultStatus(), TaxonomyType.DISPLAY_TEXT);
		}
		
		if(resultHelper.addRadResult(false, displayTextMappingForResultStatus))// 	WDEV-15783
		{
			if(passesSecurity)
				voCollResult.add(voPathRadResult);
			
			form.getGlobalContext().OCRR.setSelectedInvsWithResults(voCollResult);
		}
		
		/* 
		 * --THE REPORT VIEWER PICKER ROW IS ALWAYS THE LAST ROW TO BE ADDED TO THE RESULTS GRID
		 */ 
		if(bPopulateGrid)
		{
			createPickerRow(false, null);		
			/* 
			 * --THE REPORT VIEWER PICKER ROW IS ALWAYS THE LAST ROW TO BE ADDED TO THE RESULTS GRID -
			 * DO NOT ADD ANY ADDITIONAL ROWS AFTER THE ABOVE METHOD IS CALLED
			 */
			form.dyngrdResults().resetScrollPosition();
			form.dyngrdResults().getRows().expandAll();
		}

		return true;		
	}
	private void setNameLabel(ClinicalImagingResultVo invest)
	{
		
		if(invest != null && invest.getInvestigationIsNotNull() && invest.getInvestigation().getProviderServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationService().getLocation() != null) //wdev-14023
		{
			form.lblName().setValue(invest.getInvestigation().getProviderService().getLocationService().getLocation().getName());
			if (invest.getInvestigation().getProviderService().getLocationService().getService() != null)
			{
				form.lblName().setValue(form.lblName().getValue() + " (" + invest.getInvestigation().getProviderService().getLocationService().getService().getServiceName() + ")");
			}
		}
		
		
		if(invest != null && invest.getInvestigationIsNotNull() && invest.getInvestigation().getProviderServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationServiceIsNotNull() && invest.getInvestigation().getProviderService().getLocationService().getContact() != null)  //wdev-14023
		{
			StringBuffer val = new StringBuffer();
			
			if(invest.getInvestigation().getProviderService().getLocationService().getContact().getName() != null)
			{
				if(invest.getInvestigation().getProviderService().getLocationService().getContact().getName().getForenameIsNotNull())
				{
					val.append(invest.getInvestigation().getProviderService().getLocationService().getContact().getName().getForename());
				}
				if(invest.getInvestigation().getProviderService().getLocationService().getContact().getName().getSurnameIsNotNull())
				{
					val.append(" ").append(invest.getInvestigation().getProviderService().getLocationService().getContact().getName().getSurname());
				}

			}
			if(invest.getInvestigation().getProviderService().getLocationService().getContact().getContactNumberIsNotNull())
			{
				val.append(" (").append(invest.getInvestigation().getProviderService().getLocationService().getContact().getContactNumber()).append(")");
			}
			
			form.lblName().setValue(form.lblName().getValue() + " - " + val);

		}
	}

	private void populateResultDemographics(ResultDemographicsVo demog) 
	{
		if(demog == null)
			return;
		
			if(demog.getNameIsNotNull())
			{
				form.txtName().setValue(demog.getName().toShortForm().toString());
			}
			if(demog.getDobIsNotNull())
			{
				form.txtDOB().setValue(demog.getDob().toString(DateFormat.STANDARD));
			}
			if(demog.getHospNumIsNotNull())
			{
				form.txtHospnum().setValue(demog.getHospNum());
			}
			if(demog.getNhsNumberIsNotNull())
			{
				form.txtNHSNo().setValue(demog.getNhsNumber());
			}
			if (demog.getSex() != null)
			{
				form.txtSex().setValue(demog.getSex().getText());
			}
	}

	private void populateOrderDetails(NewResultOcsOrderVo order)
	{
		form.getGlobalContext().OCRR.setQuestionsNotes(order);
		if (order == null)
			return;

		boolean hasQuestions = order.getClinicalInfoIsNotNull() && order.getClinicalInfo().getCategoryQuestionAnswersIsNotNull() && order.getClinicalInfo().getCategoryQuestionAnswers().size() > 0;
		boolean hasNotes = order.getAdditClinNotesIsNotNull() && order.getAdditClinNotes().length() > 0;
		if (hasQuestions || hasNotes)
		{
			form.lnkViewOrderNotes().setEnabled(true);
			form.lnkViewOrderNotes().setTooltip("Click to view Order Notes");
		}
		else
		{
			form.lnkViewOrderNotes().setTooltip("No Order Notes Entered");
			form.lnkViewOrderNotes().setEnabled(true);
		}

		form.txtOrderingLocation().setValue(order.getCorrectLocation());
		form.txtClinician().setValue(order.getCorrectClinician());

		if (order.getOrderedByIsNotNull() && order.getOrderedBy().getNameIsNotNull())
		{
			form.txtRequestedBy().setValue(order.getOrderedBy().getName().toString());
		}
		if (order.getSysInfoIsNotNull())
			form.txtOrderDt().setValue(order.getSysInfo().getCreationDateTime().toString());
		
		//WDEV-4758
		if(ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
		{
			if(order.getCareContextIsNotNull() && order.getCareContext().getPasEventIsNotNull())
				form.txtPasEpisodeID().setValue(order.getCareContext().getPasEvent().getPasEpisodeId());
		}
		
	}

	private void createPickerRow(boolean isDFTInv, ResultStatus resultStatus)
	{
		DynamicGridRow row = form.dyngrdResults().getRows().newRow();
		row.setSelectable(false);
		//row = form.dyngrdResults().getRows().newRow();

		if (form.dyngrdResults().getColumns().size() > 0)
		{
			if(!isSTHKModeResultCheck())// 	WDEV-15894
			{
				DynamicGridColumn pickCol = form.dyngrdResults().getColumns().getByIdentifier(ResultDisplayHelper.COL_PICK);
				DynamicGridCell cellPick = row.getCells().newCell(pickCol, DynamicCellType.MULTISELECT);
				cellPick.setWidth(283);
				cellPick.setTextColor(Color.Blue);
				cellPick.setAutoPostBack(true);
				cellPick.setReadOnly(false);
				cellPick.setMaxCheckedItemsForMultiSelect(new Integer(1));		
		
				//WDEV-2780
				DynamicGridCellItem item = cellPick.getItems().newItem("Enable Exit", "Enable Exit");
				item.setIdentifier(ResultDisplayHelper.PICK_VIEWED);
				
				if (engine.hasRight(AppRight.MARK_RESULT_AS_CHECKED) && (!isDFTInv || (isDFTInv && ResultStatus.FINAL.equals(resultStatus))))
				{
					item = cellPick.getItems().newItem("Mark report as Checked", "Mark report as Checked");
					item.setIdentifier(ResultDisplayHelper.PICK_CHKD);			
				}
				else
				{
					if (engine.hasRight(AppRight.CAN_UPDATE_RESULT_STATUS) && (!isDFTInv || (isDFTInv && ResultStatus.FINAL.equals(resultStatus))))
					{
						item = cellPick.getItems().newItem("Mark report as Seen", "Mark report as Seen");
						item.setIdentifier(ResultDisplayHelper.PICK_SEEN);		
					}
				}
				if (engine.hasRight(AppRight.CAN_UPDATE_RESULT_STATUS) && (!isDFTInv || (isDFTInv && ResultStatus.FINAL.equals(resultStatus))))
				{
					item = cellPick.getItems().newItem("Mark report for Review", "Mark report for Review");
					item.setIdentifier(ResultDisplayHelper.PICK_QRY);
				}
			}
			else// 	WDEV-15894 - starts here
			{
				DynamicGridColumn pCol = form.dyngrdResults().getColumns().getByIdentifier(ResultDisplayHelper.COL_PREVIEW);
				if(pCol != null)
				{
					boolean canDisplayPreviewButton = canDisplayPreviewButton();
					DynamicGridCell cellP = row.getCells().newCell(pCol, canDisplayPreviewButton ? DynamicCellType.BUTTON : DynamicCellType.EMPTY);
					cellP.setWidth(80);
					
					if(canDisplayPreviewButton)
					{
						cellP.setButtonText(PREVIOUS_TEXT_BUTTON);
						cellP.setAutoPostBack(true);
						cellP.setIdentifier(ResultDisplayHelper.BUTTON_PREVIEW);
					}
				}
				
				DynamicGridColumn cCol = form.dyngrdResults().getColumns().getByIdentifier(ResultDisplayHelper.COL_CHECKED_EXIT);
				if(cCol != null)
				{
					DynamicGridCell cellC = row.getCells().newCell(cCol, DynamicCellType.BUTTON);
					cellC.setWidth(120);
					cellC.setAutoPostBack(true);
					cellC.setIdentifier(ResultDisplayHelper.BUTTON_CHKD);
					cellC.setButtonText(hasMarkResultAsCheckedRoleRight() ? CHECKED_TEXT_BUTTON : EXIT_TEXT_BUTTON);
				}
				
				DynamicGridColumn nCol = form.dyngrdResults().getColumns().getByIdentifier(ResultDisplayHelper.COL_NEXT);
				if(nCol != null)
				{
					boolean canDisplayNextButton = canDisplayNextButton();
					DynamicGridCell cellN = row.getCells().newCell(nCol, canDisplayNextButton ? DynamicCellType.BUTTON : DynamicCellType.EMPTY);
					cellN.setWidth(80);
					
					if(canDisplayNextButton)
					{
						cellN.setButtonText(NEXT_TEXT_BUTTON);
						cellN.setAutoPostBack(true);
						cellN.setIdentifier(ResultDisplayHelper.BUTTON_NEXT);
					}
				}
			}// 	WDEV-15894 - ends here
			
			DynamicGridCell cell = row.getCells().newCell(form.dyngrdResults().getColumns().getByIdentifier(ResultDisplayHelper.COL_NAME), DynamicCellType.STRING);
			cell.setWidth(528);
			cell.setReadOnly(true);
			DynamicGridColumn colTest = form.dyngrdResults().getColumns().getByIdentifier(ResultDisplayHelper.COL_TEST);
			if (colTest != null)
			{
				cell = row.getCells().newCell(colTest, DynamicCellType.LABEL);
				colTest.setWidth(0);
				cell.setWidth(0);
			}
			DynamicGridColumn colValue = form.dyngrdResults().getColumns().getByIdentifier(ResultDisplayHelper.COL_VALUE);
			if (colValue != null)
			{
				cell = row.getCells().newCell(colValue, DynamicCellType.LABEL);
				colValue.setWidth(0);
				cell.setWidth(0);
			}
			DynamicGridColumn colUnits = form.dyngrdResults().getColumns().getByIdentifier(ResultDisplayHelper.COL_UNITS);
			if (colUnits != null)
			{
				cell = row.getCells().newCell(colUnits, DynamicCellType.LABEL);
				colUnits.setWidth(0);
				cell.setWidth(0);
			}
			DynamicGridColumn colRefRange = form.dyngrdResults().getColumns().getByIdentifier(ResultDisplayHelper.COL_REF_RANGE);
			if (colRefRange != null)
			{
				cell = row.getCells().newCell(colRefRange, DynamicCellType.LABEL);
				colRefRange.setWidth(0);
				cell.setWidth(0);
			}
			DynamicGridColumn colComments = form.dyngrdResults().getColumns().getByIdentifier(ResultDisplayHelper.COL_COMMENTS);
			if (colComments != null)
			{
				cell = row.getCells().newCell(colComments, DynamicCellType.WRAPTEXT);
				colComments.setWidth(0);
				cell.setWidth(0);
			}
		}
	}

	// 	WDEV-15894
	private boolean canDisplayNextButton() 
	{
		if(form.getGlobalContext().OCRR.getSelectedPathRadResults() != null 
				&& form.getGlobalContext().OCRR.getCurrentPathRadResult() != null 
				&& form.getGlobalContext().OCRR.getSelectedPathRadResults().indexOf(form.getGlobalContext().OCRR.getCurrentPathRadResult()) < (form.getGlobalContext().OCRR.getSelectedPathRadResults().size() - 1))
		{
			return true;
		}
			
		return false;
	}

	// 	WDEV-15894
	private boolean canDisplayPreviewButton() 
	{
		if(form.getGlobalContext().OCRR.getSelectedPathRadResults() != null 
			&& form.getGlobalContext().OCRR.getCurrentPathRadResult() != null 
			&& form.getGlobalContext().OCRR.getSelectedPathRadResults().indexOf(form.getGlobalContext().OCRR.getCurrentPathRadResult()) > 0)
		{
			return true;
		}
		
		return false;
	}

	// 	WDEV-15894
	private boolean hasMarkResultAsCheckedRoleRight() 
	{
		return engine.hasRight(AppRight.MARK_RESULT_AS_CHECKED);
	}

	// 	WDEV-15894
	private boolean isSTHKModeResultCheck() 
	{
		return ConfigFlag.UI.STHK_MODE_RESULT_CHECK.getValue();
	}

	private void populateResults(PathologySpecimenOrderInvestigationVoCollection investigations, boolean bPopulateGrid) 
	{
		if(investigations == null)
			return;		
		
		
		for(int x = 0; x < investigations.size(); x++)
		{
			populateInvestigationResults(investigations.get(x), bPopulateGrid);
		}
	}
	private void populateInvestigationResults(PathologySpecimenOrderInvestigationVo investigation, boolean bPopulateGrid) 
	{
		if(investigation == null)
			throw new CodingRuntimeException("investigation is null in method populateInvestigationResults");
		
		ResultDisplayHelper resultHelper = null;

		//WDEV-9780
		if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
		{
			ServiceRefVo voInvService =  investigation.getInvestigationIsNotNull() && investigation.getInvestigation().getProviderServiceIsNotNull() && investigation.getInvestigation().getProviderService().getLocationServiceIsNotNull() && investigation.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? investigation.getInvestigation().getProviderService().getLocationService().getService() : null;
			SecurityLevelConfigVo voInvSecurityLevel = investigation.getInvestigationIsNotNull() && investigation.getInvestigation().getInvestigationIndexIsNotNull() ? investigation.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

			if(!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel, false)) //WDEV-11622
				return;
		}	
		
		if(investigation.getResultDetails() != null && investigation.getResultDetails().getPathologyResultDetailsIsNotNull() && investigation.getResultDetails().getPathologyResultDetails().size() > 0 && investigation.getResultDetails().getPathologyResultDetails().get(0) != null && investigation.getResultDetails().getPathologyResultDetails().get(0).getResultComponentsIsNotNull() &&
				investigation.getResultDetails().getPathologyResultDetails().get(0).getResultComponents().size() > 0 &&
				investigation.getResultDetails().getPathologyResultDetails().get(0).getResultComponents().get(0) != null &&
						ResultValueType.ED.equals(investigation.getResultDetails().getPathologyResultDetails().get(0).getResultComponents().get(0).getResValType()))//WDEV-16232
		{						
			form.pnlSpecOrExam().setVisible(true);			
			showResultStatusOptions(!bPopulateGrid);			
			
			if(ConfigFlag.UI.DISPLAY_RESULT_PATIENT_DETAILS_LINK.getValue())
				form.lnkViewPatientDetails().setVisible(true);
			else
				form.lnkViewPatientDetails().setVisible(false);
			form.getLocalContext().setPickValue(ResultDisplayHelper.PICK_VIEWED);

			updateButtonStateIfManualResult(true);			
		}
		
		if (investigation.getResultDetails() != null && investigation.getResultDetails().getPathologyResultDetailsIsNotNull())
		{
			for(int i=0; i<investigation.getResultDetails().getPathologyResultDetails().size(); i++)
			{
				if (investigation.getResultDetails().getPathologyResultDetails().get(i) != null && investigation.getResultDetails().getPathologyResultDetails().get(i).getResultComponentsIsNotNull())//WDEV-16232
				{	
					for(int x = 0; x < investigation.getResultDetails().getPathologyResultDetails().get(i).getResultComponents().size(); x++)//WDEV-16232
					{
							addAnalyte(investigation.getResultDetails().getPathologyResultDetails().get(i).getResultComponents().get(x).getAnalyte());//WDEV-16232
					}
				}
			}
		}
		
		try
		{
			resultHelper = new ResultDisplayHelper(investigation, form.dyngrdResults(), engine);
			resultHelper.setAnalytes(form.getLocalContext().getAnalytes());
		
			OcsPathRadResultVoCollection voCollResult = form.getGlobalContext().OCRR.getSelectedInvsWithResults();
			if(voCollResult == null)
				voCollResult = new OcsPathRadResultVoCollection();
			
			OcsPathRadResultVoCollection voCollInvs = form.getGlobalContext().OCRR.getSelectedInvs();
			if(voCollInvs == null)
				voCollInvs = new OcsPathRadResultVoCollection();
			
			OcsPathRadResultVo voPathRadResult = new OcsPathRadResultVo();
			voPathRadResult.setOrderInvestigation(investigation);
			voPathRadResult.setDescription(investigation.getIOrderResultDisplayInvName());
			voPathRadResult.setCategory(Category.PATHOLOGY);
			voCollInvs.add(voPathRadResult);
			form.getGlobalContext().OCRR.setSelectedInvs(voCollInvs);		
			
			String displayTextMappingForResultStatus = null;// 	WDEV-15783
			if(investigation.getResultStatus() != null)// 	WDEV-15783
			{
				displayTextMappingForResultStatus = domain.getMappingForResultStatusLookup(investigation.getResultStatus(), TaxonomyType.DISPLAY_TEXT);
			}
			
			if(resultHelper.addPathResult(false, displayTextMappingForResultStatus))// 	WDEV-15783
			{
				//WDEV-9780
				boolean passesSecurity = true;
				if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
				{
					ServiceRefVo voInvService =  investigation.getInvestigationIsNotNull() && investigation.getInvestigation().getProviderServiceIsNotNull() && investigation.getInvestigation().getProviderService().getLocationServiceIsNotNull() && investigation.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? investigation.getInvestigation().getProviderService().getLocationService().getService() : null;
					SecurityLevelConfigVo voInvSecurityLevel = investigation.getInvestigationIsNotNull() && investigation.getInvestigation().getInvestigationIndexIsNotNull() ? investigation.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;
	
					if(!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel, false)) //WDEV-11622
						passesSecurity = false;
				}	
	
				if(passesSecurity)
					voCollResult.add(voPathRadResult);
				
				form.getGlobalContext().OCRR.setSelectedInvsWithResults(voCollResult);
			}
			
			if (resultHelper != null &&
					 resultHelper.getTemporaryFiles() != null &&
					 	resultHelper.getTemporaryFiles().size() >0)
			{
				ArrayList<String> tempFiles = form.getLocalContext().getTempFiles();
				if (tempFiles == null)
					tempFiles = new ArrayList<String>();	
				for (String tempFile : resultHelper.getTemporaryFiles()) 
				{
					tempFiles.add(tempFile);
				}
				form.getLocalContext().setTempFiles(tempFiles);
			}
		}	
		catch (Exception e)
		{
			int EventId = engine.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.FATALERROR, "Error displaying result for patient investigation id:" + investigation.getBoId() + "\n" + e.getMessage()).getSystemLogEventId();
			engine.showMessage("Error displaying patient result.\nFor more information plese look in 'System Log' form and search by eventId = " + EventId);
			
			displayResultWhenInboundMessageCorrupted();
			return;
		}
	}
	
	private boolean isDFT(NewResultSpecDocVo result) //WDEV-16232
	{
		if(result == null || result.getInvestigation() == null)
			return false;
		
		if(InvEventType.TIME_SERIES.equals(result.getInvestigation().getEventType()))
			return true;
			
		return false;
	}

	//WDEV-14353
	private void displayResultWhenInboundMessageCorrupted()
	{
		form.pnlSpecOrExam().setVisible(true);
		form.htmDocument().setVisible(true);
		showResultStatusOptions(true);
		form.dyngrdResults().setVisible(false);
		
		if(ConfigFlag.UI.DISPLAY_RESULT_PATIENT_DETAILS_LINK.getValue())
			form.lnkViewPatientDetails().setVisible(true);
		else
			form.lnkViewPatientDetails().setVisible(false);
		
		form.getLocalContext().setPickValue(ResultDisplayHelper.PICK_VIEWED);
		form.getLocalContext().sethtmlString("");
		form.htmDocument().setHTML("");
		updateButtonStateIfManualResult(true);
	}

	private void populateLabDetails(PathologySpecimenOrderInvestigationVo investigation) 
	{
		if(investigation == null)
			return;				
		if(investigation.getInvestigation() == null)
			return;
		if(investigation.getInvestigation().getProviderService() == null)
			return;
		if(investigation.getInvestigation().getProviderService().getLocationService() == null)
			return;
		
		setNameLabel(investigation);
	}
	private void setNameLabel(PathologySpecimenOrderInvestigationVo investigation)
	{
		if(investigation.getInvestigation().getProviderService().getLocationService().getLocation() != null)
		{
			form.lblName().setValue(investigation.getInvestigation().getProviderService().getLocationService().getLocation().getName());
			if (investigation.getInvestigation().getProviderService().getLocationService().getService() != null)
			{
				form.lblName().setValue(form.lblName().getValue() + " (" + investigation.getInvestigation().getProviderService().getLocationService().getService().getServiceName() + ")");
			}
		}
		
		
		if(investigation.getInvestigation().getProviderService().getLocationService().getContact() != null)
		{
			StringBuffer val = new StringBuffer();
			
			if(investigation.getInvestigation().getProviderService().getLocationService().getContact().getName() != null)
			{
				if(investigation.getInvestigation().getProviderService().getLocationService().getContact().getName().getForenameIsNotNull())
				{
					val.append(investigation.getInvestigation().getProviderService().getLocationService().getContact().getName().getForename());
				}
				if(investigation.getInvestigation().getProviderService().getLocationService().getContact().getName().getSurnameIsNotNull())
				{
					val.append(" ").append(investigation.getInvestigation().getProviderService().getLocationService().getContact().getName().getSurname());
				}

			}
			if(investigation.getInvestigation().getProviderService().getLocationService().getContact().getContactNumberIsNotNull())
			{
				val.append(" (").append(investigation.getInvestigation().getProviderService().getLocationService().getContact().getContactNumber()).append(")");
			}
			
			form.lblName().setValue(form.lblName().getValue() + " - " + val);

		}
	}

	protected void onDyngrdResultsCellValueChanged(DynamicGridCell cell)
	{
		disableNavigation();
		
		form.imbClose().setEnabled(false);
		form.lnkViewPatientDetails().setVisible(false);
		//form.imbPrint().setEnabled(false);
		
		// WDEV-13321
		form.getLocalContext().setPickValue(null);
		
		DynamicGridCellItemCollection items = cell.getItems();
		for (int i = 0; i < items.size(); i++)
		{
			DynamicGridCellItem item = items.get(i);
			if (item.isChecked())
			{
				form.imbClose().setEnabled(true);
				//form.imbPrint().setEnabled(true);
				if(ConfigFlag.UI.DISPLAY_RESULT_PATIENT_DETAILS_LINK.getValue())
					form.lnkViewPatientDetails().setVisible(true);
				else
					form.lnkViewPatientDetails().setVisible(false);
				form.getLocalContext().setPickValue((Integer)item.getIdentifier());
				setNavigationState();
			}
		}
		
		// WDEV-13321
		// Default to responsible HCP clinician
		if (ResultDisplayHelper.PICK_QRY.equals(form.getLocalContext().getPickValue()))
		{
			// WDEV-18052 - Do not default in Medic
//			NewResultOcsOrderVo result = domain.getNewResultOcsOrderVo(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
//			
//			// WDEV-14097
//			// Default in only if the 'Responsible HCP' is a MEDIC
//			if (result.getResponsibleClinicianIsNotNull() && HcpDisType.MEDICAL.equals(result.getResponsibleClinician().getHcpType()))
//			{
//				form.ccMedicReview().setValue(result.getResponsibleClinician());
//			}
		}
		else
		{
			form.ccMedicReview().clear();
		}
		
		// WDEV-13321
		updateControlsState();
	}
	protected void onBtnCumulResultClick() throws PresentationLogicException 
	{
		displayCumulateResults();
	}
	private void displayCumulateResults()
	{
		OcsPathRadResultVo currRep = form.getGlobalContext().OCRR.getCurrentPathRadResult();
		
		if(currRep == null)		
			return;
		
		if(currRep.getCategoryIsNotNull())
		{
			if (currRep.getCategory().equals(Category.PATHOLOGY))
			{
				PathologySpecimenVo specimen = domain.getSpecimen(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
				
				if(specimen != null && specimen.getOrderIsNotNull())//WDEV-16463
				{
					form.getGlobalContext().Core.setSecondPatientShort(specimen.getOrder().getPatient());
				}
			}
			else if (currRep.getCategory().equals(Category.CLINICALIMAGING))
			{
				ClinicalImagingResultVo radRes = domain.getClinicalImagingResult(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
				
				if(radRes != null && radRes.getOrderDetailsIsNotNull())//WDEV-16463
				{
					form.getGlobalContext().Core.setSecondPatientShort(radRes.getOrderDetails().getPatient());
				}
			}
		}	
		
		form.getGlobalContext().OCRR.setCumulateAnalytes(form.getLocalContext().getAnalytes());
		if(form.getGlobalContext().OCRR.getCurrentPathRadResult() != null)
		{
			form.getGlobalContext().OCRR.setOrderInvestigationReference(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
		}
		
		engine.open(form.getForms().OCRR.CumulateResults);
	}
	
	protected void onBtnResultHistoryClick() throws PresentationLogicException
	{
		engine.open(form.getForms().OCRR.ResultHistory);
	}
	
	protected void onBtnStatusHistoryClick() throws PresentationLogicException
	{
		engine.open(form.getForms().OCRR.OrderInvStatusHistory);
	}
	
	private void addAnalyte(AnalyteRefVo value)
	{
		if(value == null)
			return;
		
		AnalyteRefVoCollection analytes = form.getLocalContext().getAnalytes();
		if(analytes == null)
			analytes = new AnalyteRefVoCollection();
		
		if(analytes.indexOf(value) >= 0)
			return;
		analytes.add(value);
		
		form.getLocalContext().setAnalytes(analytes);
	}
	@Override
	protected void onBtnPrintOrderClick() throws PresentationLogicException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		OcsPathRadResultVo currRep = form.getGlobalContext().OCRR.getCurrentPathRadResult();
		
		if(currRep == null)
			return;

		Object[] obj = null;
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		if(currRep.getCategoryIsNotNull())
		{
			if (currRep.getCategory().equals(Category.PATHOLOGY))
			{
				PathologySpecimenVo specimen = domain.getSpecimen(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
				
				//we need a better way to do this
				obj = domain.getSystemReportAndTemplate(new Integer(90));
				
				client.addSeed(new SeedValue("OrderSpecimen_id",  specimen.getID_OrderSpecimen(), Integer.class));
			}
			else if (currRep.getCategory().equals(Category.CLINICALIMAGING))
			{
				ClinicalImagingResultVo radRes = domain.getClinicalImagingResult(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
			
				//we need a better way to do this
				obj = domain.getSystemReportAndTemplate(new Integer(91));
				
				client.addSeed(new SeedValue("OrderInvestigation_id",  radRes.getID_OrderInvestigation(), Integer.class));
			}		
		}

		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		
		String resultUrl = "";
		try
		{
			resultUrl = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}
		
		engine.openUrl(resultUrl);
		
		/*
		ReportVoCollection coll = domain.listAssignedReports(new Integer(engine.getFormName().getID()));

		ReportVo rep = null;
		if(coll != null && coll.size() > 0)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				if(coll.get(i).getSeeds() == null || coll.get(i).getSeeds().size() == 0)
				{
					if(rep != null)
					{
						engine.showMessage("More than one report assigned to this form.");
						return;
					}
					
					rep = coll.get(i);
				}
				else
					rep = coll.get(i);
			}
			
			if(rep == null)
				engine.showMessage("I could not find a suitable report for this form.\n\rPlease go to Admin->Reports and assign a report to this form.");
			
			if(rep != null &&
					rep.getTemplatesIsNotNull() &&
						rep.getTemplates().size() > 0)
			{
				ReportTemplateVo template = rep.getTemplates().get(0);
				
				String[] obj = null;
				try
				{
					obj = domain.getReportAndTemplate(rep.getID_ReportBo(), template.getID_TemplateBo());				
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage("Error retrieving report template !\r\n" + e.getMessage());
					return;
				}
				
				if(obj == null || obj.length == 0)
				{
					engine.showMessage("I could not get the report and template !");
					return;
				}

				QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
				
				client.addSeed(new SeedValue("OrderInvestigation_id",  form.getLocalContext().getOrderInv().getBoId(), Integer.class));
				
				String resultUrl = "";
				try
				{
					resultUrl = client.buildReportAsUrl(obj[0], obj[1], urlReportServer, "PDF", "", 1);
				} 
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error creating report: " + e1.getMessage());
					return;
				}
				
				engine.openUrl(resultUrl);
			}
		}
		else
		{
			engine.showMessage("No report was assigned to this form.\n\rPlease go to Admin->Reports and assign a report to this form.");
		}
		*/
	}
	@Override
	protected void onBtnPrintResultClick() throws PresentationLogicException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		//we need a better way to do this
		Object[] obj = domain.getSystemReportAndTemplate(new Integer(75));
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		client.addSeed(new SeedValue("OrderInvestigation_id",  form.getLocalContext().getOrderInv().getBoId(), Integer.class));
		
		String resultUrl = "";
		try
		{
			resultUrl = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}
		
		engine.openUrl(resultUrl);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		// 	WDEV-15894
		if(form.getForms().OCRR.OrderInvStatusHistory.equals(formName))
		{
			form.getGlobalContext().OCRR.setCurrentPathRadResult(domain.refreshCurrentPathRadResult(form.getGlobalContext().OCRR.getCurrentPathRadResult()));
		}
		
		form.htmDocument().setHTML(form.getLocalContext().gethtmlString());
		
		open();		// WDEV-13321
	}
	
	
	protected void onBtnViewPACSClick() throws PresentationLogicException 
	{
		form.htmDocument().setHTML("");//WDEV-14843
		form.getGlobalContext().OCRR.CentricityWebPACS.setAccessionNumber(domain.getCentricityPacsAccessionNumber(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation()));
		engine.open(form.getForms().OCRR.CentricityWebPACSViewer,true,true);
	}
	
	protected void onLnkViewPatientDetailsClick() throws PresentationLogicException 
	{		
		if(updateRecord() == false)
		{
			return;
		}	
		
		form.getGlobalContext().Core.setPatientToBeDisplayed(form.getGlobalContext().Core.getPatientShort());
		engine.close(DialogResult.YES);
	}
	@Override
	protected void onChkMarkForReviewValueChanged() throws PresentationLogicException {
		form.getLocalContext().setPickValue(ResultDisplayHelper.PICK_QRY);
		if(form.chkMarkForReview().getValue())
		{
			form.imbClose().setEnabled(true);
			//WDEV-10904,wdev-11989
			if(ConfigFlag.UI.DISPLAY_RESULT_PATIENT_DETAILS_LINK.getValue())
			{
				form.lnkViewPatientDetails().setVisible(true);
				form.lnkViewPatientDetails().setEnabled(true);
			}
			form.btnCumulResult();
			setNavigationState();
		}
		else 
		{
			form.imbClose().setEnabled(false);
			//WDEV-10904
			form.lnkViewPatientDetails().setVisible(false);
			form.lnkViewPatientDetails().setEnabled(false);
			disableNavigation();
			form.getLocalContext().setPickValue(null);

		}
		form.chkEnableExit().setValue(false);
		form.chkMarkAsSeen().setValue(false);
		form.chkMarkAsChecked().setValue(false);
		
		// WDEV-18052 - Do not default in HCP
		// WDEV-13321
		// Default to responsible HCP clinician
//		NewResultOcsOrderVo result = domain.getNewResultOcsOrderVo(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
//		
//		// WDEV-14097
//		// Default to 'Responsible Clinician' only if MEDICAL
//		if (result.getResponsibleClinicianIsNotNull() && HcpDisType.MEDICAL.equals(result.getResponsibleClinician().getHcpType()))
//		{
//			form.ccMedicReview().setValue(result.getResponsibleClinician());
//		}
		
		// WDEV-13321
		updateControlsState();
	}
	
	/**
	 * WDEV-13321
	 * Function used to update the state of the controls on screen
	 */
	private void updateControlsState()
	{
		Integer pickValue = form.getLocalContext().getPickValue();
		
		form.ccMedicReview().setVisible(ResultDisplayHelper.PICK_QRY.equals(pickValue));
		form.lblAllocateforReview().setVisible(ResultDisplayHelper.PICK_QRY.equals(pickValue));
	}

	
	@Override
	protected void onChkMarkAsSeenValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setPickValue(ResultDisplayHelper.PICK_SEEN);
		
		if (form.chkMarkAsSeen().getValue())
		{
			form.imbClose().setEnabled(true);
			// WDEV-10904,wdev-11989
			if (ConfigFlag.UI.DISPLAY_RESULT_PATIENT_DETAILS_LINK.getValue())
			{
				form.lnkViewPatientDetails().setVisible(true);
				form.lnkViewPatientDetails().setEnabled(true);
			}
			setNavigationState();
		}
		else
		{
			form.imbClose().setEnabled(false);
			// WDEV-10904
			form.lnkViewPatientDetails().setVisible(false);
			form.lnkViewPatientDetails().setEnabled(false);
			disableNavigation();
		}

		// WDEV-13321
		form.ccMedicReview().clear();

		form.chkEnableExit().setValue(false);
		form.chkMarkForReview().setValue(false);
		updateControlsState();
	}
	

	@Override
	protected void onChkMarkAsCheckedValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setPickValue(ResultDisplayHelper.PICK_CHKD);
		
		if (form.chkMarkAsChecked().getValue())
		{
			form.imbClose().setEnabled(true);
			// WDEV-10904,wdev-11989
			if (ConfigFlag.UI.DISPLAY_RESULT_PATIENT_DETAILS_LINK.getValue())
			{
				form.lnkViewPatientDetails().setVisible(true);
				form.lnkViewPatientDetails().setEnabled(true);
			}
			setNavigationState();
		}
		else
		{
			form.imbClose().setEnabled(false);
			// WDEV-10904
			form.lnkViewPatientDetails().setVisible(false);
			form.lnkViewPatientDetails().setEnabled(false);
			disableNavigation();
		}

		// WDEV-13321
		form.ccMedicReview().clear();

		form.chkEnableExit().setValue(false);
		form.chkMarkForReview().setValue(false);
		updateControlsState();
	}


	@Override
	protected void onChkEnableExitValueChanged() throws PresentationLogicException {
		form.getLocalContext().setPickValue(ResultDisplayHelper.PICK_VIEWED);
		setNavigationState();
		if(form.chkEnableExit().getValue())
		{
			form.imbClose().setEnabled(true);
			//WDEV-10904,wdev-11989
			if(ConfigFlag.UI.DISPLAY_RESULT_PATIENT_DETAILS_LINK.getValue())
			{
				form.lnkViewPatientDetails().setVisible(true);
				form.lnkViewPatientDetails().setEnabled(true);
			}
		}
		else 
		{
			form.imbClose().setEnabled(false);
			//WDEV-10904
			form.lnkViewPatientDetails().setVisible(false);
			form.lnkViewPatientDetails().setEnabled(false);
			disableNavigation();
		}
		
		// WDEV-13321
		form.ccMedicReview().clear();
		
		form.chkMarkAsSeen().setValue(false);
		form.chkMarkAsChecked().setValue(false);
		form.chkMarkForReview().setValue(false);
		updateControlsState();
	}


	
	/**
	 * WDEV-13320
	 */
	@Override
	protected void onBtnCommentsClick() throws PresentationLogicException
	{
		form.htmDocument().setHTML("");//WDEV-14341
		// Open comments dialog
		engine.open(form.getForms().OCRR.ResultCommentsDialog);
	}

	@Override
	//WDEV-13879
	protected void onBtnClericalTaskClick() throws PresentationLogicException 
	{
		//FB latest changes for WDEV-13879 - 12.01.2012
		if (domain.getMosUser() == null)//WDEV-15411
		{
			engine.showMessage("Only MOS users can access this form! Current user is not a MOS user.");
			return ;
		}
		
		form.htmDocument().setHTML("");//WDEV-14843
		form.getGlobalContext().Core.setPatientClericalTask(domain.getPatientClericalTask(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation()));
		
		engine.open(form.getForms().Core.PatientClericalTaskDialog,false); // WDEV-14080 
	}

	// 	WDEV-15894
	@Override
	protected void onDyngrdResultsCellButtonClicked(DynamicGridCell cell) 
	{
		if(isSTHKModeResultCheck())
		{
			if(cell.getIdentifier().equals(ResultDisplayHelper.BUTTON_CHKD))
			{
				form.getLocalContext().setPickValue(hasMarkResultAsCheckedRoleRight() ? ResultDisplayHelper.PICK_CHKD : ResultDisplayHelper.PICK_VIEWED);
				close();
			}
			else if(cell.getIdentifier().equals(ResultDisplayHelper.BUTTON_NEXT))
			{
				form.getLocalContext().setPickValue(hasMarkResultAsCheckedRoleRight() ? ResultDisplayHelper.PICK_CHKD : ResultDisplayHelper.PICK_VIEWED);
				move(true);
			}
			else if(cell.getIdentifier().equals(ResultDisplayHelper.BUTTON_PREVIEW))
			{
				form.getLocalContext().setPickValue(hasMarkResultAsCheckedRoleRight() ? ResultDisplayHelper.PICK_CHKD : ResultDisplayHelper.PICK_VIEWED);
				move(false);
			}
		}
		
		updateControlsState();
	}
}
