//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.44 build 2244.18931)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.orderprioritydialog;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.configuration.vo.InvestigationRefVo;
import ims.ocrr.forms.orderprioritydialog.GenForm.grdOrderInvestigationRow;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.InvestigationUnderSpecimenVo;
import ims.ocrr.vo.MyOrderChildComponentVo;
import ims.ocrr.vo.MyOrderComponentVo;
import ims.ocrr.vo.MyOrderComponentVoCollection;
import ims.ocrr.vo.OrderInvestigationVo;
import ims.ocrr.vo.OrderInvestigationVoCollection;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.OrderPriority;
import ims.ocrr.vo.lookups.OrderPriorityCollection;
import ims.ocrr.vo.lookups.SelectAndOrderComponentType;

public class Logic extends BaseLogic
{
	private static final String PATHOLOGY_PRIORITY_REQUIRED = "Pathology";
	private static final String RADIOLOGY_PRIORITY_REQUIRED = "ClinicalImaging";
	private static final String PATHOLOGY_AND_RADIOLOGY_REQUIRED = "ClinicalImagingAndPathology";

	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	
	@Override
	protected void onGrdOrderInvestigationMutableComboBoxSelected(int column, grdOrderInvestigationRow row, Object value) throws PresentationLogicException
	{
		if (value != null && Category.PATHOLOGY.equals(row.getcolComponent().getCategory()) && Boolean.FALSE.equals(form.getLocalContext().getPathologyChanged()))
		{
			form.getLocalContext().setPathologyChanged(changePrioritiesForCategory(value, Category.PATHOLOGY));
		}
		else if (value != null && Category.CLINICALIMAGING.equals(row.getcolComponent().getCategory()) && Boolean.FALSE.equals(form.getLocalContext().getRadioloyChanged()))
		{
			form.getLocalContext().setRadioloyChanged(changePrioritiesForCategory(value, Category.CLINICALIMAGING));
		}
		else if (value != null && Category.CLINICAL.equals(row.getcolComponent().getCategory()) && Boolean.FALSE.equals(form.getLocalContext().getClinicalChanged()))
		{
			form.getLocalContext().setClinicalChanged(changePrioritiesForCategory(value, Category.CLINICAL));
		}
	}

	private Boolean changePrioritiesForCategory(Object value, Category category)
	{
		if (category == null)
			return Boolean.FALSE;
		
		for (int i = 0; i < form.grdOrderInvestigation().getRows().size(); i++)
		{
			grdOrderInvestigationRow row = form.grdOrderInvestigation().getRows().get(i);
			
			if (row.getParentRow() == null && category.equals(row.getcolComponent().getCategory()) && row.getcolPriority().getValue() == null)
			{
				row.getcolPriority().setValue(value);
			}
		}
		
		return Boolean.TRUE;
	}

	private void initialize()
	{
		form.getLocalContext().setRadioloyChanged(Boolean.FALSE);
		form.getLocalContext().setPathologyChanged(Boolean.FALSE);
		form.getLocalContext().setClinicalChanged(Boolean.FALSE);
		
		OrderPriorityCollection pathologyPriorities = domain.listPathologyPriorities();
		OrderPriorityCollection radiologyPriorities = domain.listRadiologyPriorities();
		OrderPriorityCollection clinicalPriorities = domain.listClinicalPriorities();
		
		
		MyOrderComponentVoCollection components = form.getGlobalContext().OCRR.getMyOrderComponents();
		
		for(int x = 0; x < components.size(); x++)
		{
			MyOrderComponentVo component = components.get(x);
			
			GenForm.grdOrderInvestigationRow pRow;
			GenForm.grdOrderInvestigationRow cRow;
			
			if(component != null)
			{
				if(component.getComponentType().equals(SelectAndOrderComponentType.PROFILE))
				{
					pRow = form.grdOrderInvestigation().getRows().newRow();
					pRow.setcolComponents(component.getText());
					pRow.setExpandedImage(form.getImages().OCRR.Profile);
					pRow.setCollapsedImage(form.getImages().OCRR.Profile);
					pRow.setcolComponent(component);
					pRow.setExpanded(true);
				//pRow.setcolComponentValue(new InvestigationRefVo(component.getID(),0));
					addPriorityOptions(pRow, Category.PATHOLOGY.equals(component.getCategory()), pathologyPriorities, Category.CLINICALIMAGING.equals(component.getCategory()), radiologyPriorities, Category.CLINICAL.equals(component.getCategory()), clinicalPriorities);
					
					if(component.getComponentsIsNotNull())
					{
						for(int y = 0; y < component.getComponents().size(); y++)
						{
							MyOrderChildComponentVo childComponent = component.getComponents().get(y);
							cRow = pRow.getRows().newRow();
							cRow.setcolComponents(childComponent.getText());
							cRow.setExpandedImage(form.getImages().OCRR.Investigation);
							cRow.setCollapsedImage(form.getImages().OCRR.Investigation);
							cRow.setcolComponentValue(new InvestigationRefVo(childComponent.getID(),0));
							cRow.setcolComponent(component);
							cRow.setReadOnly(true);
						}
					}
				}
				else if(component.getComponentType().equals(SelectAndOrderComponentType.INVESTIGATION))
				{
					pRow = form.grdOrderInvestigation().getRows().newRow();
					pRow.setcolComponents(component.getText());
					pRow.setExpandedImage(form.getImages().OCRR.Investigation);
					pRow.setCollapsedImage(form.getImages().OCRR.Investigation);
					pRow.setcolComponentValue(new InvestigationRefVo(component.getID(),0));
					pRow.setcolComponent(component);
					
					addPriorityOptions(pRow, Category.PATHOLOGY.equals(component.getCategory()), pathologyPriorities, Category.CLINICALIMAGING.equals(component.getCategory()), radiologyPriorities, Category.CLINICAL.equals(component.getCategory()), clinicalPriorities);
				}
			}	
		}	
		

		//populate any selected priorities
		OrderInvestigationVoCollection voCollOrderInvest = form.getGlobalContext().OCRR.getOrderInvestigationCollection();
		if(voCollOrderInvest != null && isPrioritySet(voCollOrderInvest))
		{
			for(int i=0; i<voCollOrderInvest.size(); i++)
			{
				grdOrderInvestigationRow[] grdRowsList = form.grdOrderInvestigation().getAllRows();
				if(grdRowsList != null)
				{
					for(int j=0;j<grdRowsList.length;j++)
					{
						if(grdRowsList[j].getcolComponentValue() != null && grdRowsList[j].getcolComponentValue().equals(voCollOrderInvest.get(i).getInvestigation()))
						{
							if (grdRowsList[j].getParentRow() != null)
								grdRowsList[j].getParentRow().getcolPriority().setValue(voCollOrderInvest.get(i).getOrderPriority());
							else
								grdRowsList[j].getcolPriority().setValue(voCollOrderInvest.get(i).getOrderPriority());
						}
					}
				}
			}
		}
		else
		{
			//default selected priority first time
			grdOrderInvestigationRow[] grdRowsList = form.grdOrderInvestigation().getAllRows();
			for(int j=0;j<grdRowsList.length;j++)
			{
				if(grdRowsList[j].getcolComponentValue() != null)
				{
					grdRowsList[j].getcolPriority().setValue(form.getGlobalContext().OCRR.getSelectedOrderPriority());
				}
			}
		}
	}

	private void addPriorityOptions(grdOrderInvestigationRow row, boolean pathology, OrderPriorityCollection pathologyPriorities, boolean radiology, OrderPriorityCollection radiologyPriorities, boolean clinical, OrderPriorityCollection clinicalPriorities)
	{
		if (pathology && pathologyPriorities != null)
		{
			for (int i = 0; i < pathologyPriorities.size(); i++)
			{
				OrderPriority priority = pathologyPriorities.get(i);
				
				if (!priority.equals(OrderPriority.VARIOUS))
					row.getcolPriority().newRow(priority, priority.getText());
			}
		}
		
		if (radiology && radiologyPriorities != null)
		{
			for (int i = 0; i < radiologyPriorities.size(); i++)
			{
				OrderPriority priority = radiologyPriorities.get(i);
				
				if (!priority.equals(OrderPriority.VARIOUS))
					row.getcolPriority().newRow(priority, priority.getText());
			}
		}
		
		if (clinical && clinicalPriorities != null)
		{
			for (int i = 0; i < clinicalPriorities.size(); i++)
			{
				OrderPriority priority = clinicalPriorities.get(i);
				
				if (!priority.equals(OrderPriority.VARIOUS))
					row.getcolPriority().newRow(priority, priority.getText());
			}
		}
	}

	private boolean isPrioritySet(OrderInvestigationVoCollection voCollOrderInvest)
	{
		boolean bPrioritiesSet = false;
		
		for (int i = 0; i < voCollOrderInvest.size();)
		{
			if (voCollOrderInvest.get(i).getOrderPriorityIsNotNull()) //WDEV-16875
			{
				bPrioritiesSet = voCollOrderInvest.get(i).getOrderPriorityIsNotNull();
				break;
			}
			else
				i++;
		}
		
		return bPrioritiesSet;
	}
	
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (updateOrderPriorities())
			engine.close(DialogResult.OK);
	}
	
	private boolean updateOrderPriorities()
	{
		String[] errors = validateOrderPrioritiesUI();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		form.getGlobalContext().OCRR.setOrderInvestigationCollection(populateOrderPrioritesFromScreen(form.getGlobalContext().OCRR.getOrderInvestigationCollection()));
		
		return true;
	}

	private String[] validateOrderPrioritiesUI()
	{
		boolean isPathologyOrderPriorityMandatory = ConfigFlag.UI.CATEGORIES_MANDATORY_ORDER_PRIORITY.getValue().equals(PATHOLOGY_PRIORITY_REQUIRED)
														|| ConfigFlag.UI.CATEGORIES_MANDATORY_ORDER_PRIORITY.getValue().equals(PATHOLOGY_AND_RADIOLOGY_REQUIRED);
		
		boolean isRadiologyOrderPriorityMandatory = ConfigFlag.UI.CATEGORIES_MANDATORY_ORDER_PRIORITY.getValue().equals(RADIOLOGY_PRIORITY_REQUIRED)
														|| ConfigFlag.UI.CATEGORIES_MANDATORY_ORDER_PRIORITY.getValue().equals(PATHOLOGY_AND_RADIOLOGY_REQUIRED);

		
		ArrayList<String> errors = new ArrayList<String>();
		
		for (int i = 0; i < form.grdOrderInvestigation().getAllRows().length; i++)
		{
			grdOrderInvestigationRow row = form.grdOrderInvestigation().getAllRows()[i];

			if (row.getcolComponent() != null && Category.PATHOLOGY.equals(row.getcolComponent().getCategory()) && isPathologyOrderPriorityMandatory)
			{
				if (row.getParentRow() != null && row.getParentRow().getcolPriority().getValue() == null)
					errors.add("Order Priority for Pathology investigations is mandatory.");
				
				if (row.getParentRow() == null && row.getcolPriority().getValue() == null)
					errors.add("Order Priority for Pathology investigations is mandatory.");
			}
			
			if (row.getcolComponent() != null && Category.CLINICALIMAGING.equals(row.getcolComponent().getCategory()) && isRadiologyOrderPriorityMandatory)
			{
				if (row.getParentRow() != null && row.getParentRow().getcolPriority().getValue() == null)
					errors.add("Order Priority for Radiology investigations is mandatory.");
				
				if (row.getParentRow() == null && row.getcolPriority().getValue() == null)
					errors.add("Order Priority for Radiology investigations is mandatory.");
			}
		}

		return errors.toArray(new String[errors.size()]);
	}

	private OrderInvestigationVoCollection populateOrderPrioritesFromScreen(OrderInvestigationVoCollection orderInvestigations)
	{
		if (orderInvestigations == null)
			orderInvestigations = new OrderInvestigationVoCollection();
		
		for (int i = 0; i < form.grdOrderInvestigation().getAllRows().length; i++)
		{
			grdOrderInvestigationRow row = form.grdOrderInvestigation().getAllRows()[i];
			
			if (row.getcolComponentValue() != null)
			{
				for (OrderInvestigationVo orderInvestigation : orderInvestigations)
				{
					if (row.getcolComponentValue().equals(orderInvestigation.getInvestigation()))
					{
						if (row.getParentRow() != null)
						{
							orderInvestigation.setOrderPriority((OrderPriority) row.getParentRow().getcolPriority().getValue());
						}
						else
							orderInvestigation.setOrderPriority((OrderPriority) row.getcolPriority().getValue());
					}
				}
			}
		}
		
		return orderInvestigations;
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
