//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.35 build 2098.27656)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.myorder;

import ims.admin.vo.SelectItemVo;
import ims.admin.vo.SelectItemVoCollection;
import ims.assessment.vo.PatientAssessmentAnswerVo;
import ims.assessment.vo.PatientAssessmentAnswerVoCollection;
import ims.RefMan.vo.OrderInvWithStatusApptVo;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.vo.SummaryClinicalInformationVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.helper.GenericInfoAdapter;
import ims.core.resource.people.vo.GpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.AnswerDetailsVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicLiteVo;
import ims.core.vo.ClinicLiteVoCollection;
import ims.core.vo.ClinicVo;
import ims.core.vo.ClinicalNotesLiteVoCollection;
import ims.core.vo.GeneralQuestionAnswerVo;
import ims.core.vo.GeneralQuestionAnswerVoCollection;
import ims.core.vo.GpShortVo;
import ims.core.vo.GpShortVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.LocationServiceVo;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffLiteVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.OutPatientListVo;
import ims.core.vo.PasEventShortVo;
import ims.core.vo.PatientShort;
import ims.core.vo.QuestionInformationShortVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceVo;
import ims.core.vo.enums.SelectItemType;
import ims.core.vo.lookups.ClinicalNoteType;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.Sex;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellOptions;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.ocrr.configuration.vo.InvestigationIndexRefVo;
import ims.ocrr.configuration.vo.InvestigationIndexRefVoCollection;
import ims.ocrr.configuration.vo.InvestigationRefVo;
import ims.ocrr.forms.myorder.GenForm.lyrDetailsLayer.tabGenDetailsContainer.grpPatientLocationEnumeration;
import ims.ocrr.forms.myorder.GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow;
import ims.ocrr.forms.myorder.GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRowCollection;
import ims.ocrr.forms.myorder.GenForm.lyrDetailsLayer.tabRadDetailsContainer.grdRadOrdersRow;
import ims.ocrr.helper.MyOrderQuestionsPopulation;
import ims.ocrr.helper.PhlebotomyHelper;
import ims.ocrr.orderingresults.vo.OcsOrderSessionRefVo;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVoCollection;
import ims.ocrr.orderingresults.vo.OrderSpecimenRefVoCollection;
import ims.ocrr.vo.CategoryQuestionAnswerVo;
import ims.ocrr.vo.InvestigationHelpTextVo;
import ims.ocrr.vo.InvestigationIndexLiteVo;
import ims.ocrr.vo.InvestigationIndexShortVo;
import ims.ocrr.vo.InvestigationQuestionAnswerVo;
import ims.ocrr.vo.InvestigationQuestionAnswerVoCollection;
import ims.ocrr.vo.InvestigationUnderSpecimenVo;
import ims.ocrr.vo.InvestigationUnderSpecimenVoCollection;
import ims.ocrr.vo.MyOrderChildComponentVo;
import ims.ocrr.vo.MyOrderChildComponentVoCollection;
import ims.ocrr.vo.MyOrderComponentVo;
import ims.ocrr.vo.MyOrderComponentVoCollection;
import ims.ocrr.vo.MyOrderInpatEpisVo;
import ims.ocrr.vo.MyOrderOutpatAttendVo;
import ims.ocrr.vo.OcsOrderVo;
import ims.ocrr.vo.OcsQASessionVo;
import ims.ocrr.vo.OcsReportToVo;
import ims.ocrr.vo.OcsReportToVoCollection;
import ims.ocrr.vo.OrderInvestigationBookingWithStatusVo;
import ims.ocrr.vo.OrderInvestigationForStatusChangeVo;
import ims.ocrr.vo.OrderInvestigationLiteVo;
import ims.ocrr.vo.OrderInvestigationVo;
import ims.ocrr.vo.OrderInvestigationVoCollection;
import ims.ocrr.vo.OrderSpecimenContainerVo;
import ims.ocrr.vo.OrderSpecimenContainerVoCollection;
import ims.ocrr.vo.OrderSpecimenVo;
import ims.ocrr.vo.OrderSpecimenVoCollection;
import ims.ocrr.vo.OrderedInvestigationStatusVo;
import ims.ocrr.vo.OrderedInvestigationStatusVoCollection;
import ims.ocrr.vo.PathInvDetailsVo;
import ims.ocrr.vo.PhlebotomyRoundShortVoCollection;
import ims.ocrr.vo.SelectedComponentFromSelectOrderVo;
import ims.ocrr.vo.ServiceQuestionAnswerVo;
import ims.ocrr.vo.SpecimenCollectionListConfigDetailsVoCollection;
import ims.ocrr.vo.SpecimenContainerVo;
import ims.ocrr.vo.SpecimenVo;
import ims.ocrr.vo.SpecimenWorkListItemVo;
import ims.ocrr.vo.SpecimenWorkListItemVoCollection;
import ims.ocrr.vo.enums.ORDERSTATE;
import ims.ocrr.vo.lookups.AuthorisationOrderStatus;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.CategoryCollection;
import ims.ocrr.vo.lookups.HelpTextCategory;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.InvestigationStatusChangeReason;
import ims.ocrr.vo.lookups.LookupHelper;
import ims.ocrr.vo.lookups.OcsDisplayFlag;
import ims.ocrr.vo.lookups.OrderCategory;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.ocrr.vo.lookups.OrderPriority;
import ims.ocrr.vo.lookups.OrderPriorityCollection;
import ims.ocrr.vo.lookups.OutPatientDuration;
import ims.ocrr.vo.lookups.OutPatientDurationCollection;
import ims.ocrr.vo.lookups.ReportToType;
import ims.ocrr.vo.lookups.SelectAndOrderComponentType;
import ims.ocrr.vo.lookups.SpecimenCollectionMethod;
import ims.ocrr.vo.lookups.SpecimenCollectionMethodCollection;
import ims.ocrr.vo.lookups.SpecimenCollectionStatus;
import ims.ocrr.vo.lookups.SpecimenCollectionTime;
import ims.ocrr.vo.lookups.SpecimenCollectionTimeCollection;
import ims.ocrr.vo.lookups.SpecimenCollectionType;
import ims.ocrr.vo.lookups.SpecimenCollectionTypeCollection;
import ims.ocrr.vo.lookups.SpecimenSite;
import ims.ocrr.vo.lookups.SpecimenSiteCollection;
import ims.ocrr.vo.lookups.SpecimenType;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.ValueObject;
import ims.vo.interfaces.IGenericItemInfo;
import ims.vo.interfaces.IGenericItemType;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{

	private static final Integer DISCIPLINE_COLUMN = new Integer(0);
	private static final Integer SPECIMENTYPE_COLUMN = new Integer(1);
	private static final Integer INSTRUCTIONS_LABEL_COLUMN = new Integer(2);
	private static final Integer INSTRUCTIONS_COLUMN = new Integer(3);
	private static final Integer QTY_COLUMN = new Integer(4);
	private static final Integer PATTYPE_COLUMN = new Integer(5);
	private static final Integer DYN_COLDATE = new Integer(6);
	private static final Integer DYN_COLTIME = new Integer(7);
	private static final Integer DYN_COLAT = new Integer(8);
	private static final Integer DYN_COLDURATION = new Integer(9);
	private static final Integer REPORTTO_COLUMN = new Integer(0);
	private static final Integer WARDOUTPAT_COLUMN = new Integer(1);
	private static final Integer ADDRESS_COLUMN = new Integer(2);
	private static final int GRID_NOW = 0;
	private static final int GRID_PHLEB_OUTPAT = 1;
	private static final int GRID_PHLEB_INPAT = 2;
	private static final int GRID_PATIENT = 3;
	private static final int GRID_OTHER = 4;
	private static final int GRID_ALREADY = 5;

	private static final int TABCLINICAL = 10;
	private static final int TABRAD = 20;
	private static final int TABREQUESTED = 30;


	private static final String PATHOLOGY_PRIORITY_REQUIRED = "Pathology";
	private static final String RADIOLOGY_PRIORITY_REQUIRED = "ClinicalImaging";
	private static final String PATHOLOGY_AND_RADIOLOGY_REQUIRED = "ClinicalImagingAndPathology";
	
	private static final String HIDE_CLINIC_STRING = "Outpatient Department - Hide Clinic";

	private static final String CARE_UK_UI_ORDER = "CARE_UK";

	
	//---------------------------------------------------------------------------------------------------------------------------------------------
	// Event Handlers Region
	//---------------------------------------------------------------------------------------------------------------------------------------------

	protected void onFormOpen() throws PresentationLogicException
	{
		initialize();

		// WDEV-13999
		if (CARE_UK_UI_ORDER.equals(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue()) && form.getGlobalContext().OCRR.getOrderInvestigationToAmendIsNotNull())
		{
			form.getLocalContext().setInvestigationToAmend(domain.getOcsOrder(form.getGlobalContext().OCRR.getOrderInvestigationToAmend().getOrderDetails()));
			populateOrderToAmendsValues(form.getGlobalContext().OCRR.getOrderInvestigationToAmend(), form.getLocalContext().getInvestigationToAmend());
		}
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().OCRR.OrderPriorityDialog) && result.equals(DialogResult.OK))
		{
			setOrderPriorityInGrid();
		}
		else if (formName.equals(form.getForms().OCRR.SelectAndOrderDialog) && result.equals(DialogResult.OK))
		{
			// clear out the optional alternative containers selected
			form.getGlobalContext().OCRR.setMyOrderPotentialSpecimens(null);
			form.getGlobalContext().OCRR.setReWrittenOrderInvestigations(null);

			boolean selectionChanged = loadComponentsAndQuestions();

			// WDEV-16665
			OcsOrderVo orderAwaitingAuthorization = domain.getOcsOrder(form.getGlobalContext().OCRR.getOrderAwaitingAuthorisation());
			if (orderAwaitingAuthorization != null)
			{
				defaultSpecimenSite();
				addSites(orderAwaitingAuthorization);
				populateCollectionType(orderAwaitingAuthorization);
			}
			
			form.getLocalContext().setTestRowBeingModified(null);
			if (selectionChanged)
			{
				form.lyrDetails().tabGenDetails().setHeaderVisible(false);
				form.lyrDetails().tabPathDetails().setHeaderVisible(false);
				form.btnOrder().setEnabled(false);
			}
			
			form.treeComponents().clearSelection();
			
			setOrderButtonText();
			updateControlsState();
		}
		else if (formName.equals(form.getForms().OCRR.SelectAndOrderDialog) && result.equals(DialogResult.CANCEL))
		{
			form.getGlobalContext().OCRR.setMyOrderComponents(form.getLocalContext().getOrderComponentsRestorePoint());
			
			loadComponentsAndQuestions();
			
			updateControlsState();
		}
		else if (formName.equals(form.getForms().Core.SelectItems) && result.equals(DialogResult.OK))
		{
			populateSelectedItems();
			
			form.getLocalContext().setTestRowBeingModified(null);
		}
		else if (formName.equals(form.getForms().OCRR.PrintOrder))
		{
			// automatic printing occurred now launch the dialog again with the
			// available options
			if (form.getGlobalContext().OCRR.PrintOrder.getExecuteAutomaticPrintIsNotNull() && form.getGlobalContext().OCRR.PrintOrder.getExecuteAutomaticPrint().booleanValue())
			{
				form.getGlobalContext().OCRR.PrintOrder.setExecuteAutomaticPrint(Boolean.FALSE);
				engine.open(form.getForms().OCRR.PrintOrder);
				return;
			}

			engine.showMessage("Order placed successfully");

			if (engine.isDialog() == false)
			{
				if (ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
					engine.open(form.getForms().Core.Demographics);
				else
					engine.open(form.getForms().OCRR.SelectandOrder);
			}
			else
				engine.close(DialogResult.OK);

		}
		else if (formName.equals(form.getForms().OCRR.ChooseAlternativeContainersDialog))
		{
			if (result.equals(DialogResult.OK))
				updateInvestigationsGridAndRecalculateContainers();
			else if (result.equals(DialogResult.CANCEL))
			{
				if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getRows().size() > 0)
					onBtnApplyOtherClick();

				showInvestigationTooltipsAtSpecimenLevel();
				showNextTabAndDisableCurrent();
				enableOrdering();
			}
		}
	}


	@Override
	protected void onBtnSummaryClinicalInfoNextClick() throws PresentationLogicException
	{
		showNextTabAndDisableCurrent();
		
		defaultOrderPriority();
	}

	@Override
	protected void onBtnSummaryClinicalInfoPreviousClick() throws PresentationLogicException
	{
		showPreviousTabAndHideCurrent();
	}

	/**
	 * WDEV-13999 Event handler for query combo-box 'Responsible HCP' (on Clinical Details tab) text submitted
	 */
	protected void onQmbResponsibleHCPTextSubmited(String value) throws PresentationLogicException
	{
		populateResponsibleHCP(domain.listHcpLiteByName(value));
	}

	/**
	 * WDEV-13999 Event handler for query combo-box 'Ordering HCP' (on Clinical Details tab) text submitted
	 */
	protected void onQmbOrderingHCPTextSubmited(String value) throws PresentationLogicException
	{
		populateOrderingHCP(domain.listHcpLiteByName(value));
	}

	/**
	 * WDEV-13999 Function used to populate order to amend values to screen
	 * 
	 * @param investigation
	 * @throws PresentationLogicException
	 */
	private void populateOrderToAmendsValues(OrderInvestigationLiteVo investigation, OcsOrderVo orderToAmendDetails) throws PresentationLogicException
	{
		if (orderToAmendDetails == null)
			return;

		// Copy & default in 'Responsible HCP' from order to amend
		form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().clear();
		form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().newRow(orderToAmendDetails.getResponsibleClinician(), orderToAmendDetails.getResponsibleClinician().toString());
		form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().setValue(orderToAmendDetails.getResponsibleClinician());

		// Copy 'Ordering HCP'
		form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().clear();

		HcpLiteVo orderingHCP = domain.getHCPbyMoS(orderToAmendDetails.getOrderedBy());

		if (orderingHCP != null) // Old orders might not have this fields filled in
		{
			form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().newRow(orderingHCP, orderingHCP.toString());
			form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().setValue(orderingHCP);
		}

		if (investigation == null)
			return;
		
		InvestigationQuestionAnswerVoCollection investigationQuestions = null;
		GeneralQuestionAnswerVoCollection serviceQuestions = null;
		GeneralQuestionAnswerVoCollection categoryQuestions = null;
		
		// Set Questions & Answers values
		// Get the questions for investigation (domain call and populate appropriate answer values)
		investigationQuestions = domain.getInvestigationQuestionsAnswers(investigation.getInvestigation(), orderToAmendDetails);
		
		// Avoid a null pointer condition - this should be true under correctly configured data
		if (investigation.getInvestigationIsNotNull() && investigation.getInvestigation().getProviderServiceIsNotNull() && investigation.getInvestigation().getProviderService().getLocationServiceIsNotNull())
		{
			serviceQuestions = domain.getServiceQuestionsAnswers(orderToAmendDetails, investigation.getInvestigation().getProviderService().getLocationService().getService());
		}
		
		// Avoid a null pointer condition - this should be true under correctly configured data
		if (investigation.getInvestigationIsNotNull() && investigation.getInvestigation().getProviderServiceIsNotNull() && investigation.getInvestigation().getProviderService().getProviderSystemIsNotNull())
		{
			categoryQuestions = domain.getCategoryQuestionsAnswers(orderToAmendDetails, investigation.getInvestigation().getProviderService().getProviderSystem().getCategory());
		}
		
		populateAnswerValuesToScreen(investigationQuestions, serviceQuestions, categoryQuestions);

		// Set 'Additional Information'
		form.lyrDetails().tabClinicalNotes().txtAdditionalNotes().setValue(orderToAmendDetails.getAdditClinNotes());

		// Set Patient Mobility
		form.lyrDetails().tabRadDetails().cmbPatMobility().setValue(orderToAmendDetails.getPatMobility());
	}

	/**
	 * WDEV-13999 Function used to populate answer to questions
	 */
	private void populateAnswerValuesToScreen(InvestigationQuestionAnswerVoCollection investigationQA, GeneralQuestionAnswerVoCollection serviceQA, GeneralQuestionAnswerVoCollection categoryQA) throws PresentationLogicException
	{
		// If there are no components to the order then do not populate the questions
		if (!form.getGlobalContext().OCRR.getMyOrderComponentsIsNotNull())
			return;

		// Order questions population utility class
		MyOrderQuestionsPopulation questionsPopulation = getMyOrderQuestionPopulationHelperFactory();

		// Order questions
		OcsQASessionVo voOcsQASession = form.getGlobalContext().OCRR.getMyOrderQuestions();
		
		// If order doesn't have any question terminate the function
		if (voOcsQASession == null || !voOcsQASession.getCategoryQuestionAnswersIsNotNull())
			return;
		
		for (CategoryQuestionAnswerVo categoryQuestions : voOcsQASession.getCategoryQuestionAnswers())
		{
			// Fill in category answers
			if (categoryQuestions.getCategoryQuestionAnswersIsNotNull())
			{
				for (GeneralQuestionAnswerVo generalQuestion : categoryQuestions.getCategoryQuestionAnswers())
				{
					PatientAssessmentAnswerVoCollection patientAnswer = getPatientAnswers(categoryQA, generalQuestion.getQuestion());

					amendAsnwers(generalQuestion, patientAnswer);
				}
			}
			
			// Fill in service & investigation answers (this is a two level BO)
			if (categoryQuestions.getServiceQuestionAnswersIsNotNull())
			{
				for (ServiceQuestionAnswerVo serviceQuestions : categoryQuestions.getServiceQuestionAnswers())
				{
					// Fill in service answers
					if (serviceQuestions.getServiceQuestionAnswersIsNotNull())
					{
						for (GeneralQuestionAnswerVo generalQuestion : serviceQuestions.getServiceQuestionAnswers())
						{
							PatientAssessmentAnswerVoCollection patientAnswer = getPatientAnswers(serviceQA, generalQuestion.getQuestion());
							
							amendAsnwers(generalQuestion, patientAnswer);
						}
					}
					
					// Fill in investigation answers
					if (serviceQuestions.getInvestigationQuestionAnswersIsNotNull())
					{
						for (InvestigationQuestionAnswerVo investigationQuestion : serviceQuestions.getInvestigationQuestionAnswers())
						{
							if (investigationQuestion.getInvestigationQuestionAnswersIsNotNull())
							{
								for (GeneralQuestionAnswerVo generalQuestion : investigationQuestion.getInvestigationQuestionAnswers())
								{
									PatientAssessmentAnswerVoCollection patientAnswer = getPatientAnswers(investigationQA, generalQuestion.getQuestion());

									amendAsnwers(generalQuestion, patientAnswer);
								}

							}
						}
					}
				}
			}
			
			// Fill in investigation answers
			if (categoryQuestions.getClinicalInvestigationQuestionAnswersIsNotNull())
			{
				for (InvestigationQuestionAnswerVo investigationQuestion : categoryQuestions.getClinicalInvestigationQuestionAnswers())
				{
					if (investigationQuestion.getInvestigationQuestionAnswersIsNotNull())
					{
						for (GeneralQuestionAnswerVo generalQuestion : investigationQuestion.getInvestigationQuestionAnswers())
						{
							PatientAssessmentAnswerVoCollection patientAnswer = getPatientAnswers(investigationQA, generalQuestion.getQuestion());

							amendAsnwers(generalQuestion, patientAnswer);
						}
					}
				}
			}
		}

		questionsPopulation.populate(voOcsQASession);
	}

	private void amendAsnwers(GeneralQuestionAnswerVo generalQuestion, PatientAssessmentAnswerVoCollection patientAnswer)
	{
		if (generalQuestion == null)
			return;
		
		if (patientAnswer != null)
		{
			if (generalQuestion.getPatientAnswers() == null)
				generalQuestion.setPatientAnswers(new PatientAssessmentAnswerVoCollection());

			for (PatientAssessmentAnswerVo originalAnswer : patientAnswer)
			{
				PatientAssessmentAnswerVo answer = (PatientAssessmentAnswerVo) originalAnswer.clone();

				answer.setID_PatientAssessmentAnswer(null);
				answer.setAuthoringInfo(null);
				answer.setConfirmingInfo(null);

				if (answer.getAnswerDetailsIsNotNull())
				{
					for (AnswerDetailsVo answerDetails : answer.getAnswerDetails())
					{
						answerDetails.setID_PatientAnswerDetails(null);
					}
				}

				generalQuestion.getPatientAnswers().add(answer);
			}
		}
	}

	private PatientAssessmentAnswerVoCollection getPatientAnswers(GeneralQuestionAnswerVoCollection categoryQA, QuestionInformationShortVo question)
	{
		if (categoryQA == null || categoryQA.size() == 0)
			return null;
		
		if (question == null)
			return null;
		
		for (GeneralQuestionAnswerVo answer : categoryQA)
		{
			if (question.equals(answer.getQuestion()))
				return answer.getPatientAnswers(); 
		}
		
		return null;
	}

	private PatientAssessmentAnswerVoCollection getPatientAnswers(InvestigationQuestionAnswerVoCollection questions, QuestionInformationShortVo question)
	{
		if (questions == null || questions.size() == 0)
			return null;

		if (question == null)
			return null;

		for (InvestigationQuestionAnswerVo investigationQuestion : questions)
		{
			if (investigationQuestion.getInvestigationQuestionAnswersIsNotNull())
			{
				for (GeneralQuestionAnswerVo answer : investigationQuestion.getInvestigationQuestionAnswers())
				{
					if (question.equals(answer.getQuestion()))
						return answer.getPatientAnswers();
				}
			}
		}

		return null;
	}

	/**
	 * WDEV-13999 Function used to populate HCPs to 'Responsible HCP' query combo-box (on Clinical Details tab)
	 */
	private void populateResponsibleHCP(HcpLiteVoCollection hcpCollection)
	{
		// Clear 'Responsible HCP' query combo-box
		form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().clear();

		// If HCP collection is null end function
		if (hcpCollection == null)
			return;

		// Add each HCP to query combo box
		for (HcpLiteVo hcp : hcpCollection)
		{
			form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().newRow(hcp, hcp.toString());
		}

		// Default in single values or expand if none or more than one HCP is in the collection
		if (hcpCollection.size() == 1)
		{
			form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().setValue(hcpCollection.get(0));
		}
		else
		{
			form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().showOpened();
		}
	}

	/**
	 * WDEV-13999 Function used to populate HCPs to 'Ordering HCP' query combo-box (on Clinical Details tab)
	 */
	private void populateOrderingHCP(HcpLiteVoCollection hcpCollection)
	{
		// Clear 'Ordering HCP' query combo-box
		form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().clear();

		// If HCP collection is null end the function
		if (hcpCollection == null)
			return;

		// Add each HCP to query combo box
		for (HcpLiteVo hcp : hcpCollection)
		{
			form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().newRow(hcp, hcp.toString());
		}

		// Default in single values or expand if none or more than one HCP is in the collection
		if (hcpCollection.size() == 1)
		{
			form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().setValue(hcpCollection.get(0));
		}
		else
		{
			form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().showOpened();
		}
	}

	private void updateInvestigationsGridAndRecalculateContainers()
	{
		// this takes the modified investigations from container choice dialog and repopulates the grid and does container calculation again
		if (form.getGlobalContext().OCRR.getReWrittenOrderInvestigationsIsNotNull())
		{
			OrderInvestigationVoCollection voCollRewrittenOrderInv = form.getGlobalContext().OCRR.getReWrittenOrderInvestigations();

			for (int i = 0; i < form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().size(); i++)
			{
				grdTestRow row = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().get(i);
				if (voCollRewrittenOrderInv.contains(row.getValue()))
					row.setValue(voCollRewrittenOrderInv.get(voCollRewrittenOrderInv.indexOf(row.getValue())));

				for (int p = 0; p < row.getRows().size(); p++)
				{
					grdTestRow cRow = row.getRows().get(p);
					if (voCollRewrittenOrderInv.contains(cRow.getValue()))
						cRow.setValue(voCollRewrittenOrderInv.get(voCollRewrittenOrderInv.indexOf(cRow.getValue())));
				}
			}
		}

		try
		{
			form.getGlobalContext().OCRR.setMyOrderPotentialSpecimens(null);
			btnGenerateSpecimensClick(-1);
		}
		catch (PresentationLogicException e)
		{
			e.printStackTrace();
		}
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		form.getGlobalContext().OCRR.setMyOrderQuestions(null);
		form.setMode(FormMode.VIEW);
		if (!engine.isDialog())
			engine.open(form.getLocalContext().getPreviousForm());
		else
			engine.close(DialogResult.CANCEL);
	}

	protected void onQmbOrderedByTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrDetails().tabGenDetails().qmbOrderedBy().clear();
		if (value == null || value.equals(""))
		{
			engine.showMessage("Please enter at least one character to search on");
			return;
		}

		MemberOfStaffLiteVoCollection voCollMos = domain.listActiveMosByName(value);
		if (voCollMos != null && voCollMos.size() > 0)
		{
			for (int i = 0; i < voCollMos.size(); i++)
			{
				form.lyrDetails().tabGenDetails().qmbOrderedBy().newRow(voCollMos.get(i), voCollMos.get(i).getName().toString());
			}
			if (voCollMos.size() == 1)
			{
				form.lyrDetails().tabGenDetails().qmbOrderedBy().setValue(voCollMos.get(0));
			}
			else if (voCollMos.size() > 1)
				form.lyrDetails().tabGenDetails().qmbOrderedBy().showOpened();
		}
		else
			engine.showMessage("No matching records found");
	}

	protected void onQmbClinicianTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrDetails().tabGenDetails().qmbClinician().clear();
		if (value == null || value.equals(""))
		{
			engine.showMessage("Please enter at least one character to search on");
			return;
		}

		HcpLiteVoCollection voCollHcp = null;
		
		if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CCO"))
		{
			voCollHcp = domain.listResponsibleMedicsByName(value);
		}
		else if (isEdLocation()) //WDEV-15899
		{
			voCollHcp = domain.listResponsibleEdClinicians(value);
		}
		else
			voCollHcp = domain.listHcpLiteByName(value);

		if (voCollHcp != null && voCollHcp.size() > 0)
		{
			voCollHcp.sort();
			for (int i = 0; i < voCollHcp.size(); i++)
			{
				form.lyrDetails().tabGenDetails().qmbClinician().newRow(voCollHcp.get(i), voCollHcp.get(i).getMos().getName().toString());
			}
			if (voCollHcp.size() == 1)
				form.lyrDetails().tabGenDetails().qmbClinician().setValue(voCollHcp.get(0));
			else if (voCollHcp.size() > 1)
				form.lyrDetails().tabGenDetails().qmbClinician().showOpened();
		}
		else
			engine.showMessage("No matching records found");
	}

	private boolean isEdLocation()
	{
		LocationLiteVo loc = null;
		LocSiteLiteVo locsite = null;
		ILocation currentLocation = domain.getCurrentLocation();

		if (currentLocation instanceof LocationLiteVo)
		{
			loc = (LocationLiteVo) currentLocation;

		}
		else if (currentLocation instanceof LocSiteLiteVo)
		{
			locsite = (LocSiteLiteVo) currentLocation;
			if (locsite != null)
			{
				loc = new LocationLiteVo(locsite.getID_Location(), locsite.getVersion_Location());
				LocSiteShortVo locShortVo = domain.getTypeOfLocSite(loc);
				loc.setType(locShortVo.getType());
			}
		}

		if (loc != null && loc.getTypeIsNotNull() && loc.getType().equals(LocationType.ANE))
			return true;
		else
			return false;
	}

	protected void onQmbLocationTextSubmited(String value) throws PresentationLogicException
	{
		qmbLocationTextSubmitted(value, false);
	}

	private void qmbLocationTextSubmitted(String value, boolean userCalled)
	{
		if (form.lyrDetails().tabGenDetails().cmbHospital().getValue() == null)
		{
			engine.showMessage("Please select a Hospital");
			return;
		}

		if (form.lyrDetails().tabGenDetails().grpPatientLocation().getValue().equals(GenForm.lyrDetailsLayer.tabGenDetailsContainer.grpPatientLocationEnumeration.None))
		{
			engine.showMessage("Please Ward,Clinic,A&E or Other");
			return;
		}

		form.lyrDetails().tabGenDetails().qmbLocation().clear();
		LocationLiteVoCollection voCollLocLite = null;
		if (form.lyrDetails().tabGenDetails().grpPatientLocation().getValue().equals(GenForm.lyrDetailsLayer.tabGenDetailsContainer.grpPatientLocationEnumeration.rdoWard))
		{
			voCollLocLite = domain.listWardsForHospitalByNameLite(getLocationRef(form.lyrDetails().tabGenDetails().cmbHospital().getValue()), value);
		}
		else if (form.lyrDetails().tabGenDetails().grpPatientLocation().getValue().equals(GenForm.lyrDetailsLayer.tabGenDetailsContainer.grpPatientLocationEnumeration.rdoAandE))
		{
			voCollLocLite = domain.listAandEForHospitalByNameLite(getLocationRef(form.lyrDetails().tabGenDetails().cmbHospital().getValue()), value);
		}
		else if (form.lyrDetails().tabGenDetails().grpPatientLocation().getValue().equals(GenForm.lyrDetailsLayer.tabGenDetailsContainer.grpPatientLocationEnumeration.rdoOther))
		{
			voCollLocLite = domain.listUserEnteredLocationsForHospitalByNameLite(getLocationRef(form.lyrDetails().tabGenDetails().cmbHospital().getValue()), value);
		}
		else if (form.lyrDetails().tabGenDetails().grpPatientLocation().getValue().equals(GenForm.lyrDetailsLayer.tabGenDetailsContainer.grpPatientLocationEnumeration.rdoClinic))
		{
			ClinicLiteVoCollection clinicColl = domain.listClinicsForHospitalByNameLite(getLocationRef(form.lyrDetails().tabGenDetails().cmbHospital().getValue()), value);
			if (clinicColl != null && clinicColl.size() > 0)
			{
				for (int i = 0; i < clinicColl.size(); i++)
				{
					form.lyrDetails().tabGenDetails().qmbLocation().newRow(clinicColl.get(i), clinicColl.get(i).getClinicName());
				}
				if (clinicColl.size() > 1 && !userCalled)
					form.lyrDetails().tabGenDetails().qmbLocation().showOpened();
				else if (clinicColl.size() == 1)
				{
					form.lyrDetails().tabGenDetails().qmbLocation().setValue(clinicColl.get(0));

					// WDEV-12854
					// Set default Outpatient Department
					loadOutpatientDepartment();
					setDepartmentValue();
				}
			}
			else
				engine.showMessage("No matching records found");

			return;
		}

		if (voCollLocLite != null && voCollLocLite.size() > 0)
		{
			for (int i = 0; i < voCollLocLite.size(); i++)
			{
				form.lyrDetails().tabGenDetails().qmbLocation().newRow(voCollLocLite.get(i), voCollLocLite.get(i).getName().toString());
			}
			if (voCollLocLite.size() == 1)
				form.lyrDetails().tabGenDetails().qmbLocation().setValue(voCollLocLite.get(0));
			else if (voCollLocLite.size() > 1 && !userCalled)
				form.lyrDetails().tabGenDetails().qmbLocation().showOpened();
		}
		else
			engine.showMessage("No matching records found");
	}

	private LocationRefVo getLocationRef(ILocation value)
	{
		if (value == null)
			return null;

		LocationRefVo voLocRef = new LocationRefVo();
		voLocRef.setID_Location(value.getID());

		return voLocRef;
	}

	protected void onChkPrintLocalValueChanged() throws PresentationLogicException
	{
		if (form.lyrDetails().tabRadDetails().chkPrintLocal().getValue())
			engine.open(form.getForms().Core.SelectItems, "Print Locally");
		else
		{
			prePopulateRadPrintItems();
		}
	}

	private boolean btnContinueClinicalClick(int tab)
	{
		if (validateTab(tab))
			showNextTabAndDisableCurrent();
		else
			return false;

		return true;
	}

	protected void onBtnPreviousRadClick() throws PresentationLogicException
	{
		showPreviousTabAndHideCurrent();
	}

	protected void onBtnPreviousPathologyClick() throws PresentationLogicException
	{
		if (form.getGlobalContext().OCRR.getReWrittenOrderInvestigationsIsNotNull())
		{
			// clear out the optional alternative containers selected
			form.getGlobalContext().OCRR.setMyOrderPotentialSpecimens(null);
			form.getGlobalContext().OCRR.setReWrittenOrderInvestigations(null);
			form.getGlobalContext().OCRR.setOrderInvestigationCollection(form.getLocalContext().getOriginalOrderInvestigationCollection());
			
			// reload the configuratiion from Select And Order
			loadRequestedTestGrid();

			// clear combo
			form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().cmbRequestedType().setValue(null);
		}

		showPreviousTabAndHideCurrent();
	}

	protected void onBtnContinueRadClick() throws PresentationLogicException
	{
		btnContinueRadClick(TABRAD);
	}

	private boolean btnContinueRadClick(int tab)
	{
		if (validateTab(tab))
			showNextTabAndDisableCurrent();
		else
			return false;

		return true;
	}

	protected void onBtnPreviousGeneralClick() throws PresentationLogicException
	{
		showPreviousTabAndHideCurrent();
	}

	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		form.lyrDetails().tabGenDetails().qmbLocation().clear();

		// WDEV-11915
		loadOutpatientDepartment();

		// WDEV-13890
		if (grpPatientLocationEnumeration.rdoAandE.equals(form.lyrDetails().tabGenDetails().grpPatientLocation().getValue()))
		{
			defaultInTheEmergencyDepartment(form.lyrDetails().tabGenDetails().cmbHospital().getValue());
		}
	}

	// WDEV-11915
	private void loadOutpatientDepartment()
	{
		form.lyrDetails().tabGenDetails().cmbDepartment().clear();

		LocationRefVo hospital = getLocationRef(form.lyrDetails().tabGenDetails().cmbHospital().getValue());

		if (hospital == null)
			return;

		LocationLiteVoCollection departments = domain.listActiveOutpatientDepartment(hospital);

		for (int i = 0; i < departments.size(); i++)
		{
			LocationLiteVo department = departments.get(i);

			if (department == null)
				continue;

			form.lyrDetails().tabGenDetails().cmbDepartment().newRow(department, department.getIItemText());
		}

		if (departments.size() == 1)
		{
			form.lyrDetails().tabGenDetails().cmbDepartment().setValue(departments.get(0));
		}
	}

	protected void onGrdTestGridButtonClicked(int column, grdTestRow row) throws PresentationLogicException
	{
		if (row.getValue() != null)
			displaySiteSelection(row);
	}

	protected void onBtnSitesClick() throws PresentationLogicException
	{
		displaySiteSelection(null);
	}

	protected void onRadioButtongrpPatientLocationValueChanged() throws PresentationLogicException
	{
		form.lyrDetails().tabGenDetails().qmbLocation().clear();

		// WDEV-11915 - starts here
		if (grpPatientLocationEnumeration.rdoClinic.equals(form.lyrDetails().tabGenDetails().grpPatientLocation().getValue()))
		{
			loadOutpatientDepartment();
		}

		// WDEV-13890
		if (grpPatientLocationEnumeration.rdoAandE.equals(form.lyrDetails().tabGenDetails().grpPatientLocation().getValue()))
		{
			defaultInTheEmergencyDepartment(form.lyrDetails().tabGenDetails().cmbHospital().getValue());
		}

		updateControlsState();
		// WDEV-11915 - ends here
	}

	private void defaultInTheEmergencyDepartment(ILocation value)
	{
		if (value == null)
			return;

		LocationLiteVoCollection emergencyDepartments = domain.listAandEForHospitalByNameLite((LocationRefVo) value, null);

		if (emergencyDepartments == null)
			return;

		for (LocationLiteVo emergencyDepartment : emergencyDepartments)
		{
			form.lyrDetails().tabGenDetails().qmbLocation().newRow(emergencyDepartment, emergencyDepartment.getName());
		}

		if (emergencyDepartments.size() == 1)
		{
			form.lyrDetails().tabGenDetails().qmbLocation().setValue(emergencyDepartments.get(0));
		}
	}

	protected void onDyngrdReportToRowSelectionChanged(DynamicGridRow row)
	{
		form.getContextMenus().getOCRRMyOrderReportToRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyrDetails().tabGenDetails().dyngrdReportTo().getSelectedRow() != null);
	}

	protected void onDyngrdReportToCellTextSubmited(DynamicGridCell cell)
	{
		cell.getItems().clear();

		if (cell.getTypedText() == null || cell.getTypedText().equals(""))
		{
			engine.showMessage("Please enter at least one character to search on.");
			return;
		}

		if (cell.getIdentifier() != null && cell.getIdentifier().equals(MemberOfStaffRefVo.class))
		{
			MemberOfStaffShortVoCollection voCollMos = domain.listMos(cell.getTypedText());
			if (voCollMos != null && voCollMos.size() > 0)
			{
				voCollMos.sort();
				for (int i = 0; i < voCollMos.size(); i++)
				{
					cell.getItems().newItem(voCollMos.get(i), voCollMos.get(i).toString());
				}
				if (voCollMos.size() == 1)
				{
					cell.setValue(voCollMos.get(0));
					onDyngrdReportToCellValueChanged(cell);
				}
				else if (voCollMos.size() > 1)
					cell.showOpened();
			}
			else
				engine.showMessage("No matching records found");
		}
		else if (cell.getIdentifier() != null && (cell.getIdentifier().equals(LocationType.WARD) || (cell.getIdentifier().equals(LocationType.OUTPATIENT_DEPT))))
		{
			LocShortVoCollection voCollLocations = null;

			DynamicGridCell cellHosp = cell.getRow().getCells().get(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(REPORTTO_COLUMN));
			if (cell.getIdentifier().equals(LocationType.WARD))
				voCollLocations = domain.listWardsForHospitalByNameShort((LocationRefVo) cellHosp.getValue(), cell.getTypedText());
			else if (cell.getIdentifier().equals(LocationType.OUTPATIENT_DEPT))
				voCollLocations = domain.listOutpatDeptsForHospitalByNameShort((LocationRefVo) cellHosp.getValue(), cell.getTypedText());

			if (voCollLocations != null && voCollLocations.size() > 0)
			{
				voCollLocations.sort();
				for (int i = 0; i < voCollLocations.size(); i++)
				{
					cell.getItems().newItem(voCollLocations.get(i), voCollLocations.get(i).toString());
				}
				if (voCollLocations.size() == 1)
				{
					cell.setValue(voCollLocations.get(0));
					onDyngrdReportToCellValueChanged(cell);
				}
				else if (voCollLocations.size() > 1)
					cell.showOpened();
			}
			else
				engine.showMessage("No matching locations found");
		}
		else
		{
			GpShortVoCollection voCollGps = domain.listGPsBySurname(cell.getTypedText());
			if (voCollGps != null && voCollGps.size() > 0)
			{
				voCollGps.sort();
				for (int i = 0; i < voCollGps.size(); i++)
				{
					cell.getItems().newItem(voCollGps.get(i), voCollGps.get(i).toString());
				}
				if (voCollGps.size() == 1)
				{
					cell.setValue(voCollGps.get(0));
					onDyngrdReportToCellValueChanged(cell);
				}
				else if (voCollGps.size() > 1)
					cell.showOpened();
			}
			else
				engine.showMessage("No matching records found");
		}
	}

	protected void onDyngrdReportToCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getIdentifier() != null)
		{
			DynamicGridRow row = cell.getRow();
			DynamicGridCell cellAddress = row.getCells().get(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(ADDRESS_COLUMN));
			DynamicGridCell cellWardClinic = row.getCells().get(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(WARDOUTPAT_COLUMN));

			if (cell.getIdentifier().equals(MemberOfStaffRefVo.class))
			{
				MemberOfStaffShortVo voMos = ((MemberOfStaffShortVo) cell.getValue());

				if (voMos != null && voMos.getPrimaryLocationIsNotNull() && voMos.getPrimaryLocation().getAddressIsNotNull())
				{
					cellAddress.setValue(((MemberOfStaffShortVo) cell.getValue()).getPrimaryLocation().getAddress().toDisplayString());
					cellAddress.setTooltip(((MemberOfStaffShortVo) cell.getValue()).getPrimaryLocation().getAddress().toDisplayString());
				}
				else
				{
					cellAddress.setValue(null);
					cellAddress.setTooltip(null);
				}
			}
			else if (cell.getIdentifier().equals(GpRefVo.class))
			{
				GpShortVo voGp = ((GpShortVo) cell.getValue());

				if (voGp != null && voGp.getPracticesIsNotNull() && voGp.getPractices().size() > 0 && voGp.getPractices().get(0).getPracticeIsNotNull() && voGp.getPractices().get(0).getPractice().getAddressIsNotNull())
				{
					cellAddress.setValue(((GpShortVo) cell.getValue()).getPractices().get(0).getPractice().getAddress().toDisplayString());
					cellAddress.setTooltip(((GpShortVo) cell.getValue()).getPractices().get(0).getPractice().getAddress().toDisplayString());
				}
				else
				{
					cellAddress.setValue(null);
					cellAddress.setTooltip(null);
				}
			}
			else if (cell.getIdentifier().equals(LocationType.HOSP) && cell.getValue() != null)
			{
				if (cell.getValue() == null)
					cellWardClinic.setReadOnly(true);
				else
					cellWardClinic.setReadOnly(false);

				cellWardClinic.setTypedText(null);
				cellWardClinic.getItems().clear();
				cellAddress.setValue(null);
			}
			else if ((cell.getIdentifier().equals(LocationType.WARD) || cell.getIdentifier().equals(LocationType.OUTPATIENT_DEPT)) && cell.getValue() != null)
			{
				LocShortVo voLocation = (LocShortVo) cell.getValue();

				if (voLocation != null && voLocation.getAddressIsNotNull())
					cellAddress.setValue(voLocation.getAddress().toDisplayString());
				else
					cellAddress.setValue(null);
			}
		}
	}

	protected void onImbOrderPriorityClick() throws PresentationLogicException
	{
		form.getGlobalContext().OCRR.setSelectedOrderPriority(form.lyrDetails().tabGenDetails().cmbPriority().getValue());
		engine.open(form.getForms().OCRR.OrderPriorityDialog);
	}

	protected void onTreeComponentsTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		form.getContextMenus().getOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem().setVisible(false);
		if (node.getValue() instanceof MyOrderComponentVo) // wdev-13855
		{
			MyOrderComponentVo voMyOrderComponent = (MyOrderComponentVo) node.getValue();
			Boolean flagVisible = voMyOrderComponent.getComponentTypeIsNotNull() && voMyOrderComponent.getComponentType().equals(SelectAndOrderComponentType.INVESTIGATION);
			form.getContextMenus().getOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem().setVisible(flagVisible);
		}
		else if (node.getValue() instanceof MyOrderChildComponentVo) // wdev-13855
		{
			MyOrderChildComponentVo voMyOrderComponent = (MyOrderChildComponentVo) node.getValue();
			Boolean flagVisible = voMyOrderComponent.getComponentTypeIsNotNull() && voMyOrderComponent.getComponentType().equals(SelectAndOrderComponentType.INVESTIGATION);
			form.getContextMenus().getOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem().setVisible(flagVisible);
		}

	}

	protected void onGrdTestSelectionChanged() throws PresentationLogicException
	{
		OrderInvestigationVo voOrderInv = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getSelectedRow().getValue();
		boolean notAddon = isNotAddOn(voOrderInv);

		if (notAddon)
		{
			form.getLocalContext().setTestRowBeingModified(form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getSelectedRow());
			setAddOnToDisplay();
			form.getContextMenus().getSelectItemsLINKItem().setVisible(form.getGlobalContext().Core.getItemsIsNotNull() && form.getGlobalContext().Core.getItems().size() > 0);
		}
	}

	protected void onDteCollectValueChanged() throws PresentationLogicException
	{
		dteCollectValueChanged();
	}

	private void dteCollectValueChanged()
	{
		Date date = form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dteCollect().getValue();
		form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().cmbTime().clear();

		if (date == null)
			return;

		if (date.isLessThan(new Date()))
		{
			engine.showMessage("Date cannot be in the past");
			form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dteCollect().setValue(null);
			return;
		}

		SpecimenCollectionListConfigDetailsVoCollection voCollCfg = domain.listSpecimenCollectionDetails(SpecimenCollectionMethod.INPATIENT, date);
		if (voCollCfg != null)
		{
			for (int i = 0; i < voCollCfg.size(); i++)
				form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().cmbTime().newRow(voCollCfg.get(i).getTime(), voCollCfg.get(i).getTime().getText());
		}
	}

	protected void onBtnApplyOtherClick() throws PresentationLogicException
	{
		SpecimenCollectionMethod type = form.lyrDetails().tabPathDetails().lyrPathology().tabOther().cmbRequestedTypeOther().getValue();
		Date date = form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dteCollectOther().getValue();
		Time time = form.lyrDetails().tabPathDetails().lyrPathology().tabOther().timCollectOther().getValue();

		applyDefaultsToOtherGrid(type, date, time);
	}

	protected void onBtnApplyPhlenbOutPatClick() throws PresentationLogicException
	{
		SpecimenCollectionSettings settings = getSettings(SpecimenCollectionMethod.OUTPATIENT);
		applyDefaultsToPhlebGrid(settings);
	}

	protected void onBtnApplyPhlebInpatClick() throws PresentationLogicException
	{
		SpecimenCollectionSettings settings = getSettings(SpecimenCollectionMethod.INPATIENT);
		applyDefaultsToPhlebGrid(settings);
	}

	protected void onCmbPriorityValueChanged() throws PresentationLogicException
	{
		cmPriorityValueChanged(); // WDEV-11972
	}

	// WDEV-11972
	private void cmPriorityValueChanged()
	{
		if (form.lyrDetails().tabGenDetails().cmbPriority().getValue() != null && form.lyrDetails().tabGenDetails().cmbPriority().getValue().equals(OrderPriority.VARIOUS))
			return;

		OrderInvestigationVoCollection voCollOrderInvestigation = form.getGlobalContext().OCRR.getOrderInvestigationCollection();
		if (voCollOrderInvestigation == null)
			throw new CodingRuntimeException("Coding Error - OrderInvestigation Collection is null (onCmbPriorityValueChanged)");

		for (int i = 0; i < voCollOrderInvestigation.size(); i++)
			voCollOrderInvestigation.get(i).setOrderPriority(form.lyrDetails().tabGenDetails().cmbPriority().getValue());

		form.getGlobalContext().OCRR.setOrderInvestigationCollection(voCollOrderInvestigation);
		setOrderPriorityInGrid();
	}

	protected void onCmbRequestedTypeValueChanged() throws PresentationLogicException
	{
		cmbRequestedTypeValueChanged(); // wdev-13826
	}

	// wdev-13826
	protected void cmbRequestedTypeValueChanged()
	{
		SpecimenCollectionType type = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().cmbRequestedType().getValue();
		if (type != null)
		{
			// default the items in the grid
			grdTestRow[] rows = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getAllRows();
			for (int i = 0; i < rows.length; i++)
			{
				GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow row = rows[i];
				if (isRowEditable(row))
					row.getColType().setValue(type);
			}
		}

		// WDEV-5344
		if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
		{
			if (type == null && !validateRequestedTests())
				disableOrdering();
			else if (validateRequestedTests())
				enableOrdering();
		}
	}

	protected void onBtnGenerateSpecimensClick() throws PresentationLogicException
	{
		btnGenerateSpecimensClick(-1);
	}

	private boolean btnGenerateSpecimensClick(int iTab) throws PresentationLogicException
	{
		if (!validateTab(iTab))
			return false;

		if (form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow().clear();
			form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient().clear();
			form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat().clear();
			form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat().clear();
			form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().clear();
			form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().clear();

			for (int i = 0; i < form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getAllRows().length; i++)
			{
				GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow tRow;
				tRow = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getAllRows()[i];

				if (tRow.getColType().getValue() != null)
				{
					if (tRow.getColType().getValue().equals(SpecimenCollectionType.NOW))
					{
						initialisePathSpecimenGrid(GRID_NOW);
						modifyDynamicGridNowOrPatient(tRow, form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow());
					}
					else if (tRow.getColType().getValue().equals(SpecimenCollectionType.PATIENT))
					{
						initialisePathSpecimenGrid(GRID_PATIENT);
						modifyDynamicGridNowOrPatient(tRow, form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient());
					}
					// WDEV-5344
					else if (tRow.getColType().getValue().equals(SpecimenCollectionType.PHLEBOTOMY_OUTPATIENT) || tRow.getColType().getValue().equals(SpecimenCollectionType.SPECIMEN_COLLECTION_CLINIC))
					{
						initialisePathSpecimenGrid(GRID_PHLEB_OUTPAT);
						modifyDynamicGridPhlebOrOther(tRow, form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat());
					}
					else if (tRow.getColType().getValue().equals(SpecimenCollectionType.PHLEBOTOMY_INPATIENT))
					{
						initialisePathSpecimenGrid(GRID_PHLEB_INPAT);
						modifyDynamicGridPhlebOrOther(tRow, form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat());
					}
					else if (tRow.getColType().getValue().equals(SpecimenCollectionType.OTHER))
					{
						initialisePathSpecimenGrid(GRID_OTHER);
						modifyDynamicGridPhlebOrOther(tRow, form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther());
					}
					else if (tRow.getColType().getValue().equals(SpecimenCollectionType.SPECIMEN_ALREADY_COLLECTED))
					{
						initialisePathSpecimenGrid(GRID_ALREADY);
						modifyDynamicGridPhlebOrOther(tRow, form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected());
					}
				}
			}

			// WDEV-11580 finished adding rows here we need to check the alternative containers rules
			// check if investigations belonging to each specimen have matching containers in the configured default or alternative containers collections
			// where there is a match add the specimen with all its investigations and container choices to a global for selection on a dialog
			// the investigation that have no choice will simply display the container to be used
			// dialog will also display volume required for specimen and also each investigation
			// on the closing of this dialog - the grids will be repopulated with the (new) container choices by way of modifying the configured investigations in memory (ie. their containers)
			// the ordering will then need to take into account the (new) containers (reading from grid)

			boolean useAlternativeContainers = checkNeedForAlternativeContainersSelection();
			if (useAlternativeContainers)
			{
				engine.open(form.getForms().OCRR.ChooseAlternativeContainersDialog);
				return false;
			}
		}

		if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getRows().size() > 0)
			onBtnApplyOtherClick();

		showInvestigationTooltipsAtSpecimenLevel();
		showNextTabAndDisableCurrent();
		enableOrdering();

		return true;
	}

	private boolean checkNeedForAlternativeContainersSelection()
	{
		// if this has a value we have already done the choice part and do not want to launch it again and again
		if (form.getGlobalContext().OCRR.getReWrittenOrderInvestigationsIsNotNull())
			return false;

		if (form.getGlobalContext().OCRR.getMyOrderPotentialSpecimens() == null || form.getGlobalContext().OCRR.getMyOrderPotentialSpecimens().size() == 0)
			return false;

		boolean needContainers = false;

		OrderSpecimenVoCollection voCollOrderSpecimens = form.getGlobalContext().OCRR.getMyOrderPotentialSpecimens();
		
		if (voCollOrderSpecimens == null)
			return false;
		
		
		for (OrderSpecimenVo voOrderSpecimen : voCollOrderSpecimens)
		{
			if (voOrderSpecimen.getInvestigationsIsNotNull() && voOrderSpecimen.getInvestigations().size() > 1)
			{
				for (int p = 0; p < voOrderSpecimen.getInvestigations().size(); p++)
				{
					// upcast here not great but dont want to impact performance by changing vo from ref
					OrderInvestigationVo voOrderInvestigationToCheck1 = (OrderInvestigationVo) voOrderSpecimen.getInvestigations().get(p);
					PathInvDetailsVo pathInvDetails1 = null;
					if (voOrderInvestigationToCheck1.getInvestigation().getParentInvestigationPathDetailsIsNotNull())
						pathInvDetails1 = voOrderInvestigationToCheck1.getInvestigation().getParentInvestigationPathDetails();
					else
						pathInvDetails1 = voOrderInvestigationToCheck1.getInvestigation().getPathInvDetails();

					// mark any investigations here that have a choice of container that have matched another in this collection
					for (int j = 0; j < voOrderSpecimen.getInvestigations().size(); j++)
					{
						OrderInvestigationVo voOrderInvestigationToCheck2 = (OrderInvestigationVo) voOrderSpecimen.getInvestigations().get(j);
						// get the pathinvdetails records
						PathInvDetailsVo pathInvDetails2 = null;
						if (voOrderInvestigationToCheck2.getInvestigation().getParentInvestigationPathDetailsIsNotNull())
							pathInvDetails2 = voOrderInvestigationToCheck2.getInvestigation().getParentInvestigationPathDetails();
						else
							pathInvDetails2 = voOrderInvestigationToCheck2.getInvestigation().getPathInvDetails();

						if (pathInvDetails1 != null && pathInvDetails2 != null)
						{
							// check all the containers against each other
							if (isUsePaedContainer())
							{
								if (pathInvDetails1.getSpecimens().get(0).getPaediatricContainers().get(0).equals(pathInvDetails2.getSpecimens().get(0).getPaediatricContainers().get(0)))
								{
									// WDEV-11900
									if ((pathInvDetails1.getSpecimens().get(0).getAlternativePaediatricContainers() != null && pathInvDetails1.getSpecimens().get(0).getAlternativePaediatricContainers().size() > 0) || (pathInvDetails2.getSpecimens().get(0).getAlternativePaediatricContainers() != null && pathInvDetails2.getSpecimens().get(0).getAlternativePaediatricContainers().size() > 0))
									{
										voOrderInvestigationToCheck1.setHasContainerChoice(true);
										voOrderInvestigationToCheck2.setHasContainerChoice(true);
										needContainers = true;
									}
								}
								if (pathInvDetails1.getSpecimens().get(0).getAlternativePaediatricContainers() != null)
								{
									// compare all the containers available
									for (SpecimenContainerVo voPaedCont1 : pathInvDetails1.getSpecimens().get(0).getAlternativePaediatricContainers())
									{
										if (voPaedCont1.getSpecContainer().equals(pathInvDetails2.getSpecimens().get(0).getPaediatricContainers().get(0).getSpecContainer()) && !(pathInvDetails1.equals(pathInvDetails2)))
										{
											voOrderInvestigationToCheck1.setHasContainerChoice(true);
											voOrderInvestigationToCheck2.setHasContainerChoice(true);
											needContainers = true;
										}
									}
								}
								if (pathInvDetails2.getSpecimens().get(0).getAlternativePaediatricContainers() != null)
								{
									// compare all the containers available
									for (SpecimenContainerVo voPaedCont2 : pathInvDetails2.getSpecimens().get(0).getAlternativePaediatricContainers())
									{
										if (voPaedCont2.getSpecContainer().equals(pathInvDetails1.getSpecimens().get(0).getPaediatricContainers().get(0).getSpecContainer()) && !(pathInvDetails1.equals(pathInvDetails2)))
										{
											voOrderInvestigationToCheck1.setHasContainerChoice(true);
											voOrderInvestigationToCheck2.setHasContainerChoice(true);
											needContainers = true;
										}
									}
								}
							}
//							else
//							{
//								// adult
//								if (pathInvDetails1.getAdultSpecContainer().equals(pathInvDetails2.getAdultSpecContainer()) && !(pathInvDetails1.equals(pathInvDetails2)))
//								{
//									// WDEV-11900
//									if ((pathInvDetails1.getAlternateAdultContainersIsNotNull() && pathInvDetails1.getAlternateAdultContainers().size() > 0) || (pathInvDetails2.getAlternateAdultContainersIsNotNull() && pathInvDetails2.getAlternateAdultContainers().size() > 0))
//									{
//										voOrderInvestigationToCheck1.setHasContainerChoice(true);
//										voOrderInvestigationToCheck2.setHasContainerChoice(true);
//										needContainers = true;
//									}
//								}
//								if (pathInvDetails1.getAlternateAdultContainersIsNotNull())
//								{
//									// compare all the containers available
//									for (AlternativeAdultContainerVo voAdultCont1 : pathInvDetails1.getAlternateAdultContainers())
//									{
//										if (voAdultCont1.getAdultSpecContainer().equals(pathInvDetails2.getAdultSpecContainer()) && !(pathInvDetails1.equals(pathInvDetails2)))
//										{
//											voOrderInvestigationToCheck1.setHasContainerChoice(true);
//											voOrderInvestigationToCheck2.setHasContainerChoice(true);
//											needContainers = true;
//										}
//									}
//								}
//								if (pathInvDetails2.getAlternateAdultContainersIsNotNull())
//								{
//									// compare all the containers available
//									for (AlternativeAdultContainerVo voAdultCont2 : pathInvDetails2.getAlternateAdultContainers())
//									{
//										if (voAdultCont2.getAdultSpecContainer().equals(pathInvDetails1.getAdultSpecContainer()) && !(pathInvDetails1.equals(pathInvDetails2)))
//										{
//											voOrderInvestigationToCheck1.setHasContainerChoice(true);
//											voOrderInvestigationToCheck2.setHasContainerChoice(true);
//											needContainers = true;
//										}
//									}
//								}
//							}
						}
					}
				}
			}
		}
		if (needContainers)
			form.getGlobalContext().OCRR.setMyOrderPotentialSpecimens(voCollOrderSpecimens);

		return needContainers;
	}

	// WDEV-3178
	private void showInvestigationTooltipsAtSpecimenLevel()
	{
		// go through each dynamic grid get parents then get specimentype cell
		// tooltip from each child row
		// append all these together and display as a tooltip on the parent row
		setTooltipsForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow());
		setTooltipsForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient());
		setTooltipsForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat());
		setTooltipsForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat());
		setTooltipsForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther());
		setTooltipsForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected());
	}

	/**
	 * WDEV-16498
	 * Function used to set the tool tip for Pathology Specimen Details grids
	 */
	private void setTooltipsForGrid(DynamicGrid dynGrid)
	{
		for (int i = 0; i < dynGrid.getRows().size(); i++)
		{
			DynamicGridRow parentRow = dynGrid.getRows().get(i);
			
			if (!(parentRow.getIdentifier() instanceof OrderInvestigationVoCollection))
				throw new CodingRuntimeException("Logical error - parent row identifier must be an OrderInvestigationVoCollection");
			
			OrderInvestigationVoCollection investigations = (OrderInvestigationVoCollection) parentRow.getIdentifier();
			
			StringBuilder tooltip = new StringBuilder();
			
			for (OrderInvestigationVo investigation : investigations)
			{
				if (tooltip.length() > 0) tooltip.append(", ");
				tooltip.append(investigation.getInvestigation().getInvestigationIndex().getName());
			}
			
			parentRow.getCells().get(dynGrid.getColumns().getByIdentifier(DISCIPLINE_COLUMN)).setTooltip(tooltip.toString());
		}
	}

	private void enableOrdering()
	{
		form.btnOrder().setEnabled(true);
	}

	private void disableOrdering()
	{
		form.btnOrder().setEnabled(false);
	}

	protected void onBtnContinueGeneralClick() throws PresentationLogicException
	{
		if (validateTab(-1))
			showNextTabAndDisableCurrent();
	}

	//WDEV-14495 
	private void defaultSpecimenSite()
	{

		setSitesToDisplay(null);

		if (form.getGlobalContext().Core.getItems() == null)
			return;

		SelectItemVoCollection voCollItems = null;

		for (int i = 0; i < form.getGlobalContext().Core.getItems().size(); i++)
		{
			SelectItemVo voSelectItem = form.getGlobalContext().Core.getItems().get(i);
			SelectItemVoCollection voCollChildItems = voSelectItem.getItems();

			if (voCollChildItems == null)
				voCollChildItems = new SelectItemVoCollection();

			if (voCollChildItems.size() == 1)
			{
				voSelectItem.setSelected(true);
				voCollChildItems.get(0).setSelected(true);
			}

			if (voCollItems == null)
				voCollItems = new SelectItemVoCollection();

			voCollItems.add(voSelectItem);
		}
		
		form.getGlobalContext().Core.setItems(voCollItems);
		populateSelectedItems();
	}

	protected void onBtnContinueClinicalClick() throws PresentationLogicException
	{
		if (validateTab(-1))
			showNextTabAndDisableCurrent();

		initialiseReportToGrid();

		// WDEV-11972
		bindOrderPriority(form.getGlobalContext().OCRR.getMyOrderComponents());
		defaultOrderPriority(); //WDEV-17328
		updateControlsState();
	}

	private void defaultOrderPriority()
	{
		// WDEV-16386 - all of it
		ArrayList<?> comboValues = form.lyrDetails().tabGenDetails().cmbPriority().getValues();
		
		// WDEV-11972
		defaultcmbPriorityLookupValue();
		
		OrderPriority priorityValueDefaulted = form.lyrDetails().tabGenDetails().cmbPriority().getValue();
		
		if (priorityValueDefaulted != null && !comboValues.contains(priorityValueDefaulted))
		{
			form.lyrDetails().tabGenDetails().cmbPriority().removeRow(priorityValueDefaulted);
			form.lyrDetails().tabGenDetails().cmbPriority().setValue(null);
		}
		
		if (form.lyrDetails().tabGenDetails().cmbPriority().getValue() != null && (form.getLocalContext().getOcsOrder() == null || form.getLocalContext().getOcsOrder().getID_OcsOrderSession() == null))
		{	
			cmPriorityValueChanged();
		}
		else
			setOrderPriorityInGrid(); //WDEV-14897
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if (sender.equals(form.lyrDetails().tabGenDetails().dyngrdReportTo()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.OCRRMyOrderReportTo.ADDMOS:
					addQueryComboRowTodyngrdReportTo(MemberOfStaffRefVo.class);
					updateContextMenuStatus();
					break;
				case GenForm.ContextMenus.OCRRMyOrderReportTo.ADDGP:
					addQueryComboRowTodyngrdReportTo(GpRefVo.class);
					updateContextMenuStatus();
					break;
				case GenForm.ContextMenus.OCRRMyOrderReportTo.Add:
					addOtherRowTodyngrdReportTo();
					updateContextMenuStatus();
					break;
				case GenForm.ContextMenus.OCRRMyOrderReportTo.ADDOUTPAT:
					addHospitalComboRowTodyngrdReportTo(LocationType.OUTPATIENT_DEPT);
					updateContextMenuStatus();
					break;
				case GenForm.ContextMenus.OCRRMyOrderReportTo.ADDWARD:
					addHospitalComboRowTodyngrdReportTo(LocationType.WARD);
					updateContextMenuStatus();
					break;
				case GenForm.ContextMenus.OCRRMyOrderReportTo.Remove:
					form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().remove(form.lyrDetails().tabGenDetails().dyngrdReportTo().getSelectedRow());
					updateContextMenuStatus();
					break;
				default:
			}
		}
		else if (sender.equals(form.treeComponents()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.OCRRMyOrderAddInvestigation.ADDINVESTIGATION:
					form.getGlobalContext().OCRR.setMyOrderQuestions(populateQuestionsInstanceData());
					form.getLocalContext().setOrderComponentsRestorePoint((MyOrderComponentVoCollection) form.getGlobalContext().OCRR.getMyOrderComponents().clone());
					engine.open(form.getForms().OCRR.SelectAndOrderDialog);
					break;
				case GenForm.ContextMenus.OCRRMyOrderAddInvestigation.REMOVEINVESTIGATION:
					// clear out the optional alternative containers selected
					form.getGlobalContext().OCRR.setMyOrderPotentialSpecimens(null);
					form.getGlobalContext().OCRR.setReWrittenOrderInvestigations(null);

					removeFromSelection(form.treeComponents().getSelectedNode());
					form.getGlobalContext().OCRR.setMyOrderQuestions(populateQuestionsInstanceData());
					
					defaultSpecimenSite();
					// WDEV-16665
					OcsOrderVo orderAwaitingAuthorization = domain.getOcsOrder(form.getGlobalContext().OCRR.getOrderAwaitingAuthorisation());
					if (orderAwaitingAuthorization != null)
					{
						addSites(orderAwaitingAuthorization);
						populateCollectionType(orderAwaitingAuthorization);
					}

					// wdev-13826
					if (form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().cmbRequestedType().getValue() == null)
					{

						if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK"))
							form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().cmbRequestedType().setValue(SpecimenCollectionType.SPECIMEN_COLLECTION_CLINIC);
						else if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH"))
							form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().cmbRequestedType().setValue(SpecimenCollectionType.NOW);

						cmbRequestedTypeValueChanged();
					}
					form.treeComponents().clearSelection();
					setOrderButtonText();
					updateControlsState();
					// -------------
					break;
				default:
			}
		}
		else if (sender.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.SelectItems.LINK:
					engine.open(form.getForms().Core.SelectItems, "Link Add Ons");
					break;
				default:
			}
		}
	}

	private void updateContextMenuStatus()
	{
		if (form.lyrDetails().tabGenDetails().dyngrdReportTo().getValue() == null)
			form.getContextMenus().getOCRRMyOrderReportToRemoveItem().setVisible(false);
		else
			form.getContextMenus().getOCRRMyOrderReportToRemoveItem().setVisible(true);
	}

	protected void onDyngrdPhlebCellValueChanged(DynamicGridCell cell)
	{
		DynamicGrid grid = form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat();

		if (cell.getType().equals(DynamicCellType.DATE))
		{
			Date date = (Date) cell.getValue();

			DynamicGridCell cellTimes = cell.getRow().getCells().get(grid.getColumns().getByIdentifier(DYN_COLTIME));
			cellTimes.getItems().clear();
			
			if (date != null)
			{
				if (date.isLessThan(new Date()))
				{
					engine.showMessage("Date cannot be in the past");
					cell.setValue(null);
					return;
				}

				SpecimenCollectionListConfigDetailsVoCollection voCollCfg = domain.listSpecimenCollectionDetails(SpecimenCollectionMethod.INPATIENT, date);
				if (voCollCfg != null)
				{
					for (int i = 0; i < voCollCfg.size(); i++)
						cellTimes.getItems().newItem(voCollCfg.get(i).getTime(), voCollCfg.get(i).getTime().toString());
				}
			}
		}
	}

	// ///////////////////////////////////////////////////////////////////////////////////
	// End of Events Section
	// ///////////////////////////////////////////////////////////////////////////////////

	private void initialize() throws PresentationLogicException
	{
		// Get DFT Collection type
		form.getLocalContext().setDFTCollectionType(domain.getDFTCollectionTypes());
		
		form.setMode(FormMode.EDIT);

		form.getLocalContext().setPreviousForm(engine.getPreviousNonDialogFormName());

		// WDEV-13930
		listActiveHospitals();
		loadHospitalCombo();

		setInitialView();

		form.getContextMenus().getOCRRMyOrderAddInvestigationADDINVESTIGATIONItem().setVisible(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("Standard"));
		form.getContextMenus().getOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem().setVisible(false);
		form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().btnSites().setImage(form.getImages().OCRR.SpecimenDetails16);

		// WDEV-8947 - if patient mobility is mandatory
		if (ConfigFlag.UI.ORDERING_PATIENTMOBILITY_MANDATORY.getValue())
			form.lyrDetails().tabRadDetails().cmbPatMobility().setRequired(true);

		// WDEV-11034 - if patient mobility is visible
		if (!ConfigFlag.UI.ORDERING_PATIENTMOBILITY_VISIBLE.getValue())
		{
			form.lyrDetails().tabRadDetails().cmbPatMobility().setVisible(false);
			form.lyrDetails().tabRadDetails().lblPatMobility().setVisible(false);
			// cant be mandatory if invisible regardless of WDEV-8947
			form.lyrDetails().tabRadDetails().cmbPatMobility().setRequired(false);
		}

		// WDEV-11035 - if order category is mandatory
		if (ConfigFlag.UI.ORDERING_ORDERCATEGORY_MANDATORY.getValue())
			form.lyrDetails().tabGenDetails().cmbOrderCategory().setRequired(true);

		OcsOrderVo orderAwaitingAuthorization = domain.getOcsOrder(form.getGlobalContext().OCRR.getOrderAwaitingAuthorisation());
		
		//WDEV-16748
		if (form.getGlobalContext().OCRR.getOrderAwaitingAuthorisation() != null && orderAwaitingAuthorization != null && form.getGlobalContext().OCRR.getOrderAwaitingAuthorisation().getVersion_OcsOrderSession() !=  orderAwaitingAuthorization.getVersion_OcsOrderSession())
		{
			if (engine.isDialog())
			{
				if (AuthorisationOrderStatus.AUTHORISED.equals(orderAwaitingAuthorization.getAuthorisationOrderStatus()))
				{
					engine.showMessage("Order was Authorised by another User. Screen will be refreshed");
					engine.close(DialogResult.OK);
				}
				else
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					engine.close(DialogResult.CANCEL);
				}
				return;
			}
		}

		populateSummaryClinicalInformation(orderAwaitingAuthorization);
		
		if (orderAwaitingAuthorization != null)
		{
			populateScreenFromData(orderAwaitingAuthorization);
			if (loadRequestedTestGrid() > 0)
			{
				loadSpecimenRequestedTypes();

				//WDEV-14904 
				addSites(orderAwaitingAuthorization);
				populateCollectionType(orderAwaitingAuthorization);
			}
			setOrderButtonText();
			updateControlsState();
			return;
		}
		else
		{
			if (ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
			{
				if (form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContextIsNotNull() && form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getPasEventIsNotNull())
					form.lyrDetails().tabGenDetails().txtPasEpisodeID().setValue(form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getPasEvent().getPasEpisodeId());
			}
			//wdev-17823
			if( engine.getFormName().equals(form.getForms().OCRR.MyOrderDialog))
			{
				OrderCategory lookVo = domain.getOrderCategoryByMap();
				form.lyrDetails().tabGenDetails().cmbOrderCategory().setValue(lookVo);
			}
			//-------
		}

		form.getLocalContext().setAddedOrderInvestigations(null);
		loadComponentsAndQuestions();

		prePopulateOrderInvestigations();

		if (loadRequestedTestGrid() > 0)
			loadSpecimenRequestedTypes();

		if (domain.getHcpLiteUser() != null)
		{
			Object mos = domain.getMosUser();
			if (mos != null)
			{
				form.lyrDetails().tabGenDetails().qmbOrderedBy().newRow((MemberOfStaffShortVo) mos, ((MemberOfStaffShortVo) mos).getName().toString());
				form.lyrDetails().tabGenDetails().qmbOrderedBy().setValue((MemberOfStaffShortVo) mos);
			}
		}
		
		if (isEdLocation()) //WDEV-15899
		{
			HcpLiteVoCollection voCollHcp = null;
			
			voCollHcp = domain.listResponsibleEdClinicians("%%%");
			HcpLiteVo hcpLiteUser = (HcpLiteVo) domain.getHcpLiteUser();
			
			if (voCollHcp != null && voCollHcp.size() == 1)
			{
				form.lyrDetails().tabGenDetails().qmbClinician().clear();
				form.lyrDetails().tabGenDetails().qmbClinician().newRow( voCollHcp.get(0), (voCollHcp.get(0).getName().toString()));
				form.lyrDetails().tabGenDetails().qmbClinician().setValue(voCollHcp.get(0));
			}
			else if (hcpLiteUser != null && Boolean.TRUE.equals(hcpLiteUser.getIsAResponsibleEDClinician()))
			{
				form.lyrDetails().tabGenDetails().qmbClinician().clear();
				form.lyrDetails().tabGenDetails().qmbClinician().newRow(hcpLiteUser, hcpLiteUser.getName().toString());
				form.lyrDetails().tabGenDetails().qmbClinician().setValue(hcpLiteUser);
			}
			else
			{
				form.lyrDetails().tabGenDetails().qmbClinician().clear();
			}
		}
		
		// If an OutpatientAttendance was selected in OutpatientList and user navigated straight to this screen to place an order
		// then fill in the data relevant to OutpatientAttendance
		if (form.getGlobalContext().Core.getOutpatientAttendanceForOrder() != null)
		{
			populateOutpatientAttendance(form.getGlobalContext().Core.getOutpatientAttendanceForOrder());
		}

		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		if (voCareContext != null && voCareContext.getContextIsNotNull() && voCareContext.getContext().equals(ContextType.INPATIENT))
		{
			ClinicalNotesLiteVoCollection voCollClinicalNotesLite = domain.listClinicalNotesByCareContextAndNoteType(voCareContext, ClinicalNoteType.SUMMARYATADMISSION);
			if (voCollClinicalNotesLite != null && voCollClinicalNotesLite.size() == 1)
			{
				form.lyrDetails().tabClinicalNotes().txtAdditionalNotes().setValue(voCollClinicalNotesLite.get(0).getClinicalNote());
			}
		}

		updateControlsState();

		// WDEV-13401
		setOrderButtonText();

		// WDEV-13999 - CARE UK project only functionality
		if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals(CARE_UK_UI_ORDER)) // - CARE UK project only functionality -
		{
			setRefManClinicalDetails();
		}

		// WDEV-5344
		if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
		{
			form.lyrDetails().tabGenDetails().setHeaderVisible(false);
			form.lyrDetails().tabGenDetails().setVisible(false);

			// WDEV-11881
			if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK"))
				form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().cmbRequestedType().setValue(SpecimenCollectionType.SPECIMEN_COLLECTION_CLINIC);
			else if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH"))
				form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().cmbRequestedType().setValue(SpecimenCollectionType.NOW);

			onCmbRequestedTypeValueChanged();

			int typeCount = 0;
			typeCount += doesOrderContainInvType(Category.CLINICAL) ? 1 : 0;
			typeCount += doesOrderContainInvType(Category.PATHOLOGY) ? 1 : 0;
			typeCount += doesOrderContainInvType(Category.CLINICALIMAGING) ? 1 : 0;

			if (doesOrderContainInvType(Category.CLINICAL) && typeCount == 1)
			{
				showNextTabAndDisableCurrent();
				form.lyrDetails().tabClinicalNotes().setHeaderEnabled(true);
			}
		}
		
		updateControlsState();
	}


	/**
	 * Function will populate with the following details from OutpatientAttendace record selected on OutpatientList
	 * if a value is present (otherwise it will exit the function)
	 * <li>Hospital (from OutpatientAttendance.Clinic.Location - this will be a hospital)</li>
	 * <li>Set Clinic radio button</li>
	 * <li>Patient Location (from OutpatientAttendance.Clinic)</li>
	 * <li>Outpatient Department (if the OutpatientAttendance.Clinic has mapped to a department)</li>
	 * <li>Responsible Clinician</li>

	 * @param outpatientAttendanceForOrder - the OutpatientAttendance record that was selected on OutpatientList
	 */
	protected void populateOutpatientAttendance(OutPatientListVo outpatientAttendanceForOrder)
	{
		// If no value is present - exit the function
		if (outpatientAttendanceForOrder == null)
			return;
		
		ClinicVo clinic = outpatientAttendanceForOrder.getClinic();
		LocShortVo hospital = clinic != null ? clinic.getClinicLocation() : null;
		
		// Hospital
		if (clinic != null && clinic.getClinicLocation() != null)
		{
    		form.lyrDetails().tabGenDetails().cmbHospital().setValue(hospital);
    		
    		if (form.lyrDetails().tabGenDetails().cmbHospital().getValue() == null)
    		{
    			form.lyrDetails().tabGenDetails().cmbHospital().newRow(hospital, hospital.getName());
    			form.lyrDetails().tabGenDetails().cmbHospital().setValue(hospital);
    		}
		}
		
		// Clinic - radio button
		form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoClinic);

		// Patient Location - Clinic
		if (clinic != null)
		{
			form.lyrDetails().tabGenDetails().qmbLocation().setValue(clinic);
			
			if (form.lyrDetails().tabGenDetails().qmbLocation().getValue() == null)
			{
				form.lyrDetails().tabGenDetails().qmbLocation().newRow(clinic, clinic.getClinicName());
				form.lyrDetails().tabGenDetails().qmbLocation().setValue(clinic);
			}
			
			
			// Outpatient Department
			LocShortMappingsVo outpatientDept = clinic.getOutpatientDept();
			
			if (outpatientDept != null)
			{
				form.lyrDetails().tabGenDetails().cmbDepartment().setValue(outpatientDept);
				
				if (form.lyrDetails().tabGenDetails().cmbDepartment().getValue() == null)
				{
					form.lyrDetails().tabGenDetails().cmbDepartment().newRow(outpatientDept, outpatientDept.getName());
					form.lyrDetails().tabGenDetails().cmbDepartment().setValue(outpatientDept);
				}
			}
		}
		
		// Responsible HCP - get Care context for OutpatientAttendance.pasEvent
		form.lyrDetails().tabGenDetails().qmbClinician().clear();
		PasEventShortVo pasEvent = outpatientAttendanceForOrder.getPasEvent();
		if (pasEvent != null && pasEvent.getConsultant() != null)
		{
			HcpLiteVo responsibleHCP = domain.getHCPbyMoS(pasEvent.getConsultant().getMos());
			
			if (responsibleHCP != null && Boolean.TRUE.equals(responsibleHCP.getIsHCPaResponsibleHCP()))
			{
				form.lyrDetails().tabGenDetails().qmbClinician().clear();
				form.lyrDetails().tabGenDetails().qmbClinician().newRow(responsibleHCP, responsibleHCP.toString());
				form.lyrDetails().tabGenDetails().qmbClinician().setValue(responsibleHCP);
			}
			else
			{
				HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();

				if (hcpUser != null && Boolean.TRUE.equals(hcpUser.getIsHCPaResponsibleHCP()))
				{
					form.lyrDetails().tabGenDetails().qmbClinician().clear();
					form.lyrDetails().tabGenDetails().qmbClinician().newRow(hcpUser, hcpUser.toString());
					form.lyrDetails().tabGenDetails().qmbClinician().setValue(hcpUser);
				}
			}
		}
		else
		{
			HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();

			if (hcpUser != null && Boolean.TRUE.equals(hcpUser.getIsHCPaResponsibleHCP()))
			{
				form.lyrDetails().tabGenDetails().qmbClinician().clear();
				form.lyrDetails().tabGenDetails().qmbClinician().newRow(hcpUser, hcpUser.toString());
				form.lyrDetails().tabGenDetails().qmbClinician().setValue(hcpUser);
			}
		}
	}

	private void populateSummaryClinicalInformation(OcsOrderVo order)
	{
		// Only update the value of the text box first time
		
		if (form.getGlobalContext().OCRR.getOrderAwaitingAuthorisation() != null)
		{
			form.lyrDetails().tabSummaryClinicalInfo().txtSummaryClinicalInfo().setValue(order.getSummaryClinicalInformation());
		}
		else
		{
			SummaryClinicalInformationVo clinicalInfo = domain.getLatestSummaryClinicalInformation(form.getGlobalContext().Core.getPatientShort());
			
			if (clinicalInfo != null)
			{
				form.lyrDetails().tabSummaryClinicalInfo().txtSummaryClinicalInfo().setValue(clinicalInfo.getSummaryClinicalInfo());
			}
		}
	}


	
	//WDEV-14904
	private void populateCollectionType(OcsOrderVo voOcsOrder)
	{
		grdTestRow[] rows = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getAllRows();

		for (int i = 0; i < rows.length; i++)
		{
			GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow row = rows[i];
			if (isRowEditable(row) && !row.isColTypeEmpty())
			{

				for (int y = 0; y < voOcsOrder.getInvestigations().size(); y++)
					if (row.getValue().getInvestigation().getID_Investigation().equals(voOcsOrder.getInvestigations().get(y).getInvestigation().getID_Investigation()))

						for (int m = 0; m < voOcsOrder.getSpecimens().size(); m++)
							if (row.getValue().getSiteCdIsNotNull() && voOcsOrder.getSpecimens().get(m).getSiteCdIsNotNull() && voOcsOrder.getSpecimens().get(m).getInvestigations().contains(voOcsOrder.getInvestigations().get(y)) && row.getValue().getSiteCd().getID() == voOcsOrder.getSpecimens().get(m).getSiteCd().getID())
							{
								row.getColType().setValue(voOcsOrder.getSpecimens().get(m).getRequestedType());
							}
							else if (row.getValue().getSiteCd() == null && voOcsOrder.getSpecimens().get(m).getInvestigations().contains(voOcsOrder.getInvestigations().get(y)))
							{
								row.getColType().setValue(voOcsOrder.getSpecimens().get(m).getRequestedType());
							}
			}
		}
	}

	//WDEV-14904 
	private void addSites(OcsOrderVo voOcsOrder)
	{
		setSitesToDisplay(null);

		if (form.getGlobalContext().Core.getItems() == null)
			return;

		SelectItemVoCollection voCollItems = null;

		for (int i = 0; i < form.getGlobalContext().Core.getItems().size(); i++)
		{
			SelectItemVo voSelectItem = form.getGlobalContext().Core.getItems().get(i);
			SelectItemVoCollection voCollChildItems = voSelectItem.getItems();

			if (voCollChildItems == null)
				voCollChildItems = new SelectItemVoCollection();

			for (OrderInvestigationVo orderInvestigation : voOcsOrder.getInvestigations())
			{
				boolean itemInvestigationIndex = voSelectItem.getItem() instanceof InvestigationIndexRefVo;
				boolean itemInvestigation = voSelectItem.getItem() instanceof InvestigationRefVo;
				
				if ((itemInvestigationIndex && voSelectItem.getItem().getIGenericItemInfoID().equals(orderInvestigation.getInvestigation().getInvestigationIndex().getID_InvestigationIndex()))
						|| (itemInvestigation && voSelectItem.getItem().getIGenericItemInfoID().equals(orderInvestigation.getInvestigation().getID_Investigation())))
				{
						for (int j = 0; j < voCollChildItems.size(); j++)
						{
							for (int m = 0; m < voOcsOrder.getSpecimens().size(); m++)
								if (voOcsOrder.getSpecimens().get(m).getSiteCdIsNotNull() && voOcsOrder.getSpecimens().get(m).getInvestigations().contains(orderInvestigation) && voSelectItem.getItems().get(j).getItem().getIGenericItemInfoID().equals(voOcsOrder.getSpecimens().get(m).getSiteCd().getID()))
								{
									voSelectItem.setSelected(true);
									voCollChildItems.get(j).setSelected(true);
									voCollChildItems.get(j).setOrderInvestigationForSite(orderInvestigation);
								}
						}
				}
			}

			if (voCollItems == null)
				voCollItems = new SelectItemVoCollection();

			voCollItems.add(voSelectItem);
		}

		form.getGlobalContext().Core.setItems(voCollItems);
		populateSelectedItems();
	}

	/**
	 * WDEV-13999 Function used to default in the Care UK clinical details
	 */
	private void setRefManClinicalDetails()
	{
		// Get logged in user HCP (if any)
		HcpLiteVo userHCP = (HcpLiteVo) domain.getHcpLiteUser();

		// Default in Responsible HCP to the logged in HCP user (if user is a Responsible HCP)
		// WDEV-14665 - Change Request
		if (userHCP != null && Boolean.TRUE.equals(userHCP.getIsHCPaResponsibleHCP()))
		{
			form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().clear();
			form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().newRow(userHCP, userHCP.toString());
			form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().setValue(userHCP);
		}
		// Default in the Lead Consultant for speciality from Service associated to the referral
		// if the patient has not arrived yet (for this referral)
		else if (form.getGlobalContext().RefMan.getCatsReferralIsNotNull() && Boolean.FALSE.equals(domain.hasArrived(form.getGlobalContext().RefMan.getCatsReferral())))
		{
			HcpLiteVo leadConsultant = domain.getLeadConsultantForReferral(form.getGlobalContext().RefMan.getCatsReferral());

			if (leadConsultant != null)
			{
				form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().clear();
				form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().newRow(leadConsultant, leadConsultant.toString());
				form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().setValue(leadConsultant);
			}
		}


		// Default in the logged in HCP user into 'Ordering HCP' field (if user is a HCP)
		if (userHCP != null)
		{
			form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().clear();
			form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().newRow(userHCP, userHCP.toString());
			form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().setValue(userHCP);
		}
	}

	private void prePopulateOrderInvestigations()
	{
		OcsOrderVo voOcsOrder = form.getLocalContext().getOcsOrder();
		if (voOcsOrder == null)
			voOcsOrder = new OcsOrderVo();

		OrderInvestigationVoCollection voCollOrderInvest = new OrderInvestigationVoCollection();
		
		MyOrderComponentVoCollection components = form.getGlobalContext().OCRR.getMyOrderComponents();
		if (components == null)
			return;

		for (int x = 0; x < components.size(); x++)
		{
			MyOrderComponentVo component = components.get(x);
			if (component != null)
			{
				if (component.getComponentType().equals(SelectAndOrderComponentType.PROFILE))
				{
					if (component.getComponentsIsNotNull())
					{
						for (int y = 0; y < component.getComponents().size(); y++)
						{
							MyOrderChildComponentVo childComponent = component.getComponents().get(y);
							
							// Attempt to reuse the OrderInvestigation from order (if editing an unauthorized order)
							OrderInvestigationVo orderInvestigation = getOrderInvestigationFromOriginalOrder(voOcsOrder, childComponent.getID());
							// If no OrderInvestigation was found then create a new one
							if (orderInvestigation == null) orderInvestigation = new OrderInvestigationVo();
							
							orderInvestigation.setInvestigation(domain.getInvestigationUnderSpecimen(childComponent.getID()));
							orderInvestigation.getInvestigation().setParentInvestigationPathDetails(domain.getPathInvDetailsForInvestigation(childComponent.getParentInvestigationId()));
							orderInvestigation.getInvestigation().setParentPhlebMayCollect(domain.getProfileLevelPhlebMayCollect(childComponent.getParentInvestigationId()));
							orderInvestigation.setOrderDetails(voOcsOrder);
							orderInvestigation.setReorderReason(childComponent.getReOrderReason());// 	WDEV-16624
							
							if (voCollOrderInvest.contains(orderInvestigation)) voCollOrderInvest.remove(orderInvestigation);
							voCollOrderInvest.add(orderInvestigation);
						}
					}
				}
				else if (component.getComponentType().equals(SelectAndOrderComponentType.INVESTIGATION))
				{
					// Attempt to reuse the OrderInvestigation from order (if editing an unauthorized order)
					OrderInvestigationVo orderInvestigation = getOrderInvestigationFromOriginalOrder(voOcsOrder, component.getID());
					// If no OrderInvestigation was found then create a new one
					if (orderInvestigation == null) orderInvestigation = new OrderInvestigationVo();

					orderInvestigation.setInvestigation(domain.getInvestigationUnderSpecimen(component.getID()));
					if (component.getParentInvestigationIdIsNotNull())
					{
						orderInvestigation.getInvestigation().setParentInvestigationPathDetails(domain.getPathInvDetailsForInvestigation(component.getParentInvestigationId()));
						orderInvestigation.getInvestigation().setParentPhlebMayCollect(domain.getProfileLevelPhlebMayCollect(component.getParentInvestigationId()));
					}
					orderInvestigation.setOrderDetails(voOcsOrder);
					
					orderInvestigation.setOrderPriority(getPriorityIfExists(orderInvestigation.getInvestigation().getInvestigationIndex(), voOcsOrder.getInvestigations()));
					orderInvestigation.setReorderReason(component.getReOrderReason());
					
					if (voCollOrderInvest.contains(orderInvestigation)) voCollOrderInvest.remove(orderInvestigation);
					voCollOrderInvest.add(orderInvestigation);
				}
			}
		}
		
		// If there are OrderInvestigations saved but not longer present then set their status to cancelled request
		updateStatusToUnauthorizedOrderInvestigations(voOcsOrder.getInvestigations(), voCollOrderInvest);
		
		form.getLocalContext().setOcsOrder(voOcsOrder);

		form.getGlobalContext().OCRR.setOrderInvestigationCollection(voCollOrderInvest);

		// WDEV-11542 - copy the OrderInvestigation variable so that we can restore if alternate container selection is undone
		OrderInvestigationVoCollection voCollOrderInv = new OrderInvestigationVoCollection();
		for (OrderInvestigationVo voOrdInv : voCollOrderInvest)
			voCollOrderInv.add((OrderInvestigationVo) voOrdInv.clone());

		form.getLocalContext().setOriginalOrderInvestigationCollection(voCollOrderInv);
		// //////////////////////////////

		prePopulateRadOrderGrid();
		prePopulateRadPrintItems();
	}

	private OrderInvestigationVoCollection updateStatusToUnauthorizedOrderInvestigations(OrderInvestigationVoCollection originalOrderInvestigations, OrderInvestigationVoCollection currentOrderInvestigations)
	{
		if (originalOrderInvestigations == null)
			return currentOrderInvestigations;
		
		// Check original for authorised OrderInvestigations to be cancel request
		for (OrderInvestigationVo orderInvestigation : originalOrderInvestigations)
		{
			// OrderInvestigation is saved
			if (orderInvestigation.getID_OrderInvestigation() != null)
			{
				// If the OrderInvestigation 
				if (!currentOrderInvestigations.contains(orderInvestigation))
				{
					if (!OrderInvStatus.CANCEL_REQUEST.equals(orderInvestigation.getOrdInvCurrentStatus().getOrdInvStatus())) //WDEV-16998
					{
						//OrderedInvestigationStatusVo originalStatus = orderInvestigation.getOrdInvCurrentStatus();
						//orderInvestigation.getOrdInvStatusHistory().add(originalStatus);

						OrderedInvestigationStatusVo newStatus = new OrderedInvestigationStatusVo();
						newStatus.setOrdInvStatus(OrderInvStatus.CANCEL_REQUEST);
						newStatus.setChangeDateTime(new DateTime());
						newStatus.setChangeUser(domain.getLoggedInUser().getUserRealName());
						newStatus.setStatusReason("Order edited");
						newStatus.setStatusChangeReason(InvestigationStatusChangeReason.AMENDED);

						orderInvestigation.setOrdInvCurrentStatus(newStatus);
						orderInvestigation.getOrdInvStatusHistory().add(newStatus);
					}			
					currentOrderInvestigations.add(orderInvestigation);
				}
				
				else // WDEV-16869
				{
					if (OrderInvStatus.CANCEL_REQUEST.equals(orderInvestigation.getOrdInvCurrentStatus().getOrdInvStatus())) 
					{
						OrderedInvestigationStatusVo newStatus = new OrderedInvestigationStatusVo();
						newStatus.setOrdInvStatus(OrderInvStatus.AWAITING_AUTHORISATION);
						newStatus.setChangeDateTime(new DateTime());
						newStatus.setChangeUser(domain.getLoggedInUser().getUserRealName());
						newStatus.setStatusReason("Order edited");
						newStatus.setStatusChangeReason(InvestigationStatusChangeReason.AMENDED);

						orderInvestigation.setOrdInvCurrentStatus(newStatus);
						orderInvestigation.getOrdInvStatusHistory().add(newStatus);
					}
					currentOrderInvestigations.add(orderInvestigation);
				}
			}
		}

		return currentOrderInvestigations;
	}

	private OrderInvestigationVo getOrderInvestigationFromOriginalOrder(OcsOrderVo orderSession, Integer investigationID)
	{
		if (orderSession == null || orderSession.getInvestigations() == null)
			return null;
		
		for (OrderInvestigationVo orderInvestigation : orderSession.getInvestigations())
		{
			if (orderInvestigation.getID_OrderInvestigation() != null && orderInvestigation.getInvestigation().getID_Investigation().equals(investigationID))	// equals because we are comparing value of objects
				return orderInvestigation;
		}
		
		return null;
	}

	private OrderPriority getPriorityIfExists(InvestigationIndexShortVo investigationIndex, OrderInvestigationVoCollection orderInvestigations)
	{
		if (orderInvestigations == null)
			return null;
		
		if (investigationIndex == null || investigationIndex.getID_InvestigationIndex() == null)
			return null;
		
		for (OrderInvestigationVo investigation : orderInvestigations)
		{
			if (investigation.getInvestigation() != null && investigation.getInvestigation().getInvestigationIndex() != null)
			{
				if (investigationIndex.getID_InvestigationIndex() == investigation.getInvestigation().getInvestigationIndex().getID_InvestigationIndex())
					return investigation.getOrderPriority();
			}
		}
		
		return null;
	}

	private void prePopulateRadPrintItems()
	{
		OrderInvestigationVoCollection voCollOrderInv = form.getGlobalContext().OCRR.getOrderInvestigationCollection();

		SelectItemVoCollection voCollItems = new SelectItemVoCollection();

		if (voCollOrderInv != null)
		{
			for (int i = 0; i < voCollOrderInv.size(); i++)
			{
				if (voCollOrderInv.get(i).getInvestigationIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndexIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICALIMAGING))
				{
					SelectItemVo voSelectItem = new SelectItemVo();
					voSelectItem.setItem(voCollOrderInv.get(i).getInvestigation().getInvestigationIndex());
					voSelectItem.setSelected(Boolean.FALSE);
					voCollItems.add(voSelectItem);
				}
			}
		}

		form.getGlobalContext().Core.setItems(voCollItems.size() > 0 ? voCollItems : null);

		InvestigationIndexRefVoCollection voCollInvIndex = new InvestigationIndexRefVoCollection();
		if (voCollItems != null)
		{
			for (int i = 0; i < voCollItems.size(); i++)
			{
				if (voCollItems.get(i).getItemIsNotNull())
				{
					if (voCollItems.get(i).getItem() instanceof InvestigationIndexLiteVo && voCollItems.get(i).getSelectedIsNotNull() && voCollItems.get(i).getSelected().equals(Boolean.FALSE))
					{
						voCollInvIndex.add((InvestigationIndexRefVo) voCollItems.get(i).getItem());
					}
				}
			}
		}
		form.getGlobalContext().OCRR.PrintOrder.setNotLocalInvestigations(voCollInvIndex.size() > 0 ? voCollInvIndex : null);
	}

	private void populateSelectedItems()
	{
		// if its site add children to the inv row else modify the inv
		// description with any addons

		SelectItemVoCollection voCollSelectItems = form.getGlobalContext().Core.getItems();

		if (form.lyrDetails().tabRadDetails().isVisible())
		{
			// remove Select Items From PrintOrdersGlobalContext
			if (voCollSelectItems != null)
			{
				for (int i = 0; i < voCollSelectItems.size(); i++)
				{
					if (voCollSelectItems.get(i).getItem().getIGenericItemTypeSelectItemType() == SelectItemType.INVINDEX)
					{
						for (int p = 0; p < form.getGlobalContext().OCRR.PrintOrder.getNotLocalInvestigations().size(); p++)
						{
							InvestigationIndexRefVo printInv = form.getGlobalContext().OCRR.PrintOrder.getNotLocalInvestigations().get(p);
							if (printInv.getID_InvestigationIndex().equals(voCollSelectItems.get(i).getItem().getIGenericItemInfoID()) && voCollSelectItems.get(i).getSelected().equals(Boolean.TRUE))
							{
								form.getGlobalContext().OCRR.PrintOrder.getNotLocalInvestigations().remove(printInv);
								break;
							}
						}
					}
				}
			}

		}
		else
		{
			if (voCollSelectItems != null && voCollSelectItems.size() > 0)
			{
				grdTestRow row = form.getLocalContext().getTestRowBeingModified();
				if (voCollSelectItems.get(0).getItem().getIGenericItemTypeSelectItemType() == SelectItemType.INVINDEX)
				{
					if (row != null)
					{
						addSiteRow(voCollSelectItems.get(0), row);
						row.setExpanded(true);
					}
					else
					{
						// multiple invs and their sites selected
						// find the row that corresponds to the item in the list
						for (int i = 0; i < form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().size(); i++)
						{
							row = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().get(i);
							if (row.getValue() != null)
							{
								for (int p = 0; p < voCollSelectItems.size(); p++)
								{
									if (voCollSelectItems.get(p).getItem().getIGenericItemInfoID().equals(row.getValue().getInvestigation().getInvestigationIndex().getID_InvestigationIndex()))
									{
										addSiteRow(voCollSelectItems.get(p), row);
										row.setExpanded(true);
									}
								}
							}
						}
					}

					form.getContextMenus().hideAllSelectItemsMenuItems();
				}
				else if (voCollSelectItems.get(0).getItem().getIGenericItemTypeSelectItemType() == SelectItemType.INVESTIGATION)
				{
					// Add Ons
					InvestigationUnderSpecimenVoCollection voCollInvestigation = new InvestigationUnderSpecimenVoCollection();
					StringBuffer sb = new StringBuffer();
					sb.append(row.getColTestNameHidden());
					for (int i = 0; i < voCollSelectItems.size(); i++)
					{
						if (voCollSelectItems.get(i).getSelectedIsNotNull() && voCollSelectItems.get(i).getSelected().booleanValue())
						{
							voCollInvestigation.add((InvestigationUnderSpecimenVo) voCollSelectItems.get(i).getItem());
							sb.append(", ");
							sb.append(((InvestigationUnderSpecimenVo) voCollSelectItems.get(i).getItem()).getInvestigationIndex().getName());
						}
					}
					row.setColTest(sb.toString());
					row.setTooltipForColTest(sb.toString());

					row.setColAddOnsHidden(voCollInvestigation.size() > 0 ? voCollInvestigation : null);
				}
			}
		}

	}

	private void addSiteRow(SelectItemVo voSelectItem, grdTestRow row)
	{
		if (voSelectItem.getItemsIsNotNull())
		{
			for (int p = 0; p < voSelectItem.getItems().size(); p++)
			{
				SelectItemVo childItem = voSelectItem.getItems().get(p);
				if (childItem.getSelectedIsNotNull() && childItem.getSelected().booleanValue())
				{
					grdTestRow cRow = null;
					boolean bRowExists = false;
					for (int i = 0; i < row.getRows().size(); i++)
					{
						cRow = row.getRows().get(i);
						
						if (cRow.getColSiteHidden() != null
							&& childItem.getItem() != null
							&& cRow.getColSiteHidden().getIGenericItemInfoID().equals(childItem.getItem().getIGenericItemInfoID()))
						{
							bRowExists = true;
							break;
						}
					}

					if (!bRowExists)
					{
						cRow = row.getRows().newRow();
						cRow.setColTest(childItem.getItem().getIGenericItemInfoName());
						cRow.setColSiteHidden((GenericInfoAdapter) childItem.getItem());
						if (p > 0)
						{
							OrderInvestigationVo voOrderInvestCopy = (OrderInvestigationVo) row.getValue().clone();
							voOrderInvestCopy.setSiteCd((SpecimenSite) ((GenericInfoAdapter) childItem.getItem()).getInstance());
							cRow.setValue(voOrderInvestCopy);
							cRow.setColHiddenOrderInvestigationSite(childItem.getOrderInvestigationForSite());
							addOrderInvestigationCopyToContext(voOrderInvestCopy);
						}
						else
						{
							cRow.setValue(row.getValue());
							cRow.setColHiddenOrderInvestigationSite(childItem.getOrderInvestigationForSite());
							cRow.getValue().setSiteCd((SpecimenSite) ((GenericInfoAdapter) childItem.getItem()).getInstance());
						}

						addSpecimenContainerRequestedTypeRootItems(cRow);
						cRow.setColBtnSitesEmpty(true);
						cRow.setSelectable(false);

						if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK"))
						{
							cRow.getColType().setValue(SpecimenCollectionType.SPECIMEN_COLLECTION_CLINIC);
							grdTestTypeComboChanged(SpecimenCollectionType.SPECIMEN_COLLECTION_CLINIC);
						}
						else if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH"))
						{
							cRow.getColType().setValue(SpecimenCollectionType.NOW);
							grdTestTypeComboChanged(SpecimenCollectionType.NOW);
						}
					}
				}
				else if (childItem.getSelectedIsNotNull() && !childItem.getSelected().booleanValue())
				{
					grdTestRow cRow = null;
					boolean bRowExists = false;
					int i;
					for (i = 0; i < row.getRows().size(); i++)
					{
						cRow = row.getRows().get(i);
						if (cRow.getColSiteHidden().getIGenericItemInfoID().equals(childItem.getItem().getIGenericItemInfoID()))
						{
							bRowExists = true;
							break;
						}
					}

					if (bRowExists)
						row.getRows().remove(i);
				}
			}
		}
	}

	private void addOrderInvestigationCopyToContext(OrderInvestigationVo voOrderInvestCopy)
	{
		OrderInvestigationVoCollection voCollOrderInvest = form.getGlobalContext().OCRR.getOrderInvestigationCollection();
		if (voCollOrderInvest == null)
			voCollOrderInvest = new OrderInvestigationVoCollection();

		voCollOrderInvest.add(voOrderInvestCopy);
		form.getGlobalContext().OCRR.setOrderInvestigationCollection(voCollOrderInvest);
	}

	private void setOrderPriorityInGrid()
	{
		boolean missingPriorities = false;
		
		// set the order investigation collection modified in the global context back into the grid
		OrderPriorityCollection orderPriorityColl = new OrderPriorityCollection();

		grdTestRow row = null;
		OrderInvestigationVoCollection voCollOrderInvestigation = form.getGlobalContext().OCRR.getOrderInvestigationCollection();

		// Set priority for Pathology Investigations and get distinct priority
		for (int i = 0; i < form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getAllRows().length; i++)
		{
			row = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getAllRows()[i];
			if (row.getValue() != null)
			{
				if (voCollOrderInvestigation != null)
				{
					for (int p = 0; p < voCollOrderInvestigation.size(); p++)
					{
						if (voCollOrderInvestigation.get(p).getOrderPriority() == null)
							missingPriorities = true;
						
						if (!orderPriorityColl.contains(voCollOrderInvestigation.get(p).getOrderPriority()))
							orderPriorityColl.add(voCollOrderInvestigation.get(p).getOrderPriority());
						if (row.getValue().getInvestigationIsNotNull() && voCollOrderInvestigation.get(p).getInvestigationIsNotNull() && row.getValue().getInvestigation().equals(voCollOrderInvestigation.get(p).getInvestigation()))
						{
							// Do not replace the value in the grid, just update it with Order Priority
							row.getValue().setOrderPriority(voCollOrderInvestigation.get(p).getOrderPriority());
						}
					}
				}
			}
		}

		// Get distinct priority with the Radiology investigations and the pathology set above
		if (voCollOrderInvestigation != null && voCollOrderInvestigation.size() > 0)
		{
			for (int p = 0; p < voCollOrderInvestigation.size(); p++)
			{
				if (voCollOrderInvestigation.get(p).getInvestigationIsNotNull() && voCollOrderInvestigation.get(p).getInvestigation().getInvestigationIndexIsNotNull() && voCollOrderInvestigation.get(p).getInvestigation().getInvestigationIndex().getCategoryIsNotNull())
				{
					if (voCollOrderInvestigation.get(p).getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICALIMAGING))
					{
						if (voCollOrderInvestigation.get(p).getOrderPriority() == null)
							missingPriorities = true;
						
						if (!orderPriorityColl.contains(voCollOrderInvestigation.get(p).getOrderPriority()))
							orderPriorityColl.add(voCollOrderInvestigation.get(p).getOrderPriority());
					}
				}
			}

		}
		
		// Get distinct priority with the Clinical investigations than the ones set above (Pathology & Radiology)
		if (voCollOrderInvestigation != null)
		{
			for (OrderInvestigationVo orderInvestigation : voCollOrderInvestigation)
			{
				if (Category.CLINICAL.equals(orderInvestigation.getInvestigation().getInvestigationIndex().getCategory()))
				{
					if (orderInvestigation.getOrderPriority() == null)
						missingPriorities = true;
					
					if (!orderPriorityColl.contains(orderInvestigation.getOrderPriority()))
						orderPriorityColl.add(orderInvestigation.getOrderPriority());
				}
			}
		}
		
		ArrayList<?> orderPriorities = form.lyrDetails().tabGenDetails().cmbPriority().getValues();

		if (orderPriorityColl.size() > 1 || (missingPriorities && orderPriorityColl.size() >= 1))
			form.lyrDetails().tabGenDetails().cmbPriority().setValue(OrderPriority.VARIOUS);
		else if (orderPriorityColl.size() == 1)
		{
			if (orderPriorities.contains(orderPriorityColl.get(0)))
				form.lyrDetails().tabGenDetails().cmbPriority().setValue(orderPriorityColl.get(0));
		}
		else
			form.lyrDetails().tabGenDetails().cmbPriority().setValue(null);
	}

	/**
	 * display the order that is awaiting authorisation
	 * 
	 * @param order
	 * @throws PresentationLogicException
	 */
	private void populateScreenFromData(OcsOrderVo order) throws PresentationLogicException
	{
		if (order != null)
		{
			form.getLocalContext().setOcsOrder(order);
			rebuildComponentsFromData(order);
			form.getGlobalContext().OCRR.setMyOrderQuestions(getQuestionsFromNonCancelledInvestigations(order));
			loadComponentsAndQuestions();

			prePopulateOrderInvestigations();

			form.lyrDetails().tabClinicalNotes().txtAdditionalNotes().setValue(order.getAdditClinNotes());
			form.lyrDetails().tabGenDetails().qmbOrderedBy().newRow(order.getOrderedBy(), order.getOrderedBy().toString());
			form.lyrDetails().tabGenDetails().qmbOrderedBy().setValue(order.getOrderedBy());
			
			// WDEV-4758
			if (ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
			{
				if (order.getCareContextIsNotNull() && order.getCareContext().getPasEventIsNotNull())
					form.lyrDetails().tabGenDetails().txtPasEpisodeID().setValue(order.getCareContext().getPasEvent().getPasEpisodeId());
			}

			ILocation iLocation = null;
			if (order.getPatientLocationIsNotNull())
			{
				iLocation = domain.getParentHospital(order.getPatientLocation());
				form.lyrDetails().tabGenDetails().cmbHospital().setValue(iLocation);
				verifyHospitalCombo(iLocation);

				form.lyrDetails().tabGenDetails().qmbLocation().newRow(order.getPatientLocation(), order.getPatientLocation().toString());
				form.lyrDetails().tabGenDetails().qmbLocation().setValue(order.getPatientLocation());
				
				if (LocationType.WARD.equals(order.getPatientLocation().getType()))
				{
					form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoWard);
				}
				else if (LocationType.ANE.equals(order.getPatientLocation().getType()))
				{
					form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoAandE);
				}
				else
				{
					form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoOther);
				}

			}

			if (order.getPatientClinicIsNotNull())
			{
				form.lyrDetails().tabGenDetails().qmbLocation().newRow(order.getPatientClinic(), order.getPatientClinic().getClinicName());
				form.lyrDetails().tabGenDetails().qmbLocation().setValue(order.getPatientClinic());
				form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoClinic);
				if (iLocation == null)
				{
					iLocation = domain.getParentHospital(order.getPatientClinic());
					form.lyrDetails().tabGenDetails().cmbHospital().setValue(iLocation);
					verifyHospitalCombo(iLocation);
				}

				// WDEV-11915 - starts here
				loadOutpatientDepartment();
				setDepartmentValue();
				// WDEV-11915 - ends here
			}
			
			if (order.getOutpatientDeptIsNotNull())
			{
				form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoClinic);
				
				
				if (!form.lyrDetails().tabGenDetails().cmbDepartment().getValues().contains(order.getOutpatientDept()))
				{
					form.lyrDetails().tabGenDetails().cmbDepartment().newRow(order.getOutpatientDept(), order.getOutpatientDept().getName());
				}
			
				form.lyrDetails().tabGenDetails().cmbDepartment().setValue(order.getOutpatientDept());
				
				if (form.lyrDetails().tabGenDetails().cmbHospital().getValue() == null)
				{
					iLocation = domain.getParentHospital(order.getOutpatientDept());
					
					form.lyrDetails().tabGenDetails().cmbHospital().setValue(iLocation);
					verifyHospitalCombo(iLocation);
				}
			}

			// WDEV-13999
			if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals(CARE_UK_UI_ORDER)) // - CARE UK project only functionality -
			{
				fillInRefManClinicalDetails(order);
			}


			form.lyrDetails().tabGenDetails().qmbClinician().newRow(order.getResponsibleClinician(), order.getResponsibleClinician().toString());
			form.lyrDetails().tabGenDetails().qmbClinician().setValue(order.getResponsibleClinician());
			form.lyrDetails().tabGenDetails().cmbOrderCategory().setValue(order.getOrderCategory());
			
			// Set bleep number
			form.lyrDetails().tabGenDetails().txtBleepNo().setValue(order.getBleepExtNumber());

			form.lyrDetails().tabRadDetails().cmbPatMobility().setValue(order.getPatMobility());

			// Paper Report To
			if (order.getReportToIsNotNull())
			{
				initialiseReportToGrid();

				if (ConfigFlag.UI.HIDE_REPORT_TO_FIELD_WHEN_ORDERING.getValue() == false)
					for (int i = 0; i < order.getReportTo().size(); i++)
					{
						OcsReportToVo voReportTo = order.getReportTo().get(i);
						DynamicGridRow row = form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().newRow();
						row.setReadOnly(true);
						if (voReportTo.getValueIsNotNull())
						{
							if (voReportTo.getTypeIsNotNull())
							{
								if (voReportTo.getType().equals(ReportToType.FREE) || voReportTo.getType().equals(ReportToType.MOS) || voReportTo.getType().equals(ReportToType.GP))
								{
									DynamicGridCell cellReportTo = row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(REPORTTO_COLUMN), DynamicCellType.STRING);
									cellReportTo.setValue(parseReportToString(voReportTo.getValue(), 0));

									DynamicGridCell cellAddress = row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(ADDRESS_COLUMN), DynamicCellType.STRING);
									cellAddress.setValue(parseReportToString(voReportTo.getValue(), 1));
								}
								else if (voReportTo.getType().equals(ReportToType.WARD) || voReportTo.getType().equals(ReportToType.OUTPAT))
								{
									DynamicGridCell cellReportTo = row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(REPORTTO_COLUMN), DynamicCellType.STRING);
									cellReportTo.setValue(parseReportToString(voReportTo.getValue(), 0));

									DynamicGridCell cellWardClinic = row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(WARDOUTPAT_COLUMN), DynamicCellType.STRING);
									cellWardClinic.setValue(parseReportToString(voReportTo.getValue(), 1));

									DynamicGridCell cellAddress = row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(ADDRESS_COLUMN), DynamicCellType.STRING);
									cellAddress.setValue(parseReportToString(voReportTo.getValue(), 2));
								}

								row.setValue(voReportTo);
								row.setIdentifier(voReportTo.getType());
							}
						}
					}
			}
		}
	}

	private OcsQASessionVo getQuestionsFromNonCancelledInvestigations(OcsOrderVo order)
	{
		if (order == null || order.getClinicalInfo() == null)
			return null;
		
		// Create a clone of the clinical Info information 
		OcsQASessionVo clinicalInfo = (OcsQASessionVo) order.getClinicalInfo().clone();
		
		if (order.getInvestigations() != null)
		{
			for (OrderInvestigationVo investigation : order.getInvestigations())
			{
				if (OrderInvStatus.CANCEL_REQUEST.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus())
						|| OrderInvStatus.CANCELLED.equals(investigation.getOrdInvCurrentStatus().getOrdInvStatus()))
				{
					for (CategoryQuestionAnswerVo questionAnswers : clinicalInfo.getCategoryQuestionAnswers())
					{
						if (questionAnswers.getClinicalInvestigationQuestionAnswers() != null)
						{
							for (int i = questionAnswers.getClinicalInvestigationQuestionAnswers().size() - 1; i >= 0; i--)
							{
								InvestigationQuestionAnswerVo investigationAnswers = questionAnswers.getClinicalInvestigationQuestionAnswers().get(i);
								
								if (investigationAnswers.getInvestigation().getInvestigationIndex().equals(investigation.getInvestigation().getInvestigationIndex()))
								{
									questionAnswers.getClinicalInvestigationQuestionAnswers().remove(i);
								}
							}
						}
						
						if (questionAnswers.getServiceQuestionAnswers() != null)
						{
							for (ServiceQuestionAnswerVo serviceAnswers : questionAnswers.getServiceQuestionAnswers())
							{
								if (serviceAnswers.getInvestigationQuestionAnswers() != null)
								{
									for (int i = serviceAnswers.getInvestigationQuestionAnswers().size() - 1; i >= 0; i--)
									{
										InvestigationQuestionAnswerVo investigationAnswers = serviceAnswers.getInvestigationQuestionAnswers().get(i);
										
										if (investigationAnswers.getInvestigation().getInvestigationIndex().equals(investigation.getInvestigation().getInvestigationIndex()))
										{
											serviceAnswers.getInvestigationQuestionAnswers().remove(i);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		return clinicalInfo;
	}

	/**
	 * WDEV-13999
	 */
	private void fillInRefManClinicalDetails(OcsOrderVo order)
	{
		if (order == null)
			return;
		
		// Copy & default in 'Responsible HCP' from order to amend
		form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().clear();
		form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().newRow(order.getResponsibleClinician(), order.getResponsibleClinician().toString());
		form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().setValue(order.getResponsibleClinician());

		// Copy 'Ordering HCP'
		form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().clear();

		HcpLiteVo orderingHCP = domain.getHCPbyMoS(order.getOrderedBy());

		if (orderingHCP != null) // Old orders might not have this fields filled in
		{
			form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().newRow(orderingHCP, orderingHCP.toString());
			form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().setValue(orderingHCP);
		}
	}

	private String parseReportToString(String value, int i)
	{
		String[] arrItems = value.split("\t");

		// index will be out of bounds
		if (i == arrItems.length)
			return null;

		return arrItems[i];
	}

	private void verifyHospitalCombo(ILocation iLocation)
	{
		// hospital made inactive or type changed etc.
		if (form.lyrDetails().tabGenDetails().cmbHospital().getValue() == null)
		{
			if (iLocation != null)
			{
				form.lyrDetails().tabGenDetails().cmbHospital().newRow(iLocation, iLocation.getName());
				form.lyrDetails().tabGenDetails().cmbHospital().setValue(iLocation);
			}
		}
	}

	private void rebuildComponentsFromData(OcsOrderVo voOcsOrder)
	{
		// gather the orderinvestigation records and populate the
		// MyOrderComponents Global Context
		MyOrderComponentVoCollection components = new MyOrderComponentVoCollection();

		if (voOcsOrder.getInvestigationsIsNotNull())
		{
			for (int i = 0; i < voOcsOrder.getInvestigations().size(); i++)
			{
				OrderInvestigationVo voOrderInv = voOcsOrder.getInvestigations().get(i);
				
				if (OrderInvStatus.CANCELLED.equals(voOrderInv.getOrdInvCurrentStatus().getOrdInvStatus())
						|| OrderInvStatus.CANCEL_REQUEST.equals(voOrderInv.getOrdInvCurrentStatus().getOrdInvStatus()))
					continue;

				MyOrderComponentVo component = new MyOrderComponentVo();
				component.setCategory(voOrderInv.getInvestigation().getInvestigationIndex().getCategory());
				component.setAdditionalLocationInfo(voOrderInv.getInvestigation().getNameWithLocationInfo());
				component.setComponentType(SelectAndOrderComponentType.INVESTIGATION);
				component.setGenderSpecific(voOrderInv.getInvestigation().getInvestigationIndex().getGenderSpecific());
				component.setHelpText(voOrderInv.getInvestigation().buildHelpTextTooltip());
				component.setID(voOrderInv.getInvestigation().getID_Investigation());
				component.setIsAddon(voOrderInv.getInvestigation().getIsAddon());
				component.setPhlebMayCollect(voOrderInv.getInvestigation().getInvestigationIndex().getPhlebMayCollect());
				component.setRequiresSite(voOrderInv.getInvestigation().getInvestigationIndex().getRequiresSiteSpecifier());
				component.setServiceID(voOrderInv.getInvestigation().getProviderService() != null && voOrderInv.getInvestigation().getProviderService().getLocationService() != null ? voOrderInv.getInvestigation().getProviderService().getLocationService().getService().getID_Service() : null);
				component.setText(voOrderInv.getInvestigation().getInvestigationIndex().getName());
				component.setTooltip(voOrderInv.getInvestigation().getInvestigationIndex().getDescription());

				components.add(component);
			}

			components.sort(new MyOrderComponentComparator());//WDEV-14912
			form.getGlobalContext().OCRR.setMyOrderComponents(components);
		}
	}

	private void updateControlsState()
	{
		form.getContextMenus().getOCRRMyOrderReportToAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getOCRRMyOrderReportToADDMOSItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getOCRRMyOrderReportToADDGPItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getOCRRMyOrderReportToADDOUTPATItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getOCRRMyOrderReportToADDWARDItem().setVisible(form.getMode().equals(FormMode.EDIT));
		
		boolean investigationSelected = form.treeComponents().getSelectedNode() != null
										&& (((form.treeComponents().getSelectedNode().getValue() instanceof MyOrderChildComponentVo)
												&& SelectAndOrderComponentType.INVESTIGATION.equals(((MyOrderChildComponentVo) form.treeComponents().getSelectedNode().getValue()).getComponentType()))
											||
											((form.treeComponents().getSelectedNode().getValue() instanceof MyOrderComponentVo)
												&& SelectAndOrderComponentType.INVESTIGATION.equals(((MyOrderComponentVo) form.treeComponents().getSelectedNode().getValue()).getComponentType())));
		
		form.getContextMenus().getOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem().setVisible(investigationSelected);
		
		if (form.lyrDetails().tabGenDetails() != null && form.lyrDetails().tabGenDetails().dyngrdReportTo() != null)
		{
			if (form.getMode().equals(FormMode.EDIT))
				form.lyrDetails().tabGenDetails().dyngrdReportTo().setReadOnly(false);
			else
				form.lyrDetails().tabGenDetails().dyngrdReportTo().setReadOnly(true);
		}
		
		// Show the BLEEP number controls
		form.lyrDetails().tabGenDetails().lblBleepNo().setVisible(ConfigFlag.GEN.SITE_USES_ORDER_BLEEP_EXT_NUMBER.getValue());
		form.lyrDetails().tabGenDetails().txtBleepNo().setVisible(ConfigFlag.GEN.SITE_USES_ORDER_BLEEP_EXT_NUMBER.getValue());
		
		// Mark Order Priority as mandatory / non-mandatory
		form.lyrDetails().tabGenDetails().cmbPriority().setRequired(isOrderPriorityMandatory(form.getGlobalContext().OCRR.getMyOrderComponents()));

		// WDEV-11915 - starts here
		boolean isClinicRdoSelected = grpPatientLocationEnumeration.rdoClinic.equals(form.lyrDetails().tabGenDetails().grpPatientLocation().getValue());

		// WDEV-12845
		// Field "Outpatient Department" on General Order Details tab is hidden
		// if the DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY flag is set to TRUE
		if (FormMode.EDIT.equals(form.getMode()))
		{
			form.lyrDetails().tabGenDetails().lblOutpatient().setVisible(isClinicRdoSelected && !ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue());
			form.lyrDetails().tabGenDetails().lblDepartment().setVisible(isClinicRdoSelected && !ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue());
			form.lyrDetails().tabGenDetails().cmbDepartment().setVisible(isClinicRdoSelected && !ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue());
		}
		else
		{
			form.lyrDetails().tabGenDetails().lblOutpatient().setVisible(isClinicRdoSelected && !ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue());
			form.lyrDetails().tabGenDetails().lblDepartment().setVisible(isClinicRdoSelected && !ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue());
			form.lyrDetails().tabGenDetails().cmbDepartment().setVisible(isClinicRdoSelected && !ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue());

			form.lyrDetails().tabGenDetails().cmbDepartment().setEnabled(false);
		}

		// WDEV-13890
		// If the config flag ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS is set to "Outpatient Department - Hide Clinic" && Clinic is selected
		// then hide the "Patient Location" locations
		boolean hideClinicFlag = HIDE_CLINIC_STRING.equals(ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue());

		if (FormMode.EDIT.equals(form.getMode()))
		{
			form.lyrDetails().tabGenDetails().lblPatientLocation().setVisible(!(hideClinicFlag && isClinicRdoSelected));
			form.lyrDetails().tabGenDetails().qmbLocation().setVisible(!(hideClinicFlag && isClinicRdoSelected));
		}
		else if (FormMode.VIEW.equals(form.getMode()))
		{
			form.lyrDetails().tabGenDetails().lblPatientLocation().setVisible(!(hideClinicFlag && isClinicRdoSelected));
			form.lyrDetails().tabGenDetails().qmbLocation().setVisible(!(hideClinicFlag && isClinicRdoSelected));
			form.lyrDetails().tabGenDetails().qmbLocation().setEnabled(false);
		}

		form.lyrDetails().tabGenDetails().qmbLocation().setRequired(((ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue().equals("Clinic") || ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue().equals("Clinic and Outpatient Department")) && grpPatientLocationEnumeration.rdoClinic.equals(form.lyrDetails().tabGenDetails().grpPatientLocation().getValue())) || !grpPatientLocationEnumeration.rdoClinic.equals(form.lyrDetails().tabGenDetails().grpPatientLocation().getValue()));

		// WDEV-13890
		// If the config flag ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS is set to "Outpatient Department - Hide Clinic"
		// then 'Outpatient Department' is mandatory
		form.lyrDetails().tabGenDetails().cmbDepartment().setRequired((ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue().equals("Outpatient Department") || hideClinicFlag || ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue().equals("Clinic and Outpatient Department")) && grpPatientLocationEnumeration.rdoClinic.equals(form.lyrDetails().tabGenDetails().grpPatientLocation().getValue()));
		// WDEV-11915 - ends here

		form.lyrDetails().tabRadDetails().cmbPatMobility().setEnabled(form.getMode().equals(FormMode.EDIT));

		// WDEV-13999 - Ordering HCP (for CARE UK controls)
		form.lyrDetails().tabClinicalNotes().lblOrderingHCP().setVisible(CARE_UK_UI_ORDER.equals(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue()));
		form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().setVisible(CARE_UK_UI_ORDER.equals(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue()));
		form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().setEnabled(CARE_UK_UI_ORDER.equals(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue()) && FormMode.EDIT.equals(form.getMode()));

		// WDEV-13999 - Responsible HCP (for CARE UK controls)
		form.lyrDetails().tabClinicalNotes().lblResponsibleHCP().setVisible(CARE_UK_UI_ORDER.equals(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue()));
		form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().setVisible(CARE_UK_UI_ORDER.equals(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue()));
		form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().setEnabled(CARE_UK_UI_ORDER.equals(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue()) && FormMode.EDIT.equals(form.getMode()));
	}

	private void setInitialView()
	{
		form.btnOrder().setEnabled(false);

		form.lyrDetails().tabGenDetails().setHeaderVisible(false);
		form.lyrDetails().tabRadDetails().setHeaderVisible(false);
		form.lyrDetails().tabPathDetails().setHeaderVisible(false);

		if (form.getLocalContext().getOcsOrder() == null || form.getLocalContext().getOcsOrder().getID_OcsOrderSession() == null)
		{
			// WDEV-12841
			// Get latest PasEvent for patient
			PasEventShortVo pasEvent = domain.getLatestPasEvent(form.getGlobalContext().Core.getPatientShort());
			
			if (pasEvent != null && pasEvent.getEpisodeFinancialClass() != null)
				form.lyrDetails().tabGenDetails().cmbOrderCategory().setValue(pasEvent.getEpisodeFinancialClass());
		}
		

		if (!form.getGlobalContext().OCRR.getOrderAwaitingAuthorisationIsNotNull())
		{
			prePopulatePatientLocationAndClinician();
		}
		
		
		bindOrderPriority(form.getGlobalContext().OCRR.getMyOrderComponents());

		// WDEV-4758
		if (!ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
		{
			form.lyrDetails().tabGenDetails().lblPasEpisodeID().setVisible(false);
			form.lyrDetails().tabGenDetails().txtPasEpisodeID().setVisible(false);
		}
		else
		{
			form.lyrDetails().tabGenDetails().txtPasEpisodeID().setEnabled(false);
		}

		// WDEV-6693
		if (!ConfigFlag.UI.ALLOW_CLINICALNOTES_WHEN_ORDERING.getValue())
		{
			form.lyrDetails().tabClinicalNotes().txtAdditionalNotes().setVisible(false);
			form.lyrDetails().tabClinicalNotes().lblAdditional().setVisible(false);
		}
	}


	private void bindOrderPriority(MyOrderComponentVoCollection myOrderComponents)
	{
		// Clear Order Priority combo-box
		form.lyrDetails().tabGenDetails().cmbPriority().clear();
		
		boolean hasPathologyInvestigation = hasPathologyInvestigations(myOrderComponents);
		boolean hasRadiologyInvestigation = hasRadiologyInvestigations(myOrderComponents);
		boolean hasClinicalInvestigation = hasClinicalInvestigations(myOrderComponents);
		
		OrderPriorityCollection priorities = domain.listOrderPriority(hasPathologyInvestigation, hasRadiologyInvestigation, hasClinicalInvestigation);
		
		for (int i = 0; i < priorities.size(); i++)
		{
			OrderPriority orderPriority = priorities.get(i);
			form.lyrDetails().tabGenDetails().cmbPriority().newRow(orderPriority, orderPriority.getText());
		}
		
		form.lyrDetails().tabGenDetails().cmbPriority().removeRow(OrderPriority.VARIOUS);
	}
	
	
	private boolean isOrderPriorityMandatory(MyOrderComponentVoCollection myOrderComponents)
	{
		if (myOrderComponents == null)
			return false;
		
		boolean hasPathologyInvestigations	= hasPathologyInvestigations(myOrderComponents);
		boolean hasRadiologyInvestigations	= hasRadiologyInvestigations(myOrderComponents);

		// Check if Order Priority for Pathology investigations is mandatory for this order
		// (Contains Pathology investigations and the flag is set)
		boolean isPathologyRequired = hasPathologyInvestigations
										&& (ConfigFlag.UI.CATEGORIES_MANDATORY_ORDER_PRIORITY.getValue().equals(PATHOLOGY_PRIORITY_REQUIRED)
												|| ConfigFlag.UI.CATEGORIES_MANDATORY_ORDER_PRIORITY.getValue().equals(PATHOLOGY_AND_RADIOLOGY_REQUIRED));
		
		// Check if Order Priority for Radiology investigations is mandatory
		// (Contains Radiology investigations and the flag is set)
		boolean isRadiologyRequired = hasRadiologyInvestigations
										&& (ConfigFlag.UI.CATEGORIES_MANDATORY_ORDER_PRIORITY.getValue().equals(RADIOLOGY_PRIORITY_REQUIRED)
												|| ConfigFlag.UI.CATEGORIES_MANDATORY_ORDER_PRIORITY.getValue().equals(PATHOLOGY_AND_RADIOLOGY_REQUIRED));
		
		return isPathologyRequired || isRadiologyRequired;
	}


	private boolean hasClinicalInvestigations(MyOrderComponentVoCollection myOrderComponents)
	{
		if (myOrderComponents == null)
			return false;
		
		for (MyOrderComponentVo component : myOrderComponents)
		{
			if (Category.CLINICAL.equals(component.getCategory()))
				return true;
		}
		
		return false;
	}

	private boolean hasRadiologyInvestigations(MyOrderComponentVoCollection myOrderComponents)
	{
		if (myOrderComponents == null)
			return false;
		
		for (MyOrderComponentVo component : myOrderComponents)
		{
			if (Category.CLINICALIMAGING.equals(component.getCategory()))
				return true;
		}
		
		return false;
	}

	private boolean hasPathologyInvestigations(MyOrderComponentVoCollection myOrderComponents)
	{
		if (myOrderComponents == null)
			return false;
		
		for (MyOrderComponentVo component : myOrderComponents)
		{
			if (Category.PATHOLOGY.equals(component.getCategory()))
				return true;
		}

		return false;
	}

	/**
	 * //WDEV-13401
	 */
	private void setOrderButtonText()
	{
		String text = "";

		ORDERSTATE clinicalImagingState = ORDERSTATE.REQUESTING_AUTHORISATION;
		boolean canAuthoriseClinImaging = engine.hasRight(AppRight.CAN_AUTHORIZE_CLINICAL_IMAGING_ORDERS);
		if (canAuthoriseClinImaging == true)
			clinicalImagingState = ORDERSTATE.AUTHORISING;

		if (doesOrderContainInvType(Category.CLINICALIMAGING))
		{
			if (clinicalImagingState.equals(ORDERSTATE.REQUESTING_AUTHORISATION))
				text = "Request Clinical Imaging Investigation(s) ";
			else if (clinicalImagingState.equals(ORDERSTATE.AUTHORISING))
				text = "Order Clinical Imaging Investigation(s) ";
		}

		ORDERSTATE pathState = ORDERSTATE.REQUESTING_AUTHORISATION;
		boolean canAuthorisePathology = engine.hasRight(AppRight.CAN_AUTHORIZE_PATHOLOGY_ORDERS);
		if (canAuthorisePathology == true)
			pathState = ORDERSTATE.AUTHORISING;

		if (doesOrderContainInvType(Category.PATHOLOGY))
		{
			if (text != "")
				text += " / ";
			if (pathState.equals(ORDERSTATE.REQUESTING_AUTHORISATION))
				text += "Request Pathology Investigation(s) ";
			else if (pathState.equals(ORDERSTATE.AUTHORISING))
				text += "Order Pathology Investigation(s) ";
		}

		// WDEV-13684
		if (text == null || text.length() == 0)
		{
			text = "Order Investigation(s)";
		}

		form.btnOrder().setText(text);
	}

	private void initialisePathSpecimenGrid(int iTab)
	{
		switch (iTab)
		{
			case GRID_NOW:
				if (form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow().getColumns().size() == 0)
					initialiseNowOrPatientGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow());
				break;
			case GRID_PHLEB_OUTPAT:
				if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat().getColumns().size() == 0)
					initialisePhlebGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat());
				break;
			case GRID_PHLEB_INPAT:
				if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat().getColumns().size() == 0)
					initialisePhlebGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat());
				break;
			case GRID_PATIENT:
				if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient().getColumns().size() == 0)
					initialiseNowOrPatientGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient());
				break;
			case GRID_OTHER:
				if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getColumns().size() == 0)
				{
					DynamicGridColumn col1 = form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getColumns().newColumn("Specimens", DISCIPLINE_COLUMN);
					col1.setWidth(140);
					col1.setDynamicWidthSupported(true);

					DynamicGridColumn col2 = form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getColumns().newColumn("", SPECIMENTYPE_COLUMN);
					col2.setWidth(120);
					col2.setDynamicWidthSupported(true);

					DynamicGridColumn col3 = form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getColumns().newColumn("Collection", INSTRUCTIONS_LABEL_COLUMN);
					col3.setWidth(100);
					col3.setDynamicWidthSupported(true);

					DynamicGridColumn col4 = form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getColumns().newColumn("", INSTRUCTIONS_COLUMN);
					col4.setWidth(170);
					col4.setDynamicWidthSupported(true);

					DynamicGridColumn col5 = form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getColumns().newColumn("", QTY_COLUMN);
					col5.setWidth(0);
					col5.setDynamicWidthSupported(true);

					DynamicGridColumn col6 = form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getColumns().newColumn("", PATTYPE_COLUMN);
					col6.setWidth(140);
					col6.setDynamicWidthSupported(true);

					prePopulateOtherControls();
				}
				break;
			case GRID_ALREADY:
				if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getColumns().size() == 0)
				{
					DynamicGridColumn col1 = form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getColumns().newColumn("Specimens", DISCIPLINE_COLUMN);
					col1.setWidth(140);
					col1.setDynamicWidthSupported(true);

					DynamicGridColumn col2 = form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getColumns().newColumn("", SPECIMENTYPE_COLUMN);
					col2.setWidth(120);
					col2.setDynamicWidthSupported(true);

					DynamicGridColumn col3 = form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getColumns().newColumn("Collection", INSTRUCTIONS_LABEL_COLUMN);
					col3.setWidth(100);
					col3.setDynamicWidthSupported(true);

					DynamicGridColumn col4 = form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getColumns().newColumn("", INSTRUCTIONS_COLUMN);
					col4.setWidth(170);
					col4.setDynamicWidthSupported(true);

					DynamicGridColumn col5 = form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getColumns().newColumn("", QTY_COLUMN);
					col5.setWidth(0);
					col5.setDynamicWidthSupported(true);

					prePopulateAlreadyControls();
				}
				break;
			default:
		}
	}

	private void prePopulateAlreadyControls()
	{
		form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dteSpecAlreadyCollected().setValue(new Date());
		form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().btnApplySpecAlreadyCollected().setEnabled(true);
	}

	private void initialiseNowOrPatientGrid(DynamicGrid dyngrdNowOrPatient)
	{
		DynamicGridColumn col1 = dyngrdNowOrPatient.getColumns().newColumn("Specimens", DISCIPLINE_COLUMN);
		col1.setWidth(150);
		col1.setDynamicWidthSupported(true);

		DynamicGridColumn col2 = dyngrdNowOrPatient.getColumns().newColumn("", SPECIMENTYPE_COLUMN);
		col2.setWidth(150);
		col2.setDynamicWidthSupported(true);

		DynamicGridColumn col3 = dyngrdNowOrPatient.getColumns().newColumn("Collection", INSTRUCTIONS_LABEL_COLUMN);
		col3.setWidth(100);
		col3.setDynamicWidthSupported(true);

		DynamicGridColumn col4 = dyngrdNowOrPatient.getColumns().newColumn("", INSTRUCTIONS_COLUMN);
		col4.setWidth(160);
		col4.setDynamicWidthSupported(true);

		DynamicGridColumn col5 = dyngrdNowOrPatient.getColumns().newColumn("", QTY_COLUMN);
		col5.setWidth(0);
		col5.setDynamicWidthSupported(true);
	}

	private void initialisePhlebGrid(DynamicGrid phlebGrid)
	{
		DynamicGridColumn col1 = phlebGrid.getColumns().newColumn("Specimens", DISCIPLINE_COLUMN);
		col1.setWidth(140);
		col1.setDynamicWidthSupported(true);

		DynamicGridColumn col2 = phlebGrid.getColumns().newColumn("", SPECIMENTYPE_COLUMN);
		col2.setWidth(120);
		col2.setDynamicWidthSupported(true);

		DynamicGridColumn col3 = phlebGrid.getColumns().newColumn("Collection", INSTRUCTIONS_LABEL_COLUMN);
		col3.setWidth(100);
		col3.setDynamicWidthSupported(true);

		DynamicGridColumn col4 = phlebGrid.getColumns().newColumn("", INSTRUCTIONS_COLUMN);
		col4.setWidth(300);
		col4.setDynamicWidthSupported(true);

		DynamicGridColumn col5 = phlebGrid.getColumns().newColumn("", QTY_COLUMN);
		col5.setWidth(0);
		col5.setDynamicWidthSupported(true);

		if (phlebGrid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat()))
		{
			DynamicGridColumn col6 = phlebGrid.getColumns().newColumn("", DYN_COLAT);
			col6.setWidth(0);
			col6.setDynamicWidthSupported(true);

			DynamicGridColumn col7 = phlebGrid.getColumns().newColumn("", DYN_COLDURATION);
			col7.setWidth(0);
			col7.setDynamicWidthSupported(true);

			form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().cmbDuration().setValue(OutPatientDuration.DAYS);
			form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().intDuration().setValue(0);
		}
		else
		{
			DynamicGridColumn col6 = phlebGrid.getColumns().newColumn("", DYN_COLDATE);
			col6.setWidth(0);
			col6.setDynamicWidthSupported(true);

			DynamicGridColumn col7 = phlebGrid.getColumns().newColumn("", DYN_COLTIME);
			col7.setWidth(0);
			col7.setDynamicWidthSupported(true);
		}

		form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dteCollect().setValue(new Date());
		dteCollectValueChanged();
	}

	// return if the selection has changed
	private boolean loadComponentsAndQuestions() throws PresentationLogicException
	{
		MyOrderComponentVoCollection components = form.getGlobalContext().OCRR.getMyOrderComponents();
		
		if (!hasInvestigationSelectionChanged(components))
			return false;

		components = form.getGlobalContext().OCRR.getMyOrderComponents();

		MyOrderQuestionsPopulation questionsPopulation = getMyOrderQuestionPopulationHelperFactory();

		OcsQASessionVo voOcsQASession = form.getGlobalContext().OCRR.getMyOrderQuestions();
		if (voOcsQASession == null)
			voOcsQASession = new OcsQASessionVo();
		questionsPopulation.populate(voOcsQASession);

		form.treeComponents().getNodes().clear();
		form.getLocalContext().setSelectedComponents(components != null ? (MyOrderComponentVoCollection) components.clone() : null);

		if (components == null)
		{
			questionsPopulation.clearQuestions();
			return true;
		}

		loadComponents(components);
		return true;
	}

	// wdev-13855
	// return if the selection has changed
	private boolean loadComponentsAndQuestionsWithoutSelectionChanged() throws PresentationLogicException
	{
		MyOrderComponentVoCollection components = form.getGlobalContext().OCRR.getMyOrderComponents();

		if (!hasInvestigationChildSelectionChanged(components))
			return false;

		components = form.getGlobalContext().OCRR.getMyOrderComponents();

		MyOrderQuestionsPopulation questionsPopulation = getMyOrderQuestionPopulationHelperFactory();

		OcsQASessionVo voOcsQASession = form.getGlobalContext().OCRR.getMyOrderQuestions();
		if (voOcsQASession == null)
			voOcsQASession = new OcsQASessionVo();
		questionsPopulation.populate(voOcsQASession);

		form.treeComponents().getNodes().clear();
		form.getLocalContext().setSelectedComponents(components != null ? (MyOrderComponentVoCollection) components.clone() : null);

		if (components == null)
		{
			questionsPopulation.clearQuestions();
			return true;
		}

		loadComponents(components);
		return true;
	}

	// ----------
	private void loadComponents(MyOrderComponentVoCollection components)
	{
		for (int x = 0; x < components.size(); x++)
		{
			MyOrderComponentVo component = components.get(x);

			if (component != null)
			{
				boolean isProfile = false;
				TreeNode node = form.treeComponents().getNodes().add(component, component.getText());
				if (component.getTooltipIsNotNull())
					node.setTooltip(component.getTooltip());
				isProfile = component.getComponentTypeIsNotNull() && component.getComponentType().equals(SelectAndOrderComponentType.PROFILE);
				node.setExpandedImage(isProfile ? form.getImages().OCRR.Profile : form.getImages().OCRR.Investigation);
				node.setCollapsedImage(isProfile ? form.getImages().OCRR.Profile : form.getImages().OCRR.Investigation);
				node.setExpanded(true);

				if (component.getComponentsIsNotNull())
				{
					for (int y = 0; y < component.getComponents().size(); y++)
					{
						MyOrderChildComponentVo childComponent = component.getComponents().get(y);

						TreeNode childNode = node.getNodes().add(childComponent, childComponent.getText());
						if (childComponent.getTooltipIsNotNull())
							childNode.setTooltip(childComponent.getTooltip());
						isProfile = childComponent.getComponentTypeIsNotNull() && childComponent.getComponentType().equals(SelectAndOrderComponentType.PROFILE);
						childNode.setExpandedImage(isProfile ? form.getImages().OCRR.Profile : form.getImages().OCRR.Investigation);
						childNode.setCollapsedImage(isProfile ? form.getImages().OCRR.Profile : form.getImages().OCRR.Investigation);
					}
				}
			}
		}
	}

	/**
	 * check if SelectAndOrderDialog was launched and selected investigations has changed
	 * 
	 * @return
	 */
	private boolean hasInvestigationSelectionChanged(MyOrderComponentVoCollection voCollReselected)
	{
		MyOrderComponentVoCollection voCollCurrent = form.getLocalContext().getSelectedComponents();

		if (voCollCurrent != null)
		{
			if (voCollReselected.size() != voCollCurrent.size())
			{
				if (voCollReselected.size() == 0)
				{
					if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("Standard"))
					{
						// WDEV-16600
						if (engine.isDialog())
							engine.open(form.getForms().OCRR.SelectAndOrderDialog);
						else
							engine.open(form.getForms().OCRR.SelectandOrder);
						
						return false;
					}
					else
						engine.close(DialogResult.CANCEL);
				}

				form.getGlobalContext().OCRR.setMyOrderComponents(voCollReselected);
				reInitialize();
				return true;
			}

			int count = 0;
			// go through the additional collection and see if there are any
			// differences against the current collection
			for (int i = 0; i < voCollReselected.size(); i++)
			{
				if (form.getLocalContext().getSelectedComponents().contains(voCollReselected.get(i)))
					count++;
			}

			if (count == form.getLocalContext().getSelectedComponents().size())
				return false;

			form.getGlobalContext().OCRR.setMyOrderComponents(voCollReselected);
			reInitialize();
		}
		return true;
	}

	// wdev-13855
	private int returnSIzeFromCollection(MyOrderComponentVoCollection voCollCurrent)
	{
		if (voCollCurrent == null || voCollCurrent.size() == 0)
		{
			return 0;
		}
		int nr = 0;
		for (int i = 0; i < voCollCurrent.size(); i++)
		{
			nr++;
			if (voCollCurrent.get(i).getComponentsIsNotNull())
				nr = nr + voCollCurrent.get(i).getComponents().size();
		}

		return nr;
	}

	// wdev-13855
	/**
	 * check if SelectAndOrderDialog was launched and selected investigations has changed
	 * 
	 * @return
	 */
	private boolean hasInvestigationChildSelectionChanged(MyOrderComponentVoCollection voCollReselected)
	{
		MyOrderComponentVoCollection voCollCurrent = form.getLocalContext().getSelectedComponents();

		if (voCollCurrent != null)
		{
			int nReselectedCol = returnSIzeFromCollection(voCollReselected);
			int nCurrentColl = returnSIzeFromCollection(voCollCurrent);
			if (nReselectedCol != nCurrentColl)
			{
				if (nReselectedCol == 0)
				{
					if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("Standard"))
					{
						engine.open(form.getForms().OCRR.SelectandOrder);
						return false;
					}
					else
						engine.close(DialogResult.CANCEL);
				}

				form.getGlobalContext().OCRR.setMyOrderComponents(voCollReselected);
				reInitialize();
				return true;
			}

			int count = 0;
			// go through the additional collection and see if there are any
			// differences against the current collection
			for (int i = 0; i < voCollReselected.size(); i++)
			{
				if (form.getLocalContext().getSelectedComponents().contains(voCollReselected.get(i)))
					count++;
			}

			if (count == form.getLocalContext().getSelectedComponents().size())
				return false;

			form.getGlobalContext().OCRR.setMyOrderComponents(voCollReselected);
			reInitialize();
		}
		return true;
	}

	// ----------

	private void reInitialize()
	{
		form.lyrDetails().showtabClinicalNotes();
		form.lyrDetails().tabClinicalNotes().setHeaderEnabled(true);

		form.lyrDetails().tabGenDetails().setHeaderVisible(false);
		form.lyrDetails().tabRadDetails().setHeaderVisible(false);
		form.lyrDetails().tabPathDetails().setHeaderVisible(false);
		form.lyrDetails().tabGenDetails().setHeaderEnabled(true);
		form.lyrDetails().tabRadDetails().setHeaderEnabled(true);
		form.lyrDetails().tabPathDetails().setHeaderEnabled(true);
		form.btnOrder().setEnabled(false);

		form.lyrDetails().tabPathDetails().btnGenerateSpecimens().setVisible(true);
		form.lyrDetails().tabRadDetails().btnContinueRad().setVisible(true);
		form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().cmbRequestedType().setValue(null);

		prePopulateOrderInvestigations();

		if (loadRequestedTestGrid() > 0)
			loadSpecimenRequestedTypes();

		/*
		 * WDEV-9457 if(doesOrderContainInvType(Category.CLINICAL) && (!doesOrderContainInvType(Category.PATHOLOGY) && !doesOrderContainInvType(Category.CLINICALIMAGING))) { showNextTabAndDisableCurrent(); form.lyrDetails().tabClinicalNotes().setHeaderEnabled(true); }
		 */
	}

	
	/**
	 * 
	 * @return
	 */
	private int loadRequestedTestGrid()
	{
		form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().clear();

		MyOrderComponentVoCollection components = form.getGlobalContext().OCRR.getMyOrderComponents();

		if (components == null)
			return 0;

		MyOrderComponentVoCollection addOns = new MyOrderComponentVoCollection();
		SiteCount count = new SiteCount();
		
		for (MyOrderComponentVo component : components)
		{
			GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow pRow;
			GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow cRow;

			if (component != null)
			{
				if (component.getCategoryIsNotNull() && component.getCategory().equals(Category.PATHOLOGY))
				{
					if (component.getComponentType().equals(SelectAndOrderComponentType.PROFILE))
					{
						pRow = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().newRow();
						pRow.setColTest(component.getText());
						pRow.setColTestNameHidden(component.getText());
						pRow.setExpandedImage(form.getImages().OCRR.Profile);
						pRow.setCollapsedImage(form.getImages().OCRR.Profile);
						pRow.setColBtnSitesEmpty(true);
						pRow.setExpanded(true);

						// WDEV-11938 - starts here
						InvestigationHelpTextVo profile = domain.getInvestigationHelpText(component.getID());
						pRow.setTooltipForColTest(profile != null ? profile.buildHelpTextTooltip() : null);
						// WDEV-11938 - ends here

						if (component.getComponentsIsNotNull())
						{
							for (MyOrderChildComponentVo childComponent : component.getComponents())
							{
								cRow = pRow.getRows().newRow();
								cRow.setColTest(childComponent.getText());
								cRow.setColTestNameHidden(childComponent.getText());

								cRow.setExpandedImage(form.getImages().OCRR.Investigation);
								cRow.setCollapsedImage(form.getImages().OCRR.Investigation);

								// WDEV-11938 - starts here
								InvestigationHelpTextVo investigation = domain.getInvestigationHelpText(childComponent.getID());
								cRow.setTooltipForColTest(investigation != null ? investigation.buildHelpTextTooltip() : null);
								// WDEV-11938 - ends here

								if (childComponent.getRequiresSiteIsNotNull() && childComponent.getRequiresSite().booleanValue())
								{
									cRow.setColBtnSites(form.getImages().OCRR.SpecimenDetails16);
									cRow.setTooltipForColBtnSites("Specimen Details");
									cRow.setColTypeEmpty(true);
									count.increment();
								}
								else
								{
									cRow.setColBtnSitesEmpty(true);
								}

								cRow.setValue(getOrderInvestigationFromContextByInvestID(childComponent.getID()));

								if (childComponent.getIsAddonIsNotNull() && childComponent.getIsAddon().booleanValue())
									cRow.setBackColor(Color.Bisque);

								cRow.setReadOnly(true);
							}
						}
						
						addSpecimenContainerRequestedTypeRootItems(pRow);
					}
					else if (component.getComponentType().equals(SelectAndOrderComponentType.INVESTIGATION))
					{
						if (component.getIsAddonIsNotNull() && component.getIsAddon().booleanValue())
						{
							addOns.add(component);
							continue;
						}
						pRow = addInvestigationRow(component, count);
					}
				}
			}
		}
		
		for (int i = 0; i < addOns.size(); i++)
		{
			MyOrderComponentVo component = addOns.get(i);
			grdTestRow pRow = addInvestigationRow(component, count);
			pRow.setBackColor(Color.Bisque);
			pRow.setReadOnly(false);
			pRow.setSelectable(true);
		}
		
		form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().btnSites().setVisible(count.getSiteCount() > 0);
		return form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().size();
	}

	private grdTestRow addInvestigationRow(MyOrderComponentVo component, SiteCount count)
	{
		grdTestRow pRow = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().newRow();
		pRow.setColTest(component.getText());
		pRow.setColTestNameHidden(component.getText());

		pRow.setExpandedImage(form.getImages().OCRR.Investigation);
		pRow.setCollapsedImage(form.getImages().OCRR.Investigation);

		// WDEV-11938 - starts here
		OrderInvestigationVo investigation = getOrderInvestigationFromContextByInvestID(component.getID());
		pRow.setValue(investigation);

		if (investigation != null && investigation.getInvestigationIsNotNull())
			pRow.setTooltipForColTest(investigation.getInvestigation().buildHelpTextTooltip());
		// WDEV-11938 - ends here
		
		if (component.getRequiresSiteIsNotNull() && component.getRequiresSite().booleanValue())
		{
			pRow.setColBtnSites(form.getImages().OCRR.SpecimenDetails16);
			pRow.setTooltipForColBtnSites("Specimen Details");
			pRow.setColTypeEmpty(true);
			count.increment();
		}
		else
		{
			pRow.setColTypeEmpty(true);
			pRow.setColBtnSitesEmpty(true);

    		// Check if the investigation has pathology details
    		if (investigation.getInvestigation().getPathInvDetails() != null)
    		{
    			// Add the specimens as sub-rows of investigation row
    			for (SpecimenVo specimen : investigation.getInvestigation().getPathInvDetails().getSpecimens())
    			{
    				grdTestRow specimenRow = pRow.getRows().newRow();
    				
    				specimenRow.setColTest(specimen.getType().toString());
    				specimenRow.setColTestNameHidden(specimen.getType().toString());
    				specimenRow.setColBtnSitesEmpty(true);
    
    				specimenRow.setColSpecimen(specimen);
    				specimenRow.setValue(investigation);
    
    				addSpecimenContainerRequestedTypeRootItems(specimenRow);
    			}
    		}
		}

		if (component.getRequiresSiteIsNotNull() && component.getRequiresSite().booleanValue())
			pRow.setReadOnly(true);

		pRow.setExpanded(true);
		return pRow;
	}

	private void addSpecimenContainerRequestedTypeRootItems(grdTestRow row)
	{
		Boolean phlebMayCollect = Boolean.FALSE;

		if (row.getValue() == null)
		{
			if (row.getRows().size() > 0 && row.getRows().get(0).getValue() != null)
				phlebMayCollect = row.getRows().get(0).getValue().getInvestigation().getParentPhlebMayCollect();
		}
		else
			phlebMayCollect = isPhlebMayCollect(row.getValue().getInvestigation().getID_Investigation());

		// For DFT Investigation populate with values in DFT collection
		if (row.getValue() != null && InvEventType.TIME_SERIES.equals(row.getValue().getInvestigation().getEventType()))
		{
			if (form.getLocalContext().getDFTCollectionType() != null && form.getLocalContext().getDFTCollectionType().getSiteCollectionType() != null)
			{
				for (int i = 0; i < form.getLocalContext().getDFTCollectionType().getSiteCollectionType().size(); i++)
				{
					SpecimenCollectionType collectionType = form.getLocalContext().getDFTCollectionType().getSiteCollectionType().get(i);
					row.getColType().newRow(collectionType, collectionType.getText());
				}
			}
		}
		else
		{
			ims.framework.cn.data.TreeNode[] rootNodes = LookupHelper.getSpecimenCollectionType(domain.getLookupService()).getRootNodes();
			for (int i = 0; i < rootNodes.length; i++)
			{
				SpecimenCollectionType lk = (SpecimenCollectionType) rootNodes[i];

				if (!lk.isActive())
					continue;

				if (lk.equals(SpecimenCollectionType.PHLEBOTOMY_INPATIENT) || lk.equals(SpecimenCollectionType.PHLEBOTOMY_OUTPATIENT))
					if (phlebMayCollect != null && !phlebMayCollect.booleanValue())
						continue;

				row.getColType().newRow(lk, lk.getText());
			}
		}
	}

	private Boolean isPhlebMayCollect(Integer invId)
	{
		// go through the context and retrieve the component for this inv
		MyOrderComponentVoCollection voCollComponents = form.getGlobalContext().OCRR.getMyOrderComponents();
		if (voCollComponents == null)
			return null;

		for (int i = 0; i < voCollComponents.size(); i++)
		{
			MyOrderComponentVo voComponent = voCollComponents.get(i);
			if (voComponent.getIDIsNotNull() && voComponent.getID().equals(invId))
				return voComponent.getPhlebMayCollect();

			if (voComponent.getComponentsIsNotNull())
			{
				for (int p = 0; p < voComponent.getComponents().size(); p++)
				{
					MyOrderChildComponentVo voChildComponent = voComponent.getComponents().get(p);
					if (voChildComponent.getIDIsNotNull() && voChildComponent.getID().equals(invId))
						return voChildComponent.getPhlebMayCollect();
				}
			}
		}

		return null;
	}

	private OrderInvestigationVo getOrderInvestigationFromContextByInvestID(Integer investigationId)
	{
		OrderInvestigationVo voOrderInvest = null;
		OrderInvestigationVoCollection voCollOrderInvestigation = form.getGlobalContext().OCRR.getOrderInvestigationCollection();
		if (voCollOrderInvestigation != null && voCollOrderInvestigation.size() > 0)
		{
			for (int i = 0; i < voCollOrderInvestigation.size(); i++)
			{
				if (voCollOrderInvestigation.get(i).getInvestigationIsNotNull() && voCollOrderInvestigation.get(i).getInvestigation().getID_Investigation().equals(investigationId))
				{
					voOrderInvest = voCollOrderInvestigation.get(i);
					return voOrderInvest;
				}
			}
		}
		return null;
	}

	private void loadSpecimenRequestedTypes()
	{
		form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().cmbRequestedType().clear();

		boolean phlebMayCollect = false;
		for (int i = 0; i < form.treeComponents().getNodes().size(); i++)
		{
			SelectedComponentFromSelectOrderVo voComponent = (SelectedComponentFromSelectOrderVo) form.treeComponents().getNodes().get(i).getValue();
			if (voComponent.getPhlebMayCollectIsNotNull() && voComponent.getPhlebMayCollect().equals(Boolean.TRUE))
			{
				phlebMayCollect = true;
				break;
			}
			for (int p = 0; p < form.treeComponents().getNodes().get(i).getNodes().size(); p++)
			{
				SelectedComponentFromSelectOrderVo voChildComponent = (SelectedComponentFromSelectOrderVo) form.treeComponents().getNodes().get(i).getNodes().get(p).getValue();
				if (voChildComponent.getPhlebMayCollectIsNotNull() && voChildComponent.getPhlebMayCollect().equals(Boolean.TRUE))
				{
					phlebMayCollect = true;
					break;
				}
			}
		}

		ims.framework.cn.data.TreeNode[] rootNodes = LookupHelper.getSpecimenCollectionType(domain.getLookupService()).getRootNodes();
		for (int i = 0; i < rootNodes.length; i++)
		{
			SpecimenCollectionType lk = (SpecimenCollectionType) rootNodes[i];

			if (!lk.isActive())
				continue;

			if (!phlebMayCollect)
			{
				if (lk.equals(SpecimenCollectionType.PHLEBOTOMY_INPATIENT) || lk.equals(SpecimenCollectionType.PHLEBOTOMY_OUTPATIENT))
					continue;
			}

			form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().cmbRequestedType().newRow(lk, lk.getText());
		}
	}

	private void placeOrder()
	{
		ORDERSTATE state = getOcsOrderAuthorisingState();

		OcsOrderVo voOcsOrder = form.getLocalContext().getOcsOrder();
		
		populateOrderInstanceData(voOcsOrder);

		String[] arrErrors = voOcsOrder.validate(validateOcsOrder(voOcsOrder));
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			form.getLocalContext().setClosedRounds(null);
			form.getLocalContext().setWorkListItems(null);
			return;
		}

		SpecimenWorkListItemVoCollection workListItems = form.getLocalContext().getWorkListItems();
		
		try
		{
			voOcsOrder = domain.saveOcsOrder(voOcsOrder, workListItems, state, form.getGlobalContext().RefMan.getCatsReferral(), form.getGlobalContext().Rotherham.getAppointmentToLink());

			// WDEV-13999
			// CARE UK project functionality ONLY
			if (CARE_UK_UI_ORDER.equals(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue()) && form.getGlobalContext().OCRR.getOrderInvestigationToAmendIsNotNull())
			{
				// When amending an investigation the appointment linked to it might be:
				// - cancelled if the modality for the investigation was changed from the one in the investigation to amend
				// - or associated with the new investigation instead of the old one
				changeInvestigationAppointment(voOcsOrder, form.getGlobalContext().OCRR.getOrderInvestigationToAmend());
				
				
				OrderInvestigationForStatusChangeVo investigationToAmendStatus = domain.getOrderInvestigation(form.getGlobalContext().OCRR.getOrderInvestigationToAmend());
				
				// Create new status for investigation to amend
				OrderedInvestigationStatusVo newStatus = new OrderedInvestigationStatusVo();
				
				newStatus.setOrdInvStatus(OrderInvStatus.AMENDED);
				newStatus.setChangeDateTime(new DateTime());
				newStatus.setChangeUser(engine.getLoggedInUser().getUserRealName() != null ? engine.getLoggedInUser().getUserRealName() : engine.getLoggedInUser().getUsername());
				newStatus.setStatusChangeReason(InvestigationStatusChangeReason.AMENDED);
				newStatus.setStatusReason(InvestigationStatusChangeReason.AMENDED.getText());
				newStatus.setProcessedDateTime(new DateTime());
				
				// Set status
				investigationToAmendStatus.setOrdInvCurrentStatus(newStatus);
				if (!investigationToAmendStatus.getOrdInvStatusHistoryIsNotNull())
				{
					investigationToAmendStatus.setOrdInvStatusHistory(new OrderedInvestigationStatusVoCollection());
				}
				
				investigationToAmendStatus.getOrdInvStatusHistory().add(newStatus);
				
				domain.updateInvestigationStatus(investigationToAmendStatus);
			}

			if ((ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) && form.getGlobalContext().RefMan.getCatsReferralIsNotNull()) // WDEV-11881
			{
				domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral());
			}
		}
		catch (StaleObjectException e)
		{
			if (form.getGlobalContext().RefMan.getCatsReferral() != null)
				form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferralListVo(form.getGlobalContext().RefMan.getCatsReferral()));// wdev-12864

			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return;
		}

		processOrder(state, engine.hasRight(AppRight.CAN_AUTHORIZE_CLINICAL_IMAGING_ORDERS), engine.hasRight(AppRight.CAN_AUTHORIZE_PATHOLOGY_ORDERS), voOcsOrder);
		if (form.getGlobalContext().RefMan.getCatsReferral() != null)
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferralListVo(form.getGlobalContext().RefMan.getCatsReferral()));// wdev-12864
	}


	/**
	 * Function used to cancel the appointment / or associate with the new investigation (or first investigation in order if multiple are selected for order)
	 */
	private void changeInvestigationAppointment(OcsOrderVo newOrder, OrderInvestigationLiteVo investigationToAmend) throws StaleObjectException
	{
		// Get appointment linked to order investigation if any
		OrderInvWithStatusApptVo orderInvAppointment = domain.getOrderInvestigationAppointment(investigationToAmend);

		// Check for OrderInvestigationAppointment record
		if (orderInvAppointment == null)
			return;

		// Get appointment
		Booking_AppointmentVo appointment = orderInvAppointment.getAppointment();

		// Check for appointment record
		if (appointment == null)
			return;

		// Check if the modality was changed for the investigation to be amended
		if (hasModalityChanged(newOrder, investigationToAmend))
		{
			// Check current status of the appointment - see if it was cancelled already
			// If the appointment wasn't cancelled - cancel it now
			if (!Status_Reason.CANCELLED.equals(appointment.getApptStatus()))
			{
				cancelAppointment(appointment);

				// OK to do this as this function should only be called in CARE UK project
				domain.updateCatsReferralCancelStatus(form.getGlobalContext().RefMan.getCatsReferral());
			}
		}
		else
		{
			// Update investigation - with first investigation, else
			if (newOrder.getInvestigationsIsNotNull() && newOrder.getInvestigations().size() > 0)
			{
				OrderInvestigationBookingWithStatusVo orderInvestigationBooking = domain.getOrderInvestigationBooking(newOrder.getInvestigations().get(0));
				
				orderInvestigationBooking.setAppointmentDate(new DateTime(appointment.getAppointmentDate(), appointment.getApptStartTime()));
				orderInvestigationBooking.setDisplayDateTime(new DateTime(appointment.getAppointmentDate(), appointment.getApptStartTime()));
				
				orderInvAppointment.setOrderInvestigation(orderInvestigationBooking);
				
				// Remove AppointmentDate and AppointmentTime from investigationToAmend
				investigationToAmend.setAppointmentDate(null);
				
				// Create status
				OrderedInvestigationStatusVo status = new OrderedInvestigationStatusVo();
				status.setChangeDateTime(new DateTime());
				status.setChangeUser(domain.getHcpLiteUser() != null ? ((HcpLiteVo) domain.getHcpLiteUser()).getIMosName() : null);
				status.setProcessedDateTime(new DateTime());
				status.setOrdInvStatus(OrderInvStatus.ORDERED);
				
				orderInvestigationBooking.setOrdInvCurrentStatus(status);
				
				if (orderInvestigationBooking.getOrdInvStatusHistory() == null)
					orderInvestigationBooking.setOrdInvStatusHistory(new OrderedInvestigationStatusVoCollection());
				
				orderInvestigationBooking.getOrdInvStatusHistory().add(status);
			}
			
			orderInvAppointment.validate();

			domain.updateOrderInvestigationAppointment(orderInvAppointment, investigationToAmend);
		}
	}

	/**
	 * Function used to determine if the modality has changed
	 * It will analyse the first investigation from the new order with the investigation to amend.
	 * If in either investigation the modality can not be reached it will consider that modality has changed
	 */
	private boolean hasModalityChanged(OcsOrderVo newOrder, OrderInvestigationLiteVo investigationToAmend)
	{
		// Check new order for investigations
		if (newOrder == null || newOrder.getInvestigations() == null || newOrder.getInvestigations().size() == 0)
			return true;

		OrderInvestigationVo investigation = newOrder.getInvestigations().get(0);

		// Check first OrderInvestigation for modality (Speciality in the Investigation.ProviderService.LocationService.Service)
		// If the modality can not be retrieved - consider that the modality has changed
		if (investigation == null || investigation.getInvestigation() == null || investigation.getInvestigation().getProviderService() == null || investigation.getInvestigation().getProviderService().getLocationService() == null || investigation.getInvestigation().getProviderService().getLocationService().getService() == null)
			return true;

		ServiceVo newModality = investigation.getInvestigation().getProviderService().getLocationService().getService();

		// Check modality for OrderInvestigation to amend
		if (investigationToAmend == null || investigationToAmend.getInvestigation() == null || investigationToAmend.getInvestigation().getProviderService() == null || investigationToAmend.getInvestigation().getProviderService().getLocationService() == null || investigationToAmend.getInvestigation().getProviderService().getLocationService().getService() == null)
			return true;

		ServiceLiteVo oldModality = investigationToAmend.getInvestigation().getProviderService().getLocationService().getService();

		// Keep in mind that the objects are of different types (cast is only to point this out)
		// and use the root of them as base for equals
		if (oldModality.equals((ServiceLiteVo)newModality))
			return false;

		return true;
	}

	/**
	 * Function used to cancel appointment (in case the investigation amended has it's modality changed)
	 */
	private void cancelAppointment(Booking_AppointmentVo appointment) throws StaleObjectException
	{
		// Set current appointment status and history to reflect CANCEL status
		appointment.setApptStatus(Status_Reason.CANCELLED);
		appointment.setApptStatusReas(Status_Reason.CANCELLED);

		// Create CANCELLED status record for appointment
		Appointment_StatusVo status = buildCancelledStatusAppointment(appointment);

		// Set new status to appointment
		appointment.setCurrentStatusRecord(status);

		// Update appointment status history
		if (!appointment.getApptStatusHistoryIsNotNull())
		{
			appointment.setApptStatusHistory(new Appointment_StatusVoCollection());
		}

		appointment.getApptStatusHistory().add(status);

		// Open appointment slot
		if (appointment.getSessionSlotIsNotNull())
		{
			appointment.getSessionSlot().setStatus(Status_Reason.SLOTOPENED);
		}

		domain.cancelAppointment(appointment, ActionRequestType.NOTIFY_APPT_CANCEL, "Investigation Ammended & Madality Changed - Appointment Cancelled");
	}

	private Appointment_StatusVo buildCancelledStatusAppointment(Booking_AppointmentVo appointment)
	{
		// Build appointment new status
		Appointment_StatusVo status = new Appointment_StatusVo();

		status.setStatus(Status_Reason.CANCELLED);
		status.setStatusReason(Status_Reason.CANCELLED);
		status.setCancellationReason(null);
		status.setComment(null);
		status.setRebookSelected(Boolean.FALSE);

		status.setStatusChangeDateTime(new DateTime());

		status.setApptDate(appointment.getAppointmentDate());
		status.setEarliestOfferedDate(appointment.getEarliestOfferedDate());

		if (appointment.getSessionSlotIsNotNull())
		{
			status.setApptTime(appointment.getSessionSlot().getStartTm());
		}
		else if (appointment.getApptStartTimeIsNotNull())
		{
			status.setApptTime(appointment.getApptStartTime());
		}
		return status;
	}

	// retrieve overall state to be saved at the ocsorder level
	private ORDERSTATE getOcsOrderAuthorisingState()
	{
		if (doesOrderContainInvType(Category.CLINICALIMAGING))
		{
			boolean canAuthoriseClinImaging = engine.hasRight(AppRight.CAN_AUTHORIZE_CLINICAL_IMAGING_ORDERS);
			if (!canAuthoriseClinImaging)
				return ORDERSTATE.REQUESTING_AUTHORISATION;

		}
		if (doesOrderContainInvType(Category.PATHOLOGY))
		{
			boolean canAuthorisePathology = engine.hasRight(AppRight.CAN_AUTHORIZE_PATHOLOGY_ORDERS);
			if (!canAuthorisePathology)
				return ORDERSTATE.REQUESTING_AUTHORISATION;
		}

		return ORDERSTATE.AUTHORISING;
	}

	/**
	 * Print and/or display ordered message/go back to SelectAndOrder
	 * 
	 * @param state
	 * @param canAuthorise
	 * @param voOcsOrder
	 */
	private void processOrder(ORDERSTATE state, boolean canAuthoriseClinicalImaging, boolean canAuthorisePathology, OcsOrderVo voOcsOrder)
	{
		boolean printLabels = false;
		boolean clinicalInvestigationsOnly = true;
		
		form.getGlobalContext().OCRR.setPatientOrNowOnly(Boolean.TRUE);
		for (int i = 0; i < voOcsOrder.getSpecimens().size(); i++)
		{
			OrderSpecimenVo specimen = voOcsOrder.getSpecimens().get(i);

			if (specimen.getRequestedTypeIsNotNull())
			{
				if (!specimen.getRequestedType().equals(SpecimenCollectionType.OTHER) && !specimen.getRequestedType().equals(SpecimenCollectionType.PHLEBOTOMY_INPATIENT))
				{
					printLabels = true;
					if (specimen.getRequestedType().equals(SpecimenCollectionType.PHLEBOTOMY_OUTPATIENT))
						form.getGlobalContext().OCRR.setPatientOrNowOnly(Boolean.FALSE);
				}
			}
		}

		if (printLabels == false)
		{
			// check for RADIOLOGY and CLINICAL orders and DFT
			for (int i = 0; i < voOcsOrder.getInvestigations().size(); i++)
			{
				OrderInvestigationVo voInvestigation = voOcsOrder.getInvestigations().get(i);
				if (voInvestigation.getInvestigationIsNotNull() && voInvestigation.getInvestigation().getInvestigationIndexIsNotNull())
				{
					// WDEV-16602
					if ((voInvestigation.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voInvestigation.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICALIMAGING))
							|| (voInvestigation.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voInvestigation.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL))
							|| (isDFT(voInvestigation) && !SpecimenCollectionType.OTHER.equals(voInvestigation.getCollectionType()) && !SpecimenCollectionType.PHLEBOTOMY_INPATIENT.equals(voInvestigation.getCollectionType())))
					{
						printLabels = true;
						break;
					}
				}
			}
		}
		
		for (OrderInvestigationVo investigation : voOcsOrder.getInvestigations())
		{
			if (!Category.CLINICAL.equals(investigation.getInvestigation().getInvestigationIndex().getCategory()))
				clinicalInvestigationsOnly = false;
		}

		if (printLabels == true && (canAuthorisePathology == true || canAuthoriseClinicalImaging == true || clinicalInvestigationsOnly == true))
		{
			form.getGlobalContext().OCRR.PathologyResults.setOrder(voOcsOrder);

			if (engine.canOpen(form.getForms().OCRR.PrintOrder))
			{
				if (form.getGlobalContext().OCRR.PrintOrder.getNotLocalInvestigationsIsNotNull())
					form.getGlobalContext().OCRR.PrintOrder.setExecuteAutomaticPrint(Boolean.TRUE);

				engine.open(form.getForms().OCRR.PrintOrder);
			}
		}
		else
		{
			// WDEV-13401 checking here if the overall order is being authorised
			if (getOcsOrderAuthorisingState() != null && getOcsOrderAuthorisingState().equals(ORDERSTATE.AUTHORISING))
			{
				engine.showMessage("Order placed successfully");
				if (engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.SelectAndOrderDialog))
					engine.open(form.getForms().OCRR.OrdersRequiringAuthorisation);
			}
			else
			{
				engine.showMessage("Order Awaiting Authorisation");
			}

			// WDEV-13367
			if (engine.isDialog())
			{
				engine.close(DialogResult.OK);
				return;
			}

			if (ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
				engine.open(form.getForms().Core.Demographics);
			else
				engine.open(form.getForms().OCRR.SelectandOrder);
		}
	}

	private boolean isDFT(OrderInvestigationVo voInvestigation) 
	{
		if(voInvestigation == null || voInvestigation.getInvestigation() == null)
			return false;
		
		if(InvEventType.TIME_SERIES.equals(voInvestigation.getInvestigation().getEventType()))
			return true;
			
		return false;
	}

	private String[] validateOcsOrder(OcsOrderVo voOcsOrder)
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (voOcsOrder.getOrderedBy() == null)
			errors.add("Ordered By is a mandatory field");

		if (voOcsOrder.getResponsibleClinician() == null)
			errors.add("Responsible Clinician is a mandatory field");
		
		
		// Validate OCS Order Bleep number
		if (ConfigFlag.GEN.SITE_USES_ORDER_BLEEP_EXT_NUMBER.getValue() && voOcsOrder.getBleepExtNumber() == null)
		{
			errors.add("Bleep No is mandatory.");
		}


		// WDEV-11915 - starts here
		if (grpPatientLocationEnumeration.rdoClinic.equals(form.lyrDetails().tabGenDetails().grpPatientLocation().getValue()))
		{
			if (ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue().equals("Clinic"))
			{
				if (!ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") && !ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
				{
					if (form.lyrDetails().tabGenDetails().qmbLocation().getValue() == null)
						errors.add("Patient Location is a mandatory field");
				}
			}
			else if (ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue().equals("Outpatient Department"))
			{
				if (form.lyrDetails().tabGenDetails().cmbDepartment().getValue() == null)
					errors.add("Outpatient Department is a mandatory field");

			}
			else if (ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue().equals("Clinic and Outpatient Department"))
			{
				if (!ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") && !ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
				{
					if (form.lyrDetails().tabGenDetails().qmbLocation().getValue() == null)
						errors.add("Patient Location is a mandatory field");
				}

				if (form.lyrDetails().tabGenDetails().cmbDepartment().getValue() == null)
					errors.add("Outpatient Department is a mandatory field");
			}
		}
		else
		{
			if (!ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") && !ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
			{
				if (!HIDE_CLINIC_STRING.equals(ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue()) && form.lyrDetails().tabGenDetails().qmbLocation().getValue() == null)
					errors.add("Patient Location is a mandatory field");
			}
		}
		// WDEV-11915 - ends here

		// WDEV-10102 - validate against row identifier value which holds the minimum container value needed
		errors.addAll(validateSpecimenContainers());

		// WDEV-8947 & WDEV-11034
		if (ConfigFlag.UI.ORDERING_PATIENTMOBILITY_MANDATORY.getValue() && doesOrderContainInvType(Category.CLINICALIMAGING) && form.lyrDetails().tabRadDetails().cmbPatMobility().getVisible())
		{
			if (form.lyrDetails().tabRadDetails().cmbPatMobility().getValue() == null)
				errors.add("Patient Mobility is a mandatory field");
		}

		// WDEV-11035
		if (ConfigFlag.UI.ORDERING_ORDERCATEGORY_MANDATORY.getValue())
		{
			if (form.lyrDetails().tabGenDetails().cmbOrderCategory().getValue() == null)
				errors.add("Order Category is a mandatory field");
		}

		for (int i = 0; i < form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().get(i);
			if (row.getCellArray()[0].getValue() == null)
			{
				errors.add("Report To is a mandatory field");
				break;
			}
		}

		for (int i = 0; i < form.lyrDetails().tabRadDetails().grdRadOrders().getRows().size(); i++)
		{
			grdRadOrdersRow row = form.lyrDetails().tabRadDetails().grdRadOrders().getRows().get(i);
			if (row.getColLocation().getValue() == null)
			{
				errors.add("Each Exam must have a value for 'Location'");
			}
		}

		// validating date and round input
		ArrayList<String> dateRoundErrors = form.getLocalContext().getUIValidationMessages();
		if (dateRoundErrors != null && dateRoundErrors.size() > 0)
			errors.addAll(dateRoundErrors);

		// closed rounds
		String closedRoundMessage = null;
		if (form.getLocalContext().getClosedRoundsIsNotNull() && form.getLocalContext().getClosedRounds().size() > 0)
		{
			closedRoundMessage = getClosedRoundsMessage();
			if (closedRoundMessage != null)
				errors.add(closedRoundMessage);
		}

		if (errors.size() == 0)
			return null;

		String[] arrErrors = new String[errors.size()];
		for (int i = 0; i < errors.size(); i++)
			arrErrors[i] = errors.get(i);

		return arrErrors;
	}

	private ArrayList<String> validateSpecimenContainers()
	{
		ArrayList<String> errors = new ArrayList<String>();

		errors.addAll(validateSpecimenContainerForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow()));
		errors.addAll(validateSpecimenContainerForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient()));
		errors.addAll(validateSpecimenContainerForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()));
		errors.addAll(validateSpecimenContainerForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat()));
		errors.addAll(validateSpecimenContainerForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat()));
		errors.addAll(validateSpecimenContainerForGrid(form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected()));

		return errors;
	}

	private ArrayList<String> validateSpecimenContainerForGrid(DynamicGrid grid)
	{
		ArrayList<String> errors = new ArrayList<String>();

		for (int i = 0; i < grid.getRows().size(); i++)
		{
			DynamicGridRow pRow = grid.getRows().get(i);
			for (int p = 0; p < pRow.getRows().size(); p++)
			{
				DynamicGridRow cRow = pRow.getRows().get(p);
				if (cRow.getIdentifier() != null)
				{
					Integer calculatedVal = (Integer) cRow.getIdentifier();
					Integer enteredVal = (Integer) cRow.getCells().get(grid.getColumns().getByIdentifier(QTY_COLUMN)).getValue();
					if (enteredVal == null)
					{
						errors.add("Container Quantity is mandatory for '" + cRow.getCells().get(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN)).getValue() + "' for '" + pRow.getCells().get(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN)).getValue() + "'");
					}
					else
					{
						if (enteredVal.intValue() < calculatedVal.intValue())
						{
							errors.add("Container Quantity insufficient - " + calculatedVal + " required for '" + cRow.getCells().get(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN)).getValue() + "' for '" + pRow.getCells().get(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN)).getValue() + "'");
						}
					}
				}
			}
		}
		return errors;
	}

	// go through all the closed rounds and create a message
	private String getClosedRoundsMessage()
	{
		StringBuffer message = new StringBuffer();
		PhlebotomyRoundShortVoCollection voCollClosedRounds = form.getLocalContext().getClosedRounds();
		if (voCollClosedRounds != null && voCollClosedRounds.size() > 0)
		{
			message.append("You cannot place this order as the following inpatient phlebotomy rounds are closed: ");
			for (int i = 0; i < voCollClosedRounds.size(); i++)
			{
				message.append(voCollClosedRounds.get(i).getDate().toString());
				message.append("  ");
				message.append(voCollClosedRounds.get(i).getRoundToCollect().getText());
				if (voCollClosedRounds.size() - i == 2)
				{
					message.append("\n");
				}
			}
		}
		return message.length() > 0 ? message.toString() : null;
	}

	private void populateOrderInstanceData(OcsOrderVo voOcsOrder)
	{
		form.getLocalContext().setUIValidationMessages(null);

		if (voOcsOrder == null)
			voOcsOrder = new OcsOrderVo();

		voOcsOrder.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voOcsOrder.setPatient(form.getGlobalContext().Core.getPatientShort());

		// WDEV-13999
		// For the CARE UK project set the Order By and Responsible Clinician values from Clinic Details
		// For the rest of the projects keep the old code
		if (CARE_UK_UI_ORDER.equals(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue()))
		{
			// Set responsible clinician
			voOcsOrder.setResponsibleClinician(form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().getValue());

			// Set ordering HCP
			HcpLiteVo orderingHCP = form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().getValue();

			if (orderingHCP != null)
			{
				voOcsOrder.setOrderedBy(orderingHCP.getMos());
			}
		}
		else
		{
			// general details tab
			voOcsOrder.setOrderedBy(form.lyrDetails().tabGenDetails().qmbOrderedBy().getValue());
			voOcsOrder.setResponsibleClinician(form.lyrDetails().tabGenDetails().qmbClinician().getValue());
		}
		

		if (ConfigFlag.GEN.SITE_USES_ORDER_BLEEP_EXT_NUMBER.getValue())
		{
			voOcsOrder.setBleepExtNumber(form.lyrDetails().tabGenDetails().txtBleepNo().getValue());
		}
		
		if (Boolean.TRUE.equals(ConfigFlag.UI.ORDERING_DISPLAY_SUMMARY_CLINICAL_INFO.getValue()))
		{
			voOcsOrder.setSummaryClinicalInformation(form.lyrDetails().tabSummaryClinicalInfo().txtSummaryClinicalInfo().getValue());
		}
		else
		{
			voOcsOrder.setSummaryClinicalInformation(null);
		}

		// WDEV-6786
		if (form.getGlobalContext().RefMan.getCatsReferralIsNotNull())
			voOcsOrder.setResponsibleGp(domain.getReferrerGP(form.getGlobalContext().RefMan.getCatsReferral()));

		voOcsOrder.setOrderCategory(form.lyrDetails().tabGenDetails().cmbOrderCategory().getValue());

		if (form.lyrDetails().tabGenDetails().grpPatientLocation().getValue().equals(grpPatientLocationEnumeration.rdoClinic))
		{
			// WDEV-14348
			if (!HIDE_CLINIC_STRING.equals(ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue()))
			{
    			voOcsOrder.setPatientClinic((ClinicLiteVo) form.lyrDetails().tabGenDetails().qmbLocation().getValue());
			}
    		
			voOcsOrder.setOutpatientDept(form.lyrDetails().tabGenDetails().cmbDepartment().getValue()); // WDEV-11915
		}
		else
		{
			voOcsOrder.setPatientLocation((LocationLiteVo) form.lyrDetails().tabGenDetails().qmbLocation().getValue());
			voOcsOrder.setOutpatientDept(null); // WDEV-11915
		}

		if (doesOrderContainInvType(Category.CLINICALIMAGING))
		{
			// rad details tab
			voOcsOrder.setPatMobility(form.lyrDetails().tabRadDetails().cmbPatMobility().getValue());
			for (int i = 0; i < form.lyrDetails().tabRadDetails().grdRadOrders().getRows().size(); i++)
			{
				grdRadOrdersRow row = form.lyrDetails().tabRadDetails().grdRadOrders().getRows().get(i);

				// this will modify the item by reference in the global context
				// collection
				// (form.getGlobalContext().OCRR.getOrderInvestigationCollection())
				// thus setting the correct value for requested location
				row.getValue().setRequestedLocation((LocationRefVo) row.getColLocation().getValue());
				
				OrderInvestigationVoCollection orderInvestigations = form.getGlobalContext().OCRR.getOrderInvestigationCollection();
				if (orderInvestigations != null)
				{
					for (int j = 0; j < orderInvestigations.size(); j++)
					{
						if (row.getValue().getInvestigation().getID_Investigation().equals(orderInvestigations.get(j).getInvestigation().getID_Investigation()))
						{
							orderInvestigations.set(j, row.getValue());
						}
					}
				}
			}
		}

		if (form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().size() > 0)
		{
			OcsReportToVoCollection voCollReportTo = new OcsReportToVoCollection();
			for (int i = 0; i < form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().size(); i++)
			{
				DynamicGridRow row = form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().get(i);
				voCollReportTo.add(getReportToItem(row));
			}
			voOcsOrder.setReportTo(voCollReportTo);
		}

		voOcsOrder.setClinicalTrial(Boolean.FALSE);
		populateSpecimenInstanceData(voOcsOrder);
		voOcsOrder.setInvestigations(populateOrderInvestigationInstancesData(voOcsOrder));

		// WDEV-2926
		for (int i = 0; i < voOcsOrder.getInvestigations().size(); i++)
			voOcsOrder.getInvestigations().get(i).setOrdInvSeq(new Integer(i + 1));

		voOcsOrder.setAdditClinNotes(form.lyrDetails().tabClinicalNotes().txtAdditionalNotes().getValue());

		OcsQASessionVo voQASession = populateQuestionsInstanceData();
		voOcsOrder.setClinicalInfo(voQASession);
		voOcsOrder.setWasProcessed(Boolean.FALSE);

		// WDEV-4578
		voOcsOrder.setCareContext(form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext());
		if (form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContextIsNotNull())
			voOcsOrder.setOrderingHospital(form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getOrderingHospital());
	}

	private OcsReportToVo getReportToItem(DynamicGridRow row)
	{
		OcsReportToVo voOcsReportTo = (OcsReportToVo) row.getValue();
		if (voOcsReportTo == null)
			voOcsReportTo = new OcsReportToVo();

		voOcsReportTo.setValue(buildReportToString(row));
		voOcsReportTo.setType((ReportToType) row.getIdentifier());

		return voOcsReportTo;
	}

	private String buildReportToString(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("no row passed to method buildReportToString");

		String ret = "";
		Object val = row.getCellArray()[0].getValue();
		if (val instanceof String)
		{
			ret += val;
		}
		else
		{
			ValueObject voInstance = (ValueObject) row.getCellArray()[0].getValue();

			if (voInstance != null)
			{
				if (voInstance instanceof MemberOfStaffShortVo)
				{
					ret += ((MemberOfStaffShortVo) voInstance).toString();
				}
				else if (voInstance instanceof GpShortVo)
				{
					ret += ((GpShortVo) voInstance).toString();
				}
				else if (voInstance instanceof LocShortMappingsVo)
				{
					ret += ((LocShortMappingsVo) voInstance).toString();
				}
			}
		}

		DynamicGridCell cellWardClinic = row.getCells().get(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(WARDOUTPAT_COLUMN));
		if (cellWardClinic != null && cellWardClinic.getValue() != null)
		{
			ret += "\t";
			ret += cellWardClinic.getValue();
		}

		DynamicGridCell celAddress = row.getCells().get(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(ADDRESS_COLUMN));
		if (celAddress != null && celAddress.getValue() != null)
		{
			ret += "\t";
			ret += celAddress.getValue();
		}

		return ret;
	}

	private OcsQASessionVo populateQuestionsInstanceData()
	{
		if (form.getLocalContext().getOcsOrder() != null)
		{
			OcsQASessionVo voOcsQASession = form.getLocalContext().getOcsOrder().getClinicalInfo();
			if (voOcsQASession == null)
				voOcsQASession = new OcsQASessionVo();
			MyOrderQuestionsPopulation questionsPopulation = getMyOrderQuestionPopulationHelperFactory();
			return questionsPopulation.getAnswers(voOcsQASession);
		}
		return null;
	}

	private MyOrderQuestionsPopulation getMyOrderQuestionPopulationHelperFactory()
	{
		PatientShort voPatShort = form.getGlobalContext().Core.getPatientShort();
		Integer age = voPatShort != null ? voPatShort.calculateAge() : null;
		Sex sex = voPatShort != null ? voPatShort.getSex() : null;

		return new MyOrderQuestionsPopulation(form.lyrDetails().tabClinicalNotes().dyngrdQuestions(), form.getImages().OCRR.Question, form.getImages().OCRR.Information, form.getImages().Core.MandatoryQuestion, form.getImages().OCRR.Investigation, age, sex);
	}

	private OrderInvestigationVoCollection populateOrderInvestigationInstancesData(OcsOrderVo voOcsOrder)
	{
		if (voOcsOrder == null)
			throw new CodingRuntimeException("ocsOrder not passed to method populateInvestigationInstancesData");

		OrderInvestigationVoCollection voCollOrderInv = new OrderInvestigationVoCollection();
		for (int i = 0; i < voOcsOrder.getSpecimens().size(); i++)
		{
			OrderSpecimenVo voOrderSpecimen = voOcsOrder.getSpecimens().get(i);
			for (int p = 0; p < voOrderSpecimen.getInvestigations().size(); p++)
			{
				// now specimen order investigations WDEV-2735
				if (voOrderSpecimen.getIsPatientCollectIsNotNull() && voOrderSpecimen.getIsPatientCollect().equals(Boolean.FALSE) && voOrderSpecimen.getIsAwaitingCollectionIsNotNull() && voOrderSpecimen.getIsAwaitingCollection().equals(Boolean.FALSE))
				{
					((OrderInvestigationVo) voOrderSpecimen.getInvestigations().get(p)).setDisplayDateTime(voOrderSpecimen.getCollDateTimePlacer());
					((OrderInvestigationVo) voOrderSpecimen.getInvestigations().get(p)).setDisplayFlag(OcsDisplayFlag.SPEC_COLL);
				}
				else
				{
					((OrderInvestigationVo) voOrderSpecimen.getInvestigations().get(p)).setDisplayDateTime(new DateTime());
					((OrderInvestigationVo) voOrderSpecimen.getInvestigations().get(p)).setDisplayFlag(OcsDisplayFlag.REQUESTED);
				}
				
				// This is an UPCAST - not safe, while it works on current logic - due to performance considerations
				OrderInvestigationVo orderInvestigation = (OrderInvestigationVo) voOrderSpecimen.getInvestigations().get(p);
				
				// The following function will fill in the OrderInvestigation containers
				// into the OrderInvestigation.containers field, modifying the VO
				fillInOrderInvestigationContainers(orderInvestigation, voOrderSpecimen.getContainers());
				
				orderInvestigation.setRequiredByDate(getRequiredByDate(voOrderSpecimen));						// WDEV-16580
				
				voCollOrderInv.add(orderInvestigation);
			}
		}

		for (int i = 0; i < form.getGlobalContext().OCRR.getOrderInvestigationCollection().size(); i++)
		{
			OrderInvestigationVo voOrderInv = form.getGlobalContext().OCRR.getOrderInvestigationCollection().get(i);
			if (Category.CLINICALIMAGING.equals(voOrderInv.getInvestigation().getInvestigationIndex().getCategory())
					&& (voOrderInv.getOrdInvCurrentStatus() == null 
							|| (!OrderInvStatus.CANCEL_REQUEST.equals(voOrderInv.getOrdInvCurrentStatus().getOrdInvStatus())
									&& !OrderInvStatus.CANCELLED.equals(voOrderInv.getOrdInvCurrentStatus().getOrdInvStatus()))))
			{
				voOrderInv.setDisplayDateTime(new DateTime());
				voOrderInv.setDisplayFlag(OcsDisplayFlag.REQUESTED);
				voCollOrderInv.add(voOrderInv);
			}
			else if (Category.CLINICAL.equals(voOrderInv.getInvestigation().getInvestigationIndex().getCategory())
					&& (voOrderInv.getOrdInvCurrentStatus() == null
							|| (!OrderInvStatus.CANCEL_REQUEST.equals(voOrderInv.getOrdInvCurrentStatus().getOrdInvStatus())
									&& !OrderInvStatus.CANCELLED.equals(voOrderInv.getOrdInvCurrentStatus().getOrdInvStatus()))))
			{
				voOrderInv.setDisplayDateTime(new DateTime());
				voOrderInv.setDisplayFlag(OcsDisplayFlag.REQUESTED);
				voCollOrderInv.add(voOrderInv);
			}
		}

		// WDEV-13401 - set the text of the Order Button
		ORDERSTATE clinicalImagingState = ORDERSTATE.REQUESTING_AUTHORISATION;
		boolean canAuthoriseClinImaging = engine.hasRight(AppRight.CAN_AUTHORIZE_CLINICAL_IMAGING_ORDERS);
		if (canAuthoriseClinImaging == true)
			clinicalImagingState = ORDERSTATE.AUTHORISING;

		ORDERSTATE pathState = ORDERSTATE.REQUESTING_AUTHORISATION;
		boolean canAuthorisePathology = engine.hasRight(AppRight.CAN_AUTHORIZE_PATHOLOGY_ORDERS);
		if (canAuthorisePathology == true)
			pathState = ORDERSTATE.AUTHORISING;

		// default to requesting authorisation
		ORDERSTATE state = ORDERSTATE.REQUESTING_AUTHORISATION;

		for (int i = 0; i < voCollOrderInv.size(); i++)
		{
			voCollOrderInv.get(i).setWasOrdered(Boolean.TRUE);

			OrderedInvestigationStatusVo status = new OrderedInvestigationStatusVo();
			if (domain.getMosUser() != null)
			{
				if (((MemberOfStaffShortVo) domain.getMosUser()).getAppUser() != null)
					status.setChangeUser(((MemberOfStaffShortVo) domain.getMosUser()).getAppUser().getUserRealName());
			}

			status.setChangeDateTime(new DateTime());
			status.setProcessedDateTime(new DateTime());

			// WDEV-5740
			if ((ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) && canbeScheduled(voCollOrderInv.get(i))) // WDEV-11881
			{
				status.setOrdInvStatus(ims.ocrr.vo.lookups.OrderInvStatus.ORDERED_AWAITING_APPT);
			}
			else
			{
				// WDEV-13401
				if (voCollOrderInv.get(i).getInvestigationIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndexIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndex().getCategoryIsNotNull())
				{
					if (voCollOrderInv.get(i).getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICALIMAGING))
						state = clinicalImagingState;
					else if (voCollOrderInv.get(i).getInvestigation().getInvestigationIndex().getCategory().equals(Category.PATHOLOGY))
						state = pathState;
				}

				//WDEV-16361
				if (voCollOrderInv.get(i).getInvestigationIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndexIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL))
				{
					status.setOrdInvStatus(OrderInvStatus.ORDERED);
				}
				else if (state.equals(ORDERSTATE.REQUESTING_AUTHORISATION))
				{
					status.setOrdInvStatus(ims.ocrr.vo.lookups.OrderInvStatus.AWAITING_AUTHORISATION);
					status.setStatusReason("Awaiting Authorisation");
				}
				else if (state.equals(ORDERSTATE.AUTHORISING))
				{
					status.setOrdInvStatus(OrderInvStatus.ORDERED);
				}
				else if (state.equals(ORDERSTATE.CANCELLED))
				{
					status.setOrdInvStatus(OrderInvStatus.CANCELLED);
				}
			}

			voCollOrderInv.get(i).setOrdInvCurrentStatus(status);
		}
		
		
		// Add OrderInvestigation that were cancelled when order was edited and authorised
		if (voOcsOrder.getInvestigations() != null)
		{
			for (OrderInvestigationVo orderInvestigation : voOcsOrder.getInvestigations())
			{
				if (orderInvestigation.getID_OrderInvestigation() != null)
				{
					OrderedInvestigationStatusVo currentStatus = orderInvestigation.getOrdInvCurrentStatus();
					
					if (currentStatus != null && OrderInvStatus.CANCEL_REQUEST.equals(currentStatus.getOrdInvStatus()))
					{
						orderInvestigation.setSpecimen(null);
						voCollOrderInv.add(orderInvestigation);
					}
				}
			}
		}
		
		return voCollOrderInv;
	}

	// 	WDEV-16580
	private DateTime getRequiredByDate(OrderSpecimenVo voOrderSpecimen) 
	{
		if(voOrderSpecimen == null)
			return new DateTime();
		
		if(SpecimenCollectionType.NOW.equals(voOrderSpecimen.getRequestedType()) || SpecimenCollectionType.PATIENT.equals(voOrderSpecimen.getRequestedType()) || SpecimenCollectionType.SPECIMEN_ALREADY_COLLECTED.equals(voOrderSpecimen.getRequestedType()))
			return new DateTime();
		
		if(SpecimenCollectionType.PHLEBOTOMY_OUTPATIENT.equals(voOrderSpecimen.getRequestedType()) || SpecimenCollectionType.PHLEBOTOMY_INPATIENT.equals(voOrderSpecimen.getRequestedType()) || SpecimenCollectionType.OTHER.equals(voOrderSpecimen.getRequestedType()) || SpecimenCollectionType.SPECIMEN_COLLECTION_CLINIC.equals(voOrderSpecimen.getRequestedType()))
			return createDateTimeFromSpecimenWorklistItem(voOrderSpecimen.getSpecimenWorklistItem());
			
		return new DateTime();
	}

	// 	WDEV-16580
	private DateTime createDateTimeFromSpecimenWorklistItem(SpecimenWorkListItemVo specimenWorklistItem) 
	{
		if(specimenWorklistItem == null || specimenWorklistItem.getDateToCollect() == null)
			return new DateTime();
		
		return specimenWorklistItem.getTimeToCollect() != null ? new DateTime(specimenWorklistItem.getDateToCollect(), specimenWorklistItem.getTimeToCollect()) : new DateTime(specimenWorklistItem.getDateToCollect());
	}

	/**
	 * Function used to fill in the OrderInvestigation.Containers field
	 * <br>While this function doesn't have a return value, it does have a side-effect as it
	 * modifies the OrderInvestigation VO
	 */
	private void fillInOrderInvestigationContainers(OrderInvestigationVo orderInvestigation, OrderSpecimenContainerVoCollection containers)
	{
		if (orderInvestigation == null || containers == null)
			return;
		
		orderInvestigation.setContainer(new OrderSpecimenContainerVoCollection());
		
		for (OrderSpecimenContainerVo container : containers)
		{
			if (container.getOrderInvestigation() != null)
			{
				for (OrderInvestigationRefVo investigation : container.getOrderInvestigation())
				{
					if (investigation.equals(orderInvestigation))
						orderInvestigation.getContainer().add(container);
				}
			}
		}
	}



//	private String getInvestigationNames(OrderInvestigationVoCollection orderInvestigations)
//	{
//		if (orderInvestigations == null)
//			return null;
//		
//		StringBuilder investigationNames = new StringBuilder();
//		for (int i = 0; i < orderInvestigations.size(); i++)
//		{
//			OrderInvestigationVo investigation = orderInvestigations.get(i);
//			investigationNames.append(investigation.getInvestigation().getInvestigationIndex().getName());
//			if (i < orderInvestigations.size() - 1)
//				investigationNames.append(", ");
//		}
//		return investigationNames.toString();
//	}

	private boolean canbeScheduled(OrderInvestigationVo voOrderInv)
	{
		if (voOrderInv != null && voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getProviderServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getService().getCanBeScheduledIsNotNull())
			return voOrderInv.getInvestigation().getProviderService().getLocationService().getService().getCanBeScheduled();

		return false;
	}

	private void populateSpecimenInstanceData(OcsOrderVo voOcsOrder)
	{
		OrderSpecimenVoCollection voCollSpecimen = new OrderSpecimenVoCollection();

		populateSpecimenInstanceDataFromGrid(voOcsOrder, form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow(), voCollSpecimen);
		populateSpecimenInstanceDataFromGrid(voOcsOrder, form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient(), voCollSpecimen);
		populateSpecimenInstanceDataFromGrid(voOcsOrder, form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther(), voCollSpecimen);
		populateSpecimenInstanceDataFromGrid(voOcsOrder, form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat(), voCollSpecimen);
		populateSpecimenInstanceDataFromGrid(voOcsOrder, form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat(), voCollSpecimen);
		populateSpecimenInstanceDataFromGrid(voOcsOrder, form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected(), voCollSpecimen);

		voOcsOrder.setSpecimens(voCollSpecimen);
	}

	private void populateSpecimenInstanceDataFromGrid(OcsOrderVo voOcsOrder, DynamicGrid grid, OrderSpecimenVoCollection voCollSpecimen)
	{
		OrderSpecimenVo voSpecimen;
		OrderSpecimenContainerVo voSpecimenContainer;
		DynamicGridRow pRow;
		DynamicGridRow cRow;
		for (int i = 0; i < grid.getRows().size(); i++)
		{
			OrderSpecimenContainerVoCollection voCollContainers = new OrderSpecimenContainerVoCollection();

			pRow = grid.getRows().get(i);
			voSpecimen = (OrderSpecimenVo) pRow.getValue();
			Object rowIdentifier = pRow.getIdentifier();

			if (voSpecimen == null)
				throw new CodingRuntimeException("OrderSpecimen value not set for parent row");

			// WDEV-3730
			voSpecimen.setRequestedType(getRequestedType(grid));

			voSpecimen.setCollectingMos(getMos());
			voSpecimen.setDiscipline((ServiceRefVo) pRow.getCells().get(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN)).getIdentifier());

			DynamicGridCell cell = pRow.getCells().get(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN));
			if (cell != null)
			{
				if (cell.getItems().size() > 0)
					voSpecimen.setSpecimenSource((SpecimenType) cell.getValue());
				else
					voSpecimen.setSpecimenSource((SpecimenType) cell.getIdentifier());
			}

			String helpText = buildInstructionsToCollector(voSpecimen);

			String completeHelpText = "";

			if (helpText != null)
				completeHelpText += helpText;

			boolean rowIdenfierIsTimeSeriesInvestigation = isTimeSeriesInvestigationIdentifier(pRow.getIdentifier());
			
			if (!rowIdenfierIsTimeSeriesInvestigation)
			{
    			String orderersInstructions = ((String) pRow.getCells().get(grid.getColumns().getByIdentifier(INSTRUCTIONS_COLUMN)).getValue());
    			if (orderersInstructions != null)
    				completeHelpText += (helpText != null ? "\r " : "") + PhlebotomyHelper.ORDERER_INSTRUCTIONS + orderersInstructions;
			}

			voSpecimen.setInstructionsToCollector(completeHelpText);

			if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient()))
			{
				voSpecimen.setIsPatientCollect(Boolean.TRUE);
				voSpecimen.setIsAwaitingCollection(Boolean.FALSE);
			}
			else if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow()))
			{
				voSpecimen.setCollDateTimePlacer(new DateTime());
				voSpecimen.setIsPatientCollect(Boolean.FALSE);
				voSpecimen.setIsAwaitingCollection(Boolean.FALSE);
			}
			else if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat()) || grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat()) || grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()))
			{
				voSpecimen.setIsAwaitingCollection(Boolean.TRUE);
				voSpecimen.setIsPatientCollect(Boolean.FALSE);
				createWorkListEntry(voSpecimen, grid, pRow, rowIdentifier);
			}
			else if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected()))
			{
				DynamicGridRow childRow = pRow.getRows().get(0);
				DynamicGridCell cellDate = childRow.getCells().get(grid.getColumns().getByIdentifier(DYN_COLDATE));
				Date dte = (Date) cellDate.getValue();

				DynamicGridCell cellTime = childRow.getCells().get(grid.getColumns().getByIdentifier(DYN_COLTIME));
				Time tme = (Time) cellTime.getValue();

				voSpecimen.setCollDateTimePlacer(new DateTime(dte, tme));

				voSpecimen.setIsPatientCollect(Boolean.FALSE);
				voSpecimen.setIsAwaitingCollection(Boolean.FALSE);

				addCollectionDateTimeValidation(null, childRow, grid);
			}

			voSpecimen.setOrder(voOcsOrder);

			for (int p = 0; p < pRow.getRows().size(); p++)
			{
				cRow = pRow.getRows().get(p);
				voSpecimenContainer = new OrderSpecimenContainerVo();
				voSpecimenContainer.setContainer(((SpecimenContainerVo) cRow.getCells().get(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN)).getIdentifier()).getSpecContainer());
				voSpecimenContainer.setContainerQuantity((Integer) cRow.getCells().get(grid.getColumns().getByIdentifier(QTY_COLUMN)).getValue());
				voSpecimenContainer.setInvestigationNames(cRow.getCells().get(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN)).getTooltip());
				voSpecimenContainer.setLabelSuffix(((SpecimenContainerVo) cRow.getCells().get(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN)).getIdentifier()).getLabelSuffix());
				voSpecimenContainer.setRequiredVolume((Float) cRow.getCells().get(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN)).getIdentifier());

				OrderInvestigationVoCollection investigationsForContainer = new OrderInvestigationVoCollection();
				if (cRow.getValue() instanceof OrderInvestigationVoCollection)
				{
					OrderInvestigationVoCollection investigations = (OrderInvestigationVoCollection) cRow.getValue();
					for (OrderInvestigationVo investigation : investigations)
						investigationsForContainer.add(investigation);
				}
				voSpecimenContainer.setOrderInvestigation(investigationsForContainer);
				
				voCollContainers.add(voSpecimenContainer);
			}
			voSpecimen.setContainers(voCollContainers);
			voCollSpecimen.add(voSpecimen);
		}
	}

	private boolean isTimeSeriesInvestigationIdentifier(Object identifier)
	{
		if (identifier instanceof OrderInvestigationVoCollection)
		{
			OrderInvestigationVoCollection investigationCollection = (OrderInvestigationVoCollection) identifier;
			
			if (investigationCollection.size() == 1)
			{
				if (InvEventType.TIME_SERIES.equals(investigationCollection.get(0).getInvestigation().getEventType()))
					return true;
			}
		}

		return false;
	}

	private SpecimenCollectionType getRequestedType(DynamicGrid grid)
	{
		// WDEV-3730
		if (grid == null)
			throw new CodingRuntimeException("grid param is null in method getRequestedType");

		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow()))
			return SpecimenCollectionType.NOW;
		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient()))
			return SpecimenCollectionType.PATIENT;
		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()))
			return SpecimenCollectionType.OTHER;
		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat()))
			return SpecimenCollectionType.PHLEBOTOMY_INPATIENT;
		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat()))
			return SpecimenCollectionType.PHLEBOTOMY_OUTPATIENT;
		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected()))
			return SpecimenCollectionType.SPECIMEN_ALREADY_COLLECTED;

		return null;
	}


	/**
	 * go through all the order investigations for this specimen and get each investigations helptext collection - if we find a helptext item with category set to HelpTextCategory.INSTRUCTIONSTOCOLLECTOR append the text of the item to the invest name and then to the returned string
	 * 
	 * @param voSpecimen
	 * @return String
	 */
	private String buildInstructionsToCollector(OrderSpecimenVo voSpecimen)
	{
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < voSpecimen.getInvestigations().size(); i++)
		{
			InvestigationUnderSpecimenVo voInvestItem = getInvestUnderSpecimenVoFromContextByOrderInvestigation(voSpecimen.getInvestigations().get(i));
			if (voInvestItem != null && voInvestItem.getHelpTextIsNotNull())
			{
				for (int p = 0; p < voInvestItem.getHelpText().size(); p++)
				{
					if (voInvestItem.getHelpText().get(p).getTextCategory().equals(HelpTextCategory.INSTRUCTIONSTOCOLLECTOR))
					{
						sb.append(voInvestItem.getInvestigationIndex().getName() + PhlebotomyHelper.INSTRUCTION_TO_COLLECTOR + voInvestItem.getHelpText().get(p).getHelpText());
					}
				}
			}
		}

		return sb.toString().length() > 0 ? sb.toString() : null;
	}


	private void createWorkListEntry(OrderSpecimenVo voSpecimen, DynamicGrid grid, DynamicGridRow row, Object rowIdentifier)
	{
		SpecimenWorkListItemVoCollection voCollWorkListItems = form.getLocalContext().getWorkListItems();
		if (voCollWorkListItems == null)
			voCollWorkListItems = new SpecimenWorkListItemVoCollection();

		SpecimenWorkListItemVo voItem = new SpecimenWorkListItemVo();
		voItem.setCollectionStatus(SpecimenCollectionStatus.FORCOLLECTION);
		voItem.setSpecimen(voSpecimen);
		
		if (rowIdentifier instanceof OrderInvestigationVoCollection)
		{
			OrderInvestigationVoCollection investigationCollection = (OrderInvestigationVoCollection) rowIdentifier;
			
			if (investigationCollection.size() == 1)
			{
				OrderInvestigationVo orderInvestigation = investigationCollection.get(0);
				
				if (InvEventType.TIME_SERIES.equals(orderInvestigation.getInvestigation().getEventType()))
					voItem.setDFTOrderInvestigation(orderInvestigation);
			}
		}

		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()))
		{
			DynamicGridCell cellCollectionMethod = row.getCells().get(grid.getColumns().getByIdentifier(PATTYPE_COLUMN));
			voItem.setListType((SpecimenCollectionMethod) cellCollectionMethod.getValue());
		}
		else if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat()))
		{
			voItem.setListType(SpecimenCollectionMethod.OUTPATIENT);
		}
		else if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat()))
		{
			voItem.setListType(SpecimenCollectionMethod.INPATIENT);
		}

		boolean passedDateTimeValidation = true;
		if (voItem.getListTypeIsNotNull() && voItem.getListType().equals(SpecimenCollectionMethod.INPATIENT))
		{
			if (row.getRows().size() > 0)
			{
				DynamicGridRow childRow = row.getRows().get(0);
				DynamicGridCell cellDate = childRow.getCells().get(grid.getColumns().getByIdentifier(DYN_COLDATE));
				voItem.setDateToCollect((Date) cellDate.getValue());

				DynamicGridCell cellRound = childRow.getCells().get(grid.getColumns().getByIdentifier(DYN_COLTIME));
				voItem.setRoundToCollect((SpecimenCollectionTime) cellRound.getValue());

				passedDateTimeValidation = addCollectionDateTimeValidation(voItem, row, grid);

				// check if there are any closed rounds
				buildClosedRounds(voItem);

			}
		}
		else if (voItem.getListTypeIsNotNull() && voItem.getListType().equals(SpecimenCollectionMethod.OUTPATIENT))
		{
			if (row.getRows().size() > 0)
			{
				DynamicGridRow childRow = row.getRows().get(0);
				DynamicGridCell cellAt = childRow.getCells().get(grid.getColumns().getByIdentifier(DYN_COLAT));
				Integer num = (Integer) cellAt.getValue();

				DynamicGridCell cellDuration = childRow.getCells().get(grid.getColumns().getByIdentifier(DYN_COLDURATION));
				OutPatientDuration duration = (OutPatientDuration) cellDuration.getValue();

				// WDEV-6003
				if (!ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") && !ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
				{
					voItem.setDateToCollect(new PhlebotomyHelper().calculateDateToCollect(num, duration));
					passedDateTimeValidation = addCollectionDateTimeValidation(voItem, row, grid);
				}
				else
					passedDateTimeValidation = true;
			}
		}
		else if (voItem.getListTypeIsNotNull() && voItem.getListType().equals(SpecimenCollectionMethod.WARDCOLLECTION))
		{
			if (row.getRows().size() > 0)
			{
				DynamicGridRow childRow = row.getRows().get(0);
				DynamicGridCell cellDate = childRow.getCells().get(grid.getColumns().getByIdentifier(DYN_COLDATE));
				Date date = (Date) cellDate.getValue();

				DynamicGridCell cellTime = childRow.getCells().get(grid.getColumns().getByIdentifier(DYN_COLTIME));
				Time time = (Time) cellTime.getValue();

				voItem.setDateToCollect(date);
				voItem.setTimeToCollect(time);

				passedDateTimeValidation = addCollectionDateTimeValidation(voItem, row, grid);
			}
		}
		else
		{
			passedDateTimeValidation = addCollectionDateTimeValidation(null, row, grid);
		}

		if (passedDateTimeValidation && (form.getLocalContext().getClosedRounds() == null || form.getLocalContext().getClosedRounds().size() == 0))
		{
			voSpecimen.setSpecimenWorklistItem(voItem);
			
			voCollWorkListItems.add(voItem);
			form.getLocalContext().setWorkListItems(voCollWorkListItems);
		}
	}

	private boolean addCollectionDateTimeValidation(SpecimenWorkListItemVo voItem, DynamicGridRow row, DynamicGrid grid)
	{
		boolean isValid = true;

		ArrayList<String> errors = form.getLocalContext().getUIValidationMessages();
		if (errors == null)
			errors = new ArrayList<String>();

		if (voItem != null && voItem.getListTypeIsNotNull())
		{
			if (voItem.getListType().equals(SpecimenCollectionMethod.INPATIENT))
			{
				if (voItem.getDateToCollect() == null || voItem.getRoundToCollect() == null)
				{
					DynamicGridCell cell = row.getCells().get(grid.getColumns().get(0));
					if (!errors.contains("Phlebotomy Tab:\n"))
						errors.add(("Phlebotomy Tab:\n"));
					errors.add("Phlebotomy Inpatient Specimen must have a Date and Round selected for " + cell.getValue());
					isValid = false;
				}
			}
			else if (voItem.getListType().equals(SpecimenCollectionMethod.OUTPATIENT))
			{
				if (voItem.getDateToCollect() == null)
				{
					DynamicGridCell cell = row.getCells().get(grid.getColumns().get(0));
					if (!errors.contains("Phlebotomy Tab:\n"))
						errors.add(("Phlebotomy Tab:\n"));
					errors.add("Phlebotomy Outpatient Specimen must have a Number and Period selected for " + cell.getValue());
					isValid = false;
				}
			}
			else if (voItem.getListType().equals(SpecimenCollectionMethod.WARDCOLLECTION))
			{
				DynamicGridCell cell = row.getCells().get(grid.getColumns().get(0));
				if (voItem.getDateToCollect() == null)
				{
					if (!errors.contains("Other Tab:\n"))
						errors.add(("Other Tab:\n"));
					errors.add("Other Ward Collection Specimen must have a Date selected for " + cell.getValue());
					isValid = false;
				}
				else if (voItem.getDateToCollect().isLessThan(new Date()))
				{
					if (!errors.contains("Other Tab:\n"))
						errors.add(("Other Tab:\n"));
					errors.add("Other Ward Collection Specimen date cannot be in the past");
					isValid = false;
				}

				if (voItem.getTimeToCollect() == null)
				{
					if (!errors.contains("Other Tab:\n"))
						errors.add(("Other Tab:\n"));
					errors.add("Other Ward Collection Specimen must have a Time selected for " + cell.getValue());
					isValid = false;
				}
				else if (voItem.getDateToCollect() != null && voItem.getDateToCollect().equals(new Date()))
				{
					if (voItem.getTimeToCollectIsNotNull())
					{
						if (voItem.getTimeToCollect().isLessThan(new Time()))
						{
							if (!errors.contains("Other Tab:\n"))
								errors.add(("Other Tab:\n"));
							errors.add("Other Ward Collection Specimen time cannot be in the past");
							isValid = false;
						}
					}
				}
			}
		}
		else
		{
			if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected()))
			{
				DynamicGridCell cell = row.getParent().getCells().get(grid.getColumns().get(0));

				DynamicGridCell cellDate = row.getCells().get(grid.getColumns().getByIdentifier(DYN_COLDATE));
				Date dte = (Date) cellDate.getValue();

				DynamicGridCell cellTime = row.getCells().get(grid.getColumns().getByIdentifier(DYN_COLTIME));
				Time tme = (Time) cellTime.getValue();

				if (dte == null || tme == null)
				{
					if (!errors.contains("Specimen Already Collected:\n"))
						errors.add(("Specimen Already Collected Tab:\n"));

					errors.add("Collection date and time not completed for " + cell.getValue());
					isValid = false;
				}

				DateTime record = new DateTime(dte, tme);
				if (record.isGreaterOrEqualThan(new DateTime()))
				{
					if (!errors.contains("Specimen Already Collected:\n"))
						errors.add(("Specimen Already Collected Tab:\n"));

					errors.add("Collection date and time must be in the past for " + cell.getValue());
					isValid = false;
				}
			}
			else
			{
				DynamicGridCell cell = row.getCells().get(grid.getColumns().get(0));
				errors.add("'Other' collection details not completed for " + cell.getValue());
				isValid = false;
			}
		}

		form.getLocalContext().setUIValidationMessages(errors);
		return isValid;
	}

	private void buildClosedRounds(SpecimenWorkListItemVo voItem)
	{
		// build up a list of closed rounds
		if (form.getGlobalContext().Core.getPatientShort().getWardIsNotNull())
		{
			PhlebotomyRoundShortVoCollection voCollExistingRounds = form.getLocalContext().getClosedRounds();
			if (voCollExistingRounds == null)
				voCollExistingRounds = new PhlebotomyRoundShortVoCollection();

			PhlebotomyRoundShortVoCollection voCollRounds = domain.listClosedRounds(voItem.getDateToCollect(), voItem.getRoundToCollect(), form.getGlobalContext().Core.getPatientShort().getWard());
			if (voCollRounds != null)
			{
				for (int i = 0; i < voCollRounds.size(); i++)
				{
					voCollExistingRounds.add(voCollRounds.get(i));
				}
			}

			form.getLocalContext().setClosedRounds(voCollExistingRounds);
		}
	}

	private MemberOfStaffRefVo getMos()
	{
		Object mos = domain.getMosUser();
		if (mos != null)
			return (MemberOfStaffRefVo) mos;

		return null;
	}

	private boolean validateRequestedTests()
	{
		if (form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().size() == 0)
			return true;

		SpecimenCollectionTypeCollection collTypes = new SpecimenCollectionTypeCollection();
		for (int i = 0; i < form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getAllRows().length; i++)
		{
			GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow specimenOrSiteRow = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getAllRows()[i];
			
			if (specimenOrSiteRow.getValue() instanceof OrderInvestigationVo)
			{
				if (specimenOrSiteRow.getColSpecimen() instanceof SpecimenVo)
				{
					collTypes.add((SpecimenCollectionType) specimenOrSiteRow.getColType().getValue());

					if (!specimenOrSiteRow.isReadOnly() && specimenOrSiteRow.getColType().getValue() == null)
						return false;
				}
				else if (specimenOrSiteRow.getColSpecimen() == null && specimenOrSiteRow.getValue() != null
						&& Boolean.TRUE.equals(specimenOrSiteRow.getValue().getInvestigation().getInvestigationIndex().getRequiresSiteSpecifier()))		// This could be a site specifier investigation and collection type
				{
					collTypes.add((SpecimenCollectionType) specimenOrSiteRow.getColType().getValue());
					
					if (!specimenOrSiteRow.isReadOnly() && specimenOrSiteRow.getColType().getValue() == null)
						return false;
				}
				else if (specimenOrSiteRow.getParentRow() != null)
				{
					collTypes.add((SpecimenCollectionType) specimenOrSiteRow.getParentRow().getColType().getValue());
					
					if (specimenOrSiteRow.getParentRow().getColType().getValue() == null)
						return false;
				}
			}
			else if (specimenOrSiteRow.getValue() == null && specimenOrSiteRow.getParentRow() != null)
			{
				collTypes.add((SpecimenCollectionType) specimenOrSiteRow.getParentRow().getColType().getValue());
				
				if (specimenOrSiteRow.getParentRow().getColType().getValue() == null)
					return false;
			}
		}

		if (collTypes.size() == 0)
			return false;
		else
			return true;
	}

	private boolean validateSiteSelection()
	{
		for (int i = 0; i < form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().size(); i++)
		{
			GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow tRow = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().get(i);
			if (tRow.getValue() != null)
			{
				if (requiresSiteSpecifier(tRow.getValue()) && tRow.getRows().size() == 0)
					return false;
			}
		}

		return true;
	}

	private void prePopulateOtherControls()
	{
		SpecimenCollectionMethodCollection collTypes = LookupHelper.getSpecimenCollectionMethod(domain.getLookupService());
		for (int i = 0; i < collTypes.size(); i++)
		{
			if (collTypes.get(i).equals(SpecimenCollectionMethod.OTHER))
			{
				for (int p = 0; p < collTypes.get(i).getChildren().length; p++)
					form.lyrDetails().tabPathDetails().lyrPathology().tabOther().cmbRequestedTypeOther().newRow((SpecimenCollectionMethod) collTypes.get(i).getChildren()[p], ((SpecimenCollectionMethod) collTypes.get(i).getChildren()[p]).getText());

				break;
			}
		}

		form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dteCollectOther().setValue(new Date());
		form.lyrDetails().tabPathDetails().lyrPathology().tabOther().cmbRequestedTypeOther().setValue(SpecimenCollectionMethod.WARDCOLLECTION);
		form.lyrDetails().tabPathDetails().lyrPathology().tabOther().btnApplyOther().setEnabled(true);
	}

	/**
	 * go through OrderSpecimen grid comparing discipline && specimenSource if found add row to the found row else instantiate new parent row and add to this
	 * 
	 * @param tRow
	 * @param grid
	 */
	private void modifyDynamicGridNowOrPatient(grdTestRow tRow, DynamicGrid grid)
	{
		OrderInvestigationVo voOrderInvestigation = tRow.getValue();
		SpecimenVo specimen = tRow.getColSpecimen();
		
		if (tRow.getColHiddenOrderInvestigationSite() != null)
		{
			voOrderInvestigation = tRow.getColHiddenOrderInvestigationSite();
		}

		if (voOrderInvestigation == null) // profile collection
		{
			grdTestRowCollection collRows = tRow.getRows();
			for (int i = 0; i < collRows.size(); i++)
			{
				voOrderInvestigation = collRows.get(i).getValue();
				voOrderInvestigation.setCollectionType((SpecimenCollectionType) tRow.getColType().getValue());
				// Clear OderSpecimen for OrderInvestigation
				voOrderInvestigation.setSpecimen(null);
				boolean bProfileProcessed = i > 0;
				modifyNowOrPatientRows(grid, voOrderInvestigation, null, collRows.get(i).getColSiteHidden(), null, false, bProfileProcessed);
			}
		}
		else
		{
			// Clear OderSpecimen for OrderInvestigation
			voOrderInvestigation.setSpecimen(null);
			voOrderInvestigation.setCollectionType((SpecimenCollectionType) tRow.getColType().getValue());
			modifyNowOrPatientRows(grid, voOrderInvestigation, specimen, tRow.getColSiteHidden(), null, false, false);

			InvestigationUnderSpecimenVoCollection voCollInvUnderSpecimen = null;
			if (tRow.getParentRow() != null && tRow.getParentRow().getColAddOnsHidden() != null && tRow.getParentRow().getColAddOnsHidden().getItems() != null)
				voCollInvUnderSpecimen = tRow.getParentRow().getColAddOnsHidden();
			else if (tRow.getColAddOnsHidden() != null && tRow.getColAddOnsHidden().getItems() != null)
				voCollInvUnderSpecimen = tRow.getColAddOnsHidden();

			if (voCollInvUnderSpecimen != null)
			{
				for (int i = 0; i < voCollInvUnderSpecimen.size(); i++)
				{
					voOrderInvestigation = createOrderInvestigation(voOrderInvestigation, voCollInvUnderSpecimen.get(i));
					voOrderInvestigation.setCollectionType((SpecimenCollectionType) tRow.getColType().getValue());
					GenericInfoAdapter site = tRow.getColSiteHidden();
					PathInvDetailsVo addOnPathInvDetails = tRow.getParentRow() != null ? tRow.getParentRow().getValue().getInvestigation().getPathInvDetails() : tRow.getValue().getInvestigation().getPathInvDetails();
					modifyNowOrPatientRows(grid, voOrderInvestigation, null, site, addOnPathInvDetails, true, false);
				}
			}
		}

		grid.setSelectable(false);
		grid.setReadOnly(false);
	}

	private OrderInvestigationVo createOrderInvestigation(OrderInvestigationVo orderInvestigation, InvestigationUnderSpecimenVo voInvestUnderSpec)
	{
		if (orderInvestigation == null)
			orderInvestigation = new OrderInvestigationVo();

		orderInvestigation.setInvestigation(voInvestUnderSpec);
		orderInvestigation.setOrderDetails(form.getLocalContext().getOcsOrder());

		form.getGlobalContext().OCRR.getOrderInvestigationCollection().add(orderInvestigation);

		return orderInvestigation;
	}

	/**
	 * @param tRow
	 * @param grid
	 *            go through orderspecimen grid comparing discipline && specimenSource if found add row to the found row else instantiate new parent row and add to this
	 */
	private void modifyDynamicGridPhlebOrOther(grdTestRow tRow, DynamicGrid grid)
	{
		OrderInvestigationVo voOrderInvestigation = tRow.getValue();
		
		if (tRow.getColHiddenOrderInvestigationSite() != null)
		{
			voOrderInvestigation = tRow.getColHiddenOrderInvestigationSite();
		}

		if (voOrderInvestigation == null) // profile collection
		{
			grdTestRowCollection collRows = tRow.getRows();
			for (int i = 0; i < collRows.size(); i++)
			{
				voOrderInvestigation = collRows.get(i).getValue();
				voOrderInvestigation.setCollectionType((SpecimenCollectionType) tRow.getColType().getValue());
				// Clear OderSpecimen for OrderInvestigation
				voOrderInvestigation.setSpecimen(null);
				boolean bProfileProcessed = i > 0;
				modifyPhlebOrOtherRows(grid, voOrderInvestigation, tRow.getColSpecimen(), collRows.get(i).getColSiteHidden(), null, false, bProfileProcessed);
			}
		}
		else
		{
			// Clear OderSpecimen for OrderInvestigation
			voOrderInvestigation.setSpecimen(null);
			voOrderInvestigation.setCollectionType((SpecimenCollectionType) tRow.getColType().getValue());

			modifyPhlebOrOtherRows(grid, voOrderInvestigation, tRow.getColSpecimen(), tRow.getColSiteHidden(), null, false, false);

			InvestigationUnderSpecimenVoCollection voCollInvUnderSpecimen = null;
			if (tRow.getParentRow() != null && tRow.getParentRow().getColAddOnsHidden() != null && tRow.getParentRow().getColAddOnsHidden().getItems() != null)
				voCollInvUnderSpecimen = tRow.getParentRow().getColAddOnsHidden();
			else if (tRow.getColAddOnsHidden() != null && tRow.getColAddOnsHidden().getItems() != null)
				voCollInvUnderSpecimen = tRow.getColAddOnsHidden();

			if (voCollInvUnderSpecimen != null)
			{
				for (int i = 0; i < voCollInvUnderSpecimen.size(); i++)
				{
					voOrderInvestigation = createOrderInvestigation(voOrderInvestigation, voCollInvUnderSpecimen.get(i));
					voOrderInvestigation.setCollectionType((SpecimenCollectionType) tRow.getColType().getValue());
					GenericInfoAdapter site = tRow.getColSiteHidden();
					PathInvDetailsVo addOnPathInvDetails = tRow.getParentRow() != null ? tRow.getParentRow().getValue().getInvestigation().getPathInvDetails() : tRow.getValue().getInvestigation().getPathInvDetails();
					modifyPhlebOrOtherRows(grid, voOrderInvestigation, tRow.getColSpecimen(), site, addOnPathInvDetails, true, false);
				}
			}
		}

		grid.setSelectable(false);
		grid.setReadOnly(false);
	}

	private void modifyPhlebOrOtherRows(DynamicGrid grid, OrderInvestigationVo voOrderInvestigation, SpecimenVo specimen, GenericInfoAdapter siteCode, PathInvDetailsVo addOnPathInvDetails, boolean isAddOn, boolean bProfileProcessed)
	{
		if (specimen == null && voOrderInvestigation != null)
		{
			specimen = voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens().get(0);
		}
		
		if (grid.getRows().size() > 0)
		{
			int rowCount = grid.getRows().size();
			boolean isNewSpecRequired = true;
			DynamicGridRow row = null;
			for (int p = 0; p < rowCount; p++)
			{
				row = grid.getRows().get(p);
				if (row.getValue() != null && row.getValue() instanceof OrderSpecimenVo)
				{
					OrderSpecimenVo voOrderSpec = (OrderSpecimenVo) row.getValue();
					Object rowIdentifier = row.getIdentifier();

					isNewSpecRequired = isNewSpecimenRequired(voOrderInvestigation, specimen, voOrderSpec, rowIdentifier, siteCode);

					if (!isNewSpecRequired)
						break;
				}
			}

			if (isNewSpecRequired && isAddOn == false)
			{
				DynamicGridRow headerRow = addSpecimenPhlebOrOtherHeaderRow(grid, voOrderInvestigation, siteCode);
				addOrEditSpecimenChildRow(headerRow, grid, voOrderInvestigation, specimen, null, bProfileProcessed);
			}
			else
			{
				addOrEditSpecimenChildRow(row, grid, voOrderInvestigation, specimen, addOnPathInvDetails, bProfileProcessed);
			}
		}
		else
		{
			DynamicGridRow headerRow = addSpecimenPhlebOrOtherHeaderRow(grid, voOrderInvestigation, siteCode);
			addOrEditSpecimenChildRow(headerRow, grid, voOrderInvestigation, specimen, null, bProfileProcessed);
		}
	}

	/**
	 * comparing discipline && specimenSource and also check the separate order and provider system flag and decide whether to create a new specimen record
	 * 
	 * @param voOrderInvestigation
	 * @param voOrderSpec
	 * @param rowIdentifier - required to see if the row was created for a DFT Investigation
	 * @param siteCode 
	 * @return isRequired
	 */
	private boolean isNewSpecimenRequired(OrderInvestigationVo voOrderInvestigation, SpecimenVo specimen, OrderSpecimenVo voOrderSpec, Object rowIdentifier, GenericInfoAdapter siteCode)
	{
		// For the same specimen create a new one for a DFT Investigations
		if (voOrderInvestigation != null && voOrderInvestigation.getInvestigation() != null && InvEventType.TIME_SERIES.equals(voOrderInvestigation.getInvestigation().getEventType()))
			return true;
		
		if (rowIdentifier instanceof OrderInvestigationVoCollection)
		{
			if (((OrderInvestigationVoCollection)rowIdentifier).size() == 1)
			{
				OrderInvestigationVo orderInvestigation = ((OrderInvestigationVoCollection)rowIdentifier).get(0);
				
				if (InvEventType.TIME_SERIES.equals(orderInvestigation.getInvestigation().getEventType()))
					return true;
			}
		}
		
		
		SpecimenSite specimenSiteInstance = null;
		if (siteCode != null)
		{
			specimenSiteInstance = LookupHelper.getSpecimenSiteInstance(domain.getLookupService(), siteCode.getIGenericItemInfoID().intValue());
		}
		
		
		// For same specimen 1) must return false, 2)must be equal, 3)must be
		// equal, 4)must be equal if 5) is populated then 6) must be equal

		// 1) seperateOrder?
		// 2) SpecimenType equality
		// 3) Provider Service
		// 4) Discipline
		// 5) Site Specifier?
		// 6) Site Selection equality

		// failed condition 1) ie. Seperate Order is true (ie a new specimen is required)
		if (voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getSeparateOrderIsNotNull())
			if (voOrderInvestigation.getInvestigation().getSeparateOrder())
				return true;

		if (voOrderSpec.getInvestigationsIsNotNull())
		{
			// go through the investigations for this specimen - if the specimen
			// has investigations that are for a different provider system or
			// specimen type or disclipline
			// then return true (ie a new specimen is required) - condition 2)
			// or 3) or 4) failed
			// then look at sites condition 5) and 6)
			for (int i = 0; i < voOrderSpec.getInvestigations().size(); i++)
			{
				InvestigationUnderSpecimenVo voInvestigationItem = getInvestUnderSpecimenVoFromContextByOrderInvestigation(voOrderSpec.getInvestigations().get(i));

				// Seperate Order was added the first time but we are trying to
				// append further inv's to the specimen
				if (voInvestigationItem.getSeparateOrderIsNotNull())
					if (voInvestigationItem.getSeparateOrder())
						return true;

				// Provider System
				if (voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getProviderServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getProviderSystemIsNotNull())
					if (voInvestigationItem != null && voInvestigationItem.getProviderServiceIsNotNull() && voInvestigationItem.getProviderService().getProviderSystemIsNotNull())
						if (!voInvestigationItem.getProviderService().getProviderSystem().equals(voOrderInvestigation.getInvestigation().getProviderService().getProviderSystem()))
							return true;

				// Specimen Type
				if (voOrderSpec.getSpecimenSourceIsNotNull() && specimen != null && specimen.getType() != null)
					if (!voOrderSpec.getSpecimenSource().equals(specimen.getType()))
						return true;

				// Discipline
				if (voOrderSpec.getDisciplineIsNotNull() && voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getProviderServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull())
					if (!voOrderSpec.getDiscipline().equals(voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getService()))
						return true;

				// Site
				if (voOrderInvestigation.getInvestigation().getInvestigationIndex().getRequiresSiteSpecifier() == null)
				{
					if (voOrderSpec.getSiteCd() != null)
						return true;
				}
				else if (Boolean.FALSE.equals(voOrderInvestigation.getInvestigation().getInvestigationIndex().getRequiresSiteSpecifier()))
				{
					if (voOrderSpec.getSiteCd() != null)
						return true;
				}
				else if (Boolean.TRUE.equals(voOrderInvestigation.getInvestigation().getInvestigationIndex().getRequiresSiteSpecifier()))
				{
					if (voOrderSpec.getSiteCd() == null)
						return true;
					
					if (!voOrderSpec.getSiteCd().equals(specimenSiteInstance))
						return true;
				}
			}
		}

		return false;
	}

	private InvestigationUnderSpecimenVo getInvestUnderSpecimenVoFromContextByOrderInvestigation(OrderInvestigationRefVo voOrderInvestigation)
	{
		OrderInvestigationVoCollection voCollOrderInvestigation = form.getGlobalContext().OCRR.getOrderInvestigationCollection();
		if (voCollOrderInvestigation != null && voCollOrderInvestigation.size() > 0)
		{
			for (int i = 0; i < voCollOrderInvestigation.size(); i++)
			{
				if (voCollOrderInvestigation.get(i).equals(voOrderInvestigation))
					return voCollOrderInvestigation.get(i).getInvestigation();
			}
		}
		return null;
	}

	private DynamicGridRow addSpecimenPhlebOrOtherHeaderRow(DynamicGrid grid, OrderInvestigationVo voOrderInvestigation, GenericInfoAdapter siteCode)
	{
		if (voOrderInvestigation == null || grid == null)
			throw new CodingRuntimeException("Coding Error OrderInvestigation or Grid is null (addSpecimenPhlebOrOtherHeaderRow) ");

		DynamicGridRow row = grid.getRows().newRow();

		DynamicGridCell cellDiscipline = row.getCells().newCell(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN), DynamicCellType.WRAPTEXT, DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		
		if (voOrderInvestigation.getInvestigation() != null && InvEventType.TIME_SERIES.equals(voOrderInvestigation.getInvestigation().getEventType()))
		{
			cellDiscipline.setValue(voOrderInvestigation.getInvestigation().getInvestigationIndex().getName());
			cellDiscipline.setIdentifier(voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getService());
		}
		else if (voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getProviderServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull())
		{
			cellDiscipline.setValue(voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
			cellDiscipline.setIdentifier(voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getService());
		}
		cellDiscipline.setWidth(240);

		if (voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getPathInvDetailsIsNotNull() && voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens() != null && voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens().get(0) != null && voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens().get(0).getType() != null)
		{
			cellDiscipline.setValue(cellDiscipline.getValue() + "( " + voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens().get(0).getType().getText() + " )" + (siteCode != null ? "  " + siteCode.getIGenericItemInfoName() : ""));
			DynamicGridCell cellSpecimenType = row.getCells().newCell(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
			cellSpecimenType.setWidth(0);
			cellSpecimenType.setIdentifier(voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens().get(0).getType());
		}

		
		if (voOrderInvestigation.getInvestigation() != null && InvEventType.TIME_SERIES.equals(voOrderInvestigation.getInvestigation().getEventType()))
		{
			DynamicGridCell cellLabelSetsLabel = row.getCells().newCell(grid.getColumns().getByIdentifier(INSTRUCTIONS_LABEL_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
			cellLabelSetsLabel.setWidth(80);
			cellLabelSetsLabel.setValue("Number of Label Sets:");

			DynamicGridCell cellLabelSets = row.getCells().newCell(grid.getColumns().getByIdentifier(INSTRUCTIONS_COLUMN), DynamicCellType.INT);

			if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected()))
				cellLabelSets.setWidth(235);
			else if (!grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()))
				cellLabelSets.setWidth(225);
			else
				cellLabelSets.setWidth(90);

			cellLabelSets.setValue(voOrderInvestigation.getInvestigation().getNoLabelSets());
		}
		else
		{
			DynamicGridCell cellInstructionLabel = row.getCells().newCell(grid.getColumns().getByIdentifier(INSTRUCTIONS_LABEL_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
			cellInstructionLabel.setWidth(80);
			cellInstructionLabel.setValue("Instructions:");

			DynamicGridCell cellInstruction = row.getCells().newCell(grid.getColumns().getByIdentifier(INSTRUCTIONS_COLUMN), DynamicCellType.WRAPTEXT);

			if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected()))
				cellInstruction.setWidth(235);
			else if (!grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()))
				cellInstruction.setWidth(225);
			else
				cellInstruction.setWidth(90);

			cellInstruction.setStringMaxLength(10000);//WDEV-14984
			cellInstruction.setTooltip("Please enter Instructions");
		}

		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()))
		{
			DynamicGridCell cellPatType = row.getCells().newCell(grid.getColumns().getByIdentifier(PATTYPE_COLUMN), DynamicCellType.ENUMERATION);
			bindCellToLookup(cellPatType, grid);

			cellPatType.setWidth(145);
			cellPatType.setAutoPostBack(true);
			cellPatType.setTooltip("Please enter a Type");
			cellPatType.setReadOnly(false);
		}

		OrderSpecimenVo voOrderSpecimen = new OrderSpecimenVo();

		if (voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getProviderServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull())
			voOrderSpecimen.setDiscipline(voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getService());

		if (voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getPathInvDetailsIsNotNull() && voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens()!= null && voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens().get(0) != null && voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens().get(0).getType() != null)
			voOrderSpecimen.setSpecimenSource(voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens().get(0).getType());

		voOrderSpecimen.setInvestigations(new OrderInvestigationRefVoCollection());
		voOrderInvestigation.setSpecimen(new OrderSpecimenRefVoCollection());
		voOrderInvestigation.getSpecimen().add(voOrderSpecimen);
		voOrderSpecimen.getInvestigations().add(voOrderInvestigation);
		voOrderSpecimen.setOrder(form.getLocalContext().getOcsOrder());

		if (siteCode != null)
			voOrderSpecimen.setSiteCd(LookupHelper.getSpecimenSiteInstance(domain.getLookupService(), siteCode.getIGenericItemInfoID().intValue()));

		row.setValue(voOrderSpecimen);
		
		storePotentialSpecimens(voOrderSpecimen);

		row.setIdentifier(new OrderInvestigationVoCollection());
		((OrderInvestigationVoCollection)row.getIdentifier()).add(voOrderInvestigation);

		row.setExpanded(true);
		return row;
	}

	private void bindCellToLookup(DynamicGridCell cell, DynamicGrid grid)
	{
		if (cell == null || grid == null)
			throw new CodingRuntimeException("Coding Error - cell or grid is null (bindCellToLookup)");

		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat()))
		{
			cell.getItems().newItem(SpecimenCollectionMethod.INPATIENT, SpecimenCollectionMethod.INPATIENT.getText());
			cell.getItems().newItem(SpecimenCollectionMethod.OUTPATIENT, SpecimenCollectionMethod.OUTPATIENT.getText());
		}
		else if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()))
		{
			SpecimenCollectionMethodCollection collMethods = LookupHelper.getSpecimenCollectionMethod(domain.getLookupService());
			for (int i = 0; i < collMethods.size(); i++)
			{
				if (collMethods.get(i).equals(SpecimenCollectionMethod.OTHER))
				{
					for (int p = 0; p < collMethods.get(i).getChildren().length; p++)
						cell.getItems().newItem(collMethods.get(i).getChildren()[p], (collMethods.get(i).getChildren()[p]).toString());

					break;
				}

			}
		}
		cell.setIdentifier(SpecimenCollectionMethod.class);
	}

	private void modifyNowOrPatientRows(DynamicGrid grid, OrderInvestigationVo voOrderInvestigation, SpecimenVo specimen, GenericInfoAdapter siteCode, PathInvDetailsVo addOnPathInvDetails, boolean isAddOn, boolean bProfileProcessed)
	{
		if (specimen == null && voOrderInvestigation != null)
		{
			specimen = voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens().get(0);
		}
		
		if (grid.getRows().size() > 0)
		{
			int rowCount = grid.getRows().size();
			boolean isNewSpecRequired = true;
			DynamicGridRow row = null;
			for (int p = 0; p < rowCount; p++)
			{
				row = grid.getRows().get(p);
				if (row.getValue() != null && row.getValue() instanceof OrderSpecimenVo)
				{
					OrderSpecimenVo voOrderSpec = (OrderSpecimenVo) row.getValue();
					Object identifier = row.getIdentifier();

					isNewSpecRequired = isNewSpecimenRequired(voOrderInvestigation, specimen, voOrderSpec, identifier, siteCode);

					if (!isNewSpecRequired)
						break;
				}
			}

			if (isNewSpecRequired && isAddOn == false)
			{
				DynamicGridRow headerRow = addSpecimenNowOrPatientHeaderRow(grid, voOrderInvestigation, specimen, siteCode);
				addOrEditSpecimenChildRow(headerRow, grid, voOrderInvestigation, specimen, null, bProfileProcessed);
			}
			else
			{
				addOrEditSpecimenChildRow(row, grid, voOrderInvestigation, specimen, addOnPathInvDetails, bProfileProcessed);
			}
		}
		else
		{
			DynamicGridRow headerRow = addSpecimenNowOrPatientHeaderRow(grid, voOrderInvestigation, specimen, siteCode);
			addOrEditSpecimenChildRow(headerRow, grid, voOrderInvestigation, specimen, null, bProfileProcessed);
		}
	}

	private DynamicGridRow addSpecimenNowOrPatientHeaderRow(DynamicGrid grid, OrderInvestigationVo voOrderInvestigation, SpecimenVo specimen, GenericInfoAdapter siteCode)
	{
		if (voOrderInvestigation == null || grid == null)
			throw new CodingRuntimeException("OrderInvestigation or Grid not sent - Coding Error");

		DynamicGridRow row = grid.getRows().newRow();

		DynamicGridCell cellDiscipline = row.getCells().newCell(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN), DynamicCellType.WRAPTEXT, DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		
		if (voOrderInvestigation.getInvestigation() != null && InvEventType.TIME_SERIES.equals(voOrderInvestigation.getInvestigation().getEventType()))
		{
			cellDiscipline.setValue(voOrderInvestigation.getInvestigation().getInvestigationIndex().getName());
			cellDiscipline.setIdentifier(voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getService());
		}
		else if (voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getProviderServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull())
		{
			cellDiscipline.setValue(voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
			cellDiscipline.setIdentifier(voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getService());
		}
		cellDiscipline.setWidth(300);

		if (specimen != null && specimen.getType() != null)
		{
			cellDiscipline.setValue(cellDiscipline.getValue() + " (" + specimen.getType().getText() + ") " + (siteCode != null ? "  " + siteCode.getIGenericItemInfoName() : ""));
			DynamicGridCell cellSpecimenType = row.getCells().newCell(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
			cellSpecimenType.setWidth(0);
			cellSpecimenType.setIdentifier(specimen.getType());
		}

		
		if (voOrderInvestigation.getInvestigation() != null && InvEventType.TIME_SERIES.equals(voOrderInvestigation.getInvestigation().getEventType()))
		{
			DynamicGridCell cellLabelSetsLabel = row.getCells().newCell(grid.getColumns().getByIdentifier(INSTRUCTIONS_LABEL_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
			cellLabelSetsLabel.setWidth(120);
			cellLabelSetsLabel.setValue("Number of Label Sets:");
			
			DynamicGridCell cellLabelSets = row.getCells().newCell(grid.getColumns().getByIdentifier(INSTRUCTIONS_COLUMN), DynamicCellType.INT);
			cellLabelSets.setWidth(60);
			cellLabelSets.setValue(voOrderInvestigation.getInvestigation().getNoLabelSets());
			cellLabelSets.setReadOnly(true);
		}
		else
		{
    		DynamicGridCell cellInstructionsLabel = row.getCells().newCell(grid.getColumns().getByIdentifier(INSTRUCTIONS_LABEL_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
    		cellInstructionsLabel.setWidth(80);
    		cellInstructionsLabel.setValue("Instructions:");
    
    		DynamicGridCell cellInstructions = row.getCells().newCell(grid.getColumns().getByIdentifier(INSTRUCTIONS_COLUMN), DynamicCellType.WRAPTEXT);
    		cellInstructions.setWidth(160);
    		cellInstructions.setStringMaxLength(10000);//WDEV-14772
    		cellInstructions.setTooltip("Please enter Instructions");
		}

		OrderSpecimenVo voOrderSpecimen = new OrderSpecimenVo();

		if (voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getProviderServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull())
			voOrderSpecimen.setDiscipline(voOrderInvestigation.getInvestigation().getProviderService().getLocationService().getService());

		if (specimen != null && specimen.getType() != null)
			voOrderSpecimen.setSpecimenSource(specimen.getType());

		voOrderSpecimen.setInvestigations(new OrderInvestigationRefVoCollection());
		
		if (voOrderInvestigation.getSpecimen() == null)
			voOrderInvestigation.setSpecimen(new OrderSpecimenRefVoCollection());
		voOrderInvestigation.getSpecimen().add(voOrderSpecimen);

		voOrderSpecimen.getInvestigations().add(voOrderInvestigation);
		voOrderSpecimen.setOrder(form.getLocalContext().getOcsOrder());

		if (siteCode != null)
			voOrderSpecimen.setSiteCd(LookupHelper.getSpecimenSiteInstance(domain.getLookupService(), siteCode.getIGenericItemInfoID().intValue()));

		// WDEV-11580
		voOrderSpecimen.setRequestedType(getRequestedType(grid));

		// WDEV-11580 store all potential specimens in memory to present user with container choices for alternate containers if needed
		storePotentialSpecimens(voOrderSpecimen);

		row.setValue(voOrderSpecimen);
		row.setIdentifier(new OrderInvestigationVoCollection());
		((OrderInvestigationVoCollection)row.getIdentifier()).add(voOrderInvestigation);

		row.setExpanded(true);
		return row;
	}

	private void storePotentialSpecimens(OrderSpecimenVo voOrderSpecimen)
	{
		OrderSpecimenVoCollection voCollOrderSpecimens = form.getGlobalContext().OCRR.getMyOrderPotentialSpecimens();
		if (voCollOrderSpecimens == null)
			voCollOrderSpecimens = new OrderSpecimenVoCollection();

		voCollOrderSpecimens.add(voOrderSpecimen);

		form.getGlobalContext().OCRR.setMyOrderPotentialSpecimens(voCollOrderSpecimens);
	}

	
	private void addOrEditSpecimenChildRow(DynamicGridRow row, DynamicGrid grid, OrderInvestigationVo voOrderInvestigation, SpecimenVo specimen, PathInvDetailsVo addOnPathInvDetails, boolean bProfileProcessed)
	{
		if (voOrderInvestigation == null || row == null)
			throw new CodingRuntimeException("OrderInvestigation, or Row not sent - Coding Error");

		if (row.getIdentifier() instanceof OrderInvestigationVoCollection)
		{
			((OrderInvestigationVoCollection) row.getIdentifier()).add(voOrderInvestigation);
		}

		boolean bUsePaediatricContainer = isUsePaedContainer();
		SpecimenContainerVo specimenContainer = null;

		Float requiredVal = null;
		if (voOrderInvestigation.getInvestigationIsNotNull())
		{
			if (voOrderInvestigation.getInvestigation().getPathInvDetailsIsNotNull())
			{
				if (specimen == null)
				{
					specimen = voOrderInvestigation.getInvestigation().getPathInvDetails().getSpecimens().get(0);
				}
			

//				if (voOrderInvestigation.getInvestigation().getParentInvestigationPathDetailsIsNotNull())
//				{
					if (bUsePaediatricContainer)
					{
						for (SpecimenContainerVo container : specimen.getPaediatricContainers())
						{
							if (specimen.getPaediatricContainers().size() == 1 && voOrderInvestigation.getChosenContainer() != null)
								specimenContainer = voOrderInvestigation.getChosenContainer();
							else
								specimenContainer = container;
							
    						requiredVal = specimenContainer.getVolume();

    						addOrEditSpecimenContainerChildRow(row, grid, voOrderInvestigation, specimen, bProfileProcessed, bUsePaediatricContainer, specimenContainer, requiredVal);
						}
					}
					else
					{
						for (SpecimenContainerVo container : specimen.getAdultContainers())
						{
    						specimenContainer = container;
    						requiredVal = specimenContainer.getVolume();

    						addOrEditSpecimenContainerChildRow(row, grid, voOrderInvestigation, specimen, bProfileProcessed, bUsePaediatricContainer, specimenContainer, requiredVal);
						}
					}
//				}
//				else
//				{
//					if (bUsePaediatricContainer)
//					{
//						voPathSpecimenContainer = specimen.getPaediatricContainers().get(0).getSpecContainer();
//						requiredVal = specimen.getPaediatricContainers().get(0).getVolume();
//					}
//					else
//					{
//						voPathSpecimenContainer = specimen.getAdultContainers().get(0).getSpecContainer();
//						requiredVal = specimen.getAdultContainers().get(0).getVolume();
//					}
//				}
			}
			else if (addOnPathInvDetails != null)
			{
				if (bUsePaediatricContainer)
				{
					for (SpecimenContainerVo container : specimen.getPaediatricContainers())
					{
    					specimenContainer = container;
    					requiredVal = specimenContainer.getVolume();
    					
    					addOrEditSpecimenContainerChildRow(row, grid, voOrderInvestigation, specimen, bProfileProcessed, bUsePaediatricContainer, specimenContainer, requiredVal);
					}
				}
				else
				{
					for (SpecimenContainerVo container : specimen.getAdultContainers())
					{
    					specimenContainer = container;
    					requiredVal = specimenContainer.getVolume();
    
    					addOrEditSpecimenContainerChildRow(row, grid, voOrderInvestigation, specimen, bProfileProcessed, bUsePaediatricContainer, specimenContainer, requiredVal);
					}
				}
			}
		}
	}

	private void addOrEditSpecimenContainerChildRow(DynamicGridRow row, DynamicGrid grid, OrderInvestigationVo voOrderInvestigation, SpecimenVo specimen, boolean bProfileProcessed, boolean bUsePaediatricContainer, SpecimenContainerVo specimenContainer, Float requiredVal)
	{
		if (specimenContainer == null)
		{
			engine.showMessage("Config Error - No Container specified");
			return;
		}

		// WDEV-11747
		if (specimenContainer.getVolumeIsNotNull())
			requiredVal = specimenContainer.getVolume();

		Float containerVal = specimenContainer.getSpecContainer().getVolume();

		boolean isAddNew = row.getRows().size() == 0;
		for (int i = 0; i < row.getRows().size(); i++)
		{
			DynamicGridRow childRow = row.getRows().get(i);
			DynamicGridCell specimenCell = childRow.getCells().get(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN));
			if (specimenCell.getIdentifier() != null && ((SpecimenContainerVo)specimenCell.getIdentifier()).getSpecContainer().equals(specimenContainer.getSpecContainer()))
			{
				editChildRow(grid, requiredVal, containerVal, childRow, voOrderInvestigation, bProfileProcessed);
				isAddNew = false;
				break;
			}
			else
			{
				isAddNew = true;
			}
		}

		if (isAddNew == true)
		{
			addChildRow(row, grid, voOrderInvestigation, specimen, bUsePaediatricContainer, specimenContainer, containerVal, requiredVal);
		}

		// adding the orderinvestigation to the collection of
		// orderinvestigations for the parent(OrderSpecimen) row
		OrderSpecimenVo voOrderSpecimen = (OrderSpecimenVo) row.getValue();

		// Test if the oder investigation is DFT
		// Test if the investigation OrderSpecimen collection was created
		if (voOrderInvestigation.getSpecimen() == null)
			voOrderInvestigation.setSpecimen(new OrderSpecimenRefVoCollection());
		
		voOrderInvestigation.getSpecimen().add(voOrderSpecimen);
		
		voOrderSpecimen.getInvestigations().add(voOrderInvestigation);
		voOrderSpecimen.setOrder(form.getLocalContext().getOcsOrder());
		row.setValue(voOrderSpecimen);

		// WDEV-11542 updating the total required for specimen
		updateSpecimenRowTotal(row, grid);
	}

	private void updateSpecimenRowTotal(DynamicGridRow row, DynamicGrid grid)
	{
		// WDEV-12280
		if (!ConfigFlag.UI.OCS_ORDERING_DISPLAY_BLOOD_VOLUMES.getValue())
			return;
		

		DynamicGridCell cellHeaderDiscipline = row.getCells().get(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN));

		// Get total volume required for specimen
		Float thisval = 0.0f;
		for (int i = 0; i < row.getRows().size(); i++)
		{
			DynamicGridCell cellDiscipline = row.getRows().get(i).getCells().get(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN));
			thisval += (Float) cellDiscipline.getIdentifier();
		}
		
		
		StringBuilder cellHeaderDisciplineValue = new StringBuilder();
		
		if (row.getIdentifier() instanceof OrderInvestigationVoCollection)
		{
			OrderInvestigationVoCollection investigations = (OrderInvestigationVoCollection) row.getIdentifier();
			
			if (investigations.size() == 1 && InvEventType.TIME_SERIES.equals(investigations.get(0).getInvestigation().getEventType()))
			{
				cellHeaderDisciplineValue.append(investigations.get(0).getInvestigation().getInvestigationIndex().getName());
			}
			else if (cellHeaderDiscipline.getIdentifier() instanceof ServiceVo)
			{
				cellHeaderDisciplineValue.append(((ServiceVo) cellHeaderDiscipline.getIdentifier()).getServiceName());
			}
		}

		DynamicGridCell cellSpecimenType = row.getCells().get(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN));
		if (cellSpecimenType.getIdentifier() instanceof SpecimenType)
		{
			cellHeaderDisciplineValue.append(" (").append(((SpecimenType) cellSpecimenType.getIdentifier()).getText()).append(") ");
		}
		
		if (row.getValue() instanceof OrderSpecimenVo)
		{
			OrderSpecimenVo orderSpecimen = (OrderSpecimenVo) row.getValue();
			
			if (orderSpecimen.getSiteCd() != null)
			{
				cellHeaderDisciplineValue.append(" ").append(orderSpecimen.getSiteCd().getText());
			}
		}
		
		cellHeaderDisciplineValue.append(" - ").append(thisval).append(" mls");

		cellHeaderDiscipline.setValue(cellHeaderDisciplineValue.toString());		
	}

	private void addChildRow(DynamicGridRow row, DynamicGrid grid, OrderInvestigationVo voOrderInvestigation, SpecimenVo specimen, boolean bUsePaediatricContainer, SpecimenContainerVo specimenContainer, Float containerVal, Float requiredVal)
	{
		DynamicGridRow childRow = row.getRows().newRow();

		// Use this as a temporary collection to hold OrderInvestigations for this container
		childRow.setValue(new OrderInvestigationVoCollection());
		((OrderInvestigationVoCollection)childRow.getValue()).add(voOrderInvestigation);

		DynamicGridCell cellDiscipline = childRow.getCells().newCell(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
		if (voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getPathInvDetailsIsNotNull())
		{
			cellDiscipline.setValue("Container:");

//			PathInvDetailsVo voPathDetails = null;
//			if (voOrderInvestigation.getInvestigation().getParentInvestigationPathDetailsIsNotNull())
//				voPathDetails = voOrderInvestigation.getInvestigation().getParentInvestigationPathDetails();
//			else
//				voPathDetails = voOrderInvestigation.getInvestigation().getPathInvDetails();

			if (specimen != null)
			{
				if (bUsePaediatricContainer)
				{
					//WDEV-11730
					if (specimen.getPaediatricContainersIsNotNull() && specimen.getPaediatricContainers().get(0).getVolumeIsNotNull())
					{
						cellDiscipline.setIdentifier(requiredVal);
					}
					else
					{
						cellDiscipline.setIdentifier(requiredVal);
					}
				}
				//WDEV-11730
				else if (specimen.getAdultContainersIsNotNull() && specimen.getAdultContainers().get(0).getVolumeIsNotNull())
				{
					cellDiscipline.setIdentifier(requiredVal);
				}
				else
				{
					cellDiscipline.setIdentifier(requiredVal);
				}
			}

			String invName = voOrderInvestigation.getInvestigation().getInvestigationIndex().getName();

			cellDiscipline.setTooltip(invName);
			cellDiscipline.setWidth(120);

			DynamicGridCell cellSpecimenType = childRow.getCells().newCell(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN), DynamicCellType.WRAPTEXT, DynamicGridCellOptions.READ_ONLY_DATA_CELL);
			cellSpecimenType.setIdentifier(specimenContainer);

			// WDEV-12280
			StringBuilder display = new StringBuilder(specimenContainer.getSpecContainer().getName());
			if (ConfigFlag.UI.OCS_ORDERING_DISPLAY_BLOOD_VOLUMES.getValue())
				display.append(" - ").append(String.valueOf(requiredVal)).append(" mls");
			cellSpecimenType.setValue(display.toString());

			cellSpecimenType.setTooltip(invName);

			if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat()) || grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat()) || grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()) || grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected()))
				cellSpecimenType.setWidth(120);
			else
				cellSpecimenType.setWidth(180);
		}

		DynamicGridCell cellInstructionsLabel = childRow.getCells().newCell(grid.getColumns().getByIdentifier(INSTRUCTIONS_LABEL_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
		cellInstructionsLabel.setWidth(0);

		DynamicGridCell cellInstructions = childRow.getCells().newCell(grid.getColumns().getByIdentifier(INSTRUCTIONS_COLUMN), DynamicCellType.LABEL, DynamicGridCellOptions.LABEL_CELL);
		cellInstructions.setValue("Quantity: ");
		cellInstructions.setWidth(80);

		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()))
		{
			DynamicGridCell cellPatType = childRow.getCells().newCell(grid.getColumns().getByIdentifier(PATTYPE_COLUMN), DynamicCellType.LABEL);
			cellPatType.setWidth(0);
		}

		DynamicGridColumn colQty = grid.getColumns().getByIdentifier(QTY_COLUMN);
		colQty.setWidth(0);
		colQty.setDynamicWidthSupported(true);

		DynamicGridCell cellQty = childRow.getCells().newCell(colQty, DynamicCellType.INT);
		cellQty.setValue(calculateQuantity(grid, childRow, requiredVal, containerVal));
		cellQty.setTooltip("Container Quantity");
		cellQty.setReadOnly(InvEventType.TIME_SERIES.equals(voOrderInvestigation.getInvestigation().getEventType()));
		// wdev-11128
		cellQty.setIntMaxLength(3);
		// ------------
		cellQty.setWidth(260);

		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient()) || grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow()))
			cellQty.setWidth(160);
		else if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat()) || grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat()))
		{
			cellQty.setWidth(80);
			if (row.getRows().size() == 1)
			{
				if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat()))
				{
					DynamicGridColumn colDate = grid.getColumns().getByIdentifier(DYN_COLDATE);
					DynamicGridColumn colTime = grid.getColumns().getByIdentifier(DYN_COLTIME);

					DynamicGridCell cellDate = childRow.getCells().newCell(colDate, DynamicCellType.DATE);
					cellDate.setReadOnly(false);
					cellDate.setAutoPostBack(true);
					cellDate.setTooltip("Please select Date");
					cellDate.setWidth(80);

					DynamicGridCell cellTime = childRow.getCells().newCell(colTime, DynamicCellType.ENUMERATION);
					cellTime.setReadOnly(false);
					cellTime.getItems().clear();
					cellTime.setTooltip("Please select Round");
					cellTime.setWidth(65);
				}
				else
				{
					DynamicGridColumn colAt = grid.getColumns().getByIdentifier(DYN_COLAT);
					DynamicGridColumn colDuration = grid.getColumns().getByIdentifier(DYN_COLDURATION);

					DynamicGridCell cellAt = childRow.getCells().newCell(colAt, DynamicCellType.INT);
					cellAt.setReadOnly(false);
					cellAt.setTooltip("Please enter number and period e.g. 3 months");
					cellAt.setWidth(65);

					DynamicGridCell cellDuration = childRow.getCells().newCell(colDuration, DynamicCellType.ENUMERATION);
					populateCellFromLookup(cellDuration);
					cellDuration.setReadOnly(false);
					cellDuration.setTooltip("Please enter number and period e.g. 3 months");
					cellDuration.setWidth(80);

					if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
					{
						if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat()))
						{
							cellAt.setValue(new Integer(1));
							cellDuration.setValue(OutPatientDuration.DAYS);
						}
					}
				}
			}
		}

		if (grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther()) || grid.equals(form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected()))
		{
			if (row.getRows().size() == 1)
			{
				cellQty.setWidth(90);
				DynamicGridColumn colDate = grid.getColumns().getByIdentifier(DYN_COLDATE);

				if (colDate == null)
					colDate = grid.getColumns().newColumn("", DYN_COLDATE);

				colDate.setDynamicWidthSupported(true);
				colDate.setWidth(0);

				DynamicGridCell cellDate = childRow.getCells().newCell(colDate, DynamicCellType.DATE);
				cellDate.setReadOnly(false);
				cellDate.setWidth(80);
				cellDate.setTooltip("Please enter Date");

				DynamicGridColumn colTime = grid.getColumns().getByIdentifier(DYN_COLTIME);

				if (colTime == null)
					colTime = grid.getColumns().newColumn("", DYN_COLTIME);

				colTime.setDynamicWidthSupported(true);
				colTime.setWidth(0);

				DynamicGridCell cellTime = childRow.getCells().newCell(colTime, DynamicCellType.TIME);
				cellTime.setReadOnly(false);
				cellTime.setWidth(65);
				cellTime.setTooltip("Please enter Time");
			}
			else
				cellQty.setWidth(90);
		}
	}

	private void editChildRow(DynamicGrid grid, Float requiredVal, Float containerVal, DynamicGridRow childRow, OrderInvestigationVo voOrderInvestigation, boolean bProfileProcessed)
	{
		if (!(childRow.getValue() instanceof OrderInvestigationVoCollection))
			childRow.setValue(new OrderInvestigationVoCollection());
		((OrderInvestigationVoCollection) childRow.getValue()).add(voOrderInvestigation);
		
		// modify the tooltip
		DynamicGridCell cellDiscipline = childRow.getCells().get(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN));
		DynamicGridCell cellSpecimenType = childRow.getCells().get(grid.getColumns().getByIdentifier(SPECIMENTYPE_COLUMN));
		String invName = voOrderInvestigation.getInvestigation().getInvestigationIndex().getName();
		if (cellDiscipline.getTooltip() != null)
			cellDiscipline.setTooltip(cellDiscipline.getTooltip() + ", " + invName);

		if (cellSpecimenType.getTooltip() != null)
			cellSpecimenType.setTooltip(cellSpecimenType.getTooltip() + ", " + invName);
		
		Float thisval = (Float) cellDiscipline.getIdentifier();
		// updating the total required for container
		if (cellSpecimenType.getValue() != null && cellSpecimenType.getValue() instanceof String)
		{
			
			thisval += requiredVal;
			// WDEV-12280
			if (ConfigFlag.UI.OCS_ORDERING_DISPLAY_BLOOD_VOLUMES.getValue())
			{
				int beginIndex = cellSpecimenType.getValue().toString().indexOf(" - ");
				cellSpecimenType.setValue(cellSpecimenType.getValue().toString().substring(0, beginIndex) + " - " + String.valueOf(thisval) + " mls");
			}
			
			cellDiscipline.setIdentifier(thisval);
		}

		if (voOrderInvestigation.getInvestigationIsNotNull() && voOrderInvestigation.getInvestigation().getIsAddonIsNotNull() && voOrderInvestigation.getInvestigation().getIsAddon().booleanValue())
			return;

		DynamicGridCell cellQty = childRow.getCells().get(grid.getColumns().getByIdentifier(QTY_COLUMN));
		if (cellQty != null)
		{
			if (!bProfileProcessed)
				cellQty.setValue(calculateQuantity(grid, childRow, thisval, containerVal));
		}
	}

	private Integer calculateQuantity(DynamicGrid grid, DynamicGridRow row, Float requiredVal, Float containerVal)
	{
//		Float existingVal = (Float) row.getCells().get(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN)).getIdentifier();
//		float exVal = 0;
//		if (existingVal != null)
//			exVal = existingVal.floatValue();

		float reqVal = 0;
		if (requiredVal != null)
			reqVal = requiredVal.floatValue();
		float conVal;

		// Container doesn't have any volume requirement.
		if (containerVal == null || containerVal.floatValue() == 0)
		{
			row.setIdentifier(1);
			return new Integer(1);
		}
		else
			conVal = containerVal.floatValue();
		float newTotal = reqVal;

		// This part is to avoid an anomale of adding 2 floats together (e.g 1.1
		// + 0.2 and getting 1.300000001 as the result
		NumberFormat nf = NumberFormat.getInstance();
		nf.setMaximumFractionDigits(2);
		nf.setMinimumFractionDigits(2);
		String roundedTotalStr = nf.format(newTotal);

		// WDEV-5888
		roundedTotalStr = roundedTotalStr.replaceAll(",", "");

		Float roundedTotal = Float.valueOf(roundedTotalStr);
//		row.getCells().get(grid.getColumns().getByIdentifier(DISCIPLINE_COLUMN)).setIdentifier(roundedTotal); - DO NOT CODE SIDE EFFECT INSIDE FUNCTIONS

		float fQty = roundedTotal.floatValue() / conVal;
		int ret = (int) fQty;
		if (ret == fQty && ret != 0)// no containers (need at least one) dlaffan 16/12/2010
		{
			row.setIdentifier(ret);
			return new Integer(ret);
		}
		else
		{
			row.setIdentifier(ret + 1);
			return new Integer(ret + 1);
		}
	}

	private boolean isUsePaedContainer()
	{
		int cfgAge = ConfigFlag.GEN.PAEDIATRIC_AGE.getValue();
		int patAge = -1;

		Integer iAge = form.getGlobalContext().Core.getPatientShort().calculateAge();
		if (iAge != null)
			patAge = form.getGlobalContext().Core.getPatientShort().calculateAge().intValue();

		if (patAge > cfgAge || patAge == -1)
			return false;

		return true;
	}

	/**
	 * will check invs selected and show whichever tab is next and disable the current tab and also enable a previous button on the next tab
	 */
	private void showNextTabAndDisableCurrent()
	{
		if (form.lyrDetails().tabClinicalNotes().isVisible())
		{
			form.lyrDetails().tabClinicalNotes().setHeaderEnabled(false);

			if (Boolean.TRUE.equals(ConfigFlag.UI.ORDERING_DISPLAY_SUMMARY_CLINICAL_INFO.getValue()))
			{
				displaySummaryClinicalInfo();
			}
			// WDEV-5344
			else if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
				displayRadOrPathTab();
			else
			{
				form.lyrDetails().tabGenDetails().setHeaderVisible(true);
				form.lyrDetails().showtabGenDetails();
				
				bindOrderPriority(form.getGlobalContext().OCRR.getMyOrderComponents());
				
				// WDEV-9457 - if order contains any of these inv types
				if (!doesOrderContainInvType(Category.CLINICALIMAGING) && !doesOrderContainInvType(Category.PATHOLOGY))
				{
					enableOrdering();
					form.lyrDetails().tabGenDetails().btnContinueGeneral().setEnabled(false);
				}
				else
					form.lyrDetails().tabGenDetails().btnContinueGeneral().setEnabled(true);
			}
		}
		else if (form.lyrDetails().tabSummaryClinicalInfo().isVisible())
		{
			form.lyrDetails().tabSummaryClinicalInfo().setHeaderEnabled(false);
			
			if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH"))
			{
				displayRadOrPathTab();
			}
			else
			{
				form.lyrDetails().tabGenDetails().setHeaderVisible(true);
				form.lyrDetails().showtabGenDetails();
				
				bindOrderPriority(form.getGlobalContext().OCRR.getMyOrderComponents());
				
				if (!doesOrderContainInvType(Category.CLINICALIMAGING) && !doesOrderContainInvType(Category.PATHOLOGY))
				{
					enableOrdering();
					form.lyrDetails().tabGenDetails().btnContinueGeneral().setEnabled(false);
				}
				else
					form.lyrDetails().tabGenDetails().btnContinueGeneral().setEnabled(true);
			}
		}
		else if (form.lyrDetails().tabGenDetails().isVisible())
		{
			form.lyrDetails().tabGenDetails().setHeaderEnabled(false);
			displayRadOrPathTab();
			
			if (form.lyrDetails().tabPathDetails().isVisible() && form.getLocalContext().getOcsOrder().getID_OcsOrderSession() == null) //WDEV-14495
			{
				defaultSpecimenSite();
			}
		}
		else if (form.lyrDetails().tabRadDetails().isVisible())
		{
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().size() > 0)
			{
				form.lyrDetails().tabRadDetails().setHeaderEnabled(false);
				form.lyrDetails().showtabPathDetails();
				form.lyrDetails().tabPathDetails().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabRequestedTests();

				form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderVisible(false);
				form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderVisible(false);
				form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderVisible(false);
				form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderVisible(false);
				form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().setHeaderVisible(false);

				// WDEV-5344
				if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
					form.lyrDetails().tabPathDetails().btnGenerateSpecimens().setVisible(false);
				
				if (form.getLocalContext().getOcsOrder().getID_OcsOrderSession() == null)
				{
					defaultSpecimenSite(); //WDEV-14495
				}
			}
		}
		else if (form.lyrDetails().tabPathDetails().isVisible())
		{
			showNextTestsTabAndHideCurrent();
		}
	}

	private void displaySummaryClinicalInfo()
	{
		form.lyrDetails().tabSummaryClinicalInfo().setHeaderEnabled(true);
		form.lyrDetails().showtabSummaryClinicalInfo();
	}

	/**
	 * for RefMan
	 */
	private void displayRadOrPathTab()
	{
		if (doesOrderContainInvType(Category.CLINICALIMAGING))
		{
			form.lyrDetails().tabRadDetails().setHeaderVisible(true);
			form.lyrDetails().showtabRadDetails();
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().size() == 0)
			{
				form.lyrDetails().tabRadDetails().btnContinueRad().setVisible(false);
				enableOrdering();
			}
		}
		else if (doesOrderContainInvType(Category.PATHOLOGY))
		{
			form.lyrDetails().tabPathDetails().setHeaderVisible(true);
			form.lyrDetails().showtabPathDetails();
			form.lyrDetails().tabPathDetails().lyrPathology().showtabRequestedTests();

			form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderVisible(false);
			form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderVisible(false);
			form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderVisible(false);
			form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderVisible(false);
			form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().setHeaderVisible(false);

			if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
				form.lyrDetails().tabPathDetails().btnGenerateSpecimens().setVisible(false);
		}
		else if (doesOrderContainInvType(Category.CLINICAL))
		{
			form.lyrDetails().tabClinicalNotes().btnContinueClinical().setVisible(false);
			enableOrdering();
		}
	}

	private void showNextTestsTabAndHideCurrent()
	{
		if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
			return;

		if (form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().setHeaderEnabled(false);
			// check which grids were instantiated and show the corresponding
			// tab
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabNow();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat().getRows().size() > 0 || form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabPhlebotomy();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabPatient();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabOther();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabSpecAlreadyCollected();
			}
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabNow().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderEnabled(false);

			if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat().getRows().size() > 0 || form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabPhlebotomy();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabPatient();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabOther();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabSpecAlreadyCollected();
			}
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderEnabled(false);

			if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabPatient();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabOther();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabSpecAlreadyCollected();
			}
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderEnabled(false);

			if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabOther();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabSpecAlreadyCollected();
			}
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderEnabled(false);

			if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().setHeaderVisible(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabSpecAlreadyCollected();
			}
		}

		if (!doOtherTestTabsContainSpecimens())
		{
			form.lyrDetails().tabPathDetails().btnGenerateSpecimens().setVisible(false);
			enableOrdering();
		}
	}

	private boolean doOtherTestTabsContainSpecimens()
	{
		if (form.lyrDetails().tabPathDetails().lyrPathology().tabNow().isVisible())
		{
			// check the phleb,patient and other tabs
			// phleb
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat().getRows().size() > 0 || form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat().getRows().size() > 0)
				return true;
			// patient
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient().getRows().size() > 0)
				return true;
			// other
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getRows().size() > 0)
				return true;
			// already
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getRows().size() > 0)
				return true;
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().isVisible())
		{
			// check the patient and other tabs
			// patient
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient().getRows().size() > 0)
				return true;
			// other
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getRows().size() > 0)
				return true;
			// already
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getRows().size() > 0)
				return true;
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().isVisible())
		{
			// check the other tab
			// other
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getRows().size() > 0)
				return true;
			// already
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getRows().size() > 0)
				return true;
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().isVisible())
		{
			// already
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected().getRows().size() > 0)
				return true;
		}

		return false;
	}

	private void loadHospitalCombo()
	{
		LocShortMappingsVoCollection voCollHospitals = form.getLocalContext().getActiveHospitals();

		if (voCollHospitals != null)
		{
			voCollHospitals.sort();
			for (int i = 0; i < voCollHospitals.size(); i++)
				form.lyrDetails().tabGenDetails().cmbHospital().newRow(voCollHospitals.get(i), voCollHospitals.get(i).toString());
		}
	}

	private void initialiseReportToGrid()
	{
		if (form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().size() > 0)
			return;

		form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().clear();

		DynamicGridColumn col1 = form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().newColumn("Report To:", REPORTTO_COLUMN);
		col1.setWidth(200);

		DynamicGridColumn col2 = form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().newColumn("Ward / Outpatient Dept", WARDOUTPAT_COLUMN);
		col2.setWidth(150);

		DynamicGridColumn col3 = form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().newColumn("Address", ADDRESS_COLUMN);
		col3.setWidth(-1);

		if (ConfigFlag.UI.HIDE_REPORT_TO_FIELD_WHEN_ORDERING.getValue() == true)
		{
			form.lyrDetails().tabGenDetails().dyngrdReportTo().setVisible(false);
			form.lyrDetails().tabGenDetails().lbl8().setVisible(false);
		}
	}

	private void prePopulatePatientLocationAndClinician()
	{
		if (form.lyrDetails().tabGenDetails().grpPatientLocation().getValue().equals(grpPatientLocationEnumeration.None))
			form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoWard);

		// WDEV-16207
		// Get logged in location
		ILocation currentLocation = domain.getCurrentLocation();
		// Get HCP Lite user
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
		
		// If the logged in location is an Emergency Department		
		boolean loggedInEmergencyDepartment = currentLocation != null && currentLocation instanceof LocationLiteVo && LocationType.ANE.equals(((LocationLiteVo)currentLocation).getType());
		
		// WDEV-9913 - if the cats referral is not null retrieve the initially seen by HCP for the ConsultationClinicalNotes record
		if (form.getGlobalContext().RefMan.getCatsReferralIsNotNull())
		{
			HcpLiteVo voHcp = domain.getInitiallySeenByHcpFromConsultationClinicalNotesByReferral(form.getGlobalContext().RefMan.getCatsReferral());
			if (voHcp != null)
			{
				form.lyrDetails().tabGenDetails().qmbClinician().newRow(voHcp, voHcp.toString());
				form.lyrDetails().tabGenDetails().qmbClinician().setValue(voHcp);
			}
		}


		MyOrderInpatEpisVo voInpatEpis = null;
		MyOrderOutpatAttendVo voOutPatAttend = null;

		// WDEV-4965
		if (ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
		{
			if (form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContextIsNotNull())
			{
				ContextType type = form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getContext();
				if (type.equals(ContextType.INPATIENT))
				{
					// getInpatientEpisode by Patient and PasEvent
					voInpatEpis = domain.getInpatientEpisode(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getPasEvent());
				}
				else if (type.equals(ContextType.OUTPATIENT))
				{
					// getOutpatientAttendance by Patient and PasEvent
					voOutPatAttend = domain.getOutPatientAttendance(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getPasEvent());
				}
			}
		}
		else
		{
			voInpatEpis = domain.getInpatientEpisode(form.getGlobalContext().Core.getPatientShort(), null);
			if (voInpatEpis == null)
				voOutPatAttend = domain.getOutPatientAttendance(form.getGlobalContext().Core.getPatientShort(), null);
		}

		// Patient is an Inpatient
		if (voInpatEpis != null)
		{
			// Default in the Bleep Number
			if (voInpatEpis != null && voInpatEpis.getPasEvent().getLocation() != null && voInpatEpis.getPasEvent().getLocation().getAddress() != null)
			{
				form.lyrDetails().tabGenDetails().txtBleepNo().setValue(voInpatEpis.getPasEvent().getLocation().getAddress().getPhone());
			}
			
			if (ConfigFlag.UI.ORDER_ENTRY_USE_ED_DEFAULT_LOCATION.getValue() && loggedInEmergencyDepartment)
			{
				// If patient was selected from Outpatient List
				if (form.getForms().Core.OutpatientList.equals(form.getGlobalContext().Core.getSelectingPatientForm()))
				{
					// Default to Clinic
					form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoClinic);
					displayHospital((ValueObject) currentLocation);
					loadOutpatientDepartment();
				}
				else // If patient was not selected from Outpatient List
				{
					displayHospital(voInpatEpis.getPasEvent().getLocation());

					form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoWard);
					form.lyrDetails().tabGenDetails().qmbLocation().newRow(voInpatEpis.getPasEvent().getLocation(), voInpatEpis.getPasEvent().getLocation().getName());
					form.lyrDetails().tabGenDetails().qmbLocation().setValue(voInpatEpis.getPasEvent().getLocation());
				}
			}
			else	// Old functionality - might be the same as the other, but keep it here for reference
			{
				form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoWard);
				form.lyrDetails().tabGenDetails().qmbLocation().newRow(voInpatEpis.getPasEvent().getLocation(), voInpatEpis.getPasEvent().getLocation().getName());
				form.lyrDetails().tabGenDetails().qmbLocation().setValue(voInpatEpis.getPasEvent().getLocation());

				displayHospital(voInpatEpis.getPasEvent().getLocation());
				// WDEV-9075
				if (voInpatEpis.getPasEvent().getLocationIsNotNull())
					form.lyrDetails().tabGenDetails().qmbLocation().newRow(voInpatEpis.getPasEvent().getLocation(), voInpatEpis.getPasEvent().getLocation().getName());

				form.lyrDetails().tabGenDetails().qmbLocation().setValue(voInpatEpis.getPasEvent().getLocation());
			}

			// WDEV-4965
			if (ConfigFlag.DOM.CREATE_ORDERS_WITH_CARECONTEXT_ONLY.getValue())
			{
				if (form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContextIsNotNull() && form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getEpisodeOfCareIsNotNull() && form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getEpisodeOfCare().getResponsibleHCPIsNotNull())
				{
					if (form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getEpisodeOfCare().getResponsibleHCP().getIsActiveIsNotNull() && form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getEpisodeOfCare().getResponsibleHCP().getIsActive()) // wdev-11581
					{
						form.lyrDetails().tabGenDetails().qmbClinician().clear();
						form.lyrDetails().tabGenDetails().qmbClinician().newRow(form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getEpisodeOfCare().getResponsibleHCP(), form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getEpisodeOfCare().getResponsibleHCP().getName().toString());
						form.lyrDetails().tabGenDetails().qmbClinician().setValue(form.getGlobalContext().Core.CareContextSelectDialog.getChosenCareContext().getEpisodeOfCare().getResponsibleHCP());
					}
				}
			}
			else
			{
				form.lyrDetails().tabGenDetails().qmbClinician().clear();
				
				if (voInpatEpis.getPasEvent().getConsultant() != null)
				{
					HcpLiteVo hcpLiteConsultant = getHcpLiteFromMedicLite(voInpatEpis.getPasEvent().getConsultant());
		
					if (Boolean.TRUE.equals(hcpLiteConsultant.getIsActive()) && Boolean.TRUE.equals(hcpLiteConsultant.getIsHCPaResponsibleHCP()))
					{
						form.lyrDetails().tabGenDetails().qmbClinician().clear();
						form.lyrDetails().tabGenDetails().qmbClinician().newRow(hcpLiteConsultant, voInpatEpis.getPasEvent().getConsultant().getName().toString());
						form.lyrDetails().tabGenDetails().qmbClinician().setValue(hcpLiteConsultant);
					}
					else if (hcpUser != null && Boolean.TRUE.equals(hcpUser.getIsHCPaResponsibleHCP()))
					{
						form.lyrDetails().tabGenDetails().qmbClinician().clear();
						form.lyrDetails().tabGenDetails().qmbClinician().newRow(hcpUser, hcpUser.getName().toString());
						form.lyrDetails().tabGenDetails().qmbClinician().setValue(hcpUser);
					}
				}
    			else if (hcpUser != null && Boolean.TRUE.equals(hcpUser.getIsHCPaResponsibleHCP()))
    			{
    				form.lyrDetails().tabGenDetails().qmbClinician().clear();
    				form.lyrDetails().tabGenDetails().qmbClinician().newRow(hcpUser, hcpUser.getName().toString());
    				form.lyrDetails().tabGenDetails().qmbClinician().setValue(hcpUser);
    			}
			}
		}
		else if (voOutPatAttend != null)	// Patient is an Outpatient
		{
			if (ConfigFlag.UI.ORDER_ENTRY_USE_ED_DEFAULT_LOCATION.getValue() && loggedInEmergencyDepartment)
			{
				// If the patient was selected from Outpatient List
				if (form.getForms().Core.OutpatientList.equals(form.getGlobalContext().Core.getSelectingPatientForm()))
				{
					displayHospital((ValueObject) currentLocation);
					// Default to Clinic
					form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoClinic);
					loadOutpatientDepartment();
				}
				// If the patient was selected from Clinic List with ICP Actions
//				else if (form.getForms().Clinical.ClinicListWithICPActions.equals(form.getGlobalContext().Core.getSelectingPatientForm()))
//				{
//					// Default the hospital from Clinic List with ICP Actions, else default to currently selected one
//					LocShortVo orderingLocation = form.getGlobalContext().Core.getSelectedLocationForOrdering();
//					if (orderingLocation != null)
//					{
//						if (LocationType.HOSP.equals(orderingLocation.getType()))
//							defaultInHospital(orderingLocation);
//						else
//							displayHospital(orderingLocation);
//					}
//					else
//						displayHospital((ValueObject) currentLocation);
//					
//					loadOutpatientDepartment();
//					
//				}
				else	// If the patient was not selected from Outpatient List or Clinic List with ICP Action
				{
					// Default to ED
					form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoAandE);
					
					displayHospital((ValueObject) currentLocation);
					defaultInTheEmergencyDepartment(form.lyrDetails().tabGenDetails().cmbHospital().getValue());
					
					// Attempt default to current A&E location
					form.lyrDetails().tabGenDetails().qmbLocation().setValue((ValueObject) currentLocation);
				}
			}
			else
			{
				// Legacy functionality - keep in
				
				form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoClinic);

				// WDEV-14424
				if (!Boolean.TRUE.equals(ConfigFlag.UI.OCS_ORDERING_DEFAULT_HOSPITAL_AND_OP_DEPT_TO_BLANK.getValue()))
				{
					if (form.getForms().Clinical.ClinicListWithICPActions.equals(form.getGlobalContext().Core.getSelectingPatientForm()))
					{
						// Default the hospital from Clinic List with ICP Actions, else default to currently selected one
						LocShortVo orderingLocation = form.getGlobalContext().Core.getSelectedLocationForOrdering();
						if (orderingLocation != null)
						{
							if (LocationType.HOSP.equals(orderingLocation.getType()))
								defaultInHospital(orderingLocation);
							else
								displayHospital(orderingLocation);
						}
						else
						{
							displayHospital(voOutPatAttend.getClinic());
							form.lyrDetails().tabGenDetails().qmbLocation().setValue(voOutPatAttend.getClinic());
						}
						
						loadOutpatientDepartment();
					}
					else
					{
    					form.lyrDetails().tabGenDetails().qmbLocation().newRow(voOutPatAttend.getClinic(), voOutPatAttend.getClinic().getClinicName());
    					displayHospital(voOutPatAttend.getClinic());
    
    					// WDEV-9075
    					if (voOutPatAttend.getClinicIsNotNull())
    						form.lyrDetails().tabGenDetails().qmbLocation().newRow(voOutPatAttend.getClinic(), voOutPatAttend.getClinic().getClinicName());
    
    					form.lyrDetails().tabGenDetails().qmbLocation().setValue(voOutPatAttend.getClinic());
					}
				}
			}
			
			form.lyrDetails().tabGenDetails().qmbClinician().clear();
			if (voOutPatAttend.getPasEventIsNotNull() && voOutPatAttend.getPasEvent().getConsultantIsNotNull() && voOutPatAttend.getPasEvent().getConsultant().getName() != null)
			{
				HcpLiteVo consultantHcp = getHcpLiteFromMedicLite(voOutPatAttend.getPasEvent().getConsultant());

				if (consultantHcp != null && Boolean.TRUE.equals(consultantHcp.getIsHCPaResponsibleHCP()))
				{
					form.lyrDetails().tabGenDetails().qmbClinician().clear();
					form.lyrDetails().tabGenDetails().qmbClinician().newRow(consultantHcp, consultantHcp.toString());
					form.lyrDetails().tabGenDetails().qmbClinician().setValue(consultantHcp);
				}
				else if (hcpUser != null && Boolean.TRUE.equals(hcpUser.getIsHCPaResponsibleHCP()))
				{
					form.lyrDetails().tabGenDetails().qmbClinician().clear();
					form.lyrDetails().tabGenDetails().qmbClinician().newRow(hcpUser, hcpUser.getName().toString());
					form.lyrDetails().tabGenDetails().qmbClinician().setValue(hcpUser);
				}
			}
			else if (hcpUser != null && Boolean.TRUE.equals(hcpUser.getIsHCPaResponsibleHCP()))
			{
				form.lyrDetails().tabGenDetails().qmbClinician().clear();
				form.lyrDetails().tabGenDetails().qmbClinician().newRow(hcpUser, hcpUser.getName().toString());
				form.lyrDetails().tabGenDetails().qmbClinician().setValue(hcpUser);
			}
		}
		else	// Patient is not an Inpatient or Outpatient
		{
			if (ConfigFlag.UI.ORDER_ENTRY_USE_ED_DEFAULT_LOCATION.getValue() && loggedInEmergencyDepartment)
			{
    			displayHospital((ValueObject) currentLocation);

    			// If patient was selected from Outpatient List
    			if (form.getForms().Core.OutpatientList.equals(form.getGlobalContext().Core.getSelectingPatientForm()))
				{
					form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoClinic);
					loadOutpatientDepartment();
				}
//    			else if (form.getForms().Clinical.ClinicListWithICPActions.equals(form.getGlobalContext().Core.getSelectingPatientForm()))
//    			{
//					// Default the hospital from Clinic List with ICP Actions, else default to currently selected one
//					LocShortVo orderingLocation = form.getGlobalContext().Core.getSelectedLocationForOrdering();
//					if (orderingLocation != null)
//					{
//						if (LocationType.HOSP.equals(orderingLocation.getType()))
//							defaultInHospital(orderingLocation);
//						else
//							displayHospital(orderingLocation);
//					}
//    				
//    				loadOutpatientDepartment();
//    			}
				else	// If patient was not selected from Outpatient List or Clinic List with ICP Actions
				{
        			form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoAandE);
        			defaultInTheEmergencyDepartment(form.lyrDetails().tabGenDetails().cmbHospital().getValue());

        			// Attempt default to current A&E location
					form.lyrDetails().tabGenDetails().qmbLocation().setValue((ValueObject) currentLocation);
				}
			}
			else if (form.getForms().Clinical.ClinicListWithICPActions.equals(form.getGlobalContext().Core.getSelectingPatientForm()))
			{
				form.lyrDetails().tabGenDetails().grpPatientLocation().setValue(grpPatientLocationEnumeration.rdoClinic);

				// Default the hospital from Clinic List with ICP Actions, else default to currently selected one
				LocShortVo orderingLocation = form.getGlobalContext().Core.getSelectedLocationForOrdering();
				if (orderingLocation != null)
				{
					if (LocationType.HOSP.equals(orderingLocation.getType()))
						defaultInHospital(orderingLocation);
					else
						displayHospital(orderingLocation);
				}
				else
				{
					displayHospital((ValueObject) currentLocation);
				}
				
				loadOutpatientDepartment();
			}
			else
			{
				displayHospital((ValueObject) currentLocation);
			}
			
			form.lyrDetails().tabGenDetails().qmbClinician().clear();
			if (hcpUser != null && Boolean.TRUE.equals(hcpUser.getIsHCPaResponsibleHCP()) && !loggedInEmergencyDepartment)
			{
				form.lyrDetails().tabGenDetails().qmbClinician().newRow(hcpUser, hcpUser.toString());
				form.lyrDetails().tabGenDetails().qmbClinician().setValue(hcpUser);
			}
		}

		// WDEV-11915
		if (grpPatientLocationEnumeration.rdoClinic.equals(form.lyrDetails().tabGenDetails().grpPatientLocation().getValue())
				&& (!Boolean.TRUE.equals(ConfigFlag.UI.OCS_ORDERING_DEFAULT_HOSPITAL_AND_OP_DEPT_TO_BLANK.getValue()) || voOutPatAttend == null))
		{
			loadOutpatientDepartment();
			setDepartmentValue();
		}
		// WDEV-11915

		// WDEV-12793 - Fix issue introduced by WDEV-12071 - check if hcpuser is Medic and MedicGrade is CONSULTANT(-67)
		// WDEV-13890
		// Default in the HCP user only if the user is a responsible HCP
		if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CCO"))
		{
			form.lyrDetails().tabGenDetails().qmbClinician().setValue(null);

			// WDEV-13890
			// Default in the HCP user only if the user is a responsible HCP
			HcpLiteVo user = (HcpLiteVo) domain.getHcpLiteUser();

			if (user != null && Boolean.TRUE.equals(user.getIsHCPaResponsibleHCP()) && HcpDisType.MEDICAL.equals(user.getHcpType()))
			{
				form.lyrDetails().tabGenDetails().qmbClinician().newRow(user, user.toString());
				form.lyrDetails().tabGenDetails().qmbClinician().setValue(user);
			}
		}

		// WDEV-14231
		if (Boolean.TRUE.equals(ConfigFlag.UI.OCS_ORDER_DEFAULT_RESPONSIBLE_HCP_TO_LOGGED_ON_USER.getValue()))
		{
			form.lyrDetails().tabGenDetails().qmbClinician().clear();
			
			HcpLiteVo user = (HcpLiteVo) domain.getHcpLiteUser();
			
			if (user != null && Boolean.TRUE.equals(user.getIsHCPaResponsibleHCP()))
			{
				form.lyrDetails().tabGenDetails().qmbClinician().newRow(user, user.toString());
				form.lyrDetails().tabGenDetails().qmbClinician().setValue(user);
			}
		}
	}

	private HcpLiteVo getHcpLiteFromMedicLite(MedicLiteVo medic)
	{
		if (medic == null)
			return null;

		HcpLiteVo vo = new HcpLiteVo(medic.getID_Hcp(), medic.getVersion_Hcp());
		
		vo.setMos(medic.getMos());
		vo.setIsHCPaResponsibleHCP(medic.getIsHCPaResponsibleHCP());
		vo.setIsAResponsibleEDClinician(medic.getIsAResponsibleEDClinician());
		vo.setIsActive(medic.getIsActive());
		
		return vo;
	}

	/**
	 * method that goes back up the organisational structure to find a Locsite of type hospital for the LocLiteVo or ClinicLiteVo
	 */
	private void displayHospital(ValueObject voLocOrClinic)
	{
		ILocation iLocation = domain.getParentHospital(voLocOrClinic);
		
		defaultInHospital(iLocation);
	}
	

	private void defaultInHospital(ILocation hospital)
	{
		if (hospital != null)
		{
			if (!form.lyrDetails().tabGenDetails().cmbHospital().getValues().contains(hospital))
				form.lyrDetails().tabGenDetails().cmbHospital().newRow(hospital, hospital.getName());
			
			form.lyrDetails().tabGenDetails().cmbHospital().setValue(hospital);
		}
	}


	// Try to validate the questions differently ( not a good idea - please read every time from the grid..... as Dan did.
	private String[] validateQuestionAnswers()
	{
		MyOrderQuestionsPopulation questionsPopulation = getMyOrderQuestionPopulationHelperFactory();
		return questionsPopulation.validateAnswers();
	}

	/**
	 * WDEV-13999 Function used to validate Clinical Details tab
	 */
	private String[] validateClinicalDetailsUI()
	{
		ArrayList<String> errorList = new ArrayList<String>();

		// Validate controls that are specific to CARE UK project
		if (CARE_UK_UI_ORDER.equals(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue()))
		{
			// Check if the Responsible HCP value was entered
			if (form.lyrDetails().tabClinicalNotes().qmbResponsibleHCP().getValue() == null)
			{
				errorList.add("Responsible HCP is mandatory.");
			}

			// Check if the Ordering HCP value was entered
			if (form.lyrDetails().tabClinicalNotes().qmbOrderingHCP().getValue() == null)
			{
				errorList.add("Ordering HCP is mandatory.");
			}
		}

		// Validate Question & Answers
		String[] errors = validateQuestionAnswers();

		// Add validation errors from Question & Answers to errors list
		if (errors != null)
		{
			for (int i = 0; i < errors.length; i++)
			{
				errorList.add(errors[i]);
			}
		}

		// Return the errors as an array
		return errorList.toArray(new String[errorList.size()]);
	}

	/**
	 * iTab parameter if populated (ie. not = -1) tells this method which tab to validate regardless of which tab is visible
	 */
	private boolean validateTab(int iTab)
	{
		String[] arrErrors = null;

		if ((form.lyrDetails().tabClinicalNotes().isVisible() && iTab == -1) || iTab == TABCLINICAL)
		{
			// WDEV-13999
			arrErrors = validateClinicalDetailsUI();

			// WDEV-2899
			if (arrErrors != null && arrErrors.length > 0)
			{
				engine.showErrors("Answers Required", arrErrors, true);
				return false;
			}
		}
		else if (form.lyrDetails().tabGenDetails().isVisible())
		{
			ArrayList<String> errors = new ArrayList<String>();
			if (form.lyrDetails().tabGenDetails().qmbOrderedBy().getValue() == null)
				errors.add("Ordered By is a mandatory field.");

			if (form.lyrDetails().tabGenDetails().qmbClinician().getValue() == null)
				errors.add("Responsible Clinician is a mandatory field.");
			
			if (ConfigFlag.GEN.SITE_USES_ORDER_BLEEP_EXT_NUMBER.getValue() && form.lyrDetails().tabGenDetails().txtBleepNo().getValue() == null)
			{
				errors.add("Bleep No is mandatory.");
			}
			
			if (isOrderPriorityMandatory(form.getGlobalContext().OCRR.getMyOrderComponents()) && form.lyrDetails().tabGenDetails().cmbPriority().getValue() == null)
			{
				errors.add("Order Priority is mandatory.");
			}

			// WDEV-11915 - starts here
			if (grpPatientLocationEnumeration.rdoClinic.equals(form.lyrDetails().tabGenDetails().grpPatientLocation().getValue()))
			{
				if (ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue().equals("Clinic"))
				{
					if (!ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") && !ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH"))
					{
						if (form.lyrDetails().tabGenDetails().qmbLocation().getValue() == null)
							errors.add("Patient Location is a mandatory field.");
					}
				}
				else if (ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue().equals("Outpatient Department"))
				{
					if (form.lyrDetails().tabGenDetails().cmbDepartment().getValue() == null)
						errors.add("Outpatient Department is a mandatory field");

				}
				else if (ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue().equals("Clinic and Outpatient Department"))
				{
					if (!ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") && !ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
					{
						if (form.lyrDetails().tabGenDetails().qmbLocation().getValue() == null)
							errors.add("Patient Location is a mandatory field");
					}

					if (form.lyrDetails().tabGenDetails().cmbDepartment().getValue() == null)
						errors.add("Outpatient Department is a mandatory field");
				}
				else if (HIDE_CLINIC_STRING.equals(ConfigFlag.GEN.ORDERING_CLINIC_LOCATION_MANDATORY_FIELDS.getValue()))
				{
					if (form.lyrDetails().tabGenDetails().cmbDepartment().getValue() == null)
					{
						errors.add("Outpatient Department is a mandatory field");
					}
				}
			}
			else
			{
				if (form.lyrDetails().tabGenDetails().qmbLocation().getValue() == null)
				{
					errors.add("Patient Location is a mandatory field");
				}
			}
			// WDEV-11915 - ends here

			// WDEV-11035 - Order Category mandatory
			if (ConfigFlag.UI.ORDERING_ORDERCATEGORY_MANDATORY.getValue())
			{
				if (form.lyrDetails().tabGenDetails().cmbOrderCategory().getValue() == null)
					errors.add("Order Category is a mandatory field");
			}

			for (int i = 0; i < form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().size(); i++)
			{
				DynamicGridRow row = form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().get(i);
				if (row.getCellArray()[0].getValue() == null)
				{
					errors.add("Report To is a mandatory field");
					break;
				}
			}

			if (errors.size() > 0)
			{
				arrErrors = new String[errors.size()];
				errors.toArray(arrErrors);
			}
		}
		else if ((form.lyrDetails().tabRadDetails().isVisible() && iTab == -1) || iTab == TABRAD)
		{
			// WDEV-8947 - Patient Mobility mandatory //WDEV-17186 validation for PatientMobility only if the order contains Clinical Imaging investigations.
			if (ConfigFlag.UI.ORDERING_PATIENTMOBILITY_MANDATORY.getValue() && doesOrderContainInvType(Category.CLINICALIMAGING) && form.lyrDetails().tabRadDetails().cmbPatMobility().getVisible())
			{
				if (form.lyrDetails().tabRadDetails().cmbPatMobility().getValue() == null)
				{
					engine.showErrors("Radiology Details", new String[] { "'Patient Mobility' is mandatory." });
					return false;
				}
			}

			for (int i = 0; i < form.lyrDetails().tabRadDetails().grdRadOrders().getRows().size(); i++)
			{
				grdRadOrdersRow row = form.lyrDetails().tabRadDetails().grdRadOrders().getRows().get(i);
				if (row.getColLocation().getValue() == null)
				{
					engine.showErrors("Radiology Details", new String[] { "Each Exam must have a value for 'Requested Location'" });
					if (iTab == TABRAD)
						form.lyrDetails().showtabRadDetails();
					return false;
				}

				// this will modify the item by reference in the global context
				// collection
				// (form.getGlobalContext().OCRR.getOrderInvestigationCollection())
				// thus setting the correct value for requested location
				row.getValue().setRequestedLocation((LocationRefVo) row.getColLocation().getValue());
			}
		}
		else if ((form.lyrDetails().tabPathDetails().isVisible() && iTab == -1) || iTab == TABREQUESTED)
		{
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().isVisible())
			{
				if (!validateSiteSelection())
				{
					engine.showErrors(new String[] { "Please ensure you have first selected a 'Source of Specimen'" });
					if (iTab == TABREQUESTED)
					{
						form.lyrDetails().showtabPathDetails();
						form.lyrDetails().tabPathDetails().lyrPathology().showtabRequestedTests();
						form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderVisible(false);
						form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderVisible(false);
						form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderVisible(false);
						form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderVisible(false);
						form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().setHeaderVisible(false);
					}
					return false;
				}
				if (!validateRequestedTests())
				{
					engine.showErrors(new String[] { "Please ensure each Investigation has been assigned a Collection Type" });
					if (iTab == TABREQUESTED)
					{
						form.lyrDetails().showtabPathDetails();
						form.lyrDetails().tabPathDetails().lyrPathology().showtabRequestedTests();
						form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderVisible(false);
						form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderVisible(false);
						form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderVisible(false);
						form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderVisible(false);
						form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().setHeaderVisible(false);
					}
					return false;
				}
			}
		}

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		return true;
	}

	private boolean doesOrderContainInvType(Category category)
	{
		if (category == null)
			return false;

		OrderInvestigationVoCollection voCollOrderInvest = form.getGlobalContext().OCRR.getOrderInvestigationCollection();

		if (voCollOrderInvest == null)
			return false;

		boolean isClinicalImagingFound = false;
		for (int i = 0; i < voCollOrderInvest.size(); i++)
		{
			if (voCollOrderInvest.get(i).getOrdInvCurrentStatus() == null
					|| (!OrderInvStatus.CANCEL_REQUEST.equals(voCollOrderInvest.get(i).getOrdInvCurrentStatus().getOrdInvStatus()) && !OrderInvStatus.CANCELLED.equals(voCollOrderInvest.get(i).getOrdInvCurrentStatus().getOrdInvStatus())))
			{
				if (voCollOrderInvest.get(i).getInvestigationIsNotNull() && voCollOrderInvest.get(i).getInvestigation().getInvestigationIndexIsNotNull() && voCollOrderInvest.get(i).getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voCollOrderInvest.get(i).getInvestigation().getInvestigationIndex().getCategory().equals(category))
				{
					isClinicalImagingFound = true;
					break;
				}
			}
		}

		return isClinicalImagingFound;
	}

	private void setSitesToDisplay(grdTestRow row)
	{
		SelectItemVoCollection items = null;

		if (row != null)
		{
			if (row.getValue() != null)
			{
				SpecimenSiteCollection voCollInstances = row.getValue().getInvestigation().getInvestigationIndex().getSites();
				if (voCollInstances != null)
				{
					items = form.getGlobalContext().Core.getItems();
					if (items == null)
						items = new SelectItemVoCollection();

					SelectItemVo voSelectItem = new SelectItemVo();
					voSelectItem.setItem(row.getValue().getInvestigation().getInvestigationIndex());
					voSelectItem.setSelected(Boolean.FALSE);
					voSelectItem.setItemImage(form.getImages().OCRR.Investigation);

					for (int i = 0; i < voCollInstances.size(); i++)
					{
						SelectItemVo voChildItem = new SelectItemVo();
						voChildItem.setItem(new GenericInfoAdapter(voCollInstances.getIndex(i)));
						voChildItem.setSelected(Boolean.FALSE);
						voChildItem.setItemImage(form.getImages().OCRR.SpecimenDetails16);

						if (voSelectItem.getItems() == null)
							voSelectItem.setItems(new SelectItemVoCollection());

						voSelectItem.getItems().add(voChildItem);
					}

					items.add(voSelectItem);
				}

				// go through collection setting selected flag for existing ones
				if (items != null)
				{
					if (row.getRows().size() > 0)
					{
						for (int p = 0; p < row.getRows().size(); p++)
						{
							if (row.getRows().get(p).getColSiteHidden() != null)
							{
								GenericInfoAdapter ilkpInst = row.getRows().get(p).getColSiteHidden();
								
								for (int i = 0; i < items.size(); i++)
								{
									if (items.get(i).getItems() != null && items.get(i).getItem().equals(row.getRows().get(p).getValue().getInvestigation().getInvestigationIndex())) //WDEV-14495 only for the current row
									{
										for (int j = 0; j < items.get(i).getItems().size(); j++)
										{
											if (ilkpInst.getIGenericItemInfoID().equals(items.get(i).getItems().get(j).getItem().getIGenericItemInfoID()))
											{
												items.get(i).getItems().get(j).setSelected(Boolean.TRUE);
											}
										}
									}
								}
							}
						}
					}
				}
				form.getGlobalContext().Core.setItems(items);
			}
		}
		else
		{
			// button was clicked above the grid with no selection
			// go through the grid a nd build up a collection of selectitems and
			// their children
			for (int i = 0; i < form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().size(); i++)
			{
				row = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getRows().get(i);
				if (row.getValue() != null && requiresSiteSpecifier(row.getValue()))
					setSitesToDisplay(row);
			}
		}
	}

	private DynamicGridRow addHospitalComboRowTodyngrdReportTo(LocationType type)
	{
		if (maxNoOfReportToRowsEqualsFlagValue())
			return null;

		LocShortMappingsVoCollection voCollHospitals = listActiveHospitals();
		if (voCollHospitals == null || voCollHospitals.size() == 0)
		{
			engine.showMessage("No Hospitals Configured");
			return null;
		}

		DynamicGridRow row = form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().newRow();

		if (type.equals(LocationType.OUTPATIENT_DEPT))
			row.setIdentifier(ReportToType.OUTPAT);
		else
			row.setIdentifier(ReportToType.WARD);

		DynamicGridCell cellReportTo = row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(REPORTTO_COLUMN), DynamicCellType.ENUMERATION);
		cellReportTo.setAutoPostBack(true);
		cellReportTo.setReadOnly(false);
		cellReportTo.setTooltip("Please select a Hospital");
		cellReportTo.setIdentifier(LocationType.HOSP);
		loadHospitals(voCollHospitals, cellReportTo);

		DynamicGridCell cellWardOrClinic = row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(WARDOUTPAT_COLUMN), DynamicCellType.QUERYCOMBOBOX);
		cellWardOrClinic.setAutoPostBack(true);
		cellWardOrClinic.setIdentifier(type);
		cellWardOrClinic.setReadOnly(true);
		cellWardOrClinic.setTooltip("Please select a " + type.toString());

		row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(ADDRESS_COLUMN), DynamicCellType.LABEL);
		return row;
	}

	private LocShortMappingsVoCollection listActiveHospitals()
	{
		LocShortMappingsVoCollection voCollHospitals = form.getLocalContext().getActiveHospitals();
		if (voCollHospitals == null)
		{
			voCollHospitals = domain.listActiveHospitals();
			form.getLocalContext().setActiveHospitals(voCollHospitals);
		}

		return voCollHospitals;
	}

	private void loadHospitals(LocShortMappingsVoCollection voCollHospitals, DynamicGridCell cellReportTo)
	{
		if (voCollHospitals != null)
		{
			for (int i = 0; i < voCollHospitals.size(); i++)
				cellReportTo.getItems().newItem(voCollHospitals.get(i), voCollHospitals.get(i).toString());
		}
	}

	private DynamicGridRow addOtherRowTodyngrdReportTo()
	{
		if (maxNoOfReportToRowsEqualsFlagValue())
			return null;

		DynamicGridRow row = form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().newRow();
		DynamicGridCell cellReportTo = row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(REPORTTO_COLUMN), DynamicCellType.STRING);
		cellReportTo.setTooltip("Please enter a Name");
		cellReportTo.setStringMaxLength(149); //WDEV-14450
		cellReportTo.setReadOnly(false);
		DynamicGridCell cellAddress = row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(ADDRESS_COLUMN), DynamicCellType.STRING);
		cellAddress.setTooltip("Please enter an Address");
		cellAddress.setStringMaxLength(150); //WDEV-14450
		cellAddress.setReadOnly(false);

		row.setIdentifier(ReportToType.FREE);
		return row;
	}

	@SuppressWarnings("rawtypes")
	private DynamicGridRow addQueryComboRowTodyngrdReportTo(Class classType)
	{
		if (maxNoOfReportToRowsEqualsFlagValue())
			return null;

		DynamicGridRow row = form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().newRow();
		DynamicGridCell cellReportTo = row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(REPORTTO_COLUMN), DynamicCellType.QUERYCOMBOBOX);
		cellReportTo.setAutoPostBack(true);
		cellReportTo.setReadOnly(false);
		cellReportTo.setIdentifier(classType);
		if (classType.equals(MemberOfStaffRefVo.class))
		{
			cellReportTo.setTooltip("Please search for a Member Of Staff");
			row.setIdentifier(ReportToType.MOS);
		}
		else
		{
			cellReportTo.setTooltip("Please search for a GP");
			row.setIdentifier(ReportToType.GP);
		}
		row.getCells().newCell(form.lyrDetails().tabGenDetails().dyngrdReportTo().getColumns().getByIdentifier(ADDRESS_COLUMN), DynamicCellType.LABEL);
		return row;
	}

	private boolean maxNoOfReportToRowsEqualsFlagValue()
	{
		int maxNoRows = ConfigFlag.UI.OCRR_NO_OF_REPORT_TO_ROWS.getValue();

		if (form.lyrDetails().tabGenDetails().dyngrdReportTo().getRows().size() >= maxNoRows)
			engine.showMessage("Max Number of Paper Report To rows already reached");
		else
			return false;

		return true;
	}

	private void setAddOnToDisplay()
	{
		grdTestRow row = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getSelectedRow();

		LocationServiceVo discipline = null;
		if (row != null && row.getValue() != null && row.getValue().getInvestigationIsNotNull() && row.getValue().getInvestigation().getProviderServiceIsNotNull() && row.getValue().getInvestigation().getProviderService().getLocationServiceIsNotNull())
			discipline = row.getValue().getInvestigation().getProviderService().getLocationService();

		// go through the grid building up a alist of add ons that are at
		// the parent level
		SelectItemVoCollection items = null;
		InvestigationUnderSpecimenVoCollection voCollAddOnInvestigation = new InvestigationUnderSpecimenVoCollection();
		OrderInvestigationVoCollection voCollOrderInv = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getValues();
		for (int i = 0; i < voCollOrderInv.size(); i++)
		{
			if (voCollOrderInv.get(i) != null)
			{
				if (voCollOrderInv.get(i).getInvestigation().getIsAddonIsNotNull() && voCollOrderInv.get(i).getInvestigation().getIsAddon().booleanValue())
				{
					if (compareDiscipline(discipline, voCollOrderInv.get(i))) // WDEV-3077
						voCollAddOnInvestigation.add(voCollOrderInv.get(i).getInvestigation());
				}
			}
		}

		if (voCollAddOnInvestigation.size() > 0)
		{
			IGenericItemType[] arrItems = voCollAddOnInvestigation.toIGenericItemTypeArray();
			items = new SelectItemVoCollection();
			for (int i = 0; i < arrItems.length; i++)
			{
				SelectItemVo item = new SelectItemVo();
				item.setItem(arrItems[i]);
				item.setSelected(Boolean.FALSE);

				if (items == null)
					items = new SelectItemVoCollection();

				items.add(item);
			}
		}

		// go through collection setting selected flag for existing ones
		if (items != null)
		{
			IGenericItemType[] arrSelectedItems = null;
			if (row.getColAddOnsHidden() != null && row.getColAddOnsHidden().size() > 0)
				arrSelectedItems = row.getColAddOnsHidden().toIGenericItemTypeArray();

			if (arrSelectedItems != null)
			{
				for (int i = 0; i < arrSelectedItems.length; i++)
				{
					IGenericItemInfo iItem = arrSelectedItems[i];
					for (int p = 0; p < items.size(); p++)
					{
						if (iItem == items.get(p).getItem())
						{
							items.get(p).setSelected(Boolean.TRUE);
						}
					}
				}
			}
		}
		form.getGlobalContext().Core.setItems(items);
	}

	private boolean compareDiscipline(LocationServiceVo discipline, OrderInvestigationVo voOrderInv)
	{
		if (discipline == null)
			throw new CodingRuntimeException("discipline parameter not supplied for method compareDiscipline");

		if (voOrderInv == null)
			throw new CodingRuntimeException("voOrderInv parameter not supplied for method compareDiscipline");

		if (voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getProviderServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationServiceIsNotNull())
			return discipline.equals(voOrderInv.getInvestigation().getProviderService().getLocationService());

		return false;
	}

	private void removeFromSelection(TreeNode selectedNode) throws PresentationLogicException
	{
		if (selectedNode != null)
		{
			// Remove the component from context
			MyOrderComponentVoCollection voCollSelectedComponents = form.getGlobalContext().OCRR.getMyOrderComponents();
			
			form.getLocalContext().setOrderComponentsRestorePoint((MyOrderComponentVoCollection) voCollSelectedComponents.clone());
			if (selectedNode.getValue() instanceof MyOrderComponentVo) // wdev-13855
			{
				MyOrderComponentVo voMyOrderComponent = (MyOrderComponentVo) selectedNode.getValue();
				voCollSelectedComponents.remove(voMyOrderComponent);
				form.getGlobalContext().OCRR.setMyOrderComponents(voCollSelectedComponents);
				// End Remove component from context
				
				CategoryCollection usedCategories = getUsedCategories(voCollSelectedComponents);
				ArrayList<Integer> usedServices = getUsedServices(voCollSelectedComponents);
//				getUsedInvestigations(voCollSelectedComponents);
				
				
				OcsQASessionVo voOcsQASession = form.getGlobalContext().OCRR.getMyOrderQuestions();
				MyOrderQuestionsPopulation helper = getMyOrderQuestionPopulationHelperFactory();

				// Get the answers again as they mave have changed between two
				// removals
				voOcsQASession = helper.getAnswers(voOcsQASession);

				// Remove the investigation from the Order Status Question Vo
				voOcsQASession = helper.removeInvestigationFromVo(voMyOrderComponent.getID(), voOcsQASession);
				voOcsQASession = helper.removeUnusedCategoryQuestions(voOcsQASession, usedCategories);
				voOcsQASession = helper.removeUnusedServiceQuestions(voOcsQASession, usedServices);

				form.getGlobalContext().OCRR.setMyOrderQuestions(voOcsQASession);
			}
			else if (selectedNode.getValue() instanceof MyOrderChildComponentVo) // wdev-13855
			{
				MyOrderChildComponentVo voMyOrderChildComponent = (MyOrderChildComponentVo) selectedNode.getValue();
				boolean InvestigationStillExist = false;
				TreeNode nodeP = selectedNode;
				while (nodeP.getParent() != null)
					nodeP = nodeP.getParent();
				MyOrderComponentVo voMyOrderComponent = (MyOrderComponentVo) nodeP.getValue();
				int index = voCollSelectedComponents.indexOf(voMyOrderComponent);
				MyOrderComponentVo tempComponent = voCollSelectedComponents.get(index);
				tempComponent.getComponents().remove(voMyOrderChildComponent);
				if (tempComponent.getComponents() == null || tempComponent.getComponents().size() == 0) // remove the parent (profile) if it has no more children
					voCollSelectedComponents.remove(voMyOrderComponent);

				form.getGlobalContext().OCRR.setMyOrderComponents(voCollSelectedComponents);
				for (int i = 0; i < voCollSelectedComponents.size(); i++)
				{
					if (voCollSelectedComponents.get(i).getComponentTypeIsNotNull() && voCollSelectedComponents.get(i).getComponentType().equals(SelectAndOrderComponentType.INVESTIGATION) && voCollSelectedComponents.get(i).getIDIsNotNull() && voCollSelectedComponents.get(i).getID().equals(voMyOrderChildComponent.getID()))
					{
						InvestigationStillExist = true;
						break;
					}
					for (int j = 0; voCollSelectedComponents.get(i).getComponentsIsNotNull() && j < voCollSelectedComponents.get(i).getComponents().size(); j++)
					{
						if (voCollSelectedComponents.get(i).getComponents().get(j).getIDIsNotNull() && voCollSelectedComponents.get(i).getComponents().get(j).getID().equals(voMyOrderChildComponent.getID()))
						{
							InvestigationStillExist = true;
							break;
						}
					}
					if (InvestigationStillExist == true)
						break;
				}

				if (InvestigationStillExist == false)
				{
					OcsQASessionVo voOcsQASession = form.getGlobalContext().OCRR.getMyOrderQuestions();
					MyOrderQuestionsPopulation helper = getMyOrderQuestionPopulationHelperFactory();

					// Get the answers again as they mave have changed between two
					// removals
					voOcsQASession = helper.getAnswers(voOcsQASession);

					// Remove the investigation from the Order Status Question Vo
					voOcsQASession = helper.removeInvestigationFromVo(voMyOrderChildComponent.getID(), voOcsQASession);

					form.getGlobalContext().OCRR.setMyOrderQuestions(voOcsQASession);

				}
				loadComponentsAndQuestionsWithoutSelectionChanged();
				return;

			}
		}

		loadComponentsAndQuestions();
	}

	private ArrayList<Integer> getUsedServices(MyOrderComponentVoCollection voCollSelectedComponents)
	{
		if (voCollSelectedComponents == null)
			return null;
		
		ArrayList<Integer> serviceIDs = new ArrayList<Integer>();
		
		for (MyOrderComponentVo component : voCollSelectedComponents)
		{
			if (component.getServiceID() != null)
			{
				serviceIDs.add(component.getServiceID());
			}
			
			if (component.getComponents() != null)
			{
				getUsedServices(component.getComponents(), serviceIDs);
			}
			
		}

		return serviceIDs;
	}

	private ArrayList<Integer> getUsedServices(MyOrderChildComponentVoCollection components, ArrayList<Integer> serviceIDs)
	{
		if (components == null)
			return serviceIDs;
		
		if (serviceIDs == null) serviceIDs = new ArrayList<Integer>();
		
		for (MyOrderChildComponentVo component : components)
		{
			if (component.getServiceID() != null)
			{
				serviceIDs.add(component.getServiceID());
			}
		}
		
		return serviceIDs;
	}

	private CategoryCollection getUsedCategories(MyOrderComponentVoCollection voCollSelectedComponents)
	{
		if (voCollSelectedComponents == null)
			return null;
		
		CategoryCollection category = new CategoryCollection();
		
		for (MyOrderComponentVo component : voCollSelectedComponents)
		{
			if (component.getCategory() != null)
			{
				category.add(component.getCategory());
			}
			
			if (component.getComponents() != null)
			{
				getUsedCategories(component.getComponents(), category);
			}
		}

		return category;
	}


	private CategoryCollection getUsedCategories(MyOrderChildComponentVoCollection components, CategoryCollection category)
	{
		if (components == null)
			return category;
		
		if (category == null) category = new CategoryCollection();
		
		for (MyOrderChildComponentVo component : components)
		{
			if (component.getCategory() != null)
			{
				category.add(component.getCategory());
			}
		}

		return category;
	}

	private void populateCellFromLookup(DynamicGridCell cellDuration)
	{
		OutPatientDurationCollection collDuration = form.getLocalContext().getOutpatientDurationLookupCollection();
		if (collDuration == null)
			collDuration = LookupHelper.getOutPatientDuration(domain.getLookupService());

		for (int i = 0; i < collDuration.size(); i++)
			cellDuration.getItems().newItem(collDuration.get(i), collDuration.get(i).toString());

	}

	private boolean isRowEditable(GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow row)
	{
		return !row.isReadOnly();
	}

	private void applyDefaultsToPhlebGrid(SpecimenCollectionSettings settings)
	{
		if (settings == null)
			throw new CodingRuntimeException("settings parameter in applyToPhlebGrid method is null");

		// go through phleb grid setting defaults according to settings
		DynamicGrid dynGridPhleb = settings.getSpecimenCollectionMethod().equals(SpecimenCollectionMethod.INPATIENT) ? form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat() : form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat();

		for (int i = 0; i < dynGridPhleb.getRows().size(); i++)
		{
			if (settings.getSpecimenCollectionMethod().equals(SpecimenCollectionMethod.INPATIENT))
			{
				DynamicGridColumn colDate = dynGridPhleb.getColumns().getByIdentifier(DYN_COLDATE);
				DynamicGridColumn colTime = dynGridPhleb.getColumns().getByIdentifier(DYN_COLTIME);

				for (int p = 0; p < dynGridPhleb.getRows().get(i).getRows().size(); p++)
				{
					refreshGridDataForCollectionInfoInpatient(dynGridPhleb.getRows().get(i).getRows().get(p), colDate, colTime, settings);
					dynGridPhleb.getRows().get(i).getRows().get(p).getCells().get(dynGridPhleb.getColumns().getByIdentifier(QTY_COLUMN)).setWidth(80);
				}
			}
			else if (settings.getSpecimenCollectionMethod().equals(SpecimenCollectionMethod.OUTPATIENT))
			{
				DynamicGridColumn colAt = dynGridPhleb.getColumns().getByIdentifier(DYN_COLAT);
				DynamicGridColumn colDuration = dynGridPhleb.getColumns().getByIdentifier(DYN_COLDURATION);

				for (int p = 0; p < dynGridPhleb.getRows().get(i).getRows().size(); p++)
				{
					refreshGridDataForCollectionInfoOutpatient(dynGridPhleb.getRows().get(i).getRows().get(p), colAt, colDuration, settings);
					dynGridPhleb.getRows().get(i).getRows().get(p).getCells().get(dynGridPhleb.getColumns().getByIdentifier(QTY_COLUMN)).setWidth(80);
				}
			}
		}
	}

	private void refreshGridDataForCollectionInfoOutpatient(DynamicGridRow cRow, DynamicGridColumn colAt, DynamicGridColumn colDuration, SpecimenCollectionSettings settings)
	{
		DynamicGridCell cellAt = cRow.getCells().get(colAt);
		DynamicGridCell cellDuration = cRow.getCells().get(colDuration);

		if (settings != null)
		{
			if (cellAt != null)
				cellAt.setValue(settings.getUnits());
			
			if (cellDuration != null)
				cellDuration.setValue(settings.getDuration());
		}
	}

	private void refreshGridDataForCollectionInfoInpatient(DynamicGridRow cRow, DynamicGridColumn colDate, DynamicGridColumn colTime, SpecimenCollectionSettings settings)
	{
		DynamicGridCell cellDate = cRow.getCells().get(colDate);
		DynamicGridCell cellTime = cRow.getCells().get(colTime);
		
		if (cellTime != null)
			cellTime.getItems().clear();

		if (settings != null)
		{
			if (settings.getCollTimes() != null && cellTime != null)
			{
				for (int j = 0; j < settings.getCollTimes().size(); j++)
				{
					cellTime.getItems().newItem(settings.getCollTimes().get(j), settings.getCollTimes().get(j).toString());
				}
			}
			
			if (cellDate != null)
				cellDate.setValue(settings.getDate());
			
			if (cellTime != null)
				cellTime.setValue(settings.getSelectedTime());
		}
	}

	private SpecimenCollectionSettings getSettings(SpecimenCollectionMethod type)
	{
		SpecimenCollectionSettings settings = new SpecimenCollectionSettings();
		settings.setSpecimenCollectionMethod(type);

		if (type.equals(SpecimenCollectionMethod.INPATIENT))
		{
			settings.setDate(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dteCollect().getValue());

			// date control has been cleared using the keyboard
			if (settings.getDate() == null)
				form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().cmbTime().clear();

			settings.setSelectedTime(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().cmbTime().getValue());

			if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().cmbTime().getValues().size() > 0)
			{
				settings.setCollTimes(new SpecimenCollectionTimeCollection());
				for (int i = 0; i < form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().cmbTime().getValues().size(); i++)
				{
					settings.getCollTimes().add((SpecimenCollectionTime) form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().cmbTime().getValues().get(i));
				}
			}
		}
		else if (type.equals(SpecimenCollectionMethod.OUTPATIENT))
		{
			settings.setUnits(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().intDuration().getValue());
			settings.setDuration(form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().cmbDuration().getValue());
		}

		return settings;
	}

	
	private void applyDefaultsToOtherGrid(SpecimenCollectionMethod type, Date date, Time time)
	{
		DynamicGrid dynGridOther = form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther();

		for (int i = 0; i < dynGridOther.getRows().size(); i++)
		{
			DynamicGridCell cell = dynGridOther.getRows().get(i).getCells().get(dynGridOther.getColumns().getByIdentifier(PATTYPE_COLUMN));
			cell.setValue(type);

			DynamicGridColumn colDate = dynGridOther.getColumns().getByIdentifier(DYN_COLDATE);
			colDate.setDynamicWidthSupported(true);
			colDate.setWidth(0);

			DynamicGridColumn colTime = dynGridOther.getColumns().getByIdentifier(DYN_COLTIME);
			colTime.setDynamicWidthSupported(true);
			colTime.setWidth(0);

			if (dynGridOther.getRows().get(i).getRows().size() > 0)
			{
				for (int childRowsIndex = 0; childRowsIndex < dynGridOther.getRows().get(i).getRows().size(); childRowsIndex++)
				{
    				DynamicGridRow cRow = dynGridOther.getRows().get(i).getRows().get(childRowsIndex);
    				
    				DynamicGridCell cellDate = cRow.getCells().get(colDate);
    				if (cellDate != null)
    					cellDate.setValue(date);
    
    				DynamicGridCell cellTime = cRow.getCells().get(colTime);
    				if (cellTime != null)
    					cellTime.setValue(time);
				}
			}

			for (int p = 0; p < dynGridOther.getRows().get(i).getRows().size(); p++)
				dynGridOther.getRows().get(i).getRows().get(p).getCells().get(dynGridOther.getColumns().getByIdentifier(QTY_COLUMN)).setWidth(90);
		}
	}

	private boolean requiresSiteSpecifier(OrderInvestigationVo voOrderInv)
	{
		return voOrderInv != null && voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getRequiresSiteSpecifierIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getRequiresSiteSpecifier().booleanValue();
	}

	private boolean isNotAddOn(OrderInvestigationVo voOrderInv)
	{
		return voOrderInv != null && voOrderInv.getInvestigationIsNotNull() && !voOrderInv.getInvestigation().getIsAddon().booleanValue() && isAnyAddOnsSelected();
	}

	private boolean isAnyAddOnsSelected()
	{
		OrderInvestigationVoCollection voCollOrderInv = form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().grdTest().getValues();
		for (int i = 0; i < voCollOrderInv.size(); i++)
		{
			if (voCollOrderInv.get(i) != null)
			{
				if (voCollOrderInv.get(i).getInvestigation().getIsAddonIsNotNull() && voCollOrderInv.get(i).getInvestigation().getIsAddon().booleanValue())
					return true;
			}
		}

		return false;
	}

	private void prePopulateRadOrderGrid()
	{
		form.lyrDetails().tabRadDetails().grdRadOrders().getRows().clear();
		OrderInvestigationVoCollection voCollOrderInv = form.getGlobalContext().OCRR.getOrderInvestigationCollection();

		// add a row for each clinical imaging OrderInvestigation
		if (voCollOrderInv != null)
		{
			for (int i = 0; i < voCollOrderInv.size(); i++)
			{
				if (voCollOrderInv.get(i).getOrdInvCurrentStatus() == null
						|| (!OrderInvStatus.CANCEL_REQUEST.equals(voCollOrderInv.get(i).getOrdInvCurrentStatus().getOrdInvStatus()) && !OrderInvStatus.CANCELLED.equals(voCollOrderInv.get(i).getOrdInvCurrentStatus().getOrdInvStatus())))
				{
					if (voCollOrderInv.get(i).getInvestigationIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndexIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voCollOrderInv.get(i).getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICALIMAGING))
					{
						grdRadOrdersRow row = form.lyrDetails().tabRadDetails().grdRadOrders().getRows().newRow();
						row.setColExamName(voCollOrderInv.get(i).getInvestigation().getInvestigationIndex().getName());

						// WDEV-11938
						row.setTooltipForColExamName(voCollOrderInv.get(i).getInvestigation().buildHelpTextTooltip());

						// WDEV-2820
						if (voCollOrderInv.get(i).getInvestigation().getProviderServiceIsNotNull() && voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationServiceIsNotNull() && voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationService().getLocationIsNotNull())
						{
							if (voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationService().getLocation().getIsVirtualIsNotNull() && voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationService().getLocation().getIsVirtual().equals(Boolean.FALSE) && voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationService().getLocation().getIsActiveIsNotNull() && voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationService().getLocation().getIsActive().equals(Boolean.TRUE))
							{
								row.getColLocation().newRow(voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationService().getLocation(), voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationService().getLocation().getName());
								row.getColLocation().setValue(voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationService().getLocation());
								row.setColLocationReadOnly(true);
							}
							else
							{
								// listLocations and add them
								if (voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationService().getServiceIsNotNull())
								{
									LocationLiteVoCollection voCollLocations = domain.listActiveLocationForService(voCollOrderInv.get(i).getInvestigation().getProviderService().getLocationService().getService());
									if (voCollLocations != null)
									{
										for (int p = 0; p < voCollLocations.size(); p++)
										{
											row.getColLocation().newRow(voCollLocations.get(p), voCollLocations.get(p).getName());
										}
										if (voCollLocations.size() == 1)
											row.getColLocation().setValue(voCollLocations.get(0));
									}
								}
							}
						}

						row.setValue(voCollOrderInv.get(i));
					}
				}
			}
		}
	}

	private void displaySiteSelection(grdTestRow row)
	{
		form.getGlobalContext().Core.setItems(null);
		form.getLocalContext().setTestRowBeingModified(row);
		setSitesToDisplay(row);
		engine.open(form.getForms().Core.SelectItems, "Source of Specimen");
	}

	protected void onGrdTestMutableComboBoxSelected(int column, grdTestRow row, Object value) throws PresentationLogicException
	{
		grdTestTypeComboChanged(value);
	}

	private void grdTestTypeComboChanged(Object value)
	{
		// WDEV-5344
		if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
		{
			if (value == null)
				disableOrdering();
			else if (validateRequestedTests())
				enableOrdering();
		}
	}

	@Override
	protected void onBtnApplySpecAlreadyCollectedClick() throws PresentationLogicException
	{
		Date date = form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dteSpecAlreadyCollected().getValue();
		Time time = form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().timSpecAlreadyCollected().getValue();

		applyDefaultsToSpecimenAlreadyCollectedGrid(date, time);
	}

	private void applyDefaultsToSpecimenAlreadyCollectedGrid(Date date, Time time)
	{
		DynamicGrid dynGridSpecimenAlreadyColl = form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().dyngrdSpecAlreadyCollected();

		for (int i = 0; i < dynGridSpecimenAlreadyColl.getRows().size(); i++)
		{
			DynamicGridColumn colDate = dynGridSpecimenAlreadyColl.getColumns().getByIdentifier(DYN_COLDATE);
			colDate.setDynamicWidthSupported(true);
			colDate.setWidth(0);

			DynamicGridColumn colTime = dynGridSpecimenAlreadyColl.getColumns().getByIdentifier(DYN_COLTIME);
			colTime.setDynamicWidthSupported(true);
			colTime.setWidth(0);

			for (int childRowIndex = 0; childRowIndex < dynGridSpecimenAlreadyColl.getRows().get(i).getRows().size(); childRowIndex++)
			{
				DynamicGridRow cRow = dynGridSpecimenAlreadyColl.getRows().get(i).getRows().get(childRowIndex);
				DynamicGridCell cellDate = cRow.getCells().get(colDate);
				if (cellDate != null)
					cellDate.setValue(date);

				DynamicGridCell cellTime = cRow.getCells().get(colTime);
				if (cellTime != null)
					cellTime.setValue(time);
			}

			for (int p = 0; p < dynGridSpecimenAlreadyColl.getRows().get(i).getRows().size(); p++)
				dynGridSpecimenAlreadyColl.getRows().get(i).getRows().get(p).getCells().get(dynGridSpecimenAlreadyColl.getColumns().getByIdentifier(QTY_COLUMN)).setWidth(90);
		}
	}

	@Override
	protected void onBtnOrderClick() throws PresentationLogicException
	{
		// WDEV-13074 - start here
		if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
		{
			if (!btnContinueClinicalClick(TABCLINICAL))
				return;

			if (!btnContinueRadClick(TABRAD))
				return;

			if (!btnGenerateSpecimensClick(TABREQUESTED))
				return;

			form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setVisible(false);
			form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderVisible(false);
			form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setVisible(false);
			form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderVisible(false);
			form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().setHeaderEnabled(true);
			form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().setVisible(true);

			Object hcp = domain.getHcpLiteUser();
			if (hcp instanceof HcpLiteVo)
			{
				// WDEV-9913
				if (form.lyrDetails().tabGenDetails().qmbClinician().getValue() == null)
				{
					form.lyrDetails().tabGenDetails().qmbClinician().newRow((HcpLiteVo) hcp, ((HcpLiteVo) hcp).getIHcpName());
					form.lyrDetails().tabGenDetails().qmbClinician().setValue((HcpLiteVo) hcp);
				}
			}
			Object mos = domain.getMosUser();
			if (mos instanceof MemberOfStaffLiteVo)
			{
				form.lyrDetails().tabGenDetails().qmbOrderedBy().newRow((MemberOfStaffLiteVo) mos, ((MemberOfStaffLiteVo) mos).getName().toString());
				form.lyrDetails().tabGenDetails().qmbOrderedBy().setValue((MemberOfStaffLiteVo) mos);
			}
		}
		// WDEV-13074 - end here

		placeOrder();
	}

	// ///////////////////////////////////////////////////////////////////////////////////
	// Navigating Tabs Section
	// ///////////////////////////////////////////////////////////////////////////////////

	private void showPreviousTabAndHideCurrent()
	{
		if (form.lyrDetails().tabSummaryClinicalInfo().isVisible())
		{
			form.lyrDetails().tabSummaryClinicalInfo().setHeaderVisible(false);
			
			form.lyrDetails().tabClinicalNotes().setHeaderVisible(true);
			form.lyrDetails().showtabClinicalNotes();
		}
		if (form.lyrDetails().tabRadDetails().isVisible())
		{
			form.lyrDetails().tabRadDetails().setHeaderVisible(false);

			// WDEV-5344
			if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
			{
				if (Boolean.TRUE.equals(ConfigFlag.UI.ORDERING_DISPLAY_SUMMARY_CLINICAL_INFO.getValue()))
				{
					form.lyrDetails().showtabSummaryClinicalInfo();
				}
				else
				{
					form.lyrDetails().showtabClinicalNotes();
				}
			}
			else
			{
				form.lyrDetails().tabGenDetails().setHeaderEnabled(true);
				form.lyrDetails().showtabGenDetails();
			}
		}
		else if (form.lyrDetails().tabPathDetails().isVisible())
		{
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().isVisible())
			{
				form.lyrDetails().tabPathDetails().setHeaderVisible(false);
				if (doesOrderContainInvType(Category.CLINICALIMAGING))
				{
					form.lyrDetails().tabRadDetails().setHeaderEnabled(true);
					form.lyrDetails().showtabRadDetails();
					prePopulateRadPrintItems();
				}
				else
				{
					if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) // WDEV-11881
					{
						if (Boolean.TRUE.equals(ConfigFlag.UI.ORDERING_DISPLAY_SUMMARY_CLINICAL_INFO.getValue()))
						{
							form.lyrDetails().tabSummaryClinicalInfo().setHeaderEnabled(true);
							form.lyrDetails().showtabSummaryClinicalInfo();
						}
						else
						{
							form.lyrDetails().tabClinicalNotes().setHeaderEnabled(true);
							form.lyrDetails().showtabClinicalNotes();
						}
					}
					else
					{
						form.lyrDetails().tabGenDetails().setHeaderEnabled(true);
						form.lyrDetails().showtabGenDetails();
					}
				}
			}
			else
			{
				showPreviousTestsTabAndHideCurrent();
				form.getGlobalContext().OCRR.setMyOrderPotentialSpecimens(null);
			}
		}
		else if (form.lyrDetails().tabGenDetails().isVisible())
		{
			form.lyrDetails().tabGenDetails().setHeaderVisible(false);

			if (Boolean.TRUE.equals(ConfigFlag.UI.ORDERING_DISPLAY_SUMMARY_CLINICAL_INFO.getValue()))
			{
				form.lyrDetails().tabSummaryClinicalInfo().setHeaderEnabled(true);
				form.lyrDetails().showtabSummaryClinicalInfo();
			}
			else
			{
				form.lyrDetails().tabClinicalNotes().setHeaderEnabled(true);
				form.lyrDetails().showtabClinicalNotes();
			}
		}
	}

	/**
	 * go through the sub tabs and step within these
	 */
	private void showPreviousTestsTabAndHideCurrent()
	{
		form.lyrDetails().tabPathDetails().btnGenerateSpecimens().setVisible(true);

		if (form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabSpecAlreadyCollected().setHeaderVisible(false);

			if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().dyngrdOther().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabOther();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabPatient();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat().getRows().size() > 0 || form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabPhlebotomy();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabNow();
			}
			else
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabRequestedTests();
				disableOrdering();
			}
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabOther().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabOther().setHeaderVisible(false);
			// check if the patient grid was instantiated - if so show this tab
			if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().dyngrdPatient().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabPatient();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat().getRows().size() > 0 || form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabPhlebotomy();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabNow();
			}
			else
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabRequestedTests();
				disableOrdering();
			}
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabPatient().setHeaderVisible(false);

			if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdInpat().getRows().size() > 0 || form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().dyngrdOutPat().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabPhlebotomy();
			}
			else if (form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabNow();
			}
			else
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabRequestedTests();
				disableOrdering();
			}
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabPhlebotomy().setHeaderVisible(false);

			if (form.lyrDetails().tabPathDetails().lyrPathology().tabNow().dyngrdNow().getRows().size() > 0)
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabNow();
			}
			else
			{
				form.lyrDetails().tabPathDetails().lyrPathology().tabRequestedTests().setHeaderEnabled(true);
				form.lyrDetails().tabPathDetails().lyrPathology().showtabRequestedTests();
				disableOrdering();
			}
		}
		else if (form.lyrDetails().tabPathDetails().lyrPathology().tabNow().isVisible())
		{
			form.lyrDetails().tabPathDetails().lyrPathology().tabNow().setHeaderVisible(false);

			form.lyrDetails().tabPathDetails().setHeaderEnabled(true);
			form.lyrDetails().tabPathDetails().lyrPathology().showtabRequestedTests();
			disableOrdering();
		}
	}

	// ///////////////////////////////////////////////////////////////////////////////////
	// End of Navigating Tabs Section
	// ///////////////////////////////////////////////////////////////////////////////////

	// ///////////////////////////////////////////////////////////////////////////////////
	// Private Classes Section
	// ///////////////////////////////////////////////////////////////////////////////////

	/**
	 * class To store the default settings to be applied to the rows in the grid
	 */
	private class SpecimenCollectionSettings
	{
		private SpecimenCollectionMethod specimenCollectionMethod;
		private Integer units;
		private Date date;
		private SpecimenCollectionTimeCollection collTimes;
		private SpecimenCollectionTime selectedTime;
		private OutPatientDuration duration;

		public SpecimenCollectionSettings()
		{}

		protected final SpecimenCollectionTimeCollection getCollTimes()
		{
			return collTimes;
		}

		protected final void setCollTimes(SpecimenCollectionTimeCollection collTimes)
		{
			this.collTimes = collTimes;
		}

		protected final SpecimenCollectionMethod getSpecimenCollectionMethod()
		{
			return specimenCollectionMethod;
		}

		protected final void setSpecimenCollectionMethod(SpecimenCollectionMethod specimenCollectionMethod)
		{
			this.specimenCollectionMethod = specimenCollectionMethod;
		}

		protected final Date getDate()
		{
			return date;
		}

		protected final void setDate(Date date)
		{
			this.date = date;
		}

		protected final SpecimenCollectionTime getSelectedTime()
		{
			return selectedTime;
		}

		protected final void setSelectedTime(SpecimenCollectionTime selectedTime)
		{
			this.selectedTime = selectedTime;
		}

		protected final Integer getUnits()
		{
			return units;
		}

		protected final void setUnits(Integer units)
		{
			this.units = units;
		}

		protected final OutPatientDuration getDuration()
		{
			return duration;
		}

		protected final void setDuration(OutPatientDuration duration)
		{
			this.duration = duration;
		}
	}

	/**
	 * class used to check the number of sites by reference between methods
	 */
	private class SiteCount
	{
		private int siteCount = 0;

		public SiteCount()
		{

		}

		public int getSiteCount()
		{
			return siteCount;
		}

		public void increment()
		{
			this.siteCount++;
		}
	}

	@Override
	protected void onQmbLocationValueChanged() throws PresentationLogicException
	{
		loadOutpatientDepartment();
		setDepartmentValue();
	}

	private void setDepartmentValue()
	{
		if (form.lyrDetails().tabGenDetails().qmbLocation().getValue() instanceof ClinicLiteVo)
		{
			LocationLiteVo department = domain.getOutpatientDepartmentByClinic((ClinicLiteVo) form.lyrDetails().tabGenDetails().qmbLocation().getValue());

			if (department == null)
				return;

			// WDEV-13890
			if (!form.lyrDetails().tabGenDetails().cmbDepartment().getValues().contains(department))
			{
				form.lyrDetails().tabGenDetails().cmbDepartment().newRow(department, department.getName());
			}
			form.lyrDetails().tabGenDetails().cmbDepartment().setValue(department);
		}
	}
	
	//WDEV-14912
	class MyOrderComponentComparator implements Comparator<MyOrderComponentVo>
	{
		private int order = 1;
		public MyOrderComponentComparator()
		{
			order = 1;
		}
		public MyOrderComponentComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		public int compare(MyOrderComponentVo o1, MyOrderComponentVo o2)
		{
			if(o1 != null && o1.getTextIsNotNull() && o2 != null && o2.getTextIsNotNull())
					return order*o1.getText().compareToIgnoreCase(o2.getText());
	
			if (o1 == null || !o1.getTextIsNotNull())
				return -1 * order;
			
			if (o2 == null || !o2.getTextIsNotNull())
				return order;
			
			return 0;
		}	
	}

	// ///////////////////////////////////////////////////////////////////////////////////
	// End of Private Classes Section
	// ///////////////////////////////////////////////////////////////////////////////////
}
