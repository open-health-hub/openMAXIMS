//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.testedit;

public abstract class BaseLogic extends Handlers
{
	private java.util.ArrayList lookupUsageErrors;

	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.ocrr.domain.TestEdit.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.ocrr.domain.TestEdit domain)
	{
		setContext(engine, form);
		this.domain = domain;
		if(domain.getLookupService().countLookupInstances(ims.ocrr.vo.lookups.InvestigationOrderabilityCollection.class, ims.ocrr.vo.lookups.InvestigationOrderability.class, 1161050, true) == 0)
		{
			if(lookupUsageErrors == null)
				lookupUsageErrors = new java.util.ArrayList();
			lookupUsageErrors.add("The lookup type 'InvestigationOrderability' (ID: 1161050) must have at least one active instance configured.");
		}
	}
	public final String[] getLookupUsageErrors()
	{
		if(lookupUsageErrors == null)
			return null;
		String[] errors = new String[lookupUsageErrors.size()];
		for(int x = 0; x < lookupUsageErrors.size(); x++)
		{
			errors[x] = (String)lookupUsageErrors.get(x);
		}
		return errors;
	}
	public void clearContextInformation()
	{
		engine.clearPatientContextInformation();
	}
	protected final void oncmbStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PreActiveActiveInactiveStatus)
		{
			ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbStatusLookup()
	{
		this.form.cmbStatus().clear();
		ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbStatus().setValue(instance);
	}
	protected final void defaultcmbStatusLookupValue()
	{
		this.form.cmbStatus().setValue((ims.core.vo.lookups.PreActiveActiveInactiveStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PreActiveActiveInactiveStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PreActiveActiveInactiveStatus.TYPE_ID));
	}
	protected final void oncmbGenderSpecificValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbGenderSpecific().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.admin.vo.lookups.GenderSpecific existingInstance = (ims.admin.vo.lookups.GenderSpecific)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbGenderSpecificLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.admin.vo.lookups.GenderSpecific)
		{
			ims.admin.vo.lookups.GenderSpecific instance = (ims.admin.vo.lookups.GenderSpecific)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbGenderSpecificLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.admin.vo.lookups.GenderSpecific existingInstance = (ims.admin.vo.lookups.GenderSpecific)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbGenderSpecific().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbGenderSpecificLookup()
	{
		this.form.cmbGenderSpecific().clear();
		ims.admin.vo.lookups.GenderSpecificCollection lookupCollection = ims.admin.vo.lookups.LookupHelper.getGenderSpecific(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbGenderSpecific().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbGenderSpecificLookupValue(int id)
	{
		ims.admin.vo.lookups.GenderSpecific instance = ims.admin.vo.lookups.LookupHelper.getGenderSpecificInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbGenderSpecific().setValue(instance);
	}
	protected final void defaultcmbGenderSpecificLookupValue()
	{
		this.form.cmbGenderSpecific().setValue((ims.admin.vo.lookups.GenderSpecific)domain.getLookupService().getDefaultInstance(ims.admin.vo.lookups.GenderSpecific.class, engine.getFormName().getID(), ims.admin.vo.lookups.GenderSpecific.TYPE_ID));
	}
	protected final void oncmbTurnAroundMeasureValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.MinReorderPeriod existingInstance = (ims.ocrr.vo.lookups.MinReorderPeriod)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTurnAroundMeasureLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ocrr.vo.lookups.MinReorderPeriod)
		{
			ims.ocrr.vo.lookups.MinReorderPeriod instance = (ims.ocrr.vo.lookups.MinReorderPeriod)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTurnAroundMeasureLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.MinReorderPeriod existingInstance = (ims.ocrr.vo.lookups.MinReorderPeriod)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTurnAroundMeasureLookup()
	{
		this.form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().clear();
		ims.ocrr.vo.lookups.MinReorderPeriodCollection lookupCollection = ims.ocrr.vo.lookups.LookupHelper.getMinReorderPeriod(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTurnAroundMeasureLookupValue(int id)
	{
		ims.ocrr.vo.lookups.MinReorderPeriod instance = ims.ocrr.vo.lookups.LookupHelper.getMinReorderPeriodInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().setValue(instance);
	}
	protected final void defaultcmbTurnAroundMeasureLookupValue()
	{
		this.form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().setValue((ims.ocrr.vo.lookups.MinReorderPeriod)domain.getLookupService().getDefaultInstance(ims.ocrr.vo.lookups.MinReorderPeriod.class, engine.getFormName().getID(), ims.ocrr.vo.lookups.MinReorderPeriod.TYPE_ID));
	}
	protected final void oncmbMinReOrderFemaleValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.MinReorderPeriod existingInstance = (ims.ocrr.vo.lookups.MinReorderPeriod)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMinReOrderFemaleLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ocrr.vo.lookups.MinReorderPeriod)
		{
			ims.ocrr.vo.lookups.MinReorderPeriod instance = (ims.ocrr.vo.lookups.MinReorderPeriod)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMinReOrderFemaleLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.MinReorderPeriod existingInstance = (ims.ocrr.vo.lookups.MinReorderPeriod)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMinReOrderFemaleLookup()
	{
		this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().clear();
		ims.ocrr.vo.lookups.MinReorderPeriodCollection lookupCollection = ims.ocrr.vo.lookups.LookupHelper.getMinReorderPeriod(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMinReOrderFemaleLookupValue(int id)
	{
		ims.ocrr.vo.lookups.MinReorderPeriod instance = ims.ocrr.vo.lookups.LookupHelper.getMinReorderPeriodInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setValue(instance);
	}
	protected final void defaultcmbMinReOrderFemaleLookupValue()
	{
		this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setValue((ims.ocrr.vo.lookups.MinReorderPeriod)domain.getLookupService().getDefaultInstance(ims.ocrr.vo.lookups.MinReorderPeriod.class, engine.getFormName().getID(), ims.ocrr.vo.lookups.MinReorderPeriod.TYPE_ID));
	}
	protected final void oncmbMinReOrderPeriodValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.MinReorderPeriod existingInstance = (ims.ocrr.vo.lookups.MinReorderPeriod)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMinReOrderPeriodLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ocrr.vo.lookups.MinReorderPeriod)
		{
			ims.ocrr.vo.lookups.MinReorderPeriod instance = (ims.ocrr.vo.lookups.MinReorderPeriod)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMinReOrderPeriodLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.MinReorderPeriod existingInstance = (ims.ocrr.vo.lookups.MinReorderPeriod)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMinReOrderPeriodLookup()
	{
		this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().clear();
		ims.ocrr.vo.lookups.MinReorderPeriodCollection lookupCollection = ims.ocrr.vo.lookups.LookupHelper.getMinReorderPeriod(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMinReOrderPeriodLookupValue(int id)
	{
		ims.ocrr.vo.lookups.MinReorderPeriod instance = ims.ocrr.vo.lookups.LookupHelper.getMinReorderPeriodInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setValue(instance);
	}
	protected final void defaultcmbMinReOrderPeriodLookupValue()
	{
		this.form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setValue((ims.ocrr.vo.lookups.MinReorderPeriod)domain.getLookupService().getDefaultInstance(ims.ocrr.vo.lookups.MinReorderPeriod.class, engine.getFormName().getID(), ims.ocrr.vo.lookups.MinReorderPeriod.TYPE_ID));
	}
	protected final void oncmbTestStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrInvestigations().tabGeneralDet().cmbTestStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTestStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PreActiveActiveInactiveStatus)
		{
			ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTestStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrInvestigations().tabGeneralDet().cmbTestStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTestStatusLookup()
	{
		this.form.lyrInvestigations().tabGeneralDet().cmbTestStatus().clear();
		ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrInvestigations().tabGeneralDet().cmbTestStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTestStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrInvestigations().tabGeneralDet().cmbTestStatus().setValue(instance);
	}
	protected final void defaultcmbTestStatusLookupValue()
	{
		this.form.lyrInvestigations().tabGeneralDet().cmbTestStatus().setValue((ims.core.vo.lookups.PreActiveActiveInactiveStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PreActiveActiveInactiveStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PreActiveActiveInactiveStatus.TYPE_ID));
	}
	protected final void oncmbDurationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.ClinImagDurUnit existingInstance = (ims.ocrr.vo.lookups.ClinImagDurUnit)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDurationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ocrr.vo.lookups.ClinImagDurUnit)
		{
			ims.ocrr.vo.lookups.ClinImagDurUnit instance = (ims.ocrr.vo.lookups.ClinImagDurUnit)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDurationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.ClinImagDurUnit existingInstance = (ims.ocrr.vo.lookups.ClinImagDurUnit)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDurationLookup()
	{
		this.form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().clear();
		ims.ocrr.vo.lookups.ClinImagDurUnitCollection lookupCollection = ims.ocrr.vo.lookups.LookupHelper.getClinImagDurUnit(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDurationLookupValue(int id)
	{
		ims.ocrr.vo.lookups.ClinImagDurUnit instance = ims.ocrr.vo.lookups.LookupHelper.getClinImagDurUnitInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().setValue(instance);
	}
	protected final void defaultcmbDurationLookupValue()
	{
		this.form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().setValue((ims.ocrr.vo.lookups.ClinImagDurUnit)domain.getLookupService().getDefaultInstance(ims.ocrr.vo.lookups.ClinImagDurUnit.class, engine.getFormName().getID(), ims.ocrr.vo.lookups.ClinImagDurUnit.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.chkRequiresSite().setValue(false);
		this.form.chkPhlebMay().setValue(false);
		this.form.cmbStatus().setValue(null);
		this.form.cmbCategory().setValue(null);
		this.form.cmbGenderSpecific().setValue(null);
		this.form.txtDescription().setValue("");
		this.form.txtName().setValue("");
	}
	protected void populateScreenFromData(ims.ocrr.vo.InvestigationIndexVo value)
	{
		clearScreen();
		if(value == null)
			return;

		if(value.getRequiresSiteSpecifierIsNotNull())
			this.form.chkRequiresSite().setValue(value.getRequiresSiteSpecifier().booleanValue());
		if(value.getPhlebMayCollectIsNotNull())
			this.form.chkPhlebMay().setValue(value.getPhlebMayCollect().booleanValue());
		this.form.cmbStatus().setValue(value.getActiveStatusIsNotNull() ? value.getActiveStatus() : null);
		this.form.cmbCategory().setValue(value.getCategoryIsNotNull() ? value.getCategory() : null);
		this.form.cmbGenderSpecific().setValue(value.getGenderSpecificIsNotNull() ? value.getGenderSpecific() : null);
		this.form.txtDescription().setValue(value.getDescriptionIsNotNull() ? value.getDescription(): null);
		this.form.txtName().setValue(value.getNameIsNotNull() ? value.getName(): null);
	}
	protected ims.ocrr.vo.InvestigationIndexVo populateDataFromScreen(ims.ocrr.vo.InvestigationIndexVo value)
	{
		if(value == null)
			value = new ims.ocrr.vo.InvestigationIndexVo();

		value.setRequiresSiteSpecifier(new Boolean(this.form.chkRequiresSite().getValue()));
		value.setPhlebMayCollect(new Boolean(this.form.chkPhlebMay().getValue()));
		value.setActiveStatus(this.form.cmbStatus().getValue());
		value.setCategory(this.form.cmbCategory().getValue());
		value.setGenderSpecific(this.form.cmbGenderSpecific().getValue());
		value.setDescription(this.form.txtDescription().getValue());
		value.setName(this.form.txtName().getValue());

		return value;
	}
	protected ims.ocrr.vo.InvestigationIndexVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.ocrr.vo.InvestigationIndexVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.ocrr.domain.TestEdit domain;
}
