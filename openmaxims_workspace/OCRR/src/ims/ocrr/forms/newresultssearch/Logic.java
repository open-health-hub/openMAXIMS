//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.newresultssearch;

import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.PatIdType;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.controls.Timer;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Image;
import ims.ocrr.forms.newresultssearch.GenForm.grdResultsRow;
import ims.ocrr.orderingresults.vo.OrderSpecimenRefVo;
import ims.ocrr.vo.NewResultSearchListVo;
import ims.ocrr.vo.NewResultsCriteriaVo;
import ims.ocrr.vo.NewResultsSearchListVo;
import ims.ocrr.vo.NewResultsSearchListVoCollection;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.OcsPathRadResultVoCollection;
import ims.ocrr.vo.OrderedInvestigationStatusVo;
import ims.ocrr.vo.ResultCommentsLiteVo;
import ims.ocrr.vo.ResultCommentsLiteVoCollection;
import ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.OrderInvStatus;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int ALL = 1;
	private static final int MYRESULTS = 2;
	private static final int INPATIENT = 3;
	private static final int OUTPATIENTS = 4;
	private static final int ED = 5;
	private static final int PATIENT = 6;

	@Override
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (DialogResult.YES.equals(result))
		{
			search(false, true, false);
			
			updateControlsState();
		}
	}

	
	private void initialize() 
	{
		
		Object hcp = domain.getHcpLiteUser();
		if(hcp instanceof HcpLiteVo)
		{
			form.getLocalContext().setCurrentHCP((HcpLiteVo) hcp);
		}
		
		//WDEV-18349
		if (!isAlias())
		{
			engine.clearPatientContextInformation();
			form.lyrSearch().tabPageAll().ccAll().initialize();
		}
		else
		{
			form.lyrSearch().tabPagePatient().ccPatient().initialize();
			form.lyrSearch().showtabPagePatient();
			search(false, true, false);
		}
		
		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.OCRR_NEW_RESULTS_TIMER_REFRESH_RATE.getValue());
		form.getLocalContext().setWasTimerOn(false);
		
		// security level WDEV-9780
		RoleDisciplineSecurityLevelLiteGCVo voRoleDisciplineSecurityLevels = form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels();
		if (voRoleDisciplineSecurityLevels == null || (voRoleDisciplineSecurityLevels != null && voRoleDisciplineSecurityLevels.getIsConfigLoadedIsNotNull() && !voRoleDisciplineSecurityLevels.getIsConfigLoaded().equals(false)))
			form.getGlobalContext().OCRR.setRoleDisciplineSecurityLevels(domain.getRoleDisciplineSecurityLevels(engine.getLoggedInRole()));
		
		NewResultsCriteriaVo criteria = form.getGlobalContext().OCRR.getNewResultsCriteria();
		
		if(criteria != null && !isAlias())
		{
			if(criteria.getSelectedTab() != null)
			{
				if(ALL == criteria.getSelectedTab())
				{
					form.lyrSearch().showtabPageAll();
					form.lyrSearch().tabPageAll().ccAll().setValue(criteria);
				}
				else if(MYRESULTS == criteria.getSelectedTab())
				{
					form.lyrSearch().showtabPageMyResults();
					form.lyrSearch().tabPageMyResults().ccMyResults().initialize();
					form.lyrSearch().tabPageMyResults().ccMyResults().setValue(criteria);
				}
				else if(INPATIENT == criteria.getSelectedTab())
				{
					form.lyrSearch().showtabPageInpatient();
					form.lyrSearch().tabPageInpatient().ccInpatient().initialize();
					form.lyrSearch().tabPageInpatient().ccInpatient().setValue(criteria);
				}
				else if(OUTPATIENTS == criteria.getSelectedTab())
				{
					form.lyrSearch().showtabPageOutpatient();
					form.lyrSearch().tabPageOutpatient().ccOutpatient().initialize();
					form.lyrSearch().tabPageOutpatient().ccOutpatient().setValue(criteria);
				}
				else if(ED == criteria.getSelectedTab())
				{
					form.lyrSearch().showtabPageED();
					form.lyrSearch().tabPageED().ccED().initialize();
					form.lyrSearch().tabPageED().ccED().setValue(criteria);
				}
				
				if(criteria.getWasTimerOnIsNotNull() && criteria.getWasTimerOn())
				{
					form.getLocalContext().setWasTimerOn(true);
					toggleTimer(false);
				}
				
				search(false, false, false);
			}
		}
		
		updateControlsState();
	}

	private boolean isAlias()
	{
		if (engine.getFormName().getID() == form.getForms().OCRR.NewResultsSearchAlias.getID())
			return true;
		
		return false;
	}

	private void toggleTimer(boolean fromButton) 
	{
		if(form.lyrSearch().tabPageAll().isVisible())
		{
			toggleTimerForAllTab(fromButton);
		}
		else if(form.lyrSearch().tabPageMyResults().isVisible()) 
		{
			toggleTimerForMyResultsTab(fromButton);
		}
		else if(form.lyrSearch().tabPageInpatient().isVisible()) 
		{
			toggleTimerForInpatientTab(fromButton);
		}
		else if(form.lyrSearch().tabPageOutpatient().isVisible()) 
		{
			toggleTimerForOutpatientTab(fromButton);
		}
		else if(form.lyrSearch().tabPageED().isVisible()) 
		{
			toggleTimerForEDTab(fromButton);
		}
		else if(form.lyrSearch().tabPagePatient().isVisible()) 
		{
			toggleTimerForPatientTab(fromButton);
		}
	}

	private void toggleTimerForPatientTab(boolean fromButton)
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			String[] errors = form.lyrSearch().tabPagePatient().ccPatient().validate();
			
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerOn();
		
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.getLocalContext().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				form.getLocalContext().setWasTimerOn(true);
			}
		}
	}

	private void toggleTimerForEDTab(boolean fromButton) 
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			String[] errors = form.lyrSearch().tabPageED().ccED().validate();
			
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerOn();
		
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			
			form.getLocalContext().setWasTimerOn(false);
			if(form.getGlobalContext().OCRR.getNewResultsCriteriaIsNotNull())
				form.getGlobalContext().OCRR.getNewResultsCriteria().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				
				form.getLocalContext().setWasTimerOn(true);
				if(form.getGlobalContext().OCRR.getNewResultsCriteriaIsNotNull())
					form.getGlobalContext().OCRR.getNewResultsCriteria().setWasTimerOn(true);
			}
		}
	}

	private void toggleTimerForOutpatientTab(boolean fromButton) 
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			String[] errors = form.lyrSearch().tabPageOutpatient().ccOutpatient().validate();
			
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerOn();
		
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			
			form.getLocalContext().setWasTimerOn(false);
			if(form.getGlobalContext().OCRR.getNewResultsCriteriaIsNotNull())
				form.getGlobalContext().OCRR.getNewResultsCriteria().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				
				form.getLocalContext().setWasTimerOn(true);
				if(form.getGlobalContext().OCRR.getNewResultsCriteriaIsNotNull())
					form.getGlobalContext().OCRR.getNewResultsCriteria().setWasTimerOn(true);
			}
		}
	}

	private void toggleTimerForInpatientTab(boolean fromButton) 
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			String[] errors = form.lyrSearch().tabPageInpatient().ccInpatient().validate();
			
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerOn();
		
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			
			form.getLocalContext().setWasTimerOn(false);
			if(form.getGlobalContext().OCRR.getNewResultsCriteriaIsNotNull())
				form.getGlobalContext().OCRR.getNewResultsCriteria().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				
				form.getLocalContext().setWasTimerOn(true);
				if(form.getGlobalContext().OCRR.getNewResultsCriteriaIsNotNull())
					form.getGlobalContext().OCRR.getNewResultsCriteria().setWasTimerOn(true);
			}
		}
	}

	private void toggleTimerForMyResultsTab(boolean fromButton) 
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			String[] errors = form.lyrSearch().tabPageMyResults().ccMyResults().validate();
			
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerOn();
		
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			
			form.getLocalContext().setWasTimerOn(false);
			if(form.getGlobalContext().OCRR.getNewResultsCriteriaIsNotNull())
				form.getGlobalContext().OCRR.getNewResultsCriteria().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				
				form.getLocalContext().setWasTimerOn(true);
				if(form.getGlobalContext().OCRR.getNewResultsCriteriaIsNotNull())
					form.getGlobalContext().OCRR.getNewResultsCriteria().setWasTimerOn(true);
			}
		}
	}

	private void toggleTimerForAllTab(boolean fromButton) 
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			String[] errors = form.lyrSearch().tabPageAll().ccAll().validate();
			
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerOn();
		
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			
			form.getLocalContext().setWasTimerOn(false);
			if(form.getGlobalContext().OCRR.getNewResultsCriteriaIsNotNull())
				form.getGlobalContext().OCRR.getNewResultsCriteria().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				
				form.getLocalContext().setWasTimerOn(true);
				if(form.getGlobalContext().OCRR.getNewResultsCriteriaIsNotNull())
					form.getGlobalContext().OCRR.getNewResultsCriteria().setWasTimerOn(true);
			}
		}
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().OCRR.ResultDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if(form.lyrSearch().tabPageAll().isVisible())// 	WDEV-17106
				{
					if (form.lyrSearch().tabPageAll().ccAll().validate() == null)
						search(false, false, false);
				}
				else if(form.lyrSearch().tabPageMyResults().isVisible()) 
				{
					if (form.lyrSearch().tabPageMyResults().ccMyResults().validate() == null)
						search(false, false, false);
				}
				else if(form.lyrSearch().tabPageInpatient().isVisible()) 
				{
					if (form.lyrSearch().tabPageInpatient().ccInpatient().validate() == null)
						search(false, false, false);
				}
				else if(form.lyrSearch().tabPageOutpatient().isVisible()) 
				{
					if (form.lyrSearch().tabPageOutpatient().ccOutpatient().validate() == null)
						search(false, false, false);
				}
				else if(form.lyrSearch().tabPageED().isVisible()) 
				{
					if (form.lyrSearch().tabPageED().ccED().validate() == null)
						search(false, false, false);
				}
				else if(form.lyrSearch().tabPagePatient().isVisible()) 
				{
					if (form.lyrSearch().tabPagePatient().ccPatient().validate() == null)
						search(false, false, false);
				}
			}
			
			if(result.equals(DialogResult.YES))
			{
				engine.open(ConfigFlag.UI.DEMOGRAPHICS_FORM.getValue());
			}
			
			if (!isAlias())
				form.getGlobalContext().Core.setPatientShort(null);//WDEV-11737
		}
		else if(formName.equals(form.getForms().OCRR.OrderSummaryDialog))// 	WDEV-17106
		{
			form.getGlobalContext().Core.setPatientShort(null);
		}
	}
	
	@Override
	protected void onGrdResultsSelectionChanged()
	{
		viewResult();
	}
	
	private void viewResult()
	{
		OcsPathRadResultVo value = form.grdResults().getValue();
		if (value == null)
			throw new CodingRuntimeException("grid selection is null");
		
		// 	WDEV-17106
		if(OrderInvStatus.COMPLETE.equals(value.getCurrentInvestigationStatus()))
		{
			form.getGlobalContext().OCRR.PathologyResults.setOrder(value.getOrderSummarySession());
			// When populating the grid, patient in row value is PatientRef - so now we have to retrieve the PatientShort
			value.setPatient(domain.getPatient(value.getPatient()));
			form.getGlobalContext().Core.setPatientShort(value.getPatient());
			engine.open(form.getForms().OCRR.OrderSummaryDialog);
			
			return;
		}
		
		form.getGlobalContext().OCRR.setCurrentPathRadResult(value);
		form.getGlobalContext().OCRR.setSelectedPathRadResults(getOrderInvestigationFromGrid());// 	WDEV-17106
		engine.open(form.getForms().OCRR.ResultDialog, false);
	}
	
	// 	WDEV-17106
	private OcsPathRadResultVoCollection getOrderInvestigationFromGrid() 
	{
		OcsPathRadResultVoCollection coll = new OcsPathRadResultVoCollection();
		
		for(int i=0; i<form.grdResults().getRows().size(); i++)
		{
			if(form.grdResults().getRows().get(i).getValue() == null || OrderInvStatus.COMPLETE.equals(form.grdResults().getRows().get(i).getValue().getCurrentInvestigationStatus()))
				continue;
			
			coll.add(form.grdResults().getRows().get(i).getValue());
		}
		
		return coll;
	}

	@Override
	protected void onImbAutoRefreshClick() throws ims.framework.exceptions.PresentationLogicException
	{
		toggleTimer(true);
		updateControlsState();
	}
	
	private void updateControlsState() 
	{
		
		//form.lyrSearch().tabPageAll().setVisible(!engine.isDialog());
		form.lyrSearch().tabPageAll().setHeaderVisible(!isAlias());
		
	//	form.lyrSearch().tabPageMyResults().setVisible(!engine.isDialog());
		form.lyrSearch().tabPageMyResults().setHeaderVisible(!isAlias());
		
	//	form.lyrSearch().tabPageInpatient().setVisible(!engine.isDialog());
		form.lyrSearch().tabPageInpatient().setHeaderVisible(!isAlias());
		
	//	form.lyrSearch().tabPageOutpatient().setVisible(!engine.isDialog());
		form.lyrSearch().tabPageOutpatient().setHeaderVisible(!isAlias());
		
	//	form.lyrSearch().tabPageED().setVisible(!engine.isDialog());
		form.lyrSearch().tabPageED().setHeaderVisible(!isAlias());
		
	//	form.lyrSearch().tabPageAll().setVisible(!engine.isDialog());
		form.lyrSearch().tabPagePatient().setHeaderVisible(isAlias());
		
		boolean timerIsDisabled = !form.getTimers().gettimerSearch().isEnabled();
		
		boolean enabledAllTab = form.lyrSearch().tabPageAll().isVisible() && (timerIsDisabled || (ALL != getTabFromCriteria() && !timerIsDisabled));
		
		form.lyrSearch().tabPageAll().ccAll().setEnabled(enabledAllTab);
		form.lyrSearch().tabPageAll().imbSearch().setEnabled(enabledAllTab);
		form.lyrSearch().tabPageAll().imbClear().setEnabled(enabledAllTab);
		
		form.lyrSearch().tabPageAll().imbAutoRefresh().setEnabled(ALL == getTabFromCriteria());
		if(ALL == getTabFromCriteria())
		{
			form.lyrSearch().tabPageAll().imbAutoRefresh().setEnabledImage(timerIsDisabled ? form.getImages().Core.TimerStartEnabled24 : form.getImages().Core.TimerStopEnabled24);
			form.lyrSearch().tabPageAll().imbAutoRefresh().setTooltip(timerIsDisabled ? "Click button to start the automatic refresh of New Results" : "Click button to stop the automatic refresh of New Results");
		}
		else
		{
			form.lyrSearch().tabPageAll().imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.lyrSearch().tabPageAll().imbAutoRefresh().setTooltip("This button will be enabled once a search of New Results is executed");
		}

		
		boolean enabledMyOrdersTab = form.getLocalContext().getCurrentHCP() != null && form.lyrSearch().tabPageMyResults().isVisible() && (timerIsDisabled || (MYRESULTS != getTabFromCriteria() && !timerIsDisabled));
		
		form.lyrSearch().tabPageMyResults().ccMyResults().setEnabled(enabledMyOrdersTab);
		form.lyrSearch().tabPageMyResults().imbMySearch().setEnabled(enabledMyOrdersTab);
		
		if(form.getLocalContext().getCurrentHCP() == null)
		{
			form.lyrSearch().tabPageMyResults().imbMySearch().setTooltip("Logged in user is not an HCP");
		}
		
		form.lyrSearch().tabPageMyResults().imbMyClear().setEnabled(enabledMyOrdersTab);
		
		form.lyrSearch().tabPageMyResults().imbMyAutoRefresh().setEnabled(MYRESULTS == getTabFromCriteria());
		if(MYRESULTS == getTabFromCriteria())
		{
			form.lyrSearch().tabPageMyResults().imbMyAutoRefresh().setEnabledImage(timerIsDisabled ? form.getImages().Core.TimerStartEnabled24 : form.getImages().Core.TimerStopEnabled24);
			form.lyrSearch().tabPageMyResults().imbMyAutoRefresh().setTooltip(timerIsDisabled ? "Click button to start the automatic refresh of New Results" : "Click button to stop the automatic refresh of New Results");
		}
		else
		{
			form.lyrSearch().tabPageMyResults().imbMyAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.lyrSearch().tabPageMyResults().imbMyAutoRefresh().setTooltip("This button will be enabled once a search of New Results is executed");
		}
		
		boolean enabledInpatientTab = form.lyrSearch().tabPageInpatient().isVisible() && (timerIsDisabled || (INPATIENT != getTabFromCriteria() && !timerIsDisabled));
		
		form.lyrSearch().tabPageInpatient().ccInpatient().setEnabled(enabledInpatientTab);
		form.lyrSearch().tabPageInpatient().imbISearch().setEnabled(enabledInpatientTab);
		form.lyrSearch().tabPageInpatient().imbIClear().setEnabled(enabledInpatientTab);
		
		form.lyrSearch().tabPageInpatient().imbIAutoRefresh().setEnabled(INPATIENT == getTabFromCriteria());
		if(INPATIENT == getTabFromCriteria())
		{
			form.lyrSearch().tabPageInpatient().imbIAutoRefresh().setEnabledImage(timerIsDisabled ? form.getImages().Core.TimerStartEnabled24 : form.getImages().Core.TimerStopEnabled24);
			form.lyrSearch().tabPageInpatient().imbIAutoRefresh().setTooltip(timerIsDisabled ? "Click button to start the automatic refresh of New Results" : "Click button to stop the automatic refresh of New Results");
		}
		else
		{
			form.lyrSearch().tabPageInpatient().imbIAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.lyrSearch().tabPageInpatient().imbIAutoRefresh().setTooltip("This button will be enabled once a search of New Results is executed");
		}
		
		boolean enabledOutpatientTab = form.lyrSearch().tabPageOutpatient().isVisible() && (timerIsDisabled || (OUTPATIENTS != getTabFromCriteria() && !timerIsDisabled));
		
		form.lyrSearch().tabPageOutpatient().ccOutpatient().setEnabled(enabledOutpatientTab);
		form.lyrSearch().tabPageOutpatient().imbOSearch().setEnabled(enabledOutpatientTab);
		form.lyrSearch().tabPageOutpatient().imbOClear().setEnabled(enabledOutpatientTab);
		
		form.lyrSearch().tabPageOutpatient().imbOAutoRefresh().setEnabled(OUTPATIENTS == getTabFromCriteria());
		if(OUTPATIENTS == getTabFromCriteria())
		{
			form.lyrSearch().tabPageOutpatient().imbOAutoRefresh().setEnabledImage(timerIsDisabled ? form.getImages().Core.TimerStartEnabled24 : form.getImages().Core.TimerStopEnabled24);
			form.lyrSearch().tabPageOutpatient().imbOAutoRefresh().setTooltip(timerIsDisabled ? "Click button to start the automatic refresh of New Results" : "Click button to stop the automatic refresh of New Results");
		}
		else
		{
			form.lyrSearch().tabPageOutpatient().imbOAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.lyrSearch().tabPageOutpatient().imbOAutoRefresh().setTooltip("This button will be enabled once a search of New Results is executed");
		}
		
		boolean enabledEDTab = form.lyrSearch().tabPageED().isVisible() && (timerIsDisabled || (ED != getTabFromCriteria() && !timerIsDisabled));
		
		form.lyrSearch().tabPageED().ccED().setEnabled(enabledEDTab);
		form.lyrSearch().tabPageED().imbEDSearch().setEnabled(enabledEDTab);
		form.lyrSearch().tabPageED().imbEDClear().setEnabled(enabledEDTab);
		
		form.lyrSearch().tabPageED().imbEDAutoRefresh().setEnabled(ED == getTabFromCriteria());
		if(ED == getTabFromCriteria())
		{
			form.lyrSearch().tabPageED().imbEDAutoRefresh().setEnabledImage(timerIsDisabled ? form.getImages().Core.TimerStartEnabled24 : form.getImages().Core.TimerStopEnabled24);
			form.lyrSearch().tabPageED().imbEDAutoRefresh().setTooltip(timerIsDisabled ? "Click button to start the automatic refresh of New Results" : "Click button to stop the automatic refresh of New Results");
		}
		else
		{
			form.lyrSearch().tabPageED().imbEDAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.lyrSearch().tabPageED().imbEDAutoRefresh().setTooltip("This button will be enabled once a search of New Results is executed");
		}
		
		boolean enabledPatientTab = form.lyrSearch().tabPagePatient().isVisible() && timerIsDisabled;
		
		form.lyrSearch().tabPagePatient().ccPatient().setEnabled(enabledPatientTab);
		form.lyrSearch().tabPagePatient().imbPatSearch().setEnabled(enabledPatientTab);
		form.lyrSearch().tabPagePatient().imbPatClear().setEnabled(enabledPatientTab);
		
		if(isAlias())
		{
			form.lyrSearch().tabPagePatient().imbPatAutoRefresh().setEnabledImage(timerIsDisabled ? form.getImages().Core.TimerStartEnabled24 : form.getImages().Core.TimerStopEnabled24);
			form.lyrSearch().tabPagePatient().imbPatAutoRefresh().setTooltip(timerIsDisabled ? "Click button to start the automatic refresh of New Results" : "Click button to stop the automatic refresh of New Results");
		}
		else
		{
			form.lyrSearch().tabPagePatient().imbPatAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.lyrSearch().tabPagePatient().imbPatAutoRefresh().setTooltip("This button will be enabled once a search of New Results is executed");
		}
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().OCRR.setNewResultsCriteria(null);
		form.lyrSearch().tabPageAll().ccAll().clear();
		resetResults();
		updateControlsState();
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setWasTimerOn(false);
		
		String[] errors = form.lyrSearch().tabPageAll().ccAll().validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			resetResults();
			updateControlsState();
			return;
		}
		
		search(false, true, true);
		
		updateControlsState();
	}
	
	private boolean search(boolean fromTimer, boolean showMessages, boolean checkForWarning) 
	{
		resetResults();
		
		NewResultsCriteriaVo criteria = getCriteria(fromTimer);
		
		if(criteria == null)
			return false;
		
		if (checkWarning(criteria) && checkForWarning)
		{
			engine.showMessage("You are about to perform a search with limited filters in place, this could result in a large number of resulted investigations being returned. Do you wish to proceed?", "Warning", MessageButtons.YESNO);
			return false;
		}
		
		NewResultsSearchListVoCollection newResults = domain.listNewResults(criteria);
		if (newResults == null || newResults.size() == 0)
		{
			if(showMessages)
			{
				engine.showMessage("No results found.", "Message");
			}
			
			if (!criteria.getSelectedTab().equals(PATIENT))
				form.getGlobalContext().OCRR.setNewResultsCriteria(criteria);
			
			return true;
		}
		
		
		Integer nNewResUnseenDays = new Integer(ConfigFlag.DOM.OCS_NEWRES_UNSEEN_CUTOFF.getValue());
		Date dateUnseen = new Date().addDay(-1 * nNewResUnseenDays.intValue());
		
		for (NewResultsSearchListVo newResult : newResults)
			addNewResult(newResult, dateUnseen);
		
		if (!criteria.getSelectedTab().equals(PATIENT))
			form.getGlobalContext().OCRR.setNewResultsCriteria(criteria);

		updateSearchTotal(form.grdResults().getAllRows().length);
		
		return true;
	}
	
	
	private boolean checkWarning(NewResultsCriteriaVo criteria)
	{
		if (form.lyrSearch().tabPageAll().isVisible())
		{
			return (criteria.getHospital() == null && criteria.getOrderingLocation() == null && criteria.getHCP() == null && criteria.getOrderingHCP() == null && criteria.getReviewingHCP() == null);
		}
		else if (form.lyrSearch().tabPageInpatient().isVisible())
		{
			return (criteria.getHospital() == null && criteria.getInpatientHospital() == null && criteria.getInpatientWard() == null && criteria.getHCP() == null && criteria.getReviewingHCP() == null);
		}

		return false;
	}

	
	private NewResultsCriteriaVo getCriteria(boolean fromTimer) 
	{
		NewResultsCriteriaVo criteria = null;
		
		if(fromTimer)
			return form.getGlobalContext().OCRR.getNewResultsCriteria();
		
		if(form.lyrSearch().tabPageAll().isVisible())
		{
			criteria = form.lyrSearch().tabPageAll().ccAll().getValue();
		}
		else if(form.lyrSearch().tabPageMyResults().isVisible())
		{
			criteria = form.lyrSearch().tabPageMyResults().ccMyResults().getValue();
		}
		else if(form.lyrSearch().tabPageInpatient().isVisible())
		{
			criteria = form.lyrSearch().tabPageInpatient().ccInpatient().getValue();
		}
		else if(form.lyrSearch().tabPageOutpatient().isVisible())
		{
			criteria = form.lyrSearch().tabPageOutpatient().ccOutpatient().getValue();
		}
		else if(form.lyrSearch().tabPageED().isVisible())
		{
			criteria = form.lyrSearch().tabPageED().ccED().getValue();
		}
		else if(form.lyrSearch().tabPagePatient().isVisible())
		{
			criteria = form.lyrSearch().tabPagePatient().ccPatient().getValue();
		}
		
		if(criteria != null)
		{
			criteria.setWasTimerOn(form.getLocalContext().getWasTimerOn());
		}
		
		return criteria;
	}

	private void addNewResult(NewResultsSearchListVo newResult, Date dateUnseen)
	{
		if (newResult == null)
			return;
		
		boolean isDft = isDFT(newResult);

		// WDEV-9780
		if (form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
		{
			ServiceRefVo voInvService = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getProviderServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? newResult.getInvestigation().getProviderService().getLocationService().getService() : null;
			SecurityLevelConfigVo voInvSecurityLevel = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

			if (!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel, false)) //WDEV-11622
				return;
		}

		grdResultsRow row = createOrFindSpecimenGridRow(newResult);

		//wdev-11753 - starts here
		if (newResult.getResultStatusIsNotNull())
		{
			//row.setColPF(domain.getMappingForResultStatusLookup(newResult.getResultStatus(), TaxonomyType.DISPLAY_TEXT));//WDEV-15709
			row.setColPF(newResult.getResultStatus().getText());// 	WDEV-15783
		}
		//wdev-11753 - ends here
		
		// RepDateTime
		if (newResult.getRepDateTimeIsNotNull())
		{
			if(newResult.getOrdInvCurrentStatusIsNotNull() && OrderInvStatus.REVIEW.equals(newResult.getOrdInvCurrentStatus().getOrdInvStatus()))
			{
				row.setRepDate(newResult.getAllocatedDateForReview() != null ? newResult.getAllocatedDateForReview().toString() : "-");
			}
//			else if (newResult.getSpecimen() != null && newResult.getSpecimen().size() > 0 && newResult.getSpecimen().get(0) != null && Boolean.FALSE.equals(newResult.getSpecimen().get(0).getColTimeFillerSupplied()))//WDEV-16232
//			{
//				row.setRepDate(newResult.getRepDateTime().getDate().toString());
//			}
			else
			{
				row.setRepDate(newResult.getRepDateTime().toString());
			}
		}

		// Investigation
		if (newResult.getInvestigationIsNotNull())
		{
			if (newResult.getInvestigation().getInvestigationIndexIsNotNull())
			{
				row.setInvestigation(newResult.getInvestigation().getInvestigationIndex().getName());
				row.setTooltipForInvestigation(row.getInvestigation());
			}
		}

		// ABN
		if (newResult.getResultDetails() != null && newResult.getResultDetails().getPathologyResultDetails() != null)
		{
			for (int i = 0; i < newResult.getResultDetails().getPathologyResultDetails().size(); i++)
			{
				if (Boolean.TRUE.equals(newResult.getResultDetails().getPathologyResultDetails().get(i).getIsAbnormal()))
				{
					row.setABN(form.getImages().Core.CriticalError);
					row.setTooltipForABN("Abnormal Result");
					break;
				}
			}
		}

		// Status
		String szTooltip = "";
		if (newResult.getOrdInvCurrentStatusIsNotNull() && newResult.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull())
		{
			OrderInvStatus currStat = newResult.getOrdInvCurrentStatus().getOrdInvStatus();

			Image image = newResult.getOrdInvCurrentStatus().getOrdInvStatus().getImage();
			
			if (OrderInvStatus.UPDATED_RESULT.equals(newResult.getOrdInvCurrentStatus().getOrdInvStatus()) && Boolean.TRUE.equals(newResult.getForReview()))
				image = form.getImages().Admin.Complication;
			
			szTooltip = generateStatusTooltip(newResult.getOrdInvCurrentStatus());
			
			//WDEV-16679
			if ((Boolean.TRUE.equals(newResult.getForReview()) || currStat.equals(OrderInvStatus.REVIEW)) && newResult.getAllocatedHCPforReview() != null)
			{
				szTooltip = (szTooltip + "<br><b>Review HCP: </b>" + newResult.getAllocatedHCPforReview().toString());
				szTooltip = (szTooltip + "<br><b>Review Date: </b>" + newResult.getAllocatedDateForReview());
				szTooltip = (szTooltip + "<br><b>Review Requested: </b>" + newResult.getReviewRequestedBy());
			}

			if (newResult.getRepDateTimeIsNotNull() && dateUnseen != null)
			{
				if (currStat.equals(OrderInvStatus.NEW_RESULT) || currStat.equals(OrderInvStatus.UPDATED_RESULT))
				{
					if (newResult.getRepDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Unseen");
					}
				}
				else if (currStat.equals(OrderInvStatus.REVIEW))
				{
					if (newResult.getOrdInvCurrentStatus().getChangeDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Requires Attention");
					}
				}
			}
			row.setStatus(image);
			
			if(!isDft)
			{
				row.setTooltipForStatus(szTooltip);
			}
		}
		
		//WDEV-12054
		// TODO
//		if(newResult.getOrdInvXOStatusHistoryIsNotNull() && newResult.getOrdInvXOStatusHistory().size() > 0)
//		{
//			szTooltip += "<br>" + newResult.getOrdInvXOStatusHistory().generateXoStatusTooltip();
//			if(!isDft)
//			{
//				row.setTooltipForStatus(szTooltip);
//			}
//		}

		Category category = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getCategory() : null;
		
		// WDEV-13320
		// TODO Add latest comment to result
		if (Category.CLINICALIMAGING.equals(category) || Category.CLINICAL.equals(category))
		{
			if (newResult.getResultConclusionCommentsIsNotNull() && newResult.getResultConclusionComments().size() > 0)
			{
				ResultCommentsLiteVoCollection comments = newResult.getResultConclusionComments();
				
				// WDEV-13876 - Also pre-append authoring date and authoring info of the last comment
				comments.sort(SortOrder.DESCENDING);
				ResultCommentsLiteVo lastComment = comments.get(0);
				
				szTooltip += "<br><b>Last Annotation Comment: " + lastComment.getAuthoringInformation().getAuthoringDateTime().toString() + " ";
				szTooltip += lastComment.getAuthoringInformation().getAuthoringHcp().getName().toString() + ":</b> " + lastComment.getComment();
				
				// WDEV-13872 - Append correction
				if (lastComment.getCorrectingDateTimeIsNotNull())
				{
					szTooltip += "<br><b>Corrected " + lastComment.getCorrectingDateTime().toString() + " ";
					szTooltip += lastComment.getCorrectingHcp().getName().toString() + ":</b> " + lastComment.getCorrectionReason();
				}
				
				row.setTooltipForStatus(szTooltip);
			}
		}
		else if (Category.PATHOLOGY.equals(category))
		{
			if (newResult.getSpecimenIsNotNull() && newResult.getSpecimen().size() > 0 && newResult.getSpecimen().get(0) != null && newResult.getSpecimen().get(0).getResultConclusionCommentsIsNotNull() && newResult.getSpecimen().get(0).getResultConclusionComments().size() > 0)//WDEV-16232
			{
				ResultCommentsLiteVoCollection comments = newResult.getSpecimen().get(0).getResultConclusionComments();//WDEV-16232

				// WDEV-13876 - Also pre-append authoring date and authoring info of the last comment
				comments.sort(SortOrder.DESCENDING);
				ResultCommentsLiteVo lastComment = comments.get(0);
				
				szTooltip += "<br><b>Last Annotation Comment: " + lastComment.getAuthoringInformation().getAuthoringDateTime().toString() + " ";
				szTooltip += lastComment.getAuthoringInformation().getAuthoringHcp().getName().toString() + ":</b> " + lastComment.getComment();
				
				// WDEV-13872 - Append correction
				if (lastComment.getCorrectingDateTimeIsNotNull())
				{
					szTooltip += "<br><b>Corrected " + lastComment.getCorrectingDateTime().toString() + " ";
					szTooltip += lastComment.getCorrectingHcp().getName().toString() + ":</b> " + lastComment.getCorrectionReason();
				}
				
				if(!isDft)
				{
					row.setTooltipForStatus(szTooltip);
				}
			}
		}
		
		// Discipline
		if (newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getProviderServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getService().getServiceNameIsNotNull())
		{
			row.setDiscipline(newResult.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
			row.setTooltipForDiscipline(row.getDiscipline());
		}

		// Location or Clinician
		if (newResult.getOrderDetailsIsNotNull())
		{
			StringBuffer locClin = new StringBuffer();
			if (newResult.getOrderDetails().getPatientLocation() != null)
				locClin.append(newResult.getOrderDetails().getPatientLocation().getName());
			else if (newResult.getOrderDetails().getPatientClinic() != null)
				locClin.append(newResult.getOrderDetails().getPatientClinic().getClinicName());
				else if (newResult.getOrderDetails().getOutpatientDeptIsNotNull()) //WDEV-14351
					locClin.append(newResult.getOrderDetails().getOutpatientDept().getName()); 

			if (locClin.length() > 0)
				locClin.append(" / ");

			if (newResult.getOrderDetails().getResponsibleClinician() != null)
				locClin.append(newResult.getOrderDetails().getResponsibleClinician().getName().toString());
			else if (newResult.getOrderDetails().getResponsibleGp() != null)
				locClin.append(newResult.getOrderDetails().getResponsibleGp().getName().toString());

			row.setLocation(locClin.toString());
			row.setTooltipForLocation(row.getLocation());
		}

		
		OcsPathRadResultVo res = new OcsPathRadResultVo();
		res.setCategory(category);
		res.setOrderInvestigation(newResult);
		res.setOrderSummarySession(newResult != null ? newResult.getOrderDetails() : null);// 	WDEV-17106
		res.setCurrentInvestigationStatus(newResult != null ? newResult.getOrdInvCurrentStatus().getOrdInvStatus() : null);// 	WDEV-17106
		res.setPatient(new PatientShort(newResult.getOrderDetails().getPatient().getID_Patient(), newResult.getOrderDetails().getPatient().getID_Patient()));//wdev-10391
		// WDEV-13320
//		res.setHasComments((Category.CLINICALIMAGING.equals(category) && newResult.getResultConclusionCommentsIsNotNull() && newResult.getResultConclusionComments().size() > 0)
//				|| (Category.PATHOLOGY.equals(category) && newResult.getSpecimenIsNotNull() && newResult.getSpecimen().size() > 0 && newResult.getSpecimen().get(0) != null && newResult.getSpecimen().get(0).getResultConclusionCommentsIsNotNull() && newResult.getSpecimen().get(0).getResultConclusionComments().size() > 0));//WDEV-16232
		row.setValue(res);
	}
	
	@SuppressWarnings("unused")
	private String getStatusTooltip(NewResultSearchListVo newResult, Date dateUnseen)
	{
		StringBuffer tooltip = new StringBuffer();
		
		tooltip.append("<b>Current Status:</b>");
		if (newResult.getOrdInvResultStatus() != null)
			tooltip.append(" ").append(newResult.getOrdInvResultStatus().getText());
		else
			tooltip.append(" -");
		
		if (OrderInvStatus.CANCELLED.equals(newResult.getOrdInvResultStatus()) && newResult.getOrdInvResultStatusReason() != null && newResult.getOrdInvResultStatusReason().length() > 0)
			tooltip.append("<br><b>Current status reason:</b> ").append(newResult.getOrdInvResultStatusReason());
		
		tooltip.append("<br><b>Date changed:</b> ").append(newResult.getOrdInvStatusChangeDateTime());
		tooltip.append("<br><b>Changed by:</b> ").append("-");
		
		
		if (OrderInvStatus.REVIEW.equals(newResult.getOrdInvResultStatus()) && (newResult.getAllocatedForReviewSurname() != null || newResult.getAllocatedForReviewForename() != null))
		{
			tooltip.append("<br><b>Review HPC:</b> ").append(newResult.getAllocatedForReviewSurname()).append(" ").append(newResult.getAllocatedForReviewForename());
			tooltip.append("<br><b>Review Date:</b> ").append(newResult.getAllocatedDateForReview());
		}
		
		if (dateUnseen != null)
		{
			if (OrderInvStatus.NEW_RESULT.equals(newResult.getOrdInvResultStatus()) || OrderInvStatus.UPDATED_RESULT.equals(newResult.getOrdInvResultStatus()))
			{
				if (newResult.getRepDateTime() != null && newResult.getRepDateTime().getDate().isLessThan(dateUnseen))
					tooltip.append("<br>Unseen");
			}
			else if (OrderInvStatus.REVIEW.equals(newResult.getOrdInvResultStatus()))
			{
				if (newResult.getAllocatedDateForReview() != null && newResult.getAllocatedDateForReview().getDate().isLessThan(dateUnseen))
					tooltip.append("<br>Requires Attention");
			}
		}
			
		return tooltip.toString();
	}

	
	private grdResultsRow createOrFindSpecimenGridRow(NewResultsSearchListVo newResult)
	{
		if (newResult == null)
			return null;

		OrderSpecimenRefVo specimen = null;//WDEV-16232
		
		if(newResult.getSpecimen() != null && newResult.getSpecimen().size() > 0)//WDEV-16232
		{
			for(int i=0; i<newResult.getSpecimen().size(); i++)
			{
				specimen = newResult.getSpecimen().get(i);//WDEV-16232
	
				for (int x = 0; x < form.grdResults().getRows().size(); x++)
				{
					grdResultsRow row = form.grdResults().getRows().get(x);
					NewResultsSearchListVo rowValue = (NewResultsSearchListVo) row.getValue().getOrderInvestigation();
					if (rowValue != null && rowValue.getSpecimen() != null)// && rowValue.getSpecimen().size() > 0 && rowValue.getSpecimen().get(0) != null && rowValue.getSpecimen().get(0).equals(specimen))//WDEV-16232
					{
						for(int j=0; j<rowValue.getSpecimen().size(); j++)
						{
							if(rowValue.getSpecimen().get(j).equals(specimen))
							{
								row = row.getRows().newRow();
								row.setSelectable(false);
								row.setBackColor(row.getParentRow().getBackColor());
								return row;
							}
						}
					}
				}
			}
		}
		
		GenForm.grdResultsRow row = form.grdResults().getRows().newRow();
		row.setExpanded(true);
		row.setSelectable(true);
		if (form.grdResults().getRows().size() % 2 == 0)
			row.setBackColor(Color.Beige);

		boolean isPathResult = newResult.getInvestigation().getInvestigationIndex().getCategory().equals(Category.PATHOLOGY);
		boolean isClinicalResult = newResult.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL);//WDEV-16361
		
		if (isPathResult)
		{
			row.setCategory(form.getImages().Admin.Activity);
			row.setTooltipForCategory("Pathology Result");
		}
		else if (isClinicalResult) //WDEV-16361
		{
			row.setCategory(form.getImages().Admin.AdminAction24);
			row.setTooltipForCategory("Clinical Result");
		}
		else
		{
			row.setCategory(form.getImages().Admin.ActivityGroup);
			row.setTooltipForCategory("Radiology Result");
		}

		// Discipline
		if (newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getProviderServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && newResult.getInvestigation().getProviderService().getLocationService().getService().getServiceNameIsNotNull())
		{
			row.setDiscipline(newResult.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
			row.setTooltipForDiscipline(row.getDiscipline());
		}

		// Location or Clinician
		if (newResult.getOrderDetailsIsNotNull())
		{
			StringBuffer locClin = new StringBuffer();
			if (newResult.getOrderDetails().getPatientLocation() != null)
				locClin.append(newResult.getOrderDetails().getPatientLocation().getName());
			else if (newResult.getOrderDetails().getPatientClinic() != null)
				locClin.append(newResult.getOrderDetails().getPatientClinic().getClinicName());
				else if (newResult.getOrderDetails().getOutpatientDeptIsNotNull()) //WDEV-14351
					locClin.append(newResult.getOrderDetails().getOutpatientDept().getName()); 

			if (locClin.length() > 0)
				locClin.append(" / ");

			if (newResult.getOrderDetails().getResponsibleClinician() != null)
				locClin.append(newResult.getOrderDetails().getResponsibleClinician().getName().toString());
			else if (newResult.getOrderDetails().getResponsibleGp() != null)
				locClin.append(newResult.getOrderDetails().getResponsibleGp().getName().toString());

			row.setLocation(locClin.toString());
			row.setTooltipForLocation(row.getLocation());
		}

		// Patient details
		if (newResult.getOrderDetailsIsNotNull() && newResult.getOrderDetails().getPatientIsNotNull())
		{
			PatientLite_IdentifiersVo patient = newResult.getOrderDetails().getPatient();

			StringBuffer sb = new StringBuffer();
			StringBuffer patientIdentifiers = new StringBuffer();

			if (patient.getName() != null)
			{
				sb.append(patient.getName().toShortForm());
				patientIdentifiers.append("<b>Patient:</b> " +patient.getName().toShortForm());
			}
			
//			if (patient.getDisplayId() != null)
//			{
//				sb.append(" (" + patient.getDisplayId().getValue() + ")");
//			}

			//WDEV-16710
			PatientIdCollection identifiers = patient.getIdentifiers();
			
			if (identifiers != null)
			{
				for (int a = 0; a< identifiers.size(); a++)
				{
					patientIdentifiers.append("<br><b>" + identifiers.get(a).getType().toString() + ":</b> " + identifiers.get(a).getValue() );
				}
			}
			
			row.setPatient(sb.toString());
			row.setTooltipForPatient(patientIdentifiers.toString());
		}

		OcsPathRadResultVo res = new OcsPathRadResultVo();
		Category category = newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getCategory() : null;
		res.setCategory(category);
		res.setOrderInvestigation(newResult);
		res.setCurrentInvestigationStatus(newResult != null ? newResult.getOrdInvCurrentStatus().getOrdInvStatus() : null);// 	WDEV-17106
		res.setOrderSummarySession(newResult != null ? newResult.getOrderDetails() : null);// 	WDEV-17106
		res.setDescription(newResult.getInvestigationIsNotNull() && newResult.getInvestigation().getInvestigationIndexIsNotNull() ? newResult.getInvestigation().getInvestigationIndex().getName() : "<not set>");
		row.setValue(res);

		return row;
	}

	
	
	@SuppressWarnings("unused")
	private String getPatientTooltip(NewResultSearchListVo newResult)
	{
		StringBuilder tooltip = new StringBuilder();
		
		tooltip.append("<b>Patient:</b> ").append(newResult.getPatientSurname()).append(" ").append(newResult.getPatientForename());
		tooltip.append("<br><b>").append(getDefaultPatientIdentifier().getText()).append("</b>: ").append(newResult.getPatientIdentifier());
		
		return tooltip.toString();
	}
	

	@SuppressWarnings("unused")
	private String getPatientString(String patientSurname, String patientForename, String patientIdentifier)
	{
		StringBuffer displayString = new StringBuffer();
		
		if (patientSurname != null && patientSurname.length() > 0)
			displayString.append(patientSurname);
		
		if (patientForename != null && patientForename.length() > 0)
		{
			if (displayString.length() > 0)
				displayString.append(", ");
			
			displayString.append(patientForename);
		}
		
		if (displayString.length() == 0)
			displayString.append("<Unknown patient name>");
		
		if (patientIdentifier != null && patientIdentifier.length() > 0 && displayString != null && displayString.length() > 0)
			displayString.append(" (").append(patientIdentifier).append(")");

		return displayString.toString();
	}
	

	private boolean isDFT(NewResultsSearchListVo newResult) //WDEV-16232
	{
		if(newResult == null || newResult.getInvestigation() == null)
			return false;
		
		if(InvEventType.TIME_SERIES.equals(newResult.getInvestigation().getEventType()))
			return true;
			
		return false;
	}
	
	private void resetResults()
	{
		form.grdResults().getRows().clear();
		updateSearchTotal(0);
	}
	
	private void updateSearchTotal(int count)
	{
		form.lblTotal().setValue("Total : " + count);
	}

	@Override
	protected void onImbMyAutoRefreshClick() throws ims.framework.exceptions.PresentationLogicException
	{
		toggleTimer(true);
		updateControlsState();
	}
	
	@Override
	protected void onImbMyClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().OCRR.setNewResultsCriteria(null);
		form.lyrSearch().tabPageMyResults().ccMyResults().clear();
		resetResults();
		updateControlsState();
	}
	
	@Override
	protected void onImbMySearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setWasTimerOn(false);
		
		String[] errors = form.lyrSearch().tabPageMyResults().ccMyResults().validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			resetResults();
			updateControlsState();
			return;
		}
		
		search(false, true, true);
		
		updateControlsState();
	}
	
	@Override
	protected void onImbIAutoRefreshClick() throws ims.framework.exceptions.PresentationLogicException
	{
		toggleTimer(true);
		updateControlsState();
	}
	
	@Override
	protected void onImbIClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().OCRR.setNewResultsCriteria(null);
		form.lyrSearch().tabPageInpatient().ccInpatient().clear();
		resetResults();
		updateControlsState();
	}
	
	@Override
	protected void onImbISearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setWasTimerOn(false);
		
		String[] errors = form.lyrSearch().tabPageInpatient().ccInpatient().validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			resetResults();
			updateControlsState();
			return;
		}
		
		search(false, true, true);
		
		updateControlsState();
	}
	
	@Override
	protected void onImbOAutoRefreshClick() throws ims.framework.exceptions.PresentationLogicException
	{
		toggleTimer(true);
		updateControlsState();
	}
	
	@Override
	protected void onImbOClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().OCRR.setNewResultsCriteria(null);
		form.lyrSearch().tabPageOutpatient().ccOutpatient().clear();
		resetResults();
		updateControlsState();
	}
	
	@Override
	protected void onImbOSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setWasTimerOn(false);
		
		String[] errors = form.lyrSearch().tabPageOutpatient().ccOutpatient().validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			resetResults();
			updateControlsState();
			return;
		}
		
		search(false, true, true);
		
		updateControlsState();
	}
	
	@Override
	protected void onImbEDAutoRefreshClick() throws ims.framework.exceptions.PresentationLogicException
	{
		toggleTimer(true);
		updateControlsState();
	}
	
	@Override
	protected void onImbEDClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().OCRR.setNewResultsCriteria(null);
		form.lyrSearch().tabPageED().ccED().clear();
		resetResults();
		updateControlsState();
	}
	
	@Override
	protected void onImbEDSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setWasTimerOn(false);
		
		String[] errors = form.lyrSearch().tabPageED().ccED().validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			resetResults();
			updateControlsState();
			return;
		}
		
		search(false, true, true);
		
		updateControlsState();
	}
	
	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException 
	{
		if (timer.equals(form.getTimers().gettimerSearch()))
		{
			if (isAlias())
				search(false, false, false);
			else
				search(true, false, false);
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onlyrSearchTabChanged(LayerBridge tab) 
	{
		tabSearchChanged();
		updateControlsState();
	}
	
	private void tabSearchChanged() 
	{
		resetResults();
		form.getTimers().gettimerSearch().setEnabled(false);
		
		NewResultsCriteriaVo criteria = form.getGlobalContext().OCRR.getNewResultsCriteria();
		
		if(form.lyrSearch().tabPageAll().isVisible())
		{
			form.lyrSearch().tabPageAll().ccAll().initialize();
			
			if(ALL == getTabFromCriteria())
			{
				form.getTimers().gettimerSearch().setEnabled(Boolean.TRUE.equals(criteria.getWasTimerOn()));
				form.lyrSearch().tabPageAll().ccAll().setValue(criteria);
				
				search(false, false, false);
			}
		}
		else if(form.lyrSearch().tabPageMyResults().isVisible()) 
		{
			form.lyrSearch().tabPageMyResults().ccMyResults().initialize();
			if(MYRESULTS == getTabFromCriteria())
			{
				form.getTimers().gettimerSearch().setEnabled(Boolean.TRUE.equals(criteria.getWasTimerOn()));
				form.lyrSearch().tabPageMyResults().ccMyResults().setValue(criteria);

				search(false, false, false);
			}
		}
		else if(form.lyrSearch().tabPageInpatient().isVisible()) 
		{
			form.lyrSearch().tabPageInpatient().ccInpatient().initialize();
			if(INPATIENT == getTabFromCriteria())
			{
				form.getTimers().gettimerSearch().setEnabled(Boolean.TRUE.equals(criteria.getWasTimerOn()));
				form.lyrSearch().tabPageInpatient().ccInpatient().setValue(criteria);

				search(false, false, false);
			}
		}
		else if(form.lyrSearch().tabPageOutpatient().isVisible()) 
		{
			form.lyrSearch().tabPageOutpatient().ccOutpatient().initialize();
			if(OUTPATIENTS == getTabFromCriteria())
			{
				form.getTimers().gettimerSearch().setEnabled(Boolean.TRUE.equals(criteria.getWasTimerOn()));
				form.lyrSearch().tabPageOutpatient().ccOutpatient().setValue(criteria);

				search(false, false, false);
			}
		}
		else if(form.lyrSearch().tabPageED().isVisible()) 
		{
			form.lyrSearch().tabPageED().ccED().initialize();
			if(ED == getTabFromCriteria())
			{
				form.getTimers().gettimerSearch().setEnabled(Boolean.TRUE.equals(criteria.getWasTimerOn()));
				form.lyrSearch().tabPageED().ccED().setValue(criteria);

				search(false, false, false);
			}
		}
	}

	private int getTabFromCriteria() 
	{
		NewResultsCriteriaVo criteria = form.getGlobalContext().OCRR.getNewResultsCriteria();
		
		if(criteria != null)
		{
			return criteria.getSelectedTab();
		}
		
		
		
		return -1;
	}
	
	
	private PatIdType getDefaultPatientIdentifier()
	{
		String flagValue = ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue();
		
		if ("PKEY".equals(flagValue))
			return PatIdType.PKEY;
		
		if ("HOSPNUM".equals(flagValue))
			return PatIdType.HOSPNUM;
		
		if ("NHSN".equals(flagValue))
			return PatIdType.NHSN;
		
		if ("PPSN".equals(flagValue))
			return PatIdType.PPSN;
		
		if ("CHARTNUM".equals(flagValue))
			return PatIdType.CHARTNUM;
		
		if ("NTPFNUM".equals(flagValue))
			return PatIdType.NTPFNUM;
		
		if ("SENTNUM".equals(flagValue))
			return PatIdType.SENTNUM;
		
		if ("DISTRICT".equals(flagValue))
			return PatIdType.DISTRICT;
		
		if ("CASENUM".equals(flagValue))
			return PatIdType.CASENUM;
		
		if ("EMPI".equals(flagValue))
			return PatIdType.EMPI;
		
		if ("CLIENTID".equals(flagValue))
			return PatIdType.CLIENTID;
		
		if ("GMSID".equals(flagValue))
			return PatIdType.GMSID;
		
		if ("PASID".equals(flagValue))
			return PatIdType.PASID;
		
		if ("PATNUM".equals(flagValue))
			return PatIdType.PATNUM;
		
		if ("PXNUMBER".equals(flagValue))
			return PatIdType.PXNUMBER;
		
		if ("MRNNUM".equals(flagValue))
			return PatIdType.MRNNUM;
			
		return PatIdType.HOSPNUM;
	}

	
	private String generateStatusTooltip(OrderedInvestigationStatusVo status)
	{
		if (status != null && status.getOrdInvStatus() != null)
		{
			StringBuffer sb = new StringBuffer();
			sb.append("<b>Current status: </b>" + status.getOrdInvStatus().getText());

			if (status.getStatusReason() != null && status.getStatusReason().length() > 0 && status.getOrdInvStatus().equals(OrderInvStatus.CANCELLED))
				sb.append("<br><b>Current status reason: </b>" + status.getStatusReason());

			sb.append("<br><b>Date changed: </b>" + status.getChangeDateTime());
			sb.append("<br><b>Changed by: </b>" + (status.getChangeUserIsNotNull() ? status.getChangeUser().toString() : ""));

			return sb.toString();
		}
		return null;
	}

	@Override
	protected void onImbPatAutoRefreshClick() throws PresentationLogicException
	{
		toggleTimer(true);
		updateControlsState();
	}

	@Override
	protected void onImbPatClearClick() throws PresentationLogicException
	{
		form.lyrSearch().tabPagePatient().ccPatient().clear();
		resetResults();
		form.lyrSearch().tabPagePatient().imbPatAutoRefresh().setEnabled(false);
		updateControlsState();
	}

	@Override
	protected void onImbPatSearchClick() throws PresentationLogicException
	{
		form.getLocalContext().setWasTimerOn(false);
		
		String[] errors = form.lyrSearch().tabPagePatient().ccPatient().validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			resetResults();
			form.lyrSearch().tabPagePatient().imbPatAutoRefresh().setEnabled(false);
			updateControlsState();
			return;
		}
		
		if (search(false, true, false))
			form.lyrSearch().tabPagePatient().imbPatAutoRefresh().setEnabled(true);
		
		updateControlsState();
		
	}
}
