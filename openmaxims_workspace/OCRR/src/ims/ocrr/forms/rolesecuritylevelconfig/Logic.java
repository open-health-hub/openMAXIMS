//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.71 build 3716.26758)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.rolesecuritylevelconfig;

import ims.admin.vo.AppRoleLiteVo;
import ims.admin.vo.AppRoleLiteVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.configuration.vo.AppRoleRefVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.configuration.vo.SecurityLevelRefVo;
import ims.ocrr.forms.rolesecuritylevelconfig.GenForm.grdDisciplineRow;
import ims.ocrr.vo.RoleDisciplineSecurityLevelVo;
import ims.ocrr.vo.RoleDisciplineSecurityLevelVoCollection;
import ims.ocrr.vo.SecurityLevelLiteVo;
import ims.ocrr.vo.SecurityLevelLiteVoCollection;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		form.getLocalContext().setRecordsExist(false);
	}
	
	public void initialize() throws FormOpenException
	{
		SecurityLevelLiteVoCollection voCollSecurity = domain.listSecurityLevel();
		if(voCollSecurity == null || voCollSecurity.size() == 0)
			throw new FormOpenException("Security Level Configuration is mandatory");
		
		form.getLocalContext().setSecurityLevels(voCollSecurity);
		form.getLocalContext().setRoles(domain.listActiveAppRole());
		
		//load roles into search combo
		for(AppRoleLiteVo voRole : form.getLocalContext().getRoles())
			form.cmbRole().newRow(voRole, voRole.getName());
		
		form.getLocalContext().setOCSServices(domain.listActiveServiceByOCSCategories());
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria();
		clearInstanceControls();
		form.getLocalContext().setRecordsExist(false);
		updateControlState();
	}
	
	private void clearSearchCriteria()
	{
		form.cmbRole().setValue(null);	
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}

	private void search() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.cmbRole().getValue() == null)
		{
			engine.showErrors(new String[] {"Role is mandatory in Search Criteria"});
			return;
		}
		
		form.getLocalContext().setRecordsExist(false);
	
		//do a get from the configuration for this role and see if a record exists
		RoleDisciplineSecurityLevelVoCollection voCollRoleDispSecurity = domain.listRoleDisciplineSecurityLevelByRole(form.cmbRole().getValue());
		if(voCollRoleDispSecurity != null && voCollRoleDispSecurity.size() > 0)
		{
			//record(s) found populatescreen
			open();
			populateScreenFromData(voCollRoleDispSecurity);
		}
		else
		{
			engine.showMessage("No matching records found");
			open();
		}
		
		updateControlState();
	}
	
	private void populateScreenFromData(RoleDisciplineSecurityLevelVoCollection voCollRoleDispSecurity)
	{
		if(voCollRoleDispSecurity == null)
			throw new CodingRuntimeException("voCollRoleDispSecurity is null in method populateScreenFromData");
		
		form.cmbRoleDetail().newRow(form.cmbRole().getValue(), form.cmbRole().getValue().getName());
		form.cmbRoleDetail().setValue(form.cmbRole().getValue());
		
		for(RoleDisciplineSecurityLevelVo voRoleDispSec : voCollRoleDispSecurity)
		{
			ServiceRefVo voService = voRoleDispSec.getService();
			
			for(int i=0;i<form.grdDiscipline().getRows().size(); i++)
			{
				grdDisciplineRow row = form.grdDiscipline().getRows().get(i);
				if(row.getRows() != null && row.getRows().size() > 0)
				{
					for(int p=0;p<row.getRows().size();p++)
					{
						grdDisciplineRow cRow = row.getRows().get(p);
						if(cRow.getColServiceValue().equals(voService))
						{
							cRow.getColOrderingSecurityLevel().setValue(voRoleDispSec.getOrderingSecurityLevel());
							cRow.getColViewingSecurityLevel().setValue(voRoleDispSec.getViewingSecurityLevel());
							cRow.setValue(voRoleDispSec);
						}
					}
				}
			}
		}
		
		if(voCollRoleDispSecurity.size() > 0)
			form.getLocalContext().setRecordsExist(true);
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		clearInstanceControls();
	
		form.getLocalContext().setRecordsExist(false);
		
		//add pathology category lookup instances for OCS and associated disciplines
		addCategoryAndDisciplines(ServiceCategory.PATHOLOGY_DISCIPLINE);
		
		//add radiology category lookup instances for OCS and associated disciplines
		addCategoryAndDisciplines(ServiceCategory.RADIOLOGY_MODALITY);
		
		//add radiology category lookup instances for OCS and associated disciplines
		addCategoryAndDisciplines(ServiceCategory.CLINICAL);
	}

	private void updateControlState()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{			
			form.cmbRoleDetail().setEnabled(false);
			
			if(form.getLocalContext().getRecordsExist())
				form.btnEdit().setVisible(true);
			else
				form.btnEdit().setVisible(false);
		}
		else if(form.getMode().equals(FormMode.EDIT))
		{
			form.cmbRoleDetail().setEnabled(!form.getLocalContext().getRecordsExist());
			
			if(form.cmbRoleDetail().getValue() != null)
			{
				form.grdDiscipline().setReadOnly(false);
				form.grdDiscipline().setEnabled(true);
			}
			else
				form.grdDiscipline().setReadOnly(true);
		}
	}	

	private void addCategoryAndDisciplines(ServiceCategory category)
	{
		if (category == null)
			throw new CodingRuntimeException("category is null or id not provided in method addCategoryAndDisciplines");
		
		boolean isParentRowAdded = false;
		grdDisciplineRow row = null;

		//add disciplines for this category
		ServiceLiteVoCollection voCollServices = form.getLocalContext().getOCSServices();
		if(voCollServices != null)
		{
			for(ServiceLiteVo voService : voCollServices)
			{
				if(voService.getServiceCategoryIsNotNull() && voService.getServiceCategory().equals(category))
				{
					if(!isParentRowAdded)
					{
						row = form.grdDiscipline().getRows().newRow();
						row.setColDiscipline(category.getText());
						row.setExpanded(true);
						isParentRowAdded = true;
					}
					
					if(row != null)
					{
						grdDisciplineRow cRow = row.getRows().newRow();
						cRow.setColDiscipline(voService.getServiceName());
						cRow.setColServiceValue(voService);
						loadSecurtyLevels(cRow);	
					}
				}
			}
		}
	}

	private void loadSecurtyLevels(grdDisciplineRow cRow)
	{
		if(form.getLocalContext().getSecurityLevels() == null)
			return;
		
		cRow.getColOrderingSecurityLevel().clear();
		cRow.getColViewingSecurityLevel().clear();
		
		for(SecurityLevelLiteVo voSecurity : form.getLocalContext().getSecurityLevels())
		{
			cRow.getColOrderingSecurityLevel().newRow(voSecurity, voSecurity.getSecurityLevelDescription());
			cRow.getColViewingSecurityLevel().newRow(voSecurity, voSecurity.getSecurityLevelDescription());
		}
	}

	private void clearInstanceControls()
	{
		form.grdDiscipline().getRows().clear();
		form.cmbRoleDetail().setValue(null);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		//if records exist for the last selection search
		boolean recordSelected = form.getLocalContext().getRecordsExist();
		
		clearInstanceControls();
		if(recordSelected || form.getLocalContext().getLastSelectedRoleIsNotNull())
		{
			open();
			
			if(form.getLocalContext().getLastSelectedRoleIsNotNull())
				form.cmbRole().setValue(form.getLocalContext().getLastSelectedRole());
			
			search();
		}
		
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.cmbRole().setValue(null);
		form.getLocalContext().setRecordsExist(false);
		
		loadUnusedRolesIntoCombo();
		open();
		form.setMode(FormMode.EDIT);
	}

	private void loadUnusedRolesIntoCombo()
	{
		form.cmbRoleDetail().clear();
		
		AppRoleLiteVoCollection voCollRole = domain.listRolesNotUsedInRoleDisciplineSecurityLevel();
		for(AppRoleLiteVo voRole : voCollRole)
		{
			form.cmbRoleDetail().newRow(voRole, voRole.getName());
		}
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		RoleDisciplineSecurityLevelVoCollection voCollRoleSecurityLevel = populateDataFromScreen();
		
		String[] uiErrors = getUIValidationErrors(voCollRoleSecurityLevel);
		if(uiErrors != null)
		{
			engine.showErrors(uiErrors);
			return;
		}
		
		
		String[] arrErrors = voCollRoleSecurityLevel.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			domain.saveRoleDisciplineSecurity(voCollRoleSecurityLevel);
			//WDEV-9780 to force call to db on instantiation forms for this persistent Global Context
			form.getGlobalContext().OCRR.clearRoleDisciplineSecurityLevels();
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			search();
		}
		
		//for redisplay
		if(voCollRoleSecurityLevel != null && voCollRoleSecurityLevel.size() > 0)
			setLastSavedRoleIntoSearchCriteria(voCollRoleSecurityLevel.get(0).getRole());
		
		form.setMode(FormMode.VIEW);
		open();
		search();
	}

	private String[] getUIValidationErrors(RoleDisciplineSecurityLevelVoCollection voCollRoleSecurityLevel)
	{
		List<String> errors = new ArrayList<String>();
		
		if(form.cmbRoleDetail().getValue() == null)
			errors.add("'Role' is mandatory");
			
		if(voCollRoleSecurityLevel == null || voCollRoleSecurityLevel.size() == 0)
			errors.add("Nothing selected to save");
		
		for(RoleDisciplineSecurityLevelVo voRoleDisSec : voCollRoleSecurityLevel)
		{
			if(voRoleDisSec.getOrderingSecurityLevel() == null && voRoleDisSec.getViewingSecurityLevel() == null)
				errors.add("No 'Ordering Security Level' or 'Viewing Security Level' selected");
		}
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	private void setLastSavedRoleIntoSearchCriteria(AppRoleRefVo role)
	{
		if (role == null)
			throw new CodingRuntimeException("role cannot be null in method setLastSavedRoleIntoSearchCriteria");
		
		for(int i=0;i<form.cmbRole().getValues().size(); i++)
		{
			AppRoleLiteVo voAppRole = (AppRoleLiteVo) form.cmbRole().getValues().get(i);
			if(voAppRole.getID_AppRole().equals(role.getID_AppRole()))
			{
				form.cmbRole().setValue(voAppRole);
				form.getLocalContext().setLastSelectedRole(voAppRole);
				break;
			}
		}
	}

	private RoleDisciplineSecurityLevelVoCollection populateDataFromScreen()
	{
		//go through grid and getRow value (RoleDisciplineSecurityLevel) for each childrow
		//if has a value - populate the record with (mandatory) security level selection
		//if security level selected and value is null - create new record
		RoleDisciplineSecurityLevelVoCollection voCollRoleDispSecurity = new RoleDisciplineSecurityLevelVoCollection();
		
		for(int i=0;i<form.grdDiscipline().getRows().size();i++)
		{
			grdDisciplineRow pRow = form.grdDiscipline().getRows().get(i);
			for(int p=0; p<pRow.getRows().size(); p++)
			{
				grdDisciplineRow cRow = pRow.getRows().get(p);
				
				RoleDisciplineSecurityLevelVo voRoleDispSecurity = cRow.getValue();
				if(voRoleDispSecurity == null)
					voRoleDispSecurity = new RoleDisciplineSecurityLevelVo();
					
				//only create records if security level was selected or updating a record
				if(cRow.getColOrderingSecurityLevel().getValue() != null || cRow.getColViewingSecurityLevel().getValue() != null || voRoleDispSecurity.getID_RoleDisciplineSecurityLevelIsNotNull())
				{
					voRoleDispSecurity.setRole(form.cmbRoleDetail().getValue());
					voRoleDispSecurity.setOrderingSecurityLevel((SecurityLevelRefVo) cRow.getColOrderingSecurityLevel().getValue());
					voRoleDispSecurity.setViewingSecurityLevel((SecurityLevelRefVo) cRow.getColViewingSecurityLevel().getValue());
					voRoleDispSecurity.setService(cRow.getColServiceValue());
					voCollRoleDispSecurity.add(voRoleDispSecurity);
				}
			}
		}

		return voCollRoleDispSecurity;
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}

	@Override
	protected void onCmbRoleDetailValueChanged() throws PresentationLogicException
	{		
		updateControlState();
		if(form.cmbRoleDetail().getValue() == null)
			open();
	}

	@Override
	protected void onCmbRoleValueChanged() throws PresentationLogicException
	{
		if(form.cmbRole().getValue() != null)
			form.getLocalContext().setLastSelectedRole(form.cmbRole().getValue());
	}
}
