//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3937.27059)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.printmultipleresults;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.PrinterScope;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Image;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVoCollection;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.OrderedInvestigationStatusVo;
import ims.ocrr.vo.PathologyResultListShortVo;
import ims.ocrr.vo.PathologyResultListShortVoCollection;
import ims.ocrr.vo.PathologySpecimenLiteVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.OrderInvStatus;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getSelectedPrinter() == null)
		{
			engine.showMessage("No printer available! Results cannot be printed");
			return;
		}
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		if (urlQueryServer == "")
		{
			engine.showMessage("QUERY_SERVER_URL is not set! Results cannot be printed");
			return;
		}
		if (urlReportServer == "")
		{
			engine.showMessage("REPORT_SERVER_URL is not set! Results cannot be printed");
			return;
		}		
		
		OrderInvestigationRefVoCollection collID = form.getLocalContext().getOrderInvestigarionID();				
		if (collID == null || (collID != null && collID.size() == 0))
		{
			engine.showMessage("Please select results for print");
			return;
		}
		
		Object[] obj = domain.getSystemReportAndTemplate(new Integer(75));
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		
		int buildSuccessfully = 0;
		int buildFailed = 0;
		
		boolean success = false;		
		for (int i = 0; i < collID.size(); i++)
		{
			QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
			client.addSeed(new SeedValue("OrderInvestigation_id",  collID.get(i).getBoId(), Integer.class));			
			
			try
			{
				success = client.printReport((String)obj[0], (String)obj[1], urlReportServer, form.getLocalContext().getSelectedPrinter(), 1);
			} 
			catch (QueryBuilderClientException err)
			{
				System.out.println("Error creating report: " + err.getMessage());	
				buildFailed++;
				continue;
			}
			if(success)
				buildSuccessfully ++;
		}		
		
		String message = "";
		if(buildSuccessfully > 0)
		{
			message += "Successfully print " + buildSuccessfully + " report(s)\n";
		}
		
		if (buildFailed > 0)
		{
			message += "Failed print " + buildFailed + " report(s)";						
		}
		
		engine.showMessage(message, "Print Results Information", MessageButtons.OK, MessageIcon.INFORMATION);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL); 
	}
	
	private void initializeDynamicGrid()
	{
		form.dyngrdList().clear();		
		form.dyngrdList().setSelectable(true);		
		
		DynamicGridColumn ColDateTime = form.dyngrdList().getColumns().newColumn("Date/Time", true);
		ColDateTime.setWidth(114);	
		ColDateTime.setIdentifier(new String("DATE_TIME"));
		
		DynamicGridColumn ColDateTimeImage = form.dyngrdList().getColumns().newColumn("", true);
		ColDateTimeImage.setWidth(25);	
		ColDateTimeImage.setIdentifier(new String("DATE_TIME_IMAGE"));
		
		DynamicGridColumn ColTestName = form.dyngrdList().getColumns().newColumn("Investigation", true);
		ColTestName.setWidth(125);	
		ColTestName.setIdentifier(new String("INVESTIGATION"));
		
		DynamicGridColumn ColSpecimen = form.dyngrdList().getColumns().newColumn("Specimen", true);
		ColSpecimen.setWidth(65);	
		ColSpecimen.setIdentifier(new String("SPECIMEN"));
		
		DynamicGridColumn ColProvisonalFinal = form.dyngrdList().getColumns().newColumn("P/F", true);
		ColProvisonalFinal.setWidth(35);	
		ColProvisonalFinal.setIdentifier(new String("PROVISIONAL_FINAL"));
		
		DynamicGridColumn ColABN = form.dyngrdList().getColumns().newColumn("ABN", true);
		ColABN.setWidth(35);	
		ColABN.setIdentifier(new String("ABN"));
		
		DynamicGridColumn ColStatus = form.dyngrdList().getColumns().newColumn("Status", true);
		ColStatus.setWidth(42);	
		ColStatus.setIdentifier(new String("STATUS"));
		
		DynamicGridColumn ColDiscipline = form.dyngrdList().getColumns().newColumn("Discipline", true);
		ColDiscipline.setWidth(90);	
		ColDiscipline.setIdentifier(new String("DISCIPLINE"));
		
		DynamicGridColumn ColOrderingLocation = form.dyngrdList().getColumns().newColumn("Patient Location", true);
		ColOrderingLocation.setWidth(97);	
		ColOrderingLocation.setIdentifier(new String("ORDERING_LOCATION"));
		
		DynamicGridColumn ColClinician = form.dyngrdList().getColumns().newColumn("Resp. Clinician", true);
		ColClinician.setWidth(135);	
		ColClinician.setIdentifier(new String("CLINICIAN"));
		
		DynamicGridColumn ColSelectForPrint = form.dyngrdList().getColumns().newColumn("Print", true);
		ColSelectForPrint.setWidth(-1);	
		ColSelectForPrint.setIdentifier(new String("PRINT"));
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initializeDynamicGrid();
		//WDEV-16115
		form.ccPrinter().initialize(domain.getCurrentLocation(), PrinterScope.NEWRESULT);
		if (form.ccPrinter().getSelectedPrinter() == null)
		{
			form.ccPrinter().initialize(domain.getCurrentLocation(), PrinterScope.OCSORDER);
		}
		PathologyResultListShortVoCollection results = form.getGlobalContext().OCRR.getResultsForPrint();
		if (results == null)
			return;

		Integer nNewResUnseenDays = new Integer(ConfigFlag.DOM.OCS_NEWRES_UNSEEN_CUTOFF.getValue());
		Date dateUnseen = new Date().addDay(-1 * nNewResUnseenDays.intValue());

		for (int x = 0; x < results.size(); x++)
		{
			addResult(results.get(x), dateUnseen);
		}		
	}
	
	
	
	private DynamicGridColumn getCol(String identifier) 
	{
		return form.dyngrdList().getColumns().getByIdentifier(identifier);
	}
	
	private void addResult(PathologyResultListShortVo result, Date dateUnseen)
	{
		if (result == null || result.getSpecimen() == null)
			return;
				
		if (!hasResults(result))
			return;
				
		DynamicGridRow parentRow = createOrFindSpecimenGridRow(result);
		if (parentRow == null)
			return;

		DynamicGridRow row = null;
		if (parentRow.getCells().get(getCol("INVESTIGATION")) == null)
		{
			row = parentRow;
			
			DynamicGridColumn col = getCol("PRINT");
			if(col == null)	
				throw new DomainRuntimeException("No column for Identifier");
			DynamicGridCell colPrint = row.getCells().newCell(col, DynamicCellType.BOOL);
			colPrint.setAutoPostBack(true);
			colPrint.setReadOnly(false);
			
		}
		else
		{
			row = parentRow.getRows().newRow();
			row.setSelectable(false);			
		}

		OcsPathRadResultVo res = new OcsPathRadResultVo();
		res.setCategory(Category.PATHOLOGY);
		res.setOrderInvestigation(result);
		row.setValue(res);

		DynamicGridColumn col = getCol("INVESTIGATION");
		if(col == null)	
			throw new DomainRuntimeException("No column for Identifier");
		DynamicGridCell investigationCell = row.getCells().newCell(col, DynamicCellType.STRING);
		investigationCell.setReadOnly(true);
		// Test Name
		if (result.getInvestigationIsNotNull() && result.getInvestigation().getInvestigationIndexIsNotNull() && result.getInvestigation().getInvestigationIndex().getNameIsNotNull())
		{
			investigationCell.setValue(result.getInvestigation().getInvestigationIndex().getName());
		}
		
		col = getCol("ABN");
		if(col == null)	
			throw new DomainRuntimeException("No column for Identifier");
		DynamicGridCell abnCell = row.getCells().newCell(col, DynamicCellType.IMAGE);
		abnCell.setReadOnly(true);
		// ABN
		if (result.getResultDetails() != null && result.getResultDetails().getPathologyResultDetailsIsNotNull() && result.getResultDetails().getPathologyResultDetails().size() > 0 && result.getResultDetails().getPathologyResultDetails().get(0) != null)////WDEV-16232
		{
			if (result.getResultDetails().getPathologyResultDetails().get(0).getIsAbnormalIsNotNull() && result.getResultDetails().getPathologyResultDetails().get(0).getIsAbnormal().booleanValue())//WDEV-16232
			{
				abnCell.setValue(form.getImages().Core.CriticalError);
				abnCell.setTooltip("Abnormal Result");
			}
		}
		
		col = getCol("STATUS");
		if(col == null)	
			throw new DomainRuntimeException("No column for Identifier");
		DynamicGridCell statusCell = row.getCells().newCell(col, DynamicCellType.IMAGE);
		statusCell.setReadOnly(true);
		// Status
		if (result.getOrdInvCurrentStatusIsNotNull() && result.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull())
		{

			OrderInvStatus currStat = result.getOrdInvCurrentStatus().getOrdInvStatus();

			Image image = currStat.getImage();
			String szTooltip = generateStatusTooltip(result.getOrdInvCurrentStatus());

			if (result.getRepDateTimeIsNotNull() && dateUnseen != null)
			{
				if (currStat.equals(OrderInvStatus.NEW_RESULT) || currStat.equals(OrderInvStatus.UPDATED_RESULT))
				{
					if (result.getRepDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Unseen");
					}
				}
				else if (currStat.equals(OrderInvStatus.REVIEW))
				{
					if (result.getOrdInvCurrentStatus().getChangeDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Requires Attention");
					}
					else
						szTooltip = (szTooltip + "<br>" + OrderInvStatus.REVIEW.toString());
				}
			}
			statusCell.setValue(image);
			statusCell.setTooltip(szTooltip);

			row.setBackColor(parentRow.getBackColor());
		}		
	}
	
	private String generateStatusTooltip(OrderedInvestigationStatusVo ordInvCurrentStatus)
	{
		if (ordInvCurrentStatus != null && ordInvCurrentStatus.getOrdInvStatus() != null)
		{
			StringBuffer sb = new StringBuffer();
			sb.append("<b>Current status: </b>" + ordInvCurrentStatus.getOrdInvStatus().getText());

			if (ordInvCurrentStatus.getStatusReason() != null && ordInvCurrentStatus.getStatusReason().length() > 0 && ordInvCurrentStatus.getOrdInvStatus().equals(OrderInvStatus.CANCELLED))
				sb.append("<br><b>Current status reason: </b>" + ordInvCurrentStatus.getStatusReason());

			sb.append("<br><b>Date changed: </b>" + ordInvCurrentStatus.getChangeDateTime());
			sb.append("<br><b>Changed by: </b>" + (ordInvCurrentStatus.getChangeUserIsNotNull() ? ordInvCurrentStatus.getChangeUser().toString() : ""));

			return sb.toString();
		}
		
		return null;
	}
	
	private DynamicGridRow createOrFindSpecimenGridRow(PathologyResultListShortVo result)
	{
		if (result == null)
			return null;
	
		PathologySpecimenLiteVo specimen = result.getSpecimen().get(0);

		for (int x = 0; x < form.dyngrdList().getRows().size(); x++)
		{
			DynamicGridRow row = form.dyngrdList().getRows().get(x);
			PathologyResultListShortVo rowValue = (PathologyResultListShortVo) ((ims.ocrr.vo.OcsPathRadResultVo)row.getValue()).getOrderInvestigation();
			if (rowValue != null && rowValue.getSpecimen() != null && rowValue.getSpecimen().equals(specimen))
				return row;
		}
		
		DynamicGridRow row = form.dyngrdList().getRows().newRow();
		
		DynamicGridColumn col = getCol("SPECIMEN");
		if(col == null)	
			throw new DomainRuntimeException("No column for Identifier");
		DynamicGridCell specimenCell = row.getCells().newCell(col, DynamicCellType.STRING);
		specimenCell.setReadOnly(true);
		if (specimen.getSpecimenSource() == null)
		{			
			specimenCell.setValue("[No specimen source]");
		}
		else
		{
			specimenCell.setValue(specimen.getSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : ""));
			specimenCell.setTooltip(specimen.getSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : ""));
		}
		
		col = getCol("DATE_TIME_IMAGE");
		if(col == null)	
			throw new DomainRuntimeException("No column for Identifier");
		DynamicGridCell dateTimeImageCell = row.getCells().newCell(col, DynamicCellType.IMAGE);
		dateTimeImageCell.setReadOnly(true);
		if (result.getDisplayFlagIsNotNull())
		{
			dateTimeImageCell.setValue(result.getDisplayFlag().getImage());
			dateTimeImageCell.setTooltip(result.getDisplayFlag().getText());
		}
		
		col = getCol("DATE_TIME");
		if(col == null)	
			throw new DomainRuntimeException("No column for Identifier");
		DynamicGridCell dateTimeCell = row.getCells().newCell(col, DynamicCellType.STRING);
		dateTimeCell.setReadOnly(true);
		if (result.getDisplayDateTimeIsNotNull())
		{
			dateTimeCell.setValue(result.getDisplayDateTime().toString());
		}
		
		col = getCol("PROVISIONAL_FINAL");
		if(col == null)	
			throw new DomainRuntimeException("No column for Identifier");
		DynamicGridCell dateProvisionalFinal = row.getCells().newCell(col, DynamicCellType.STRING);		
		dateProvisionalFinal.setReadOnly(true);
		if (result.getResultStatusIsNotNull())
		{
			dateProvisionalFinal.setValue(result.getResultStatus().getText());
		}
		
		OcsPathRadResultVo res = new OcsPathRadResultVo();
		res.setCategory(Category.PATHOLOGY);
		res.setOrderInvestigation(result);
		res.setDescription(result.getInvestigationIsNotNull() && result.getInvestigation().getInvestigationIndexIsNotNull() ? result.getInvestigation().getInvestigationIndex().getName() : "<not set>");
		row.setValue(res);

		row.setExpanded(true);
		
		col = getCol("DISCIPLINE");
		if(col == null)	
			throw new DomainRuntimeException("No column for Identifier");
		DynamicGridCell colDiscipline = row.getCells().newCell(col, DynamicCellType.STRING);
		colDiscipline.setReadOnly(true);
		// Discipline
		if (result.getInvestigationIsNotNull() && result.getInvestigation().getProviderServiceIsNotNull() && result.getInvestigation().getProviderService().getLocationServiceIsNotNull() && result.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && result.getInvestigation().getProviderService().getLocationService().getService().getServiceNameIsNotNull())
		{
			colDiscipline.setValue(result.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
		}
		
		col = getCol("ORDERING_LOCATION");
		if(col == null)
			throw new DomainRuntimeException("No column for Identifier");		
		DynamicGridCell colOrderingLocation = row.getCells().newCell(col, DynamicCellType.STRING);
		colOrderingLocation.setReadOnly(true);
		// Ordering Location
		if (result.getOrderDetailsIsNotNull())
		{
			colOrderingLocation.setValue(result.getOrderDetails().getCorrectLocation());
			colOrderingLocation.setTooltip(result.getOrderDetails().getCorrectLocation());
		}		

		col = getCol("CLINICIAN");
		if(col == null) 		
			throw new DomainRuntimeException("No column for Identifier");		
		DynamicGridCell colClinician = row.getCells().newCell(col, DynamicCellType.STRING);
		colClinician.setReadOnly(true);
		if (result.getOrderDetailsIsNotNull())
		{
			colClinician.setValue(result.getOrderDetails().getCorrectClinician());			 
			colClinician.setTooltip(result.getOrderDetails().getCorrectClinician());
		}
								
		row.setBackColor((form.dyngrdList().getRows().size() % 2) == 0 ? Color.Beige : Color.Default);

		return row;
	}
	
	private boolean hasResults(PathologyResultListShortVo result)
	{		
		if (isResultedStatus(result.getOrdInvCurrentStatus().getOrdInvStatus()))
			return true;

		return false;
	}
	
	private boolean isResultedStatus(OrderInvStatus status)
	{
		if (status.equals(OrderInvStatus.NEW_RESULT) || status.equals(OrderInvStatus.CHECKED) || status.equals(OrderInvStatus.SEEN) 
				|| status.equals(OrderInvStatus.UPDATED_RESULT) || status.equals(OrderInvStatus.UNSEEN) 
				|| status.equals(OrderInvStatus.REVIEW)	|| status.equals(OrderInvStatus.COMPLETE)
				|| status.equals(OrderInvStatus.RESULTED))
		{
			return true;
		}
	
		return false;
	}
	
	@Override
	protected void onDyngrdListCellValueChanged(DynamicGridCell cell)
	{
		OrderInvestigationRefVoCollection collOrderInvestigatioIDs = form.getLocalContext().getOrderInvestigarionID();			
		if (collOrderInvestigatioIDs == null)
			collOrderInvestigatioIDs = new OrderInvestigationRefVoCollection();
		
		OrderInvestigationRefVo result = ((OcsPathRadResultVo)cell.getRow().getValue()).getOrderInvestigation();
		
		if (cell.getValue().equals(true))
		{
			collOrderInvestigatioIDs.add(result);
		}
		else
		{
			if (collOrderInvestigatioIDs.contains(result))			
				collOrderInvestigatioIDs.remove(result);
		}		
		
		form.getLocalContext().setOrderInvestigarionID(collOrderInvestigatioIDs);
	}

	@Override
	protected void onCcPrinterValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedPrinter(form.ccPrinter().getSelectedPrinter() != null ? form.ccPrinter().getSelectedPrinter().getIPrinterName() : null);
	}
}
