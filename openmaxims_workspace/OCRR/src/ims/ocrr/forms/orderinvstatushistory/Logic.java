//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.54 build 2714.21485)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.orderinvstatushistory;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVoCollection;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.OcsPathRadResultVoCollection;
import ims.ocrr.vo.OrderedInvestigationStatusVo;
import ims.ocrr.vo.OrderedInvestigationStatusVoCollection;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.OrderInvStatus;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
	}
	
	private void initialise()
	{
		loadOrderInvestigations(true);// 	WDEV-15894
		updateControlsState();// 	WDEV-15894
	}

	// 	WDEV-15894
	private void updateControlsState() 
	{
		form.btnReset().setVisible(engine.hasRight(AppRight.RESET_RESULT_STATUS_TO_NEW) && ConfigFlag.UI.STHK_MODE_RESULT_CHECK.getValue() && hasCheckedInvestigation());
	}

	private boolean hasCheckedInvestigation()
	{
		ArrayList<OcsPathRadResultVo> values = form.cmbInvestigation().getValues();
		
		if (values == null || values.size() == 0)
			return false;
		
		for (OcsPathRadResultVo item : values)
		{
			if (OrderInvStatus.CHECKED.equals(item.getCurrentInvestigationStatus()))
				return true;
		}

		return false;
	}

	private void loadOrderInvestigations(boolean defaultToFirst)// 	WDEV-15894
	{
		form.cmbInvestigation().clear();
		OcsPathRadResultVoCollection collResults = domain.refreshOcsPathRadResultVo(form.getGlobalContext().OCRR.getSelectedInvs());//WDEV-15894
		OcsPathRadResultVo item = null;
		if(collResults != null && collResults.size() > 0)
		{
			for(int i=0;i<collResults.size();i++)
			{
				item = collResults.get(i);
				form.cmbInvestigation().newRow(item, item.getDescription());				
			}
		}
		else
			throw new CodingRuntimeException("No Results passed to dialog");
		
		//default selection to the first one
		if(defaultToFirst)// 	WDEV-15894
		{
			form.cmbInvestigation().setValue(collResults.get(0));
			cmbInvestigationChanged();
		}
	}

	private void cmbInvestigationChanged()
	{
		if(form.cmbInvestigation().getValue() != null)
		{
			OcsPathRadResultVo item = form.cmbInvestigation().getValue();
			OrderedInvestigationStatusVoCollection collStatus = domain.listStatusHistory(item.getOrderInvestigation());
			collStatus.sort(SortOrder.DESCENDING);
			populateGridFromData(collStatus);
		}
		else
			form.grdHistory().getRows().clear();
	}

	private void populateGridFromData(OrderedInvestigationStatusVoCollection collStatus)
	{
		form.grdHistory().getRows().clear();
		for(int i=0;i<collStatus.size();i++)
		{
			OrderedInvestigationStatusVo status = collStatus.get(i);
			GenForm.grdHistoryRow row = form.grdHistory().getRows().newRow();
			if(status.getChangeDateTimeIsNotNull())
				row.setColDateTime(status.getChangeDateTime().toString());
			if(status.getProcessedDateTimeIsNotNull())
				row.setprocessedDateTime(status.getProcessedDateTime().toString());
			row.setColUser(status.getChangeUser());
			row.setColStatus(getStatusText( status.getOrdInvStatus()));
			if(status.getOrdInvStatus().equals(OrderInvStatus.CANCEL_REQUEST)){
				if(status.getStatusChangeReasonIsNotNull())
					row.setColReason(status.getStatusChangeReason().toString());
			}
			else
				row.setColReason(status.getStatusReason());
			row.setTooltipForColReason(status.getStatusReason());
		}
	}

	private String getStatusText(OrderInvStatus ordInvStatus)
	{
		if(ordInvStatus == null || form.cmbInvestigation().getValue() == null)
			return null;
		OcsPathRadResultVo item = form.cmbInvestigation().getValue();
		
		if(ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK") || ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("UKSH")) //WDEV-11881
		{
			if(item.getCategoryIsNotNull())
			{
				if(item.getCategory().equals(Category.CLINICALIMAGING))
				{
					if(ordInvStatus.equals(ordInvStatus.ORDERED))
					{
						return "Ready";
					}
				}
				else
					ordInvStatus.getText();
			}
		}
		return ordInvStatus.getText();
	}

	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	protected void onCmbInvestigationValueChanged() throws PresentationLogicException
	{
		cmbInvestigationChanged();
		updateControlsState();// 	WDEV-15894
	}

	// 	WDEV-15894
	@Override
	protected void onBtnResetClick() throws PresentationLogicException 
	{
		resetResultStatusToNew(form.cmbInvestigation().getValue());
	}

	// 	WDEV-15894
	private void resetResultStatusToNew(OcsPathRadResultVo selectedInv) 
	{
		ArrayList<OcsPathRadResultVo> values = form.cmbInvestigation().getValues();
		
		if (values == null || values.size() == 0)
			return;

		OrderInvestigationRefVoCollection investigations = new OrderInvestigationRefVoCollection();
		
		for (OcsPathRadResultVo item : values)
		{
			if (item.getOrderInvestigation() != null && OrderInvStatus.CHECKED.equals(item.getCurrentInvestigationStatus()))
				investigations.add(item.getOrderInvestigation());
		}
		
		try 
		{
			domain.resetResultStatusToNew(investigations);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		loadOrderInvestigations(false);
		
		form.cmbInvestigation().setValue(selectedInv);
		cmbInvestigationChanged();
		
		updateControlsState();
	}
}
