//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.45 build 2391.24488)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.servicequestions;

import java.util.ArrayList;

import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.QuestionInformationShortVo;
import ims.core.vo.QuestionInformationShortVoCollection;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.QuestionType;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.ServiceCategoryCollection;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.configuration.vo.ServiceQuestionRefVo;
import ims.ocrr.forms.servicequestions.GenForm.grdDetailsRow;
import ims.ocrr.vo.ServiceQuestionShortVo;
import ims.ocrr.vo.ServiceQuestionShortVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (result.equals(DialogResult.OK))
		{
			QuestionInformationShortVoCollection voColl = form.getGlobalContext().Admin.getSelectedQuestions();
			for (int i = 0; voColl != null && i < voColl.size(); i++)
			{
				QuestionInformationShortVo voQuestionInformationShort = voColl.get(i);
				GenForm.grdDetailsRow row = getGridRow(voQuestionInformationShort);
				ServiceQuestionShortVo voServiceQuestion = row.getValue();
				if (voServiceQuestion == null)
					voServiceQuestion = new ServiceQuestionShortVo();
				voServiceQuestion.setQuestionInformation(voQuestionInformationShort);
				voServiceQuestion.setIsMandatory(new Boolean(row.getcolMandatory()));

				setServiceQuestion(row, voServiceQuestion);
			}
		}
		else
			form.setMode(FormMode.VIEW);
	}

	protected void onFormModeChanged()
	{
		enableContextMenu();
		form.qmbService().setEnabled(form.getMode().equals(FormMode.VIEW));
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			form.setMode(FormMode.VIEW);
			open();
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
	}

	protected void onGrdDetailsSelectionChanged() throws PresentationLogicException
	{
		enableContextMenu();
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
				addQuestion();
			break;

			case GenForm.ContextMenus.GenericGrid.Update :
				editQuestion();
			break;
			
			case GenForm.ContextMenus.GenericGrid.Remove :
				removeQuestion();
			break;
		}
	}

	private void editQuestion()
	{
		if (form.qmbService().getValue() == null)//WDEV-15160
		{
			engine.showMessage("Please select a Service");
			form.qmbService().setFocus();
			return;
		}
		
		form.setMode(FormMode.EDIT);
	}

	// Private Methods
	private void populateListControl(ServiceQuestionShortVoCollection voCollServiceQuestions)
	{
		for (int j = 0; voCollServiceQuestions != null && j < voCollServiceQuestions.size(); j++)
		{
			ServiceQuestionShortVo voServiceQuestion = voCollServiceQuestions.get(j);
			GenForm.grdDetailsRow row = form.grdDetails().getRows().newRow();
			setServiceQuestion(row, voServiceQuestion);
		}
	}

	/**
	 * @param row
	 * @param voServiceQuestionShortVo
	 */
	private void setServiceQuestion(GenForm.grdDetailsRow row, ServiceQuestionShortVo voServiceQuestion)
	{
		if (voServiceQuestion.getQuestionInformationIsNotNull())
		{
			row.setcolQuestion(voServiceQuestion.getQuestionInformation().getText());
			row.setcolAskForInvestigation(voServiceQuestion.getAskForInvestigationsIsNotNull()?voServiceQuestion.getAskForInvestigations().booleanValue():false);
			row.setcolMandatory(voServiceQuestion.getIsMandatoryIsNotNull() ? voServiceQuestion.getIsMandatory().booleanValue() : false);
			row.setTooltip(voServiceQuestion.getQuestionInformation().getTooltip());
		}
		voServiceQuestion.setID_ServiceQuestion(null);
		row.setValue(voServiceQuestion);
	}

	private void initialise()
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add Service Questions");
		form.getContextMenus().getGenericGridUpdateItem().setText("Configure Service Questions");
		form.setMode(FormMode.VIEW);
	}

	private void open()
	{
		clearInstanceControls();

		ServiceRefVo service = form.qmbService().getValue();
		if (service != null)
		{
			ServiceQuestionShortVoCollection voCollServiceQuestions = domain.listServiceQuestions(service);
			populateListControl(voCollServiceQuestions);
		}
		enableContextMenu();
	}

	private boolean save()
	{
		ServiceQuestionShortVoCollection voCollServiceQuestions = populateInstancesData();
		String[] error = null;
		for(ServiceQuestionShortVo item : voCollServiceQuestions)
		{
			if (item.getIsMandatory())
			{
				boolean isQuestion =item.getIQuestionTypeQuestion().getIsQuestion(); 
				
				if(!isQuestion)
				{					
					ArrayList<String> err = new ArrayList<String>();					
					err.add("An Information Question can't be set as Mandatory");					
					error = new String[err.size()];
					err.toArray(error);
				}
			}
		}
		
		String[] errors = voCollServiceQuestions.validate(error);

		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveServiceQuestions(voCollServiceQuestions, form.qmbService().getValue());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}

		return true;
	}

	private ServiceQuestionShortVoCollection populateInstancesData()
	{
		ServiceQuestionShortVoCollection voCollServiceQuestions = new ServiceQuestionShortVoCollection();

		for (int i = 0; i < form.grdDetails().getRows().size(); i++)
		{
			ServiceQuestionShortVo voServiceQShort = form.grdDetails().getRows().get(i).getValue();
			voServiceQShort.setService(form.qmbService().getValue());
			voServiceQShort.setAskForInvestigations(form.grdDetails().getRows().get(i).getcolAskForInvestigation()?Boolean.TRUE:Boolean.FALSE);
			voServiceQShort.setIsMandatory(new Boolean(form.grdDetails().getRows().get(i).getcolMandatory()));
			voCollServiceQuestions.add(voServiceQShort);
		}

		return voCollServiceQuestions;
	}

	private void removeQuestion()
	{
		if (form.qmbService().getValue() == null)//WDEV-15160
		{
			engine.showMessage("Please select a Service");
			form.qmbService().setFocus();
			return;
		}
		
		form.grdDetails().removeSelectedRow();
		form.setMode(FormMode.EDIT);
		enableContextMenu();
	}

	private void addQuestion()
	{
		if (form.qmbService().getValue() == null)
		{
			engine.showMessage("Please select a Service");
			form.qmbService().setFocus();
			return;
		}
		form.getGlobalContext().Core.setQuestionType(QuestionType.PRIMARY);
		form.getGlobalContext().Core.setQuestionFormMode(null);
		engine.open(form.getForms().Core.QuestionSelectNew);
		form.setMode(FormMode.EDIT);
	}

	private void clearInstanceControls()
	{
		form.grdDetails().getRows().clear();
	}

	private void enableContextMenu()
	{
		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		boolean serviceSelected = form.qmbService().getValue() != null;
		boolean recordsSaved = form.grdDetails().getRows().size() > 0;
		form.getContextMenus().getGenericGridAddItem().setVisible(serviceSelected && viewMode);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(form.grdDetails().getSelectedRow() != null);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(serviceSelected && recordsSaved && viewMode);
	}

	private grdDetailsRow getGridRow(QuestionInformationShortVo voQInfoShort)
	{
		// Check the existing questions
		ServiceQuestionShortVo voServiceQuestionShort = null;
		for (int i = 0; i < form.grdDetails().getRows().size(); i++)
		{
			voServiceQuestionShort = form.grdDetails().getRows().get(i).getValue();
			if (voServiceQuestionShort != null && voServiceQuestionShort.getQuestionInformationIsNotNull() && voServiceQuestionShort.getQuestionInformation().equals(voQInfoShort))
				return form.grdDetails().getRows().get(i);

		}

		// Set the value
		voServiceQuestionShort = new ServiceQuestionShortVo();
		voServiceQuestionShort.setQuestionInformation(voQInfoShort);
		GenForm.grdDetailsRow row = form.grdDetails().getRows().newRow();
		row.setValue(voServiceQuestionShort);

		return row;
	}

	protected void onQmbServiceValueChanged() throws PresentationLogicException 
	{
		open();
	}

	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException 
	{
		form.qmbService().clear();

		ServiceCategoryCollection categories = new ServiceCategoryCollection();
		categories.add(ServiceCategory.PATHOLOGY_DISCIPLINE);
		categories.add(ServiceCategory.RADIOLOGY_MODALITY);
		
		//WDEV-2798 - search should filter the Services having the Categories as "Pathology Discipline" and Radiology "Modality"
		ServiceLiteVoCollection voCollService = domain.listActiveServiceLiteByNameAndCategories(value, categories);
		if (voCollService != null && voCollService.size() > 0)
		{
			for (int i = 0; i < voCollService.size(); i++)
			{
				form.qmbService().newRow(voCollService.get(i), voCollService.get(i).getServiceName().toString());
			}
			if (voCollService.size() == 1)
			{
				form.qmbService().setValue(voCollService.get(0));
				open();
			}
			else if (voCollService.size() > 1)
				form.qmbService().showOpened();
		}
		else
		{
			engine.showMessage("No matching records found");
			clearInstanceControls();
		}
	}
}
