//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3324.26668)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.appointmentoutcomedialog;

import ims.admin.vo.AppointmentOutcomeReasonVo;
import ims.admin.vo.AppointmentOutcomeReasonVoCollection;
import ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo;
import ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVoCollection;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.clinical.vo.PatientDiagnosisOpNotesVo;
import ims.clinical.vo.PatientDiagnosisOpNotesVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.forms.appointmentoutcomedialog.GenForm.grdDiagnosisRow;
import ims.scheduling.forms.appointmentoutcomedialog.GenForm.grdProceduresRow;
import ims.scheduling.vo.AppointmentOutcomeActionVo;
import ims.scheduling.vo.AppointmentOutcomeActionVoCollection;
import ims.scheduling.vo.BookingAppointmentOutcomeVo;
import ims.scheduling.vo.FutureAppointmentDetailsVo;
import ims.scheduling.vo.lookups.AppointmentAction;
import ims.scheduling.vo.lookups.ApptOutcome;
import ims.scheduling.vo.lookups.OutcomeAction;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise(args);
		open();
	}
	
	private void initialise(Object[] args)
	{
		if(args != null && args.length > 0 && args[0] instanceof FormMode)
		{
			form.getLocalContext().setFormMode((FormMode) args[0]);
		}
		
		if(form.getGlobalContext().RefMan.getCatsReferral() == null)
		{
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));
		}
		
		if(form.getGlobalContext().Core.getCurrentCareContext() == null)
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));
		}
		
		loadStatusCombo();
		
		Boolean isCurrentClockActive = domain.isCurrentPathwayClockActive(form.getGlobalContext().Scheduling.getBookingAppointmentRef());
		
		if(Boolean.TRUE.equals(isCurrentClockActive))
		{
			form.cmbOutcome().removeRow(ApptOutcome.DECISIONTREATACTIVEMONITORING);
		}
		
		//WDEV-18083
		form.getGlobalContext().RefMan.setPatientElectiveList(null);
		
		form.btnWaitingListAdd().setImage(form.getImages().RefMan.AddNow);
		form.btnWaitingListAdd().setText("Add Now");		
		form.btnWaitingListAddLater().setImage(form.getImages().RefMan.AddLater);
		form.btnWaitingListAddLater().setText("Add Later");
		
		form.btnBookedListAddNow().setImage(form.getImages().RefMan.AddNow);
		form.btnBookedListAddNow().setText("Add Now");
		form.btnBookedListAddLater().setImage(form.getImages().RefMan.AddLater);
		form.btnBookedListAddLater().setText("Add Later");
		
		form.btnPlannedListAddNow().setImage(form.getImages().RefMan.AddNow);
		form.btnPlannedListAddNow().setText("Add Now");
		form.btnPlannedListAddLater().setImage(form.getImages().RefMan.AddLater);
		form.btnPlannedListAddLater().setText("Add Later");
		
		form.btnFutureApptAddNow().setImage(form.getImages().RefMan.AddNow);
		form.btnFutureApptAddNow().setText("Add Now");
		form.btnFutureApptAddLater().setImage(form.getImages().RefMan.AddLater);
		form.btnFutureApptAddLater().setText("Add Later");
		
		form.btnOnwardReferral().setImage(form.getImages().RefMan.AddNow);
		form.btnOnwardReferral().setText("Add Now");
		
		form.btnTransferToProvider().setImage(form.getImages().RefMan.AddNow);
		form.btnTransferToProvider().setText("Add Now");
	}
	
	private void loadStatusCombo()
	{
		//form.cmbStatus().newRow(Status_Reason.SEEN, Status_Reason.SEEN.getText());
		//WDEV-8921 cancel removed for the moment
		//form.cmbStatus().newRow(Status_Reason.CANCELLED, Status_Reason.CANCELLED.getText());
	}

	private boolean save()
	{
		BookingAppointmentOutcomeVo voOutcome = populateDataFromScreen(form.getLocalContext().getAppointment());
		
		//WDEV-18083
		if (form.getGlobalContext().RefMan.getPatientElectiveList()!=null)
		{
			voOutcome.setHasElectiveList(true);
		}
		
		String[] errors = voOutcome.validate();
		if(errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{	
			//WDEV-18553 - previous form parameter removed from domain interface method
			domain.saveBookingAppointment(voOutcome,form.getGlobalContext().RefMan.getPatientElectiveList(), ((form.chkFirstDifinitiveTreatment().getValue() && form.getLocalContext().getAppointmentOutcomeConfig() != null) ? form.getLocalContext().getAppointmentOutcomeConfig().getFirstDefinitiveTreatmentEvent() : null));//WDEV-18083
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}
	
	private BookingAppointmentOutcomeVo populateDataFromScreen(ims.scheduling.vo.BookingAppointmentOutcomeVo selectedAppointment)
	{
		if(selectedAppointment == null)
			return null;
		
		selectedAppointment = (BookingAppointmentOutcomeVo) selectedAppointment.clone();
		
		selectedAppointment.setOutcome(form.cmbOutcome().getValue());
		selectedAppointment.setOutcomeReason(form.cmbOutcomeReason().getValue());
		selectedAppointment.setWasFirstDefinitiveTreatment(form.chkFirstDifinitiveTreatment().getValue());
		selectedAppointment.setOutpatientDiagnoses(getPatientDiagnosis());
		selectedAppointment.setOutpatientProcedures(getPatientProcedures());
		selectedAppointment.setOutcomeComments(form.txtComments().getValue());
		
		return selectedAppointment;
	}
	
	private PatientProcedureForAppointmentOutcomeVoCollection getPatientProcedures()
	{
		if(form.grdProcedures().getRows().size() == 0)
			return null;
		
		PatientProcedureForAppointmentOutcomeVoCollection procedures = new PatientProcedureForAppointmentOutcomeVoCollection();
		
		for(int i=0; i<form.grdProcedures().getRows().size(); i++)
		{
			procedures.add(form.grdProcedures().getRows().get(i).getValue());
		}
		
		return procedures;
	}
	
	private PatientDiagnosisOpNotesVoCollection getPatientDiagnosis()
	{
		if(form.grdDiagnosis().getRows().size() == 0)
			return null;
		
		PatientDiagnosisOpNotesVoCollection diagnosis = new PatientDiagnosisOpNotesVoCollection();
		
		for(int i=0; i<form.grdDiagnosis().getRows().size(); i++)
		{
			diagnosis.add(form.grdDiagnosis().getRows().get(i).getValue());
		}
		
		return diagnosis;
	}

	public void open() //WDEV-18083
	{
		clearScreen();
		
		form.getLocalContext().setAppointment(domain.getBookingAppointment(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));
		form.getLocalContext().setWasFutureAppointmentsButtonsPressed(wasFutureAppointmentsButtonsPressed());
		if(form.getLocalContext().getAppointment() != null)
		{
			form.getLocalContext().setAppointmentOutcomeConfig(domain.getAppointmentOutcomeConfigByApptOutcomeLookup(form.getLocalContext().getAppointment().getOutcome()));
		}
		
		populateScreenFromData(form.getLocalContext().getAppointment());
		form.setMode(form.getLocalContext().getFormMode() != null ? form.getLocalContext().getFormMode() : FormMode.EDIT);
	}
	
	private Boolean wasFutureAppointmentsButtonsPressed()
	{
		if(form.getLocalContext().getAppointment() == null || form.getLocalContext().getAppointment().getOutcomeActions() == null)
			return false;
		
		for(AppointmentOutcomeActionVo action : form.getLocalContext().getAppointment().getOutcomeActions())
		{
			if(action == null)
				continue;
			
			if(AppointmentAction.BOOK_APPT_ACTION.equals(action.getAppointmentAction()))
				return true;
		}
		
		return false;
	}

	private void populateScreenFromData(ims.scheduling.vo.BookingAppointmentOutcomeVo selectedAppointment)
	{
		clearScreen();
		
		if(selectedAppointment == null)
			return;
		
		form.lblApptStatusText().setValue(selectedAppointment.getApptStatus() != null ? selectedAppointment.getApptStatus().getText() : null);
		form.cmbOutcome().setValue(selectedAppointment.getOutcome());
		
		initializeAppointmentOutcomeConfigControls();
		
		form.chkFirstDifinitiveTreatment().setValue(selectedAppointment.getWasFirstDefinitiveTreatment());
		form.cmbOutcomeReason().setValue(selectedAppointment.getOutcomeReason());
		
		populateDiagnosisGrid(selectedAppointment.getOutpatientDiagnoses());
		populateProcedureGrid(selectedAppointment.getOutpatientProcedures());
		
		form.txtComments().setValue(selectedAppointment.getOutcomeComments());
	}
	
	private void clearScreen()
	{
		form.lblApptStatusText().setValue(null);
		form.cmbOutcome().setValue(null);
		form.cmbOutcomeReason().setValue(null);
		form.chkFirstDifinitiveTreatment().setValue(null);
		
		form.grdProcedures().getRows().clear();
		form.grdDiagnosis().getRows().clear();
		
		form.txtComments().setValue(null);
	}
	
	private void populateProcedureGrid(PatientProcedureForAppointmentOutcomeVoCollection procedures)
	{
		form.grdProcedures().getRows().clear();
		
		if(procedures == null)
			return;
		
		for(PatientProcedureForAppointmentOutcomeVo proc : procedures)
		{
			addPatientProcedureRow(proc, null);
		}
	}
	
	private void addPatientProcedureRow(PatientProcedureForAppointmentOutcomeVo patientProcedure, grdProceduresRow row)
	{
		if(patientProcedure == null)
			return;
		
		if(row == null)
			row = form.grdProcedures().getRows().newRow();
		
		row.setColDate(patientProcedure.getProcDate() != null ? patientProcedure.getProcDate().toDate() : null);
		row.setColProcedureName(patientProcedure.getProcedure() != null ? patientProcedure.getProcedure().getProcedureName() : patientProcedure.getProcedureDescription());
		row.setColLaterality(patientProcedure.getProcLaterality() != null ? patientProcedure.getProcLaterality().getText() : null);
		row.setColSite(patientProcedure.getSiteText());
		row.setColPerformedBy(patientProcedure.getPeformedBy() !=null ? patientProcedure.getPeformedBy().getIHcpName() : null);
		row.setColPrimary(Boolean.TRUE.equals(patientProcedure.getIsPrimary()));
		
		row.setValue(patientProcedure);
	}

	private void populateDiagnosisGrid(PatientDiagnosisOpNotesVoCollection diagnosis)
	{
		form.grdDiagnosis().getRows().clear();
		
		if(diagnosis == null)
			return;
		
		for(PatientDiagnosisOpNotesVo diag : diagnosis)
		{
			addPatientDiagnosisRow(diag, null);
		}
	}
	
	private void addPatientDiagnosisRow(PatientDiagnosisOpNotesVo patientDiagnosis, grdDiagnosisRow row)
	{
		if(patientDiagnosis == null)
			return;
		
		if(row == null)
			row = form.grdDiagnosis().getRows().newRow();
		
		row.setColDiagnosis(patientDiagnosis.getDiagnosisDescription());
		row.setValue(patientDiagnosis);
	}

	//WDEV-18083
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		//WDEV-18223
		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getForms().RefMan.NewElectiveListTCIErodDialog.equals(formName))//WDEV-18345
		{
			if (result.equals(DialogResult.OK) )
			{
				if(form.getGlobalContext().RefMan.getPatientElectiveList() == null)
					return;
				
				if(ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getGlobalContext().RefMan.getPatientElectiveList().getElectiveAdmissionType()))
				{
					addAction(AppointmentAction.WAITING_LIST_ACTION, OutcomeAction.DONE_NOW, null);
				}
				else if(ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getGlobalContext().RefMan.getPatientElectiveList().getElectiveAdmissionType()))
				{
					addAction(AppointmentAction.PLANNED_LIST_ACTION, OutcomeAction.DONE_NOW, null);
				}
				else if(ElectiveAdmissionType.BOOKED_TYPE12.equals(form.getGlobalContext().RefMan.getPatientElectiveList().getElectiveAdmissionType()))
				{
					addAction(AppointmentAction.BOOKED_LIST_ACTION, OutcomeAction.DONE_NOW, null);
				}
			}
			else if (result.equals(DialogResult.CANCEL) && form.getLocalContext().getAppointment()==null)
			{
				form.getGlobalContext().RefMan.setPatientElectiveList(null);
			}
			
		}
		else if(form.getForms().RefMan.AppointmentOutcomeProcedureDialog.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				if(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome() != null && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome().getIsPrimary()))
				{
					uncheckPreviousPrimary();
				}
				
				if(Boolean.TRUE.equals(form.getLocalContext().getEditProcedure()))
				{
					addPatientProcedureRow(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome(), form.grdProcedures().getSelectedRow());
				}
				else
				{
					addPatientProcedureRow(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome(), null);
				}
			}
		}
		else if(form.getForms().Clinical.PatientDiagnosisDialog.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				if(Boolean.TRUE.equals(form.getLocalContext().getEditDiagnosis()))
				{
					addPatientDiagnosisRow(form.getGlobalContext().Clinical.getSelectedPatientDiagnosisOPNotes(), form.grdDiagnosis().getSelectedRow());
				}
				else
				{
					addPatientDiagnosisRow(form.getGlobalContext().Clinical.getSelectedPatientDiagnosisOPNotes(), null);
				}
			}
		}
		else if(form.getForms().RefMan.AppointmentOutcomeDiagnosisSelectionDialog.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				addSelectedPatientDiagnosis();
			}
		}
		//WDEV-18517
		else if(form.getForms().RefMan.BookAppointmentDialog.equals(formName) && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getAppointmentSaved()))
		{
			addAction(AppointmentAction.BOOK_APPT_ACTION, OutcomeAction.DONE_NOW, null);
		}
		
		else if(form.getForms().Scheduling.FutureAppointmentDetails.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				form.getLocalContext().setWasFutureAppointmentsButtonsPressed(true);
				addAction(AppointmentAction.BOOK_APPT_ACTION, OutcomeAction.DO_LATER, form.getGlobalContext().Scheduling.getFutureAppointmentDetails());
			}
		}
		
		updateControlsState();
	}
	
	private void addSelectedPatientDiagnosis()
	{
		if(form.getGlobalContext().RefMan.getSelectedDiagnosisApptOutcomeList() == null)
			return;
		
		for(PatientDiagnosisOpNotesVo diagnosis : form.getGlobalContext().RefMan.getSelectedDiagnosisApptOutcomeList())
		{
			if(form.grdDiagnosis().getRowByValue(diagnosis) ==  null)
				addPatientDiagnosisRow(diagnosis, null);
		}
		
		if(form.grdDiagnosis().getRows().size() > 0)
		{
    		for(int i=form.grdDiagnosis().getRows().size() - 1; i>=0; i--)
    		{
    			if(form.grdDiagnosis().getRows().get(i).getValue() == null || form.grdDiagnosis().getRows().get(i).getValue().getID_PatientDiagnosis() == null)
    				continue;
    			
    			if(!form.getGlobalContext().RefMan.getSelectedDiagnosisApptOutcomeList().contains(form.grdDiagnosis().getRows().get(i).getValue()))
    				form.grdDiagnosis().getRows().remove(i);
    		}
		}
	}

	private void uncheckPreviousPrimary()
	{
		for(int i=0; i<form.grdProcedures().getRows().size(); i++)
		{
			form.grdProcedures().getRows().get(i).getValue().setIsPrimary(null);
			form.grdProcedures().getRows().get(i).setColPrimary(false);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeProcedureMenu.ADD:
				addProcedure();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeProcedureMenu.EDIT:
				editProcedure();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeDiagnosisMenu.SELECT:
				selectDiagnosis();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeDiagnosisMenu.ADD:
				addDiagnosis();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeDiagnosisMenu.EDIT:
				editDiagnosis();
			break;
		}
	}
	
	private void editDiagnosis()
	{
		form.getLocalContext().setEditDiagnosis(true);
		
		form.getGlobalContext().Clinical.setSelectedPatientDiagnosisOPNotes(form.grdDiagnosis().getValue());
		
		engine.open(form.getForms().Clinical.PatientDiagnosisDialog);
	}

	private void addDiagnosis()
	{
		form.getLocalContext().setEditDiagnosis(false);
		form.getGlobalContext().Clinical.setSelectedPatientDiagnosisOPNotes(null);
		engine.open(form.getForms().Clinical.PatientDiagnosisDialog);
	}

	private void selectDiagnosis()
	{
		form.getGlobalContext().RefMan.setSelectedDiagnosisApptOutcomeList(getPatientDiagnosisWithIds());
		engine.open(form.getForms().RefMan.AppointmentOutcomeDiagnosisSelectionDialog);
	}

	private PatientDiagnosisOpNotesVoCollection getPatientDiagnosisWithIds()
	{
		if(form.grdDiagnosis().getRows().size() == 0)
			return null;
		
		PatientDiagnosisOpNotesVoCollection diagnosis = new PatientDiagnosisOpNotesVoCollection();
		
		for(int i=0; i<form.grdDiagnosis().getRows().size(); i++)
		{
			if(form.grdDiagnosis().getRows().get(i).getValue() == null || form.grdDiagnosis().getRows().get(i).getValue().getID_PatientDiagnosis() == null)
				continue;
			
			diagnosis.add(form.grdDiagnosis().getRows().get(i).getValue());
		}
		
		return diagnosis;
	}

	private void editProcedure()
	{
		form.getLocalContext().setEditProcedure(true);
		
		form.getGlobalContext().RefMan.setPatientProcedureForAppointmentOutcome(form.grdProcedures().getValue());
		
		Specialty specialty = null;
		
		if(form.getLocalContext().getAppointment() != null && form.getLocalContext().getAppointment().getSession() != null && form.getLocalContext().getAppointment().getSession().getService() != null)
		{
			specialty = form.getLocalContext().getAppointment().getSession().getService().getSpecialty();
		}
		
		engine.open(form.getForms().RefMan.AppointmentOutcomeProcedureDialog, new Object[] {specialty, form.getLocalContext().getAppointment().getSeenBy(), form.getLocalContext().getAppointment().getAppointmentDate()});
	}
	
	private void addProcedure()
	{
		form.getLocalContext().setEditProcedure(false);
		
		form.getGlobalContext().RefMan.setPatientProcedureForAppointmentOutcome(null);
		
		Specialty specialty = null;
		
		if(form.getLocalContext().getAppointment() != null && form.getLocalContext().getAppointment().getSession() != null && form.getLocalContext().getAppointment().getSession().getService() != null)
		{
			specialty = form.getLocalContext().getAppointment().getSession().getService().getSpecialty();
		}
		
		engine.open(form.getForms().RefMan.AppointmentOutcomeProcedureDialog, new Object[] {specialty, form.getLocalContext().getAppointment().getSeenBy(), form.getLocalContext().getAppointment().getAppointmentDate()});
	}
	
	private void updateControlsState()
	{
		form.getContextMenus().RefMan.getAppointmentOutcomeProcedureMenuADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().RefMan.getAppointmentOutcomeProcedureMenuEDITItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdProcedures().getValue() != null);
		
		form.getContextMenus().RefMan.getAppointmentOutcomeDiagnosisMenuSELECTItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().RefMan.getAppointmentOutcomeDiagnosisMenuADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().RefMan.getAppointmentOutcomeDiagnosisMenuEDITItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdDiagnosis().getValue() != null);
		
		form.lblOutcomeReason().setVisible(form.getLocalContext().getAppointmentOutcomeConfig() != null);
		form.cmbOutcomeReason().setVisible(form.getLocalContext().getAppointmentOutcomeConfig() != null);
		form.cmbOutcomeReason().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.chkFirstDifinitiveTreatment().setVisible(form.getLocalContext().getAppointmentOutcomeConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getShowFirstDefinitiveTreatment()));
		form.chkFirstDifinitiveTreatment().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		boolean enabledWaitingList = ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getAppointmentOutcomeConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanAddtoWaitingList());
		form.btnWaitingListAdd().setEnabled(enabledWaitingList);
		form.btnWaitingListAddLater().setEnabled(enabledWaitingList);
		
		boolean enabledBookedList = ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getAppointmentOutcomeConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanAddtoBookedList());
		form.btnBookedListAddNow().setEnabled(enabledBookedList);
		form.btnBookedListAddLater().setEnabled(enabledBookedList);
		
		boolean enabledPlannedList = ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getAppointmentOutcomeConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanAddtoPlannedList());
		form.btnPlannedListAddNow().setEnabled(enabledPlannedList);
		form.btnPlannedListAddLater().setEnabled(enabledPlannedList);
		
		boolean enabledFutureAppointment = !Boolean.TRUE.equals(form.getLocalContext().getWasFutureAppointmentsButtonsPressed()) && !Boolean.TRUE.equals(form.getGlobalContext().RefMan.getAppointmentSaved()) && FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getAppointmentOutcomeConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanMakeAppointment());
		form.btnFutureApptAddNow().setEnabled(enabledFutureAppointment);
		form.btnFutureApptAddLater().setEnabled(enabledFutureAppointment);
		
		boolean enabledOnwardReferral = FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getAppointmentOutcomeConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanMakeOnwardReferral());
		form.btnOnwardReferral().setEnabled(enabledOnwardReferral);
		
		boolean enabledTransferToOtherProvider = FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getAppointmentOutcomeConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanTransfer());
		form.btnTransferToProvider().setEnabled(enabledTransferToOtherProvider);
	}

	@Override
	protected void onGrdDiagnosisSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onCmbOutcomeValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setAppointmentOutcomeConfig(domain.getAppointmentOutcomeConfigByApptOutcomeLookup(form.cmbOutcome().getValue()));
		
		initializeAppointmentOutcomeConfigControls();
		
		updateControlsState();
	}
	
	private void initializeAppointmentOutcomeConfigControls()
	{
		if(form.getLocalContext().getAppointmentOutcomeConfig() == null)
			return;
		
		bindAppointmentOutcomeCombo(form.getLocalContext().getAppointmentOutcomeConfig().getAppointmentOutcomeReasons());
	}

	private void bindAppointmentOutcomeCombo(AppointmentOutcomeReasonVoCollection appointmentOutcomeReasons)
	{
		form.cmbOutcomeReason().clear();
		
		if(appointmentOutcomeReasons == null)
			return;
		
		for(AppointmentOutcomeReasonVo reason : appointmentOutcomeReasons)
		{
			if(reason == null || reason.getIsActive() == null || Boolean.FALSE.equals(reason.getIsActive()))
				continue;
			
			form.cmbOutcomeReason().newRow(reason.getAppointmentOutcomeReason(), reason.getAppointmentOutcomeReason().getText());
		}
	}

	@Override
	protected void onGrdProceduresSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		if(FormMode.VIEW.equals(form.getLocalContext().getFormMode()))
			open();
		else
			engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if(save())
		{
			if(FormMode.VIEW.equals(form.getLocalContext().getFormMode()))
				open();
			else
				engine.close(DialogResult.OK);
		}
	}

	@Override
	protected void onBtnTransferToProviderClick() throws PresentationLogicException
	{
		addAction(AppointmentAction.TRANSFER_ACTION, OutcomeAction.DONE_NOW, null);
		updateControlsState();
	}

	@Override
	protected void onBtnOnwardReferralClick() throws PresentationLogicException
	{
		addAction(AppointmentAction.ONWARD_REFERRAL_ACTION, OutcomeAction.DONE_NOW, null);
		updateControlsState();
	}

	@Override
	protected void onBtnFutureApptAddNowClick() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setAppointmentSaved(Boolean.FALSE);
		engine.open(form.getForms().RefMan.BookAppointmentDialog);
	}

	@Override
	protected void onBtnPlannedListAddLaterClick() throws PresentationLogicException
	{
		addAction(AppointmentAction.PLANNED_LIST_ACTION, OutcomeAction.DO_LATER, null);
		updateControlsState();
	}

	@Override
	protected void onBtnPlannedListAddNowClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST});
	}

	@Override
	protected void onBtnBookedListAddLaterClick() throws PresentationLogicException
	{
		addAction(AppointmentAction.BOOKED_LIST_ACTION, OutcomeAction.DO_LATER, null);
		updateControlsState();
	}

	private void addAction(AppointmentAction apptAction, OutcomeAction outcomeAction, FutureAppointmentDetailsVo futureAppointmentDetails)
	{
		if(form.getLocalContext().getAppointment() == null)
			return;
		
		if(wasOnwardReferralORTransferActionAlreadyAdded(apptAction))
			return;
		
		if(wasDO_LATERAlreadyAdded(apptAction, outcomeAction))
			return;
		
		AppointmentOutcomeActionVo action = new AppointmentOutcomeActionVo();
		action.setAppointmentAction(apptAction);
		action.setOutcomeOfAction(outcomeAction);
		action.setFutureAppointmentDetails(futureAppointmentDetails);
		
		if(form.getLocalContext().getAppointment().getOutcomeActions() == null)
			form.getLocalContext().getAppointment().setOutcomeActions(new AppointmentOutcomeActionVoCollection());
		
		form.getLocalContext().getAppointment().getOutcomeActions().add(action);
	}

	private boolean wasDO_LATERAlreadyAdded(AppointmentAction apptAction, OutcomeAction outcomeAction)
	{
		if(form.getLocalContext().getAppointment() == null || form.getLocalContext().getAppointment().getOutcomeActions() == null)
			return false;
		
		if(!OutcomeAction.DO_LATER.equals(outcomeAction))
			return false;
		
		for(AppointmentOutcomeActionVo action : form.getLocalContext().getAppointment().getOutcomeActions())
		{
			if(action == null)
				continue;
			
			if(!OutcomeAction.DO_LATER.equals(action.getOutcomeOfAction()))
				continue;
			
			if(AppointmentAction.WAITING_LIST_ACTION.equals(action.getAppointmentAction()) && AppointmentAction.WAITING_LIST_ACTION.equals(apptAction))
				return true;
			
			if(AppointmentAction.PLANNED_LIST_ACTION.equals(action.getAppointmentAction()) && AppointmentAction.PLANNED_LIST_ACTION.equals(apptAction))
				return true;
			
			if(AppointmentAction.BOOKED_LIST_ACTION.equals(action.getAppointmentAction()) && AppointmentAction.BOOKED_LIST_ACTION.equals(apptAction))
				return true;
		}
		
		return false;
	}

	private boolean wasOnwardReferralORTransferActionAlreadyAdded(AppointmentAction apptAction)
	{
		if(form.getLocalContext().getAppointment() == null || form.getLocalContext().getAppointment().getOutcomeActions() == null)
			return false;
		
		for(AppointmentOutcomeActionVo action : form.getLocalContext().getAppointment().getOutcomeActions())
		{
			if(action == null)
				continue;
			
			if(AppointmentAction.TRANSFER_ACTION.equals(action.getAppointmentAction()) && AppointmentAction.TRANSFER_ACTION.equals(apptAction))
				return true;
			
			if(AppointmentAction.ONWARD_REFERRAL_ACTION.equals(action.getAppointmentAction()) && AppointmentAction.ONWARD_REFERRAL_ACTION.equals(apptAction))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onBtnBookedListAddNowClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOBOOKEDLIST});
	}

	@Override
	protected void onBtnWaitingListAddLaterClick() throws PresentationLogicException
	{
		addAction(AppointmentAction.WAITING_LIST_ACTION, OutcomeAction.DO_LATER, null);
		updateControlsState();
	}

	@Override
	protected void onBtnWaitingListAddClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST});
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnFutureApptAddLaterClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.FutureAppointmentDetails);
	}
}
