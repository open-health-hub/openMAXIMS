//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5196.25869)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.hcpmultipleselectdialog;

import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.forms.hcpmultipleselectdialog.GenForm.grdHcpToSelectRow;
import ims.scheduling.forms.hcpmultipleselectdialog.GenForm.grdSelectedHcpsRow;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();

	}

	private void initialise()
	{
		form.txtName().setFocus();

	}

	private void open()
	{
		populateSelectedHCPsGrid(form.getGlobalContext().Scheduling.getSelectedHCPs());
		//WDEV-19368
		if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null)
			form.getLocalContext().setSelectedHCPs(form.getGlobalContext().Scheduling.getSelectedHCPs());
		updateControlsState();

	}

	private void populateSelectedHCPsGrid(HcpLiteVoCollection selectedHCPs)
	{
		form.grdSelectedHcps().getRows().clear();

		if (selectedHCPs == null || selectedHCPs.size() == 0)
			return;

		for (int i = 0; i < selectedHCPs.size(); i++)
		{
			grdSelectedHcpsRow newRow = form.grdSelectedHcps().getRows().newRow();

			HcpLiteVo hcp = selectedHCPs.get(i);

			if (selectedHCPs.get(i) == null)
				continue;

			newRow.setColName(hcp.getName() != null ? hcp.getName().toString() : "");
			newRow.setColSelected(true);

			newRow.setValue(hcp);
		}

	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		populateDataFromGrid();

		engine.close(DialogResult.OK);
	}

	private void populateDataFromGrid()
	{
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);

		if (form.grdSelectedHcps().getRows().size() == 0)
			return;

		HcpLiteVoCollection hcpColl = new HcpLiteVoCollection();

		for (int i = 0; i < form.grdSelectedHcps().getRows().size(); i++)
		{
			grdSelectedHcpsRow row = form.grdSelectedHcps().getRows().get(i);

			if (Boolean.TRUE.equals(row.getColSelected()))
			{
				hcpColl.add(row.getValue());
			}
		}

		form.getGlobalContext().Scheduling.setSelectedHCPs(hcpColl);

	}

	@Override
	protected void onBtnAddClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getSelectedHCPs() == null)
			return;

		for (int i = 0; i < form.getLocalContext().getSelectedHCPs().size(); i++)
		{
			HcpLiteVo hcp = form.getLocalContext().getSelectedHCPs().get(i);

			if (hcp == null)
				continue;

			if (form.grdSelectedHcps().getValues().contains(hcp))
				continue;
						
			grdSelectedHcpsRow newRow = form.grdSelectedHcps().getRows().newRow();
			
			newRow.setColName(hcp.getName() != null ? hcp.getName().toString() : "");
			newRow.setColSelected(true);

			newRow.setValue(hcp);
			
		}

		removeSelectedRowsFromSearchGrid();
	}
	////WDEV-19368
	private void removeSelectedRowsFromSearchGrid()
	{
		HcpLiteVoCollection selectedHcps = form.getLocalContext().getSelectedHCPs() ;

		for (int j=0; j<selectedHcps.size();j++)
		{
			int index = getIndex(selectedHcps.get(j));
			if (index == -1)
				continue;
			form.grdHcpToSelect().getRows().remove(getIndex(selectedHcps.get(j)));
		}
	}
	//WDEV-19368
	private  int getIndex(HcpLiteVo hcpLiteVo)
	{
		int index = -1;
		for (int i=0;i<form.grdHcpToSelect().getRows().size();i++)
		{
			if (hcpLiteVo.equals(form.grdHcpToSelect().getRows().get(i).getValue()))
			{
				form.grdHcpToSelect().setValue(hcpLiteVo);
				index = form.grdHcpToSelect().getSelectedRowIndex();
				form.grdHcpToSelect().setValue(null);
			}
		}

		return index; 
	}
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedHCPs(form.getGlobalContext().Scheduling.getSelectedHCPs() != null ? form.getGlobalContext().Scheduling.getSelectedHCPs() : null);

		if (form.txtName().getValue() == null || form.txtName().getValue().trim().equals(""))
		{
			engine.showMessage("Name is mandatory.");
			return;
		}
		//WDEV-19368
		String selectedHCPs = getSelectedHcpsIds(form.grdSelectedHcps().getValues());
		HcpLiteVoCollection hcpColl = domain.listHCPs(form.txtName().getValue(),selectedHCPs);
				
		populateHcpToSelectGrid(hcpColl);

		if (hcpColl == null || hcpColl.size() == 0)
		{
			engine.showMessage("No records found.");
		}

		updateControlsState();
	}
	//WDEV-19368
	private String getSelectedHcpsIds(HcpLiteVoCollection selectedHCPs)
	{
		if (selectedHCPs == null || selectedHCPs.size() ==0)
			return null;
		StringBuilder iDS = new StringBuilder();
		String commaStr = "";
		for (int i=0;i<selectedHCPs.size();i++)
		{
			if (selectedHCPs.get(i) != null)
			{
				iDS.append(commaStr + selectedHCPs.get(i).getMos().getID_MemberOfStaff());
				commaStr = ", ";
			}
		}
		return iDS.toString();
	}

	private void populateHcpToSelectGrid(HcpLiteVoCollection hcpColl)
	{
		form.grdHcpToSelect().getRows().clear();		
		
		if (hcpColl == null || hcpColl.size() == 0)
			return;

		for (int i = 0; i < hcpColl.size(); i++)
		{
			grdHcpToSelectRow newRow = form.grdHcpToSelect().getRows().newRow();

			HcpLiteVo hcp = hcpColl.get(i);

			if (hcp == null)
				continue;

			newRow.setColName(hcp.getName() != null ? hcp.getName().toString() : "");
			newRow.setColSelect(false);

			newRow.setValue(hcp);		
		}	
	}

	@Override
	protected void onGrdSelectedHcpsGridCheckBoxClicked(int column, grdSelectedHcpsRow row, boolean isChecked) throws PresentationLogicException
	{
		if (!isChecked)
		{
			form.grdSelectedHcps().setValue(row.getValue());
			if (form.getLocalContext().getSelectedHCPs() == null)
				form.getLocalContext().setSelectedHCPs(new HcpLiteVoCollection());
			form.getLocalContext().getSelectedHCPs().add(row.getValue());	
			form.grdSelectedHcps().removeSelectedRow();
			reinstateRow(row);
		}		
	}
	//WDEV-19368
	private void reinstateRow(grdSelectedHcpsRow row)
	{
		if (row == null || row.getValue() == null)
			return;
		HcpLiteVo value = row.getValue();
	
		if (form.getLocalContext().getSelectedHCPsIsNotNull())
		{
			grdHcpToSelectRow reinstatedRow = form.grdHcpToSelect().getRows().newRowAt(form.grdHcpToSelect().getRows().size());
			reinstatedRow.setColName(value.getName() != null ? value.getName().toString() : "");
			reinstatedRow.setColSelect(false);
			reinstatedRow.setValue(value);			
		}	
		
		populateHcpToSelectGrid(form.grdHcpToSelect().getValues().sort());
	}

	@Override
	protected void onGrdHcpToSelectGridCheckBoxClicked(int column, grdHcpToSelectRow row, boolean isChecked) throws PresentationLogicException
	{
		if (isChecked)
		{
			if (form.getLocalContext().getSelectedHCPs() == null)
				form.getLocalContext().setSelectedHCPs(new HcpLiteVoCollection());
						
			form.getLocalContext().getSelectedHCPs().add(row.getValue());				
		}
		else
			form.getLocalContext().getSelectedHCPs().remove(row.getValue());

		updateControlsState();
	}

	private void updateControlsState()
	{
		form.btnAdd().setEnabled(form.getLocalContext().getSelectedHCPs() != null && form.getLocalContext().getSelectedHCPs().size() > 0);

	}
}
