//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3111.36466)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.sessionslotdialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ActivityVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.forms.sessionslotdialog.GenForm.grdDosRow;
import ims.scheduling.helper.Uuid;
import ims.scheduling.vo.DirectoryOfServiceSessionSlotVo;
import ims.scheduling.vo.DirectoryOfServiceSessionSlotVoCollection;
import ims.scheduling.vo.DirectoryOfServiceVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.Session_ListOwnerVo;
import ims.scheduling.vo.lookups.SchedCABSlotType;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-7606
		if(args != null && args.length == 1)
		{
			if(args[0] instanceof SessionShortVo)
				form.getLocalContext().setSelectedSessionFromSessionDetailsEdit((SessionShortVo)args[0]);
		}
		
		initialise();
		loadActivities();
		loadListOwners();
		populateScreenFromData(form.getGlobalContext().Scheduling.getSessionSlot());
	}

	private void loadListOwners()
	{
		form.cmbSlotResponsiblity().clear();
		//wdev-12428		
		if(form.cmbSession().getValue() != null)
		{
			for (Session_ListOwnerVo voListOwner : form.cmbSession().getValue().getListOwners())
				form.cmbSlotResponsiblity().newRow(voListOwner, voListOwner.toString());	
		}
		else if (form.getGlobalContext().Scheduling.getSelectedSessionListOwnersIsNotNull()) //wdev-13080
		{
			for (Session_ListOwnerVo voListOwner : form.getGlobalContext().Scheduling.getSelectedSessionListOwners())
				form.cmbSlotResponsiblity().newRow(voListOwner, voListOwner.toString());	
		}

	}

	private void initialise()
	{
		if(form.getGlobalContext().RefMan.getSelectedSessionsIsNotNull())
		{
			for(SessionShortVo voSession : form.getGlobalContext().RefMan.getSelectedSessions())
			{
				form.cmbSession().newRow(voSession, voSession.getName());
			}
			
			if(form.cmbSession().getValues().size() == 1)
				form.cmbSession().setValue(form.getGlobalContext().RefMan.getSelectedSessions().get(0));
			
			form.lblSlotType().setVisible(false);
			form.cmbSlotType().setVisible(false);
			form.cmbSession().setFocus();	//wdev-11038
		}
		else
		{
			form.lblSession().setVisible(false);
			form.cmbSession().setVisible(false);
			form.cmbActivity().setFocus();	//wdev-11038
		}
		
		if(!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))
		{
			form.grdDos().setVisible(false);
			form.lblDos().setVisible(false);
		}
		else
			form.grdDos().setReadOnly(false);
	}

	private void loadActivities()
	{
		ActivityVoCollection activities = domain.listActivities();	
		for (int i=0; i< activities.size(); i++)
			form.cmbActivity().newRow(activities.get(i),activities.get(i).getName());			
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SessionSlotVo voSessionSlot = populateDataFromScreen();
		
		if(voSessionSlot.getID_Session_Slot() == null)
			voSessionSlot.setStatus(Status_Reason.SLOTOPENED);
		
		String[] arrErrors = voSessionSlot.validate(getUIValidationErrors()); 
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		form.getGlobalContext().Scheduling.setSessionSlot(voSessionSlot);
		engine.close(DialogResult.OK);
	}
	
	@Override
	protected SessionSlotVo populateDataFromScreen()
	{
		SessionSlotVo voSlot = form.getGlobalContext().Scheduling.getSessionSlot();
		voSlot = super.populateDataFromScreen(voSlot);
		if(form.cmbSession().getValue() != null)
		{
			voSlot.setSession(form.cmbSession().getValue());
			form.getGlobalContext().RefMan.setSelectedSession(form.cmbSession().getValue());
		}
		
		if(ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))
		{
			DirectoryOfServiceSessionSlotVoCollection voCollDosSlot = voSlot.getDirectoryOfServices();
			if(voCollDosSlot == null)
				voCollDosSlot = new DirectoryOfServiceSessionSlotVoCollection();
			else
				voCollDosSlot.clear();
			
			//if changing here please also modify SlotGenerationUtils.copySlotDirectoryOfServices to same effect (dlaffan)
			for(int i=0;i<form.grdDos().getRows().size();i++)
			{
				grdDosRow row = form.grdDos().getRows().get(i);
				if(row.getColSelect())
				{
					DirectoryOfServiceSessionSlotVo voDosSlot = row.getValue();
					voDosSlot.setSlot(voSlot);
					voDosSlot.setDirectoryOfService(row.getColDOS());
					voDosSlot.setIsPublished(false);
					voDosSlot.setUSRN(Uuid.generateUUID());
					voCollDosSlot.add(voDosSlot);
				}
			}
			if(form.getLocalContext().getSelectedSessionFromSessionDetailsEdit() != null)
				voSlot.setSessDateTime(new DateTime(form.getLocalContext().getSelectedSessionFromSessionDetailsEdit().getSessionDate()));
			else if(form.cmbSession().getValue() != null)
				voSlot.setSessDateTime(new DateTime(form.cmbSession().getValue().getSessionDate()));
			
			voSlot.setDirectoryOfServices(voCollDosSlot);
		}
		return voSlot;
	}

	@Override
	protected void populateScreenFromData(SessionSlotVo value)
	{
		super.populateScreenFromData(value);
		
		if(ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))
		{
			form.grdDos().getRows().clear();
			
			//load available Dos's
			if(form.getGlobalContext().Scheduling.getDirectoryofServicesCollectionIsNotNull())
			{
				for(DirectoryOfServiceVo voDos : form.getGlobalContext().Scheduling.getDirectoryofServicesCollection()) 
				{
					grdDosRow row = form.grdDos().getRows().newRow();
					row.setColDOS(voDos);
					row.setColSelect(false);
					row.setValue(new DirectoryOfServiceSessionSlotVo());
				}
			}
		}
		
		if(form.getGlobalContext().RefMan.getSelectedSessionsIsNotNull())
			form.cmbSlotType().setValue(SchedCABSlotType.LOCAL);
	}

	private String[] getUIValidationErrors()
	{
		List<String> errors = new ArrayList<String>();
				
		//called from book appointment to add slot on the fly
		
		if(form.getGlobalContext().RefMan.getSelectedSessionsIsNotNull())
		{
			if(form.cmbSession().getValue() == null)
				errors.add("Session is mandatory");
		}
		else
		{
			if(form.cmbSlotType().getValue() == null)
				errors.add("Type is mandatory");
		}
		
		if(form.cmbActivity().getValue() == null)
			errors.add("Activity is mandatory");
		
		if(form.cmbPriority().getValue() == null)
			errors.add("Priority is mandatory");
		
		if(form.timStart().getValue() == null)
			errors.add("Start Time is mandatory");
		
		//wdev-12073, 	WDEV-11638
		SessionShortVo tempvo = null;
		if(form.getGlobalContext().RefMan.getSelectedSessionsIsNotNull())
		{
			tempvo = form.cmbSession().getValue();
		}
		else if(form.getLocalContext().getSelectedSessionFromSessionDetailsEditIsNotNull())
		{
			tempvo = form.getLocalContext().getSelectedSessionFromSessionDetailsEdit();
		}
		
		if(form.intDuration().getValue() == null)
			errors.add("Duration is mandatory");
		else
		{
			if(tempvo != null)
			{
				if(tempvo.getStartTmIsNotNull() && tempvo.getEndTmIsNotNull())
				{
					if(form.intDuration().getValue() > (tempvo.getEndTm().getTotalMinutes()- tempvo.getStartTm().getTotalMinutes()))
						errors.add("Duration should not be more than the session length .");
				}
			}
			//--------
		}
		
		//	WDEV-11638 - start time
		if(tempvo != null && form.timStart().getValue() != null)
		{
			if(tempvo.getStartTmIsNotNull() && tempvo.getStartTm().isGreaterThan(form.timStart().getValue()))
			{
				errors.add("Slot Start Time can not be less than Sesion Start Time.");
			}
			
			if(tempvo.getEndTmIsNotNull())
			{
				if(tempvo.getEndTm().isLessThan(form.timStart().getValue()))
				{
					errors.add("Slot Start Time can not be greater than Session End Time.");
				}
				else if(form.intDuration().getValue() != null)
				{
					Time slotDuration = (Time) form.timStart().getValue().clone();
					slotDuration.addMinutes(form.intDuration().getValue());
					
					if(tempvo.getEndTm().isLessThan(slotDuration))
					{
						errors.add("Slot End Time can not be greater that Session End Time.");
					}
				}
			}
		}
		//	WDEV-11638 - end time

		if(errors.size() == 0)
		{
			if(slotGoesIntoNextDay())
				errors.add("Slot End Time Continues into the next Day - action not allowed");
		}
			
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	private boolean slotGoesIntoNextDay()
	{
		int totalminutes = form.timStart().getValue().getTotalMinutes();
		if(totalminutes + form.intDuration().getValue() > 1440)
			return true;
		
		return false;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	//wdev-12428
	protected void onCmbSessionValueChanged() throws PresentationLogicException 
	{		
		loadListOwners();
	}
}
