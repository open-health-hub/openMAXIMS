//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.moveappointmentdialog;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.scheduling.forms.moveappointmentdialog.GenForm.grdSelectedRow;
import ims.scheduling.vo.BookingAppointmentTheatreLiteVo;
import ims.scheduling.vo.MoveAppointmentDataVo;
import ims.scheduling.vo.SessionParentChildSlotRefVoCollection;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionSearchCriteriaVo;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.SessionTheatreVoCollection;
import ims.scheduling.vo.lookups.Status_Reason;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSaveOnDialog(true);
		if(args != null)
		{
			if(args.length > 0 && args[0] instanceof Boolean)
				form.getLocalContext().setSaveOnDialog((Boolean)args[0]);
		}
		
		initialise();
		updateControlState();
	}
	private void initialise()
	{
		if(form.getGlobalContext().Scheduling.getMoveAppointmentDialogDataIsNotNull())
		{
			MoveAppointmentDataVo voData = form.getGlobalContext().Scheduling.getMoveAppointmentDialogData();
			if(voData.getFromSlotIsNotNull())
			{
				form.lblStartDateTime().setValue(buildSlotDateTimeString(voData.getFromSlot()));
				if(voData.getFromSlot().getSessDateTimeIsNotNull())
				{
					form.dteSession().setValue(voData.getFromSlot().getSessDateTime().getDate());
					loadTheatreSlots();
				}
			}
		}
		
	
		
	}
	private String buildSlotDateTimeString(SessionParentChildSlotVo fromSlot)
	{
		if (fromSlot == null)
			throw new CodingRuntimeException("fromSlot cannot be null in method buildSlotDateTimeString");
		
		StringBuffer str = new StringBuffer();
		str.append(fromSlot.getSessDateTimeIsNotNull() && fromSlot.getSessDateTime().getDate() != null ? fromSlot.getSessDateTime().getDate().toString() : "");
		str.append(fromSlot.getStartTimeIsNotNull() ?  " " + fromSlot.getStartTime().toString() : "");
		
		return str.toString();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		MoveAppointmentDataVo voData = form.getGlobalContext().Scheduling.getMoveAppointmentDialogData();
		voData.setToSlot(form.grdSelected().getValue());

		if(form.getLocalContext().getSaveOnDialogIsNotNull() && form.getLocalContext().getSaveOnDialog())
		{
			// WDEV-13237
			// Check if there are enough open slots to move the appointment
			SessionTheatreVo session = domain.getSession(voData.getToSlot().getSession());
			BookingAppointmentTheatreLiteVo appointment = voData.getFromSlot().getAppointment();
			
			SessionParentChildSlotRefVoCollection slots = session.calculateChildSlots(voData.getToSlot(), appointment.getCustomProcedureDuration());
			
			if (!engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS))
			{
				if(slots == null)
				{
					engine.showMessage("Not enough Slots available to Book into");
					return;
				}
			}
			
			try
			{
				domain.moveAppointment(voData.getFromSlot(), voData.getToSlot());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getGlobalContext().Scheduling.setMoveAppointmentDialogData(domain.getMoveAppointmentDialogData(form.getGlobalContext().Scheduling.getMoveAppointmentDialogData().getFromSlot(), form.getGlobalContext().Scheduling.getMoveAppointmentDialogData().getToSlot()));
				initialise();
				updateControlState();
				return;
			}
			
			engine.close(DialogResult.OK);
		}
		
		form.getGlobalContext().Scheduling.setMoveAppointmentDialogData(voData);
		engine.close(DialogResult.OK);
	}
	
	@Override
	protected void onDteSessionValueChanged() throws PresentationLogicException
	{
		loadTheatreSlots();
	}
	
	private void loadTheatreSlots()
	{
		MoveAppointmentDataVo voData = form.getGlobalContext().Scheduling.getMoveAppointmentDialogData();
		SessionParentChildSlotVo fromSlot = voData.getFromSlot();
		
		form.grdSelected().getRows().clear();
		//load slots for Session
		if(form.dteSession().getValue() != null)
		{
			SessionTheatreVoCollection voCollSessions = listSessions();
			if(voCollSessions != null)
			{
				for(SessionTheatreVo voSession : voCollSessions)
				{
					if(voSession.getParentChildSlotsIsNotNull())
					{
						voSession.getParentChildSlots().sort();
						for(SessionParentChildSlotVo voSlot : voSession.getParentChildSlots())
						{
							if(voSlot.getAppointment() == null && voSlot.getStatusIsNotNull() && (voSlot.getStatus().equals(Status_Reason.BOOKED) || voSlot.getStatus().equals(Status_Reason.CLOSED)))
								continue;
							
							grdSelectedRow row = form.grdSelected().getRows().newRow();
							
							if(voSlot.getAppointmentIsNotNull())
							{
								//slot with an appointment
								row.setColStartTime(voSlot.getAppointment().getApptStartTime());
								
								Integer duration = voSlot.getAppointment().getCustomProcedureDuration();
								if(duration != null)
									row.setColMins(duration.toString());
							
								if(voSlot.getAppointment().getPatientIsNotNull())
									row.setColPatient(voSlot.getAppointment().getPatient().toString());
								
								if(voSlot.getAppointment().getTheatreBookingIsNotNull())
									row.setColProcedure(voSlot.getAppointment().getTheatreBooking().getProcedure());
								
								row.setSelectable(false);
							}
							else
							{
								//add empty slots
								row.setColStartTime(voSlot.getStartTime());					
							}
							
							//Suspended Slots
							if(voSlot.getStatusIsNotNull() && voSlot.getStatus().equals(Status_Reason.SUSPENDED))
							{
								row.setBackColor(Color.Bisque);
								row.setColPatient("Suspended for: " +  (voSlot.getStatusReasonIsNotNull() ? voSlot.getStatusReason().getText() : ""));
								row.setSelectable(false);
							}
							
							row.setValue(voSlot);
														
							//colour overlapping appointments
							grdSelectedRow previousRow;
							if(form.grdSelected().getRows().size() > 1)
							{
								previousRow = form.grdSelected().getRows().get(form.grdSelected().getRows().size() -2);
								if(previousRow.getValue() != null && previousRow.getValue().getAppointmentIsNotNull())
								{
									if(previousRow.getValue().getAppointment().getApptEndTimeIsNotNull() && previousRow.getValue().getAppointment().getApptEndTime().isGreaterThan(voSlot.getStartTime()))
										previousRow.setBackColor(Color.Red);
								}
							}	
							
							//flagging current appointment
							if(fromSlot != null && fromSlot.equals(row.getValue()))
								row.setBackColor(Color.LightBlue);
						}
					}
				}
			}
		}
	}

	private SessionTheatreVoCollection listSessions()
	{
		SessionTheatreVoCollection voCollSessions = null;
		
		MoveAppointmentDataVo voData = form.getGlobalContext().Scheduling.getMoveAppointmentDialogData();
		if(voData.getFromSlotIsNotNull() && voData.getFromSlot().getAppointmentIsNotNull())
		{
			SessionSearchCriteriaVo voCriteria = domain.getSessionSearchCriteriaByAppointment(voData.getFromSlot().getAppointment());
			if(voCriteria != null)
			{
				voCollSessions = domain.listSession(form.dteSession().getValue(), form.dteSession().getValue(), voCriteria.getSessionService(), voCriteria.getSessionLocation(), voCriteria.getSessionConsultant(), voCriteria.getSessionProcedure(), voCriteria.getSessionTheatreType(), 0, engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS), voCriteria.getSessionAnaestheticType());
			}
		}
	
		return voCollSessions;
	}
	
	@Override
	protected void onGrdSelectedSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}
	
	private void updateControlState()
	{
		form.btnOK().setVisible(form.grdSelected().getValue() != null);
	}
}
