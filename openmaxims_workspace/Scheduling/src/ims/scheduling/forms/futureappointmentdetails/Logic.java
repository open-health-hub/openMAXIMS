//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.futureappointmentdetails;

import java.util.ArrayList;

import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.TimeUnitsSecondsToMonths;
import ims.core.vo.lookups.TimeUnitsSecondsToMonthsCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.scheduling.vo.FutureAppointmentDetailsVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
	}
	
	private void initialise()
	{
		bindUnitCombo();
	}

	private void bindUnitCombo()
	{
		form.cmbUnit().clear();
		
		TimeUnitsSecondsToMonthsCollection lookupCollection = LookupHelper.getTimeUnitsSecondsToMonths(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if(TimeUnitsSecondsToMonths.SECONDS.equals(lookupCollection.get(x)) || TimeUnitsSecondsToMonths.MINUTES.equals(lookupCollection.get(x)) || TimeUnitsSecondsToMonths.HOURS.equals(lookupCollection.get(x)))
				continue;
			
			form.cmbUnit().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateUIRules())
		{
			form.getGlobalContext().Scheduling.setFutureAppointmentDetails(populateDataFromScreen());
			
			if(form.getGlobalContext().Scheduling.getFutureAppointmentDetails() == null)
				return;
			
			engine.close(DialogResult.OK);
		}
	}

	private FutureAppointmentDetailsVo populateDataFromScreen()
	{
		form.dteFutureApptDate().setValue(calculateFutureAppointmentDate());
		
		if(form.dteFutureApptDate().getValue() == null)
			return null;
		
		FutureAppointmentDetailsVo futureApptDetails = new FutureAppointmentDetailsVo();
		futureApptDetails.setPeriodValue(form.intValue().getValue());
		futureApptDetails.setPeriodType(form.cmbUnit().getValue());
		futureApptDetails.setFutureApptByDate(form.dteFutureApptDate().getValue());
		
		return futureApptDetails;
	}

	private boolean validateUIRules()
	{
		ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		
		if(form.intValue().getValue() == null || form.cmbUnit().getValue() == null)
		{
			listOfErrors.add("Please enter values for all mandatory fields.");
		}
		
		String[] uiResults = new String[listOfErrors.size()];
		listOfErrors.toArray(uiResults);
		
		if(uiResults.length > 0)
		{
			engine.showErrors(uiResults);
			return false;
		}
		
		return true;
	}

	@Override
	protected void onCmbUnitValueChanged() throws PresentationLogicException
	{
		form.dteFutureApptDate().setValue(calculateFutureAppointmentDate());
	}

	private Date calculateFutureAppointmentDate()
	{
		if(form.intValue().getValue() == null || form.cmbUnit().getValue() == null)
			return null;
		
		Date futureDate = new Date();

		if (form.cmbUnit().getValue().equals(TimeUnitsSecondsToMonths.DAYS))
			futureDate.addDay(form.intValue().getValue());
		if (form.cmbUnit().getValue().equals(TimeUnitsSecondsToMonths.WEEKS))
			futureDate.addDay(form.intValue().getValue() * 7);
		if (form.cmbUnit().getValue().equals(TimeUnitsSecondsToMonths.MONTHS))
			futureDate.addMonth(form.intValue().getValue());
		
		return futureDate;
	}
}
