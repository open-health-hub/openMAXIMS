//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.22 build 50218.1400)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.dateselectioneditdialog;

import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.TimeSpan;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws FormOpenException 
	{
		Date today = new Date();
		
		Date lastGeneratedDate = form.getGlobalContext().Scheduling.getProfileShortIsNotNull() && form.getGlobalContext().Scheduling.getProfileShort().getLastActualGenDateIsNotNull() ? form.getGlobalContext().Scheduling.getProfileShort().getLastActualGenDate() : null;
		
		if(lastGeneratedDate == null)
		{
			if(form.getGlobalContext().Scheduling.getProfileShort().getEffFrm().getDate().after(today.getDate()) || form.getGlobalContext().Scheduling.getProfileShort().getEffFrm().getDate().equals(today.getDate()))
			{
				form.dteStart().setValue(form.getGlobalContext().Scheduling.getProfileShort().getEffFrm());
			}
			else
				form.dteStart().setValue(today);
		}
		else
			form.dteStart().setValue(lastGeneratedDate);
			
		form.btnOk().setEnabled(false);		
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Scheduling.DateSelectionEditDialog.setEndDate(null);
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-12664
		if(form.dteStart().getValue() != null)
		{
			if(form.dteStart().getValue().isLessThan(new Date()))
			{
				int existingSessions = domain.countSessionsForProfile(form.getGlobalContext().Scheduling.getProfileShort());
				if(existingSessions > 0)
				{
					engine.showErrors("Generation Error", new String[] {"There are existing Sessions for this Profile, It is not possible to generate in the past."});
					return;
				}	
			}
		}
		
		Integer count;
		try {
			count = domain.generateSessions(form.getGlobalContext().Scheduling.getProfileShort(), form.dteStart().getValue(), form.dteEnd().getValue());
		} catch (DomainInterfaceException e) {
			throw new PresentationLogicException("DomainInterfaceException occurred generating sessions - " + e.getMessage(), e);
		}
		engine.showMessage(count.toString() + " Sessions generated.");
		form.getGlobalContext().Scheduling.DateSelectionEditDialog.setEndDate(form.dteEnd().getValue());
		engine.close(DialogResult.OK);
	}

	protected void onDteEndValueChanged() throws PresentationLogicException 
	{
		form.btnOk().setEnabled(false);
		
		if(validateDates())
		{
			form.btnOk().setEnabled(true);
			form.lblInterval().setValue(calculateInterval());
		}
	}

	protected void onDteStartValueChanged() throws PresentationLogicException 
	{
		form.btnOk().setEnabled(false);
		
		if(validateDates())
		{
			form.btnOk().setEnabled(true);
			form.lblInterval().setValue(calculateInterval());
		}
	}

	private String calculateInterval() 
	{	
		TimeSpan diff = TimeSpan.getTimeSpan(form.dteEnd().getValue(), form.dteStart().getValue());
		return String.valueOf(diff.getDays() + " days");
	}

	private boolean validateDates() 
	{
		
		if(form.dteStart().getValue() != null && form.dteStart().getValue().getDate().before(form.getGlobalContext().Scheduling.getProfileShort().getEffFrm().getDate()))
		{
			engine.showMessage("Start Date cannot be before Effective From Date");
			return false;
		}
		
		//WDEV-12664
		/*else if(form.dteStart().getValue() != null && form.dteStart().getValue().getDate().before(new Date().getDate()))
		{
			engine.showMessage("Start Date cannot be before Today's Date");
			return false;			
		}*/
		
		if(form.dteStart().getValue() != null && form.dteEnd().getValue() != null)
		{
			if(form.dteStart().getValue().getDate().after(form.dteEnd().getValue().getDate()))
			{	
				engine.showMessage("Start Date cannot be after End Date");
				return false;
			}
			if(form.dteStart().getValue().equals(form.dteEnd().getValue()))
			{	
				engine.showMessage("End Date must be after Start Date");
				return false;
			}
			
		}	
		else
			return false;
		
		return true;
	}
}
