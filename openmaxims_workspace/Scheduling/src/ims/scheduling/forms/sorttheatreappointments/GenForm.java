//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.sorttheatreappointments;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdSessionsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSessionsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColSessionReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColSessionReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColSessionOpened()
		{
			super.row.showOpened(0);
		}
		public String getColSession()
		{
			return (String)super.row.get(0);
		}
		public void setColSession(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColSessionTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.scheduling.vo.Sch_SessionRefVo getValue()
		{
			return (ims.scheduling.vo.Sch_SessionRefVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.Sch_SessionRefVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSessionsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSessionsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSessionsRow get(int index)
		{
			return new grdSessionsRow(super.collection.get(index));
		}
		public grdSessionsRow newRow()
		{
			return new grdSessionsRow(super.collection.newRow());
		}
		public grdSessionsRow newRow(boolean autoSelect)
		{
			return new grdSessionsRow(super.collection.newRow(autoSelect));
		}
		public grdSessionsRow newRowAt(int index)
		{
			return new grdSessionsRow(super.collection.newRowAt(index));
		}
		public grdSessionsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSessionsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSessionsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.scheduling.vo.Sch_SessionRefVo[] getValues()
		{
			ims.scheduling.vo.Sch_SessionRefVo[] listOfValues = new ims.scheduling.vo.Sch_SessionRefVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.scheduling.vo.Sch_SessionRefVo getValue()
		{
			return (ims.scheduling.vo.Sch_SessionRefVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.Sch_SessionRefVo value)
		{
			super.grid.setValue(value);
		}
		public grdSessionsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSessionsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSessionsRowCollection getRows()
		{
			return new grdSessionsRowCollection(super.grid.getRows());
		}
		public grdSessionsRow getRowByValue(ims.scheduling.vo.Sch_SessionRefVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSessionsRow(row);
		}
		public void setColSessionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColSessionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdApptsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdApptsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColCurrentTheatreSlotReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColCurrentTheatreSlotReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColCurrentTheatreSlotOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColCurrentTheatreSlot(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.scheduling.vo.SessionTheatreTCISlotLiteVo getColCurrentTheatreSlot()
		{
			return (ims.scheduling.vo.SessionTheatreTCISlotLiteVo)super.row.get(0);
		}
		public void setColCurrentTheatreSlot(ims.scheduling.vo.SessionTheatreTCISlotLiteVo value)
		{
			super.row.set(0, value);
		}
		public void setCellColCurrentTheatreSlotTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColHospitalNoReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColHospitalNoReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColHospitalNoOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColHospitalNo(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColHospitalNo()
		{
			return (String)super.row.get(1);
		}
		public void setColHospitalNo(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColHospitalNoTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColSurnameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColSurnameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColSurname(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColSurname()
		{
			return (String)super.row.get(2);
		}
		public void setColSurname(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColSurnameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColForenameReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColForenameReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColForenameOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColForename(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColForename()
		{
			return (String)super.row.get(3);
		}
		public void setColForename(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColForenameTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColSexReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColSexReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColSexOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColSex(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColSex()
		{
			return (String)super.row.get(4);
		}
		public void setColSex(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColSexTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColDobReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColDobReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColDobOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColDob(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColDob()
		{
			return (String)super.row.get(5);
		}
		public void setColDob(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColDobTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColComeInTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColComeInTimeReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColComeInTimeOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColComeInTime(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.framework.controls.GridMutableComboBox getColComeInTime()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 6);
		}
		public void setCellColComeInTimeTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColProcedureReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColProcedureOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForColProcedure(String value)
		{
			super.row.setTooltip(7, value);
		}
		public String getColProcedure()
		{
			return (String)super.row.get(7);
		}
		public void setColProcedure(String value)
		{
			super.row.set(7, value);
		}
		public void setCellColProcedureTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.scheduling.vo.BookingAppointmentTheatreVo getValue()
		{
			return (ims.scheduling.vo.BookingAppointmentTheatreVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.BookingAppointmentTheatreVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdApptsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdApptsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdApptsRow get(int index)
		{
			return new grdApptsRow(super.collection.get(index));
		}
		public grdApptsRow newRow()
		{
			return new grdApptsRow(super.collection.newRow());
		}
		public grdApptsRow newRow(boolean autoSelect)
		{
			return new grdApptsRow(super.collection.newRow(autoSelect));
		}
		public grdApptsRow newRowAt(int index)
		{
			return new grdApptsRow(super.collection.newRowAt(index));
		}
		public grdApptsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdApptsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdApptsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public void setColHospitalNoCaption(String value)
		{
			this.grid.setColumnCaption(1, value);
		}
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		public ims.scheduling.vo.BookingAppointmentTheatreVoCollection getValues()
		{
			ims.scheduling.vo.BookingAppointmentTheatreVoCollection listOfValues = new ims.scheduling.vo.BookingAppointmentTheatreVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.BookingAppointmentTheatreVo getValue()
		{
			return (ims.scheduling.vo.BookingAppointmentTheatreVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.BookingAppointmentTheatreVo value)
		{
			super.grid.setValue(value);
		}
		public grdApptsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdApptsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdApptsRowCollection getRows()
		{
			return new grdApptsRowCollection(super.grid.getRows());
		}
		public grdApptsRow getRowByValue(ims.scheduling.vo.BookingAppointmentTheatreVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdApptsRow(row);
		}
		public void setColCurrentTheatreSlotHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColCurrentTheatreSlotHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColHospitalNoHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColHospitalNoHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColForenameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColForenameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColSexHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColSexHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColDobHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColDobHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColComeInTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColComeInTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(70);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(952, 664);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Scheduling.contextMenuSortTheatreAppointments = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Scheduling.contextMenuSortTheatreAppointmentsMOVEUPItem = factory.createMenuItem(startControlID.intValue() + 1, "Move Up", true, false, new Integer(102114), true, false);
		contextMenus.Scheduling.contextMenuSortTheatreAppointments.add(contextMenus.Scheduling.contextMenuSortTheatreAppointmentsMOVEUPItem);
		contextMenus.Scheduling.contextMenuSortTheatreAppointmentsMOVEDOWNItem = factory.createMenuItem(startControlID.intValue() + 2, "Move Down", true, false, new Integer(102108), true, false);
		contextMenus.Scheduling.contextMenuSortTheatreAppointments.add(contextMenus.Scheduling.contextMenuSortTheatreAppointmentsMOVEDOWNItem);
		contextMenus.Scheduling.contextMenuSortTheatreAppointmentsSORTTCIItem = factory.createMenuItem(startControlID.intValue() + 3, "Sort By TCI Time", true, false, new Integer(102243), true, false);
		contextMenus.Scheduling.contextMenuSortTheatreAppointments.add(contextMenus.Scheduling.contextMenuSortTheatreAppointmentsSORTTCIItem);
		contextMenus.Scheduling.contextMenuSortTheatreAppointmentsEDITTCITIMEItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit TCI Time", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuSortTheatreAppointments.add(contextMenus.Scheduling.contextMenuSortTheatreAppointmentsEDITTCITIMEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuSortTheatreAppointments);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 200, 920, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Session Details", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 130, 22, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Search Sessions", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 39, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Session Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 32, 346, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Finalised Date time :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 32, 322, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Finalised By :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 32, 298, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 32, 274, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure(s) :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 32, 250, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner(s) :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 32, 226, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre Details :", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 856, 624, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 624, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 96, 624, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Finalise", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 776, 624, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 856, 624, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 168, 343, 752, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 168, 319, 752, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 168, 295, 752, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 168, 272, 752, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 168, 247, 752, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 168, 223, 752, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 104, 37, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 80, 920, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdSessionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSessionsTemp);
		grdSessionsGrid grdSessions = (grdSessionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSessionsGrid.class, m_grdSessionsTemp);
		grdSessions.addStringColumn("Session", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdSessions);
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 384, 920, 224, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdApptsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuSortTheatreAppointments, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdApptsTemp);
		grdApptsGrid grdAppts = (grdApptsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdApptsGrid.class, m_grdApptsTemp);
		grdAppts.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addStringColumn("Hosp No.", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addStringColumn("Surname", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addStringColumn("Forename", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addStringColumn("Sex", 0, 0, 65, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addStringColumn("DOB", 0, 0, 75, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addMutableComboBoxColumn("Come In Time", 0, 0, 90, false, true, false, false, false, true, -1);
		grdAppts.addStringColumn("Procedure", 0, 0, 410, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAppts);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 904, 32, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 864, 32, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnClose()
	{
		return (Button)super.getControl(9);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(10);
	}
	public Button btnFinalise()
	{
		return (Button)super.getControl(11);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(12);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(13);
	}
	public TextBox txtFinalisedDT()
	{
		return (TextBox)super.getControl(14);
	}
	public TextBox txtFinalisedBy()
	{
		return (TextBox)super.getControl(15);
	}
	public TextBox txtDate()
	{
		return (TextBox)super.getControl(16);
	}
	public TextBox txtProcedure()
	{
		return (TextBox)super.getControl(17);
	}
	public TextBox txtListOwner()
	{
		return (TextBox)super.getControl(18);
	}
	public TextBox txtTheatreDetail()
	{
		return (TextBox)super.getControl(19);
	}
	public DateControl dteSession()
	{
		return (DateControl)super.getControl(20);
	}
	public grdSessionsGrid grdSessions()
	{
		return (grdSessionsGrid)super.getGrid(0);
	}
	public grdApptsGrid grdAppts()
	{
		return (grdApptsGrid)super.getGrid(1);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(23);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(24);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			RefMan = new RefManForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				PrintAppointment = new LocalFormName(114163);
			}
			public final FormName PrintAppointment;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				BookTheatreDialog = new LocalFormName(134159);
			}
			public final FormName BookTheatreDialog;
		}

		public SchedulingForms Scheduling;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SessApptOrder = new ims.framework.ContextVariable("SessApptOrder", prefix + "_lv_Scheduling.SortTheatreAppointments.__internal_x_context__SessApptOrder_" + componentIdentifier + "");
			cxl_TCISortOrder = new ims.framework.ContextVariable("TCISortOrder", prefix + "_lv_Scheduling.SortTheatreAppointments.__internal_x_context__TCISortOrder_" + componentIdentifier + "");
			cxl_EditingTCI = new ims.framework.ContextVariable("EditingTCI", prefix + "_lv_Scheduling.SortTheatreAppointments.__internal_x_context__EditingTCI_" + componentIdentifier + "");
		}
		
		public boolean getSessApptOrderIsNotNull()
		{
			return !cxl_SessApptOrder.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_Session_Appointment_OrderVo getSessApptOrder()
		{
			return (ims.scheduling.vo.Sch_Session_Appointment_OrderVo)cxl_SessApptOrder.getValue(context);
		}
		public void setSessApptOrder(ims.scheduling.vo.Sch_Session_Appointment_OrderVo value)
		{
			cxl_SessApptOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessApptOrder = null;
		public boolean getTCISortOrderIsNotNull()
		{
			return !cxl_TCISortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getTCISortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_TCISortOrder.getValue(context);
		}
		public void setTCISortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_TCISortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TCISortOrder = null;
		public boolean getEditingTCIIsNotNull()
		{
			return !cxl_EditingTCI.getValueIsNull(context);
		}
		public Boolean getEditingTCI()
		{
			return (Boolean)cxl_EditingTCI.getValue(context);
		}
		public void setEditingTCI(Boolean value)
		{
			cxl_EditingTCI.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditingTCI = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public SchedulingNamespace Scheduling = new SchedulingNamespace();
		public final class SchedulingNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class SortTheatreAppointments implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int MOVEUP = 1;
				public static final int MOVEDOWN = 2;
				public static final int SORTTCI = 3;
				public static final int EDITTCITIME = 4;
			}
			public void disableAllSortTheatreAppointmentsMenuItems()
			{
				this.contextMenuSortTheatreAppointmentsMOVEUPItem.setEnabled(false);
				this.contextMenuSortTheatreAppointmentsMOVEDOWNItem.setEnabled(false);
				this.contextMenuSortTheatreAppointmentsSORTTCIItem.setEnabled(false);
				this.contextMenuSortTheatreAppointmentsEDITTCITIMEItem.setEnabled(false);
			}
			public void hideAllSortTheatreAppointmentsMenuItems()
			{
				this.contextMenuSortTheatreAppointmentsMOVEUPItem.setVisible(false);
				this.contextMenuSortTheatreAppointmentsMOVEDOWNItem.setVisible(false);
				this.contextMenuSortTheatreAppointmentsSORTTCIItem.setVisible(false);
				this.contextMenuSortTheatreAppointmentsEDITTCITIMEItem.setVisible(false);
			}
			private Menu contextMenuSortTheatreAppointments;
			public ReadOnlyMenuItem getSortTheatreAppointmentsMOVEUPItem()
			{
				return this.contextMenuSortTheatreAppointmentsMOVEUPItem;
			}
			private MenuItem contextMenuSortTheatreAppointmentsMOVEUPItem;
			public ReadOnlyMenuItem getSortTheatreAppointmentsMOVEDOWNItem()
			{
				return this.contextMenuSortTheatreAppointmentsMOVEDOWNItem;
			}
			private MenuItem contextMenuSortTheatreAppointmentsMOVEDOWNItem;
			public ReadOnlyMenuItem getSortTheatreAppointmentsSORTTCIItem()
			{
				return this.contextMenuSortTheatreAppointmentsSORTTCIItem;
			}
			private MenuItem contextMenuSortTheatreAppointmentsSORTTCIItem;
			public ReadOnlyMenuItem getSortTheatreAppointmentsEDITTCITIMEItem()
			{
				return this.contextMenuSortTheatreAppointmentsEDITTCITIMEItem;
			}
			private MenuItem contextMenuSortTheatreAppointmentsEDITTCITIMEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[76];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SortTheatreAppointments.__internal_x_context__SessApptOrder_" + componentIdentifier, "BO-1090100012-ID", "ID_Sch_Session_Appointment_Order");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SortTheatreAppointments.__internal_x_context__SessApptOrder_" + componentIdentifier, "BO-1090100012-ISFINALISED", "IsFinalised");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SortTheatreAppointments.__internal_x_context__SessApptOrder_" + componentIdentifier, "BO-1090100012-FINALISEDBY", "FinalisedBy");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SortTheatreAppointments.__internal_x_context__SessApptOrder_" + componentIdentifier, "BO-1090100012-FINALISEDDATETIME", "FinalisedDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
