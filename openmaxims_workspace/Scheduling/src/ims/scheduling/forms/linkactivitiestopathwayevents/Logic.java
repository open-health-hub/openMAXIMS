//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.62 build 3117.21656)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.linkactivitiestopathwayevents;

import ims.scheduling.forms.linkactivitiestopathwayevents.GenForm;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ActivityLiteVo;
import ims.core.vo.ActivityLiteVoCollection;
import ims.core.vo.lookups.ActivityStatusCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.scheduling.vo.lookups.LookupHelper;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.TreeNode;
import ims.framework.controls.TreeNodeCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.vo.ActivityStatusToPathwayEventVo;
import ims.scheduling.vo.ActivityStatusToPathwayEventVoCollection;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.Status_ReasonCollection;
public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();

	}

	private void populateDetails()
	{
		populateActivityCombo();
		populateStatusCombo();
	}

	private void populateStatusCombo()
	{
		Status_ReasonCollection cancellationTypeCollection = LookupHelper.getStatus_Reason(domain.getLookupService());

		form.ctnDetails().cmbStatus().clear();

		for (int i = 0; i < cancellationTypeCollection.size(); i++)
		{
			form.ctnDetails().cmbStatus().newRow(cancellationTypeCollection.get(i), cancellationTypeCollection.get(i).getText());
		}
	}

	private void populateActivityCombo()
	{
		ActivityLiteVoCollection activities = domain.listActivities();

		form.ctnDetails().cmbActivity().clear();
		for (int i = 0; i < activities.size(); i++)
		{
			form.ctnDetails().cmbActivity().newRow(activities.get(i), activities.get(i).getName());
		}

	}

	private void populateTree()
	{
		ActivityStatusToPathwayEventVoCollection ActivitiesToPathVoColl = domain.listActivitiesToPathwayEventsLinks();

		ActivityStatusToPathwayEventVo linkNode = new ActivityStatusToPathwayEventVo();

		populateActivities(ActivitiesToPathVoColl);

		for (int i = 0; i < form.treList().getNodes().size(); i++)
		{

			if (form.treList().getNodes().get(i).getValue() instanceof ActivityStatusToPathwayEventVo)
			{
				linkNode = (ActivityStatusToPathwayEventVo) form.treList().getNodes().get(i).getValue();

			}

			for (int j = 0; j < ActivitiesToPathVoColl.size(); j++)
				if (ActivitiesToPathVoColl.get(j).getActivity().getID_Activity().equals(linkNode.getActivity().getID_Activity()))
				{

					fillTreeNode(form.treList().getNodes().get(i), ActivitiesToPathVoColl.get(j));
				}

		}

	}

	private void populateActivities(ActivityStatusToPathwayEventVoCollection activitiesToPathVoColl)
	{
		ActivityStatusToPathwayEventVoCollection counted = activitiesToPathVoColl.sort();
		ActivityStatusToPathwayEventVoCollection sorted = counted;

		ActivityLiteVoCollection activities = new ActivityLiteVoCollection();
		ActivityLiteVoCollection countedActivity = new ActivityLiteVoCollection();

		for (int g = 0; g < activitiesToPathVoColl.size(); g++)
		{
			activities.add(activitiesToPathVoColl.get(g).getActivity());
		}

		int j;

		for (j = 0; j < counted.size(); j++)
		{

			if (activities.contains(counted.get(j).getActivity()) && (!countedActivity.contains(counted.get(j).getActivity())))
			{
				countedActivity.add(counted.get(j).getActivity());
				form.treList().getNodes().add(activitiesToPathVoColl.get(j), " Activity: " + activitiesToPathVoColl.get(j).getActivity().getName().toString());

			}

		}

	}

	private void fillTreeNode(TreeNode parentNode, ActivityStatusToPathwayEventVo activityStatusToPathwayEventVo)
	{

		parentNode.getNodes().add(activityStatusToPathwayEventVo, "Status: " + activityStatusToPathwayEventVo.getAppointmentStatus().toString() + "  -   Event: " + activityStatusToPathwayEventVo.getEvent().getName());

	}

	
	protected void onTreListTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().setCollapsed(true);
		
		
		if(form.treList().getSelectedNode().getParent() == null)
		{
			form.getLocalContext().setActivityStatusToPathwayEvent((ActivityStatusToPathwayEventVo) form.treList().getSelectedNode().getValue());
			
			for (int i = 0; i < form.treList().getNodes().size(); i++)
			{
			
				form.treList().getNodes().get(i).setExpanded(false);
				
			}
			form.treList().getSelectedNode().setExpanded(true);
		}
		else
		{
			form.ctnDetails().setCollapsed(false);
		
		}
		
		
		
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinksnewLinkItem().setVisible(false);
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinksnewLinkItem().setEnabled(false);
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinkseditLinkItem().setVisible(false);
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinkseditLinkItem().setEnabled(false);
		}

		if (form.treList().getSelectedNode().getParent() == null)
		{
			form.btnNew().setVisible(true);
			form.btnEdit().setVisible(false);

		}
		else if (!form.getMode().equals(FormMode.EDIT))
		{
			form.btnEdit().setVisible(true);
			form.btnNew().setVisible(false);
		}

		if (form.treList().getSelectedNode().getParent() == null && (!form.getMode().equals(FormMode.EDIT)))
		{
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinksnewLinkItem().setVisible(true);
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinksnewLinkItem().setEnabled(true);
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinkseditLinkItem().setVisible(false);
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinkseditLinkItem().setEnabled(false);
		}
		else if (!form.getMode().equals(FormMode.EDIT))
		{

			form.getContextMenus().Scheduling.getActivitiesToPathwayLinkseditLinkItem().setVisible(true);
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinkseditLinkItem().setEnabled(true);
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinksnewLinkItem().setVisible(false);
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinksnewLinkItem().setEnabled(false);
		}

		Object aNode = form.treList().getSelectedNode().getValue();
		if (aNode instanceof ActivityStatusToPathwayEventVo)
		{
			ActivityStatusToPathwayEventVo link = (ActivityStatusToPathwayEventVo) aNode;

			

			if (form.treList().getSelectedNode().getParent() == null)
			{
				form.ctnDetails().cmbActivity().setValue(link.getActivity());
				form.ctnDetails().cmbStatus().setValue(null);
				form.ctnDetails().txtEvent().setValue("");
				form.getLocalContext().setActivityStatusToPathwayEvent(null);
			}
			else
			{
				form.getLocalContext().setActivityStatusToPathwayEvent(link);
				form.ctnDetails().cmbActivity().setValue(link.getActivity());
				form.ctnDetails().cmbStatus().setValue(link.getAppointmentStatus());
				form.ctnDetails().txtEvent().setValue(link.getEvent().getName());
				form.getLocalContext().setEvent(link.getEvent());
			}

		}

	}


	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{

		form.getLocalContext().setEvent(null);
		form.ctnDetails().setCollapsed(false);
		if (form.btnEdit().isVisible())
			form.btnEdit().setVisible(false);
		form.btnNew().setVisible(false);
		form.getContextMenus().Scheduling.getActivitiesToPathwayLinksnewLinkItem().setVisible(false);
		
		clearDetails();
		form.setMode(FormMode.EDIT);

	}

	private void clearDetails()
	{

		if (form.treList().getSelectedNode() == null)
		{
			form.ctnDetails().cmbActivity().setValue(null);
			form.ctnDetails().cmbStatus().setValue(null);
			form.ctnDetails().txtEvent().setValue("");
			form.getLocalContext().setActivityStatusToPathwayEvent(null);
			return;
		}
		if (form.treList().getSelectedNode() != null)
		{
			if (form.treList().getSelectedNode().getValue() != null)
			{

				Object treValue = form.treList().getSelectedNode().getValue();
				if (treValue instanceof ActivityStatusToPathwayEventVo)
				{

					ActivityStatusToPathwayEventVo parNodeValue = (ActivityStatusToPathwayEventVo) form.treList().getSelectedNode().getValue();
					form.ctnDetails().cmbActivity().setValue(parNodeValue.getActivity());
					form.ctnDetails().cmbStatus().setValue(null);
					form.ctnDetails().txtEvent().setValue("");
					form.getLocalContext().setActivityStatusToPathwayEvent(null);
				}

				TreeNode parentNode = form.treList().getSelectedNode();

				TreeNodeCollection childrenNodes = parentNode.getNodes();

				for (int iNode = 0; iNode < childrenNodes.size(); iNode++)
				{

					Object aNode = childrenNodes.get(iNode).getValue();

					if (aNode instanceof ActivityStatusToPathwayEventVo)
					{
						ActivityStatusToPathwayEventVo usedLink = (ActivityStatusToPathwayEventVo) childrenNodes.get(iNode).getValue();

						form.ctnDetails().cmbStatus().removeRow(usedLink.getAppointmentStatus());

					}
				}
			}
		}
	}

	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		form.getLocalContext().setSelectedTreeNodeValue(null);
		form.getLocalContext().setActivityStatusToPathwayEvent(null);
		form.setMode(FormMode.EDIT);
		form.btnEdit().setVisible(false);
		form.getContextMenus().Scheduling.getActivitiesToPathwayLinkseditLinkItem().setVisible(false);
		form.ctnDetails().setCollapsed(false);
		ActivityStatusToPathwayEventVo selectedNode = new ActivityStatusToPathwayEventVo();
		selectedNode = (ActivityStatusToPathwayEventVo) form.treList().getSelectedNode().getValue();
		
		form.getLocalContext().setSelectedTreeNodeValue(selectedNode);
		selectedNode = null;
		
	}


	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save() == true)
		{

			try
			{
				if(domain.save(form.getLocalContext().getActivityStatusToPathwayEvent()))
				{
					
					engine.showMessage("This link already exists.","Warning",MessageButtons.OK,MessageIcon.ERROR);
					form.getLocalContext().setActivityStatusToPathwayEvent(null);
					return;
					
				}
			}
			catch (StaleObjectException e)
			{

				e.printStackTrace();
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setActivityStatusToPathwayEvent(null);
				open();
			}
			catch (UniqueKeyViolationException e)
			{
			
				e.printStackTrace();
				form.getLocalContext().setActivityStatusToPathwayEvent(null);
				open();
			}

			open();
		}
	}


	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}


	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{

		switch (menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.ActivitiesToPathwayLinks.editLink :

				
				form.getLocalContext().setSelectedTreeNodeValue(null);
				form.getLocalContext().setActivityStatusToPathwayEvent(null);
				form.ctnDetails().setCollapsed(false);
				form.btnEdit().setVisible(false);
				form.getContextMenus().Scheduling.getActivitiesToPathwayLinkseditLinkItem().setVisible(false);
				form.setMode(FormMode.EDIT);
			
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ActivitiesToPathwayLinks.newLink :

				form.getLocalContext().setSelectedTreeNodeValue(null);
				form.getLocalContext().setActivityStatusToPathwayEvent(null);
				form.ctnDetails().setCollapsed(false);
				clearDetails();
				form.getContextMenus().Scheduling.getActivitiesToPathwayLinksnewLinkItem().setVisible(false);
				form.btnNew().setVisible(false);
				form.setMode(FormMode.EDIT);

			break;
			
		
		}

	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{

		form.getLocalContext().setActivityStatusToPathwayEvent(null);
		form.getGlobalContext().Pathway.setSelectedEventLiteVo(null);
		updateControlsState();
		
		populateScreenFromData();
		
		

	}

	private void populateScreenFromData()
	{
		populateDetails();
		populateTree();
		
	}

	

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		ActivityStatusToPathwayEventVo actStatusToPathEvent = populateDataFromScreen();
		String[] errors = null;
		errors = actStatusToPathEvent.validate(errors);

		if (errors != null)
		{

			engine.showErrors(errors);
			form.getLocalContext().setActivityStatusToPathwayEvent(null);
			return false;
		}
		form.getLocalContext().setActivityStatusToPathwayEvent(actStatusToPathEvent);
		return true;
	}



	private ActivityStatusToPathwayEventVo getDetails()
	{
		ActivityStatusToPathwayEventVo actStatusToPathEvent = new ActivityStatusToPathwayEventVo();

	

	if (form.ctnDetails().cmbActivity().getValue() != null)
	{
		actStatusToPathEvent.setActivity(form.ctnDetails().cmbActivity().getValue());
	}

	if (form.ctnDetails().cmbStatus().getValue() != null)
	{
		actStatusToPathEvent.setAppointmentStatus(form.ctnDetails().cmbStatus().getValue());
	}

	if (form.getLocalContext().getEvent() != null)
	{
		
		actStatusToPathEvent.setEvent(form.getLocalContext().getEvent());
	}

	
	
	return actStatusToPathEvent;

	}

	private boolean linkUsed(ActivityStatusToPathwayEventVo activityStatusToPathwayEvent)
	{
		int count = 0;
		TreeNodeCollection nodes = form.treList().getNodes();

		for (int i = 0; i < nodes.size(); i++)
		{
			TreeNodeCollection childNodes = nodes.get(i).getNodes();

			for (int j = 0; j < childNodes.size(); j++)
			{
				Object nodeValue = childNodes.get(j).getValue();

				if (nodeValue instanceof ActivityStatusToPathwayEventVo)
				{
					ActivityStatusToPathwayEventVo nodeLink = (ActivityStatusToPathwayEventVo) nodeValue;
					if (nodeLink.getActivity().equals(activityStatusToPathwayEvent.getActivity()) && nodeLink.getAppointmentStatus().equals(activityStatusToPathwayEvent.getAppointmentStatus()) && nodeLink.getEvent().equals(activityStatusToPathwayEvent.getEvent()))
					{
						count++;
					}
				}
			}
		}

		if (count == 0)
		{
			return false;

		}
		return true;
	}

	private ActivityStatusToPathwayEventVo populateDataFromScreen()
	{
		ActivityStatusToPathwayEventVo actStatusToPathEvent = null;
		if (form.getLocalContext().getActivityStatusToPathwayEvent() != null)
		{

			actStatusToPathEvent = new ActivityStatusToPathwayEventVo();
			actStatusToPathEvent=form.getLocalContext().getActivityStatusToPathwayEvent();

		}
		else
		{

			actStatusToPathEvent = new ActivityStatusToPathwayEventVo();

		}

		if (form.ctnDetails().cmbActivity().getValue() != null)
		{
			actStatusToPathEvent.setActivity(form.ctnDetails().cmbActivity().getValue());
		}

		if (form.ctnDetails().cmbStatus().getValue() != null)
		{
			actStatusToPathEvent.setAppointmentStatus(form.ctnDetails().cmbStatus().getValue());
		}

		if (form.getLocalContext().getEvent() != null)
		{
			
			actStatusToPathEvent.setEvent(form.getLocalContext().getEvent());
		}

		form.getLocalContext().setActivityStatusToPathwayEvent(actStatusToPathEvent);
		
		return actStatusToPathEvent;

	}

	public void updateControlsState()
	{
		
		form.ctnDetails().setCollapsed(true);
		form.treList().clear();
		form.setMode(FormMode.VIEW);
		form.ctnDetails().txtEvent().setValue(null);
		form.btnEdit().setVisible(false);
		
		if (form.treList().getNodes().size() == 0 || form.treList().getSelectedNode() == null)
		{
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinksnewLinkItem().setVisible(true);
			form.getContextMenus().Scheduling.getActivitiesToPathwayLinksnewLinkItem().setEnabled(true);
			form.btnNew().setVisible(true);
		
		}
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	protected void onBtnSearch() throws PresentationLogicException
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			engine.open(form.getForms().Pathways.EventSearchAndSelectDialog);
		}
	}


	protected void onFormDialogClose(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Pathways.EventSearchAndSelectDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				form.getLocalContext().setEvent(form.getGlobalContext().Pathway.getSelectedEventLiteVo());

				form.ctnDetails().txtEvent().setValue(form.getLocalContext().getEvent().getName());

			}
		}
		
		form.getGlobalContext().Pathway.setSelectedEventLiteVo(null);
	}


	public void clearInstanceControls()
	{
		// TODO Auto-generated method stub
		
	}


	public void newInstance() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

}
