//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5196.22631)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.sessionmanagement;

import ims.RefMan.vo.CatsReferralForSessionManagementVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.LocationType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageDefaultButton;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.forms.sessionmanagement.GenForm.lyrTabsLayer.tabClinicViewContainer.grdSessionsRow;
import ims.scheduling.forms.sessionmanagement.GenForm.lyrTabsLayer.tabExtendedViewContainer.grdSlotsRow;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentForSessionManagementVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.ProfileLiteVo;
import ims.scheduling.vo.ProfileLiteVoCollection;
import ims.scheduling.vo.SessionManagementSearchCriteriaVo;
import ims.scheduling.vo.SessionManagementVo;
import ims.scheduling.vo.SessionManagementVoCollection;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.SessionSlotForSessionManagementVo;
import ims.scheduling.vo.SessionSlotForSessionManagementVoCollection;
import ims.scheduling.vo.SessionSlotStatusVo;
import ims.scheduling.vo.SessionSlotStatusVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.SessionVo;
import ims.scheduling.vo.lookups.Session_Status_and_Reason;
import ims.scheduling.vo.lookups.Status_Reason;

import java.text.SimpleDateFormat;
import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int ClinicView = 1;
	private static final int AvailabilityView = 2;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		updateControlsState();
	}

	private void initialise()
	{

		form.lblListOwners().setValue("");
		form.lyrTabs().tabExtendedView().btnBlockSession().setImage(form.getImages().Core.RedFlag);
		form.lyrTabs().tabExtendedView().btnCancelSession().setImage(form.getImages().Core.Delete);
		form.lyrTabs().tabExtendedView().btnMoveSession().setImage(form.getImages().Core.MoveTo);
		form.lyrTabs().tabExtendedView().btnAddComments().setImage(form.getImages().Core.Add);
		form.lyrTabs().tabExtendedView().btnAddSlot().setImage(form.getImages().Core.Add);
		form.lyrTabs().tabExtendedView().btnReOpen().setImage(form.getImages().Core.Tick);

		form.ccListOwner().initialize(MosType.HCP);
		populateHospitalCombo();
		populateServicesCombo();

		populateSearchCriteria();
	}

	private void populateServicesCombo()
	{
		form.cmbService().clear();

		ServiceVoCollection voCollServices = domain.listServices();

		for (int i = 0; i < voCollServices.size(); i++)
		{
			form.cmbService().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}

	}

	private void populateHospitalCombo()
	{
		form.cmbHospital().clear();

		LocationLiteVoCollection voLocColl = domain.listActiveHospitals();

		if (voLocColl != null)
		{
			for (LocationLiteVo hospital : voLocColl)
			{
				form.cmbHospital().newRow(hospital, hospital.getName());
			}
		}

		ILocation location = engine.getCurrentLocation();

		if (location != null)
		{
			LocationLiteVo hospitalForCurrentLocation = domain.getHospitalForCurrentLocation(location.getID());
			form.cmbHospital().setValue(hospitalForCurrentLocation);
		}

		populateLocationCombo();

	}

	private void populateLocationCombo()
	{
		form.cmbLocation().clear();

		if (form.cmbHospital().getValue() == null)
			return;

		if (form.cmbHospital().getValue().getType() != null && form.cmbHospital().getValue().getType().equals(LocationType.HOSP))
		{
			LocShortMappingsVoCollection voLocShortMapColl = domain.listActiveWardsForHospital(form.cmbHospital().getValue());

			if (voLocShortMapColl != null)
			{
				for (int i = 0; i < voLocShortMapColl.size(); i++)
				{
					LocShortMappingsVo voLocShortMap = voLocShortMapColl.get(i);
					form.cmbLocation().newRow(voLocShortMap, voLocShortMap.getName());
				}
			}
		}

	}

	private void populateSearchCriteria()
	{

		SessionManagementSearchCriteriaVo searchCriteria = form.getGlobalContext().Scheduling.getSessionManagementSearchCriteria();

		if (searchCriteria == null)
			return;

		form.cmbHospital().setValue(searchCriteria.getHospital());
		form.cmbLocation().setValue(searchCriteria.getLocation());

		if (searchCriteria.getProfile() != null)
		{
			form.qmbProfile().newRow(searchCriteria.getProfile(), searchCriteria.getProfile().getName());
			form.qmbProfile().setValue(searchCriteria.getProfile());
		}

		form.cmbService().setValue(searchCriteria.getService());
		form.dteFrom().setValue(searchCriteria.getDateFrom());
		form.dteTo().setValue(searchCriteria.getDateTo());

		if (searchCriteria.getListOwners() != null && searchCriteria.getListOwners().size() > 0)
		{
			if (searchCriteria.getListOwners().size() == 1)
			{
				form.ccListOwner().setValue(searchCriteria.getListOwners().get(0));
			}
			else
			{
				form.getGlobalContext().Scheduling.setSelectedHCPs(searchCriteria.getListOwners());
				populateListOwnersLabel(searchCriteria.getListOwners());

			}
		}

		doSearch();

	}

	private void populateListOwnersLabel(HcpLiteVoCollection listOwners)
	{
		form.ccListOwner().clear();
		form.lblListOwners().setValue("");
		
		if (listOwners == null)
			return;
		
		StringBuffer namesString = new StringBuffer();

		for (int i = 0; i < listOwners.size(); i++)
		{
			HcpLiteVo listOwner = listOwners.get(i);

			if (listOwner != null && listOwner.getName() != null)
			{
				if (i == 0)
					namesString.append(listOwner.getName());
				else
					namesString.append(", " + listOwner.getName());
			}
		}

		if (namesString.length() > 80)
		{
			form.lblListOwners().setValue(namesString.substring(0, 80) + "...");
		}
		else
			form.lblListOwners().setValue(namesString.toString());

		form.lblListOwners().setTooltip(namesString.toString());

	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Scheduling.HcpMultipleSelectDialog) && DialogResult.OK.equals(result))
		{
			populateListOwnersLabel(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}
		else if (formName.equals(form.getForms().Scheduling.SessionSlotDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				SessionSlotVo voSlot = form.getGlobalContext().Scheduling.getSessionSlot();
				
				SessionManagementVo domainSession = domain.getSessionManagementVo(form.getLocalContext().getSelectedSession());
				
				if (form.getLocalContext().getSelectedSession().getVersion_Sch_Session() != domainSession.getVersion_Sch_Session())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					updateScreenForRecord(domainSession);
					return;
				}
				
				try
				{
					domain.addSlotToSession(form.getLocalContext().getSelectedSession(), voSlot);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					
				}

				updateScreenForRecord(null);
				
			}

			form.getGlobalContext().Scheduling.setSessionSlot(null);
		}
		else if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK) && Boolean.TRUE.equals(form.getLocalContext().getCancelSessionActioned()))
			{
				
				SessionVo domainSession = domain.getSessionVo(form.getLocalContext().getSelectedSession());
				
				if (isAppInSession(domainSession))
				{
					form.getLocalContext().setCancelAppConfirmationMessageBoxID(engine.showMessage("There are appointments already booked for this Session. These appointments will be cancelled. Do you wish to continue?", "Confirmation message", MessageButtons.YESNO, MessageIcon.QUESTION, MessageDefaultButton.BUTTON1));//WDEV-18528
				}
				else
				{
					cancelSession(false, domainSession);
					updateScreenForRecord(null);
				}
			}
			else if(result.equals(DialogResult.OK))
			{
				Booking_AppointmentVo voAppt = cancelAppt(false);
				
				if(voAppt == null)
				{
					updateScreenForRecord(null);
					return;
				}
				
				// rebook
				if(form.getGlobalContext().Scheduling.getApptCancelStatus() != null && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected()))
				{	
					//if(voAppt.getTheatreBookingIsNotNull())
					//	rebookTheatreAppt(domain.getTheatreAppointment(voAppt), null);
					//else
						rebookAppt(voAppt, null);
					return;
				}
				
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(null);
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingSession(null);
				form.getGlobalContext().ChooseAndBook.setisCABAppt(null);
			}
			
			form.getGlobalContext().Core.setPatientShort(null);
			updateScreenForRecord(null);
		}
		else if(formName.equals(form.getForms().Scheduling.ReasonTextDialog) && DialogResult.OK.equals(result))
		{
			updateSessionStatus(form.getLocalContext().getSelectedSession(), Session_Status_and_Reason.BLOCKED);
		}
		else if(formName.equals(form.getForms().RefMan.BookAppointmentDialog))
		{
			form.getGlobalContext().Core.setPatientShort(null);
			updateScreenForRecord(null);
		}
	}
	
	private Booking_AppointmentVo cancelAppt(Boolean tciCancelation) 
	{
		BookingAppointmentForSessionManagementVo voAppt = form.lyrTabs().tabExtendedView().grdSlots().getValue().getAppointment();
		
		if(voAppt == null)
			return null;
		
		Booking_AppointmentVo voApptFull = domain.getBookingAppointment(voAppt);
			
		if (voApptFull.getApptStatusIsNotNull() && voAppt.getApptStatusIsNotNull()
			&&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
		{
			engine.showMessage("The Status of the appointment has already been changed.");
			return null;
		}
			
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
		{
			// appt status and status history
			voApptFull.setApptStatus(Status_Reason.CANCELLED);
			
			// wdev-6034
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voApptFull.setCurrentStatusRecord(voApptStatus);

			voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull, Status_Reason.CANCELLED, voApptStatus));
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptFull.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
					voApptFull.setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
			}
		}
		if (voApptFull.getSessionSlotIsNotNull())
			voApptFull.getSessionSlot().setStatus(voApptFull.getSession().getAppropiateSessionSlotStatus()); 
		
		String[] arrErrors = voApptFull.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return null;
		}

		try 
		{
			if (tciCancelation)
				voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");
			else
				voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Session Management");
		
			domain.updateCatsReferralAdditionalInvStatus(form.lyrTabs().tabExtendedView().grdSlots().getValue().getCatsReferral());
			
			domain.updateCatsReferralCancelStatus(form.lyrTabs().tabExtendedView().grdSlots().getValue().getCatsReferral());
			
			/*
			if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && voApptFull.getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelTCI())) //WDEV-18249
			{
				domain.cancelTCIAndReferralEROD(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull, Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()), Status_Reason.PATIENTCANCELLED.equals(voApptFull.getApptStatusReas()), form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelledForNonMedicalReason());//WDEV-18249,wdev-18419
			}
			*/
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return null;
		}
		
		return voApptFull;
	}

	private void rebookAppt(Booking_AppointmentVo voAppt, BookingAppointmentForSessionManagementVo apptFromGrid)
	{		
		
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null && voAppt.getApptStatusIsNotNull() && apptFromGrid != null
			&& apptFromGrid.getApptStatusIsNotNull() && ! voAppt.getApptStatus().equals(apptFromGrid.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
		}
		else if (voAppt != null  && Boolean.TRUE.equals(voAppt.getRequiresRebook()) && !isTheatreAppt
			&& (Status_Reason.CANCELLED.equals(voAppt.getApptStatus()) || Status_Reason.DNA.equals(voAppt.getApptStatus())))
		{
			form.getGlobalContext().Scheduling.setBookingAppointment(voAppt);
			form.getGlobalContext().Scheduling.setBookingService(voAppt.getSessionIsNotNull() ? voAppt.getSession().getService() : null);
			form.getGlobalContext().Scheduling.setBookingActivity(voAppt.getActivityIsNotNull() ? voAppt.getActivity() : null);
			
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.lyrTabs().tabExtendedView().grdSlots().getSelectedRow().getValue().getAppointment().getPatient()));
			form.getGlobalContext().RefMan.setCatsReferral(form.lyrTabs().tabExtendedView().grdSlots().getSelectedRow().getValue().getCatsReferral());
			bookAppt();
		}
	}

	private void bookAppt()
	{
		
		if (isReferralEndOfCare())
			return;

		engine.open(form.getForms().RefMan.BookAppointmentDialog);
		
	}

	private boolean isReferralEndOfCare()
	{
		CatsReferralForSessionManagementVo catsReferral = domain.getCatsReferralForAppointment(form.lyrTabs().tabExtendedView().grdSlots().getSelectedRow().getValue().getAppointment());
		
		if (catsReferral != null && catsReferral.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(catsReferral.getCurrentStatus().getReferralStatus()))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			return true;
		}
		else
			return false;
	}

	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				//--------------
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
				///-----------
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
	
	
	private void updateSessionStatus(SessionManagementVo session, Session_Status_and_Reason lkpInstance)
	{
		SessionVo voSession = domain.getSessionVo(session);
		
		if(voSession == null)
			return;
		
		if (session.getVersion_Sch_Session() !=  voSession.getVersion_Sch_Session())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			updateScreenForRecord(null);
			return;
		}
		
		if(lkpInstance != null)
		{
			if(!lkpInstance.equals(Session_Status_and_Reason.OPEN))
			{
				//validation - go through all slots if any have status of cancelled pending appt send error message to user
				if(voSession.getSessionSlotsIsNotNull())
				{
					for(int i=0;i<voSession.getSessionSlots().size();i++)
					{
						if(voSession.getSessionSlots().get(i).getStatus().equals(Status_Reason.CANCELLED_PENDING_APPT))
						{
							engine.showMessage("Some Session Slots cannot be Cancelled as they are pending confirmation from ChooseAndBook");
							return;
						}
					}
				}
			}
		}
		
		if(lkpInstance == null)
		{
			voSession.setIsActive(Boolean.FALSE);
		}
		else
		{
			voSession.setSessionStatus(lkpInstance);
			
			if(lkpInstance.equals(Session_Status_and_Reason.BLOCKED))
			{
				voSession.setComment(form.getGlobalContext().Core.getCommentDialogString());
				
				for(int i=0;i<voSession.getSessionSlots().size();i++)
				{
					if(voSession.getSessionSlots().get(i).getAppointment() == null)
					{
						voSession.getSessionSlots().get(i).setStatus(Status_Reason.BLOCKED); 
						voSession.getSessionSlots().get(i).setStatusReason(Status_Reason.BLOCKED);
						voSession.getSessionSlots().get(i).setStatusReasonHistory(getSessionStatusHistory(voSession.getSessionSlots().get(i), Status_Reason.BLOCKED));							
					}
				}
			}
			else if(lkpInstance.equals(Session_Status_and_Reason.CANCELLED))
			{
				for(int i=0;i<voSession.getSessionSlots().size();i++)
				{
					voSession.getSessionSlots().get(i).setStatus(Status_Reason.CANCELLED);
					
					if(voSession.getSessionSlots().get(i).getAppointmentIsNotNull())
					{
						voSession.getSessionSlots().get(i).getAppointment().setApptStatus(Status_Reason.CANCELLED);
						voSession.getSessionSlots().get(i).getAppointment().setApptStatusReas(form.getGlobalContext().ChooseAndBook.getSessionSlotStatusReason());
						Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
						
						voSession.getSessionSlots().get(i).getAppointment().setApptStatusHistory(getApptStatusHistory(voSession.getSessionSlots().get(i),Status_Reason.CANCELLED, voApptStatus));
						voSession.getSessionSlots().get(i).getAppointment().setCurrentStatusRecord(voApptStatus);
						voSession.getSessionSlots().get(i).setStatus(Status_Reason.CANCELLED_PENDING_APPT);
						voSession.getSessionSlots().get(i).setStatusReasonHistory(getSessionStatusHistory(voSession.getSessionSlots().get(i),Status_Reason.CANCELLED_PENDING_APPT));
					}
					else
					{
						voSession.getSessionSlots().get(i).setStatusReason(form.getGlobalContext().ChooseAndBook.getSessionSlotStatusReason());	
						voSession.getSessionSlots().get(i).setStatusReasonHistory(getSessionStatusHistory(voSession.getSessionSlots().get(i), Status_Reason.CANCELLED));
					}
				}
			}
			else if(lkpInstance.equals(Session_Status_and_Reason.OPEN))
			{
				for(int i=0;i<voSession.getSessionSlots().size();i++)
				{
					
					if(voSession.getSessionSlots().get(i).getAppointment() == null)
					{
						voSession.getSessionSlots().get(i).setStatus(Status_Reason.SLOTOPENED);
						voSession.getSessionSlots().get(i).setStatusReason(Status_Reason.SLOTOPENED);
						voSession.getSessionSlots().get(i).setStatusReasonHistory(getSessionStatusHistory(voSession.getSessionSlots().get(i), Status_Reason.SLOTOPENED));
						voSession.getSessionSlots().get(i).setIsActive(true);
					}
					else	
					{
						if( voSession.getSessionSlots().get(i) != null && voSession.getSessionSlots().get(i).getStatusIsNotNull() && voSession.getSessionSlots().get(i).getStatus().equals(Status_Reason.CANCELLED))
						{
							voSession.getSessionSlots().get(i).setStatus(Status_Reason.SLOTOPENED);
							voSession.getSessionSlots().get(i).setAppointment(null);
							voSession.getSessionSlots().get(i).setIsActive(true);
						}
											
					}
				}				
			}
		}
			
		String[] arrErrors = voSession.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try 
		{
			domain.saveSession(voSession, false);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		updateScreenForRecord(null);
		
	}

	private Appointment_StatusVoCollection getApptStatusHistory(SessionSlotVo voSessionSlot, Status_Reason status, Appointment_StatusVo voApptStatus)
	{
		voApptStatus.setApptDate(voSessionSlot.getAppointment().getAppointmentDate());
		voApptStatus.setApptTime(voSessionSlot.getStartTm());
		voApptStatus.setStatus(status);
		voApptStatus.setStatusReason(form.getGlobalContext().ChooseAndBook.getSessionSlotStatusReason());
		
		voApptStatus.setDoS(/*get Directory of service record from slot by booking ubrn*/null);
		voApptStatus.setPriority(voSessionSlot.getPriority());
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voSessionSlot.getAppointment().getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}

	private SessionSlotStatusVoCollection getSessionStatusHistory(SessionSlotVo voSessionSlot, Status_Reason status)
	{
		SessionSlotStatusVoCollection voCollStatusHistory = voSessionSlot.getStatusReasonHistory();
		
		if(voCollStatusHistory == null)
			voCollStatusHistory = new SessionSlotStatusVoCollection();
		
		SessionSlotStatusVo voSlotStatus = new SessionSlotStatusVo();
		voSlotStatus.setDateTime(new DateTime());
		//TODO
		//voSlotStatus.setUBRN(voSessionSlot.getUBRN());
		voSlotStatus.setStatus(status);
		voSlotStatus.setStatusReason(form.getGlobalContext().ChooseAndBook.getSessionSlotStatusReason());
		voCollStatusHistory.add(voSlotStatus);
		
		return voCollStatusHistory;
	}

	private void updateScreenForRecord(SessionManagementVo session)
	{
		if (session == null)
			session = domain.getSessionManagementVo(form.getLocalContext().getSelectedSession());
		
		if (session == null)
			return;
			
		grdSessionsRow row = form.lyrTabs().tabClinicView().grdSessions().getSelectedRow();
		
		row.setColSessionDate(session.getSessionDate() != null ? session.getSessionDate().toString() : "");

		row.setColSessionName(session.getName() != null ? session.getName() : "");
		row.setTooltipForColSessionName(row.getColSessionName());

		row.setColStartTime(session.getStartTm() != null ? session.getStartTm().toString() : "");
		row.setColEndTime(session.getEndTm() != null ? session.getEndTm().toString() : "");

		row.setColService(session.getService() != null && session.getService().getServiceName() != null ? session.getService().getServiceName() : "");
		row.setTooltipForColService(row.getColService());

		row.setColLocation(session.getSchLocation() != null && session.getSchLocation().getName() != null ? session.getSchLocation().getName() : "");
		row.setTooltipForColLocation(row.getColLocation());

		row.setColStatus(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? session.getSessionStatus().getText() : "");
		row.setTooltipForColStatus(row.getColStatus());

		row.setValue(session);
		
		form.getLocalContext().setSelectedSession(session);
		
		populateExtendedView(domain.getSlotsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
		
		updateControlsState();
		
	}

	private void cancelSession(boolean cancelAppointment, SessionVo session)
	{
		if(form.getGlobalContext().Scheduling.getApptCancelStatus() != null)
		{
			
			if (form.getLocalContext().getSelectedSession().getVersion_Sch_Session() !=  session.getVersion_Sch_Session())
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			
			boolean isFlexibleSession = !Boolean.TRUE.equals(session.getIsFixed()) && (session.getSessionSlots() == null || session.getSessionSlots().size() == 0);
			
			try 
			{
				domain.cancelSession(session, form.getGlobalContext().Scheduling.getApptCancelStatus(), cancelAppointment, isFlexibleSession);
			}
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}	
		}
		
	}

	private boolean isAppInSession(SessionVo session)
	{
		if (session==null || (session.getSessionSlots()==null && session.getTheatreSlots()==null) || (!Boolean.TRUE.equals(session.getIsFixed()) && session.getRemainingTime() != null && session.getRemainingTime().equals(session.getDuration())))
			return false;
		
		if (!Boolean.TRUE.equals(session.getIsFixed()) && session.getRemainingTime() != null && session.getRemainingTime().compareTo(session.getDuration()) < 0) //WDEV-19046
			return true;
		
		for (int i=0;i<session.getSessionSlots().size();i++)
		{
			if (session.getSessionSlots().get(i).getAppointmentIsNotNull())
				return true;
		}
		
		for (int i=0;i<session.getTheatreSlots().size();i++)
		{
			if (session.getTheatreSlots().get(i).getAppointmentIsNotNull())
				return true;
		}
		return false;
	}

	@Override
	protected void onlyrTabsTabChanged(ims.framework.LayerBridge tab)
	{
		// TODO Add your code here.
	}

	@Override
	protected void onBtnAddSlotClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addSessionSlot();
		
	}

	private void addSessionSlot()
	{
		form.getGlobalContext().Scheduling.setSessionSlot(null);
		form.getGlobalContext().Scheduling.setDirectoryofServicesCollection(form.getLocalContext().getSelectedSession() != null ? form.getLocalContext().getSelectedSession().getDirectoryofServices() : null);
		form.getGlobalContext().Scheduling.setSelectedSessionListOwners(form.getLocalContext().getSelectedSession() != null ? form.getLocalContext().getSelectedSession().getListOwners() : null);
		engine.open(form.getForms().Scheduling.SessionSlotDialog, new Object[] { domain.getSessionShortVo(form.getLocalContext().getSelectedSession()) });
		
	}

	@Override
	protected void onBtnAddCommentsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
	}

	@Override
	protected void onBtnMoveSessionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
	}

	@Override
	protected void onBtnCancelSessionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (chooseAndBookAppInSession(form.getLocalContext().getSelectedSession()))
		{
			engine.showMessage("Session cannot be Cancelled as there are C&B appointments linked.");
			return;
		}
		
		form.getLocalContext().setCancelSessionActioned(true);
		engine.open(form.getForms().Scheduling.CancelAppointmentDialog, new Object[]{true}, "Cancel Session");
	}

	//WDEV-19329
	private boolean chooseAndBookAppInSession(SessionManagementVo session)
	{
		
		if (ConfigFlag.DOM.ALLOW_BLOCK_SESSION_WITH_CAB_APPTS.getValue())
			return false;
		
		SessionSlotForSessionManagementVoCollection sessionSlots = domain.getSlotsForSession(session);
		
		if (sessionSlots == null || sessionSlots.size() == 0)
			return false;
		
		for (int i=0;i < sessionSlots.size();i++)
		{
			if (sessionSlots.get(i).getAppointment() != null && Boolean.TRUE.equals(sessionSlots.get(i).getAppointment().getIsCABBooking()) && !Status_Reason.CANCELLED.equals(sessionSlots.get(i).getAppointment().getApptStatus()))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onBtnBlockSessionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (chooseAndBookAppInSession(form.getLocalContext().getSelectedSession()))
		{
			engine.showMessage("Session cannot be Blocked as there are C&B appointments linked.");
			return;
		}
		
		engine.open(form.getForms().Scheduling.ReasonTextDialog);
		
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria();
		clearTabs();
		form.lyrTabs().showtabClinicView();
		updateControlsState();

	}

	private void clearTabs()
	{
		form.lyrTabs().tabClinicView().grdSessions().getRows().clear();

		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getColumns().clear();
		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getRows().clear();

		form.lyrTabs().tabExtendedView().pnlSessionInfo().setValue(" ");
		form.lyrTabs().tabExtendedView().grdSlots().getRows().clear();

		form.getLocalContext().setSelectedTab(null);
		form.getLocalContext().setSelectedSession(null);
		
		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		form.getGlobalContext().Scheduling.setBookingService(null);
		form.getGlobalContext().Scheduling.setBookingActivity(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setPatientShort(null);
	}

	private void clearSearchCriteria()
	{
		form.cmbHospital().setValue(null);
		form.cmbLocation().setValue(null);
		form.qmbProfile().clear();
		form.cmbService().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.ccListOwner().clear();
		form.lblListOwners().setValue("");

		form.getGlobalContext().Scheduling.setSessionManagementSearchCriteria(null);
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);

	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearTabs();

		form.lyrTabs().showtabClinicView();

		if (!validateSearchCriteria())
		{
			updateControlsState();
			return;
		}

		populateSearchCriteriaFromScreen();

		doSearch();
	}

	private void doSearch()
	{

		SessionManagementVoCollection sessions = domain.listSessions(form.getGlobalContext().Scheduling.getSessionManagementSearchCriteria());

		if (sessions == null || sessions.size() == 0)
		{
			engine.showMessage("No matching Sessions found.");
			updateControlsState();
			return;
		}

		populateClinicView(sessions);
		populateAvailabilityView(sessions);

		updateControlsState();
	}

	private void updateControlsState()
	{
		form.getContextMenus().Scheduling.hideAllSessionManagementMenuItems();

		SessionSlotForSessionManagementVo slot = form.lyrTabs().tabExtendedView().grdSlots().getValue();
		
		boolean sessionSelected = form.getLocalContext().getSelectedSession() != null;
		boolean sessionBlocked = sessionSelected && Session_Status_and_Reason.BLOCKED.equals(form.getLocalContext().getSelectedSession().getSessionStatus());
		boolean sessionCancelled = sessionSelected && Session_Status_and_Reason.CANCELLED.equals(form.getLocalContext().getSelectedSession().getSessionStatus());
		boolean sessionOpen = sessionSelected && Session_Status_and_Reason.OPEN.equals(form.getLocalContext().getSelectedSession().getSessionStatus());
		
		boolean slotOpened = slot != null && Status_Reason.SLOTOPENED.equals(form.lyrTabs().tabExtendedView().grdSlots().getValue().getStatus());
		boolean hasAppointment = slot != null && form.lyrTabs().tabExtendedView().grdSlots().getValue().getAppointment() != null;
		boolean isChooseAndBookAppt = hasAppointment && Boolean.TRUE.equals(form.lyrTabs().tabExtendedView().grdSlots().getValue().getAppointment().getIsCABBooking());
		//boolean apptCancelled = hasAppointment && Status_Reason.CANCELLED.equals(form.lyrTabs().tabExtendedView().grdSlots().getValue().getAppointment().getApptStatus());
		boolean apptBooked = hasAppointment && Status_Reason.BOOKED.equals(form.lyrTabs().tabExtendedView().grdSlots().getValue().getAppointment().getApptStatus());
		boolean apptReqRebook = hasAppointment && Boolean.TRUE.equals(form.lyrTabs().tabExtendedView().grdSlots().getValue().getAppointment().getRequiresRebook());
		boolean theatreAppt = hasAppointment && form.lyrTabs().tabExtendedView().grdSlots().getValue().getAppointment().getTheatreBooking() != null;
		
		
		ReferralApptStatus statusLookup = null;
		
		if (slot != null && slot.getCatsReferral() != null && slot.getCatsReferral().getCurrentStatus() != null)
			statusLookup = slot.getCatsReferral().getCurrentStatus().getReferralStatus();
		
		boolean referralWasAccepted = statusLookup != null && (statusLookup.equals(ReferralApptStatus.REFERRAL_ACCEPTED) 
		|| statusLookup.equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED) 
		|| statusLookup.equals(ReferralApptStatus.ACTIVE_MONITORING) 
		|| statusLookup.equals(ReferralApptStatus.DISCHARGED) 
		|| statusLookup.equals(ReferralApptStatus.APPOINTMENTBOOKED));

		boolean icpCompleted = slot != null && domain.isReferralICPCompleted(slot.getCatsReferral());
		
		//form.getContextMenus().Scheduling.getSessionManagementREMOVE_SLOTItem().setVisible(false);
		//form.getContextMenus().Scheduling.getSessionManagementREOPENItem().setVisible(false);
		form.getContextMenus().Scheduling.getSessionManagementADD_SLOTItem().setVisible(sessionSelected);
		form.getContextMenus().Scheduling.getSessionManagementBLOCK_SLOTItem().setVisible(slotOpened);
		form.getContextMenus().Scheduling.getSessionManagementCANCEL_SLOTItem().setVisible(slotOpened);

		form.getContextMenus().Scheduling.getSessionManagementADD_COMMENTSItem().setVisible(hasAppointment && !isChooseAndBookAppt);
		form.getContextMenus().Scheduling.getSessionManagementCANCEL_APPOINTMENTItem().setVisible(!isChooseAndBookAppt && apptBooked);
		form.getContextMenus().Scheduling.getSessionManagementDO_NOT_MOVEItem().setVisible(hasAppointment && !isChooseAndBookAppt);
		
		form.getContextMenus().Scheduling.getSessionManagementREBOOK_APPOINTMENTItem().setVisible(!isChooseAndBookAppt && !theatreAppt && !icpCompleted && apptReqRebook && referralWasAccepted);

		form.lnkreturnToList().setEnabled(form.getLocalContext().getSelectedTab() != null);

		form.lyrTabs().tabExtendedView().btnBlockSession().setEnabled(sessionOpen);
		form.lyrTabs().tabExtendedView().btnCancelSession().setEnabled(sessionOpen);
		form.lyrTabs().tabExtendedView().btnMoveSession().setEnabled(sessionSelected);
		form.lyrTabs().tabExtendedView().btnAddComments().setEnabled(sessionSelected);
		form.lyrTabs().tabExtendedView().btnAddSlot().setEnabled(sessionSelected);
		form.lyrTabs().tabExtendedView().btnReOpen().setEnabled(sessionBlocked || sessionCancelled);
		form.lyrTabs().tabAvailabilityView().setHeaderVisible(false);
		
	}

	private boolean validateSearchCriteria()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
		{
			listOfErrors.add("Date From cannot be greater than Date To.");

		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}

		return true;
	}

	private void populateSearchCriteriaFromScreen()
	{
		SessionManagementSearchCriteriaVo searchCriteria = new SessionManagementSearchCriteriaVo();

		searchCriteria.setHospital(form.cmbHospital().getValue());
		searchCriteria.setLocation(form.cmbLocation().getValue());
		searchCriteria.setProfile(form.qmbProfile().getValue());
		searchCriteria.setService(form.cmbService().getValue());
		searchCriteria.setDateFrom(form.dteFrom().getValue());
		searchCriteria.setDateTo(form.dteTo().getValue());

		if (form.ccListOwner().getValue() != null)
		{
			HcpLiteVoCollection hcpCollection = new HcpLiteVoCollection();
			hcpCollection.add(form.ccListOwner().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccListOwner().getValue() : null);
			searchCriteria.setListOwners(hcpCollection);
		}
		else if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null && form.getGlobalContext().Scheduling.getSelectedHCPs().size() > 0)
		{
			searchCriteria.setListOwners(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}

		form.getGlobalContext().Scheduling.setSessionManagementSearchCriteria(searchCriteria);
	}

	private void populateClinicView(SessionManagementVoCollection sessions)
	{

		form.lyrTabs().tabClinicView().grdSessions().getRows().clear();

		if (sessions == null || sessions.size() == 0)
			return;

		for (int i = 0; i < sessions.size(); i++)
		{
			grdSessionsRow newRow = form.lyrTabs().tabClinicView().grdSessions().getRows().newRow();

			SessionManagementVo session = sessions.get(i);

			if (session == null)
				continue;

			newRow.setColSessionDate(session.getSessionDate() != null ? session.getSessionDate().toString() : "");

			newRow.setColSessionName(session.getName() != null ? session.getName() : "");
			newRow.setTooltipForColSessionName(newRow.getColSessionName());

			newRow.setColStartTime(session.getStartTm() != null ? session.getStartTm().toString() : "");
			newRow.setColEndTime(session.getEndTm() != null ? session.getEndTm().toString() : "");

			newRow.setColService(session.getService() != null && session.getService().getServiceName() != null ? session.getService().getServiceName() : "");
			newRow.setTooltipForColService(newRow.getColService());

			newRow.setColLocation(session.getSchLocation() != null && session.getSchLocation().getName() != null ? session.getSchLocation().getName() : "");
			newRow.setTooltipForColLocation(newRow.getColLocation());

			newRow.setColStatus(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? session.getSessionStatus().getText() : "");
			newRow.setTooltipForColStatus(newRow.getColStatus());

			newRow.setValue(sessions.get(i));
		}

	}

	private void populateAvailabilityView(SessionManagementVoCollection sessions)
	{
		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getColumns().clear();
		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getRows().clear();

		if (sessions == null || sessions.size() == 0)
			return;

	}

	@Override
	protected void onImbAddListOwnersClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.HcpMultipleSelectDialog);
	}

	@Override
	protected void onQmbProfileTextSubmited(String value) throws PresentationLogicException
	{
		populateProfiles(value);

	}

	private void populateProfiles(String value)
	{
		form.qmbProfile().clear();

		if (value == null || value.length() == 0)
			return;

		ProfileLiteVoCollection profiles = domain.listProfiles(value);

		if (profiles == null || profiles.size() == 0)
			return;

		for (ProfileLiteVo profile : profiles)
		{
			if (profile == null)
				continue;

			form.qmbProfile().newRow(profile, profile.getName());
		}

		if (profiles.size() == 1)
		{
			form.qmbProfile().setValue(profiles.get(0));
		}
		else
		{
			form.qmbProfile().showOpened();
		}

	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		
		BookingAppointmentForSessionManagementVo gridAppt = null;
		
		switch (menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.ADD_SLOT:
				addSessionSlot();
				break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.BLOCK_SLOT:
				updateSlotStatus(Status_Reason.BLOCKED);
				break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.CANCEL_SLOT:
				updateSlotStatus(Status_Reason.CANCELLED);
				break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.CANCEL_APPOINTMENT:
				
				form.getLocalContext().setCancelSessionActioned(false);
				gridAppt = form.lyrTabs().tabExtendedView().grdSlots().getSelectedRow().getValue().getAppointment();
				
				Booking_AppointmentVo voAppt = domain.getBookingAppointment(gridAppt);
				cancelAppointment(voAppt, gridAppt);
				break;	
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.REBOOK_APPOINTMENT:
				
				form.getLocalContext().setCancelSessionActioned(false);
				gridAppt = form.lyrTabs().tabExtendedView().grdSlots().getSelectedRow().getValue().getAppointment();
				
				voAppt = domain.getBookingAppointment(gridAppt);
				rebookAppt(voAppt, gridAppt);
				break;
		}

	}

	private void updateSlotStatus(Status_Reason status)
	{
		SessionManagementVo session = form.getLocalContext().getSelectedSession();

		SessionVo voSession = domain.getSessionVo(session);

		if (voSession == null)
			return;

		if (session.getVersion_Sch_Session() != voSession.getVersion_Sch_Session())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			updateScreenForRecord(null);
			return;
		}

		SessionSlotForSessionManagementVo slot = form.lyrTabs().tabExtendedView().grdSlots().getSelectedRow().getValue();

		int remainingSlots = voSession.getRemainingSlots();
		remainingSlots -= 1;

		if (remainingSlots < 0)
			remainingSlots = 0;

		voSession.setRemainingSlots(remainingSlots);

		if (voSession.getSessionSlots() != null)
		{
			for (int i = 0; i < voSession.getSessionSlots().size(); i++)
			{
				if (voSession.getSessionSlots().get(i) == null || voSession.getSessionSlots().get(i).getID_Session_Slot() == null)
					continue;

				if (voSession.getSessionSlots().get(i).getID_Session_Slot().equals(slot.getID_Session_Slot()))
				{
					SessionSlotVo slotToUpdate = voSession.getSessionSlots().get(i);
					
					slotToUpdate.setStatus(status);
					slotToUpdate.setStatusReason(status);
					
					SessionSlotStatusVoCollection voCollStatusHistory = slotToUpdate.getStatusReasonHistory();
					
					//update slot status history
					if(voCollStatusHistory == null)
						voCollStatusHistory = new SessionSlotStatusVoCollection();
					
					SessionSlotStatusVo voSlotStatus = new SessionSlotStatusVo();
					voSlotStatus.setDateTime(new DateTime());
					voSlotStatus.setStatus(status);
					voSlotStatus.setStatusReason(status);
					
					voCollStatusHistory.add(voSlotStatus);
					slotToUpdate.setStatusReasonHistory(voCollStatusHistory);
					
					break;
				}
			}
		}

		String[] arrErrors = voSession.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			voSession = domain.saveSession(voSession, true);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		updateScreenForRecord(null);
	}

	private void cancelAppointment(Booking_AppointmentVo voAppt, BookingAppointmentForSessionManagementVo gridAppt) 
	{
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null && Status_Reason.BOOKED.equals(voAppt.getApptStatus()) && !isTheatreAppt)
		{
			SessionServiceAndSlotActivityVo voServiceAndActivity = domain.getServiceAndActivityByAppt(voAppt, null);
			
			if(voServiceAndActivity != null)
			{
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
				form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity.getSlotActivity());
				form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity.getSessionService());
				form.getGlobalContext().Scheduling.setBookingSession(voAppt != null ? voAppt.getSession() : null);
				form.getGlobalContext().ChooseAndBook.setisCABAppt(voAppt.getIsCABBooking());
				form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.lyrTabs().tabExtendedView().grdSlots().getSelectedRow().getValue().getAppointment().getPatient()));
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
			}
		}
		else if (voAppt != null && voAppt.getApptStatusIsNotNull() && gridAppt != null && gridAppt.getApptStatusIsNotNull()
				&& ! voAppt.getApptStatus().equals(gridAppt.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
			updateScreenForRecord(null);	
		}
	}
	
	@Override
	protected void onGrdSessionsSelectionChanged() throws PresentationLogicException
	{
		populateExtendedView(domain.getSlotsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));

		updateControlsState();

	}

	private void populateExtendedView(SessionSlotForSessionManagementVoCollection sessionSlots)
	{
		form.lyrTabs().showtabExtendedView();

		form.getLocalContext().setSelectedSession(form.lyrTabs().tabClinicView().grdSessions().getValue());
		form.getLocalContext().setSelectedTab(ClinicView);

		populateExtendedViewSessionLabel();

		form.lyrTabs().tabExtendedView().grdSlots().getRows().clear();

		if (sessionSlots == null || sessionSlots.size() == 0)
			return;

		for (int i = 0; i < sessionSlots.size(); i++)
		{
			SessionSlotForSessionManagementVo slot = sessionSlots.get(i);

			grdSlotsRow newRow = form.lyrTabs().tabExtendedView().grdSlots().getRows().newRow();

			newRow.setColActivity(slot.getActivity() != null ? slot.getActivity().getName() : "");
			newRow.setTooltipForColActivity(newRow.getColActivity());

			newRow.setColStartTime(slot.getStartTm() != null ? slot.getStartTm().toString() : "");

			Time endTime = null;

			if (slot.getStartTm() != null && slot.getDuration() != null)
			{
				endTime = slot.getStartTm();
				endTime.addMinutes(slot.getDuration());
			}

			newRow.setColEndTime(endTime != null ? endTime.toString() : "");

			newRow.setColStatus(slot.getStatus() != null ? slot.getStatus().getText() : "");
			newRow.setTooltipForColStatus(newRow.getColStatus());

			newRow.setColSlotOwner(slot.getSlotResp() != null && slot.getSlotResp().getHcp() != null && slot.getSlotResp().getHcp().getName() != null ? slot.getSlotResp().getHcp().getName().toString() : "");
			newRow.setTooltipForColSlotOwner(newRow.getColSlotOwner());

			if (slot.getAppointment() != null)
			{
				CatsReferralForSessionManagementVo referral = domain.getCatsReferralForAppointment(slot.getAppointment());
				newRow.setColRTT(referral != null && referral.getReferralDetails() != null && referral.getReferralDetails().getEnd18WW() != null ? referral.getReferralDetails().getEnd18WW().toString() : "");
				slot.setCatsReferral(referral);

				newRow.setColPatient(slot.getAppointment().getPatient() != null && slot.getAppointment().getPatient().getName() != null ? slot.getAppointment().getPatient().getName().toString() : "");
				newRow.setTooltipForColPatient(newRow.getColPatient());

				if (Boolean.TRUE.equals(slot.getAppointment().getIsCABBooking()))
				{
					newRow.setColumnCBAppt(form.getImages().OCRR.LetterC);
					newRow.setTooltipForColumnCBAppt("C&B Appointment");
				}
			}

			newRow.setValue(slot);
		}
	}

	private void populateExtendedViewSessionLabel()
	{

		if (form.getLocalContext().getSelectedSession() != null)
		{
			SessionManagementVo session = form.getLocalContext().getSelectedSession();

			StringBuffer sessionInfo = new StringBuffer();

			sessionInfo.append(session.getName() != null ? "Session: " + session.getName() : "");

			if (session.getSessionDate() != null)
			{
				SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE");
				sessionInfo.append("    " + dateFormat.format(session.getSessionDate().getDate()));
				sessionInfo.append(" - " + session.getSessionDate());
			}

			sessionInfo.append(session.getStartTm() != null ? "    " + session.getStartTm() : "");
			sessionInfo.append(session.getEndTm() != null ? " - " + session.getEndTm() : "");

			sessionInfo.append("\n");
			sessionInfo.append(session.getService() != null && session.getService().getServiceName() != null ? "Service: " + session.getService().getServiceName() : "");
			sessionInfo.append(session.getSchLocation() != null && session.getSchLocation().getName() != null ? "    Location: " + session.getSchLocation().getName() : "");
			sessionInfo.append(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? "    Status: " + session.getSessionStatus().getText() : "");

			form.lyrTabs().tabExtendedView().pnlSessionInfo().setValue(sessionInfo.toString());
		}

	}

	@Override
	protected void onDyngrdSessionsCellButtonClicked(DynamicGridCell cell)
	{
		populateExtendedView((SessionSlotForSessionManagementVoCollection) cell.getValue());

	}

	@Override
	protected void onGrdSlotsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		populateLocationCombo();

	}

	@Override
	protected void onLnkreturnToListClick() throws PresentationLogicException
	{
		if (ClinicView == form.getLocalContext().getSelectedTab())
		{
			form.lyrTabs().showtabClinicView();
		}
		else if (AvailabilityView == form.getLocalContext().getSelectedTab())
		{
			form.lyrTabs().showtabAvailabilityView();
		}

	}

	@Override
	protected void onCcListOwnerValueChanged() throws PresentationLogicException
	{
		form.lblListOwners().setValue("");
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);

	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getCancelAppConfirmationMessageBoxID() != null && form.getLocalContext().getCancelAppConfirmationMessageBoxID().equals(messageBoxId) && DialogResult.YES.equals(result))
		{
			cancelSession(true, domain.getSessionVo(form.getLocalContext().getSelectedSession()));
			updateScreenForRecord(null);

		}
	}

	@Override
	protected void onBtnReOpenClick() throws PresentationLogicException
	{
		updateSessionStatus(form.getLocalContext().getSelectedSession(), Session_Status_and_Reason.OPEN);
		updateScreenForRecord(null);
		
	}
}
