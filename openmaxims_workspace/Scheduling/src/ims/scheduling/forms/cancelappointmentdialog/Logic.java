//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3084.20071)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.cancelappointmentdialog;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.YesNo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.lookups.CancelAppointmentReasonCollection;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.RefMan.vo.CatsReferralforElectiveListDetailsVo;
import ims.RefMan.vo.PatientElectiveListForCancelAppointmentVo;
import ims.RefMan.vo.domain.PatientElectiveListForCancelAppointmentVoAssembler;
import ims.RefMan.vo.lookups.ReferralApptStatus;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// WDEV-17897 if boolean parameter passed, check its value, if true
		// this is for cancel session so we don't want cancelled by patient option
		boolean cancelSession=false;
		boolean theatreAppointment = false;
		
		if (args != null && args.length > 0)
		{
			Object value = args[0];
			if (value instanceof Boolean)
				cancelSession=(Boolean) value;
			
			if(args.length > 1)
			{
				Object arg1 = args[1];
				if (arg1 instanceof Boolean)
					theatreAppointment=(Boolean) arg1;
			}
		}
		initialize(cancelSession, theatreAppointment);
		loadCancellationTypes(cancelSession);
		form.getGlobalContext().Scheduling.setApptCancelStatus(null);
		
	}
	
	private void initialize(boolean cancelSession, boolean theatreAppointment)
	{
		//WDEV-17929 hide label and checkbox for rebooking when cancelling a session
		form.ansRebook().setVisible(!cancelSession);
		form.lblRebookingRequred().setVisible(!cancelSession);
		
		//WDEV-7495 dont allow rebooking if its a C&B Appt
		if(form.getGlobalContext().ChooseAndBook.getisCABApptIsNotNull())
		{
			if(form.getGlobalContext().ChooseAndBook.getisCABAppt())
				form.ansRebook().setEnabled(false);
		}
		if(form.getGlobalContext().RefMan.getCatsReferralStatusIsNotNull())
			if(form.getGlobalContext().RefMan.getCatsReferralStatus().getReferralStatusIsNotNull()
					&& (form.getGlobalContext().RefMan.getCatsReferralStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER)
						|| form.getGlobalContext().RefMan.getCatsReferralStatus().getReferralStatus().equals(ReferralApptStatus.END_OF_CARE)) )
				form.ansRebook().setEnabled(false);
		
		if (ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue() && isReferralICPCompleted())
		{
			form.ansRebook().setEnabled(false);
		}
		
		form.lblCancelTCI().setVisible(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && theatreAppointment);//WDEV-18249
		form.chkCancelTCI().setVisible(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() &&theatreAppointment);//WDEV-18249
		
		form.chkCancelledForNonMedicalReason().setVisible(false);
		form.lblCanceleTCI().setVisible(false);
		form.lblNonMedicalReason().setVisible(false);

		//wdev-18419
		if( form.getGlobalContext().RefMan.getCatsReferralIsNotNull() )
		{
			CatsReferralforElectiveListDetailsVo tempVo = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			if( tempVo != null && tempVo.getJourneyIsNotNull() && tempVo.getJourney().getCurrentClockIsNotNull() )
			{
				PatientElectiveListForCancelAppointmentVo pateleVo = domain.getPatientElectiveList(tempVo);
				if( pateleVo != null && pateleVo.getTCIDetailsIsNotNull() && ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() &&theatreAppointment)
				{
					form.chkCancelledForNonMedicalReason().setVisible(true);
					form.lblCanceleTCI().setVisible(true);
					form.lblNonMedicalReason().setVisible(true);
					form.chkCancelledForNonMedicalReason().setEnabled(false);
				}
				else
				{
					form.chkCancelledForNonMedicalReason().setVisible(false);
					form.lblCanceleTCI().setVisible(false);
					form.lblNonMedicalReason().setVisible(false);
				}
			}
		}
		//---------
	}
	
	private boolean isReferralICPCompleted()
	{
		Boolean referralICPCompleted = domain.isReferralICPCompleted(form.getGlobalContext().Scheduling.getBookingAppointmentRef());
		return referralICPCompleted!=null && referralICPCompleted.booleanValue();
	}

	private void loadCancellationTypes(boolean cancelSession)
	{
		form.cmbCancellationType().newRow(Status_Reason.HOSPITALCANCELLED, Status_Reason.HOSPITALCANCELLED.getText());
		
		if (cancelSession)
		{
			form.cmbCancellationType().setValue(Status_Reason.HOSPITALCANCELLED);  // only one value so default it in
			loadCancellationReasons();
		}
		else
			form.cmbCancellationType().newRow(Status_Reason.PATIENTCANCELLED, Status_Reason.PATIENTCANCELLED.getText());  // Not cancel session, add the other cancellation type
	}

	private void loadCancellationReasons()
	{
		form.cmbCancellationReason().clear();
		CancelAppointmentReasonCollection collReasons = null;
		if(form.cmbCancellationType().getValue() != null)
		{
			Status_Reason type = form.cmbCancellationType().getValue();
			if(type.equals(Status_Reason.PATIENTCANCELLED))
			{
				if(form.getLocalContext().getPatientCancelledReasons() == null)
				{
					collReasons = domain.listCancellationReasonByType(Status_Reason.PATIENTCANCELLED);
					form.getLocalContext().setPatientCancelledReasons(collReasons);
				}
				else
					collReasons = form.getLocalContext().getPatientCancelledReasons();		
			}
			else if(type.equals(Status_Reason.HOSPITALCANCELLED))
			{
				if(form.getLocalContext().getHospitalCancelledReasons() == null)
				{
					collReasons = domain.listCancellationReasonByType(Status_Reason.HOSPITALCANCELLED);
					form.getLocalContext().setHospitalCancelledReasons(collReasons);
				}
				else
					collReasons = form.getLocalContext().getHospitalCancelledReasons();	
			}
		}
		
		if(collReasons != null)
		{
			for(int i=0;i<collReasons.size();i++)
				form.cmbCancellationReason().newRow(collReasons.get(i), collReasons.get(i).getText());
		}
	}

	protected void onCmbCancellationTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		loadCancellationReasons();
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void onBtnOKClick() throws PresentationLogicException
	{
		Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
		voApptStatus.setComment(form.txtComment().getValue());
		voApptStatus.setStatus(Status_Reason.CANCELLED);
		voApptStatus.setStatusReason(form.cmbCancellationType().getValue());
		voApptStatus.setCancellationReason(form.cmbCancellationReason().getValue());
		voApptStatus.setRebookSelected(form.ansRebook().getValue() != null && form.ansRebook().getValue().equals(YesNo.YES));
		
		voApptStatus.setCancelTCI(form.chkCancelTCI().getValue());
		
		String[] arrErrors = validateUI(voApptStatus);
		voApptStatus.setCancelledForNonMedicalReason(form.chkCancelledForNonMedicalReason().getValue());	//wdev-18419
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		form.getGlobalContext().Scheduling.setApptCancelStatus(voApptStatus);
		engine.close(DialogResult.OK);
	}

	private String[] validateUI(Appointment_StatusVo voApptStatus)
	{
		if(voApptStatus == null)
			throw new CodingRuntimeException("voApptStatus is null in method validateUI");
		
		ArrayList errors = new ArrayList();
		
		if(voApptStatus.getStatusReason() == null)
			errors.add("Cancellation Type is mandatory");
		if(voApptStatus.getCancellationReason() == null)
			errors.add("Reason is mandatory");
		
		String[] arrStrErrors = (String[])errors.toArray(new String[0]);
		return  arrStrErrors.length > 0 ? arrStrErrors : null;
	}

	//wdev-18419
	protected void onChkCancelTCIValueChanged() throws PresentationLogicException
	{
		if( form.chkCancelTCI().getValue() == true)
			form.chkCancelledForNonMedicalReason().setEnabled(true);
		else
		{
			form.chkCancelledForNonMedicalReason().setEnabled(false);
			form.chkCancelledForNonMedicalReason().setValue(null);
		}
		
	}
}
