//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Billy Mahon using IMS Development Environment (version 1.22 build 50218.1400)
//Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.profiles;

import ims.admin.vo.AppRoleShortVo;
import ims.admin.vo.AppRoleShortVoCollection;
import ims.admin.vo.ReportTemplateLiteVo;
import ims.clinical.vo.lookups.AnaestheticType;
import ims.clinical.vo.lookups.AnaestheticTypeCollection;
import ims.clinical.vo.lookups.LookupHelper;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.HcpRefVoCollection;
import ims.core.vo.ActivityLiteVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceVo;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DayOfWeek;
import ims.framework.utils.Time;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabActivitiesContainer.grdActivitiesRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabBookingRightsContainer.grdBookingRightsRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabDOSContainer.grdDOSRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabListOwnersContainer.grdListOwnerRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTemplatesContainer.grdTemplatesRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTheatreContainer.grdTheatreRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTheatreContainer.lyrSlotsLayer.tabTCIContainer.grdTCITimesRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTheatreContainer.lyrSlotsLayer.tabTheatreSlotsContainer.grdParentChildSlotsRow;
import ims.scheduling.vo.DirectoryOfServiceVo;
import ims.scheduling.vo.DirectoryOfServiceVoCollection;
import ims.scheduling.vo.ProfileActivityVo;
import ims.scheduling.vo.ProfileActivityVoCollection;
import ims.scheduling.vo.ProfileParentChildSlotVo;
import ims.scheduling.vo.ProfileParentChildSlotVoCollection;
import ims.scheduling.vo.ProfileShortVo;
import ims.scheduling.vo.ProfileShortVoCollection;
import ims.scheduling.vo.ProfileTemplateVo;
import ims.scheduling.vo.ProfileTemplateVoCollection;
import ims.scheduling.vo.ProfileTheatreTCISlotVo;
import ims.scheduling.vo.ProfileTheatreTCISlotVoCollection;
import ims.scheduling.vo.Profile_BookRightsVo;
import ims.scheduling.vo.Profile_BookRightsVoCollection;
import ims.scheduling.vo.Profile_Exc_DateVo;
import ims.scheduling.vo.Profile_Exc_DateVoCollection;
import ims.scheduling.vo.Profile_Exc_TimeVo;
import ims.scheduling.vo.Profile_Exc_TimeVoCollection;
import ims.scheduling.vo.Profile_ListOwnerVo;
import ims.scheduling.vo.Profile_ListOwnerVoCollection;
import ims.scheduling.vo.Profile_SlotGenericVo;
import ims.scheduling.vo.Profile_SlotGenericVoCollection;
import ims.scheduling.vo.Sch_ProfileGenericVo;
import ims.scheduling.vo.SlotDirectoryOfServiceVo;
import ims.scheduling.vo.SlotDirectoryOfServiceVoCollection;
import ims.scheduling.vo.TheatreDetailLiteVo;
import ims.scheduling.vo.TheatreDetailLiteVoCollection;
import ims.scheduling.vo.lookups.ConsultationMediaType;
import ims.scheduling.vo.lookups.Profile_Interval_Type;
import ims.scheduling.vo.lookups.SchedCABSlotType;
import ims.scheduling.vo.lookups.Sched_Profile_Type;
import ims.scheduling.vo.lookups.SlotType;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws FormOpenException
	{
		initialiseScreenAndLists();
	}

	private void initialiseScreenAndLists()
	{
		//WDEV-16799 - show DoS controls depending on Config Flag value
		form.lyrDetails().tabDOS().setHeaderVisible(!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"));
		form.lblDOS().setVisible(!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"));
		form.qmbFilterDirectoryOfService().setVisible(!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"));
		

		// workaround to show location is required
		form.lyrDetails().tabGeneralDetails().lblLocStar().setTextColor(Color.Red);
		form.lyrDetails().tabGeneralDetails().lblLocStar().setTooltip("Required");
		
		form.lyrDetails().tabTheatre().setVisible(form.lyrDetails().tabGeneralDetails().chkTheatre().getValue());
		form.lyrDetails().tabTheatre().setHeaderVisible(form.lyrDetails().tabGeneralDetails().chkTheatre().getValue());
		
		//WDEV-12918
		if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
		{
			form.lyrDetails().tabTheatre().lyrSlots().showtabTCI();
			form.lyrDetails().tabGeneralDetails().cmbSlotType().removeRow(SlotType.SLOTS);
		}
		else if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("Fixed"))
		{
			form.lyrDetails().tabTheatre().lyrSlots().showtabTheatreSlots();
			form.lyrDetails().tabGeneralDetails().cmbSlotType().removeRow(SlotType.THEATRETCITIME);
		}
		
		//WDEV-12918
		AnaestheticTypeCollection collAnaesTypes = LookupHelper.getAnaestheticType(domain.getLookupService());
		for(int i=0;i<collAnaesTypes.size();i++)
			form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().newRow(collAnaesTypes.get(i), collAnaesTypes.get(i).getText());
		
		// prepopulating reference data
		form.getLocalContext().setRoleList(domain.listRoles());
		
		// initialising search
		form.chkActiveOnly().setValue(true);
		//WDEV-12039
		form.lyrDetails().tabSlots().chkSlotsActiveOnly().setValue(true);
		
		loadServices();
		loadHospitals();
		loadActivities();
		
		//WDEV-13362
		form.ccListOwner().initialize(MosType.HCP);
			
		updateControlState();
	}

	private void loadActivities()
	{
		form.getLocalContext().setProfileActivities(domain.listActivity());
	}

	private void loadHospitals()
	{
		LocationLiteVoCollection voCollHosp = domain.listActiveHospitalsLite();
		form.cmbHospFilter().clear();

		for (int i = 0; i < voCollHosp.size(); i++)
			form.cmbHospFilter().newRow(voCollHosp.get(i), voCollHosp.get(i).getName());
	}

	private void loadServices()
	{
		ServiceVoCollection voCollServices = domain.listServices();
		form.cmbFilterSpecialty().clear();

		for (int i = 0; i < voCollServices.size(); i++)
		{
			form.cmbFilterSpecialty().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
			form.lyrDetails().tabGeneralDetails().cmbSpeciality().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}
	}
	
	


	// Populate the not selected only in Edit Mode
	private void populateDOSGrid(DirectoryOfServiceVoCollection coll, boolean showSelected)
	{
		if (showSelected == false)
			form.lyrDetails().tabDOS().grdDOS().getRows().clear();
		GenForm.lyrDetailsLayer.tabDOSContainer.grdDOSRow row;
		for (int i = 0; i < coll.size(); i++)
		{
			DirectoryOfServiceVo vo = coll.get(i);
			if (showSelected && dosAdded(vo))
				continue;
			row = form.lyrDetails().tabDOS().grdDOS().getRows().newRow();
			row.setValue(vo);
			row.setcolDosId(vo.getDoSId());
			row.setcolDosName(vo.getDoSName());
			row.setColSelected(false);
		}
	}

	protected void clearScreen()
	{
		clearGlobalContexts();

		super.clearScreen();
		form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setValues(null); //WDEV-12918
		form.lyrDetails().tabDOS().grdDOS().getRows().clear();
		form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().clear();
		form.lyrDetails().tabGeneralDetails().txtLocation().setValue(null);
		form.lyrDetails().tabGeneralDetails().cmbSpeciality().setValue(null);
		form.lyrDetails().tabGeneralDetails().chkFlexible().setValue(false);
		//WDEV-18369
		form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setValue(null);
		form.lyrDetails().tabBookingRights().grdBookingRights().getRows().clear();
		form.lyrDetails().tabListOwners().grdListOwner().getRows().clear();
		form.lyrDetails().tabExclusion().grdExclDates().getRows().clear();
		form.lyrDetails().tabExclusion().grdExclPeriods().getRows().clear();
		form.lyrDetails().tabTemplates().grdTemplates().getRows().clear();
		form.lyrDetails().tabActivities().grdActivities().getRows().clear();
		form.lyrDetails().tabTheatre().grdTheatre().getRows().clear();
		form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().clear(); //WDEV-11777
		form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().clear();
		
		enableAndClearIntervalControls(NOINTERVAL, false, true);
		//WDEV-12282 Comment this line will temporary fix issue until further investigation.  form.lyrDetails().showtabGeneralDetails();
	}

	private void clearGlobalContexts()
	{
		form.getGlobalContext().Scheduling.setDirectoryofServicesCollection(null);
		form.getGlobalContext().Scheduling.setListOwnerCollection(null);
		form.getGlobalContext().Scheduling.setProfileStartTime(null);
		form.getGlobalContext().Scheduling.setProfileEndTime(null);
		form.getGlobalContext().Scheduling.setProfileService(null);
		form.getLocalContext().setTheatreSlots(null);
		form.getLocalContext().setParentChildSlots(null);
		form.getLocalContext().setSlots(null);
	}

	private void searchProfiles()
	{
		form.grdProfiles().getRows().clear();
		clearScreen();//WDEV-14644
		//WDEV-16799
		ProfileShortVoCollection coll = domain.listProfiles((ServiceVo) form.cmbFilterSpecialty().getValue(), form.qmbFilterDirectoryOfService().getValue(), form.cmbHospFilter().getValue(), form.chkActiveOnly().getValue() == false ? null : true, form.chkFilterOutpatients().getValue(), form.chkFilterTheatre().getValue(), form.txtName().getValue(), form.ccListOwner().getValue());
		if (coll == null || coll.size() == 0)
			return;

		GenForm.grdProfilesRow row;
		for (int i = 0; i < coll.size(); i++)
		{
			ProfileShortVo prfile = coll.get(i);
			row = form.grdProfiles().getRows().newRow();
			row.setValue(prfile);
			if (prfile.getEffToIsNotNull())
				row.setcolEndDate(prfile.getEffTo().toString());
			if (prfile.getEffFrmIsNotNull())
				row.setcolStartDate(prfile.getEffFrm().toString());
			row.setcolProfileDescription(prfile.getDescription());
			if (prfile.getServiceIsNotNull())
				row.setcolSpeciality(prfile.getService().getServiceName());
		}
	}

	protected void onBtnLocationClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Admin.LocationSelect);
	}

	protected void onCmbSpecialityValueChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setProfileService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());

		if (form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue() == null)
		{
			form.lyrDetails().tabDOS().grdDOS().getRows().clear();
			return;
		}

		loadDos(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());
	}

	private void loadDos(ServiceShortVo voService)
	{
		loadDos(voService, false);
	}

	private void loadDos(ServiceShortVo voService, boolean showSelected)
	{
		DirectoryOfServiceVo voDirService = new DirectoryOfServiceVo();
		if (voService != null)
		{
			voDirService.setService(voService);
			// WDEV-5584
			voDirService.setLocation(form.getLocalContext().getCurrentProfileIsNotNull() ? form.getLocalContext().getCurrentProfile().getSchLocation() : null);
			voDirService.setIsActive(Boolean.TRUE);

			if (form.getMode().equals(FormMode.EDIT))
				populateDOSGrid(domain.listDOS(voDirService), showSelected);
		}
	}

	protected void onGrdProfilesSelectionChanged() throws PresentationLogicException
	{
		// Display the current row in the detail fields below
		ProfileShortVo voProfileShort = form.grdProfiles().getValue();
		Sch_ProfileGenericVo voProfile = domain.getGenericProfileDetails(voProfileShort);
		form.getLocalContext().setCurrentProfile(voProfile);
		form.lyrDetails().tabSlots().chkSlotsActiveOnly().setValue(true);
		this.populateScreenFromData(voProfile, listTemplates());
		
		// Reset to General Details tab
		form.lyrDetails().showtabGeneralDetails();
		
		updateControlState();
	}

	private ProfileTemplateVoCollection listTemplates()
	{
		if (form.getLocalContext().getCurrentProfileIsNotNull())
		{
			if (form.getLocalContext().getCurrentProfile().getID_Sch_Profile() != null)
			{
				return domain.listProfileTemplatesByProfile(form.getLocalContext().getCurrentProfile());
			}
		}

		return null;
	}

	protected void populateScreenFromData(Sch_ProfileGenericVo voProfile, ProfileTemplateVoCollection templates)
	{
		super.populateScreenFromData(voProfile);

		if (voProfile == null)
			return;
		
		form.lyrDetails().tabGeneralDetails().chkFlexible().setValue(!voProfile.getIsFixed());
		//WDEV-18369
		form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setValue(voProfile.getConsMediaType());

		if(voProfile.getIsTheatreProfile() == null || voProfile.getIsTheatreProfile() == false)
		{
			if(voProfile.getIsFixed() != null && !voProfile.getIsFixed())
			{
				//Activities (Flexible Profile)
				form.lyrDetails().tabActivities().grdActivities().getRows().clear();
				if (voProfile.getProfileActivitiesIsNotNull())
				{
					ProfileActivityVo voProfAct = null;
					GenForm.lyrDetailsLayer.tabActivitiesContainer.grdActivitiesRow aRow = null;
					for (int i = 0; i < voProfile.getProfileActivities().size(); i++)
					{
						voProfAct = voProfile.getProfileActivities().get(i);
						aRow = form.lyrDetails().tabActivities().grdActivities().getRows().newRow();
						
						//addActivitiesToRow WDEV-8810
						if(form.getLocalContext().getProfileActivitiesIsNotNull())
						{
							for(ActivityLiteVo voActivity : form.getLocalContext().getProfileActivities())
								aRow.getcolActivity().newRow(voActivity, voActivity.getName());
						}
						
						if(voProfAct.getActivityIsNotNull())
						{
							if(form.getLocalContext().getProfileActivitiesIsNotNull())
							{
								//if the activity has not been added
								if(!form.getLocalContext().getProfileActivities().contains(voProfAct.getActivity()))
									aRow.getcolActivity().newRow(voProfAct.getActivity(), voProfAct.getActivity().getName());
							}
							else
								aRow.getcolActivity().newRow(voProfAct.getActivity(), voProfAct.getActivity().getName());
						}
						
						aRow.getcolActivity().setValue(voProfAct.getActivity());
						aRow.setcolActive(voProfAct.getIsActive());
						
						aRow.setValue(voProfAct);
						aRow.setSelectable(false);
					}
				}
			}
			else
			{
				// Directory of Services grid
				if (voProfile.getDirectoryOfServicesIsNotNull())
				{
					DirectoryOfServiceVo voDirService = null;
					GenForm.lyrDetailsLayer.tabDOSContainer.grdDOSRow dRow = null;
					for (int i = 0; i < voProfile.getDirectoryOfServices().size(); i++)
					{
						voDirService = voProfile.getDirectoryOfServices().get(i);
						if (dosAdded(voDirService) == false)
						{
							dRow = form.lyrDetails().tabDOS().grdDOS().getRows().newRow();
							dRow.setcolDosId(voDirService.getDoSId());
							dRow.setcolDosName(voDirService.getDoSName());
							dRow.setColSelected(true);
							dRow.setValue(voDirService);
							dRow.setSelectable(false);
						}
					}
				}

				form.getLocalContext().setSlots(voProfile.getProfileSlots());
				form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().clear();
				filterSlotsDisplay(voProfile.getProfileSlots(), false);
				setSlotsTabsState();
			}
		}
		else
		{
			//WDEV-12918
			if(voProfile.getAnaestheticTypeIsNotNull())
				form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setValues(voProfile.getAnaestheticType().toArray());
			//Theatre Detail
			form.lyrDetails().tabTheatre().grdTheatre().getRows().clear();
			if (voProfile.getTheatreDetailsIsNotNull())
			{
				TheatreDetailLiteVo voTheatre = null;
				GenForm.lyrDetailsLayer.tabTheatreContainer.grdTheatreRow tRow = null;
				for (int i = 0; i < voProfile.getTheatreDetails().size(); i++)
				{
					voTheatre = voProfile.getTheatreDetails().get(i);
					if (voTheatre.getIsActive())
					{
						tRow = form.lyrDetails().tabTheatre().grdTheatre().getRows().newRow();
						if(voTheatre.getProcedureIsNotNull())
							tRow.getcolProcedure().newRow(voTheatre.getProcedure(), voTheatre.getProcedure().getProcedureName());
						
						tRow.getcolProcedure().setValue(voTheatre.getProcedure());
						tRow.setcolActive(voTheatre.getIsActive());
						if(voTheatre.getMaxNoIsNotNull())
							tRow.setcolMax(voTheatre.getMaxNo());
						
						tRow.setValue(voTheatre);
						tRow.setSelectable(false);
					}
				}
			}
			
			if(voProfile.getSlotType() != null)
			{
				if(voProfile.getSlotType().equals(SlotType.THEATRETCITIME))
				{
					//WDEV-11777
					form.getLocalContext().setTheatreSlots((ProfileTheatreTCISlotVoCollection) voProfile.getProfileTheatreSlots().clone());
					form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().clear();
					if (voProfile.getProfileTheatreSlotsIsNotNull())
					{
						 voProfile.getProfileTheatreSlots().sort(); //WDEV-11777
						 for(ProfileTheatreTCISlotVo voTheatreSlot : voProfile.getProfileTheatreSlots())
						 {
							 if(voTheatreSlot.getIsActive())
							 {
								 ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTheatreContainer.lyrSlotsLayer.tabTCIContainer.grdTCITimesRow tsRow = form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().newRow();
								 tsRow.setcolTCITime(voTheatreSlot.getToComeInTime());
								 tsRow.setcolNoInstances(voTheatreSlot.getNoOfInstances());
								 tsRow.setValue(voTheatreSlot);
								 tsRow.setReadOnly(true);
								 tsRow.setSelectable(false); 
							 }
						 }
					}
				}
				//WDEV-12918
				else if(voProfile.getSlotType().equals(SlotType.SLOTS))
				{
					form.getLocalContext().setParentChildSlots((ProfileParentChildSlotVoCollection)voProfile.getParentChildSlots().clone());
					form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().clear();
					if (voProfile.getParentChildSlotsIsNotNull())
					{
						 voProfile.getParentChildSlots().sort(); 
						 for(ProfileParentChildSlotVo voParentChildSlot : voProfile.getParentChildSlots())
						 {
							 if(voParentChildSlot.getIsActive())
							 {
								 grdParentChildSlotsRow pcRow = form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().newRow();
								 if(voParentChildSlot.getStartTimeIsNotNull())
									 pcRow.setColStartTime(voParentChildSlot.getStartTime().toString());
								 if(voParentChildSlot.getDurationIsNotNull())
									 pcRow.setColDuration(voParentChildSlot.getDuration().toString());
								 
								 pcRow.setColActive(true);
								 pcRow.setValue(voParentChildSlot);
								 pcRow.setReadOnly(true);
								 pcRow.setSelectable(true); //WDEV-13224
							 }
						 }
					}
				}	
			}
		}
		
		form.getGlobalContext().Admin.setProfileLocation(voProfile.getSchLocation());
		setLocation();

		form.lyrDetails().tabGeneralDetails().cmbSpeciality().setValue(voProfile.getService());
		try
		{
			onCmbSpecialityValueChanged();
		}
		catch (PresentationLogicException e)
		{
		}

		// Populate the Booking Rights Grid
		form.lyrDetails().tabBookingRights().grdBookingRights().getRows().clear();
		GenForm.lyrDetailsLayer.tabBookingRightsContainer.grdBookingRightsRow bRow;
		for (int i = 0; i < voProfile.getBookingRights().size(); i++)
		{
			Profile_BookRightsVo rightVo = voProfile.getBookingRights().get(i);
			bRow = form.lyrDetails().tabBookingRights().grdBookingRights().getRows().newRow();
			bRow.setValue(rightVo);
			loadRolesUsersIntoGridColumnCombo(bRow);
			bRow.getcolRole().setValue(rightVo.getRole());
			bRow.setReadOnly(true);
			bRow.setSelectable(false);
		}

		// List Owners
		form.lyrDetails().tabListOwners().grdListOwner().getRows().clear();
		GenForm.lyrDetailsLayer.tabListOwnersContainer.grdListOwnerRow lRow;
		for (int i = 0; i < voProfile.getListOwners().size(); i++)
		{
			Profile_ListOwnerVo listVo = voProfile.getListOwners().get(i);
			lRow = form.lyrDetails().tabListOwners().grdListOwner().getRows().newRow();
			lRow.setValue(listVo);
			if (listVo.getHCPIsNotNull())
			{
				lRow.getColHcp().newRow(listVo.getHCP(), listVo.getHCP().getName().toString());
				lRow.getColHcp().setValue(listVo.getHCP());
			}
			lRow.setReadOnly(true);
			lRow.setSelectable(false);
		}

		// Populate the exclusion dates grid
		form.lyrDetails().tabExclusion().grdExclDates().getRows().clear();
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclDatesRow eDrow;
		for (int i = 0; i < voProfile.getExclusionDates().size(); i++)
		{
			Profile_Exc_DateVo dateVo = voProfile.getExclusionDates().get(i);
			eDrow = form.lyrDetails().tabExclusion().grdExclDates().getRows().newRow();
			eDrow.setValue(dateVo);
			eDrow.setcolEndDate(dateVo.getEndDate());
			eDrow.setcolStartDate(dateVo.getStartDate());
			eDrow.setReadOnly(true);
			eDrow.setSelectable(false);
		}

		// Populate the exclusion times grid
		form.lyrDetails().tabExclusion().grdExclPeriods().getRows().clear();
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclPeriodsRow pRow;
		for (int i = 0; i < voProfile.getExclusionTimes().size(); i++)
		{
			Profile_Exc_TimeVo timeVo = voProfile.getExclusionTimes().get(i);
			pRow = form.lyrDetails().tabExclusion().grdExclPeriods().getRows().newRow();
			pRow.setValue(timeVo);
			pRow.setcolEndTime(timeVo.getEndTime());
			pRow.setcolStartTime(timeVo.getStartTime());
			pRow.setReadOnly(true);
			pRow.setSelectable(false);
		}

		// Populate the templates grid
		form.lyrDetails().tabTemplates().grdTemplates().getRows().clear();
		GenForm.lyrDetailsLayer.tabTemplatesContainer.grdTemplatesRow tRow;
		if (templates != null)
		{
			for (int i = 0; i < templates.size(); i++)
			{
				ProfileTemplateVo voProfTemp = templates.get(i);
				tRow = form.lyrDetails().tabTemplates().grdTemplates().getRows().newRow();
				tRow.setColTemplate(voProfTemp.getTemplate());
				tRow.setValue(voProfTemp);
				tRow.setReadOnly(true);
				tRow.setSelectable(false);
			}
		}
	}

	private boolean dosAdded(DirectoryOfServiceVo voDirService)
	{
		GenForm.lyrDetailsLayer.tabDOSContainer.grdDOSRow dRow;
		for (int j = 0; j < form.lyrDetails().tabDOS().grdDOS().getRows().size(); j++)
		{
			dRow = form.lyrDetails().tabDOS().grdDOS().getRows().get(j);
			if (voDirService.equals(dRow.getValue()))
			{
				dRow.setColSelected(true);
				return true;
			}
		}
		return false;
	}

	private void loadRolesUsersIntoGridColumnCombo(grdBookingRightsRow row)
	{
		AppRoleShortVoCollection voCollRole = form.getLocalContext().getRoleList();
		if (voCollRole == null)
			return;

		for (int i = 0; i < voCollRole.size(); i++)
			row.getcolRole().newRow(voCollRole.get(i), voCollRole.get(i).getName());
	}

	protected void onChkActiveOnlyValueChanged() throws PresentationLogicException
	{
		searchProfiles();
	}

	protected Sch_ProfileGenericVo populateDataFromScreen(Sch_ProfileGenericVo profile)
	{
		super.populateDataFromScreen(profile);
		if (form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue() != null)
			profile.setService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());
		else
			profile.setService(null);

		profile.setIsFixed(!form.lyrDetails().tabGeneralDetails().chkFlexible().getValue());
		// copying name to description also
		profile.setDescription(form.lyrDetails().tabGeneralDetails().txtProfileName().getValue());
		profile.setIsActive(new Boolean(form.lyrDetails().tabGeneralDetails().chkProfileActive().getValue()));
		profile.setPrfCategory(form.lyrDetails().tabGeneralDetails().cmbCategory().getValue());
		profile.setPrftype(Sched_Profile_Type.SINGLE);
		
		//WDEV-18369
		profile.setConsMediaType(form.lyrDetails().tabGeneralDetails().cmbConsMediaType().getValue());

		if (form.lyrDetails().tabDOS().isHeaderVisible())
			profile.setDirectoryOfServices(getSelectedDosColl());

		if(!form.lyrDetails().tabGeneralDetails().chkTheatre().getValue())
		{
			
			if(form.lyrDetails().tabGeneralDetails().chkFlexible().getValue())
			{
				//populate ProfileActivities
				ProfileActivityVoCollection voCollAct = profile.getProfileActivities();
				if(voCollAct == null)
					voCollAct = new ProfileActivityVoCollection();
				else
					voCollAct.clear();
					
				for(int i=0;i<form.lyrDetails().tabActivities().grdActivities().getRows().size(); i++)
				{
					grdActivitiesRow aRow = form.lyrDetails().tabActivities().grdActivities().getRows().get(i);
					ProfileActivityVo voProfAct = aRow.getValue();
					voProfAct.setActivity((ActivityLiteVo) aRow.getcolActivity().getValue());
					voProfAct.setIsActive(aRow.getcolActive());
					voCollAct.add(voProfAct);
				}
				profile.setProfileActivities(voCollAct);
			}
			else
			{
				// Populate the profile slots collection
				Profile_SlotGenericVoCollection coll = (profile).getProfileSlots();
				if (coll == null)
					coll = new Profile_SlotGenericVoCollection();
	  				
				GenForm.lyrDetailsLayer.tabSlotsContainer.grdSlotsGeneralRow row;
				for (int i = 0; i < form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().size(); i++)
				{
					row = form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().get(i);
					int index = coll.indexOf(row.getValue());
					if (index != -1)
						coll.set(index, row.getValue());
					else
						coll.add(row.getValue());
				}
				profile.setProfileSlots(coll);
			}
		}
		else if(form.lyrDetails().tabGeneralDetails().chkTheatre().getValue())
		{
			//WDEV-12918
			if(form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().getValues() != null && form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().getValues().length > 0)
			{
				AnaestheticType[] collAnaes = form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().getValues();
				profile.setAnaestheticType(new AnaestheticTypeCollection());
				for(int i=0;i<collAnaes.length;i++)
					profile.getAnaestheticType().add(collAnaes[i]);
			}
				
			//populate theatre detail
			TheatreDetailLiteVoCollection voCollTheatre = profile.getTheatreDetails();
			if(voCollTheatre == null)
				voCollTheatre = new TheatreDetailLiteVoCollection();
			else
				voCollTheatre.clear();
				
			for(int i=0;i<form.lyrDetails().tabTheatre().grdTheatre().getRows().size(); i++)
			{
				grdTheatreRow thRow = form.lyrDetails().tabTheatre().grdTheatre().getRows().get(i);
				TheatreDetailLiteVo voTheatre = thRow.getValue();
				voTheatre.setProcedure((ProcedureLiteVo) thRow.getcolProcedure().getValue());
				voTheatre.setMaxNo(thRow.getcolMax());
				voTheatre.setIsActive(thRow.getcolActive());
				voCollTheatre.add(voTheatre);
			}
			profile.setTheatreDetails(voCollTheatre);
							
			//WDEV-12918
			if(profile.getSlotType() != null)
			{
				if(profile.getSlotType().equals(SlotType.THEATRETCITIME))
				{
					//WDEV-11777 populate theatre slots
					ProfileTheatreTCISlotVoCollection voCollTheatreSlots = profile.getProfileTheatreSlots();
					if(voCollTheatreSlots == null)
						voCollTheatreSlots = new ProfileTheatreTCISlotVoCollection();
					else
						voCollTheatreSlots.clear();
					
					for(int i=0;i<form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().size(); i++)
					{
						grdTCITimesRow tcRow = form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().get(i);
						ProfileTheatreTCISlotVo voTheatreSlot = tcRow.getValue();
						voTheatreSlot.setToComeInTime(tcRow.getcolTCITime());
						voTheatreSlot.setNoOfInstances(tcRow.getcolNoInstances());
						voTheatreSlot.setIsActive(true);
						voCollTheatreSlots.add(voTheatreSlot);
					}
					
					//add the inactivated (removed) items to the collection
					if(form.getLocalContext().getTheatreSlotsIsNotNull())
					{
						for(ProfileTheatreTCISlotVo voSlot : form.getLocalContext().getTheatreSlots())
						{
							//WDEV-18216 check if the slot id is not null
							for (int i=0; i < voCollTheatreSlots.size(); i++)
							{
								if (voCollTheatreSlots.get(i).getID_ProfileTheatreTCISlot() != null && !voCollTheatreSlots.get(i).equals(voSlot)) 
								{
									voSlot.setIsActive(false);
									voCollTheatreSlots.add(voSlot);
								}
							}
						}
					}
					profile.setProfileTheatreSlots(voCollTheatreSlots);
				}
				else if(profile.getSlotType().equals(SlotType.SLOTS))
				{
					//WDEV-11777 populate theatre slots
					ProfileParentChildSlotVoCollection voCollParentChildSlots = profile.getParentChildSlots();
					if(voCollParentChildSlots == null)
						voCollParentChildSlots = new ProfileParentChildSlotVoCollection();
					else
						voCollParentChildSlots.clear();
					
					for(int i=0;i<form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().size(); i++)
					{
						grdParentChildSlotsRow tRow = form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().get(i);
						ProfileParentChildSlotVo voParentChildSlot = tRow.getValue();
						voCollParentChildSlots.add(voParentChildSlot);
					}
					
					//add the inactivated (removed) items to the collection
					if(form.getLocalContext().getParentChildSlotsIsNotNull())
					{
						for(ProfileParentChildSlotVo voSlot : form.getLocalContext().getParentChildSlots())
						{
							//WDEV-18216 check if the slot id is not null
							for (int i=0; i < voCollParentChildSlots.size(); i++)
							{
								if (voCollParentChildSlots.get(i).getID_ProfileParentChildSlot() != null && !voCollParentChildSlots.get(i).equals(voSlot)) 
								{
									voSlot.setIsActive(false);
									voCollParentChildSlots.add(voSlot);
								}
							}
						}
					}
					
					profile.setParentChildSlots(voCollParentChildSlots);
				}
			}
		}
		
		// Set the Booking Rights for the profile
		GenForm.lyrDetailsLayer.tabBookingRightsContainer.grdBookingRightsRow bRow;
		Profile_BookRightsVoCollection rightsColl = new Profile_BookRightsVoCollection();
		for (int i = 0; i < form.lyrDetails().tabBookingRights().grdBookingRights().getRows().size(); i++)
		{
			bRow = form.lyrDetails().tabBookingRights().grdBookingRights().getRows().get(i);
			Profile_BookRightsVo vo = bRow.getValue();
			AppRoleShortVo voAppRole = (AppRoleShortVo) bRow.getcolRole().getValue();
			vo.setRole(voAppRole);
			bRow.setReadOnly(true);
			rightsColl.add(vo);
		}
		profile.setBookingRights(rightsColl);

		// Set the List Owners for the profile
		GenForm.lyrDetailsLayer.tabListOwnersContainer.grdListOwnerRow oRow;
		Profile_ListOwnerVoCollection ownerColl = new Profile_ListOwnerVoCollection();
		for (int i = 0; i < form.lyrDetails().tabListOwners().grdListOwner().getRows().size(); i++)
		{
			oRow = form.lyrDetails().tabListOwners().grdListOwner().getRows().get(i);
			Profile_ListOwnerVo vo = oRow.getValue();
			vo.setHCP((HcpLiteVo) oRow.getColHcp().getValue());
			ownerColl.add(vo);
		}
		profile.setListOwners(ownerColl);

		// go through the slots and remove any reference to listowners that are
		// no longer in overall record - dlaffan
		if (profile.getProfileSlotsIsNotNull())
		{
			for (Profile_SlotGenericVo voProfleSlot : profile.getProfileSlots())
			{
				if (voProfleSlot.getSlotRespIsNotNull())
				{
					if (!profile.getListOwners().contains(voProfleSlot.getSlotResp()))
						voProfleSlot.setSlotResp(null);
				}
			}
		}

		// Set the Exclusion Dates for the profile
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclDatesRow eRow;
		Profile_Exc_DateVoCollection dateColl = new Profile_Exc_DateVoCollection();
		Profile_Exc_DateVo voExclDate = null;
		for (int i = 0; i < form.lyrDetails().tabExclusion().grdExclDates().getRows().size(); i++)
		{
			eRow = form.lyrDetails().tabExclusion().grdExclDates().getRows().get(i);
			voExclDate = eRow.getValue();
			voExclDate.setEndDate(eRow.getcolEndDate());
			voExclDate.setStartDate(eRow.getcolStartDate());
			dateColl.add(voExclDate);
		}
		profile.setExclusionDates(dateColl);

		// Set the Exclusion Times for the profile
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclPeriodsRow timeRow;
		Profile_Exc_TimeVoCollection timeColl = new Profile_Exc_TimeVoCollection();
		Profile_Exc_TimeVo voExclTime = null;
		for (int i = 0; i < form.lyrDetails().tabExclusion().grdExclPeriods().getRows().size(); i++)
		{
			timeRow = form.lyrDetails().tabExclusion().grdExclPeriods().getRows().get(i);
			voExclTime = timeRow.getValue();
			voExclTime.setEndTime(timeRow.getcolEndTime());
			voExclTime.setStartTime(timeRow.getcolStartTime());
			timeColl.add(voExclTime);
		}
		profile.setExclusionTimes(timeColl);
		return profile;
	}

	private boolean validTimes(Profile_Exc_TimeVo voExclTime, Sch_ProfileGenericVo profile)
	{
		// Any exclusion dates must be between profile start and end dates
		Time startTime = voExclTime.getStartTime();
		Time endTime = voExclTime.getEndTime();
		Time profStartTime = profile.getStartTm();
		Time profEndTime = profile.getEndTm();
		if (startTime != null && endTime != null && profStartTime != null)
		{
			if (startTime.isLessThan(profStartTime) || startTime.isGreaterThan(profEndTime) || endTime.isLessThan(profStartTime) || endTime.isGreaterThan(profEndTime))
				return false;
		}
		return true;
	}

	private boolean validDates(Profile_Exc_DateVo voExclDate, Sch_ProfileGenericVo profile)
	{
		// Any exclusion dates must be between profile start and end dates
		Date startDate = voExclDate.getStartDate();
		Date endDate = voExclDate.getEndDate();
		Date profStartDate = profile.getEffFrm();
		Date profEndDate = profile.getEffTo();
		if (startDate.isLessThan(profStartDate) || (startDate.isGreaterThan(profEndDate) && profEndDate != null) || endDate.isLessThan(profStartDate) || (endDate.isGreaterThan(profEndDate) && profEndDate != null))
			return false;
		return true;
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		Sch_ProfileGenericVo profile = form.getLocalContext().getCurrentProfile();
		this.populateDataFromScreen(profile);

		String[] errors = profile.validate(getUIValidationRules(profile));
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}

		try
		{
			profile = domain.saveGenericProfile(profile, populateTemplatesFromScreen());
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	private String[] getUIValidationRules(Sch_ProfileGenericVo profile)
	{
		List<String> errors = new ArrayList<String>();

		Date newDate = validateStartDateIsSunday(form.lyrDetails().tabProfileDetails().dteStartDate().getValue());
		if (newDate != null)
			errors.add("'Week Starting' Date must be a Sunday");

		//WDEV-7323 - if configuring a theatre ignore slot validation
		if(!form.lyrDetails().tabGeneralDetails().chkTheatre().getValue())
		{
			if(profile.getIsFixed())
			{
				if (profile.getProfileSlots() == null || profile.getProfileSlots().size() == 0)
					errors.add("Slots are mandatory");
				else
				{
					for (Profile_SlotGenericVo voSlot : profile.getProfileSlots())
					{
						// vo automatic validation will look after checking this data
						if (voSlot.getStartTm() == null || profile.getStartTm() == null)
							continue;
					}
		
					int countCabSlots= 0;
					for (Profile_SlotGenericVo voSlot : profile.getProfileSlots())
					{
						//WDEV-10003
						if(voSlot.getTypeIsNotNull())
						{
							if(!voSlot.getType().equals(SchedCABSlotType.LOCAL))
								countCabSlots++;
						}
					
						// vo automatic validation will look after checking this data
						if (voSlot.getDirectoryOfServiceIsNotNull())
						{
							//WDEV-10371
							if(voSlot.getTypeIsNotNull())
							{
								if(!voSlot.getType().equals(SchedCABSlotType.LOCAL))
								{
									if(voSlot.getDirectoryOfService() == null || voSlot.getDirectoryOfService().size() == 0)
										errors.add("Directory of Service must be selected for non-local slot");
								}	
							}

							for (SlotDirectoryOfServiceVo voDirService : voSlot.getDirectoryOfService())
							{
								if (!isDirectoryOfServiceLocationEqualProfileLocation(profile, voDirService))
								{
									errors.add("Directory of Service (" + voDirService.getDirectoryOfService().getDoSName() + ") selected for one of the slots is not applicable for the Location selected for the Profile, it has been removed");
									voSlot.setDirectoryOfService(null);
								}
							}
						}
						
						//WDEV-12039 validate that slots are within profile start and end time (end time/start time may get changed)
						if(voSlot.getIsActiveIsNotNull() && voSlot.getIsActive())
						{
							if(voSlot.getStartTm() != null && profile.getStartTm() != null)
								if(voSlot.getStartTm().isLessThan(profile.getStartTm()))
									errors.add("Start Time of Slot ( " + voSlot.getStartTm().toString() +  " ) cannot be before Profile Start Time ( " + profile.getStartTm() + " )");
							
							if(voSlot.getStartTm() != null && profile.getEndTm() != null)
								if(voSlot.getStartTm().isGreaterThan(profile.getEndTm()))
									errors.add("Start Time of Slot ( " + voSlot.getStartTm().toString() +  " ) cannot exceed Profile End Time ( " + profile.getEndTm() + " )");
							
							if(profile.getEndTmIsNotNull())
							{	
								if(voSlot.getIsActiveIsNotNull() && voSlot.getIsActive())
								{
									Time endSlotTime = new Time();
									endSlotTime = (Time) voSlot.getStartTm().clone();
									endSlotTime.addMinutes(voSlot.getNumberSlotsReq() * voSlot.getDuration());
									if(endSlotTime.isGreaterThan(profile.getEndTm()))
										errors.add("End Time of Slots ( " + endSlotTime.toString() +  " ) cannot exceed Profile End Time ( " + profile.getEndTm() + " )");
								}
							}	
						}
					}
					
					//WDEV-10003
					if(countCabSlots > 0)
					{
						if(profile.getDirectoryOfServices() == null || profile.getDirectoryOfServices().size() == 0)
							errors.add("Directory of Service must be selected as there are non-local slots present.");
					}	
				}
			}	
			else
			{
				if (profile.getProfileActivities() == null || profile.getProfileActivities().size() == 0)
					errors.add("Activities are mandatory");
				else
				{
					//count active there must be at least one
					int activeCount = 0;
					for (ProfileActivityVo voProfAct : profile.getProfileActivities())
					{
						if(voProfAct.getActivity() == null)
							errors.add("Activity is mandatory on the Activities Tab");
						
						if (voProfAct.getActivity() != null && (voProfAct.getIsActiveIsNotNull() && voProfAct.getIsActive()))
							activeCount++;	
					}
					if(activeCount == 0)
						errors.add("You must select one active Activity on the Activities Tab");
				}
			}
		}
		else
		{
			if(profile.getListOwners() == null || profile.getListOwners().size() == 0)
				errors.add("At Least one record is mandatory on the List Owners Tab");
			if(profile.getTheatreDetails() == null || profile.getTheatreDetails().size() == 0)
				errors.add("At Least one record is mandatory on the Theatre Tab");
			if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("Fixed") && !atLeastOneSlotIsActive(profile.getParentChildSlots()))//WDEV-13224
				errors.add("At least one Theatre Slot must be defined on Theatre Tab");
			
			for(TheatreDetailLiteVo voTheatre : profile.getTheatreDetails())
			{
				if(voTheatre.getProcedure() == null)
					errors.add("Procedure is mandatory on the Theatre Tab");
			}
			
			if(profile.getTheatreType() == null)
				errors.add("Theatre Session Type is mandatory");
		}

		Profile_Exc_DateVo voExclDate;
		if (profile != null)
		{
			if (profile.getExclusionDatesIsNotNull())
			{
				for (int i = 0; i < profile.getExclusionDates().size(); i++)
				{
					voExclDate = profile.getExclusionDates().get(i);

					// vo automatic validation will look after checking this
					// data
					if (voExclDate.getEndDate() == null || voExclDate.getStartDate() == null)
						continue;

					if (voExclDate.getEndDateIsNotNull() && voExclDate.getStartDateIsNotNull())
						if (voExclDate.getEndDate().isLessThan(voExclDate.getStartDate()))
							errors.add("Exclusion End Date MUST be after Start Date");

					if (!validDates(voExclDate, profile))
						errors.add("Exclusion Dates must be between profile start and end dates");;
				}
			}
			if (profile.getExclusionTimesIsNotNull())
			{
				for (int i = 0; i < profile.getExclusionTimes().size(); i++)
				{
					Profile_Exc_TimeVo voExclTime = profile.getExclusionTimes().get(i);

					// vo automatic validation will look after checking this
					// data
					if (voExclTime.getEndTime() == null || voExclTime.getStartTime() == null)
						continue;

					if (voExclTime.getEndTime().isLessThan(voExclTime.getStartTime()))
						errors.add("Exclusion End Time MUST be after Start Time");

					if (!validTimes(voExclTime, profile))
						errors.add("Exclusion Times must be between profile start and end times");;
				}
			}
		}

		if (profile.getEffFrmIsNotNull() && profile.getEffToIsNotNull())
		{
			if (profile.getEffTo().isLessThan(profile.getEffFrm()))
				errors.add("Profile 'End Date' cannot be before 'Week Starting'");
		}
		
		//WDEV-10444 - if we have previously generated sessions for this profile don't allow setting of to date before either of these dates
		if(profile.getEffToIsNotNull())
		{
			if(profile.getLastActualGenDateIsNotNull())
			{
				if(profile.getEffTo().isLessThan(profile.getLastActualGenDate()))
					errors.add("Profile 'End Date' cannot be before 'Last Actual Generated Date' (" + profile.getLastActualGenDate().toString() + ")");
			}
			else if(profile.getLastGenDateIsNotNull())
			{
				if(profile.getEffTo().isLessThan(profile.getLastGenDate()))
					errors.add("Profile 'End Date' cannot be before 'Last Generated Date' (" + profile.getLastGenDate().toString() + ")");			
			}
		}
		
		

		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	//WDEV-13224
	private boolean atLeastOneSlotIsActive(ProfileParentChildSlotVoCollection parentChildSlots) 
	{
		if(parentChildSlots == null || parentChildSlots.size() == 0)
			return false;
		
		for(ProfileParentChildSlotVo slot : parentChildSlots)
		{
			if(slot == null)
				continue;
			
			if(slot.getIsActive())
				return true;
		}
		
		return false;
	}

	private boolean isDirectoryOfServiceLocationEqualProfileLocation(Sch_ProfileGenericVo profile, SlotDirectoryOfServiceVo voSlotDirService)
	{
		if (profile == null || voSlotDirService == null)
			return true;

		if (profile.getSchLocationIsNotNull() && voSlotDirService.getDirectoryOfServiceIsNotNull())
			return profile.getSchLocation().equals(voSlotDirService.getDirectoryOfService().getLocation());

		return false;
	}

	private void open()
	{
		this.clearScreen();
		searchProfiles();
		form.grdProfiles().setValue(null);
		form.setMode(FormMode.VIEW);	
	}

	private ProfileTemplateVoCollection populateTemplatesFromScreen()
	{
		ProfileTemplateVoCollection voCollTemplates = new ProfileTemplateVoCollection();
		for (int i = 0; i < form.lyrDetails().tabTemplates().grdTemplates().getRows().size(); i++)
		{
			ProfileTemplateVo voProfileTemplate = form.lyrDetails().tabTemplates().grdTemplates().getRows().get(i).getValue();
			voProfileTemplate.setProfile(form.getLocalContext().getCurrentProfile());
			voProfileTemplate.setTemplate(form.lyrDetails().tabTemplates().grdTemplates().getRows().get(i).getColTemplate());
			voCollTemplates.add(voProfileTemplate);
		}
		return voCollTemplates.size() > 0 ? voCollTemplates : null;
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		this.clearScreen();
		searchProfiles();
		form.grdProfiles().setValue(null);
		form.setMode(FormMode.VIEW);
		updateControlState();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{

		form.getLocalContext().setLastMenuItem(new Integer(menuItemID));
		// For Add, put null in the global context before loading the profile
		// slots dialog
		switch (menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.ProfilesMenu.ADD :
				addRecord();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfilesMenu.UPDATE :
				updateRecord();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfilesMenu.CLONE_PROFILE :
				cloneRecord();
			break;

			// list owners
			case GenForm.ContextMenus.SchedulingNamespace.ProfileListOwners.ADD :
				addListOwner();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileListOwners.EDIT :
				form.lyrDetails().tabListOwners().grdListOwner().getSelectedRow().setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileListOwners.REMOVE :
				form.lyrDetails().tabListOwners().grdListOwner().removeSelectedRow();
				updateControlState();
			break;

			// slots general
			case GenForm.ContextMenus.SchedulingNamespace.ProfileSlotsGeneral.ADD :
				addSlotGeneral();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileSlotsGeneral.EDIT :
				editSlotGeneral();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileSlotsGeneral.REMOVE :
			
				//Inactivate SelectedItem
				if(form.lyrDetails().tabSlots().grdSlotsGeneral().getValue() != null)
				{
					form.lyrDetails().tabSlots().grdSlotsGeneral().getValue().setIsActive(false);
					form.lyrDetails().tabSlots().grdSlotsGeneral().getSelectedRow().setcolSlotsActive(false);
					if(form.getGlobalContext().Scheduling.getProfileSlotGenericIsNotNull())
						form.getGlobalContext().Scheduling.getProfileSlotGeneric().setIsActive(false);
				}
				
				//WDEV-15319
				if (form.lyrDetails().tabSlots().grdSlotsGeneral().getValue() != null && Boolean.TRUE.equals(form.lyrDetails().tabSlots().chkSlotsActiveOnly().getValue()))
				{
					onChkSlotsActiveOnlyValueChanged();
				}
				else
				{
					updateControlState();
				}
			break;

			// booking rights
			case GenForm.ContextMenus.SchedulingNamespace.ProfileBookingRights.ADD :
				addBookingRight();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileBookingRights.EDIT :
				form.lyrDetails().tabBookingRights().grdBookingRights().getSelectedRow().setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileBookingRights.REMOVE :
				form.lyrDetails().tabBookingRights().grdBookingRights().removeSelectedRow();
				updateControlState();
			break;

			// exclusion dates
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionDates.ADD :
				addExclusionDate();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionDates.EDIT :
				form.lyrDetails().tabExclusion().grdExclDates().getSelectedRow().setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionDates.REMOVE :
				form.lyrDetails().tabExclusion().grdExclDates().removeSelectedRow();
				updateControlState();
			break;

			// exclusion times
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionTimes.ADD :
				addExclusionTime();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionTimes.EDIT :
				form.lyrDetails().tabExclusion().grdExclPeriods().getSelectedRow().setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionTimes.REMOVE :
				form.lyrDetails().tabExclusion().grdExclPeriods().removeSelectedRow();
				updateControlState();
			break;

			// templates
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTemplates.ADDTEMPLATE :
				addTemplate();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTemplates.REMOVETEMPLATE :
				removeTemplate();
				updateControlState();
			break;

			// theatre
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatre.ADD :
				addTheatre();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatre.REMOVE :
				removeTheatre();
			break;
			
			//WDEV-11777
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatreTCITimes.ADD :
				addTheatreTCI();
				updateControlState();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatreTCITimes.REMOVE :
				removeTheatreTCI();
			break;
			
			
			//WDEV-12918
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatreSlots.ADD :
				addTheatreSlot();
				updateControlState();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatreSlots.REMOVE :
				removeTheatreSlot();
			break;
			
			//activity
			case GenForm.ContextMenus.SchedulingNamespace.ProfileActivity.ADD :
				addActivity();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileActivity.REMOVE :
				removeActivity();
				updateControlState();
			break;
		}
	}

	//WDEV-12918
	private void removeTheatreSlot()
	{
		form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().removeSelectedRow();
		updateControlState();
	}
	
	//WDEV-12918
	private void addTheatreSlot()
	{
		form.getGlobalContext().Scheduling.setProfileParentChildSlot(new ProfileParentChildSlotVo());
		openTheatreSlotsDialog();
	}

	private void openTheatreSlotsDialog()
	{
		List<String> errors = new ArrayList<String>();

		if (form.lyrDetails().tabProfileDetails().timStartTime().getValue() == null)
			errors.add("Start Time on Profile Details Tab is mandatory");

		if (form.lyrDetails().tabProfileDetails().timEndTime().getValue() == null)
			errors.add("End Time on Profile Details Tab is mandatory");

		String[] arrErrors = errors.toArray(new String[0]);
		if (arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		form.getGlobalContext().Scheduling.setProfileStartTime(form.lyrDetails().tabProfileDetails().timStartTime().getValue());
		form.getGlobalContext().Scheduling.setProfileEndTime(form.lyrDetails().tabProfileDetails().timEndTime().getValue());

		engine.open(form.getForms().Scheduling.ProfileTheatreSlotDialog);
	}

	//WDEV-11777
	private void removeTheatreTCI()
	{
		form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().removeSelectedRow();
		updateControlState();
	}

	//WDEV-11777
	private void addTheatreTCI()
	{
		grdTCITimesRow tRow = form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().newRow(true);
		tRow.setValue(new ProfileTheatreTCISlotVo());
		tRow.setReadOnly(false);
	}

	private void removeActivity()
	{
		form.lyrDetails().tabActivities().grdActivities().removeSelectedRow();
		updateControlState();
	}

	private void addActivity()
	{
		if(form.getLocalContext().getProfileActivities() == null || form.getLocalContext().getProfileActivities().size() == 0)
		{
			engine.showErrors(new String[] {"No Available Activities"});
			return;
		}
		
		GenForm.lyrDetailsLayer.tabActivitiesContainer.grdActivitiesRow aRow = form.lyrDetails().tabActivities().grdActivities().getRows().newRow(true);
		
		if(form.getLocalContext().getProfileActivities() != null)
		{
			for (ActivityLiteVo voActivity : form.getLocalContext().getProfileActivities())
				aRow.getcolActivity().newRow(voActivity, voActivity.getName());
			
			if(form.getLocalContext().getProfileActivities().size() == 1)
				aRow.getcolActivity().setValue(form.getLocalContext().getProfileActivities().get(0));
		}
		
		aRow.setcolActive(true);
		aRow.setValue(new ProfileActivityVo());
		aRow.setReadOnly(false);
	}

	private void removeTheatre()
	{
		form.lyrDetails().tabTheatre().grdTheatre().removeSelectedRow();
		updateControlState();
	}

	private void addTheatre()
	{
		GenForm.lyrDetailsLayer.tabTheatreContainer.grdTheatreRow tRow = form.lyrDetails().tabTheatre().grdTheatre().getRows().newRow(true);
		tRow.setValue(new TheatreDetailLiteVo());
		//WDEV-9907
		tRow.setcolActive(true);
		tRow.setReadOnly(false);
	}

	private void addExclusionTime()
	{
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclPeriodsRow etRow = form.lyrDetails().tabExclusion().grdExclPeriods().getRows().newRow(true);
		etRow.setValue(new Profile_Exc_TimeVo());
	}

	private void addExclusionDate()
	{
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclDatesRow edRow = form.lyrDetails().tabExclusion().grdExclDates().getRows().newRow(true);
		edRow.setValue(new Profile_Exc_DateVo());
	}

	private void addBookingRight()
	{
		GenForm.lyrDetailsLayer.tabBookingRightsContainer.grdBookingRightsRow bRow = form.lyrDetails().tabBookingRights().grdBookingRights().getRows().newRow(true);
		// Setup the contents of the combos
		loadRolesUsersIntoGridColumnCombo(bRow);
		bRow.setValue(new Profile_BookRightsVo());
		bRow.setReadOnly(false);
	}

	private void editSlotGeneral()
	{
		form.getGlobalContext().Scheduling.setProfileSlotGeneric((Profile_SlotGenericVo)form.lyrDetails().tabSlots().grdSlotsGeneral().getValue());
		openSlotsDialog();
	}

	private void addSlotGeneral()
	{
		form.getGlobalContext().Scheduling.setProfileSlotGeneric(new Profile_SlotGenericVo());
		openSlotsDialog();
	}

	private void openSlotsDialog()
	{
		List<String> errors = new ArrayList<String>();

		if (form.lyrDetails().tabProfileDetails().timStartTime().getValue() == null)
			errors.add("Start Time on Profile Details Tab is mandatory");

		if (form.lyrDetails().tabProfileDetails().timEndTime().getValue() == null)
			errors.add("End Time on Profile Details Tab is mandatory");

		if (form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue() == null)
			errors.add("Service on General Details Tab is mandatory");

		String[] arrErrors = errors.toArray(new String[0]);
		if (arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		form.getGlobalContext().Scheduling.setProfileService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());
		form.getGlobalContext().Scheduling.setProfileStartTime(form.lyrDetails().tabProfileDetails().timStartTime().getValue());
		form.getGlobalContext().Scheduling.setProfileEndTime(form.lyrDetails().tabProfileDetails().timEndTime().getValue());
		form.getGlobalContext().Scheduling.setListOwnerCollection(getSelectedListOwnersColl());
		form.getGlobalContext().Scheduling.setDirectoryofServicesCollection(getSelectedDosColl());

		engine.open(form.getForms().Scheduling.ProfilesSlotGeneric);
	}

	private void addListOwner()
	{
		GenForm.lyrDetailsLayer.tabListOwnersContainer.grdListOwnerRow oRow = form.lyrDetails().tabListOwners().grdListOwner().getRows().newRow(true);
		oRow.setValue(new Profile_ListOwnerVo());

		oRow.setReadOnly(false);
	}

	private void removeTemplate()
	{
		if (form.lyrDetails().tabTemplates().grdTemplates().getSelectedRowIndex() == -1)
		{
			engine.showMessage("Please select a row to delete");
			return;
		}

		form.lyrDetails().tabTemplates().grdTemplates().removeSelectedRow();
	}

	private void addTemplate()
	{
		form.getGlobalContext().Core.setReportTemplateRef(null);
		form.getGlobalContext().Core.setTemplate(null);
		engine.open(form.getForms().Core.ReportTemplate);
	}

	private void updateRecord()
	{
		form.setMode(FormMode.EDIT);
		form.lyrDetails().tabGeneralDetails().chkProfileActive().setEnabled(true);

		if (ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))
		{
			// Load the dos not selected
			ServiceShortVo voService = form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue();
			if (voService != null)
				loadDos(voService, true);
		}
	}

	private void addRecord()
	{
		form.setMode(FormMode.EDIT);
		form.lyrDetails().tabGeneralDetails().chkProfileActive().setEnabled(true);
		form.getLocalContext().setCurrentProfile(new Sch_ProfileGenericVo());
		
		this.clearScreen();
		form.lyrDetails().tabGeneralDetails().chkProfileActive().setValue(true);
		form.grdProfiles().setValue(null);
		form.lyrDetails().showtabGeneralDetails();
		//WDEV-18369
		form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setValue(ConsultationMediaType.FACETOFACE);
		updateControlState();

	}

	private void cloneRecord()
	{
		form.setMode(FormMode.EDIT);
		form.lyrDetails().tabGeneralDetails().chkProfileActive().setValue(true);
		form.lyrDetails().tabGeneralDetails().chkProfileActive().setEnabled(false);
		
		form.getLocalContext().getCurrentProfile().clearIDAndVersion();
		if (form.getLocalContext().getCurrentProfile().getProfileSlotsIsNotNull() && form.getLocalContext().getCurrentProfile().getProfileSlots().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getProfileSlots().size(); i++)
			{
				Profile_SlotGenericVo profileSlot = form.getLocalContext().getCurrentProfile().getProfileSlots().get(i);
				profileSlot.clearIDAndVersion();
				
				//WDEV-11701
				if(profileSlot.getDirectoryOfServiceIsNotNull())
				{
					for(SlotDirectoryOfServiceVo voSlotDos : profileSlot.getDirectoryOfService())
						voSlotDos.clearIDAndVersion();
				}
			}
		}

		// WDEV-12029
		// When cloning a profile load DoS not selected to allow user to associate more than
		// the DoS associated with initial profile
		if (ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))
		{
			ServiceShortVo voService = form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue();
			if (voService != null)
				loadDos(voService, true);
		}

		if (form.getLocalContext().getCurrentProfile().getBookingRightsIsNotNull() && form.getLocalContext().getCurrentProfile().getBookingRights().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getBookingRights().size(); i++)
			{
				Profile_BookRightsVo bookingRight = form.getLocalContext().getCurrentProfile().getBookingRights().get(i);
				bookingRight.clearIDAndVersion();
			}
		}
		if (form.getLocalContext().getCurrentProfile().getListOwnersIsNotNull() && form.getLocalContext().getCurrentProfile().getListOwners().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getListOwners().size(); i++)
			{
				Profile_ListOwnerVo listOwners = form.getLocalContext().getCurrentProfile().getListOwners().get(i);
				listOwners.clearIDAndVersion();
			}
		}
		if (form.getLocalContext().getCurrentProfile().getExclusionDatesIsNotNull() && form.getLocalContext().getCurrentProfile().getExclusionDates().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getExclusionDates().size(); i++)
			{
				Profile_Exc_DateVo profile_Exc_DateVo = form.getLocalContext().getCurrentProfile().getExclusionDates().get(i);
				profile_Exc_DateVo.clearIDAndVersion();
			}
		}
		if (form.getLocalContext().getCurrentProfile().getExclusionTimesIsNotNull() && form.getLocalContext().getCurrentProfile().getExclusionTimes().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getExclusionTimes().size(); i++)
			{
				Profile_Exc_TimeVo profile_Exc_TimeVo = form.getLocalContext().getCurrentProfile().getExclusionTimes().get(i);
				profile_Exc_TimeVo.clearIDAndVersion();
			}
		}
		//WDEV-7443
		if (form.getLocalContext().getCurrentProfile().getTheatreDetailsIsNotNull() && form.getLocalContext().getCurrentProfile().getTheatreDetails().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getTheatreDetails().size(); i++)
			{
				TheatreDetailLiteVo voTheatreDetail = form.getLocalContext().getCurrentProfile().getTheatreDetails().get(i);
				voTheatreDetail.clearIDAndVersion();
			}
		}
		
		//WDEV-11777
		if (form.getLocalContext().getCurrentProfile().getProfileTheatreSlotsIsNotNull() && form.getLocalContext().getCurrentProfile().getProfileTheatreSlots().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getProfileTheatreSlots().size(); i++)
			{
				ProfileTheatreTCISlotVo voTheatreSlot = form.getLocalContext().getCurrentProfile().getProfileTheatreSlots().get(i);
				voTheatreSlot.clearIDAndVersion();
			}
		}
		
		if (form.getLocalContext().getCurrentProfile().getParentChildSlotsIsNotNull() && form.getLocalContext().getCurrentProfile().getParentChildSlots().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getParentChildSlots().size(); i++)
			{
				ProfileParentChildSlotVo voParentChildSlot = form.getLocalContext().getCurrentProfile().getParentChildSlots().get(i);
				voParentChildSlot.clearIDAndVersion();
			}
		}
		
		//WDEV-11701
		if (form.getLocalContext().getCurrentProfile().getProfileActivitiesIsNotNull() && form.getLocalContext().getCurrentProfile().getProfileActivities().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getProfileActivities().size(); i++)
			{
				ProfileActivityVo voProfileActivity = form.getLocalContext().getCurrentProfile().getProfileActivities().get(i);
				voProfileActivity.clearIDAndVersion();
			}
		}
		
		//WDEV-8388
		form.getLocalContext().getCurrentProfile().setLastGenDate(null);
		form.getLocalContext().getCurrentProfile().setLastActualGenDate(null);
		
		form.lyrDetails().tabProfileDetails().dteStartDate().setEnabled(true);
	}

	private DirectoryOfServiceVoCollection getSelectedDosColl()
	{
		if (form.lyrDetails().tabDOS().grdDOS().getRows().size() == 0)
			return null;

		DirectoryOfServiceVoCollection voCollDirServices = new DirectoryOfServiceVoCollection();
		GenForm.lyrDetailsLayer.tabDOSContainer.grdDOSRow dRow = null;
		for (int i = 0; i < form.lyrDetails().tabDOS().grdDOS().getRows().size(); i++)
		{
			dRow = form.lyrDetails().tabDOS().grdDOS().getRows().get(i);
			if (dRow.getColSelected() == true)
				voCollDirServices.add(dRow.getValue());
		}

		return voCollDirServices;
	}

	private Profile_ListOwnerVoCollection getSelectedListOwnersColl()
	{
		if (form.lyrDetails().tabListOwners().grdListOwner().getRows().size() == 0)
			return null;

		Profile_ListOwnerVoCollection voColl = new Profile_ListOwnerVoCollection();
		GenForm.lyrDetailsLayer.tabListOwnersContainer.grdListOwnerRow row = null;
		for (int i = 0; i < form.lyrDetails().tabListOwners().grdListOwner().getRows().size(); i++)
		{
			row = form.lyrDetails().tabListOwners().grdListOwner().getRows().get(i);
			Profile_ListOwnerVo vo = row.getValue();
			vo.setHCP((HcpLiteVo) row.getColHcp().getValue());
			voColl.add(vo);
		}

		return voColl;
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Admin.LocationSelect) && result.equals(DialogResult.OK))
		{
			setLocation();
			onCmbSpecialityValueChanged();
		}
		else if (formName.equals(form.getForms().Scheduling.ProfilesSlotGeneric) && (result.equals(DialogResult.OK)))
		{
			Profile_SlotGenericVo vo = form.getGlobalContext().Scheduling.getProfileSlotGeneric();
			int lastMenuItemId = form.getLocalContext().getLastMenuItem().intValue();
			if (lastMenuItemId == GenForm.ContextMenus.SchedulingNamespace.ProfileSlotsGeneral.ADD)
			{
				GenForm.lyrDetailsLayer.tabSlotsContainer.grdSlotsGeneralRow row = form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().newRow();
				populateSlotsRow(row, vo, true); //WDEV-12039
	
				//WDEV-15319
				if (Boolean.TRUE.equals(form.lyrDetails().tabSlots().chkSlotsActiveOnly().getValue()) && Boolean.FALSE.equals(vo.getIsActive()))
				{
					onChkSlotsActiveOnlyValueChanged();
				}
				else
				{
					updateControlState();
				}
			}
			else if (lastMenuItemId == GenForm.ContextMenus.SchedulingNamespace.ProfileSlotsGeneral.EDIT)
			{
				int idx = form.lyrDetails().tabSlots().grdSlotsGeneral().getSelectedRowIndex();
				GenForm.lyrDetailsLayer.tabSlotsContainer.grdSlotsGeneralRow row = form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().get(idx);
				populateSlotsRow(row, vo, true); //WDEV-12039
				
				//WDEV-15319
				if (Boolean.TRUE.equals(form.lyrDetails().tabSlots().chkSlotsActiveOnly().getValue()) && Boolean.FALSE.equals(vo.getIsActive()))
				{
					onChkSlotsActiveOnlyValueChanged();
				}
				else
				{
					updateControlState();
				}
			}
		}
		else if (formName.equals(form.getForms().Core.ReportTemplate) && result.equals(DialogResult.OK))
		{
			addTemplateRow();
		}
		else if (formName.equals(form.getForms().Scheduling.ProfileTheatreSlotDialog) && (result.equals(DialogResult.OK)))
		{
			ProfileParentChildSlotVo vo = form.getGlobalContext().Scheduling.getProfileParentChildSlot();
			int lastMenuItemId = form.getLocalContext().getLastMenuItem().intValue();
			if (lastMenuItemId == GenForm.ContextMenus.SchedulingNamespace.ProfileTheatreSlots.ADD)
			{
				grdParentChildSlotsRow row = form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().newRow();
				populateParentChilSlotsRow(row, vo);
				row.setSelectable(true);
				updateControlState();
			}
		}
	}

	//WDEV-12918
	private void populateParentChilSlotsRow(grdParentChildSlotsRow row, ProfileParentChildSlotVo vo)
	{
		row.setValue(vo);
		if(vo.getIsActiveIsNotNull())
			row.setColActive(vo.getIsActive().booleanValue());
		if (vo.getDurationIsNotNull())
			row.setColDuration(vo.getDuration().toString());
		if (vo.getStartTimeIsNotNull()) 
			row.setColStartTime(vo.getStartTime().toString());

		row.setSelectable(true);
	}
	
	private void addTemplateRow()
	{
		if (form.getGlobalContext().Core.getReportTemplateRef() instanceof ReportTemplateLiteVo)
		{
			if (!templateAddedPreviously((ReportTemplateLiteVo) form.getGlobalContext().Core.getReportTemplateRef()))
			{
				grdTemplatesRow row = form.lyrDetails().tabTemplates().grdTemplates().getRows().newRow();
				row.setColTemplate((ReportTemplateLiteVo) form.getGlobalContext().Core.getReportTemplateRef());
				row.setValue(new ProfileTemplateVo());
			}
		}
	}

	private boolean templateAddedPreviously(ReportTemplateLiteVo selectedTemplate)
	{
		for (int i = 0; i < form.lyrDetails().tabTemplates().grdTemplates().getRows().size(); i++)
		{
			grdTemplatesRow row = form.lyrDetails().tabTemplates().grdTemplates().getRows().get(i);
			if (row.getColTemplate() != null && row.getColTemplate().equals(selectedTemplate))
				return true;
		}

		return false;
	}

	private void setLocation()
	{
		LocShortVo voLocShort = form.getGlobalContext().Admin.getProfileLocation();

		Sch_ProfileGenericVo voProfile = form.getLocalContext().getCurrentProfile();
		voProfile.setSchLocation(voLocShort);
		form.getLocalContext().setCurrentProfile(voProfile);

		form.lyrDetails().tabGeneralDetails().txtLocation().setValue(voLocShort.getName());
	}

	private void populateSlotsRow(GenForm.lyrDetailsLayer.tabSlotsContainer.grdSlotsGeneralRow row, Profile_SlotGenericVo vo, boolean selectable)
	{
		row.setValue(vo);
		row.setcolSlotsActive(vo.getIsActive().booleanValue());
		if (vo.getActivityIsNotNull())
			row.setcolSlotsActivity(vo.getActivity().getName());
		if (vo.getDurationIsNotNull())
			row.setcolSlotsDuration(vo.getDuration().toString());
		if (vo.getPriorityIsNotNull())
			row.setcolSlotsPriority(vo.getPriority().getText());
		if (vo.getStartTmIsNotNull())
			row.setcolSlotsStartTime(vo.getStartTm().toString());

		row.setSelectable(selectable);
	}

	protected void onCmbIntervalTypeValueChanged() throws PresentationLogicException
	{
		setIntervalControlStates(true);
	}

	private void setIntervalControlStates(boolean bClearFields)
	{
		if (form.lyrDetails().tabProfileDetails().cmbIntervalType().getValue() == null)
		{
			enableAndClearIntervalControls(NOINTERVAL, false, bClearFields);
			return;
		}

		if (form.lyrDetails().tabProfileDetails().cmbIntervalType().getValue().equals(Profile_Interval_Type.MONTHLY))
		{
			enableAndClearIntervalControls(MONTHLYINTERVAL, true, bClearFields);
		}
		else if (form.lyrDetails().tabProfileDetails().cmbIntervalType().getValue().equals(Profile_Interval_Type.WEEKLY))
		{
			enableAndClearIntervalControls(WEEKLYINTERVAL, true, bClearFields);
		}
	}

	private void enableAndClearIntervalControls(int intervalType, boolean bEnable, boolean bClearFields)
	{
		if (bClearFields)
		{
			form.lyrDetails().tabProfileDetails().chkFive().setValue(false);
			form.lyrDetails().tabProfileDetails().chkFour().setValue(false);
			form.lyrDetails().tabProfileDetails().chkThree().setValue(false);
			form.lyrDetails().tabProfileDetails().chkTwo().setValue(false);
			form.lyrDetails().tabProfileDetails().chkOne().setValue(false);

			if (intervalType != WEEKLYINTERVAL)
			{
				form.lyrDetails().tabProfileDetails().chkMonday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkTuesday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkWednesday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkThursday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkFriday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkSaturday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkSunday().setValue(false);
			}
		}
		switch (intervalType)
		{
			case NOINTERVAL :
				form.lyrDetails().tabProfileDetails().chkFive().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkFour().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkThree().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkTwo().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkOne().setEnabled(false);

				form.lyrDetails().tabProfileDetails().chkMonday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkTuesday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkWednesday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkThursday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkFriday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkSaturday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkSunday().setEnabled(false);
			break;
			case MONTHLYINTERVAL :
				form.lyrDetails().tabProfileDetails().chkFive().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkFour().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkThree().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkTwo().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkOne().setEnabled(form.getMode().equals(FormMode.EDIT));

				form.lyrDetails().tabProfileDetails().chkMonday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkTuesday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkWednesday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkThursday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkFriday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkSaturday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkSunday().setEnabled(form.getMode().equals(FormMode.EDIT));
			break;
			case WEEKLYINTERVAL :
				form.lyrDetails().tabProfileDetails().chkFive().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkFour().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkThree().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkTwo().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkOne().setEnabled(false);

				form.lyrDetails().tabProfileDetails().chkMonday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkTuesday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkWednesday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkThursday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkFriday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkSaturday().setEnabled(form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkSunday().setEnabled(form.getMode().equals(FormMode.EDIT));
			break;
		}
	}

	protected void onGrdListOwnersGridQueryComboBoxTextSubmited(int column, grdListOwnerRow row, String text) throws PresentationLogicException
	{
		row.getColHcp().clear();

		HcpFilter filter = new HcpFilter();
		PersonName voName = new PersonName();
		voName.setSurname(text);
		filter.setQueryName(voName);

		HcpLiteVoCollection voCollHcp = domain.listHcpLite(filter);
		if (voCollHcp.size() == 0)
		{
			engine.showMessage("No matching records found");
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			row.getColHcp().newRow(voCollHcp.get(i), voCollHcp.get(i).getName().toString());
		}

		if (voCollHcp.size() == 1)
			row.getColHcp().setValue(voCollHcp.get(0));
		else
			row.getColHcp().showOpened();

	}

	protected void onBtnSearchClick() throws PresentationLogicException
	{
		searchProfiles();
		updateControlState();//WDEV-14644
		if (form.grdProfiles().getRows().size() == 0)
			engine.showMessage("No matching Profiles found.");
	}

	protected void onBtnClearClick() throws PresentationLogicException
	{
		//WDEV-16799 
		form.qmbFilterDirectoryOfService().setValue(null);
		form.cmbFilterSpecialty().setValue(null);
		form.cmbHospFilter().setValue(null);
		
		//WDEV-13362
		form.txtName().setValue(null);
		form.ccListOwner().clear();
		form.chkFilterOutpatients().setValue(false);
		form.chkFilterTheatre().setValue(false);
		
		form.grdProfiles().getRows().clear();
		
		this.clearScreen();
		updateControlState();//WDEV-14644
	}

	protected void onRadioButtonGroupSlotTypeValueChanged() throws PresentationLogicException
	{
		setSlotsTabsState();
	}

	private void setSlotsTabsState()
	{
		if (ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"))
			form.lyrDetails().tabSlots().setHeaderVisible(true);
		else if (ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))
			form.lyrDetails().tabDOS().setHeaderVisible(true);
	}

	protected void onFormModeChanged()
	{
		updateControlState();
	}

	private void updateControlState()
	{
		form.getContextMenus().Scheduling.hideAllProfileBookingRightsMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileTemplatesMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileExclusionDatesMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileExclusionTimesMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileSlotsGeneralMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileListOwnersMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileTheatreMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileActivityMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileTheatreTCITimesMenuItems(); //WDEV-11777
		form.getContextMenus().Scheduling.hideAllProfileTheatreSlotsMenuItems(); //WDEV-12918
		
		if (ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue())
		{
			form.lyrDetails().tabGeneralDetails().chkTheatre().setVisible(true);
			form.lyrDetails().tabGeneralDetails().lblTheatreType().setVisible(true);
			form.lyrDetails().tabGeneralDetails().chkTheatre().setEnabled(form.getMode().equals(FormMode.VIEW) ? false : true);
			form.lyrDetails().tabGeneralDetails().cmbTheatreType().setVisible(true);
			form.lyrDetails().tabGeneralDetails().cmbTheatreType().setEnabled(form.getMode().equals(FormMode.EDIT) && form.lyrDetails().tabGeneralDetails().chkTheatre().getValue() ? true : false);
			//WDEV-12918
			form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setVisible(true);
			form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setEnabled(form.getMode().equals(FormMode.EDIT) && form.lyrDetails().tabGeneralDetails().chkTheatre().getValue() ? true : false);
			
			//default SlotType according to ConfigFlag if we are adding a new TheatreProfile
			if(form.getLocalContext().getCurrentProfile() != null && form.getLocalContext().getCurrentProfile().getID_Sch_Profile() == null && form.lyrDetails().tabGeneralDetails().cmbSlotType().getValue() == null && form.lyrDetails().tabGeneralDetails().chkTheatre().getValue() == true && form.getMode().equals(FormMode.EDIT))
			{
				if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
					form.lyrDetails().tabGeneralDetails().cmbSlotType().setValue(SlotType.THEATRETCITIME);
				else if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("Fixed"))
					form.lyrDetails().tabGeneralDetails().cmbSlotType().setValue(SlotType.SLOTS);
			}
			
			//WDEV-12918
			if(form.lyrDetails().tabGeneralDetails().cmbSlotType().getValue() != null)
			{
				if(form.lyrDetails().tabGeneralDetails().cmbSlotType().getValue().equals(SlotType.THEATRETCITIME))
					form.lyrDetails().tabTheatre().lyrSlots().showtabTCI();
				else if(form.lyrDetails().tabGeneralDetails().cmbSlotType().getValue().equals(SlotType.SLOTS))
					form.lyrDetails().tabTheatre().lyrSlots().showtabTheatreSlots();
			}	
		}
		else
		{
			form.lyrDetails().tabGeneralDetails().chkTheatre().setVisible(false);
			form.lyrDetails().tabGeneralDetails().cmbTheatreType().setVisible(false);
			form.lyrDetails().tabGeneralDetails().lblTheatreType().setVisible(false);
			//WDEV-12918
			form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setVisible(false);
			form.lyrDetails().tabGeneralDetails().lblAnaesType().setVisible(false);
		}
		
		if (form.lyrDetails().tabGeneralDetails().chkTheatre().getValue())
		{
			form.lyrDetails().tabDOS().setHeaderVisible(false);
			form.lyrDetails().tabSlots().setHeaderVisible(false);
			form.lyrDetails().tabTheatre().setHeaderVisible(true);
		}
		else
		{
			if(ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals(new String("Local Only")))   	//wdev-12846
				form.lyrDetails().tabDOS().setHeaderVisible(false);										//wdev-12846
			else
				form.lyrDetails().tabDOS().setHeaderVisible(true);
			
			form.lyrDetails().tabSlots().setHeaderVisible(true);
			form.lyrDetails().tabTheatre().setHeaderVisible(false);
		}
		
		form.lyrDetails().tabActivities().setHeaderVisible(false);
		if(form.lyrDetails().tabGeneralDetails().chkFlexible().getValue())
		{
			form.lyrDetails().tabDOS().setHeaderVisible(false);
			form.lyrDetails().tabSlots().setHeaderVisible(false);
			form.lyrDetails().tabActivities().setHeaderVisible(true);
		}

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().Scheduling.getProfilesMenuADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfilesMenuUPDATEItem().setVisible(form.grdProfiles().getValue() != null);
			form.getContextMenus().Scheduling.getProfilesMenuCLONE_PROFILEItem().setVisible(form.grdProfiles().getValue() != null);
			//WDEV-16799 
			form.qmbFilterDirectoryOfService().setEnabled(true);
			//WDEV-13362
			form.ccListOwner().setEnabled(true);
		}
		else if (form.getMode().equals(FormMode.EDIT))	
		{
			//WDEV-13362
			form.ccListOwner().setEnabled(false);
			//WDEV-16799
			form.qmbFilterDirectoryOfService().setEnabled(false);
			//WDEV-7615
			form.lyrDetails().tabGeneralDetails().cmbTheatreType().setEnabled(form.lyrDetails().tabGeneralDetails().chkTheatre().getValue());
			//WDEV-18369 
			form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setEnabled(!form.lyrDetails().tabGeneralDetails().chkTheatre().getValue());
			//WDEV-12918
			form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setEnabled(form.lyrDetails().tabGeneralDetails().chkTheatre().getValue());
			
			if(!form.lyrDetails().tabGeneralDetails().chkTheatre().getValue()) 
			{
				form.lyrDetails().tabGeneralDetails().cmbTheatreType().setValue(null);
				//WDEV-12918
				form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setValues(null);
				form.lyrDetails().tabGeneralDetails().cmbSlotType().setValue(null);
			}
			
			// WDEV-6918
			if (form.grdProfiles().getValue() != null)
				form.lyrDetails().tabProfileDetails().dteStartDate().setEnabled(form.grdProfiles().getValue().getLastActualGenDate() == null);
			else
				form.lyrDetails().tabProfileDetails().dteStartDate().setEnabled(true);

			enableRowSelection();

			form.getContextMenus().Scheduling.getProfilesMenuADDItem().setVisible(false);
			form.getContextMenus().Scheduling.getProfilesMenuUPDATEItem().setVisible(false);
			form.getContextMenus().Scheduling.getProfilesMenuCLONE_PROFILEItem().setVisible(false);

			form.getContextMenus().Scheduling.getProfileBookingRightsADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfileTemplatesADDTEMPLATEItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfileExclusionDatesADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfileExclusionTimesADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfileSlotsGeneralADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfileListOwnersADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfileTheatreADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfileTheatreTCITimesADDItem().setVisible(true); //WDEV-11777
			form.getContextMenus().Scheduling.getProfileActivityADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfileTheatreSlotsADDItem().setVisible(true); //WDEV-12918

			form.getContextMenus().Scheduling.getProfileBookingRightsEDITItem().setVisible(form.lyrDetails().tabBookingRights().grdBookingRights().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileExclusionDatesEDITItem().setVisible(form.lyrDetails().tabExclusion().grdExclDates().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileExclusionTimesEDITItem().setVisible(form.lyrDetails().tabExclusion().grdExclPeriods().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileSlotsGeneralEDITItem().setVisible(form.lyrDetails().tabSlots().grdSlotsGeneral().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileListOwnersEDITItem().setVisible(form.lyrDetails().tabListOwners().grdListOwner().getSelectedRow() != null);

			form.getContextMenus().Scheduling.getProfileBookingRightsREMOVEItem().setVisible(form.lyrDetails().tabBookingRights().grdBookingRights().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileTemplatesREMOVETEMPLATEItem().setVisible(form.lyrDetails().tabTemplates().grdTemplates().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileExclusionDatesREMOVEItem().setVisible(form.lyrDetails().tabExclusion().grdExclDates().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileExclusionTimesREMOVEItem().setVisible(form.lyrDetails().tabExclusion().grdExclPeriods().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileSlotsGeneralREMOVEItem().setVisible(form.lyrDetails().tabSlots().grdSlotsGeneral().getSelectedRow() != null && form.lyrDetails().tabSlots().grdSlotsGeneral().getSelectedRow().getcolSlotsActive());
			form.getContextMenus().Scheduling.getProfileListOwnersREMOVEItem().setVisible(form.lyrDetails().tabListOwners().grdListOwner().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileTheatreREMOVEItem().setVisible(form.lyrDetails().tabTheatre().grdTheatre().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileActivityREMOVEItem().setVisible(form.lyrDetails().tabActivities().grdActivities().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileTheatreTCITimesREMOVEItem().setVisible(form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getSelectedRow() != null); //WDEV-11777
			form.getContextMenus().Scheduling.getProfileTheatreSlotsREMOVEItem().setVisible(form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getSelectedRow() != null); //WDEV-12918
		}

		setIntervalControlStates(false);
	}

	private void enableRowSelection()
	{
		for (int i = 0; i < form.lyrDetails().tabBookingRights().grdBookingRights().getRows().size(); i++)
		{
			form.lyrDetails().tabBookingRights().grdBookingRights().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrDetails().tabExclusion().grdExclDates().getRows().size(); i++)
		{
			form.lyrDetails().tabExclusion().grdExclDates().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrDetails().tabExclusion().grdExclPeriods().getRows().size(); i++)
		{
			form.lyrDetails().tabExclusion().grdExclPeriods().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrDetails().tabListOwners().grdListOwner().getRows().size(); i++)
		{
			form.lyrDetails().tabListOwners().grdListOwner().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().size(); i++)
		{
			form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrDetails().tabTemplates().grdTemplates().getRows().size(); i++)
		{
			form.lyrDetails().tabTemplates().grdTemplates().getRows().get(i).setSelectable(true);
		}
		
		for (int i = 0; i < form.lyrDetails().tabTheatre().grdTheatre().getRows().size(); i++)
		{
			form.lyrDetails().tabTheatre().grdTheatre().getRows().get(i).setSelectable(true);
		}
		
		for (int i = 0; i < form.lyrDetails().tabActivities().grdActivities().getRows().size(); i++)
		{
			form.lyrDetails().tabActivities().grdActivities().getRows().get(i).setSelectable(true);
		}
		
		//WDEV-11777
		for (int i = 0; i < form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().size(); i++)
		{
			form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().get(i).setSelectable(true);
		}
		
	}

	protected void onGrdBookingRightsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdEventsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdExclDatesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdExclPeriodsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdListOwnerSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdSlotsGeneralSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdTemplatesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onDteStartDateValueChanged() throws PresentationLogicException
	{
		Date dt = form.lyrDetails().tabProfileDetails().dteStartDate().getValue();
		if (dt == null)
			return;

		Date newDate = validateStartDateIsSunday(dt);
		if (newDate != null)
		{
			engine.showErrors(new String[]{"'Week Starting' Date must be a Sunday"});
			form.lyrDetails().tabProfileDetails().dteStartDate().setValue(null);
			form.lyrDetails().tabProfileDetails().dteStartDate().setValue(newDate);
		}
	}

	private Date validateStartDateIsSunday(Date dt)
	{
		if (dt == null)
			return null;

		DayOfWeek weekDay = dt.getDayOfWeek();
		if (!weekDay.equals(DayOfWeek.SUNDAY))
		{
			if (weekDay.equals(DayOfWeek.MONDAY))
				dt.addDay(-1);
			if (weekDay.equals(DayOfWeek.TUESDAY))
				dt.addDay(-2);
			if (weekDay.equals(DayOfWeek.WEDNESDAY))
				dt.addDay(-3);
			if (weekDay.equals(DayOfWeek.THURSDAY))
				dt.addDay(-4);
			if (weekDay.equals(DayOfWeek.FRIDAY))
				dt.addDay(-5);
			if (weekDay.equals(DayOfWeek.SATURDAY))
				dt.addDay(-6);

			return new Date(dt);
		}

		return null;
	}

	private final static int	WEEKLYINTERVAL	= 1;
	private final static int	MONTHLYINTERVAL	= 2;
	private final static int	NOINTERVAL		= 3;

	@Override
	protected void onChkTheatreValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabGeneralDetails().chkTheatre().getValue())
		{	
			form.lyrDetails().tabGeneralDetails().chkFlexible().setValue(false);
			//WDEV-18369
			form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setValue(null);
		}	
		updateControlState();	
	}

	@Override
	protected void onGrdTheatreGridQueryComboBoxTextSubmited(int column, grdTheatreRow row, String text) throws PresentationLogicException
	{
		if(form.lyrDetails().tabListOwners().grdListOwner().getRows().size() == 0)
			return;
		
		row.getcolProcedure().clear();
		
		HcpRefVoCollection voCollHcp = new HcpRefVoCollection();
		for(int i=0;i<form.lyrDetails().tabListOwners().grdListOwner().getRows().size();i++)
			voCollHcp.add ((HcpRefVo) form.lyrDetails().tabListOwners().grdListOwner().getRows().get(i).getColHcp().getValue());

		ProcedureLiteVoCollection voCollProcedure = domain.listProcedureByHcpAndName(voCollHcp, text);
		if(voCollProcedure != null)
		{
			for(ProcedureLiteVo voProc : voCollProcedure)
				row.getcolProcedure().newRow(voProc, voProc.getProcedureName());
			
			if(voCollProcedure.size() > 1)
				row.getcolProcedure().showOpened();
			else if(voCollProcedure.size() == 1)
				row.getcolProcedure().setValue(voCollProcedure.get(0));
			else
				engine.showMessage("No matching records found");
		}
	}

	@Override
	protected void onGrdTheatreSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onChkFlexibleValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabGeneralDetails().chkFlexible().getValue())
			form.lyrDetails().tabGeneralDetails().chkTheatre().setValue(false);
		
		updateControlState();
	}

	@Override
	protected void onGrdActivitiesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onGrdTCITimesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onGrdDOSGridCheckBoxClicked(int column, grdDOSRow row, boolean isChecked) throws PresentationLogicException
	{
		// WDEV-12028
		// If the slot is unchecked and is associated to a slot then display
		// the message box for user to confirm / deny DOS removal from slot
		if(!isChecked && hasSlotAssociated(row.getValue()))
		{
			form.getLocalContext().setSelectedDos(row.getValue());
			form.getLocalContext().setDosMessageBoxID(engine.showMessage("Remove DoS's from Corresponding Slots", "Modify Slots", MessageButtons.YESNO, MessageIcon.QUESTION));
		}
		else
			form.getLocalContext().setSelectedDos(null);
	}

	/**
	 * WDEV-12028
	 * Function used to check if DOS is associated with a slot
	 */
	private boolean hasSlotAssociated(DirectoryOfServiceVo dos)
	{
		if (dos == null)
			return false;
		
		Profile_SlotGenericVoCollection slots = form.lyrDetails().tabSlots().grdSlotsGeneral().getValues();
		
		for (int indexSlot = 0; slots != null && indexSlot < slots.size(); indexSlot++)
		{
			SlotDirectoryOfServiceVoCollection slotDoS = slots.get(indexSlot).getDirectoryOfService();
			
			for (int indexSlotDoS = 0; slotDoS != null && indexSlotDoS < slotDoS.size(); indexSlotDoS++)
			{
				if (dos.equals(slotDoS.get(indexSlotDoS).getDirectoryOfService()))
					return true;
			}
		}

		return false;
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(form.getLocalContext().getDosMessageBoxIDIsNotNull())
		{
			if(messageBoxId == form.getLocalContext().getDosMessageBoxID())
			{
				if(result.equals(DialogResult.YES))
				{
					Profile_SlotGenericVoCollection voCollSlots = form.lyrDetails().tabSlots().grdSlotsGeneral().getValues();
					
					if(voCollSlots != null)
					{
						for(Profile_SlotGenericVo voSlot : voCollSlots)
						{
							if(voSlot.getDirectoryOfServiceIsNotNull())
							{
								if(form.getLocalContext().getSelectedDosIsNotNull())
								{
									for(SlotDirectoryOfServiceVo voSlotDos : voSlot.getDirectoryOfService())
									{
										if(voSlotDos.getDirectoryOfServiceIsNotNull() && voSlotDos.getDirectoryOfService().equals(form.getLocalContext().getSelectedDos()))
										{
											voSlot.getDirectoryOfService().remove(voSlotDos);
											break;
										}
									}
								}
							}
						}
					}	
				}
				if(result.equals(DialogResult.NO))
					form.getLocalContext().setSelectedDos(null);
			}
		}
	}

	@Override
	protected void onChkSlotsActiveOnlyValueChanged() throws PresentationLogicException
	{	
		//WDEV-12039
		storeSlots();
		
		form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().clear();
		
		Profile_SlotGenericVoCollection voCollSlots = form.getLocalContext().getSlots();
		filterSlotsDisplay(voCollSlots, true);
		
		updateControlState();
	}

	//WDEV-12039 need to hold persisted and non-persisted slots locally to allow filtering of unsaved data
	private void storeSlots()
	{
		Profile_SlotGenericVoCollection voCollSlots = form.getLocalContext().getSlots();
		if(voCollSlots == null)
			voCollSlots = new Profile_SlotGenericVoCollection();
		
		for(int i=0;i<form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().size(); i++)
		{
			if(!voCollSlots.contains(form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().get(i).getValue()))
				voCollSlots.add(form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().get(i).getValue());
		}
		
		form.getLocalContext().setSlots(voCollSlots);
	}

	//WDEV-12039
	private void filterSlotsDisplay(Profile_SlotGenericVoCollection voCollSlots, boolean selectable)
	{
		if(voCollSlots == null)
			return;
		
		voCollSlots.sort(SortOrder.ASCENDING);

		Profile_SlotGenericVo voProfileSlot = null;
		GenForm.lyrDetailsLayer.tabSlotsContainer.grdSlotsGeneralRow sRow = null;
		for (int i = 0; i < voCollSlots.size(); i++)
		{
			voProfileSlot = voCollSlots.get(i);
			if(form.lyrDetails().tabSlots().chkSlotsActiveOnly().getValue())
			{
				if(voProfileSlot.getIsActive())
				{
					sRow = form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().newRow();
					populateSlotsRow(sRow, voProfileSlot, selectable);	
				}
			}
			else
			{
				sRow = form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().newRow();
				populateSlotsRow(sRow, voProfileSlot, selectable);	
			}
		}
	}

	protected void onCmbSlotTypeValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdParentChildSlotsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}
	//WDEV-16799 - DoS control is now a query combo to avoid exceeded result limit messages from hibernate on form open.
	@Override
	protected void onQmbFilterDirectoryOfServiceTextSubmited(String value)throws PresentationLogicException
	{
		if (value != null && value.length()> 0)
		{
		DirectoryOfServiceVo voDosFilter = new DirectoryOfServiceVo();
		voDosFilter.setIsActive(Boolean.TRUE);
		voDosFilter.setDoSName(value);
		
		listDos(voDosFilter);
		}
		
	}
	//WDEV-16799
	private void listDos(DirectoryOfServiceVo voDosFilter) 
	{		
			form.qmbFilterDirectoryOfService().clear();
			DirectoryOfServiceVoCollection voCollDoS = domain.listDOS(voDosFilter);
			
			if (voCollDoS == null || voCollDoS.size() == 0)
			{	
				form.qmbFilterDirectoryOfService().showOpened();
				return;	
			}
						
			for (int i=0; i<voCollDoS.size(); i++)
			{
				form.qmbFilterDirectoryOfService().newRow(voCollDoS.get(i), voCollDoS.get(i).getDoSName());	
			}
			
			if (voCollDoS.size() == 1)
			{
				form.qmbFilterDirectoryOfService().setValue(voCollDoS.get(0));
			}
			else
			{
				form.qmbFilterDirectoryOfService().showOpened();
			}
	}
}
