//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.profiles;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabGeneralDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class chklistAnaesthetictypeCheckedListBox extends CheckedListBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
				{
					super.control.newItem(new ListItem(value, text));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, String tooltip)
				{
					super.control.newItem(new ListItem(value, text, tooltip));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, boolean checked)
				{
					super.control.newItem(new ListItem(value, text, checked));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, boolean checked, boolean enabled)
				{
					super.control.newItem(new ListItem(value, text, checked, enabled));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
				{
					super.control.newItem(new ListItem(value, text, image));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, boolean checked)
				{
					super.control.newItem(new ListItem(value, text, image, checked));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, boolean checked, boolean enabled)
				{
					super.control.newItem(new ListItem(value, text, image, checked, enabled));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color color)
				{
					super.control.newItem(new ListItem(value, text, color));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color color, boolean checked)
				{
					super.control.newItem(new ListItem(value, text, color, checked));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color color, boolean checked, boolean enabled)
				{
					super.control.newItem(new ListItem(value, text, color, checked, enabled));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color color, boolean checked)
				{
					super.control.newItem(new ListItem(value, text, image, color, checked));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color color, boolean checked, boolean enabled)
				{
					super.control.newItem(new ListItem(value, text, image, color, checked, enabled));
				}
				public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color color, boolean checked, boolean enabled, String tooltip)
				{
					super.control.newItem(new ListItem(value, text, image, color, checked, enabled, tooltip));
				}
				public ims.clinical.vo.lookups.AnaestheticType[] getValues()
				{
					ListItemCollection checkedItems = super.control.getCheckedItems();
					if(checkedItems.size() == 0)
						return null;
					ims.clinical.vo.lookups.AnaestheticType[] items = new ims.clinical.vo.lookups.AnaestheticType[checkedItems.size()];
					for(int x = 0; x < checkedItems.size(); x++)
					{
						items[x] = (ims.clinical.vo.lookups.AnaestheticType)checkedItems.get(x).getValue();
					}
					return items;
				}
				public void setValues(ims.clinical.vo.lookups.AnaestheticType[] values)
				{
					if(values == null)
						super.control.setCheckedItems(null);
					else
					{
						ListItemCollection checkedItems = new ListItemCollection();
						for(int x = 0; x < values.length; x++)
						{
							ListItem item = new ListItem();
							item.setValue(values[x]);
							checkedItems.add(item);
						}
						super.control.setCheckedItems(checkedItems);
					}
				}
			}
			public static class cmbConsMediaTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.ConsultationMediaType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.ConsultationMediaType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.ConsultationMediaType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.ConsultationMediaType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.ConsultationMediaType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.ConsultationMediaType getValue()
				{
					return (ims.scheduling.vo.lookups.ConsultationMediaType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.ConsultationMediaType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSlotTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.SlotType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.SlotType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.SlotType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.SlotType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.SlotType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.SlotType getValue()
				{
					return (ims.scheduling.vo.lookups.SlotType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.SlotType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTheatreTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.TheatreType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.TheatreType getValue()
				{
					return (ims.scheduling.vo.lookups.TheatreType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.TheatreType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbCategoryComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.Sched_Prfile_Cat value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.Sched_Prfile_Cat value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.Sched_Prfile_Cat value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.Sched_Prfile_Cat value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.Sched_Prfile_Cat value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.Sched_Prfile_Cat getValue()
				{
					return (ims.scheduling.vo.lookups.Sched_Prfile_Cat)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.Sched_Prfile_Cat value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSpecialityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceShortVo getValue()
				{
					return (ims.core.vo.ServiceShortVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceShortVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 248, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultation Media:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 416, 215, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Slot Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 416, 89, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 416, 55, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre Session Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 360, 179, 14, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "*", new Integer(0), null, new Integer(1)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Location:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 89, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 216, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 55, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Profile Name:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 376, 179, 24, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "...", Boolean.FALSE, "Select Location", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 120, 179, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 120, 53, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 246, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbConsMediaTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1024), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbConsMediaTypeTemp);
				cmbConsMediaTypeComboBox cmbConsMediaType = (cmbConsMediaTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbConsMediaTypeComboBox.class, m_cmbConsMediaTypeTemp);
				super.addComboBox(cmbConsMediaType);
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 552, 213, 219, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSlotTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1030), ControlState.HIDDEN, ControlState.HIDDEN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSlotTypeTemp);
				cmbSlotTypeComboBox cmbSlotType = (cmbSlotTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSlotTypeComboBox.class, m_cmbSlotTypeTemp);
				super.addComboBox(cmbSlotType);
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 552, 53, 219, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTheatreTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTheatreTypeTemp);
				cmbTheatreTypeComboBox cmbTheatreType = (cmbTheatreTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTheatreTypeComboBox.class, m_cmbTheatreTypeTemp);
				super.addComboBox(cmbTheatreType);
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 120, 87, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbCategoryTemp);
				cmbCategoryComboBox cmbCategory = (cmbCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCategoryComboBox.class, m_cmbCategoryTemp);
				super.addComboBox(cmbCategory);
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 120, 213, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSpecialityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.ASCENDING, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbSpecialityTemp);
				cmbSpecialityComboBox cmbSpeciality = (cmbSpecialityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialityComboBox.class, m_cmbSpecialityTemp);
				super.addComboBox(cmbSpeciality);
		
				// CheckedListBox Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 552, 88, 216, 94, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				CheckedListBox m_chklistAnaesthetictypeTemp = (CheckedListBox)factory.getControl(CheckedListBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, null, new Integer(startTabIndex.intValue() + 1028), Boolean.TRUE, null});
				addControl(m_chklistAnaesthetictypeTemp);
				chklistAnaesthetictypeCheckedListBox chklistAnaesthetictype = (chklistAnaesthetictypeCheckedListBox)CheckedListBoxFlyweightFactory.getInstance().createCheckedListBoxBridge(chklistAnaesthetictypeCheckedListBox.class, m_chklistAnaesthetictypeTemp);
				super.addCheckedListBox(chklistAnaesthetictype);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 120, 24, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Profile is Flexible", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 416, 24, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Theatre", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 120, 150, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Profile is Active", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 120, 121, 256, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Clinic Under Contractual Arrangement", Boolean.FALSE, null}));
			}

			public Label lblSlotType()
			{
				return (Label)super.getControl(1);
			}
			public Label lblAnaesType()
			{
				return (Label)super.getControl(2);
			}
			public Label lblTheatreType()
			{
				return (Label)super.getControl(3);
			}
			public Label lblLocStar()
			{
				return (Label)super.getControl(4);
			}
			public Button btnLocation()
			{
				return (Button)super.getControl(9);
			}
			public TextBox txtLocation()
			{
				return (TextBox)super.getControl(10);
			}
			public TextBox txtProfileName()
			{
				return (TextBox)super.getControl(11);
			}
			public cmbConsMediaTypeComboBox cmbConsMediaType()
			{
				return (cmbConsMediaTypeComboBox)super.getComboBox(0);
			}
			public cmbSlotTypeComboBox cmbSlotType()
			{
				return (cmbSlotTypeComboBox)super.getComboBox(1);
			}
			public cmbTheatreTypeComboBox cmbTheatreType()
			{
				return (cmbTheatreTypeComboBox)super.getComboBox(2);
			}
			public cmbCategoryComboBox cmbCategory()
			{
				return (cmbCategoryComboBox)super.getComboBox(3);
			}
			public cmbSpecialityComboBox cmbSpeciality()
			{
				return (cmbSpecialityComboBox)super.getComboBox(4);
			}
			public chklistAnaesthetictypeCheckedListBox chklistAnaesthetictype()
			{
				return (chklistAnaesthetictypeCheckedListBox)super.getCheckedListBox(0);
			}
			public CheckBox chkFlexible()
			{
				return (CheckBox)super.getControl(18);
			}
			public CheckBox chkTheatre()
			{
				return (CheckBox)super.getControl(19);
			}
			public CheckBox chkProfileActive()
			{
				return (CheckBox)super.getControl(20);
			}
			public CheckBox chkContractArrange()
			{
				return (CheckBox)super.getControl(21);
			}
		}
		public static class tabProfileDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbIntervalTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.Profile_Interval_Type value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.Profile_Interval_Type value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.Profile_Interval_Type value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.Profile_Interval_Type value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.Profile_Interval_Type value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.Profile_Interval_Type getValue()
				{
					return (ims.scheduling.vo.lookups.Profile_Interval_Type)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.Profile_Interval_Type value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 376, 92, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Week Days: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 376, 192, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Instance:  ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "End Time: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 94, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start Time: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 376, 60, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Interval Size: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 376, 26, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Interval Type: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 60, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "End Date: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 26, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Week Starting:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 128, 58, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1034), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 128, 24, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1032), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 480, 24, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbIntervalTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1040), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbIntervalTypeTemp);
				cmbIntervalTypeComboBox cmbIntervalType = (cmbIntervalTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIntervalTypeComboBox.class, m_cmbIntervalTypeTemp);
				super.addComboBox(cmbIntervalType);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 480, 142, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1046), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Tuesday", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 480, 167, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1047), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Wednesday", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 576, 92, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 1048), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Thursday", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 576, 117, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 1049), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Friday", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 576, 142, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1050), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Saturday", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 480, 92, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 1044), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Sunday", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 480, 117, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 1045), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Monday", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 512, 192, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 1054), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"2", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 544, 192, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 1055), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"3", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 576, 192, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1056), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"4", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 608, 192, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 1057), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"5", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 480, 192, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1052), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"1", Boolean.FALSE, null}));
		
				// Time Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 128, 126, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 1038), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 128, 92, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 1036), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 480, 58, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 1042), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
			}

			public Label lblWeekDays()
			{
				return (Label)super.getControl(0);
			}
			public Label lblInstance()
			{
				return (Label)super.getControl(1);
			}
			public DateControl dteEndDate()
			{
				return (DateControl)super.getControl(8);
			}
			public DateControl dteStartDate()
			{
				return (DateControl)super.getControl(9);
			}
			public cmbIntervalTypeComboBox cmbIntervalType()
			{
				return (cmbIntervalTypeComboBox)super.getComboBox(0);
			}
			public CheckBox chkTuesday()
			{
				return (CheckBox)super.getControl(11);
			}
			public CheckBox chkWednesday()
			{
				return (CheckBox)super.getControl(12);
			}
			public CheckBox chkThursday()
			{
				return (CheckBox)super.getControl(13);
			}
			public CheckBox chkFriday()
			{
				return (CheckBox)super.getControl(14);
			}
			public CheckBox chkSaturday()
			{
				return (CheckBox)super.getControl(15);
			}
			public CheckBox chkSunday()
			{
				return (CheckBox)super.getControl(16);
			}
			public CheckBox chkMonday()
			{
				return (CheckBox)super.getControl(17);
			}
			public CheckBox chkTwo()
			{
				return (CheckBox)super.getControl(18);
			}
			public CheckBox chkThree()
			{
				return (CheckBox)super.getControl(19);
			}
			public CheckBox chkFour()
			{
				return (CheckBox)super.getControl(20);
			}
			public CheckBox chkFive()
			{
				return (CheckBox)super.getControl(21);
			}
			public CheckBox chkOne()
			{
				return (CheckBox)super.getControl(22);
			}
			public TimeControl timEndTime()
			{
				return (TimeControl)super.getControl(23);
			}
			public TimeControl timStartTime()
			{
				return (TimeControl)super.getControl(24);
			}
			public IntBox intIntSize()
			{
				return (IntBox)super.getControl(25);
			}
		}
		public static class tabListOwnersContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdListOwnerRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdListOwnerRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColHcpReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColHcpReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColHcpOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getColHcp()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellColHcpTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.scheduling.vo.Profile_ListOwnerVo getValue()
				{
					return (ims.scheduling.vo.Profile_ListOwnerVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_ListOwnerVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdListOwnerRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdListOwnerRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdListOwnerRow get(int index)
				{
					return new grdListOwnerRow(super.collection.get(index));
				}
				public grdListOwnerRow newRow()
				{
					return new grdListOwnerRow(super.collection.newRow());
				}
				public grdListOwnerRow newRow(boolean autoSelect)
				{
					return new grdListOwnerRow(super.collection.newRow(autoSelect));
				}
				public grdListOwnerRow newRowAt(int index)
				{
					return new grdListOwnerRow(super.collection.newRowAt(index));
				}
				public grdListOwnerRow newRowAt(int index, boolean autoSelect)
				{
					return new grdListOwnerRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdListOwnerGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				public ims.scheduling.vo.Profile_ListOwnerVo[] getValues()
				{
					ims.scheduling.vo.Profile_ListOwnerVo[] listOfValues = new ims.scheduling.vo.Profile_ListOwnerVo[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.scheduling.vo.Profile_ListOwnerVo getValue()
				{
					return (ims.scheduling.vo.Profile_ListOwnerVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_ListOwnerVo value)
				{
					super.grid.setValue(value);
				}
				public grdListOwnerRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdListOwnerRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdListOwnerRowCollection getRows()
				{
					return new grdListOwnerRowCollection(super.grid.getRows());
				}
				public grdListOwnerRow getRowByValue(ims.scheduling.vo.Profile_ListOwnerVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdListOwnerRow(row);
				}
				public void setColHcpHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColHcpHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 784, 256, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdListOwnerTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 1059), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileListOwners, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdListOwnerTemp);
				grdListOwnerGrid grdListOwner = (grdListOwnerGrid)GridFlyweightFactory.getInstance().createGridBridge(grdListOwnerGrid.class, m_grdListOwnerTemp);
				grdListOwner.addMutableComboBoxColumn("HCP", 0, 0, -1, false, true, true, false, true, true, -1);
				super.addGrid(grdListOwner);
			}

			public grdListOwnerGrid grdListOwner()
			{
				return (grdListOwnerGrid)super.getGrid(0);
			}
		}
		public static class tabDOSContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdDOSRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDOSRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolDosIdReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolDosIdReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolDosIdOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolDosId()
				{
					return (String)super.row.get(0);
				}
				public void setcolDosId(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolDosIdTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolDosNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolDosNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolDosNameOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolDosName()
				{
					return (String)super.row.get(1);
				}
				public void setcolDosName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolDosNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColSelectedReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColSelectedReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColSelectedOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getColSelected()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setColSelected(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellColSelectedTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.scheduling.vo.DirectoryOfServiceVo getValue()
				{
					return (ims.scheduling.vo.DirectoryOfServiceVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.DirectoryOfServiceVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDOSRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDOSRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDOSRow get(int index)
				{
					return new grdDOSRow(super.collection.get(index));
				}
				public grdDOSRow newRow()
				{
					return new grdDOSRow(super.collection.newRow());
				}
				public grdDOSRow newRow(boolean autoSelect)
				{
					return new grdDOSRow(super.collection.newRow(autoSelect));
				}
				public grdDOSRow newRowAt(int index)
				{
					return new grdDOSRow(super.collection.newRowAt(index));
				}
				public grdDOSRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDOSRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDOSGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.scheduling.vo.DirectoryOfServiceVoCollection getValues()
				{
					ims.scheduling.vo.DirectoryOfServiceVoCollection listOfValues = new ims.scheduling.vo.DirectoryOfServiceVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.DirectoryOfServiceVo getValue()
				{
					return (ims.scheduling.vo.DirectoryOfServiceVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.DirectoryOfServiceVo value)
				{
					super.grid.setValue(value);
				}
				public grdDOSRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDOSRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDOSRowCollection getRows()
				{
					return new grdDOSRowCollection(super.grid.getRows());
				}
				public grdDOSRow getRowByValue(ims.scheduling.vo.DirectoryOfServiceVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDOSRow(row);
				}
				public void setcolDosIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolDosIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolDosNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolDosNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColSelectedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColSelectedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 784, 256, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdDOSTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 1061), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDOSTemp);
				grdDOSGrid grdDOS = (grdDOSGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDOSGrid.class, m_grdDOSTemp);
				grdDOS.addStringColumn("Directory of Service ID ( DoSId)", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDOS.addStringColumn("Directory of Service Name", 0, 0, 450, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDOS.addBoolColumn("Select", 0, 1, -1, false, true, 0, true);
				super.addGrid(grdDOS);
			}

			public grdDOSGrid grdDOS()
			{
				return (grdDOSGrid)super.getGrid(0);
			}
		}
		public static class tabSlotsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSlotsGeneralRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSlotsGeneralRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolSlotsActivityReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolSlotsActivityReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolSlotsActivityOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolSlotsActivity()
				{
					return (String)super.row.get(0);
				}
				public void setcolSlotsActivity(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolSlotsActivityTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolSlotsStartTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolSlotsStartTimeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolSlotsStartTimeOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolSlotsStartTime()
				{
					return (String)super.row.get(1);
				}
				public void setcolSlotsStartTime(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolSlotsStartTimeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolSlotsDurationReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolSlotsDurationReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolSlotsDurationOpened()
				{
					super.row.showOpened(2);
				}
				public String getcolSlotsDuration()
				{
					return (String)super.row.get(2);
				}
				public void setcolSlotsDuration(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolSlotsDurationTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolSlotsPriorityReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolSlotsPriorityReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolSlotsPriorityOpened()
				{
					super.row.showOpened(3);
				}
				public String getcolSlotsPriority()
				{
					return (String)super.row.get(3);
				}
				public void setcolSlotsPriority(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolSlotsPriorityTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolSlotsActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolSlotsActiveReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolSlotsActiveOpened()
				{
					super.row.showOpened(4);
				}
				public boolean getcolSlotsActive()
				{
					return ((Boolean)super.row.get(4)).booleanValue();
				}
				public void setcolSlotsActive(boolean value)
				{
					super.row.set(4, new Boolean(value));
				}
				public void setCellcolSlotsActiveTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.scheduling.vo.Profile_SlotGenericVo getValue()
				{
					return (ims.scheduling.vo.Profile_SlotGenericVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_SlotGenericVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSlotsGeneralRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSlotsGeneralRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSlotsGeneralRow get(int index)
				{
					return new grdSlotsGeneralRow(super.collection.get(index));
				}
				public grdSlotsGeneralRow newRow()
				{
					return new grdSlotsGeneralRow(super.collection.newRow());
				}
				public grdSlotsGeneralRow newRow(boolean autoSelect)
				{
					return new grdSlotsGeneralRow(super.collection.newRow(autoSelect));
				}
				public grdSlotsGeneralRow newRowAt(int index)
				{
					return new grdSlotsGeneralRow(super.collection.newRowAt(index));
				}
				public grdSlotsGeneralRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSlotsGeneralRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSlotsGeneralGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.scheduling.vo.Profile_SlotGenericVoCollection getValues()
				{
					ims.scheduling.vo.Profile_SlotGenericVoCollection listOfValues = new ims.scheduling.vo.Profile_SlotGenericVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.Profile_SlotGenericVo getValue()
				{
					return (ims.scheduling.vo.Profile_SlotGenericVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_SlotGenericVo value)
				{
					super.grid.setValue(value);
				}
				public grdSlotsGeneralRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSlotsGeneralRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSlotsGeneralRowCollection getRows()
				{
					return new grdSlotsGeneralRowCollection(super.grid.getRows());
				}
				public grdSlotsGeneralRow getRowByValue(ims.scheduling.vo.Profile_SlotGenericVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSlotsGeneralRow(row);
				}
				public void setcolSlotsActivityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolSlotsActivityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolSlotsStartTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolSlotsStartTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolSlotsDurationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolSlotsDurationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolSlotsPriorityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolSlotsPriorityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolSlotsActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolSlotsActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 688, 8, 73, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Active Only:", new Integer(1), null, new Integer(0)}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 776, 8, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 1063), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 12, 32, 780, 240, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grdSlotsGeneralTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 1065), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileSlotsGeneral, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSlotsGeneralTemp);
				grdSlotsGeneralGrid grdSlotsGeneral = (grdSlotsGeneralGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSlotsGeneralGrid.class, m_grdSlotsGeneralTemp);
				grdSlotsGeneral.addStringColumn("Activity", 0, 0, 420, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotsGeneral.addStringColumn("Start Time", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotsGeneral.addStringColumn("Duration", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotsGeneral.addStringColumn("Priority", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotsGeneral.addBoolColumn("Active", 0, 1, -1, true, false, 0, true);
				super.addGrid(grdSlotsGeneral);
			}

			public CheckBox chkSlotsActiveOnly()
			{
				return (CheckBox)super.getControl(1);
			}
			public grdSlotsGeneralGrid grdSlotsGeneral()
			{
				return (grdSlotsGeneralGrid)super.getGrid(0);
			}
		}
		public static class tabActivitiesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdActivitiesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdActivitiesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolActivityReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolActivityReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolActivityOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getcolActivity()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellcolActivityTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolActiveReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolActiveOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getcolActive()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolActive(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolActiveTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.scheduling.vo.ProfileActivityVo getValue()
				{
					return (ims.scheduling.vo.ProfileActivityVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.ProfileActivityVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdActivitiesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdActivitiesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdActivitiesRow get(int index)
				{
					return new grdActivitiesRow(super.collection.get(index));
				}
				public grdActivitiesRow newRow()
				{
					return new grdActivitiesRow(super.collection.newRow());
				}
				public grdActivitiesRow newRow(boolean autoSelect)
				{
					return new grdActivitiesRow(super.collection.newRow(autoSelect));
				}
				public grdActivitiesRow newRowAt(int index)
				{
					return new grdActivitiesRow(super.collection.newRowAt(index));
				}
				public grdActivitiesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdActivitiesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdActivitiesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.scheduling.vo.ProfileActivityVoCollection getValues()
				{
					ims.scheduling.vo.ProfileActivityVoCollection listOfValues = new ims.scheduling.vo.ProfileActivityVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.ProfileActivityVo getValue()
				{
					return (ims.scheduling.vo.ProfileActivityVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.ProfileActivityVo value)
				{
					super.grid.setValue(value);
				}
				public grdActivitiesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdActivitiesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdActivitiesRowCollection getRows()
				{
					return new grdActivitiesRowCollection(super.grid.getRows());
				}
				public grdActivitiesRow getRowByValue(ims.scheduling.vo.ProfileActivityVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdActivitiesRow(row);
				}
				public void setcolActivityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolActivityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 14, 15, 778, 256, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grdActivitiesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 1068), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileActivity, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdActivitiesTemp);
				grdActivitiesGrid grdActivities = (grdActivitiesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdActivitiesGrid.class, m_grdActivitiesTemp);
				grdActivities.addMutableComboBoxColumn("Activity", 0, 0, 420, false, true, false, false, false, true, -1);
				grdActivities.addBoolColumn("Active", 0, 1, -1, false, false, 0, true);
				super.addGrid(grdActivities);
			}

			public grdActivitiesGrid grdActivities()
			{
				return (grdActivitiesGrid)super.getGrid(0);
			}
		}
		public static class tabTheatreContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrSlotsLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabTCIContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdTCITimesRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdTCITimesRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setcolTCITimeReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean iscolTCITimeReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showcolTCITimeOpened()
						{
							super.row.showOpened(0);
						}
						public ims.framework.utils.Time getcolTCITime()
						{
							return (ims.framework.utils.Time)super.row.get(0);
						}
						public void setcolTCITime(ims.framework.utils.Time value)
						{
							super.row.set(0, value);
						}
						public void setCellcolTCITimeTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setcolNoInstancesReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean iscolNoInstancesReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showcolNoInstancesOpened()
						{
							super.row.showOpened(1);
						}
						public Integer getcolNoInstances()
						{
							return (Integer)super.row.get(1);
						}
						public void setcolNoInstances(Integer value)
						{
							super.row.set(1, value);
						}
						public void setCellcolNoInstancesTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public ims.scheduling.vo.ProfileTheatreTCISlotVo getValue()
						{
							return (ims.scheduling.vo.ProfileTheatreTCISlotVo)super.row.getValue();
						}
						public void setValue(ims.scheduling.vo.ProfileTheatreTCISlotVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdTCITimesRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdTCITimesRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdTCITimesRow get(int index)
						{
							return new grdTCITimesRow(super.collection.get(index));
						}
						public grdTCITimesRow newRow()
						{
							return new grdTCITimesRow(super.collection.newRow());
						}
						public grdTCITimesRow newRow(boolean autoSelect)
						{
							return new grdTCITimesRow(super.collection.newRow(autoSelect));
						}
						public grdTCITimesRow newRowAt(int index)
						{
							return new grdTCITimesRow(super.collection.newRowAt(index));
						}
						public grdTCITimesRow newRowAt(int index, boolean autoSelect)
						{
							return new grdTCITimesRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdTCITimesGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
						{
							super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
						}
						private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
						{
							super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
						}
						public ims.scheduling.vo.ProfileTheatreTCISlotVoCollection getValues()
						{
							ims.scheduling.vo.ProfileTheatreTCISlotVoCollection listOfValues = new ims.scheduling.vo.ProfileTheatreTCISlotVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.scheduling.vo.ProfileTheatreTCISlotVo getValue()
						{
							return (ims.scheduling.vo.ProfileTheatreTCISlotVo)super.grid.getValue();
						}
						public void setValue(ims.scheduling.vo.ProfileTheatreTCISlotVo value)
						{
							super.grid.setValue(value);
						}
						public grdTCITimesRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdTCITimesRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdTCITimesRowCollection getRows()
						{
							return new grdTCITimesRowCollection(super.grid.getRows());
						}
						public grdTCITimesRow getRowByValue(ims.scheduling.vo.ProfileTheatreTCISlotVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdTCITimesRow(row);
						}
						public void setcolTCITimeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getcolTCITimeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setcolNoInstancesHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getcolNoInstancesHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 32, 16, 256, 200, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
						Grid m_grdTCITimesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 1071), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileTheatreTCITimes, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdTCITimesTemp);
						grdTCITimesGrid grdTCITimes = (grdTCITimesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTCITimesGrid.class, m_grdTCITimesTemp);
						grdTCITimes.addTimeColumn("TCI Time", 0, 0, 150, false, true, false, "Invalid Time", false, 0, true);
						grdTCITimes.addIntColumn("Instances", 0, 0, -1, false, true, "Invalid Time", false, 0, true);
						super.addGrid(grdTCITimes);
					}
		
					public grdTCITimesGrid grdTCITimes()
					{
						return (grdTCITimesGrid)super.getGrid(0);
					}
				}
				public static class tabTheatreSlotsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdParentChildSlotsRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdParentChildSlotsRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColStartTimeReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColStartTimeReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColStartTimeOpened()
						{
							super.row.showOpened(0);
						}
						public String getColStartTime()
						{
							return (String)super.row.get(0);
						}
						public void setColStartTime(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColStartTimeTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColDurationReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColDurationReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColDurationOpened()
						{
							super.row.showOpened(1);
						}
						public String getColDuration()
						{
							return (String)super.row.get(1);
						}
						public void setColDuration(String value)
						{
							super.row.set(1, value);
						}
						public void setCellColDurationTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setColActiveReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isColActiveReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showColActiveOpened()
						{
							super.row.showOpened(2);
						}
						public boolean getColActive()
						{
							return ((Boolean)super.row.get(2)).booleanValue();
						}
						public void setColActive(boolean value)
						{
							super.row.set(2, new Boolean(value));
						}
						public void setCellColActiveTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public ims.scheduling.vo.ProfileParentChildSlotVo getValue()
						{
							return (ims.scheduling.vo.ProfileParentChildSlotVo)super.row.getValue();
						}
						public void setValue(ims.scheduling.vo.ProfileParentChildSlotVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdParentChildSlotsRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdParentChildSlotsRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdParentChildSlotsRow get(int index)
						{
							return new grdParentChildSlotsRow(super.collection.get(index));
						}
						public grdParentChildSlotsRow newRow()
						{
							return new grdParentChildSlotsRow(super.collection.newRow());
						}
						public grdParentChildSlotsRow newRow(boolean autoSelect)
						{
							return new grdParentChildSlotsRow(super.collection.newRow(autoSelect));
						}
						public grdParentChildSlotsRow newRowAt(int index)
						{
							return new grdParentChildSlotsRow(super.collection.newRowAt(index));
						}
						public grdParentChildSlotsRow newRowAt(int index, boolean autoSelect)
						{
							return new grdParentChildSlotsRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdParentChildSlotsGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
						{
							super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
						}
						public ims.scheduling.vo.ProfileParentChildSlotVoCollection getValues()
						{
							ims.scheduling.vo.ProfileParentChildSlotVoCollection listOfValues = new ims.scheduling.vo.ProfileParentChildSlotVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.scheduling.vo.ProfileParentChildSlotVo getValue()
						{
							return (ims.scheduling.vo.ProfileParentChildSlotVo)super.grid.getValue();
						}
						public void setValue(ims.scheduling.vo.ProfileParentChildSlotVo value)
						{
							super.grid.setValue(value);
						}
						public grdParentChildSlotsRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdParentChildSlotsRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdParentChildSlotsRowCollection getRows()
						{
							return new grdParentChildSlotsRowCollection(super.grid.getRows());
						}
						public grdParentChildSlotsRow getRowByValue(ims.scheduling.vo.ProfileParentChildSlotVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdParentChildSlotsRow(row);
						}
						public void setColStartTimeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColStartTimeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColDurationHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColDurationHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setColActiveHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getColActiveHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 24, 16, 272, 192, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
						Grid m_grdParentChildSlotsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 1072), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileTheatreSlots, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdParentChildSlotsTemp);
						grdParentChildSlotsGrid grdParentChildSlots = (grdParentChildSlotsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdParentChildSlotsGrid.class, m_grdParentChildSlotsTemp);
						grdParentChildSlots.addStringColumn("Start Time", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdParentChildSlots.addStringColumn("Duration", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdParentChildSlots.addBoolColumn("Active", 0, 0, -1, true, false, 0, true);
						super.addGrid(grdParentChildSlots);
					}
		
					public grdParentChildSlotsGrid grdParentChildSlots()
					{
						return (grdParentChildSlotsGrid)super.getGrid(0);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 480, 16, 320, 256, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
					Container m_tabTCI = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"TCI Times", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabTCIContainer m_tabTCIContainer = (tabTCIContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTCIContainer.class, m_tabTCI, factory);
					super.addContainer(m_tabTCI, m_tabTCIContainer);
					ims.framework.utils.SizeInfo m_tabTCIDesignSize = new ims.framework.utils.SizeInfo(320, 256);
					ims.framework.utils.SizeInfo m_tabTCIRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper57.getWidth(), anchoringHelper57.getHeight());
					m_tabTCIContainer.setContext(form, appForm, m_tabTCI, loader, form_images_local, contextMenus, startControlID, m_tabTCIDesignSize, m_tabTCIRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 480, 16, 320, 256, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
					Container m_tabTheatreSlots = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Theatre Slots", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabTheatreSlotsContainer m_tabTheatreSlotsContainer = (tabTheatreSlotsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTheatreSlotsContainer.class, m_tabTheatreSlots, factory);
					super.addContainer(m_tabTheatreSlots, m_tabTheatreSlotsContainer);
					ims.framework.utils.SizeInfo m_tabTheatreSlotsDesignSize = new ims.framework.utils.SizeInfo(320, 256);
					ims.framework.utils.SizeInfo m_tabTheatreSlotsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper58.getWidth(), anchoringHelper58.getHeight());
					m_tabTheatreSlotsContainer.setContext(form, appForm, m_tabTheatreSlots, loader, form_images_local, contextMenus, startControlID, m_tabTheatreSlotsDesignSize, m_tabTheatreSlotsRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabTCI().setVisible(false);
					tabTheatreSlots().setVisible(false);
				}
				public void showtabTCI()
				{
					tabTheatreSlots().setVisible(false);
					tabTCI().setVisible(true);
				}
				public void showtabTheatreSlots()
				{
					tabTCI().setVisible(false);
					tabTheatreSlots().setVisible(true);
				}
		
				public tabTCIContainer tabTCI()
				{
					return (tabTCIContainer)super.layers.get(0);
				}
				public tabTheatreSlotsContainer tabTheatreSlots()
				{
					return (tabTheatreSlotsContainer)super.layers.get(1);
				}
			}
			public static class grdTheatreRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTheatreRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolProcedureReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolProcedureOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getcolProcedure()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellcolProcedureTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolMaxReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolMaxReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolMaxOpened()
				{
					super.row.showOpened(1);
				}
				public Integer getcolMax()
				{
					return (Integer)super.row.get(1);
				}
				public void setcolMax(Integer value)
				{
					super.row.set(1, value);
				}
				public void setCellcolMaxTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolActiveReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolActiveOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getcolActive()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolActive(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolActiveTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.scheduling.vo.TheatreDetailLiteVo getValue()
				{
					return (ims.scheduling.vo.TheatreDetailLiteVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.TheatreDetailLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTheatreRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTheatreRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTheatreRow get(int index)
				{
					return new grdTheatreRow(super.collection.get(index));
				}
				public grdTheatreRow newRow()
				{
					return new grdTheatreRow(super.collection.newRow());
				}
				public grdTheatreRow newRow(boolean autoSelect)
				{
					return new grdTheatreRow(super.collection.newRow(autoSelect));
				}
				public grdTheatreRow newRowAt(int index)
				{
					return new grdTheatreRow(super.collection.newRowAt(index));
				}
				public grdTheatreRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTheatreRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTheatreGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.scheduling.vo.TheatreDetailLiteVoCollection getValues()
				{
					ims.scheduling.vo.TheatreDetailLiteVoCollection listOfValues = new ims.scheduling.vo.TheatreDetailLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.TheatreDetailLiteVo getValue()
				{
					return (ims.scheduling.vo.TheatreDetailLiteVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.TheatreDetailLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdTheatreRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTheatreRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTheatreRowCollection getRows()
				{
					return new grdTheatreRowCollection(super.grid.getRows());
				}
				public grdTheatreRow getRowByValue(ims.scheduling.vo.TheatreDetailLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTheatreRow(row);
				}
				public void setcolProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolMaxHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolMaxHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrSlotsLayer m_lyrSlotsLayer = (lyrSlotsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSlotsLayer.class, this, factory);
				super.addLayer(m_lyrSlotsLayer);
				m_lyrSlotsLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 448, 256, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdTheatreTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 1070), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileTheatre, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTheatreTemp);
				grdTheatreGrid grdTheatre = (grdTheatreGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTheatreGrid.class, m_grdTheatreTemp);
				grdTheatre.addMutableComboBoxColumn("Procedure", 0, 0, 300, false, true, true, false, true, true, -1);
				grdTheatre.addIntColumn("Max No", 0, 0, 60, false, true, null, false, 0, true);
				grdTheatre.addBoolColumn("Active", 0, 0, -1, false, false, 0, true);
				super.addGrid(grdTheatre);
			}

			public lyrSlotsLayer lyrSlots()
			{
				return (lyrSlotsLayer)super.getLayer(0);
			}
			public grdTheatreGrid grdTheatre()
			{
				return (grdTheatreGrid)super.getGrid(0);
			}
		}
		public static class tabBookingRightsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdBookingRightsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdBookingRightsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolRoleReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolRoleReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolRoleOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getcolRole()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellcolRoleTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.scheduling.vo.Profile_BookRightsVo getValue()
				{
					return (ims.scheduling.vo.Profile_BookRightsVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_BookRightsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdBookingRightsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdBookingRightsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdBookingRightsRow get(int index)
				{
					return new grdBookingRightsRow(super.collection.get(index));
				}
				public grdBookingRightsRow newRow()
				{
					return new grdBookingRightsRow(super.collection.newRow());
				}
				public grdBookingRightsRow newRow(boolean autoSelect)
				{
					return new grdBookingRightsRow(super.collection.newRow(autoSelect));
				}
				public grdBookingRightsRow newRowAt(int index)
				{
					return new grdBookingRightsRow(super.collection.newRowAt(index));
				}
				public grdBookingRightsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdBookingRightsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdBookingRightsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				public ims.scheduling.vo.Profile_BookRightsVo[] getValues()
				{
					ims.scheduling.vo.Profile_BookRightsVo[] listOfValues = new ims.scheduling.vo.Profile_BookRightsVo[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.scheduling.vo.Profile_BookRightsVo getValue()
				{
					return (ims.scheduling.vo.Profile_BookRightsVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_BookRightsVo value)
				{
					super.grid.setValue(value);
				}
				public grdBookingRightsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdBookingRightsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdBookingRightsRowCollection getRows()
				{
					return new grdBookingRightsRowCollection(super.grid.getRows());
				}
				public grdBookingRightsRow getRowByValue(ims.scheduling.vo.Profile_BookRightsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdBookingRightsRow(row);
				}
				public void setcolRoleHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolRoleHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 776, 256, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdBookingRightsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 1073), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileBookingRights, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdBookingRightsTemp);
				grdBookingRightsGrid grdBookingRights = (grdBookingRightsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdBookingRightsGrid.class, m_grdBookingRightsTemp);
				grdBookingRights.addMutableComboBoxColumn("Role", 0, 0, -1, false, true, false, false, false, true, -1);
				super.addGrid(grdBookingRights);
			}

			public grdBookingRightsGrid grdBookingRights()
			{
				return (grdBookingRightsGrid)super.getGrid(0);
			}
		}
		public static class tabExclusionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdExclPeriodsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdExclPeriodsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolStartTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolStartTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolStartTimeOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Time getcolStartTime()
				{
					return (ims.framework.utils.Time)super.row.get(0);
				}
				public void setcolStartTime(ims.framework.utils.Time value)
				{
					super.row.set(0, value);
				}
				public void setCellcolStartTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolEndTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolEndTimeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolEndTimeOpened()
				{
					super.row.showOpened(1);
				}
				public ims.framework.utils.Time getcolEndTime()
				{
					return (ims.framework.utils.Time)super.row.get(1);
				}
				public void setcolEndTime(ims.framework.utils.Time value)
				{
					super.row.set(1, value);
				}
				public void setCellcolEndTimeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.scheduling.vo.Profile_Exc_TimeVo getValue()
				{
					return (ims.scheduling.vo.Profile_Exc_TimeVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_Exc_TimeVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdExclPeriodsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdExclPeriodsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdExclPeriodsRow get(int index)
				{
					return new grdExclPeriodsRow(super.collection.get(index));
				}
				public grdExclPeriodsRow newRow()
				{
					return new grdExclPeriodsRow(super.collection.newRow());
				}
				public grdExclPeriodsRow newRow(boolean autoSelect)
				{
					return new grdExclPeriodsRow(super.collection.newRow(autoSelect));
				}
				public grdExclPeriodsRow newRowAt(int index)
				{
					return new grdExclPeriodsRow(super.collection.newRowAt(index));
				}
				public grdExclPeriodsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdExclPeriodsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdExclPeriodsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
				}
				public ims.scheduling.vo.Profile_Exc_TimeVo[] getValues()
				{
					ims.scheduling.vo.Profile_Exc_TimeVo[] listOfValues = new ims.scheduling.vo.Profile_Exc_TimeVo[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.scheduling.vo.Profile_Exc_TimeVo getValue()
				{
					return (ims.scheduling.vo.Profile_Exc_TimeVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_Exc_TimeVo value)
				{
					super.grid.setValue(value);
				}
				public grdExclPeriodsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdExclPeriodsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdExclPeriodsRowCollection getRows()
				{
					return new grdExclPeriodsRowCollection(super.grid.getRows());
				}
				public grdExclPeriodsRow getRowByValue(ims.scheduling.vo.Profile_Exc_TimeVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdExclPeriodsRow(row);
				}
				public void setcolStartTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolStartTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolEndTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolEndTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdExclDatesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdExclDatesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolStartDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolStartDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolStartDateOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Date getcolStartDate()
				{
					return (ims.framework.utils.Date)super.row.get(0);
				}
				public void setcolStartDate(ims.framework.utils.Date value)
				{
					super.row.set(0, value);
				}
				public void setCellcolStartDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolEndDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolEndDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolEndDateOpened()
				{
					super.row.showOpened(1);
				}
				public ims.framework.utils.Date getcolEndDate()
				{
					return (ims.framework.utils.Date)super.row.get(1);
				}
				public void setcolEndDate(ims.framework.utils.Date value)
				{
					super.row.set(1, value);
				}
				public void setCellcolEndDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.scheduling.vo.Profile_Exc_DateVo getValue()
				{
					return (ims.scheduling.vo.Profile_Exc_DateVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_Exc_DateVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdExclDatesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdExclDatesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdExclDatesRow get(int index)
				{
					return new grdExclDatesRow(super.collection.get(index));
				}
				public grdExclDatesRow newRow()
				{
					return new grdExclDatesRow(super.collection.newRow());
				}
				public grdExclDatesRow newRow(boolean autoSelect)
				{
					return new grdExclDatesRow(super.collection.newRow(autoSelect));
				}
				public grdExclDatesRow newRowAt(int index)
				{
					return new grdExclDatesRow(super.collection.newRowAt(index));
				}
				public grdExclDatesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdExclDatesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdExclDatesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public ims.scheduling.vo.Profile_Exc_DateVo[] getValues()
				{
					ims.scheduling.vo.Profile_Exc_DateVo[] listOfValues = new ims.scheduling.vo.Profile_Exc_DateVo[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.scheduling.vo.Profile_Exc_DateVo getValue()
				{
					return (ims.scheduling.vo.Profile_Exc_DateVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_Exc_DateVo value)
				{
					super.grid.setValue(value);
				}
				public grdExclDatesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdExclDatesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdExclDatesRowCollection getRows()
				{
					return new grdExclDatesRowCollection(super.grid.getRows());
				}
				public grdExclDatesRow getRowByValue(ims.scheduling.vo.Profile_Exc_DateVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdExclDatesRow(row);
				}
				public void setcolStartDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolStartDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolEndDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolEndDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 384, 8, 408, 264, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdExclPeriodsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 1075), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileExclusionTimes, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdExclPeriodsTemp);
				grdExclPeriodsGrid grdExclPeriods = (grdExclPeriodsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdExclPeriodsGrid.class, m_grdExclPeriodsTemp);
				grdExclPeriods.addTimeColumn("Start Time", 0, 0, 150, false, true, false, "Invalid Time", false, 0, true);
				grdExclPeriods.addTimeColumn("End Time", 0, 0, -1, false, true, false, "Invalid Time", false, 0, true);
				super.addGrid(grdExclPeriods);
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 360, 264, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdExclDatesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 1074), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileExclusionDates, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdExclDatesTemp);
				grdExclDatesGrid grdExclDates = (grdExclDatesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdExclDatesGrid.class, m_grdExclDatesTemp);
				grdExclDates.addDateColumn("Start Date", 0, 0, 160, false, true, null, false, 0, true);
				grdExclDates.addDateColumn("End Date", 0, 0, -1, false, true, null, false, 0, true);
				super.addGrid(grdExclDates);
			}

			public grdExclPeriodsGrid grdExclPeriods()
			{
				return (grdExclPeriodsGrid)super.getGrid(0);
			}
			public grdExclDatesGrid grdExclDates()
			{
				return (grdExclDatesGrid)super.getGrid(1);
			}
		}
		public static class tabTemplatesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdTemplatesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTemplatesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColTemplateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColTemplateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColTemplateOpened()
				{
					super.row.showOpened(0);
				}
				public ims.admin.vo.ReportTemplateLiteVo getColTemplate()
				{
					return (ims.admin.vo.ReportTemplateLiteVo)super.row.get(0);
				}
				public void setColTemplate(ims.admin.vo.ReportTemplateLiteVo value)
				{
					super.row.set(0, value);
				}
				public void setCellColTemplateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.scheduling.vo.ProfileTemplateVo getValue()
				{
					return (ims.scheduling.vo.ProfileTemplateVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.ProfileTemplateVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTemplatesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTemplatesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTemplatesRow get(int index)
				{
					return new grdTemplatesRow(super.collection.get(index));
				}
				public grdTemplatesRow newRow()
				{
					return new grdTemplatesRow(super.collection.newRow());
				}
				public grdTemplatesRow newRow(boolean autoSelect)
				{
					return new grdTemplatesRow(super.collection.newRow(autoSelect));
				}
				public grdTemplatesRow newRowAt(int index)
				{
					return new grdTemplatesRow(super.collection.newRowAt(index));
				}
				public grdTemplatesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTemplatesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTemplatesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.scheduling.vo.ProfileTemplateVoCollection getValues()
				{
					ims.scheduling.vo.ProfileTemplateVoCollection listOfValues = new ims.scheduling.vo.ProfileTemplateVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.ProfileTemplateVo getValue()
				{
					return (ims.scheduling.vo.ProfileTemplateVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.ProfileTemplateVo value)
				{
					super.grid.setValue(value);
				}
				public grdTemplatesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTemplatesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTemplatesRowCollection getRows()
				{
					return new grdTemplatesRowCollection(super.grid.getRows());
				}
				public grdTemplatesRow getRowByValue(ims.scheduling.vo.ProfileTemplateVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTemplatesRow(row);
				}
				public void setColTemplateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColTemplateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 776, 256, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdTemplatesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 1076), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileTemplates, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTemplatesTemp);
				grdTemplatesGrid grdTemplates = (grdTemplatesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTemplatesGrid.class, m_grdTemplatesTemp);
				grdTemplates.addStringColumn("Template", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdTemplates);
			}

			public grdTemplatesGrid grdTemplates()
			{
				return (grdTemplatesGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 816, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabGeneralDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"General Details", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabGeneralDetailsContainer m_tabGeneralDetailsContainer = (tabGeneralDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGeneralDetailsContainer.class, m_tabGeneralDetails, factory);
			super.addContainer(m_tabGeneralDetails, m_tabGeneralDetailsContainer);
			ims.framework.utils.SizeInfo m_tabGeneralDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 312);
			ims.framework.utils.SizeInfo m_tabGeneralDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper64.getWidth(), anchoringHelper64.getHeight());
			m_tabGeneralDetailsContainer.setContext(form, appForm, m_tabGeneralDetails, loader, form_images_local, contextMenus, startControlID, m_tabGeneralDetailsDesignSize, m_tabGeneralDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 816, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabProfileDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Profile Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabProfileDetailsContainer m_tabProfileDetailsContainer = (tabProfileDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabProfileDetailsContainer.class, m_tabProfileDetails, factory);
			super.addContainer(m_tabProfileDetails, m_tabProfileDetailsContainer);
			ims.framework.utils.SizeInfo m_tabProfileDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 312);
			ims.framework.utils.SizeInfo m_tabProfileDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper65.getWidth(), anchoringHelper65.getHeight());
			m_tabProfileDetailsContainer.setContext(form, appForm, m_tabProfileDetails, loader, form_images_local, contextMenus, startControlID, m_tabProfileDetailsDesignSize, m_tabProfileDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 816, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabListOwners = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"List Owners", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabListOwnersContainer m_tabListOwnersContainer = (tabListOwnersContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabListOwnersContainer.class, m_tabListOwners, factory);
			super.addContainer(m_tabListOwners, m_tabListOwnersContainer);
			ims.framework.utils.SizeInfo m_tabListOwnersDesignSize = new ims.framework.utils.SizeInfo(816, 312);
			ims.framework.utils.SizeInfo m_tabListOwnersRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper66.getWidth(), anchoringHelper66.getHeight());
			m_tabListOwnersContainer.setContext(form, appForm, m_tabListOwners, loader, form_images_local, contextMenus, startControlID, m_tabListOwnersDesignSize, m_tabListOwnersRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 816, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabDOS = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"DoS", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabDOSContainer m_tabDOSContainer = (tabDOSContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDOSContainer.class, m_tabDOS, factory);
			super.addContainer(m_tabDOS, m_tabDOSContainer);
			ims.framework.utils.SizeInfo m_tabDOSDesignSize = new ims.framework.utils.SizeInfo(816, 312);
			ims.framework.utils.SizeInfo m_tabDOSRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper67.getWidth(), anchoringHelper67.getHeight());
			m_tabDOSContainer.setContext(form, appForm, m_tabDOS, loader, form_images_local, contextMenus, startControlID, m_tabDOSDesignSize, m_tabDOSRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 816, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabSlots = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Slots", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabSlotsContainer m_tabSlotsContainer = (tabSlotsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSlotsContainer.class, m_tabSlots, factory);
			super.addContainer(m_tabSlots, m_tabSlotsContainer);
			ims.framework.utils.SizeInfo m_tabSlotsDesignSize = new ims.framework.utils.SizeInfo(816, 312);
			ims.framework.utils.SizeInfo m_tabSlotsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper68.getWidth(), anchoringHelper68.getHeight());
			m_tabSlotsContainer.setContext(form, appForm, m_tabSlots, loader, form_images_local, contextMenus, startControlID, m_tabSlotsDesignSize, m_tabSlotsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 816, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabActivities = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Activities", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabActivitiesContainer m_tabActivitiesContainer = (tabActivitiesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabActivitiesContainer.class, m_tabActivities, factory);
			super.addContainer(m_tabActivities, m_tabActivitiesContainer);
			ims.framework.utils.SizeInfo m_tabActivitiesDesignSize = new ims.framework.utils.SizeInfo(816, 312);
			ims.framework.utils.SizeInfo m_tabActivitiesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper69.getWidth(), anchoringHelper69.getHeight());
			m_tabActivitiesContainer.setContext(form, appForm, m_tabActivities, loader, form_images_local, contextMenus, startControlID, m_tabActivitiesDesignSize, m_tabActivitiesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 816, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabTheatre = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Theatre", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabTheatreContainer m_tabTheatreContainer = (tabTheatreContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTheatreContainer.class, m_tabTheatre, factory);
			super.addContainer(m_tabTheatre, m_tabTheatreContainer);
			ims.framework.utils.SizeInfo m_tabTheatreDesignSize = new ims.framework.utils.SizeInfo(816, 312);
			ims.framework.utils.SizeInfo m_tabTheatreRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper70.getWidth(), anchoringHelper70.getHeight());
			m_tabTheatreContainer.setContext(form, appForm, m_tabTheatre, loader, form_images_local, contextMenus, startControlID, m_tabTheatreDesignSize, m_tabTheatreRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 816, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabBookingRights = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Booking Rights", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabBookingRightsContainer m_tabBookingRightsContainer = (tabBookingRightsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBookingRightsContainer.class, m_tabBookingRights, factory);
			super.addContainer(m_tabBookingRights, m_tabBookingRightsContainer);
			ims.framework.utils.SizeInfo m_tabBookingRightsDesignSize = new ims.framework.utils.SizeInfo(816, 312);
			ims.framework.utils.SizeInfo m_tabBookingRightsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper71.getWidth(), anchoringHelper71.getHeight());
			m_tabBookingRightsContainer.setContext(form, appForm, m_tabBookingRights, loader, form_images_local, contextMenus, startControlID, m_tabBookingRightsDesignSize, m_tabBookingRightsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 816, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabExclusion = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Exclusion Periods", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabExclusionContainer m_tabExclusionContainer = (tabExclusionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabExclusionContainer.class, m_tabExclusion, factory);
			super.addContainer(m_tabExclusion, m_tabExclusionContainer);
			ims.framework.utils.SizeInfo m_tabExclusionDesignSize = new ims.framework.utils.SizeInfo(816, 312);
			ims.framework.utils.SizeInfo m_tabExclusionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper72.getWidth(), anchoringHelper72.getHeight());
			m_tabExclusionContainer.setContext(form, appForm, m_tabExclusion, loader, form_images_local, contextMenus, startControlID, m_tabExclusionDesignSize, m_tabExclusionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 816, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabTemplates = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Templates", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabTemplatesContainer m_tabTemplatesContainer = (tabTemplatesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTemplatesContainer.class, m_tabTemplates, factory);
			super.addContainer(m_tabTemplates, m_tabTemplatesContainer);
			ims.framework.utils.SizeInfo m_tabTemplatesDesignSize = new ims.framework.utils.SizeInfo(816, 312);
			ims.framework.utils.SizeInfo m_tabTemplatesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper73.getWidth(), anchoringHelper73.getHeight());
			m_tabTemplatesContainer.setContext(form, appForm, m_tabTemplates, loader, form_images_local, contextMenus, startControlID, m_tabTemplatesDesignSize, m_tabTemplatesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabGeneralDetails().setVisible(false);
			tabProfileDetails().setVisible(false);
			tabListOwners().setVisible(false);
			tabDOS().setVisible(false);
			tabSlots().setVisible(false);
			tabActivities().setVisible(false);
			tabTheatre().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabTemplates().setVisible(false);
		}
		public void settabGeneralDetailsEnabled(boolean value)
		{
			tabGeneralDetails().setEnabled(value);
		}
		public void settabProfileDetailsEnabled(boolean value)
		{
			tabProfileDetails().setEnabled(value);
		}
		public void settabListOwnersEnabled(boolean value)
		{
			tabListOwners().setEnabled(value);
		}
		public void settabDOSEnabled(boolean value)
		{
			tabDOS().setEnabled(value);
		}
		public void settabSlotsEnabled(boolean value)
		{
			tabSlots().setEnabled(value);
		}
		public void settabActivitiesEnabled(boolean value)
		{
			tabActivities().setEnabled(value);
		}
		public void settabTheatreEnabled(boolean value)
		{
			tabTheatre().setEnabled(value);
		}
		public void settabBookingRightsEnabled(boolean value)
		{
			tabBookingRights().setEnabled(value);
		}
		public void settabExclusionEnabled(boolean value)
		{
			tabExclusion().setEnabled(value);
		}
		public void settabTemplatesEnabled(boolean value)
		{
			tabTemplates().setEnabled(value);
		}
		public void showtabGeneralDetails()
		{
			tabProfileDetails().setVisible(false);
			tabListOwners().setVisible(false);
			tabDOS().setVisible(false);
			tabSlots().setVisible(false);
			tabActivities().setVisible(false);
			tabTheatre().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabTemplates().setVisible(false);
			tabGeneralDetails().setVisible(true);
		}
		public void showtabProfileDetails()
		{
			tabGeneralDetails().setVisible(false);
			tabListOwners().setVisible(false);
			tabDOS().setVisible(false);
			tabSlots().setVisible(false);
			tabActivities().setVisible(false);
			tabTheatre().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabTemplates().setVisible(false);
			tabProfileDetails().setVisible(true);
		}
		public void showtabListOwners()
		{
			tabGeneralDetails().setVisible(false);
			tabProfileDetails().setVisible(false);
			tabDOS().setVisible(false);
			tabSlots().setVisible(false);
			tabActivities().setVisible(false);
			tabTheatre().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabTemplates().setVisible(false);
			tabListOwners().setVisible(true);
		}
		public void showtabDOS()
		{
			tabGeneralDetails().setVisible(false);
			tabProfileDetails().setVisible(false);
			tabListOwners().setVisible(false);
			tabSlots().setVisible(false);
			tabActivities().setVisible(false);
			tabTheatre().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabTemplates().setVisible(false);
			tabDOS().setVisible(true);
		}
		public void showtabSlots()
		{
			tabGeneralDetails().setVisible(false);
			tabProfileDetails().setVisible(false);
			tabListOwners().setVisible(false);
			tabDOS().setVisible(false);
			tabActivities().setVisible(false);
			tabTheatre().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabTemplates().setVisible(false);
			tabSlots().setVisible(true);
		}
		public void showtabActivities()
		{
			tabGeneralDetails().setVisible(false);
			tabProfileDetails().setVisible(false);
			tabListOwners().setVisible(false);
			tabDOS().setVisible(false);
			tabSlots().setVisible(false);
			tabTheatre().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabTemplates().setVisible(false);
			tabActivities().setVisible(true);
		}
		public void showtabTheatre()
		{
			tabGeneralDetails().setVisible(false);
			tabProfileDetails().setVisible(false);
			tabListOwners().setVisible(false);
			tabDOS().setVisible(false);
			tabSlots().setVisible(false);
			tabActivities().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabTemplates().setVisible(false);
			tabTheatre().setVisible(true);
		}
		public void showtabBookingRights()
		{
			tabGeneralDetails().setVisible(false);
			tabProfileDetails().setVisible(false);
			tabListOwners().setVisible(false);
			tabDOS().setVisible(false);
			tabSlots().setVisible(false);
			tabActivities().setVisible(false);
			tabTheatre().setVisible(false);
			tabExclusion().setVisible(false);
			tabTemplates().setVisible(false);
			tabBookingRights().setVisible(true);
		}
		public void showtabExclusion()
		{
			tabGeneralDetails().setVisible(false);
			tabProfileDetails().setVisible(false);
			tabListOwners().setVisible(false);
			tabDOS().setVisible(false);
			tabSlots().setVisible(false);
			tabActivities().setVisible(false);
			tabTheatre().setVisible(false);
			tabBookingRights().setVisible(false);
			tabTemplates().setVisible(false);
			tabExclusion().setVisible(true);
		}
		public void showtabTemplates()
		{
			tabGeneralDetails().setVisible(false);
			tabProfileDetails().setVisible(false);
			tabListOwners().setVisible(false);
			tabDOS().setVisible(false);
			tabSlots().setVisible(false);
			tabActivities().setVisible(false);
			tabTheatre().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabTemplates().setVisible(true);
		}

		public tabGeneralDetailsContainer tabGeneralDetails()
		{
			return (tabGeneralDetailsContainer)super.layers.get(0);
		}
		public tabProfileDetailsContainer tabProfileDetails()
		{
			return (tabProfileDetailsContainer)super.layers.get(1);
		}
		public tabListOwnersContainer tabListOwners()
		{
			return (tabListOwnersContainer)super.layers.get(2);
		}
		public tabDOSContainer tabDOS()
		{
			return (tabDOSContainer)super.layers.get(3);
		}
		public tabSlotsContainer tabSlots()
		{
			return (tabSlotsContainer)super.layers.get(4);
		}
		public tabActivitiesContainer tabActivities()
		{
			return (tabActivitiesContainer)super.layers.get(5);
		}
		public tabTheatreContainer tabTheatre()
		{
			return (tabTheatreContainer)super.layers.get(6);
		}
		public tabBookingRightsContainer tabBookingRights()
		{
			return (tabBookingRightsContainer)super.layers.get(7);
		}
		public tabExclusionContainer tabExclusion()
		{
			return (tabExclusionContainer)super.layers.get(8);
		}
		public tabTemplatesContainer tabTemplates()
		{
			return (tabTemplatesContainer)super.layers.get(9);
		}
	}
	public static class cmbHospFilterComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.resource.place.vo.LocationRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.resource.place.vo.LocationRefVo getValue()
		{
			return (ims.core.resource.place.vo.LocationRefVo)super.control.getValue();
		}
		public void setValue(ims.core.resource.place.vo.LocationRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbFilterSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceShortVo getValue()
		{
			return (ims.core.vo.ServiceShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbFilterDirectoryOfServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.DirectoryOfServiceVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.DirectoryOfServiceVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.DirectoryOfServiceVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.DirectoryOfServiceVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.DirectoryOfServiceVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.DirectoryOfServiceVo getValue()
		{
			return (ims.scheduling.vo.DirectoryOfServiceVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.DirectoryOfServiceVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdProfilesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProfilesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolSpecialityReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolSpecialityReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolSpecialityOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolSpeciality()
		{
			return (String)super.row.get(0);
		}
		public void setcolSpeciality(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolSpecialityTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolProfileDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolProfileDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolProfileDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolProfileDescription()
		{
			return (String)super.row.get(1);
		}
		public void setcolProfileDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolProfileDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolStartDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolStartDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolStartDateOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolStartDate()
		{
			return (String)super.row.get(2);
		}
		public void setcolStartDate(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolStartDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolEndDateReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolEndDateReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolEndDateOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolEndDate()
		{
			return (String)super.row.get(3);
		}
		public void setcolEndDate(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolEndDateTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.scheduling.vo.ProfileShortVo getValue()
		{
			return (ims.scheduling.vo.ProfileShortVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.ProfileShortVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProfilesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProfilesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProfilesRow get(int index)
		{
			return new grdProfilesRow(super.collection.get(index));
		}
		public grdProfilesRow newRow()
		{
			return new grdProfilesRow(super.collection.newRow());
		}
		public grdProfilesRow newRow(boolean autoSelect)
		{
			return new grdProfilesRow(super.collection.newRow(autoSelect));
		}
		public grdProfilesRow newRowAt(int index)
		{
			return new grdProfilesRow(super.collection.newRowAt(index));
		}
		public grdProfilesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProfilesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProfilesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.scheduling.vo.ProfileShortVo[] getValues()
		{
			ims.scheduling.vo.ProfileShortVo[] listOfValues = new ims.scheduling.vo.ProfileShortVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.scheduling.vo.ProfileShortVo getValue()
		{
			return (ims.scheduling.vo.ProfileShortVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.ProfileShortVo value)
		{
			super.grid.setValue(value);
		}
		public grdProfilesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProfilesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProfilesRowCollection getRows()
		{
			return new grdProfilesRowCollection(super.grid.getRows());
		}
		public grdProfilesRow getRowByValue(ims.scheduling.vo.ProfileShortVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProfilesRow(row);
		}
		public void setcolSpecialityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolSpecialityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolProfileDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolProfileDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolStartDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolStartDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolEndDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolEndDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(90);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Scheduling.contextMenuProfileListOwners = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Scheduling.contextMenuProfileListOwnersADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuProfileListOwners.add(contextMenus.Scheduling.contextMenuProfileListOwnersADDItem);
		contextMenus.Scheduling.contextMenuProfileListOwnersEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuProfileListOwners.add(contextMenus.Scheduling.contextMenuProfileListOwnersEDITItem);
		contextMenus.Scheduling.contextMenuProfileListOwnersREMOVEItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuProfileListOwners.add(contextMenus.Scheduling.contextMenuProfileListOwnersREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileListOwners);
		contextMenus.Scheduling.contextMenuProfileSlotsGeneral = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Scheduling.contextMenuProfileSlotsGeneralADDItem = factory.createMenuItem(startControlID.intValue() + 4, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuProfileSlotsGeneral.add(contextMenus.Scheduling.contextMenuProfileSlotsGeneralADDItem);
		contextMenus.Scheduling.contextMenuProfileSlotsGeneralEDITItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuProfileSlotsGeneral.add(contextMenus.Scheduling.contextMenuProfileSlotsGeneralEDITItem);
		contextMenus.Scheduling.contextMenuProfileSlotsGeneralREMOVEItem = factory.createMenuItem(startControlID.intValue() + 6, "Inactivate", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuProfileSlotsGeneral.add(contextMenus.Scheduling.contextMenuProfileSlotsGeneralREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileSlotsGeneral);
		contextMenus.Scheduling.contextMenuProfileActivity = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Scheduling.contextMenuProfileActivityADDItem = factory.createMenuItem(startControlID.intValue() + 7, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuProfileActivity.add(contextMenus.Scheduling.contextMenuProfileActivityADDItem);
		contextMenus.Scheduling.contextMenuProfileActivityREMOVEItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuProfileActivity.add(contextMenus.Scheduling.contextMenuProfileActivityREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileActivity);
		contextMenus.Scheduling.contextMenuProfileTheatreTCITimes = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.Scheduling.contextMenuProfileTheatreTCITimesADDItem = factory.createMenuItem(startControlID.intValue() + 9, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3800001)))
			contextMenus.Scheduling.contextMenuProfileTheatreTCITimes.add(contextMenus.Scheduling.contextMenuProfileTheatreTCITimesADDItem);
		contextMenus.Scheduling.contextMenuProfileTheatreTCITimesREMOVEItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3800003)))
			contextMenus.Scheduling.contextMenuProfileTheatreTCITimes.add(contextMenus.Scheduling.contextMenuProfileTheatreTCITimesREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileTheatreTCITimes);
		contextMenus.Scheduling.contextMenuProfileTheatreSlots = factory.createMenu(startControlID.intValue() + 5);
		contextMenus.Scheduling.contextMenuProfileTheatreSlotsADDItem = factory.createMenuItem(startControlID.intValue() + 11, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4160001)))
			contextMenus.Scheduling.contextMenuProfileTheatreSlots.add(contextMenus.Scheduling.contextMenuProfileTheatreSlotsADDItem);
		contextMenus.Scheduling.contextMenuProfileTheatreSlotsEDITItem = factory.createMenuItem(startControlID.intValue() + 12, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4160002)))
			contextMenus.Scheduling.contextMenuProfileTheatreSlots.add(contextMenus.Scheduling.contextMenuProfileTheatreSlotsEDITItem);
		contextMenus.Scheduling.contextMenuProfileTheatreSlotsREMOVEItem = factory.createMenuItem(startControlID.intValue() + 13, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4160003)))
			contextMenus.Scheduling.contextMenuProfileTheatreSlots.add(contextMenus.Scheduling.contextMenuProfileTheatreSlotsREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileTheatreSlots);
		contextMenus.Scheduling.contextMenuProfileTheatre = factory.createMenu(startControlID.intValue() + 6);
		contextMenus.Scheduling.contextMenuProfileTheatreADDItem = factory.createMenuItem(startControlID.intValue() + 14, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuProfileTheatre.add(contextMenus.Scheduling.contextMenuProfileTheatreADDItem);
		contextMenus.Scheduling.contextMenuProfileTheatreREMOVEItem = factory.createMenuItem(startControlID.intValue() + 15, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuProfileTheatre.add(contextMenus.Scheduling.contextMenuProfileTheatreREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileTheatre);
		contextMenus.Scheduling.contextMenuProfileBookingRights = factory.createMenu(startControlID.intValue() + 7);
		contextMenus.Scheduling.contextMenuProfileBookingRightsADDItem = factory.createMenuItem(startControlID.intValue() + 16, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuProfileBookingRights.add(contextMenus.Scheduling.contextMenuProfileBookingRightsADDItem);
		contextMenus.Scheduling.contextMenuProfileBookingRightsEDITItem = factory.createMenuItem(startControlID.intValue() + 17, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuProfileBookingRights.add(contextMenus.Scheduling.contextMenuProfileBookingRightsEDITItem);
		contextMenus.Scheduling.contextMenuProfileBookingRightsREMOVEItem = factory.createMenuItem(startControlID.intValue() + 18, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuProfileBookingRights.add(contextMenus.Scheduling.contextMenuProfileBookingRightsREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileBookingRights);
		contextMenus.Scheduling.contextMenuProfileExclusionTimes = factory.createMenu(startControlID.intValue() + 8);
		contextMenus.Scheduling.contextMenuProfileExclusionTimesADDItem = factory.createMenuItem(startControlID.intValue() + 19, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuProfileExclusionTimes.add(contextMenus.Scheduling.contextMenuProfileExclusionTimesADDItem);
		contextMenus.Scheduling.contextMenuProfileExclusionTimesEDITItem = factory.createMenuItem(startControlID.intValue() + 20, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuProfileExclusionTimes.add(contextMenus.Scheduling.contextMenuProfileExclusionTimesEDITItem);
		contextMenus.Scheduling.contextMenuProfileExclusionTimesREMOVEItem = factory.createMenuItem(startControlID.intValue() + 21, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuProfileExclusionTimes.add(contextMenus.Scheduling.contextMenuProfileExclusionTimesREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileExclusionTimes);
		contextMenus.Scheduling.contextMenuProfileExclusionDates = factory.createMenu(startControlID.intValue() + 9);
		contextMenus.Scheduling.contextMenuProfileExclusionDatesADDItem = factory.createMenuItem(startControlID.intValue() + 22, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuProfileExclusionDates.add(contextMenus.Scheduling.contextMenuProfileExclusionDatesADDItem);
		contextMenus.Scheduling.contextMenuProfileExclusionDatesEDITItem = factory.createMenuItem(startControlID.intValue() + 23, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuProfileExclusionDates.add(contextMenus.Scheduling.contextMenuProfileExclusionDatesEDITItem);
		contextMenus.Scheduling.contextMenuProfileExclusionDatesREMOVEItem = factory.createMenuItem(startControlID.intValue() + 24, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuProfileExclusionDates.add(contextMenus.Scheduling.contextMenuProfileExclusionDatesREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileExclusionDates);
		contextMenus.Scheduling.contextMenuProfileTemplates = factory.createMenu(startControlID.intValue() + 10);
		contextMenus.Scheduling.contextMenuProfileTemplatesADDTEMPLATEItem = factory.createMenuItem(startControlID.intValue() + 25, "Add Template", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuProfileTemplates.add(contextMenus.Scheduling.contextMenuProfileTemplatesADDTEMPLATEItem);
		contextMenus.Scheduling.contextMenuProfileTemplatesREMOVETEMPLATEItem = factory.createMenuItem(startControlID.intValue() + 26, "Remove Template", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuProfileTemplates.add(contextMenus.Scheduling.contextMenuProfileTemplatesREMOVETEMPLATEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileTemplates);
		contextMenus.Scheduling.contextMenuProfilesMenu = factory.createMenu(startControlID.intValue() + 11);
		contextMenus.Scheduling.contextMenuProfilesMenuADDItem = factory.createMenuItem(startControlID.intValue() + 27, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuProfilesMenu.add(contextMenus.Scheduling.contextMenuProfilesMenuADDItem);
		contextMenus.Scheduling.contextMenuProfilesMenuUPDATEItem = factory.createMenuItem(startControlID.intValue() + 28, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuProfilesMenu.add(contextMenus.Scheduling.contextMenuProfilesMenuUPDATEItem);
		contextMenus.Scheduling.contextMenuProfilesMenuCLONE_PROFILEItem = factory.createMenuItem(startControlID.intValue() + 29, "Clone this Profile", true, false, new Integer(102222), true, false);
		contextMenus.Scheduling.contextMenuProfilesMenu.add(contextMenus.Scheduling.contextMenuProfilesMenuCLONE_PROFILEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfilesMenu);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 432, 58, 240, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccListOwnerForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper74.getSize(), instance1, startTabIndex.intValue() + 7, skipContextValidation);
		//ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(432), new Integer(58), new Integer(240), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 7), m_ccListOwnerForm, instance1 } );
		ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1074),  new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 7), m_ccListOwnerForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccListOwnerControl);
		Menu[] menus1 = m_ccListOwnerForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 360, 60, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 360, 8, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 360, 34, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 16, 34, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 672, 60, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Active Only:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 16, 60, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DoS:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 672, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 1077), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 752, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 1079), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 88, 6, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 432, 32, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbHospFilterTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospFilterTemp);
		cmbHospFilterComboBox cmbHospFilter = (cmbHospFilterComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospFilterComboBox.class, m_cmbHospFilterTemp);
		super.addComboBox(cmbHospFilter);
		RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 88, 32, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbFilterSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.ASCENDING, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFilterSpecialtyTemp);
		cmbFilterSpecialtyComboBox cmbFilterSpecialty = (cmbFilterSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFilterSpecialtyComboBox.class, m_cmbFilterSpecialtyTemp);
		super.addComboBox(cmbFilterSpecialty);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 88, 58, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbFilterDirectoryOfServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbFilterDirectoryOfServiceTemp);
		qmbFilterDirectoryOfServiceComboBox qmbFilterDirectoryOfService = (qmbFilterDirectoryOfServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbFilterDirectoryOfServiceComboBox.class, m_qmbFilterDirectoryOfServiceTemp);
		super.addComboBox(qmbFilterDirectoryOfService);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 536, 8, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Theatre", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 432, 8, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Outpatient", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 752, 60, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 18, 104, 812, 168, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdProfilesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfilesMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.FALSE});
		addControl(m_grdProfilesTemp);
		grdProfilesGrid grdProfiles = (grdProfilesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProfilesGrid.class, m_grdProfilesTemp);
		grdProfiles.addStringColumn("Service", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProfiles.addStringColumn("Profile Description", 0, 0, 350, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProfiles.addStringColumn("Start Date", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProfiles.addStringColumn("End Date", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdProfiles);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 800, 16, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 764, 16, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for profiles matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccListOwner()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccListOwnerValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccListOwnerVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccListOwnerVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccListOwnerEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccListOwnerEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Label lblDOS()
	{
		return (Label)super.getControl(17);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(18);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(19);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(20);
	}
	public cmbHospFilterComboBox cmbHospFilter()
	{
		return (cmbHospFilterComboBox)super.getComboBox(0);
	}
	public cmbFilterSpecialtyComboBox cmbFilterSpecialty()
	{
		return (cmbFilterSpecialtyComboBox)super.getComboBox(1);
	}
	public qmbFilterDirectoryOfServiceComboBox qmbFilterDirectoryOfService()
	{
		return (qmbFilterDirectoryOfServiceComboBox)super.getComboBox(2);
	}
	public CheckBox chkFilterTheatre()
	{
		return (CheckBox)super.getControl(24);
	}
	public CheckBox chkFilterOutpatients()
	{
		return (CheckBox)super.getControl(25);
	}
	public CheckBox chkActiveOnly()
	{
		return (CheckBox)super.getControl(26);
	}
	public grdProfilesGrid grdProfiles()
	{
		return (grdProfilesGrid)super.getGrid(0);
	}
	public ImageButton btnClear()
	{
		return (ImageButton)super.getControl(28);
	}
	public ImageButton btnSearch()
	{
		return (ImageButton)super.getControl(29);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
			Scheduling = new SchedulingForms();
			Core = new CoreForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				LocationSelect = new LocalFormName(103127);
			}
			public final FormName LocationSelect;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				ProfilesSlotGeneric = new LocalFormName(114154);
				ProfileTheatreSlotDialog = new LocalFormName(114100);
			}
			public final FormName ProfilesSlotGeneric;
			public final FormName ProfileTheatreSlotDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				ReportTemplate = new LocalFormName(102250);
			}
			public final FormName ReportTemplate;
		}

		public AdminForms Admin;
		public SchedulingForms Scheduling;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image Tick;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentProfile = new ims.framework.ContextVariable("CurrentProfile", prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier + "");
			cxl_profilesList = new ims.framework.ContextVariable("profilesList", prefix + "_lv_Scheduling.Profiles.__internal_x_context__profilesList_" + componentIdentifier + "");
			cxl_LastMenuItem = new ims.framework.ContextVariable("LastMenuItem", prefix + "_lv_Scheduling.Profiles.__internal_x_context__LastMenuItem_" + componentIdentifier + "");
			cxl_RoleList = new ims.framework.ContextVariable("RoleList", prefix + "_lv_Scheduling.Profiles.__internal_x_context__RoleList_" + componentIdentifier + "");
			cxl_Activities = new ims.framework.ContextVariable("Activities", prefix + "_lv_Scheduling.Profiles.__internal_x_context__Activities_" + componentIdentifier + "");
			cxl_ProfileActivities = new ims.framework.ContextVariable("ProfileActivities", prefix + "_lv_Scheduling.Profiles.__internal_x_context__ProfileActivities_" + componentIdentifier + "");
			cxl_TheatreSlots = new ims.framework.ContextVariable("TheatreSlots", prefix + "_lv_Scheduling.Profiles.__internal_x_context__TheatreSlots_" + componentIdentifier + "");
			cxl_SelectedDos = new ims.framework.ContextVariable("SelectedDos", prefix + "_lv_Scheduling.Profiles.__internal_x_context__SelectedDos_" + componentIdentifier + "");
			cxl_DosMessageBoxID = new ims.framework.ContextVariable("DosMessageBoxID", prefix + "_lv_Scheduling.Profiles.__internal_x_context__DosMessageBoxID_" + componentIdentifier + "");
			cxl_Slots = new ims.framework.ContextVariable("Slots", prefix + "_lv_Scheduling.Profiles.__internal_x_context__Slots_" + componentIdentifier + "");
			cxl_ParentChildSlots = new ims.framework.ContextVariable("ParentChildSlots", prefix + "_lv_Scheduling.Profiles.__internal_x_context__ParentChildSlots_" + componentIdentifier + "");
		}
		
		public boolean getCurrentProfileIsNotNull()
		{
			return !cxl_CurrentProfile.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_ProfileGenericVo getCurrentProfile()
		{
			return (ims.scheduling.vo.Sch_ProfileGenericVo)cxl_CurrentProfile.getValue(context);
		}
		public void setCurrentProfile(ims.scheduling.vo.Sch_ProfileGenericVo value)
		{
			cxl_CurrentProfile.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentProfile = null;
		public boolean getprofilesListIsNotNull()
		{
			return !cxl_profilesList.getValueIsNull(context);
		}
		public ims.scheduling.vo.ProfileShortVoCollection getprofilesList()
		{
			return (ims.scheduling.vo.ProfileShortVoCollection)cxl_profilesList.getValue(context);
		}
		public void setprofilesList(ims.scheduling.vo.ProfileShortVoCollection value)
		{
			cxl_profilesList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_profilesList = null;
		public boolean getLastMenuItemIsNotNull()
		{
			return !cxl_LastMenuItem.getValueIsNull(context);
		}
		public Integer getLastMenuItem()
		{
			return (Integer)cxl_LastMenuItem.getValue(context);
		}
		public void setLastMenuItem(Integer value)
		{
			cxl_LastMenuItem.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastMenuItem = null;
		public boolean getRoleListIsNotNull()
		{
			return !cxl_RoleList.getValueIsNull(context);
		}
		public ims.admin.vo.AppRoleShortVoCollection getRoleList()
		{
			return (ims.admin.vo.AppRoleShortVoCollection)cxl_RoleList.getValue(context);
		}
		public void setRoleList(ims.admin.vo.AppRoleShortVoCollection value)
		{
			cxl_RoleList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RoleList = null;
		public boolean getActivitiesIsNotNull()
		{
			return !cxl_Activities.getValueIsNull(context);
		}
		public ims.core.vo.ActivityVoCollection getActivities()
		{
			return (ims.core.vo.ActivityVoCollection)cxl_Activities.getValue(context);
		}
		public void setActivities(ims.core.vo.ActivityVoCollection value)
		{
			cxl_Activities.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Activities = null;
		public boolean getProfileActivitiesIsNotNull()
		{
			return !cxl_ProfileActivities.getValueIsNull(context);
		}
		public ims.core.vo.ActivityLiteVoCollection getProfileActivities()
		{
			return (ims.core.vo.ActivityLiteVoCollection)cxl_ProfileActivities.getValue(context);
		}
		public void setProfileActivities(ims.core.vo.ActivityLiteVoCollection value)
		{
			cxl_ProfileActivities.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ProfileActivities = null;
		public boolean getTheatreSlotsIsNotNull()
		{
			return !cxl_TheatreSlots.getValueIsNull(context);
		}
		public ims.scheduling.vo.ProfileTheatreTCISlotVoCollection getTheatreSlots()
		{
			return (ims.scheduling.vo.ProfileTheatreTCISlotVoCollection)cxl_TheatreSlots.getValue(context);
		}
		public void setTheatreSlots(ims.scheduling.vo.ProfileTheatreTCISlotVoCollection value)
		{
			cxl_TheatreSlots.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TheatreSlots = null;
		public boolean getSelectedDosIsNotNull()
		{
			return !cxl_SelectedDos.getValueIsNull(context);
		}
		public ims.scheduling.vo.DirectoryofServiceRefVo getSelectedDos()
		{
			return (ims.scheduling.vo.DirectoryofServiceRefVo)cxl_SelectedDos.getValue(context);
		}
		public void setSelectedDos(ims.scheduling.vo.DirectoryofServiceRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'SelectedDos' RefVo context variable.");
			if(value == null)
				cxl_SelectedDos.setValue(context, null);
			else
				cxl_SelectedDos.setValue(context, new ims.scheduling.vo.DirectoryofServiceRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_SelectedDos = null;
		public boolean getDosMessageBoxIDIsNotNull()
		{
			return !cxl_DosMessageBoxID.getValueIsNull(context);
		}
		public Integer getDosMessageBoxID()
		{
			return (Integer)cxl_DosMessageBoxID.getValue(context);
		}
		public void setDosMessageBoxID(Integer value)
		{
			cxl_DosMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DosMessageBoxID = null;
		public boolean getSlotsIsNotNull()
		{
			return !cxl_Slots.getValueIsNull(context);
		}
		public ims.scheduling.vo.Profile_SlotGenericVoCollection getSlots()
		{
			return (ims.scheduling.vo.Profile_SlotGenericVoCollection)cxl_Slots.getValue(context);
		}
		public void setSlots(ims.scheduling.vo.Profile_SlotGenericVoCollection value)
		{
			cxl_Slots.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Slots = null;
		public boolean getParentChildSlotsIsNotNull()
		{
			return !cxl_ParentChildSlots.getValueIsNull(context);
		}
		public ims.scheduling.vo.ProfileParentChildSlotVoCollection getParentChildSlots()
		{
			return (ims.scheduling.vo.ProfileParentChildSlotVoCollection)cxl_ParentChildSlots.getValue(context);
		}
		public void setParentChildSlots(ims.scheduling.vo.ProfileParentChildSlotVoCollection value)
		{
			cxl_ParentChildSlots.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ParentChildSlots = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public SchedulingNamespace Scheduling = new SchedulingNamespace();
		public final class SchedulingNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ProfileListOwners implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int REMOVE = 3;
			}
			public void disableAllProfileListOwnersMenuItems()
			{
				this.contextMenuProfileListOwnersADDItem.setEnabled(false);
				this.contextMenuProfileListOwnersEDITItem.setEnabled(false);
				this.contextMenuProfileListOwnersREMOVEItem.setEnabled(false);
			}
			public void hideAllProfileListOwnersMenuItems()
			{
				this.contextMenuProfileListOwnersADDItem.setVisible(false);
				this.contextMenuProfileListOwnersEDITItem.setVisible(false);
				this.contextMenuProfileListOwnersREMOVEItem.setVisible(false);
			}
			private Menu contextMenuProfileListOwners;
			public ReadOnlyMenuItem getProfileListOwnersADDItem()
			{
				return this.contextMenuProfileListOwnersADDItem;
			}
			private MenuItem contextMenuProfileListOwnersADDItem;
			public ReadOnlyMenuItem getProfileListOwnersEDITItem()
			{
				return this.contextMenuProfileListOwnersEDITItem;
			}
			private MenuItem contextMenuProfileListOwnersEDITItem;
			public ReadOnlyMenuItem getProfileListOwnersREMOVEItem()
			{
				return this.contextMenuProfileListOwnersREMOVEItem;
			}
			private MenuItem contextMenuProfileListOwnersREMOVEItem;
			public final class ProfileSlotsGeneral implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 4;
				public static final int EDIT = 5;
				public static final int REMOVE = 6;
			}
			public void disableAllProfileSlotsGeneralMenuItems()
			{
				this.contextMenuProfileSlotsGeneralADDItem.setEnabled(false);
				this.contextMenuProfileSlotsGeneralEDITItem.setEnabled(false);
				this.contextMenuProfileSlotsGeneralREMOVEItem.setEnabled(false);
			}
			public void hideAllProfileSlotsGeneralMenuItems()
			{
				this.contextMenuProfileSlotsGeneralADDItem.setVisible(false);
				this.contextMenuProfileSlotsGeneralEDITItem.setVisible(false);
				this.contextMenuProfileSlotsGeneralREMOVEItem.setVisible(false);
			}
			private Menu contextMenuProfileSlotsGeneral;
			public ReadOnlyMenuItem getProfileSlotsGeneralADDItem()
			{
				return this.contextMenuProfileSlotsGeneralADDItem;
			}
			private MenuItem contextMenuProfileSlotsGeneralADDItem;
			public ReadOnlyMenuItem getProfileSlotsGeneralEDITItem()
			{
				return this.contextMenuProfileSlotsGeneralEDITItem;
			}
			private MenuItem contextMenuProfileSlotsGeneralEDITItem;
			public ReadOnlyMenuItem getProfileSlotsGeneralREMOVEItem()
			{
				return this.contextMenuProfileSlotsGeneralREMOVEItem;
			}
			private MenuItem contextMenuProfileSlotsGeneralREMOVEItem;
			public final class ProfileActivity implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 7;
				public static final int REMOVE = 8;
			}
			public void disableAllProfileActivityMenuItems()
			{
				this.contextMenuProfileActivityADDItem.setEnabled(false);
				this.contextMenuProfileActivityREMOVEItem.setEnabled(false);
			}
			public void hideAllProfileActivityMenuItems()
			{
				this.contextMenuProfileActivityADDItem.setVisible(false);
				this.contextMenuProfileActivityREMOVEItem.setVisible(false);
			}
			private Menu contextMenuProfileActivity;
			public ReadOnlyMenuItem getProfileActivityADDItem()
			{
				return this.contextMenuProfileActivityADDItem;
			}
			private MenuItem contextMenuProfileActivityADDItem;
			public ReadOnlyMenuItem getProfileActivityREMOVEItem()
			{
				return this.contextMenuProfileActivityREMOVEItem;
			}
			private MenuItem contextMenuProfileActivityREMOVEItem;
			public final class ProfileTheatreTCITimes implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 9;
				public static final int REMOVE = 10;
			}
			public void disableAllProfileTheatreTCITimesMenuItems()
			{
				this.contextMenuProfileTheatreTCITimesADDItem.setEnabled(false);
				this.contextMenuProfileTheatreTCITimesREMOVEItem.setEnabled(false);
			}
			public void hideAllProfileTheatreTCITimesMenuItems()
			{
				this.contextMenuProfileTheatreTCITimesADDItem.setVisible(false);
				this.contextMenuProfileTheatreTCITimesREMOVEItem.setVisible(false);
			}
			private Menu contextMenuProfileTheatreTCITimes;
			public ReadOnlyMenuItem getProfileTheatreTCITimesADDItem()
			{
				return this.contextMenuProfileTheatreTCITimesADDItem;
			}
			private MenuItem contextMenuProfileTheatreTCITimesADDItem;
			public ReadOnlyMenuItem getProfileTheatreTCITimesREMOVEItem()
			{
				return this.contextMenuProfileTheatreTCITimesREMOVEItem;
			}
			private MenuItem contextMenuProfileTheatreTCITimesREMOVEItem;
			public final class ProfileTheatreSlots implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 11;
				public static final int EDIT = 12;
				public static final int REMOVE = 13;
			}
			public void disableAllProfileTheatreSlotsMenuItems()
			{
				this.contextMenuProfileTheatreSlotsADDItem.setEnabled(false);
				this.contextMenuProfileTheatreSlotsEDITItem.setEnabled(false);
				this.contextMenuProfileTheatreSlotsREMOVEItem.setEnabled(false);
			}
			public void hideAllProfileTheatreSlotsMenuItems()
			{
				this.contextMenuProfileTheatreSlotsADDItem.setVisible(false);
				this.contextMenuProfileTheatreSlotsEDITItem.setVisible(false);
				this.contextMenuProfileTheatreSlotsREMOVEItem.setVisible(false);
			}
			private Menu contextMenuProfileTheatreSlots;
			public ReadOnlyMenuItem getProfileTheatreSlotsADDItem()
			{
				return this.contextMenuProfileTheatreSlotsADDItem;
			}
			private MenuItem contextMenuProfileTheatreSlotsADDItem;
			public ReadOnlyMenuItem getProfileTheatreSlotsEDITItem()
			{
				return this.contextMenuProfileTheatreSlotsEDITItem;
			}
			private MenuItem contextMenuProfileTheatreSlotsEDITItem;
			public ReadOnlyMenuItem getProfileTheatreSlotsREMOVEItem()
			{
				return this.contextMenuProfileTheatreSlotsREMOVEItem;
			}
			private MenuItem contextMenuProfileTheatreSlotsREMOVEItem;
			public final class ProfileTheatre implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 14;
				public static final int REMOVE = 15;
			}
			public void disableAllProfileTheatreMenuItems()
			{
				this.contextMenuProfileTheatreADDItem.setEnabled(false);
				this.contextMenuProfileTheatreREMOVEItem.setEnabled(false);
			}
			public void hideAllProfileTheatreMenuItems()
			{
				this.contextMenuProfileTheatreADDItem.setVisible(false);
				this.contextMenuProfileTheatreREMOVEItem.setVisible(false);
			}
			private Menu contextMenuProfileTheatre;
			public ReadOnlyMenuItem getProfileTheatreADDItem()
			{
				return this.contextMenuProfileTheatreADDItem;
			}
			private MenuItem contextMenuProfileTheatreADDItem;
			public ReadOnlyMenuItem getProfileTheatreREMOVEItem()
			{
				return this.contextMenuProfileTheatreREMOVEItem;
			}
			private MenuItem contextMenuProfileTheatreREMOVEItem;
			public final class ProfileBookingRights implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 16;
				public static final int EDIT = 17;
				public static final int REMOVE = 18;
			}
			public void disableAllProfileBookingRightsMenuItems()
			{
				this.contextMenuProfileBookingRightsADDItem.setEnabled(false);
				this.contextMenuProfileBookingRightsEDITItem.setEnabled(false);
				this.contextMenuProfileBookingRightsREMOVEItem.setEnabled(false);
			}
			public void hideAllProfileBookingRightsMenuItems()
			{
				this.contextMenuProfileBookingRightsADDItem.setVisible(false);
				this.contextMenuProfileBookingRightsEDITItem.setVisible(false);
				this.contextMenuProfileBookingRightsREMOVEItem.setVisible(false);
			}
			private Menu contextMenuProfileBookingRights;
			public ReadOnlyMenuItem getProfileBookingRightsADDItem()
			{
				return this.contextMenuProfileBookingRightsADDItem;
			}
			private MenuItem contextMenuProfileBookingRightsADDItem;
			public ReadOnlyMenuItem getProfileBookingRightsEDITItem()
			{
				return this.contextMenuProfileBookingRightsEDITItem;
			}
			private MenuItem contextMenuProfileBookingRightsEDITItem;
			public ReadOnlyMenuItem getProfileBookingRightsREMOVEItem()
			{
				return this.contextMenuProfileBookingRightsREMOVEItem;
			}
			private MenuItem contextMenuProfileBookingRightsREMOVEItem;
			public final class ProfileExclusionTimes implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 19;
				public static final int EDIT = 20;
				public static final int REMOVE = 21;
			}
			public void disableAllProfileExclusionTimesMenuItems()
			{
				this.contextMenuProfileExclusionTimesADDItem.setEnabled(false);
				this.contextMenuProfileExclusionTimesEDITItem.setEnabled(false);
				this.contextMenuProfileExclusionTimesREMOVEItem.setEnabled(false);
			}
			public void hideAllProfileExclusionTimesMenuItems()
			{
				this.contextMenuProfileExclusionTimesADDItem.setVisible(false);
				this.contextMenuProfileExclusionTimesEDITItem.setVisible(false);
				this.contextMenuProfileExclusionTimesREMOVEItem.setVisible(false);
			}
			private Menu contextMenuProfileExclusionTimes;
			public ReadOnlyMenuItem getProfileExclusionTimesADDItem()
			{
				return this.contextMenuProfileExclusionTimesADDItem;
			}
			private MenuItem contextMenuProfileExclusionTimesADDItem;
			public ReadOnlyMenuItem getProfileExclusionTimesEDITItem()
			{
				return this.contextMenuProfileExclusionTimesEDITItem;
			}
			private MenuItem contextMenuProfileExclusionTimesEDITItem;
			public ReadOnlyMenuItem getProfileExclusionTimesREMOVEItem()
			{
				return this.contextMenuProfileExclusionTimesREMOVEItem;
			}
			private MenuItem contextMenuProfileExclusionTimesREMOVEItem;
			public final class ProfileExclusionDates implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 22;
				public static final int EDIT = 23;
				public static final int REMOVE = 24;
			}
			public void disableAllProfileExclusionDatesMenuItems()
			{
				this.contextMenuProfileExclusionDatesADDItem.setEnabled(false);
				this.contextMenuProfileExclusionDatesEDITItem.setEnabled(false);
				this.contextMenuProfileExclusionDatesREMOVEItem.setEnabled(false);
			}
			public void hideAllProfileExclusionDatesMenuItems()
			{
				this.contextMenuProfileExclusionDatesADDItem.setVisible(false);
				this.contextMenuProfileExclusionDatesEDITItem.setVisible(false);
				this.contextMenuProfileExclusionDatesREMOVEItem.setVisible(false);
			}
			private Menu contextMenuProfileExclusionDates;
			public ReadOnlyMenuItem getProfileExclusionDatesADDItem()
			{
				return this.contextMenuProfileExclusionDatesADDItem;
			}
			private MenuItem contextMenuProfileExclusionDatesADDItem;
			public ReadOnlyMenuItem getProfileExclusionDatesEDITItem()
			{
				return this.contextMenuProfileExclusionDatesEDITItem;
			}
			private MenuItem contextMenuProfileExclusionDatesEDITItem;
			public ReadOnlyMenuItem getProfileExclusionDatesREMOVEItem()
			{
				return this.contextMenuProfileExclusionDatesREMOVEItem;
			}
			private MenuItem contextMenuProfileExclusionDatesREMOVEItem;
			public final class ProfileTemplates implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADDTEMPLATE = 25;
				public static final int REMOVETEMPLATE = 26;
			}
			public void disableAllProfileTemplatesMenuItems()
			{
				this.contextMenuProfileTemplatesADDTEMPLATEItem.setEnabled(false);
				this.contextMenuProfileTemplatesREMOVETEMPLATEItem.setEnabled(false);
			}
			public void hideAllProfileTemplatesMenuItems()
			{
				this.contextMenuProfileTemplatesADDTEMPLATEItem.setVisible(false);
				this.contextMenuProfileTemplatesREMOVETEMPLATEItem.setVisible(false);
			}
			private Menu contextMenuProfileTemplates;
			public ReadOnlyMenuItem getProfileTemplatesADDTEMPLATEItem()
			{
				return this.contextMenuProfileTemplatesADDTEMPLATEItem;
			}
			private MenuItem contextMenuProfileTemplatesADDTEMPLATEItem;
			public ReadOnlyMenuItem getProfileTemplatesREMOVETEMPLATEItem()
			{
				return this.contextMenuProfileTemplatesREMOVETEMPLATEItem;
			}
			private MenuItem contextMenuProfileTemplatesREMOVETEMPLATEItem;
			public final class ProfilesMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 27;
				public static final int UPDATE = 28;
				public static final int CLONE_PROFILE = 29;
			}
			public void disableAllProfilesMenuMenuItems()
			{
				this.contextMenuProfilesMenuADDItem.setEnabled(false);
				this.contextMenuProfilesMenuUPDATEItem.setEnabled(false);
				this.contextMenuProfilesMenuCLONE_PROFILEItem.setEnabled(false);
			}
			public void hideAllProfilesMenuMenuItems()
			{
				this.contextMenuProfilesMenuADDItem.setVisible(false);
				this.contextMenuProfilesMenuUPDATEItem.setVisible(false);
				this.contextMenuProfilesMenuCLONE_PROFILEItem.setVisible(false);
			}
			private Menu contextMenuProfilesMenu;
			public MenuItem getProfilesMenuADDItem()
			{
				return this.contextMenuProfilesMenuADDItem;
			}
			private MenuItem contextMenuProfilesMenuADDItem;
			public MenuItem getProfilesMenuUPDATEItem()
			{
				return this.contextMenuProfilesMenuUPDATEItem;
			}
			private MenuItem contextMenuProfilesMenuUPDATEItem;
			public ReadOnlyMenuItem getProfilesMenuCLONE_PROFILEItem()
			{
				return this.contextMenuProfilesMenuCLONE_PROFILEItem;
			}
			private MenuItem contextMenuProfilesMenuCLONE_PROFILEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[149];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-ID", "ID_Profile_Slot");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-STARTTM", "StartTm");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-DURATION", "Duration");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-PRIORITY", "Priority");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-NUMBERSLOTSREQ", "NumberSlotsReq");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-NOOFINSTANCES", "NoOfInstances");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-DEALLOCNOOFDAYS", "DeallocNoOfDays");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-ISACTIVE", "IsActive");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-DIRECTACCESSSLOT", "Type");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-ID", "ID_Location");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-NAME", "Name");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-ISACTIVE", "IsActive");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-TYPE", "Type");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-ID", "ID_Event");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-NAME", "Name");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-DESCRIPTION", "Description");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-STATUS", "Status");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-PATIENTDIARYIMPACT", "PatientDiaryImpact");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-EVENTTYPE", "EventType");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-STARTSCLOCK", "StartsClock");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-STOPSCLOCK", "StopsClock");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-ENDSPATHWAY", "EndsPathway");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-ISMANUALSCHEDULEDEVENT", "IsManualScheduledEvent");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileParentChildSlot", "BO-1090100018-ID", "ID_ProfileParentChildSlot");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileParentChildSlot", "BO-1090100018-STARTTIME", "StartTime");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileParentChildSlot", "BO-1090100018-NOOFINSTANCES", "NoOfInstances");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileParentChildSlot", "BO-1090100018-ISACTIVE", "IsActive");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileParentChildSlot", "BO-1090100018-DURATION", "Duration");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileParentChildSlot", "BO-1090100018-ENDTM", "EndTm");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileTheatreSlot", "BO-1090100016-ID", "ID_ProfileTheatreTCISlot");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileTheatreSlot", "BO-1090100016-TOCOMEINTIME", "ToComeInTime");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileTheatreSlot", "BO-1090100016-NOOFINSTANCES", "NoOfInstances");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileTheatreSlot", "BO-1090100016-ISACTIVE", "IsActive");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Core.ReportTemplateRef", "BO-1004100008-ID", "ID_TemplateBo");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileService", "BO-1003100032-ID", "ID_Service");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ID", "ID_Sch_Profile");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-NAME", "Name");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-DESCRIPTION", "Description");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-PRFCATEGORY", "PrfCategory");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-PRFTYPE", "Prftype");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-EFFFRM", "EffFrm");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-EFFTO", "EffTo");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISACTIVE", "IsActive");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-LASTACTUALGENDATE", "LastActualGenDate");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-LASTGENDATE", "LastGenDate");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISFIXED", "IsFixed");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISUNDERCONTRACT", "IsUnderContract");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-INTERVALTYPE", "IntervalType");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-INTERVALSIZE", "IntervalSize");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISSCHMON", "IsSchMon");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISSCHTUE", "IsSchTue");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISSCHWED", "IsSchWed");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISSCHTHUR", "IsSchThur");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISSCHFRI", "IsSchFri");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISSCHSAT", "IsSchSat");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISSCHSUN", "IsSchSun");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISFIRSTINSTANCE", "IsFirstInstance");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISSECONDINSTANCE", "IsSecondInstance");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISTHIRDINSTANCE", "IsThirdInstance");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISFOURTHINSTANCE", "IsFourthInstance");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISFIFTHINSTANCE", "IsFifthInstance");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-MININT", "MinInt");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ROUNDATTTIME", "RoundAttTime");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-LASTAPPINTERVAL", "LastAppInterval");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-STARTTM", "StartTm");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ENDTM", "EndTm");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-PASCLINIC", "PASClinic");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-MAXNOAPPTS", "MaxNoAppts");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-CONSMEDIATYPE", "ConsMediaType");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISTHEATREPROFILE", "IsTheatreProfile");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-THEATRETYPE", "TheatreType");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-SLOTTYPE", "SlotType");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.Profiles.__internal_x_context__SelectedDos_" + componentIdentifier, "BO-1055100011-ID", "ID_DirectoryofService");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
