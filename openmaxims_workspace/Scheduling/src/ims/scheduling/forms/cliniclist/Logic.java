//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.30 build 2012.21169)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.cliniclist;

import ims.RefMan.vo.CatsReferralForClinicListVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListForDNAAppointmentsVo;
import ims.RefMan.vo.TCIForPatientElectiveListAppointmentDNAVo;
import ims.RefMan.vo.TCIOutcomeForAppointmentDNAVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.ProfileShortVo;
import ims.scheduling.vo.ProfileShortVoCollection;
import ims.scheduling.vo.Sch_BookingVo;
import ims.scheduling.vo.Sch_BookingVoCollection;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.SessionSlotVoCollection;
import ims.scheduling.vo.Session_SlotRefVo;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.btnDNA().setEnabled(false);
		form.btnCancel().setEnabled(false);
		form.btnCancelSlot().setEnabled(false);
		form.btnSearch().setEnabled(true);
		form.dteSessionDate().setValue(new Date());
		
		if(ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"))
			form.grdSlots().setColUBRNCaption("");
		
		loadProfiles();
	}
	
	private void loadProfiles() 
	{
		form.cmbProfile().clear();
		
		ProfileShortVoCollection voColl = domain.listProfiles(null, null, new Boolean(true));
		ProfileShortVo voProfile;
		String profileText;
		for(int i=0; voColl != null && i<voColl.size(); i++)
		{
			voProfile 	= voColl.get(i);
			profileText = voProfile.getDescription();
			form.cmbProfile().newRow(voProfile, profileText);
		}
	}
	
	protected void onGrdSlotsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnDNA().setEnabled(false);
		form.btnCancel().setEnabled(false);
		form.btnCancelSlot().setEnabled(false);
		
		form.getContextMenus().Scheduling.hideAllClinicListMenuItems();
		
		if(form.grdSlots().getValue() instanceof SessionSlotVo)
		{
			SessionSlotVo voSessionSlot = (SessionSlotVo) form.grdSlots().getValue();
			
			form.getLocalContext().setSessionSlot(voSessionSlot);
			if(voSessionSlot != null)
			{
				if(voSessionSlot.getAppointmentIsNotNull())
				{
					Boolean showOutcome = voSessionSlot.getAppointment().getApptStatusIsNotNull() 
					&& ((voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.SEEN) 
							|| voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.ARRIVAL)) 
							|| ( voSessionSlot.getAppointment().getApptStatusHistoryIsNotNull()
							&& voSessionSlot.getAppointment().getApptStatusHistory().containsAny(new Status_Reason[]{Status_Reason.ARRIVAL, Status_Reason.SEEN}))
							&& !voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.BOOKED));//WDEV-12956 
					
					Boolean showCancel = voSessionSlot.getAppointment().getApptStatusIsNotNull() && voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.BOOKED);
					
					//WDEV-12568 - starts here
					Boolean showDna = voSessionSlot.getAppointment().getApptStatusIsNotNull() 
						&& voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.BOOKED) 
						&& voSessionSlot.getAppointment().getAppointmentDateIsNotNull() 
						&& (new Date().isGreaterThan(voSessionSlot.getAppointment().getAppointmentDate())
							||(new Date().equals(voSessionSlot.getAppointment().getAppointmentDate()) 
								&& voSessionSlot.getAppointment().getApptStartTimeIsNotNull() 
								&& voSessionSlot.getAppointment().getApptStartTime().isLessThan(new Time())));
					//WDEV-12568 - ends here
							
					form.getContextMenus().Scheduling.getClinicListATTENDEDItem().setVisible(form.getMode().equals(FormMode.VIEW) && voSessionSlot.getAppointment().getApptStatusIsNotNull() && voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.BOOKED));
					form.getContextMenus().Scheduling.getClinicListSEENItem().setVisible(form.getMode().equals(FormMode.VIEW) && voSessionSlot.getAppointment().getApptStatusIsNotNull() && voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.ARRIVAL));

					form.getContextMenus().Scheduling.getClinicListCANCELItem().setVisible(showCancel);
					form.getContextMenus().Scheduling.getClinicListOUTCOMEItem().setVisible(showOutcome);
					
					form.btnCancel().setEnabled(showCancel);
					//if(voSessionSlot.getAppointment().getAppointmentDate().isLessOrEqualThan(new Date()) && (voSessionSlot.getAppointment().getApptStartTimeIsNotNull() && voSessionSlot.getAppointment().getApptStartTime().isLessThan(new Time())))
					//{
					form.getContextMenus().Scheduling.getClinicListDNAItem().setVisible(showDna);
					form.btnDNA().setEnabled(showDna);
					//}
				}
				else if(voSessionSlot.getStatusIsNotNull() && !voSessionSlot.getStatus().equals(Status_Reason.CANCELLED))
				{
					form.getContextMenus().Scheduling.getClinicListCANCELSLOTItem().setVisible(true);
					form.btnCancelSlot().setEnabled(true);
				}
				if (form.grdSlots().getSelectedRow() != null)
				{
					form.getGlobalContext().Core.setPatientShort(form.grdSlots().getSelectedRow().getColPatientShort());
					form.getGlobalContext().Core.setPatientToBeDisplayed(form.grdSlots().getSelectedRow().getColPatientShort());
				}
			}
		}
	}
	
	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateSearch())
		{
			search();
			if(form.cmbSessions().getValue() != null)
				loadSlots();
		}
	}
	
	private void search()
	{
		form.grdSlots().getRows().clear();
		if(form.cmbProfile().getValue() == null || form.dteSessionDate().getValue() == null)
			return;
		
		SessionShortVoCollection voCollSessionShort = domain.listSession(null, null, form.cmbProfile().getValue(), form.dteSessionDate().getValue());
		loadSessions(voCollSessionShort);	
	}
	private boolean validateSearch()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.cmbProfile().getValue() == null)
			uiErrors.add("Please select a Profile");

		if(form.dteSessionDate().getValue() == null)
			uiErrors.add("Please enter a Date");
			
		if(form.cmbSessions().getValue() == null)
			uiErrors.add("Please select a Clinic");
		
		if(uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[0]));
			return false;
		}
		
		return true;
	}
	
	private void loadSessions(SessionShortVoCollection voCollSessionShort) 
	{
		form.cmbSessions().clear();
		form.grdSlots().getRows().clear();
	
		for(int i=0;i<voCollSessionShort.size();i++)
		{
			form.cmbSessions().newRow(voCollSessionShort.get(i), voCollSessionShort.get(i).toString());
		}

		if(voCollSessionShort.size() > 0)
			form.cmbSessions().setValue(voCollSessionShort.get(0));
	}

	protected void onBtnClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnDNA().setEnabled(false);
		form.btnCancel().setEnabled(false);
		form.btnCancelSlot().setEnabled(false);
		form.grdSlots().getRows().clear();
		form.grdSlots().setValue(null);
		form.dteSessionDate().setValue(null);
		form.cmbProfile().setValue(null);
		form.cmbSessions().clear();
		form.cmbStatus().setValue(null);
		form.getContextMenus().Scheduling.hideAllClinicListMenuItems();
	}

	protected void onCmbSessionsValueChanged() throws PresentationLogicException 
	{
		loadSlots();
	}

	private void loadSlots() 
	{
		form.grdSlots().getRows().clear();
		form.btnDNA().setEnabled(false);
		form.btnCancel().setEnabled(false);
		form.btnCancelSlot().setEnabled(false);
		
		form.getContextMenus().Scheduling.hideAllClinicListMenuItems();
		
		if(form.cmbSessions().getValue() == null)
			return;
		
		if(form.cmbSessions().getValue().getID_Sch_Session() == null) //All
		{
			SessionShortVoCollection voCollSession = form.getLocalContext().getAllSessions();
			Integer[] sessionIds = null;
			if(voCollSession != null)
			{
				sessionIds = new Integer[voCollSession.size()];
				for(int i=0;i<voCollSession.size();i++)
				{
					sessionIds[i] = voCollSession.get(i).getID_Sch_Session();
				}
			}	
			populateSlots(domain.listAppointments(null, sessionIds, form.cmbStatus().getValue()));
		}
		else
		{
			SessionShortVo session = form.cmbSessions().getValue();
			if(session.getIsFixedIsNotNull() && session.getIsFixed())
				populateSlots(domain.listAppointments(form.cmbSessions().getValue(), null, form.cmbStatus().getValue()));
			else
				populateBooking(domain.listFlexibleBookings(form.cmbSessions().getValue()));
		}		
	}

	private void populateBooking(Sch_BookingVoCollection voCollSchBookings) 
	{
		GenForm.grdSlotsRow row=null;
		Sch_BookingVo voBooking=null;
		
		if(form.getLocalContext().getPatients() == null)
			form.getLocalContext().setPatients(new HashMap());
		else
			form.getLocalContext().getPatients().clear();
		
		for(int i=0;i<voCollSchBookings.size();i++)
		{
			voBooking = voCollSchBookings.get(i);						
			if(voBooking.getAppointmentsIsNotNull())
			{
				for(int p=0;p<voBooking.getAppointments().size();p++)
				{
					Booking_AppointmentVo voAppt = voBooking.getAppointments().get(p);
					
					row = form.grdSlots().getRows().newRow();
					
					PatientShort voPatShort = voBooking.getPatient();
					row.setColDetails(voPatShort.getPatientNameAndIdInfo());
					row.setColPatientShort(voPatShort);
					row.setTooltipForColDetails(voPatShort.getPatientNameAndIdInfo());
					
					if(voAppt.getApptStartTimeIsNotNull())
						row.setColTime(voAppt.getApptStartTime().toString());
					
					if(voAppt.getApptStatusIsNotNull())
						row.setColActivityType(voAppt.getApptStatus().getText());
					
					row.setValue(voAppt);
					
					form.getLocalContext().getPatients().put(row.getValue(), voPatShort);					
				}
			}		
		}
	}
	
	/**
	 * @param collection
	 */
	private void populateSlots(SessionSlotVoCollection voCollSessionSlots) 
	{
		GenForm.grdSlotsRow row=null;
		SessionSlotVo voSessionSlot=null;
		
		if(form.getLocalContext().getPatients() == null)
			form.getLocalContext().setPatients(new HashMap());
		else
			form.getLocalContext().getPatients().clear();
	
		for(int i=0;i<voCollSessionSlots.size();i++)
		{
			voSessionSlot = voCollSessionSlots.get(i);
			row = form.grdSlots().getRows().newRow();
			
			if(voSessionSlot.getPriorityIsNotNull())
				row.setColPriority(voSessionSlot.getPriority().getText());
			
			if(voSessionSlot.getStatusIsNotNull())
			{
				row.setColSlotStatus(voSessionSlot.getStatus().getText());
				if(voSessionSlot.getStatus().equals(Status_Reason.CANCELLED_PENDING_APPT))
					row.setSelectable(false);
			}
			
			if(voSessionSlot.getStartTmIsNotNull())
				row.setColTime(voSessionSlot.getStartTm().toString());
			
			row.setValue(voSessionSlot);
			
			if(voSessionSlot.getAppointmentIsNotNull() && voSessionSlot.getAppointment().getApptStatus() != null && !voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.CANCELLED))
			{
				StringBuffer strTooltip = new StringBuffer();
				row.setColDetails(voSessionSlot.getAppointment().toString());
				PatientShort voPatShort = domain.getBookingPatient(voSessionSlot.getAppointment());
				row.setColDetails(voPatShort.getPatientNameAndIdInfo());
				row.setColPatientShort(voPatShort);
				strTooltip.append("<b>Booking details :</b> " + voPatShort.getPatientNameAndIdInfo());
				if(voSessionSlot.getAppointment().getApptStatusIsNotNull())
					row.setColActivityType(voSessionSlot.getAppointment().getApptStatus().getText());
				
				if(voSessionSlot.getAppointment().getActivityIsNotNull())
					row.setColApptType(voSessionSlot.getAppointment().getActivity().getName());
				
				if(!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"))
					row.setColUBRN(voSessionSlot.getUBRN());
				
				if(voSessionSlot.getAppointment().getOutcomeIsNotNull())
					strTooltip.append("<br><b>Appointment Outcome :</b> " + voSessionSlot.getAppointment().getOutcome().getText());
				
				if(voSessionSlot.getAppointment().getCommentsIsNotNull())
					strTooltip.append("<br><b>Appointment Comments :</b> " + voSessionSlot.getAppointment().getComments());
					
				row.setTooltip(strTooltip.toString());
				form.getLocalContext().getPatients().put(row.getValue(), voPatShort);
			}
		}
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.ClinicList.CANCEL:
				cancel();
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.ClinicList.CANCELSLOT:
				cancelSlot();
				loadSlots();	
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.ClinicList.DNA:
				//dna();
				//loadSlots();
				dnaPatientMenuItem();
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.ClinicList.OUTCOME:
				appointmentOutcome();
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.ClinicList.ATTENDED:
				attendedMenuOption();	//WDEV-12568
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.ClinicList.SEEN:
				if(form.grdSlots().getValue() != null && form.grdSlots().getValue() instanceof SessionSlotVo)
				{
					form.getGlobalContext().Scheduling.setBookingAppointment( ((SessionSlotVo) form.grdSlots().getValue()).getAppointment());
					if(form.getGlobalContext().Scheduling.getBookingAppointmentIsNotNull())
					{
						form.getGlobalContext().Scheduling.getBookingAppointment().setApptStatus(Status_Reason.SEEN);
						engine.open(form.getForms().Scheduling.AttendOrSeenDialog, "Patient Seen");
					}
				}
			break;
			
			default:
		}	
	}

	//WDEV-12568
	private void attendedMenuOption()
	{
		if(form.grdSlots().getValue() != null && form.grdSlots().getValue() instanceof SessionSlotVo)
		{
			Booking_AppointmentVo voBook = domain.getAppointment((Session_SlotRefVo) form.grdSlots().getValue());
			
			if (voBook != null && voBook.getApptStatusIsNotNull() && voBook.getApptStatus().equals(Status_Reason.BOOKED))  //wdev-12726
			{
				form.getGlobalContext().Scheduling.setBookingAppointment(voBook);
				if(form.getGlobalContext().Scheduling.getBookingAppointmentIsNotNull())
				{
					form.getGlobalContext().Scheduling.getBookingAppointment().setApptStatus(Status_Reason.ARRIVAL);
					engine.open(form.getForms().Scheduling.AttendOrSeenDialog, "Patient Attended");
				}
			}
			else 
    		{
    			engine.showMessage("This appointment's status has already changed.");
    			search();
    			if(form.cmbSessions().getValue() != null)
    				loadSlots();
    		}
		}
	}
	
	//	WDEV-12568
	private void dnaPatientMenuItem()
	{
		if(form.grdSlots().getValue() instanceof SessionSlotVo)
		{
			Booking_AppointmentVo voBook = domain.getAppointment((Session_SlotRefVo) form.grdSlots().getValue());
    		if (voBook.getApptStatusIsNotNull() && canBeDNAed(voBook.getApptStatus(), voBook.getSession().getSessionDate()))
    		{
    			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
    					&& domain.hasTCI(voBook))
    			{
    				form.getLocalContext().setMessageBoxDNA(engine.showMessage("You are about to mark this record as DNA. Is a new TCI required?", "Warning", MessageButtons.YESNOCANCEL));
    			}
    			else
    			{
    				form.getLocalContext().setMessageBoxDNA(engine.showMessage("Are you sure you want to mark this record as DNA?", "Warning", MessageButtons.YESNO));
    			}
    		}
    		else
    		{
    			engine.showMessage("This appointment's status has already changed.");
    			search();
    			if(form.cmbSessions().getValue() != null)
    				loadSlots();
    		}
		}
	}
	
	//WDEV-12568
	private boolean canBeDNAed(Status_Reason apptStatus, Date dateSession) 
	{
		if (apptStatus != null 
			&& apptStatus.equals(Status_Reason.BOOKED))
			{
				if(dateSession != null)
				{
					if(new Date().isGreaterOrEqualThan(dateSession))
					{
						return true;
					}
				}
			}
			return false;
	}

	private void appointmentOutcome()
	{
		if(form.grdSlots().getValue() instanceof SessionSlotVo)
		{
			SessionSlotVo voSlot = (SessionSlotVo)form.grdSlots().getValue();
			if(voSlot.getAppointmentIsNotNull())
			{
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(voSlot.getAppointment());
				engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog);
			}
		}
	}

	private void cancelSlot()
	{
		if(form.grdSlots().getValue() instanceof SessionSlotVo)
		{
			SessionSlotVo voSlot = (SessionSlotVo) form.grdSlots().getValue();
			
			voSlot.setStatus(Status_Reason.CANCELLED);
			voSlot.setStatusReason(Status_Reason.CANCELLED);

			try
			{
				domain.cancelSlot(voSlot, ActionRequestType.NOTIFY_SLOT_CANCEL, "Cancel Slot requested from Clinic List");
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			search();
		}
	}

	private void dna(boolean requiresNewTCI)
	{
		if(form.grdSlots().getValue() instanceof SessionSlotVo)
		{
    		Booking_AppointmentVo voBooking = domain.getAppointment((Session_SlotRefVo) form.grdSlots().getValue());
    		
    		if (voBooking == null)
    		{
    			engine.showMessage("No Booking Found.");
    			return;
    		}
    		
    		if(((SessionSlotVo) form.grdSlots().getValue()).getAppointmentIsNotNull() && ((SessionSlotVo) form.grdSlots().getValue()).getAppointment().getVersion_Booking_Appointment() != voBooking.getVersion_Booking_Appointment())
    		{
    			//simulate SOE
    			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    			return;
    		}
				
			// wdev-6034
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voBooking.setCurrentStatusRecord(voApptStatus);  
			
			voBooking.setApptStatusHistory(getApptStatusHistory((SessionSlotVo) form.grdSlots().getValue(), Status_Reason.DNA, voApptStatus));
			voBooking.setApptStatus(Status_Reason.DNA);
			voBooking.setApptStatusReas(Status_Reason.DNA);
			
			CatsReferralForClinicListVo voCats = domain.getCatsReferral(voBooking);
			if (voCats == null)
			{
				engine.showMessage("No CATS Referral Found.");
				return;
			}
			voCats.setHasDNAApptsForReview(true);
			voCats.validate();
			
			if(voBooking.getIsCABBooking() == null || Boolean.FALSE.equals(voBooking.getIsCABBooking()))
			{
				voBooking.setRequiresRebook(true);
				
				if(voBooking.getSessionSlot() != null)
					voBooking.getSessionSlot().setStatus(Status_Reason.DNA);
			}
			
			PatientElectiveListForDNAAppointmentsVo patientElectiveList = null;
			
			//WDEV-18325
			form.getGlobalContext().Core.getPatientShort().calculateAge();
			boolean isPaediatricPatient = form.getGlobalContext().Core.getPatientShort().getAgeIsNotNull() && form.getGlobalContext().Core.getPatientShort().getAge() <= ConfigFlag.GEN.PAEDIATRIC_AGE.getValue();
			boolean isFirstApptActivityforDNA  = !isPaediatricPatient && form.getLocalContext().getMessageBoxDNAIsNotNull() && Boolean.TRUE.equals(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue()) && voBooking.getActivityIsNotNull() && voBooking.getActivity().getFirstAppointment();
						
			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
			{
    			// TODO - Also set TCI to outcome 
    			patientElectiveList = domain.getPatientElectiveList(voBooking);
    			
    			if (patientElectiveList != null)
    			{
    				TCIForPatientElectiveListAppointmentDNAVo currentTCI = patientElectiveList.getTCIDetails();
    				
    				// Update the TCI record - should really not be null, since the query is performed after it
    				if (currentTCI != null)
    				{
        				TCIOutcomeForAppointmentDNAVo outcomeDNA = new TCIOutcomeForAppointmentDNAVo();
        				
        				outcomeDNA.setOutcome(AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4);
        				outcomeDNA.setStatusDateTime(new DateTime());
        				outcomeDNA.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
        				
        				currentTCI.setCurrentOutcome(outcomeDNA);
        				currentTCI.getOutcomeHistory().add(outcomeDNA);
        				currentTCI.setIsActive(Boolean.FALSE);
        				
        				// Add current TCI to history, but do NOT remove it from current field yet.
        				// It will be removed in impl file, after it will be saved.
        				
        				patientElectiveList.getTCIHistory().add(currentTCI);
    				}
    				
    				// Update the status for PatientElective
    				if (requiresNewTCI == true)
    				{
    					ElectiveListStatusVo requiresNewTCIStatus = new ElectiveListStatusVo();
    					
    					requiresNewTCIStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
    					requiresNewTCIStatus.setStatusDateTime(new DateTime());
    					requiresNewTCIStatus.setStatusComment(null);
    					requiresNewTCIStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
    					requiresNewTCIStatus.setRemovalReason(null);
    					requiresNewTCIStatus.setRemovalOtherReason(null);    					
    					
						patientElectiveList.setElectiveListStatus(requiresNewTCIStatus);
						patientElectiveList.getElectiveListStatusHistory().add(requiresNewTCIStatus);
    				}
    			}
			}

			
			String[] error = voBooking.validate();
    		if (error != null)
    		{
    			engine.showErrors(error);
    			return;
    		}
			
			try
			{
				domain.dnaAppt(voBooking, voCats, ActionRequestType.NOTIFY_DNA, patientElectiveList, isFirstApptActivityforDNA); //WDEV-18325
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			
			catch (DomainInterfaceException ex)
			{
				engine.showMessage(ex.getMessage());
			}
		}
	}
	
	private void cancel()
	{
		if(form.grdSlots().getValue() instanceof SessionSlotVo)
		{
			SessionSlotVo voSlot = (SessionSlotVo)form.grdSlots().getValue();
			
			form.getGlobalContext().Scheduling.setBookingActivity(voSlot.getActivity());
			if(voSlot.getAppointmentIsNotNull() && voSlot.getAppointment().getSessionIsNotNull())
			{
				form.getGlobalContext().Scheduling.setBookingSession(voSlot.getAppointment().getSession());
				form.getGlobalContext().Scheduling.setBookingService(voSlot.getAppointment().getSession().getService());
			}
			
			engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
		}
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if(!cancelAppt())
					return;
				
				//open book appointment (CARE_UK or BLACKPOOL)
				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
				{
					form.getGlobalContext().Core.setPatientShort(domain.getBookingPatient(((SessionSlotVo) form.grdSlots().getValue()).getAppointment()));
					engine.open(form.getForms().Scheduling.BookAppointment);
					return;
				}
				search();
				if(form.cmbSessions().getValue() != null)
					loadSlots();
					
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingAppointment(null);
				form.getGlobalContext().Scheduling.setBookingSession(null);
			}
		}
		else if(formName.equals(form.getForms().Scheduling.AppointmentOutcomeDialog))
		{
			if(result != null)
			{
				if(result.equals(DialogResult.OK))
				{
					search();
					if(form.cmbSessions().getValue() != null)
						loadSlots();
				}
				else if(result.equals(DialogResult.CANCEL))
					form.getGlobalContext().Scheduling.setBookingAppointmentRef(null);
			}
		}
		else
		{
			search();
			if(form.cmbSessions().getValue() != null)
				loadSlots();
		}
	}
	
	private boolean cancelAppt() 
	{
		SessionSlotVo voSessionSlot = form.getLocalContext().getSessionSlot();
		if(voSessionSlot == null)
			return false;
		
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
		{
			//appt status and status history
			// wdev-6034
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voSessionSlot.getAppointment().setCurrentStatusRecord(voApptStatus);  
			
			voSessionSlot.getAppointment().setApptStatus(Status_Reason.CANCELLED);
			voSessionSlot.getAppointment().setApptStatusHistory(getApptStatusHistory(voSessionSlot,Status_Reason.CANCELLED, voApptStatus));
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voSessionSlot.getAppointment().setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
					voSessionSlot.getAppointment().setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
			}
		}
		voSessionSlot.setStatus(Status_Reason.SLOTOPENED);
		
		String[] arrErrors = voSessionSlot.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try {
			form.getGlobalContext().Scheduling.setBookingAppointment(domain.cancelAppt(voSessionSlot.getAppointment(), ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Clinic List"));
		} catch (StaleObjectException e) {
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			search();
			if(form.cmbSessions().getValue() != null)
				loadSlots();
			return false;
		}
		
		return true;
	}

	/**
	 * @param status
	 * @param appointment
	 * @return
	 */
	private Appointment_StatusVoCollection getApptStatusHistory(SessionSlotVo voSessionSlot, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voSessionSlot.getAppointment().getAppointmentDate());
		voApptStatus.setApptTime(voSessionSlot.getStartTm());
		
		//if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		voApptStatus.setPriority(voSessionSlot.getPriority());
		SessionShortVo sessVo = form.cmbSessions().getValue();
		if (sessVo != null)
			voApptStatus.setPASClinic(sessVo.getPASClinic());
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voSessionSlot.getAppointment().getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
	
	protected void onCmbProfileValueChanged() throws PresentationLogicException
	{
		if(form.cmbProfile().getValue() != null && form.dteSessionDate().getValue() != null)
			search();
	}
	protected void onDteSessionDateValueChanged() throws PresentationLogicException
	{
		if(form.cmbProfile().getValue() != null && form.dteSessionDate().getValue() != null)
			search();
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		cancel();	
	}
	
	protected void onBtnDNAClick() throws PresentationLogicException
	{
		//dna();
		//loadSlots();
		dnaPatientMenuItem();	//WDEV-12215
	}

	protected void onBtnCancelSlotClick() throws PresentationLogicException
	{
		cancelSlot();
		loadSlots();
	}

	//WDEV-12568
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		//WDEV-12568
		if (form.getLocalContext().getMessageBoxDNAIsNotNull() && form.getLocalContext().getMessageBoxDNA().equals(messageBoxId))
		{
			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
					&& domain.hasTCI(domain.getAppointment((Session_SlotRefVo) form.grdSlots().getValue())))
			{
				if (DialogResult.YES.equals(result))
				{
					dna(true);
				}
				else if (DialogResult.NO.equals(result))
				{
					dna(false);
				}
			}
			else if (DialogResult.YES.equals(result))
			{
				dna(false);
			}	
		}

		search();
		if(form.cmbSessions().getValue() != null)
			loadSlots();
	}
}
