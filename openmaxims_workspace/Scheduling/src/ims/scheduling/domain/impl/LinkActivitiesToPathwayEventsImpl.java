//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.62 build 3117.21656)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;

import java.util.List;

import ims.core.vo.ActivityLiteVoCollection;
import ims.core.vo.domain.ActivityLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.scheduling.domain.LinkActivitiesToPathwayEvents;
import ims.scheduling.domain.base.impl.BaseLinkActivitiesToPathwayEventsImpl;
import ims.scheduling.domain.objects.ActivityStatusToPathwayEvent;
import ims.scheduling.vo.ActivityStatusToPathwayEventVo;
import ims.scheduling.vo.ActivityStatusToPathwayEventVoCollection;
import ims.scheduling.vo.domain.ActivityStatusToPathwayEventVoAssembler;

public class LinkActivitiesToPathwayEventsImpl extends BaseLinkActivitiesToPathwayEventsImpl
{

	private static final long serialVersionUID = 1L;

	public ims.scheduling.vo.ActivityStatusToPathwayEventVoCollection listActivitiesToPathwayEventsLinks()
	{
		ActivityStatusToPathwayEventVoCollection activityStatusToPathwayEvent = new ActivityStatusToPathwayEventVoCollection();
		DomainFactory factory = getDomainFactory();
		
		List activityToEvent = factory.find("from ActivityStatusToPathwayEvent as a1_1");
		
		activityStatusToPathwayEvent = ActivityStatusToPathwayEventVoAssembler.createActivityStatusToPathwayEventVoCollectionFromActivityStatusToPathwayEvent(activityToEvent);
		
		
		return activityStatusToPathwayEvent;
	}

	
	public ActivityLiteVoCollection listActivities()
	{
		ActivityLiteVoCollection activities = new ActivityLiteVoCollection(); 
		
		DomainFactory factory = getDomainFactory();
		
		List activityList = factory.find("from Activity");
		
		activities = ActivityLiteVoAssembler.createActivityLiteVoCollectionFromActivity(activityList);
		
		return activities;
		
	}

	
	public Boolean save(ActivityStatusToPathwayEventVo value) throws StaleObjectException  
	{
		ActivityStatusToPathwayEventVoCollection list = listActivitiesToPathwayEventsLinks();
		
		if(!value.isValidated())
			throw new DomainRuntimeException("Activity Status To Pathway Event Link is not validated");

			
		
		DomainFactory factory = getDomainFactory();
		
		ActivityStatusToPathwayEvent activityToPathway =ActivityStatusToPathwayEventVoAssembler.extractActivityStatusToPathwayEvent(factory, value);
		List duplicates ;
		
		if(value.getID_ActivityStatusToPathwayEventIsNotNull())
		{
			String hql = "from ActivityStatusToPathwayEvent where activity.id =:Activity and appointmentStatus.id =:AppointmentStatus  and event.id =:Event and id != :id and link.isRIE is null";
			duplicates = factory.find(hql,new String[]{"Activity","AppointmentStatus","Event","id"},new Object[]{value.getActivity().getID_Activity(),value.getAppointmentStatus().getID(),value.getEvent().getID_Event(),value.getID_ActivityStatusToPathwayEvent()}); 
			
		}
		else
		{
			String hql ="from ActivityStatusToPathwayEvent as link where activity.id =:Activity and appointmentStatus.id =:AppointmentStatus  and event.id =:Event and link.isRIE is null";
			duplicates = factory.find(hql,new String[]{"Activity","AppointmentStatus","Event"},new Object[]{value.getActivity().getID_Activity(),value.getAppointmentStatus().getID(),value.getEvent().getID_Event()});
		}
		
		if (duplicates != null && duplicates.size() > 0)
			return true;
			
		factory.save(activityToPathway);
		
		return false;
	}

	private boolean isUsed(ActivityStatusToPathwayEventVoCollection list, ActivityStatusToPathwayEventVo value)
	{
		int count = 0;
		
		for(int i = 0;i<list.size();i++)
		{
			if((list.get(i).getActivity().equals(value.getActivity()))&& (list.get(i).getAppointmentStatus().equals(value.getAppointmentStatus()))&& (list.get(i).getEvent().equals(value.getEvent())))
			{
				count ++;
			}
		}
		if(count>0)
			return true;
		
		
		return false;
	}
}
