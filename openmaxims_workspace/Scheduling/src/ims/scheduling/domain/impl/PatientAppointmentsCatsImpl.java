//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3084.20071)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;

import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ElectiveListStatus;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.ReferralEROD;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.domain.objects.TCIOutcomeForPatientElectiveList;
import ims.RefMan.vo.CatsReferralForTheatreListVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.domain.CatsReferralForTheatreListVoAssembler;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ERODStatus;
import ims.RefMan.vo.lookups.TCIStatusChangeReason;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffShortVoAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.pathways.domain.objects.PathwayClock;
import ims.pathways.domain.objects.PauseDetails;
import ims.scheduling.domain.PatientAppointmentManagement;
import ims.scheduling.domain.base.impl.BasePatientAppointmentsImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentShortVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionIntermediateVo;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.SessionServiceProcedureConsultantVo;
import ims.scheduling.vo.domain.Appointment_StatusVoAssembler;
import ims.scheduling.vo.domain.BookingAppointmentTheatreVoAssembler;
import ims.scheduling.vo.domain.Booking_AppointmentShortVoAssembler;
import ims.scheduling.vo.domain.SessionIntermediateVoAssembler;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class PatientAppointmentsCatsImpl extends BasePatientAppointmentsImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listBookingAppointmentByPatientAndDates
	*/
	public ims.scheduling.vo.Booking_AppointmentShortVoCollection listBookingAppointmentByPatientAndDates(ims.core.patient.vo.PatientRefVo patient, ims.framework.utils.Date apptFromDate, ims.framework.utils.Date appToDate)
	{
		if(patient == null || patient.getID_Patient() == null)
			throw new CodingRuntimeException("patient parameter is null or id not supplied in method listBookingAppointmentByPatientAndDates");
		
		if(apptFromDate == null || appToDate == null)
			throw new CodingRuntimeException("apptFromDate or appToDate parameter is null in method listBookingAppointmentByPatientAndDates");
		
		DomainFactory factory = getDomainFactory();
		List appts = factory.find("select bookingAppt from Sch_Booking as schBook left join schBook.appointments as bookingAppt where (schBook.patient.id = :idPatient " +
				"and bookingAppt.appointmentDate >= :fromDate and bookingAppt.appointmentDate <= :toDate) order by bookingAppt.appointmentDate asc, bookingAppt.apptStartTime", 
				new String[]{"idPatient","fromDate","toDate"}, new Object[]{patient.getID_Patient(), apptFromDate.getDate(),appToDate.getDate()});
		
		return Booking_AppointmentShortVoAssembler.createBooking_AppointmentShortVoCollectionFromBooking_Appointment(appts);
	}

	//Implemented for WDEV-12783
	public SessionServiceAndSlotActivityVo getServiceAndActivityByAppt(Booking_AppointmentRefVo appt, Boolean isFlexible)
	{
		PatientAppointmentManagement pamImpl = (PatientAppointmentManagement) getDomainImpl(PatientAppointmentMangementRefManImpl.class);
		return pamImpl.getServiceAndActivityByAppt(appt, isFlexible);
	}

	//Implemented for WDEV-12783
	public Booking_AppointmentVo saveBookingAppt(Booking_AppointmentShortVo appt) throws StaleObjectException
	{
		PatientAppointmentManagement pamImpl = (PatientAppointmentManagement) getDomainImpl(PatientAppointmentMangementRefManImpl.class);
		return pamImpl.saveBookingAppt(appt, false, false);
	}
	
	//Added for WDEV-12783
	public CatsReferralListVo getCatsReferralForAppointment(Booking_AppointmentRefVo appt)
	{
		PatientAppointmentManagement pamImpl = (PatientAppointmentManagement) getDomainImpl(PatientAppointmentMangementRefManImpl.class);
		return pamImpl.getCatsReferralForAppointment(appt);
	}

	//Added for WDEV-12783
	public void updateCatsReferralForCancelledAppt(CatsReferralRefVo catsRef) throws StaleObjectException
	{
		PatientAppointmentManagement pamImpl = (PatientAppointmentManagement) getDomainImpl(PatientAppointmentMangementRefManImpl.class);
		pamImpl.updateCatsReferralAdditionalInvStatus(catsRef);
		pamImpl.updateCatsReferralCancelStatus(catsRef);
		
	}

	//wdev-12783
	public SessionServiceProcedureConsultantVo getServiceProcedureConsultantByAppt(	Booking_AppointmentShortVo appt) 
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getServiceProcedureConsultantByAppt");
		
		SessionServiceProcedureConsultantVo voSpc = null;
		
		Booking_Appointment doAppt = (Booking_Appointment)getDomainFactory().getDomainObject(appt);
		if(doAppt != null)
		{
			ServiceLiteVo voService = ServiceLiteVoAssembler.create(doAppt.getSession() != null ? doAppt.getSession().getService() : null);
			ProcedureLiteVo voProc = ProcedureLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getProcedure() : null);
			HcpLiteVo voMos = HcpLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getConsultant() : null);
			
			voSpc = new SessionServiceProcedureConsultantVo();
			voSpc.setService(voService);
			voSpc.setProcedure(voProc);
			voSpc.setConsultant(voMos);
		}
		
		return voSpc;
	}

	//wdev-12783
	public SessionIntermediateVo getSession(Sch_SessionRefVo sessionRef) 
	{
		if(sessionRef == null || sessionRef.getID_Sch_Session() == null)
			return null;
		return SessionIntermediateVoAssembler.create((Sch_Session)getDomainFactory().getDomainObject(Sch_Session.class,sessionRef.getID_Sch_Session()));
		
	}

	//wdev-12783
	public BookingAppointmentTheatreVo getTheatreAppointment(Booking_AppointmentRefVo appt) 
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getTheatreAppointment");
		
		return BookingAppointmentTheatreVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(appt));
	}

	//WDEV-18006
	public Appointment_StatusVoCollection listAppointmentHistory(Booking_AppointmentRefVo appointment)
	{
		if (appointment == null)
			throw new CodingRuntimeException("Null appointment provided");
		if (!appointment.getID_Booking_AppointmentIsNotNull())
			throw new CodingRuntimeException("Appointment provided has a null ID");
		
		String hqlString = "select ah from Booking_Appointment as ba left join ba.apptStatusHistory as ah where	" +
				"(ba.id = :id) order by ah.systemInformation.creationDateTime desc"; 

		List<?> domObjs = getDomainFactory().find(hqlString,"id",appointment.getID_Booking_Appointment());
		if (domObjs == null || domObjs.size() == 0)
			return null;
		
		return Appointment_StatusVoAssembler.createAppointment_StatusVoCollectionFromAppointment_Status(domObjs);
	}

	public Boolean isReferralICPCompleted(CatsReferralRefVo catsReferral)
	{
		if (!ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue())
		{
			return false;
		}
		
		if (catsReferral == null || !catsReferral.getID_CatsReferralIsNotNull())
			return false;
		
		String hql = "select count(patICP.id) from PatientICP as patICP left join patICP.careContext as careC," +
				" CatsReferral as cats left join cats.careContext as catsCC " +
				"where (cats.id = :catsId and patICP.completedDateTime is not null and catsCC.id = careC.id)";
		
		long count = getDomainFactory().countWithHQL(hql,new String[]{"catsId"},new Object[]{catsReferral.getID_CatsReferral()});
		return count > 0;
	}

	public CatsReferralForTheatreListVo getCatsReferralStatus(Booking_AppointmentRefVo appointmentRef)
	{
		if (appointmentRef == null)
			return null;

		DomainFactory factory = getDomainFactory();
		List<?> lstCatsRef = factory.find("from CatsReferral catsRef where catsRef.appointments.id = '" + appointmentRef.getID_Booking_Appointment() + "'");

		if (lstCatsRef != null && lstCatsRef.size() > 0)
		{
			return CatsReferralForTheatreListVoAssembler.createCatsReferralForTheatreListVoCollectionFromCatsReferral(lstCatsRef).get(0);
		}
		return null;
	}

	public void cancelTCIAndReferralEROD(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo apptRef, Boolean isProviderCancellation,  Boolean isPatientCancellation) throws StaleObjectException //WDEV-18249
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method cancelReferralEROD");
		
		if(apptRef == null || apptRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("apptRef is null or id not provided in method getTheatreAppointment");
		
		Integer tciClock = null;
		
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);
		
		PatientElectiveList doPatientElectiveList = null;
		Boolean saveElectiveList = false;
		
		PathwayClock currentClock = null;
		if(doCatsReferral != null && doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
		{
			currentClock = doCatsReferral.getJourney().getCurrentClock();
		}
		
		if(currentClock != null)
		{
			String patientElectiveListQuery = "select electiveList from PatientElectiveList as electiveList left join electiveList.referral as cats left join electiveList.pathwayClock as pc where cats.id = :CatsId and pc.id = :PathwayClock";
			List<?> electiveList = factory.find(patientElectiveListQuery, new String[] {"CatsId", "PathwayClock"}, new Object[] {catsReferral.getID_CatsReferral(), currentClock.getId()});
			
			if(electiveList != null && electiveList.size() > 0 && electiveList.get(0) instanceof PatientElectiveList)
			{
				doPatientElectiveList = (PatientElectiveList) electiveList.get(0);	
			}
		}
	
		MemberOfStaff domainMOS = null;
		Object mosUser = getMosUser();
		
		if(mosUser instanceof MemberOfStaffShortVo)
		{
			domainMOS = MemberOfStaffShortVoAssembler.extractMemberOfStaff(factory,((MemberOfStaffShortVo) getMosUser()));
		}
		
		if(doPatientElectiveList != null)
		{
			ElectiveListStatus status = new ElectiveListStatus();
			status.setElectiveListStatus(getDomLookup(WaitingListStatus.REQUIRES_TCI));
			status.setAuthoringUser(domainMOS);
			status.setStatusDateTime(new Date());
			
			doPatientElectiveList.setElectiveListStatus(status);
			
			if(doPatientElectiveList.getElectiveListStatusHistory() == null)
				doPatientElectiveList.setElectiveListStatusHistory(new ArrayList());
			
			doPatientElectiveList.getElectiveListStatusHistory().add(status);
			
			TCIForPatientElectiveList doTCIDetails = doPatientElectiveList.getTCIDetails();
			
			if(doTCIDetails != null)
			{
    			doPatientElectiveList.setTCIDetails(null);
    			
    			TCIOutcomeForPatientElectiveList newOutcome = new TCIOutcomeForPatientElectiveList();
    			
    			//WDEV-18249
    			if (isPatientCancellation)
    			{
    				newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2));
    			}
    			else if (isProviderCancellation)
    			{
    				if(doTCIDetails.getTCIDate() != null && (new Date()).before(doTCIDetails.getTCIDate()))
    					newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6));
    				else
    					newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7));
    				
    				//WDEV-18416 
    				if(doPatientElectiveList.getPathwayClock() != null)
        				tciClock = doPatientElectiveList.getPathwayClock().getId();
    			}
    			
    			newOutcome.setChangeBy(domainMOS);
    			newOutcome.setStatusDateTime(new Date());
    			newOutcome.setOutcomeReason(getDomLookup(TCIStatusChangeReason.LINKEDTHEATREAPPTCANCELLED));
    			
    			doTCIDetails.setCurrentOutcome(newOutcome);
    			if(doTCIDetails.getOutcomeHistory() == null)
    				doTCIDetails.setOutcomeHistory(new ArrayList());
    			
    			doTCIDetails.getOutcomeHistory().add(newOutcome);
    			
    			if(doPatientElectiveList.getTCIHistory() == null)
    				doPatientElectiveList.setTCIHistory(new ArrayList());
    			
    			doPatientElectiveList.getTCIHistory().add(doTCIDetails);
			}
			
			saveElectiveList = true;
		}
	
		if(Boolean.TRUE.equals(isProviderCancellation))
		{
    		if(doCatsReferral.getElectiveEROD() == null)
    			return;
    		
    		ReferralEROD doErod = null;
    		ReferralEROD elEROD = null;
    		
    		for(int i=0; i<doCatsReferral.getElectiveEROD().size(); i++)
    		{
    			if(doCatsReferral.getElectiveEROD().get(i) instanceof ReferralEROD)
    			{
    				if(((ReferralEROD) doCatsReferral.getElectiveEROD().get(i)).getPathWayClock() != null && ((ReferralEROD) doCatsReferral.getElectiveEROD().get(i)).getPathWayClock().getId().equals(tciClock))
    				{
    					doErod = (ReferralEROD) doCatsReferral.getElectiveEROD().get(i);
    					doCatsReferral.getElectiveEROD().remove(i);
    					break;
    				}
    			}
    		}
    		
    		if(doErod != null)
    		{
    			doErod.setErodStatus(getDomLookup(ERODStatus.CANCELLED));
    		
    			if(doCatsReferral.getElectiveERODHistory() == null)
    				doCatsReferral.setElectiveERODHistory(new java.util.ArrayList());
    		
    			doCatsReferral.getElectiveERODHistory().add(doErod);
    			
    			if(doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null && doCatsReferral.getJourney().getCurrentClock().getCurrentPause() != null)
    			{
    				PauseDetails currentPause = doCatsReferral.getJourney().getCurrentClock().getCurrentPause();
    				
    				if(doCatsReferral.getJourney().getCurrentClock().getPauseDetails() != null)
    				{
    					for(int i=0; i<doCatsReferral.getJourney().getCurrentClock().getPauseDetails().size(); i++)
    					{
    						PauseDetails pause = (PauseDetails) doCatsReferral.getJourney().getCurrentClock().getPauseDetails().get(i);
    						if(currentPause.equals(pause) && Boolean.TRUE.equals(pause.isActive()))
    						{
    							doCatsReferral.getJourney().getCurrentClock().getPauseDetails().remove(i);
    							break;
    						}
    					}
    				}
    				
    				currentPause.setActive(false);
    				doCatsReferral.getJourney().getCurrentClock().getPauseDetails().add(currentPause);
    			}
    		
    			factory.save(doCatsReferral);
    		}
    		
    		//WDEV-18455 
    		if (doPatientElectiveList != null && doPatientElectiveList.getEROD() != null && doPatientElectiveList.getEROD() instanceof ReferralEROD && doPatientElectiveList.getEROD().getPathWayClock().getId().equals(tciClock))
    		{
    			elEROD = (ReferralEROD) doPatientElectiveList.getEROD();
    			doPatientElectiveList.setEROD(null);
    			saveElectiveList = true;
    		}
    		
    		if (elEROD != null)
    		{
    			elEROD.setErodStatus(getDomLookup(ERODStatus.CANCELLED));
    			doPatientElectiveList.getERODHistory().add(elEROD);
    		}
		}
		
		if(saveElectiveList)
			factory.save(doPatientElectiveList);
	}

}
