//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3085.19074)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;

import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralforElectiveListDetailsVo;
import ims.RefMan.vo.PatientElectiveListForCancelAppointmentVo;
import ims.RefMan.vo.domain.CatsReferralforElectiveListDetailsVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListForCancelAppointmentVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.AppointmentOutcomeDialog;
import ims.scheduling.domain.base.impl.BaseCancelAppointmentDialogImpl;
import ims.scheduling.domain.objects.Sch_Profile;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Sch_ProfileGenericVo;
import ims.scheduling.vo.domain.Sch_ProfileGenericVoAssembler;
import ims.scheduling.vo.lookups.CancelAppointmentReasonCollection;

import java.util.Iterator;
import java.util.List;

public class CancelAppointmentDialogImpl extends BaseCancelAppointmentDialogImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listCancellationReasonByType
	*/
	public ims.scheduling.vo.lookups.CancelAppointmentReasonCollection listCancellationReasonByType(ims.scheduling.vo.lookups.Status_Reason type)
	{
		if(type == null)
			throw new CodingRuntimeException("type is null in method listCancellationReasonByType");
		
		DomainFactory factory = getDomainFactory();
		
		String hql = "select cr.cancellationReason from CancellationTypeReason as cr where cr.cancellationType = :cancelType";
		List cancelReasons = factory.find(hql, new String[]{"cancelType"}, new Object[]{getDomLookup(type)});
		
		return  createLookupCollection(cancelReasons);
	}

	private CancelAppointmentReasonCollection createLookupCollection(List cancelReasons)
	{
		CancelAppointmentReasonCollection collReasons = new CancelAppointmentReasonCollection();
		Iterator it = cancelReasons.iterator();
		while(it.hasNext())
		{
			LookupInstance doReasonInst = (LookupInstance) it.next();
			ims.framework.utils.ImagePath img = null;
			ims.framework.utils.Color color = null;		
			img = null;
			if (doReasonInst.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(doReasonInst.getImage().getImageId(), doReasonInst.getImage().getImagePath());
			}
			color = doReasonInst.getColor();
			if (color != null) 
				color.getValue();

			ims.scheduling.vo.lookups.CancelAppointmentReason cancelReasonInst = new ims.scheduling.vo.lookups.CancelAppointmentReason(doReasonInst.getId(),doReasonInst.getText(), doReasonInst.isActive(), null, img, color);
			collReasons.add(cancelReasonInst);
		}

		return collReasons;
	}

	public Boolean isReferralICPCompleted(Booking_AppointmentRefVo bookingAppt)
	{
		if (bookingAppt==null || !bookingAppt.getID_Booking_AppointmentIsNotNull())
			return false;
		String hql = "select count(patICP.id) from PatientICP as patICP left join patICP.appointments as apps where (apps.id = :bookId and patICP.completedDateTime is not null )";
		long count = getDomainFactory().countWithHQL(hql,new String[]{"bookId"},new Object[]{bookingAppt.getID_Booking_Appointment()});
		return count > 0;
	}

	//wdev-18419
	public CatsReferralforElectiveListDetailsVo getCatsReferral(CatsReferralRefVo catsRef)
	{
		if( catsRef == null )
			return null;
		DomainFactory factory = getDomainFactory();
		
		CatsReferral domCatsReferral = (CatsReferral)factory.getDomainObject(CatsReferral.class, catsRef.getID_CatsReferral());
		return CatsReferralforElectiveListDetailsVoAssembler.create(domCatsReferral);
	}

	//wdev-18419
	public PatientElectiveListForCancelAppointmentVo getPatientElectiveList(CatsReferralforElectiveListDetailsVo catsReferral)
	{
		if( catsReferral == null || !catsReferral.getJourneyIsNotNull() || !catsReferral.getJourney().getCurrentClockIsNotNull())
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String patientElectiveListQuery = "select electiveList from PatientElectiveList as electiveList left join electiveList.referral as cats left join electiveList.pathwayClock as pc where cats.id = :CatsId and pc.id = :PathwayClock";
		List<?> electiveList = factory.find(patientElectiveListQuery, new String[] {"CatsId", "PathwayClock"}, new Object[] {catsReferral.getID_CatsReferral(), catsReferral.getJourney().getCurrentClock().getID_PathwayClock()});
		
		if( electiveList != null && electiveList.size() > 0 && electiveList.get(0) instanceof PatientElectiveList)
		{
			return PatientElectiveListForCancelAppointmentVoAssembler.create((PatientElectiveList)electiveList.get(0));	
		}
		
		return null;
	}

}
