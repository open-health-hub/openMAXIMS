//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3110.16630)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.admin.vo.ReportListVo;
import ims.admin.vo.ReportTemplateLiteVoCollection;
import ims.admin.vo.domain.ReportListVoAssembler;
import ims.admin.vo.domain.ReportTemplateLiteVoAssembler;
import ims.core.admin.domain.objects.ReportBo;
import ims.core.admin.vo.ReportBoRefVo;
import ims.core.domain.Reports;
import ims.core.domain.impl.ReportsImpl;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.base.impl.BasePrintAppointmentImpl;

public class PrintAppointmentImpl extends BasePrintAppointmentImpl
{

	private static final long serialVersionUID = 1L;
	
	/**
	* getReportAndTemplate
	*/
	public String[] getReportAndTemplate(Integer nReportId, Integer nTemplateId) throws ims.domain.exceptions.DomainInterfaceException
	{
		Reports impl = (Reports) getDomainImpl(ReportsImpl.class);
		return impl.getReportAndTemplate(nReportId, nTemplateId);	
	}


	public ReportListVo getReport(ReportBoRefVo voRef)
	{
		DomainFactory factory = getDomainFactory();
		
		ReportBo dom = (ReportBo)factory.getDomainObject(ReportBo.class, voRef.getID_ReportBo());
		ReportListVo vo = ReportListVoAssembler.create(dom);
		
		return vo;
	}
	
	public ReportTemplateLiteVoCollection getTemplates(ArrayList ids)
	{
		if (ids == null)
			throw new CodingRuntimeException("Mandatory argument - ids");
					
		DomainFactory factory = getDomainFactory();	
		String hql ="select profile.id from Booking_Appointment as ba left join ba.session as sess left join sess.sch_Profile as profile where ba.id in ( ";
		
		for (int i = 0; i < ids.size(); i++)
		{
			if (i == 0 || i == ids.size())
				hql+=ids.get(0);
			else
				hql+=("," + ids.get(i));
		}
		hql += " )";		
		hql +=" and ba.isRIE is null and sess.isRIE is null and profile.isRIE is null";
		
		String finalHQL = "select pt.template from ProfileTemplate as pt left join pt.template as temp left join pt.profile as prof where prof.id in ( ";
		finalHQL += hql;
		finalHQL += " )";		
		finalHQL +=" and pt.isRIE is null and temp.isRIE is null and prof.isRIE is null";
				
		List lst = factory.find(finalHQL);
		
		return ReportTemplateLiteVoAssembler.createReportTemplateLiteVoCollectionFromTemplateBo(lst);
	}
}
