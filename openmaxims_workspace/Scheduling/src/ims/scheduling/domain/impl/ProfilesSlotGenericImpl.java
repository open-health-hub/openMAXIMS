//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.35 build 2095.22336)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;

import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.ActivityVoCollection;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.domain.ActivityVoAssembler;
import ims.core.vo.domain.ServiceFunctionLiteVoAssembler;
import ims.core.vo.lookups.ActivityType;
import ims.domain.DomainFactory;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.vo.DirectoryofServiceRefVoCollection;

import java.util.List;

public class ProfilesSlotGenericImpl extends DomainImpl implements ims.scheduling.domain.ProfilesSlotGeneric, ims.domain.impl.Transactional
{
	/**
	* listActivities
	*/
	public ActivityVoCollection listActivities() 
	{	
		DomainFactory factory = getDomainFactory();
		// For profile Slot, we want to list
		// all activities for appointment activity type
		String hql = " from Activity act where act.activityType.id = :activityType and act.isActive = :active";
		List lst = factory.find(hql, new String[]{"activityType", "active"}, new Object[]{new Integer(ActivityType.APPOINTMENTTYPES.getId()), Boolean.TRUE});
		return (ActivityVoAssembler.createActivityVoCollectionFromActivity(lst));
	}

	public ServiceFunctionLiteVoCollection listServiceFunctionByDOSs(DirectoryofServiceRefVoCollection dosColl)
	{
		if(dosColl == null)
			throw new CodingRuntimeException("dosColl parameter is null in method listServiceFunctionByDOSs");
		
		DomainFactory factory = getDomainFactory();
		List servFuncs = factory.find("select dos.functions from DirectoryofService as dos where dos.id in (" + getIdString(dosColl) + ")");
		return ServiceFunctionLiteVoAssembler.createServiceFunctionLiteVoCollectionFromServiceFunction(servFuncs);
	}

	public ServiceFunctionLiteVoCollection listServiceFunctionByService(ServiceRefVo service)
	{
		if(service == null || service.getID_Service() == null)
			throw new CodingRuntimeException("service parameter is null or id not provided in method listServiceFunctionByService");
		
		DomainFactory factory = getDomainFactory();
		List servFuncs = factory.find("from ServiceFunction as servFunc where servFunc.service.id = :idService",new String[]{"idService"}, new Object[]{service.getID_Service()});
		return ServiceFunctionLiteVoAssembler.createServiceFunctionLiteVoCollectionFromServiceFunction(servFuncs);
	}
	
	private String getIdString(DirectoryofServiceRefVoCollection dosColl)
	{
		if(dosColl == null)
			throw new CodingRuntimeException("dosColl is null in method getIdString");
			
		String idString = "";
		
		for(int i=0;i<dosColl.size();i++)
		{
			idString += dosColl.get(i).getID_DirectoryofService();
			idString += ((dosColl.size() - (i+1)) > 0 ? "," : "");
		}
		
		return idString;
	}
}
