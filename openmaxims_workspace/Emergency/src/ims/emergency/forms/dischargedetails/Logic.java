//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.dischargedetails;

import ims.clinical.configuration.vo.ClinicalProblemRefVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.emergency.vo.enums.DischargeDetails_CustomEvents;
import ims.framework.LayerBridge;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public void setValue(CareContextRefVo careContext, ClinicalProblemRefVo clinicalProblem)
	{
		form.lyrMain().tabAdviceTransport().ccAdvice().setValue(clinicalProblem, careContext);
		form.lyrMain().tabOutcome().ccOutcome().setValue(careContext);
	}

	public void setReadOnly(Boolean readOnly)
	{
		form.getLocalContext().setReadOnly(readOnly);
		
		form.lyrMain().tabAdviceTransport().ccAdvice().setReadOnly(readOnly);
		form.lyrMain().tabOutcome().ccOutcome().setReadOnly(readOnly);
	}
	
	
	public DischargeDetails_CustomEvents getCustomEvent()
	{
		return form.getLocalContext().getCustomEvent();
	}


	public void clearCustomEvent()
	{
		form.getLocalContext().setCustomEvent(null);
		
		form.lyrMain().tabAdviceTransport().ccAdvice().clearCustomEvent();
		form.lyrMain().tabOutcome().ccOutcome().clearCustomEvent();
	}

	public Boolean getRecordedDischarge()
	{
		return form.lyrMain().tabOutcome().ccOutcome().getRecordedDischarge();
	}

	
	
	@Override
	protected void onlyrMainTabChanged(LayerBridge tab)
	{
		if (form.lyrMain().tabAdviceTransport().equals(tab))
		{
			form.lyrMain().tabAdviceTransport().ccAdvice().setReadOnly(form.getLocalContext().getReadOnly());
		}
		else if (form.lyrMain().tabOutcome().equals(tab))
		{
			form.lyrMain().tabOutcome().ccOutcome().setReadOnly(form.getLocalContext().getReadOnly());
		}		
	}


	
	
	@Override
	protected void onCcAdviceValueChanged() throws PresentationLogicException
	{
		if (DischargeDetails_CustomEvents.FORMMODECHANGED.equals(form.lyrMain().tabAdviceTransport().ccAdvice().getCustomEvent()))
		{
			form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.FORMMODECHANGED);
			
			form.setMode(form.lyrMain().tabAdviceTransport().ccAdvice().getMode());

			updateControlsState();

			form.fireCustomControlValueChanged();
		}
		
		form.lyrMain().tabAdviceTransport().ccAdvice().clearCustomEvent();
	}

	@Override
	protected void onCcOutcomeValueChanged() throws PresentationLogicException
	{
		if (DischargeDetails_CustomEvents.FORMMODECHANGED.equals(form.lyrMain().tabOutcome().ccOutcome().getCustomEvent()))
		{
			form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.FORMMODECHANGED);
			
			form.setMode(form.lyrMain().tabOutcome().ccOutcome().getMode());

			updateControlsState();

			form.fireCustomControlValueChanged();
		}
		
		form.lyrMain().tabOutcome().ccOutcome().clearCustomEvent();
	}


	private void updateControlsState()
	{
		form.lyrMain().tabAdviceTransport().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrMain().tabOutcome().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrMain().tabCoding().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
	}
}
