//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edreferraltospecialtydialog;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.edreferraltospecialtydialog.GenForm.grdNotesRow;
import ims.emergency.vo.AttendanceClinicalNotesVo;
import ims.emergency.vo.AttendanceClinicalNotesVoCollection;
import ims.emergency.vo.ReferralToSpecialtyTeamVo;
import ims.emergency.vo.ReferralToSpecialtyTeamVoCollection;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingForReferalToSpecialtyVo;
import ims.emergency.vo.enums.EDReferralToSpecialtyEvent;
import ims.emergency.vo.lookups.AttendanceClinicalNoteType;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String EDIT_CAPTION = "Edit Note";
	private static final String CORRECT_CAPTION = "Correct Note";

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		form.btnCompleted().setVisible(false);//hidden for STHK
		
		boolean noteWasCreatedByCurrentUser = form.grdNotes().getValue()!=null && form.grdNotes().getValue().getAuthoringInformation()!=null && form.grdNotes().getValue().getAuthoringInformation().getAuthoringHcp()!=null && form.grdNotes().getValue().getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getLoggedHCP()); ////WDEV-17304
		
		ReferralToSpecialtyTeamVo selectedReferralToSpecialty = form.getLocalContext().getSelectedReferralToSpecialty();
		Boolean notAccepted = (selectedReferralToSpecialty!=null ? selectedReferralToSpecialty.getNotAccepted():null);
		form.imbAdd().setVisible(false);
		form.imbEdit().setVisible(false);
		
		form.btnNewReferral().setVisible(FormMode.VIEW.equals(form.getMode()));
		//form.btnNewReferral().setEnabled(domain.isNewEnabled(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()));
		form.btnNewReferral().setEnabled(FormMode.VIEW.equals(form.getMode()));
		
		form.ccRefferedBy().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.dtimReffered().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.cmbSpecialty().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.cmbConsultantTeam().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.ccRefferedBy().isRequired(FormMode.EDIT.equals(form.getMode()));
		form.dtimReffered().setRequired(FormMode.EDIT.equals(form.getMode()));
		form.cmbSpecialty().setRequired(FormMode.EDIT.equals(form.getMode()));
		
		form.btnSeen().setEnabled(FormMode.VIEW.equals(form.getMode()) && selectedReferralToSpecialty!=null && form.dtimSeen().getValue()==null && form.dtimCompletion().getValue()==null && !Boolean.TRUE.equals(notAccepted));
		
		form.dtimCompletion().setEnabled(FormMode.EDIT.equals(form.getMode()) && selectedReferralToSpecialty!=null && selectedReferralToSpecialty.getCompletionDateTimeIsNotNull());//WDEV-17411
		form.dtimCompletion().setRequired(FormMode.EDIT.equals(form.getMode()) && selectedReferralToSpecialty!=null && selectedReferralToSpecialty.getCompletionDateTimeIsNotNull());//WDEV-17411
		
		form.dtimSeen().setEnabled(FormMode.EDIT.equals(form.getMode()) && selectedReferralToSpecialty!=null && selectedReferralToSpecialty.getSeenDateTimeIsNotNull());//WDEV-17411
		form.dtimSeen().setRequired(FormMode.EDIT.equals(form.getMode()) && selectedReferralToSpecialty!=null && selectedReferralToSpecialty.getSeenDateTimeIsNotNull());//WDEV-17411
		
		form.btnNotAccepted().setEnabled(FormMode.VIEW.equals(form.getMode()) && selectedReferralToSpecialty!=null && form.dtimSeen().getValue()==null && form.dtimCompletion().getValue()==null && !Boolean.TRUE.equals(notAccepted));
		form.btnCompleted().setEnabled(FormMode.VIEW.equals(form.getMode()) && selectedReferralToSpecialty!=null && form.dtimSeen().getValue()!=null && form.dtimCompletion().getValue()==null && !Boolean.TRUE.equals(notAccepted));
		form.btnAdmission().setEnabled(FormMode.VIEW.equals(form.getMode()) && selectedReferralToSpecialty!=null && form.dtimSeen().getValue()!=null && form.dtimCompletion().getValue()==null && !Boolean.TRUE.equals(notAccepted) && engine.hasRight(AppRight.ED_CAN_PERFORM_ADMISSION) && !Boolean.TRUE.equals(form.getGlobalContext().Core.getPatientShort().getIsQuickRegistrationPatient()));//WDEV-17112
		form.btnTransfer().setEnabled(FormMode.VIEW.equals(form.getMode()) && selectedReferralToSpecialty!=null && form.dtimSeen().getValue()!=null && form.dtimCompletion().getValue()==null && !Boolean.TRUE.equals(notAccepted) && engine.hasRight(AppRight.ED_CAN_PERFORM_TRANSFER));
		form.btnDischarge().setEnabled(FormMode.VIEW.equals(form.getMode()) && selectedReferralToSpecialty!=null && form.dtimSeen().getValue()!=null && form.dtimCompletion().getValue()==null && !Boolean.TRUE.equals(notAccepted) && !TrackingStatus.TO_BE_DISCHARGED.equals(form.getLocalContext().getTrackingForReferral().getCurrentStatus().getStatus()));
		
		form.btnNewNote().setEnabled(!(selectedReferralToSpecialty==null && FormMode.VIEW.equals(form.getMode())));
		form.imbAdd().setEnabled(!(selectedReferralToSpecialty==null && FormMode.VIEW.equals(form.getMode())));
		form.getContextMenus().Emergency.getReferralToSpecTeamAddItem().setVisible(!(selectedReferralToSpecialty==null && FormMode.VIEW.equals(form.getMode())));
		
		form.btnEditNote().setVisible(form.grdNotes().getValue()!=null);
		
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.btnEditNote().setEnabled(form.grdNotes().getValue()!=null && form.grdNotes().getValue().getID_AttendanceClinicalNotes() == null);
		}
		else
		{
			form.btnEditNote().setEnabled(form.grdNotes().getValue()!=null && !Boolean.TRUE.equals(form.grdNotes().getValue().getIsCorrected()) && noteWasCreatedByCurrentUser);//WDEV-17304
		}
		
		form.getContextMenus().Emergency.getReferralToSpecTeamEditItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdNotes().getValue()!=null && form.grdNotes().getValue().getID_AttendanceClinicalNotes() == null);
		form.getContextMenus().Emergency.getReferralToSpecTeamCORRECTItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdNotes().getValue()!=null && !Boolean.TRUE.equals(form.grdNotes().getValue().getIsCorrected()) && noteWasCreatedByCurrentUser);//WDEV-17304
		
		form.btnEditNote().setText(getEditCorrectButtonText(form.grdNotes().getValue()));
		
		form.imbEdit().setEnabled(form.grdNotes().getValue()!=null );
	
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && selectedReferralToSpecialty!=null);
		form.btnSave().setVisible(FormMode.EDIT.equals(form.getMode()) && EDReferralToSpecialtyEvent.EDIT.equals(form.getLocalContext().getSelectedEvent()));
		form.btnSaveAndClose().setVisible(FormMode.EDIT.equals(form.getMode()) && !EDReferralToSpecialtyEvent.EDIT.equals(form.getLocalContext().getSelectedEvent()));
		
		//set Buttons Colour
		if (form.btnNewReferral().isEnabled())
		{
			form.btnNewReferral().setBackgroundColor(Color.LightGreen);	
		}
		else
		{
			form.btnNewReferral().clearBackgroundColor();
		}
		
		if (form.btnSeen().isEnabled() && selectedReferralToSpecialty!=null && form.dtimSeen().getValue()==null )
		{
			form.btnSeen().setBackgroundColor(Color.LightYellow );//WDEV-17112	
		}
		else
		{
			form.btnSeen().clearBackgroundColor();
		}
		
		if (form.btnNotAccepted().isEnabled() && selectedReferralToSpecialty!=null && form.dtimSeen().getValue()==null )
		{
			form.btnNotAccepted().setBackgroundColor(Color.NavajoWhite );//WDEV-17112
		}
		else
		{
			form.btnNotAccepted().clearBackgroundColor();
		}
		
		if (form.btnCompleted().isEnabled() && selectedReferralToSpecialty!=null &&  form.dtimSeen().getValue()!=null && selectedReferralToSpecialty.getCompletionDateTime()==null && !Boolean.TRUE.equals(notAccepted) )
		{
    		form.btnCompleted().setBackgroundColor(Color.Coral);//WDEV-17112
		}	
		else
		{
			form.btnCompleted().clearBackgroundColor();
		}
		
		if (form.btnAdmission().isEnabled() && selectedReferralToSpecialty!=null &&  form.dtimSeen().getValue()!=null && selectedReferralToSpecialty.getCompletionDateTime()==null && !Boolean.TRUE.equals(notAccepted) )
		{	
    		form.btnAdmission().setBackgroundColor(Color.SkyBlue);//WDEV-17112
		}	
		else
		{
			form.btnAdmission().clearBackgroundColor();
		}
		
		if (form.btnTransfer().isEnabled() && selectedReferralToSpecialty!=null &&  form.dtimSeen().getValue()!=null && selectedReferralToSpecialty.getCompletionDateTime()==null && !Boolean.TRUE.equals(notAccepted) )
		{	
			form.btnTransfer().setBackgroundColor(Color.Aqua);//WDEV-17112
		}	
		else
		{
			form.btnTransfer().clearBackgroundColor();
		}
		
		if (form.btnDischarge().isEnabled() && selectedReferralToSpecialty!=null &&  form.dtimSeen().getValue()!=null && selectedReferralToSpecialty.getCompletionDateTime()==null && !Boolean.TRUE.equals(notAccepted) )
		{	
			form.btnDischarge().setBackgroundColor(Color.DarkOrange);//WDEV-17112
		}	
		else
		{
			form.btnDischarge().clearBackgroundColor();
		}
		
		
	}
	private String getEditCorrectButtonText(AttendanceClinicalNotesVo note) 
	{
		if(note == null)
			return FormMode.EDIT.equals(form.getMode()) ? EDIT_CAPTION : CORRECT_CAPTION;
		
		if(note.getID_AttendanceClinicalNotes() == null)
			return EDIT_CAPTION;
		
		return CORRECT_CAPTION;
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-17304
		Object hcp = domain.getHcpLiteUser();
		if (hcp !=null && hcp instanceof HcpLiteVo)
		{
			form.getLocalContext().setLoggedHCP((HcpRefVo) hcp);
		}
		
		initializeControls();
		form.getLocalContext().setTrackingForReferral(domain.getTrackingForReferral(form.getGlobalContext().Emergency.getTracking()));
		open();
		
		if(form.getLocalContext().getSelectedReferralToSpecialty() == null || form.getLocalContext().getSelectedReferralToSpecialty().getCompletionDateTimeIsNotNull() || Boolean.TRUE.equals(form.getLocalContext().getSelectedReferralToSpecialty().getNotAccepted()))
		{
			newInstance();
		}
	}
	
	private void initializeControls()
	{
		form.ccRefferedBy().initialize(MosType.HCP);
		populateSpecialtyCombo();//WDEV-17641
	}
	
	//WDEV-17641
	private void populateSpecialtyCombo()
	{
		form.cmbSpecialty().clear();
		
		SpecialtyCollection lookupCollection =domain.listSpecialties();
		
		if( lookupCollection != null && lookupCollection.size() > 0)
		{
			for( int i = 0; i < lookupCollection.size(); i++)
			{
				if( lookupCollection.get(i).isActive() == true ) 
				{	
					form.cmbSpecialty().newRow(lookupCollection.get(i), lookupCollection.get(i).getText(), lookupCollection.get(i).getImage(), lookupCollection.get(i).getTextColor());
					
				}
			}
			
		}
	}

	private void newInstance()
	{
		clearInstanceControls();
		form.recbrReferralsForAttendance().clear();//WDEV-17340
		
		form.getLocalContext().setSelectedReferralToSpecialty(null);
		
		Object mos = domain.getHcpLiteUser();

		if (mos instanceof HcpLiteVo)
		{
			form.ccRefferedBy().setValue((HcpLiteVo) mos);
		}

		form.dtimReffered().setValue(new DateTime());

		form.setMode(FormMode.EDIT);
	}

	private void clearInstanceControls()
	{
		form.dtimReffered().setValue(null);
		form.cmbConsultantTeam().setValue(null);
		form.cmbSpecialty().setValue(null);
		form.dtimCompletion().setValue(null);
		form.dtimSeen().setValue(null);
		form.grdNotes().getRows().clear();
		form.ccRefferedBy().clear();
		form.getLocalContext().setSelectedComment(null);
	}

	private void open()
	{
		form.getLocalContext().setTrackingForReferral(domain.getTrackingForReferral(form.getLocalContext().getTrackingForReferral()));
		form.getLocalContext().setSelectedEvent(null);
		populateScreenFromData();
		form.setMode(FormMode.VIEW);
	}

	private void populateScreenFromData()
	{
		populateRecordBrowser();
		form.getLocalContext().setSelectedReferralToSpecialty(form.getLocalContext().getSelectedReferralToSpecialty()!=null ? domain.getReferralToSpecialty(form.getLocalContext().getSelectedReferralToSpecialty()) : null);
		populateInstanceControls(form.getLocalContext().getSelectedReferralToSpecialty());
	}

	private void populateInstanceControls(ReferralToSpecialtyTeamVo voReferralToSpecialty)
	{
		clearInstanceControls();
		
		if (voReferralToSpecialty==null)
			return;
		
		form.ccRefferedBy().setValue(voReferralToSpecialty.getReferredBy());
		form.dtimReffered().setValue(voReferralToSpecialty.getReferredDateTime());
		form.cmbConsultantTeam().setValue(voReferralToSpecialty.getTeamConsultant());
		form.cmbSpecialty().setValue(voReferralToSpecialty.getSpecialty());
		form.dtimSeen().setValue(voReferralToSpecialty.getSeenDateTime());
		form.dtimCompletion().setValue(voReferralToSpecialty.getCompletionDateTime());

		populateCommentGrid(voReferralToSpecialty.getComments());
	}

	private void populateCommentGrid(AttendanceClinicalNotesVoCollection comments)
	{
		if (comments == null)
			return;

		comments.sort(new CommentsDateComparator(SortOrder.DESCENDING));
		
		for (int i = 0; i < comments.size(); i++)
		{
			addRowToNotesGrid(comments.get(i));
		}
	}

	private void addRowToNotesGrid(AttendanceClinicalNotesVo attClinicalNote)
	{
		if (attClinicalNote==null)
			return;
		
		StringBuffer tooltip = new StringBuffer();
		
		grdNotesRow newrow = form.grdNotes().getRows().newRow();
		
		if (Boolean.TRUE.equals(attClinicalNote.getIsCorrected()))
		{
			newrow.setBackColor(ConfigFlag.UI.CORRECTION_ROW_COLOUR.getValue());
			
			if(attClinicalNote.getCorrectedAuthoringInformation() != null)
			{
				tooltip.append("<br><b>Correction HCP: </b>" + attClinicalNote.getCorrectedAuthoringInformation().getAuthoringHcp());
				tooltip.append("<br><b>Corrected Date/Time: </b>" + attClinicalNote.getCorrectedAuthoringInformation().getAuthoringDateTime());
				tooltip.append(attClinicalNote.getCorrectionCommentsIsNotNull() ? "<br><b>Correction comments: </b>" + attClinicalNote.getCorrectionComments(): "<br><b>No Comments</b>");
			}
		}

		if(attClinicalNote.getAuthoringInformation().getAuthoringHcp() != null)
		{
			newrow.setcolAuthoringHCP(Boolean.TRUE.equals(attClinicalNote.getIsCorrected()) ? "<s>" + attClinicalNote.getAuthoringInformation().getAuthoringHcp().toString().toString() + "</s>" : attClinicalNote.getAuthoringInformation().getAuthoringHcp().toString());
			newrow.setCellcolAuthoringHCPTooltip(attClinicalNote.getAuthoringInformation().getAuthoringHcp().toString() + tooltip.toString());
		}
		
		if(attClinicalNote.getAuthoringInformation().getAuthoringDateTime() != null)
		{
			newrow.setcolDate(Boolean.TRUE.equals(attClinicalNote.getIsCorrected()) ? "<s>" + attClinicalNote.getAuthoringInformation().getAuthoringDateTime().toString() + "</s>" : attClinicalNote.getAuthoringInformation().getAuthoringDateTime().toString());
			newrow.setCellcolDateTooltip(attClinicalNote.getAuthoringInformation().getAuthoringDateTime().toString() + tooltip.toString());
		}
		
		newrow.setcolComments(Boolean.TRUE.equals(attClinicalNote.getIsCorrected()) ? "<s>" + attClinicalNote.getClinicalNote() + "</s>" : attClinicalNote.getClinicalNote());
		newrow.setCellcolCommentsTooltip(attClinicalNote.getClinicalNote() + tooltip.toString());
		
		newrow.setValue(attClinicalNote);
	}

	private void populateRecordBrowser()
	{
		ReferralToSpecialtyTeamVoCollection allReferralsToSpec = domain.getAllReferralsToSpec(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext());

		form.recbrReferralsForAttendance().clear();

		if (allReferralsToSpec == null || allReferralsToSpec.size() == 0)
		{
			return;
		}

		for (int i = 0; i < allReferralsToSpec.size(); i++)
		{
			ReferralToSpecialtyTeamVo ReferralToSpec = allReferralsToSpec.get(i);

			if (ReferralToSpec == null)
				return;

			StringBuffer text = new StringBuffer();

			if (ReferralToSpec.getReferredDateTimeIsNotNull())
			{
				text.append("Date Time Referred: " + ReferralToSpec.getReferredDateTime().toString());
			}
	
			if (ReferralToSpec.getReferredBy()!=null && ReferralToSpec.getReferredBy().getName()!=null)
			{
				text.append(" - ");
				text.append(ReferralToSpec.getReferredBy().getName());
			}

			if (ReferralToSpec.getCompletionDateTimeIsNotNull())
			{
				text.append(" - ");
				text.append("Completed Date Time: " + ReferralToSpec.getCompletionDateTime());
			}
			
			//WDEV-17236
			if (i==0)
			{
				form.recbrReferralsForAttendance().newRow(i, ReferralToSpec, text.toString(),Color.Green);
			}
			else 
			{
				form.recbrReferralsForAttendance().newRow(i, ReferralToSpec, text.toString());
			}
		}

		if (allReferralsToSpec.size() > 0 && form.getLocalContext().getSelectedReferralToSpecialty() == null)
		{
			form.getLocalContext().setSelectedReferralToSpecialty(allReferralsToSpec.get(0));
		}

		form.recbrReferralsForAttendance().setValue(form.getLocalContext().getSelectedReferralToSpecialty());
			
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if ((form.getForms().Emergency.AttendanceClinicalNoteDialog.equals(formName) || form.getForms().Emergency.NoteCorrectionDialog.equals(formName))&& FormMode.VIEW.equals(form.getMode()))
		{
			open();
			form.grdNotes().setValue(form.getGlobalContext().Emergency.getAttendanceClinicalNotes());
			updateControlsState();
		}
		else if (form.getForms().Emergency.AttendanceClinicalNoteDialog.equals(formName) && DialogResult.OK.equals(result) && FormMode.EDIT.equals(form.getMode())) 
		{
			if (form.grdNotes().getValue() != null)
			{
				updateRowToNotesGrid(form.getGlobalContext().Emergency.getAttendanceClinicalNotes());
			}
			else
			{
				addRowToNotesGrid(form.getGlobalContext().Emergency.getAttendanceClinicalNotes());
				form.grdNotes().setValue(form.getGlobalContext().Emergency.getAttendanceClinicalNotes());
			}
			updateControlsState();
		}
		else if (form.getForms().Emergency.EDDecisionToAdmitDialog.equals(formName) ) 
		{
			/*
			if (DialogResult.OK.equals(result))
			{
				if (save())
				{
					engine.close(DialogResult.OK);
				}
			}
			else 
			{
				open();
			}
			*/
			open();
		}
		
	}
	
	private void updateRowToNotesGrid(AttendanceClinicalNotesVo attClinicalNote)
	{
		grdNotesRow row = form.grdNotes().getSelectedRow();
		row.setcolAuthoringHCP(attClinicalNote.getAuthoringInformation().getAuthoringHcp().toString());
		row.setcolDate(attClinicalNote.getAuthoringInformation().getAuthoringDateTime().toString());
		row.setcolComments(attClinicalNote.getClinicalNote());
		row.setTooltipForcolComments(attClinicalNote.getClinicalNote());
		row.setValue(attClinicalNote);
	}
	
	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onImbEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		editAttendanceClinicalNote();
	}
	@Override
	protected void onImbAddClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newAttendanceClinicalNote();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onBtnSaveAndCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			//open();
			engine.close(DialogResult.OK);
		}
	}
	private boolean save()
	{
		ReferralToSpecialtyTeamVo referralToSave = populateDataFromScreen(form.getLocalContext().getSelectedReferralToSpecialty());

		String[] errors = referralToSave.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Check SOE
		if (referralToSave.getID_ReferralToSpecTeamIsNotNull() && domain.isStale(referralToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			if (form.getLocalContext().getSelectedReferralToSpecialtyIsNotNull())
			{
				form.getLocalContext().setSelectedReferralToSpecialty(domain.getReferralToSpecialty(form.getLocalContext().getSelectedReferralToSpecialty()));
			}
			if (form.getLocalContext().getTrackingForReferralIsNotNull())
			{
				form.getLocalContext().setTrackingForReferral(domain.getTrackingForReferral(form.getLocalContext().getTrackingForReferral()));
			}
			open();
			return false;
		}

		TrackingForReferalToSpecialtyVo trackingToSave = null;

		// for a new TrackingForReferalToSpecialty set the current referral in tracking and set Tracking.CurrentStatus
		if (referralToSave.getID_ReferralToSpecTeam()==null && form.getLocalContext().getTrackingForReferral().getCurrentAreaIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getTrackingForReferral().getIsDischarged()))
		{
			trackingToSave = form.getLocalContext().getTrackingForReferral();
			
			TrackingAttendanceStatusVo 	trackingStatusToSave = populateTrackingAttendanceStatus(TrackingStatus.REFERRED_TO_OTHER_SPECIALITY);

			trackingToSave.setCurrentReferral(referralToSave);
			trackingToSave.setCurrentStatus(trackingStatusToSave);
			
			//WDEV-17722
			if (trackingToSave.getAttendance()!=null && trackingToSave.getAttendance().getConclusionDateTime()==null)
			{
				trackingToSave.getAttendance().setConclusionDateTime(form.dtimReffered().getValue());
			}
		}
		// set the current referral to null if referral record is marked as completed only if the referralToSpecialtyTosave is the same with the value from tracking
		else if (referralToSave.getID_ReferralToSpecTeam()!=null && referralToSave.getCompletionDateTimeIsNotNull() && referralToSave.equals(form.getLocalContext().getTrackingForReferral().getCurrentReferral()) && form.getLocalContext().getTrackingForReferral().getCurrentAreaIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getTrackingForReferral().getIsDischarged()) && !EDReferralToSpecialtyEvent.DISCHARGE.equals(form.getLocalContext().getSelectedEvent()))
		{
			trackingToSave = form.getLocalContext().getTrackingForReferral();
			trackingToSave.setCurrentReferral(null);
			
		}
		//If is NotAccepted, then set CurrentReferral in tracking to null and status to previous status
		else if (referralToSave.getID_ReferralToSpecTeam()!=null && Boolean.TRUE.equals(referralToSave.getNotAccepted()) && form.getLocalContext().getTrackingForReferral().getCurrentAreaIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getTrackingForReferral().getIsDischarged()) && !EDReferralToSpecialtyEvent.EDIT.equals(form.getLocalContext().getSelectedEvent()))
		{
			trackingToSave = form.getLocalContext().getTrackingForReferral();
			TrackingAttendanceStatusVo trackingStatusToSave = populateTrackingAttendanceStatus(form.getLocalContext().getTrackingForReferral().getCurrentStatus().getPrevStatus());

			trackingToSave.setCurrentReferral(null);
			trackingToSave.setCurrentStatus(trackingStatusToSave);
			
		}
		//if is pressed Discharged, set CurrentReferral in status to null and status to  TO_BE_DISCHARGED
		else if (EDReferralToSpecialtyEvent.DISCHARGE.equals(form.getLocalContext().getSelectedEvent()))
		{
			trackingToSave = form.getLocalContext().getTrackingForReferral();	
			TrackingAttendanceStatusVo 	trackingStatusToSave = populateTrackingAttendanceStatus(TrackingStatus.TO_BE_DISCHARGED);

			trackingToSave.setCurrentReferral(null);
			trackingToSave.setCurrentStatus(trackingStatusToSave);
		}
		
		try
		{
			if (trackingToSave != null && !referralToSave.getCompletionDateTimeIsNotNull())
			{
				String[] errors1 = trackingToSave.validate();

				if (errors1 != null && errors1.length > 0)
				{
					engine.showErrors(errors1);
					return false;
				}
				
				ReferralToSpecialtyTeamVo previousRecordNotCompleted = domain.getUncompletedReferralToSpecialtyByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				//if New Referral is pressed and the previous record is not completed, save previusRecord with completedDateTime set to currentDateTime and create another ReferralToSpecialty that is saved in ReferralToSpecialty in Tracking
				if (referralToSave.getID_ReferralToSpecTeam()==null && previousRecordNotCompleted!=null)
				{
					previousRecordNotCompleted.setCompletionDateTime(new DateTime());
					form.getLocalContext().setSelectedReferralToSpecialty(domain.save(null, trackingToSave,previousRecordNotCompleted));
				}
				else if (Boolean.TRUE.equals(referralToSave.getNotAccepted()))
				{
					form.getLocalContext().setSelectedReferralToSpecialty(domain.save(referralToSave, trackingToSave,null));
				}
				else
				{
					form.getLocalContext().setSelectedReferralToSpecialty(domain.save(null, trackingToSave,null));
				}
				
				form.getLocalContext().setTrackingForReferral(domain.getTrackingForReferral(trackingToSave));
			}
			else if (trackingToSave != null && referralToSave.getCompletionDateTimeIsNotNull())
			{
				String[] errors1 = trackingToSave.validate();

				if (errors1 != null && errors1.length > 0)
				{
					engine.showErrors(errors1);
					return false;
				}
				form.getLocalContext().setSelectedReferralToSpecialty(domain.save(referralToSave, trackingToSave,null));
				form.getLocalContext().setTrackingForReferral(domain.getTrackingForReferral(trackingToSave));
			}
			else
				form.getLocalContext().setSelectedReferralToSpecialty(domain.save(referralToSave, null,null));
			
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

			if (form.getLocalContext().getSelectedReferralToSpecialtyIsNotNull())
			{
				form.getLocalContext().setSelectedReferralToSpecialty(domain.getReferralToSpecialty(form.getLocalContext().getSelectedReferralToSpecialty()));
			}
			if (trackingToSave != null)
			{
				form.getLocalContext().setTrackingForReferral(domain.getTrackingForReferral(trackingToSave));
			}
			open();
			return false;
		}

		return true;
	}
	
	private TrackingAttendanceStatusVo populateTrackingAttendanceStatus(TrackingStatus status)
	{
		TrackingAttendanceStatusVo trackingAttStatus = new TrackingAttendanceStatusVo();

		trackingAttStatus.setPatient(form.getGlobalContext().Core.getPatientShort());
		trackingAttStatus.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		trackingAttStatus.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		trackingAttStatus.setTrackingArea(form.getLocalContext().getTrackingForReferral().getCurrentArea());

		trackingAttStatus.setStatusDatetime(new DateTime());

		Object mos = domain.getMosUser();
		if (mos instanceof MemberOfStaffLiteVo)
		{
			trackingAttStatus.setCreatedBy((MemberOfStaffLiteVo) mos);
		}

		trackingAttStatus.setStatus(status);
		trackingAttStatus.setPrevStatus((form.getLocalContext().getTrackingForReferral()!=null && form.getLocalContext().getTrackingForReferral().getCurrentStatus()!=null  ) ? form.getLocalContext().getTrackingForReferral().getCurrentStatus().getStatus() : null);
		
		return trackingAttStatus;
	}
	
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.dtimReffered().getValue() != null)
		{
			if (form.dtimReffered().getValue().isGreaterThan(new DateTime()))
			{
				errors.add("'Referred Date/Time' cannot be in the future.");
			}
			DateTime registrationDateTime = domain.getAttendanceRegistrationDateTime(form.getGlobalContext().Core.getCurrentCareContext());

			if (registrationDateTime.isGreaterThan(form.dtimReffered().getValue()))
			{
				errors.add("'Referred Date/Time' must be after 'Registration Date/Time' for the selected attendance.");
			}
			
			if (form.dtimCompletion().getValue() != null)
			{
				if (form.dtimReffered().getValue().getDate().isGreaterThan(form.dtimCompletion().getValue().getDate()) || (form.dtimReffered().getValue().getDate().equals(form.dtimCompletion().getValue().getDate()) && form.dtimReffered().getValue().getTime().isGreaterThan(form.dtimCompletion().getValue().getTime())))
				{
					errors.add("'Referred Date/Time' cannot be greater than 'Date and time Referral Completed'.");
				}
			}
		}

		if (form.dtimSeen().getValue() != null)
		{
			if (form.dtimSeen().getValue().isGreaterThan(new DateTime()))
			{
				errors.add("'Date and time Patient Seen' cannot be in the future.");
			}

			if (form.dtimReffered().getValue() != null)
			{
				if (form.dtimReffered().getValue().getDate().isGreaterThan(form.dtimSeen().getValue().getDate()) || (form.dtimReffered().getValue().getDate().equals(form.dtimSeen().getValue().getDate()) && form.dtimReffered().getValue().getTime().isGreaterThan(form.dtimSeen().getValue().getTime())))
				{
					errors.add("'Referred Date/Time' cannot be greater than 'Date and time Patient Seen'.");
				}
			}

			if (form.dtimCompletion().getValue() != null)
			{
				if (form.dtimSeen().getValue().getDate().isGreaterThan(form.dtimCompletion().getValue().getDate()) || (form.dtimSeen().getValue().getDate().equals(form.dtimCompletion().getValue().getDate()) && form.dtimSeen().getValue().getTime().isGreaterThan(form.dtimCompletion().getValue().getTime())))
				{
					errors.add("'Date and time Patient Seen' cannot be greater than 'Date and time Referral Completed'.");
				}
			}

		}

		if (form.dtimCompletion().getValue() != null && form.dtimCompletion().getValue().isGreaterThan(new DateTime()))
		{
			errors.add("'Date and time Referral Completed' cannot be in the future.");
		}
		
		/*
		if (form.getLocalContext().getSelectedReferralToSpecialty() != null && form.getLocalContext().getSelectedReferralToSpecialty().getID_ReferralToSpecTeam() != null)
		{
			if (form.dtimCompletion().getValue() == null && domain.isLastEntry(form.getGlobalContext().Core.getCurrentCareContext(), form.getLocalContext().getSelectedReferralToSpecialty()) == false)
			{
				errors.add("Completion Date/Time is mandatory for this record.");
			}
		}
		*/
		
		if (EDReferralToSpecialtyEvent.EDIT.equals(form.getLocalContext().getSelectedEvent()) && form.getLocalContext().getSelectedReferralToSpecialty()!=null)
		{
			ReferralToSpecialtyTeamVo selectedReferralToSpecialty = form.getLocalContext().getSelectedReferralToSpecialty();
			if (selectedReferralToSpecialty!=null && selectedReferralToSpecialty.getSeenDateTimeIsNotNull() && form.dtimSeen().getValue()==null)
			{
				errors.add("You are allowed only to edit, not to remove the value from 'Date and time Patient Seen'. ");
			}
			if (selectedReferralToSpecialty!=null && selectedReferralToSpecialty.getCompletionDateTimeIsNotNull() && form.dtimCompletion().getValue()==null)
			{
				errors.add("You are allowed only to edit, not to remove the value from 'Date and time Referral Completed'.");
			}
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	private ReferralToSpecialtyTeamVo populateDataFromScreen(ReferralToSpecialtyTeamVo voReferralToSpecialty)
	{
		if (voReferralToSpecialty == null)
		{
			voReferralToSpecialty = new ReferralToSpecialtyTeamVo();
		}
		else
			voReferralToSpecialty=(ReferralToSpecialtyTeamVo) voReferralToSpecialty.clone();

		voReferralToSpecialty.setPatient(form.getGlobalContext().Core.getPatientShort());
		voReferralToSpecialty.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		voReferralToSpecialty.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		voReferralToSpecialty.setTrackingArea(form.getLocalContext().getTrackingForReferral().getCurrentArea());

		voReferralToSpecialty.setReferredBy((HcpLiteVo) form.ccRefferedBy().getValue());
		voReferralToSpecialty.setReferredDateTime(form.dtimReffered().getValue());
		voReferralToSpecialty.setTeamConsultant(form.cmbConsultantTeam().getValue());
		voReferralToSpecialty.setSpecialty(form.cmbSpecialty().getValue());
		voReferralToSpecialty.setSeenDateTime(form.dtimSeen().getValue());
		voReferralToSpecialty.setCompletionDateTime(form.dtimCompletion().getValue());
		voReferralToSpecialty.setComments(populateCommentsFromScreen());
		
		if (voReferralToSpecialty.getNotAccepted()==null)
			voReferralToSpecialty.setNotAccepted(EDReferralToSpecialtyEvent.NOT_ACCEPTED.equals(form.getLocalContext().getSelectedEvent()) ? true : null);
		
		return voReferralToSpecialty;
	}

	private AttendanceClinicalNotesVoCollection populateCommentsFromScreen()
	{
		AttendanceClinicalNotesVoCollection commentsCollection = new AttendanceClinicalNotesVoCollection();

		for (int i = 0; i < form.grdNotes().getRows().size(); i++)
		{
			commentsCollection.add(form.grdNotes().getRows().get(i).getValue());
		}
		
		return commentsCollection;
	}

	@Override
	protected void onGrdNotesSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}
	@Override
	protected void onRecbrReferralsForAttendanceValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		getSelectedInstance();
		updateControlsState();
	}
	private void getSelectedInstance()
	{
		form.getLocalContext().setSelectedReferralToSpecialty(domain.getReferralToSpecialty(form.recbrReferralsForAttendance().getValue()));
	
		form.getGlobalContext().Emergency.setAttendanceClinicalNotes(null);
		populateInstanceControls(form.getLocalContext().getSelectedReferralToSpecialty());
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.ReferralToSpecTeam.Add:
				newAttendanceClinicalNote();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.ReferralToSpecTeam.Edit:
				editAttendanceClinicalNote();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.ReferralToSpecTeam.CORRECT:
				correctNote();
			break;
		}
	}
	@Override
	protected void onBtnDischargeClick() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(EDReferralToSpecialtyEvent.DISCHARGE);
		
		form.dtimCompletion().setValue(new DateTime());
		
		if (save())
		{
			engine.close(DialogResult.OK);
		}
	}
	@Override
	protected void onBtnTransferClick() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}
	@Override
	protected void onBtnAdmissionClick() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(EDReferralToSpecialtyEvent.ADMISSION);
		
		form.dtimCompletion().setValue(new DateTime());
	
		ReferralToSpecialtyTeamVo referralToSave = populateDataFromScreen(form.getLocalContext().getSelectedReferralToSpecialty());

		String[] errors = referralToSave.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return ;
		}
		
		// Check SOE
		if (referralToSave.getID_ReferralToSpecTeamIsNotNull() && domain.isStale(referralToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			if (form.getLocalContext().getSelectedReferralToSpecialtyIsNotNull())
			{
				form.getLocalContext().setSelectedReferralToSpecialty(domain.getReferralToSpecialty(form.getLocalContext().getSelectedReferralToSpecialty()));
			}
			if (form.getLocalContext().getTrackingForReferralIsNotNull())
			{
				form.getLocalContext().setTrackingForReferral(domain.getTrackingForReferral(form.getLocalContext().getTrackingForReferral()));
			}
			open();
			return ;
		}
		
		//WDEV-17661
		if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING"))
		{
			engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog, new Object[] {form.getLocalContext().getTrackingForReferral(),referralToSave});
		}
		else if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PARTIAL"))
		{
			engine.open(form.getForms().Emergency.EDPartialAdmissionDialog, new Object[] {form.getLocalContext().getTrackingForReferral()});
		}
	}
	@Override
	protected void onBtnCompletedClick() throws PresentationLogicException
	{
		form.dtimCompletion().setValue(new DateTime());
		if (save())
		{
			open();
		}
	}
	@Override
	protected void onBtnNotAcceptedClick() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(EDReferralToSpecialtyEvent.NOT_ACCEPTED);
		if (save())
		{
			engine.close(DialogResult.OK);
		}
	}
	@Override
	protected void onBtnSeenClick() throws PresentationLogicException
	{
		form.dtimSeen().setValue(new DateTime());
		if (save())
		{
			open();
		}
	}
	@Override
	protected void onBtnNewReferralClick() throws PresentationLogicException
	{
		newInstance();
	}
	
	@Override
	protected void onBtnEditNoteClick() throws PresentationLogicException
	{
		if(form.grdNotes().getValue() == null)
			return;
		
		if(form.grdNotes().getValue().getID_AttendanceClinicalNotes() != null)
		{
			correctNote();
		}
		else
		{
			editAttendanceClinicalNote();
		}
	}

	private void correctNote() 
	{
		form.getGlobalContext().Emergency.setAttendanceClinicalNotes(form.grdNotes().getValue());
		engine.open(form.getForms().Emergency.NoteCorrectionDialog,new Object[] {form.grdNotes().getValue()}); 
	}

	private void editAttendanceClinicalNote()
	{
		form.getGlobalContext().Emergency.setAttendanceClinicalNotes(form.grdNotes().getValue());
		if (FormMode.EDIT.equals(form.getMode()))
		{
			engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {null,null,null,form.getMode()});
		}
		else
		{
			engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog);
		}
	}

	@Override
	protected void onBtnNewNoteClick() throws PresentationLogicException
	{
		newAttendanceClinicalNote();
	}

	private void newAttendanceClinicalNote()
	{
		form.getGlobalContext().Emergency.setAttendanceClinicalNotes(null);
		form.grdNotes().setValue(null);
		if (FormMode.EDIT.equals(form.getMode()))
		{
			engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {AttendanceClinicalNoteType.REFERRAL_TO_SPECIALTY,form.getLocalContext().getSelectedReferralToSpecialty(),null,form.getMode()});
		}
		else
		{
			engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {AttendanceClinicalNoteType.REFERRAL_TO_SPECIALTY,form.getLocalContext().getSelectedReferralToSpecialty()});
		}
	}

	
	public class CommentsDateComparator implements Comparator
	{
		private int direction = 1;
		
		public CommentsDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public CommentsDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime date1 = null;
			DateTime date2 = null;
			if(ob1 instanceof AttendanceClinicalNotesVo )
			{
				AttendanceClinicalNotesVo note1 = (AttendanceClinicalNotesVo)ob1;
				date1 = note1 != null ? note1.getAuthoringInformation().getAuthoringDateTime():null;
			}
			if(ob2 instanceof AttendanceClinicalNotesVo )
			{
				AttendanceClinicalNotesVo note2 = (AttendanceClinicalNotesVo)ob2;
				date2 = note2 != null ? note2.getAuthoringInformation().getAuthoringDateTime():null;
			}
			if(date1 != null )
				return  date1.compareTo(date2)*direction;
			if(date2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(EDReferralToSpecialtyEvent.EDIT);
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
		{
			open();
		}
	}	
}
