//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.sendtoconfig;

import ims.emergency.forms.sendtoconfig.GenForm.grdConfigRow;
import ims.emergency.vo.TrackingAreaVo;
import ims.emergency.vo.TrackingAreaVoCollection;
import ims.emergency.vo.enums.SendToConfigEvent;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.getContextMenus().Emergency.getSendToConfigEditItem().setVisible(FormMode.EDIT.equals(form.getMode()));
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (result.equals(DialogResult.OK))
		{
			open();
		}
	}

	private void populateGrid()
	{
		form.grdConfig().getRows().clear();

		if (form.getGlobalContext().Emergency.getTrackingArea() == null)
			return;
		else if (form.getGlobalContext().Emergency.getTrackingArea().getSendToAreas() == null)
			return;

		TrackingAreaVoCollection collToArea = form.getGlobalContext().Emergency.getTrackingArea().getSendToAreas();

		for (int i = 0; i < collToArea.size(); i++)
		{
			grdConfigRow row = form.grdConfig().getRows().newRow();
			row.setcolArea(collToArea.get(i).getAreaDisplayName());
			row.setValue(collToArea.get(i));
		}
	}

	@Override
	protected void onGrdConfigSelectionChanged()
	{
		// TODO Add your code here.
	}

	private void open()
	{
		form.cmbArea().setValue(form.getGlobalContext().Emergency.getTrackingArea());
		populateGrid();
	}

	public void setValue(TrackingAreaVo areaSendToConfig)
	{
		if (areaSendToConfig == null)
			return;

		form.getGlobalContext().Emergency.setTrackingArea(domain.getTrackingArea(areaSendToConfig));
		open();
	}

	public void initialize(Boolean argument, TrackingAreaVoCollection areaDefCollection)
	{
		if (argument && areaDefCollection == null && form.cmbArea().getValue() != null) // Send To Config Menu
		{
			form.getGlobalContext().Emergency.setTrackingArea(domain.getTrackingArea(form.cmbArea().getValue()));
			engine.open(form.getForms().Emergency.SendToConfigDialog);
		}
		else if (areaDefCollection != null) // view Mode
		{
			populateFromAreaCombo(areaDefCollection);
			form.getGlobalContext().Emergency.setTrackingArea(null);
		}
		else if (!argument && areaDefCollection == null) // if TrackingConfiguration does not have any Area Definitions
		{
			form.getGlobalContext().Emergency.setTrackingArea(null);
		}
		open();
	}

	private void populateFromAreaCombo(TrackingAreaVoCollection areaDefCollection) // Populate the comboBox FromArea
	{
		form.cmbArea().clear();
		for (int i = 0; i < areaDefCollection.size(); i++)
		{
			if (areaDefCollection.get(i).getIsOverallView())
				continue;

			form.cmbArea().newRow(areaDefCollection.get(i), areaDefCollection.get(i).getAreaDisplayName());
		}
	}

	public TrackingAreaVo getValue()
	{
		return form.getGlobalContext().Emergency.getTrackingArea();
	}

	public void clear()
	{
		form.cmbArea().setValue(null);
		form.grdConfig().getRows().clear();
	}

	@Override
	protected void onCmbAreaValueChanged() throws PresentationLogicException
	{
		if (form.cmbArea().getValue() != null)
		{
			form.getGlobalContext().Emergency.setTrackingArea(domain.getTrackingArea(form.cmbArea().getValue()));
		}
		else
		{
			form.getGlobalContext().Emergency.setTrackingArea(null);
		}
		populateGrid();
		form.getLocalContext().setSelectedEvent(SendToConfigEvent.COMBOVALUECHANGED);
		form.fireCustomControlValueChanged();
	}

	public void setFromAreaCombo(TrackingAreaVo valueForFromAreaCombo)
	{
		form.cmbArea().newRow(valueForFromAreaCombo, valueForFromAreaCombo.getAreaDisplayName());
		form.cmbArea().setValue(valueForFromAreaCombo);
	}

	public TrackingAreaVo getFromAreaCombo()
	{
		return form.cmbArea().getValue();
	}

	public SendToConfigEvent getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}

	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.SendToConfig.Edit:
				engine.open(form.getForms().Emergency.SendToConfigDialog);
				break;

		}

	}
}
