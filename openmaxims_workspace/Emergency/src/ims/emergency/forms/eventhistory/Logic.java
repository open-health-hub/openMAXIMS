//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.eventhistory;

import ims.emergency.forms.eventhistory.GenForm.grdAllocatedMedicRow;
import ims.emergency.forms.eventhistory.GenForm.grdEDMovementTimesRow;
import ims.emergency.forms.eventhistory.GenForm.grdPatientStatusTimesRow;
import ims.emergency.vo.AdmissionDetailForEventHistoryVo;
import ims.emergency.vo.EmergencyAttendanceForEventHistoryVo;
import ims.emergency.vo.ReferralToSpecialtyTeamForEventHistoryVo;
import ims.emergency.vo.ReferralToSpecialtyTeamForEventHistoryVoCollection;
import ims.emergency.vo.SeenByHcpForEventHistoryVo;
import ims.emergency.vo.SeenByHcpForEventHistoryVoCollection;
import ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVo;
import ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVoCollection;
import ims.emergency.vo.TrackingMovementTimesForEventHistoryVo;
import ims.emergency.vo.TrackingMovementTimesForEventHistoryVoCollection;
import ims.emergency.vo.TriageForEventHistoryVo;
import ims.emergency.vo.lookups.AttendanceOutcome;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		populateScreenFromData();
		form.setMode(FormMode.VIEW);
	}

	private void clearScreen()
	{
		form.lblHospitalNumber().setValue(null);
		form.lblPatientName().setValue(null);
		form.lblAttendanceID().setValue(null);
		form.lblPresentingComplaint().setValue(null);
		form.lblPatientCategory().setValue(null);
		form.lblSourceOfReferral().setValue(null);
		form.lblInjuryDateTime().setValue(null);
		form.lblArrivalDateAndTime().setValue(null);
		form.lblRegistrationDateAndTime().setValue(null);
		form.lblTriageDateAndTime().setValue(null);
		form.lblInterventionDateAndTime().setValue(null);
		form.lblDischargeDateAndTime().setValue(null);
		form.lblPresentingProblem().setValue(null);
		form.lblTriagePriority().setValue(null);
		form.lblDiscriminator().setValue(null);

		form.grdAllocatedMedic().getRows().clear();
		form.grdPatientStatusTimes().getRows().clear();
		form.grdEDMovementTimes().getRows().clear();
	}

	private void populateScreenFromData()
	{
		populateLabels();
		populateGrids();

	}

	private void populateLabels()
	{
		populateLabelsFromEmergencyAttendance();
		populateLabelsFromTriage();

	}

	private void populateLabelsFromTriage()
	{
		TriageForEventHistoryVo triage = domain.getTriageForEventHistory(form.getGlobalContext().Core.getCurrentCareContext());

		if (triage == null)
		{
			return;
		}

		if (triage.getTriageStartDateTimeIsNotNull())
		{
			form.lblTriageDateAndTime().setValue(triage.getTriageStartDateTime().toString());
		}

		if (triage.getMedicInterventionStartDateTimeIsNotNull())
		{
			form.lblInterventionDateAndTime().setValue(triage.getMedicInterventionStartDateTime().toString());
		}

		if (triage.getMainPresentingProblemIsNotNull())
		{
			form.lblPresentingProblem().setValue(triage.getMainPresentingProblem().getPatientProblem().toUpperCase());
		}

		if (triage.getCurrentTriagePriorityIsNotNull())
		{
			form.lblTriagePriority().setValue(triage.getCurrentTriagePriority().getText().toUpperCase());
		}

		if (triage.getCurrentTriageAssessmentIsNotNull() && triage.getCurrentTriageAssessment().getDiscriminatorIsNotNull())
		{
			form.lblDiscriminator().setValue(triage.getCurrentTriageAssessment().getDiscriminator().getDiscriminator().getDiscriminatorName().toUpperCase());
		}
	}

	private void populateLabelsFromEmergencyAttendance()
	{
		EmergencyAttendanceForEventHistoryVo emergencyAttendance = domain.getEmergencyAttendance(form.getGlobalContext().Core.getCurrentCareContext());

		if (emergencyAttendance == null)
		{
			engine.showMessage("Patient doesn't have an EmergencyAttendance, fields will not be populated");
			return;
		}

		for (int i = 0; i < emergencyAttendance.getPatient().getIdentifiers().size(); i++)
		{
			if (emergencyAttendance.getPatient().getIdentifiers().get(i).getType().equals(ims.core.vo.lookups.PatIdType.HOSPNUM))
			{
				form.lblHospitalNumber().setValue(emergencyAttendance.getPatient().getIdentifiers().get(i).getValue());
			}
		}

		//WDEV-17482
		form.lblPatientName().setValue(emergencyAttendance.getPatient().getName().getSurname().toUpperCase() + (emergencyAttendance.getPatient().getName().getForename() != null ? ", " + emergencyAttendance.getPatient().getName().getForename() : ""));
		form.lblAttendanceID().setValue(emergencyAttendance.getID_EmergencyAttendance().toString());

		if (emergencyAttendance.getEpisode().getPresentingComplaintIsNotNull())
		{
			form.lblPresentingComplaint().setValue(emergencyAttendance.getEpisode().getPresentingComplaint().getText());
		}

		if (emergencyAttendance.getEpisode().getCategoryIsNotNull())
		{
			form.lblPatientCategory().setValue(emergencyAttendance.getEpisode().getCategory().getText());
		}

		if (emergencyAttendance.getEpisode().getSourceOfReferralIsNotNull())
		{
			form.lblSourceOfReferral().setValue(emergencyAttendance.getEpisode().getSourceOfReferral().getText());
		}

		if (emergencyAttendance.getEpisode().getInjuryDateTimeIsNotNull())
		{
			form.lblInjuryDateTime().setValue(emergencyAttendance.getEpisode().getInjuryDateTime().toString());
		}

		if (emergencyAttendance.getArrivalDateTimeIsNotNull())
		{
			form.lblArrivalDateAndTime().setValue(emergencyAttendance.getArrivalDateTime().toString());
		}

		if (emergencyAttendance.getRegistrationDateTimeIsNotNull())
		{
			form.lblRegistrationDateAndTime().setValue(emergencyAttendance.getRegistrationDateTime().toString());
		}

		if (emergencyAttendance.getDischargeDateTimeIsNotNull())
		{
			form.lblDischargeDateAndTime().setValue(emergencyAttendance.getDischargeDateTime().toString());
		}

		//WDEV-17038
		if (emergencyAttendance.getDischargeDateTime()!=null && AttendanceOutcome.ADMISSIONS.equals(emergencyAttendance.getOutcome()))
		{
			AdmissionDetailForEventHistoryVo admDetails = domain.getAdmissionDetail(form.getGlobalContext().Core.getPatientShort(), emergencyAttendance.getDischargeDateTime());	
			form.lblWard().setVisible(admDetails!=null && admDetails.getWardIsNotNull());
			form.lblWardValue().setValue(admDetails!=null && admDetails.getWardIsNotNull() ? admDetails.getWard().getName():null);
		}
	}

	private void populateGrids()
	{
		SeenByHcpForEventHistoryVoCollection seenByHcp = domain.getSeenByHcp(form.getGlobalContext().Core.getCurrentCareContext());//WDEV-16816
		ReferralToSpecialtyTeamForEventHistoryVoCollection referralsToSpecialty = domain.getReferralsToSpecialty(form.getGlobalContext().Core.getCurrentCareContext());
		TrackingAttendanceStatusForEventHistoryVoCollection attendanceStatuses = domain.getTrackingAttendanceStatuses(form.getGlobalContext().Core.getCurrentCareContext());
		TrackingMovementTimesForEventHistoryVoCollection trackingMovementTimes = domain.getTrackingMovementTimes(form.getGlobalContext().Core.getCurrentCareContext());

		//WDEV-16816
		for (int i = 0; i < seenByHcp.size(); i++)
		{
			addSeenByHCPRowToGrid(seenByHcp.get(i));
		}

		for (int i = 0; i < referralsToSpecialty.size(); i++)
		{
			addReferralRowToGrid(referralsToSpecialty.get(i));
		}

		for (int i = 0; i < attendanceStatuses.size(); i++)
		{
			addAttendanceStatusRowToGrid(attendanceStatuses.get(i));
		}

		for (int i = 0; i < trackingMovementTimes.size(); i++)
		{
			addMovementTimeRowToGrid(trackingMovementTimes.get(i));
		}
	}

	private void addMovementTimeRowToGrid(TrackingMovementTimesForEventHistoryVo trackingMovementTimesForEventHistoryVo)
	{
		grdEDMovementTimesRow newrow = form.grdEDMovementTimes().getRows().newRow();

		if (trackingMovementTimesForEventHistoryVo.getAreaMovedToIsNotNull())
		{
			newrow.setColTrackingArea(trackingMovementTimesForEventHistoryVo.getAreaMovedTo().getAreaDisplayName());
		}

		if (trackingMovementTimesForEventHistoryVo.getMovedDateTimeIsNotNull())
		{
			newrow.setColTime(trackingMovementTimesForEventHistoryVo.getMovedDateTime().toString());
		}
	}

	private void addAttendanceStatusRowToGrid(TrackingAttendanceStatusForEventHistoryVo trackingAttendanceStatusForEventHistoryVo)
	{
		grdPatientStatusTimesRow newrow = form.grdPatientStatusTimes().getRows().newRow();

		if (trackingAttendanceStatusForEventHistoryVo.getStatusIsNotNull())
		{
			newrow.setColStatus(trackingAttendanceStatusForEventHistoryVo.getStatus().getText());
		}

		if (trackingAttendanceStatusForEventHistoryVo.getStatusDatetimeIsNotNull())
		{
			newrow.setColTime(trackingAttendanceStatusForEventHistoryVo.getStatusDatetime().toString());
		}

		if (trackingAttendanceStatusForEventHistoryVo.getTrackingAreaIsNotNull())
		{
			newrow.setColTrackingArea(trackingAttendanceStatusForEventHistoryVo.getTrackingArea().getAreaDisplayName());
		}
	}

	private void addReferralRowToGrid(ReferralToSpecialtyTeamForEventHistoryVo referralToSpecialtyTeamForEventHistoryVo)
	{
		//WDEV-16777
		if (referralToSpecialtyTeamForEventHistoryVo==null)
			return;
		
		grdAllocatedMedicRow newrow = form.grdAllocatedMedic().getRows().newRow();

		//WDEV-16777
		if (referralToSpecialtyTeamForEventHistoryVo.getTeamConsultant()!=null)
		{
			newrow.setColNurse(referralToSpecialtyTeamForEventHistoryVo.getTeamConsultant().getText()+ ", " + referralToSpecialtyTeamForEventHistoryVo.getSpecialty().getText());
		}
		else
		{
			newrow.setColNurse(referralToSpecialtyTeamForEventHistoryVo.getSpecialty().getText());
		}
		
		if (referralToSpecialtyTeamForEventHistoryVo.getReferredDateTimeIsNotNull())
		{
			newrow.setColAllocated(referralToSpecialtyTeamForEventHistoryVo.getReferredDateTime().toString());
		}

		if (referralToSpecialtyTeamForEventHistoryVo.getSeenDateTimeIsNotNull())
		{
			newrow.setColSeen(referralToSpecialtyTeamForEventHistoryVo.getSeenDateTime().toString());
		}

		if (referralToSpecialtyTeamForEventHistoryVo.getCompletionDateTimeIsNotNull())
		{
			newrow.setColCompleted(referralToSpecialtyTeamForEventHistoryVo.getCompletionDateTime().toString());
		}
	}

	//WDEV-16816
	private void addSeenByHCPRowToGrid(SeenByHcpForEventHistoryVo seenByHcp)
	{
		if (seenByHcp==null)
			return;
		
		grdAllocatedMedicRow newrow = form.grdAllocatedMedic().getRows().newRow();

		if (seenByHcp.getAllocatedMedic()!=null && seenByHcp.getAllocatedMedic().getMos()!=null && seenByHcp.getAllocatedMedic().getMos().getName()!=null)
		{
			newrow.setColNurse((seenByHcp.getAllocatedMedic().getMos().getName().getSurname()!=null ? seenByHcp.getAllocatedMedic().getMos().getName().getSurname():"") + ", " + (seenByHcp.getAllocatedMedic().getMos().getName().getForename()!=null ? seenByHcp.getAllocatedMedic().getMos().getName().getForename():""));
		}
		else if (seenByHcp.getAllocatedNurse()!=null && seenByHcp.getAllocatedNurse().getMos()!=null && seenByHcp.getAllocatedNurse().getMos().getName()!=null)
		{
			newrow.setColNurse((seenByHcp.getAllocatedNurse().getMos().getName().getSurname()!=null ? seenByHcp.getAllocatedNurse().getMos().getName().getSurname():"") + ", " + (seenByHcp.getAllocatedNurse().getMos().getName().getForename()!=null ? seenByHcp.getAllocatedNurse().getMos().getName().getForename():null));
		}
		
		if (seenByHcp.getAllocatedDateTimeIsNotNull())
		{
			newrow.setColAllocated(seenByHcp.getAllocatedDateTime().toString());
		}

		if (seenByHcp.getSeenDateTimeIsNotNull())
		{
			newrow.setColSeen(seenByHcp.getSeenDateTime().toString());
		}

		if (seenByHcp.getCompletedDateTimeIsNotNull())
		{
			newrow.setColCompleted(seenByHcp.getCompletedDateTime().toString());
		}
	}

	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onFormModeChanged()
	{
		form.btnOK().setVisible(engine.isDialog() && form.getMode().equals(FormMode.VIEW));
		form.btnOK().setEnabled(engine.isDialog() && form.getMode().equals(FormMode.VIEW));
	}
}
