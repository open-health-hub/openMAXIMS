//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.emergencyattendancedetailscc;

public abstract class BaseLogic extends Handlers implements IComponent
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.emergency.domain.EmergencyAttendanceDetailsCc.class;
	}
	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form, ims.emergency.domain.EmergencyAttendanceDetailsCc domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	public void setMode(ims.framework.enumerations.FormMode mode)
	{
		form.setMode(mode);
	}
	public ims.framework.enumerations.FormMode getMode()
	{
		return form.getMode();
	}
	protected final void oncmbDepartmentTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbDepartmentType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.EmergencyDeptType existingInstance = (ims.emergency.vo.lookups.EmergencyDeptType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDepartmentTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.EmergencyDeptType)
		{
			ims.emergency.vo.lookups.EmergencyDeptType instance = (ims.emergency.vo.lookups.EmergencyDeptType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDepartmentTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.EmergencyDeptType existingInstance = (ims.emergency.vo.lookups.EmergencyDeptType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbDepartmentType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDepartmentTypeLookup()
	{
		this.form.cmbDepartmentType().clear();
		ims.emergency.vo.lookups.EmergencyDeptTypeCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getEmergencyDeptType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbDepartmentType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDepartmentTypeLookupValue(int id)
	{
		ims.emergency.vo.lookups.EmergencyDeptType instance = ims.emergency.vo.lookups.LookupHelper.getEmergencyDeptTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbDepartmentType().setValue(instance);
	}
	protected final void defaultcmbDepartmentTypeLookupValue()
	{
		this.form.cmbDepartmentType().setValue((ims.emergency.vo.lookups.EmergencyDeptType)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.EmergencyDeptType.class, engine.getFormName().getID(), ims.emergency.vo.lookups.EmergencyDeptType.TYPE_ID));
	}
	protected final void oncmbInterpreterRequiredValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbInterpreterRequired().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbInterpreterRequiredLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbInterpreterRequiredLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbInterpreterRequired().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbInterpreterRequiredLookup()
	{
		this.form.cmbInterpreterRequired().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbInterpreterRequired().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbInterpreterRequiredLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbInterpreterRequired().setValue(instance);
	}
	protected final void defaultcmbInterpreterRequiredLookupValue()
	{
		this.form.cmbInterpreterRequired().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbPatPrefLanguageValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPatPrefLanguage().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatPrefLanguageLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Language)
		{
			ims.core.vo.lookups.Language instance = (ims.core.vo.lookups.Language)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatPrefLanguageLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPatPrefLanguage().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatPrefLanguageLookup()
	{
		this.form.cmbPatPrefLanguage().clear();
		ims.core.vo.lookups.LanguageCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLanguage(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPatPrefLanguage().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatPrefLanguageLookupValue(int id)
	{
		ims.core.vo.lookups.Language instance = ims.core.vo.lookups.LookupHelper.getLanguageInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPatPrefLanguage().setValue(instance);
	}
	protected final void defaultcmbPatPrefLanguageLookupValue()
	{
		this.form.cmbPatPrefLanguage().setValue((ims.core.vo.lookups.Language)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Language.class, engine.getFormName().getID(), ims.core.vo.lookups.Language.TYPE_ID));
	}
	protected final void oncmbEDConsultantValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbEDConsultant().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.EDConsultant existingInstance = (ims.emergency.vo.lookups.EDConsultant)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbEDConsultantLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.EDConsultant)
		{
			ims.emergency.vo.lookups.EDConsultant instance = (ims.emergency.vo.lookups.EDConsultant)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbEDConsultantLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.EDConsultant existingInstance = (ims.emergency.vo.lookups.EDConsultant)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbEDConsultant().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbEDConsultantLookup()
	{
		this.form.cmbEDConsultant().clear();
		ims.emergency.vo.lookups.EDConsultantCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getEDConsultant(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbEDConsultant().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbEDConsultantLookupValue(int id)
	{
		ims.emergency.vo.lookups.EDConsultant instance = ims.emergency.vo.lookups.LookupHelper.getEDConsultantInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbEDConsultant().setValue(instance);
	}
	protected final void defaultcmbEDConsultantLookupValue()
	{
		this.form.cmbEDConsultant().setValue((ims.emergency.vo.lookups.EDConsultant)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.EDConsultant.class, engine.getFormName().getID(), ims.emergency.vo.lookups.EDConsultant.TYPE_ID));
	}
	protected final void oncmbAttendanceTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbAttendanceType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.EDVisitType existingInstance = (ims.emergency.vo.lookups.EDVisitType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAttendanceTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.EDVisitType)
		{
			ims.emergency.vo.lookups.EDVisitType instance = (ims.emergency.vo.lookups.EDVisitType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAttendanceTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.EDVisitType existingInstance = (ims.emergency.vo.lookups.EDVisitType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbAttendanceType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAttendanceTypeLookup()
	{
		this.form.cmbAttendanceType().clear();
		ims.emergency.vo.lookups.EDVisitTypeCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getEDVisitType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbAttendanceType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAttendanceTypeLookupValue(int id)
	{
		ims.emergency.vo.lookups.EDVisitType instance = ims.emergency.vo.lookups.LookupHelper.getEDVisitTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbAttendanceType().setValue(instance);
	}
	protected final void defaultcmbAttendanceTypeLookupValue()
	{
		this.form.cmbAttendanceType().setValue((ims.emergency.vo.lookups.EDVisitType)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.EDVisitType.class, engine.getFormName().getID(), ims.emergency.vo.lookups.EDVisitType.TYPE_ID));
	}
	protected final void oncmbUrgencyLevelValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbUrgencyLevel().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.UrgencyLevel existingInstance = (ims.emergency.vo.lookups.UrgencyLevel)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbUrgencyLevelLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.UrgencyLevel)
		{
			ims.emergency.vo.lookups.UrgencyLevel instance = (ims.emergency.vo.lookups.UrgencyLevel)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbUrgencyLevelLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.UrgencyLevel existingInstance = (ims.emergency.vo.lookups.UrgencyLevel)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbUrgencyLevel().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbUrgencyLevelLookup()
	{
		this.form.cmbUrgencyLevel().clear();
		ims.emergency.vo.lookups.UrgencyLevelCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getUrgencyLevel(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbUrgencyLevel().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbUrgencyLevelLookupValue(int id)
	{
		ims.emergency.vo.lookups.UrgencyLevel instance = ims.emergency.vo.lookups.LookupHelper.getUrgencyLevelInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbUrgencyLevel().setValue(instance);
	}
	protected final void defaultcmbUrgencyLevelLookupValue()
	{
		this.form.cmbUrgencyLevel().setValue((ims.emergency.vo.lookups.UrgencyLevel)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.UrgencyLevel.class, engine.getFormName().getID(), ims.emergency.vo.lookups.UrgencyLevel.TYPE_ID));
	}
	protected final void oncmbTriageCategoryValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTriageCategory().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.TriageCategoryType existingInstance = (ims.emergency.vo.lookups.TriageCategoryType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTriageCategoryLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.TriageCategoryType)
		{
			ims.emergency.vo.lookups.TriageCategoryType instance = (ims.emergency.vo.lookups.TriageCategoryType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTriageCategoryLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.TriageCategoryType existingInstance = (ims.emergency.vo.lookups.TriageCategoryType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTriageCategory().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTriageCategoryLookup()
	{
		this.form.cmbTriageCategory().clear();
		ims.emergency.vo.lookups.TriageCategoryTypeCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getTriageCategoryType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTriageCategory().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTriageCategoryLookupValue(int id)
	{
		ims.emergency.vo.lookups.TriageCategoryType instance = ims.emergency.vo.lookups.LookupHelper.getTriageCategoryTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTriageCategory().setValue(instance);
	}
	protected final void defaultcmbTriageCategoryLookupValue()
	{
		this.form.cmbTriageCategory().setValue((ims.emergency.vo.lookups.TriageCategoryType)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.TriageCategoryType.class, engine.getFormName().getID(), ims.emergency.vo.lookups.TriageCategoryType.TYPE_ID));
	}
	protected final void oncmbOccupationStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbOccupationStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.OccupationStatus existingInstance = (ims.core.vo.lookups.OccupationStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOccupationStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.OccupationStatus)
		{
			ims.core.vo.lookups.OccupationStatus instance = (ims.core.vo.lookups.OccupationStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOccupationStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.OccupationStatus existingInstance = (ims.core.vo.lookups.OccupationStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbOccupationStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOccupationStatusLookup()
	{
		this.form.cmbOccupationStatus().clear();
		ims.core.vo.lookups.OccupationStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getOccupationStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbOccupationStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOccupationStatusLookupValue(int id)
	{
		ims.core.vo.lookups.OccupationStatus instance = ims.core.vo.lookups.LookupHelper.getOccupationStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbOccupationStatus().setValue(instance);
	}
	protected final void defaultcmbOccupationStatusLookupValue()
	{
		this.form.cmbOccupationStatus().setValue((ims.core.vo.lookups.OccupationStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.OccupationStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.OccupationStatus.TYPE_ID));
	}
	protected final void oncmbOcupationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbOcupation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Occupation existingInstance = (ims.core.vo.lookups.Occupation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOcupationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Occupation)
		{
			ims.core.vo.lookups.Occupation instance = (ims.core.vo.lookups.Occupation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOcupationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Occupation existingInstance = (ims.core.vo.lookups.Occupation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbOcupation().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOcupationLookup()
	{
		this.form.cmbOcupation().clear();
		ims.core.vo.lookups.OccupationCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getOccupation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbOcupation().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOcupationLookupValue(int id)
	{
		ims.core.vo.lookups.Occupation instance = ims.core.vo.lookups.LookupHelper.getOccupationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbOcupation().setValue(instance);
	}
	protected final void defaultcmbOcupationLookupValue()
	{
		this.form.cmbOcupation().setValue((ims.core.vo.lookups.Occupation)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Occupation.class, engine.getFormName().getID(), ims.core.vo.lookups.Occupation.TYPE_ID));
	}
	protected final void oncmbSchoolValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSchool().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.School existingInstance = (ims.emergency.vo.lookups.School)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSchoolLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.School)
		{
			ims.emergency.vo.lookups.School instance = (ims.emergency.vo.lookups.School)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSchoolLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.School existingInstance = (ims.emergency.vo.lookups.School)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSchool().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSchoolLookup()
	{
		this.form.cmbSchool().clear();
		ims.emergency.vo.lookups.SchoolCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getSchool(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSchool().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSchoolLookupValue(int id)
	{
		ims.emergency.vo.lookups.School instance = ims.emergency.vo.lookups.LookupHelper.getSchoolInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSchool().setValue(instance);
	}
	protected final void defaultcmbSchoolLookupValue()
	{
		this.form.cmbSchool().setValue((ims.emergency.vo.lookups.School)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.School.class, engine.getFormName().getID(), ims.emergency.vo.lookups.School.TYPE_ID));
	}
	protected final void oncmbIncidentLocationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbIncidentLocation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.IncidentLocation existingInstance = (ims.emergency.vo.lookups.IncidentLocation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIncidentLocationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.IncidentLocation)
		{
			ims.emergency.vo.lookups.IncidentLocation instance = (ims.emergency.vo.lookups.IncidentLocation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIncidentLocationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.IncidentLocation existingInstance = (ims.emergency.vo.lookups.IncidentLocation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbIncidentLocation().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIncidentLocationLookup()
	{
		this.form.cmbIncidentLocation().clear();
		ims.emergency.vo.lookups.IncidentLocationCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getIncidentLocation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbIncidentLocation().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIncidentLocationLookupValue(int id)
	{
		ims.emergency.vo.lookups.IncidentLocation instance = ims.emergency.vo.lookups.LookupHelper.getIncidentLocationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbIncidentLocation().setValue(instance);
	}
	protected final void defaultcmbIncidentLocationLookupValue()
	{
		this.form.cmbIncidentLocation().setValue((ims.emergency.vo.lookups.IncidentLocation)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.IncidentLocation.class, engine.getFormName().getID(), ims.emergency.vo.lookups.IncidentLocation.TYPE_ID));
	}
	protected final void oncmbAccompaniedByValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbAccompaniedBy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.AccompaniedBy existingInstance = (ims.emergency.vo.lookups.AccompaniedBy)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAccompaniedByLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.AccompaniedBy)
		{
			ims.emergency.vo.lookups.AccompaniedBy instance = (ims.emergency.vo.lookups.AccompaniedBy)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAccompaniedByLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.AccompaniedBy existingInstance = (ims.emergency.vo.lookups.AccompaniedBy)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbAccompaniedBy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAccompaniedByLookup()
	{
		this.form.cmbAccompaniedBy().clear();
		ims.emergency.vo.lookups.AccompaniedByCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getAccompaniedBy(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbAccompaniedBy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAccompaniedByLookupValue(int id)
	{
		ims.emergency.vo.lookups.AccompaniedBy instance = ims.emergency.vo.lookups.LookupHelper.getAccompaniedByInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbAccompaniedBy().setValue(instance);
	}
	protected final void defaultcmbAccompaniedByLookupValue()
	{
		this.form.cmbAccompaniedBy().setValue((ims.emergency.vo.lookups.AccompaniedBy)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.AccompaniedBy.class, engine.getFormName().getID(), ims.emergency.vo.lookups.AccompaniedBy.TYPE_ID));
	}
	protected final void oncmbModeOfArrivalValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbModeOfArrival().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ModeOfArrival existingInstance = (ims.emergency.vo.lookups.ModeOfArrival)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbModeOfArrivalLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.ModeOfArrival)
		{
			ims.emergency.vo.lookups.ModeOfArrival instance = (ims.emergency.vo.lookups.ModeOfArrival)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbModeOfArrivalLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ModeOfArrival existingInstance = (ims.emergency.vo.lookups.ModeOfArrival)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbModeOfArrival().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbModeOfArrivalLookup()
	{
		this.form.cmbModeOfArrival().clear();
		ims.emergency.vo.lookups.ModeOfArrivalCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getModeOfArrival(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbModeOfArrival().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbModeOfArrivalLookupValue(int id)
	{
		ims.emergency.vo.lookups.ModeOfArrival instance = ims.emergency.vo.lookups.LookupHelper.getModeOfArrivalInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbModeOfArrival().setValue(instance);
	}
	protected final void defaultcmbModeOfArrivalLookupValue()
	{
		this.form.cmbModeOfArrival().setValue((ims.emergency.vo.lookups.ModeOfArrival)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.ModeOfArrival.class, engine.getFormName().getID(), ims.emergency.vo.lookups.ModeOfArrival.TYPE_ID));
	}
	protected final void oncmbSourceOfReferralValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSourceOfReferral().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ReferredBy existingInstance = (ims.emergency.vo.lookups.ReferredBy)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSourceOfReferralLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.ReferredBy)
		{
			ims.emergency.vo.lookups.ReferredBy instance = (ims.emergency.vo.lookups.ReferredBy)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSourceOfReferralLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ReferredBy existingInstance = (ims.emergency.vo.lookups.ReferredBy)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSourceOfReferral().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSourceOfReferralLookup()
	{
		this.form.cmbSourceOfReferral().clear();
		ims.emergency.vo.lookups.ReferredByCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getReferredBy(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSourceOfReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSourceOfReferralLookupValue(int id)
	{
		ims.emergency.vo.lookups.ReferredBy instance = ims.emergency.vo.lookups.LookupHelper.getReferredByInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSourceOfReferral().setValue(instance);
	}
	protected final void defaultcmbSourceOfReferralLookupValue()
	{
		this.form.cmbSourceOfReferral().setValue((ims.emergency.vo.lookups.ReferredBy)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.ReferredBy.class, engine.getFormName().getID(), ims.emergency.vo.lookups.ReferredBy.TYPE_ID));
	}
	protected final void oncmbPresComplaintValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPresComplaint().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.PresentingComplaint existingInstance = (ims.emergency.vo.lookups.PresentingComplaint)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPresComplaintLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.PresentingComplaint)
		{
			ims.emergency.vo.lookups.PresentingComplaint instance = (ims.emergency.vo.lookups.PresentingComplaint)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPresComplaintLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.PresentingComplaint existingInstance = (ims.emergency.vo.lookups.PresentingComplaint)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPresComplaint().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPresComplaintLookup()
	{
		this.form.cmbPresComplaint().clear();
		ims.emergency.vo.lookups.PresentingComplaintCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getPresentingComplaint(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPresComplaint().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPresComplaintLookupValue(int id)
	{
		ims.emergency.vo.lookups.PresentingComplaint instance = ims.emergency.vo.lookups.LookupHelper.getPresentingComplaintInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPresComplaint().setValue(instance);
	}
	protected final void defaultcmbPresComplaintLookupValue()
	{
		this.form.cmbPresComplaint().setValue((ims.emergency.vo.lookups.PresentingComplaint)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.PresentingComplaint.class, engine.getFormName().getID(), ims.emergency.vo.lookups.PresentingComplaint.TYPE_ID));
	}
	protected final void oncmbPatientCategoryValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPatientCategory().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.PatientCategory existingInstance = (ims.emergency.vo.lookups.PatientCategory)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatientCategoryLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.PatientCategory)
		{
			ims.emergency.vo.lookups.PatientCategory instance = (ims.emergency.vo.lookups.PatientCategory)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatientCategoryLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.PatientCategory existingInstance = (ims.emergency.vo.lookups.PatientCategory)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPatientCategory().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatientCategoryLookup()
	{
		this.form.cmbPatientCategory().clear();
		ims.emergency.vo.lookups.PatientCategoryCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getPatientCategory(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPatientCategory().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatientCategoryLookupValue(int id)
	{
		ims.emergency.vo.lookups.PatientCategory instance = ims.emergency.vo.lookups.LookupHelper.getPatientCategoryInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPatientCategory().setValue(instance);
	}
	protected final void defaultcmbPatientCategoryLookupValue()
	{
		this.form.cmbPatientCategory().setValue((ims.emergency.vo.lookups.PatientCategory)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.PatientCategory.class, engine.getFormName().getID(), ims.emergency.vo.lookups.PatientCategory.TYPE_ID));
	}
	protected final void oncmbOutcomeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbOutcome().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.AttendanceOutcome existingInstance = (ims.emergency.vo.lookups.AttendanceOutcome)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOutcomeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.AttendanceOutcome)
		{
			ims.emergency.vo.lookups.AttendanceOutcome instance = (ims.emergency.vo.lookups.AttendanceOutcome)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOutcomeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.AttendanceOutcome existingInstance = (ims.emergency.vo.lookups.AttendanceOutcome)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbOutcome().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOutcomeLookup()
	{
		this.form.cmbOutcome().clear();
		ims.emergency.vo.lookups.AttendanceOutcomeCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getAttendanceOutcome(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbOutcome().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOutcomeLookupValue(int id)
	{
		ims.emergency.vo.lookups.AttendanceOutcome instance = ims.emergency.vo.lookups.LookupHelper.getAttendanceOutcomeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbOutcome().setValue(instance);
	}
	protected final void defaultcmbOutcomeLookupValue()
	{
		this.form.cmbOutcome().setValue((ims.emergency.vo.lookups.AttendanceOutcome)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.AttendanceOutcome.class, engine.getFormName().getID(), ims.emergency.vo.lookups.AttendanceOutcome.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.emergency.domain.EmergencyAttendanceDetailsCc domain;
}
