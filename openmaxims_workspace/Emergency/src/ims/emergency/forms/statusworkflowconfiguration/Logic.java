//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.statusworkflowconfiguration;

import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.statusworkflowconfiguration.GenForm.GroupCCDEnumeration;
import ims.emergency.forms.statusworkflowconfiguration.GenForm.GroupCDTEnumeration;
import ims.emergency.forms.statusworkflowconfiguration.GenForm.GroupREDEnumeration;
import ims.emergency.forms.statusworkflowconfiguration.GenForm.GroupRPAEnumeration;
import ims.emergency.forms.statusworkflowconfiguration.GenForm.GroupSCREnumeration;
import ims.emergency.forms.statusworkflowconfiguration.GenForm.grdStatusesRow;
import ims.emergency.vo.StatusWorkflowConfigVo;
import ims.emergency.vo.StatusWorkflowConfigVoCollection;
import ims.framework.enumerations.FormMode;

import java.util.Iterator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initalise();
		open();
	}
	
	private void initalise() 
	{
	}

	private void open() 
	{
		//assuming there is not going to a huge number of records, so by default showing all records.
		displayRecord(null);
		populateConfigurationGrid();		
		form.setMode(FormMode.VIEW);
		
	}
	private void populateConfigurationGrid() 
	{
		form.grdStatuses().getRows().clear();
				
		StatusWorkflowConfigVoCollection voColl = domain.listStatusWorkflowConfig();
		
		Iterator iter = voColl.iterator();
		
		if (iter != null && iter.hasNext())
		{
			StatusWorkflowConfigVo vo = null;
			
			while (iter.hasNext()) 
			{
				vo = (StatusWorkflowConfigVo)iter.next();
				grdStatusesRow row = form.grdStatuses().getRows().newRow();
				
				row.setColumnStatus(vo.getWorkflowStatusIsNotNull() ? vo.getWorkflowStatus().getText() : "");

				row.setValue(vo);
			}
			
			if (form.getLocalContext().getcurrentSelectionIsNotNull())
			{
				form.getLocalContext().setcurrentSelection(domain.getStatusWorkflowConfigVo(form.getLocalContext().getcurrentSelection()));
				form.grdStatuses().setValue(form.getLocalContext().getcurrentSelection());			
				displayRecord(form.getLocalContext().getcurrentSelection());
			}
			
		}
		else
		{
			engine.showMessage("No records found.");
		}
				
		updateControlsState();
	}
	
	private void displayRecord(StatusWorkflowConfigVo currentSelection) 
	{		 
		form.cmbStatus().setValue(currentSelection.getWorkflowStatus());
		form.lblTrackingStatus().setValue(currentSelection.getWorkflowStatusIsNotNull() ? currentSelection.getWorkflowStatus().getText() : "");
		
		form.GroupCCD().setValue(currentSelection.getCreatesClinicalDischargeIsNotNull() ? (currentSelection.getCreatesClinicalDischarge().booleanValue() ? GroupCCDEnumeration.rdoCCDYes : GroupCCDEnumeration.rdoCCDNo) : GroupCCDEnumeration.None);
		form.GroupRPA().setValue(currentSelection.getRequiresPreAdmissionIsNotNull() ? (currentSelection.getRequiresPreAdmission().booleanValue() ? GroupRPAEnumeration.rdoRPAYes : GroupRPAEnumeration.rdoRPANO) : GroupRPAEnumeration.None);
		form.GroupRED().setValue(currentSelection.getRecordEDDepartureIsNotNull() ? (currentSelection.getRecordEDDeparture().booleanValue() ? GroupREDEnumeration.rdoREDYes : GroupREDEnumeration.rdoREDNo) : GroupREDEnumeration.None);
		
		form.GroupCDT().setValue(currentSelection.getDepartureContinueToDisplayIsNotNull() ? (currentSelection.getDepartureContinueToDisplay().booleanValue() ? GroupCDTEnumeration.rdoCDTYes : GroupCDTEnumeration.rdoCDTNo) : GroupCDTEnumeration.None);
		form.GroupSCR().setValue(currentSelection.getDepartureSeperateContextRecordIsNotNull() ? (currentSelection.getDepartureSeperateContextRecord().booleanValue() ? GroupSCREnumeration.rdoSCRYes : GroupSCREnumeration.rdoSCRNo) : GroupSCREnumeration.None);
		form.cmbDefaultOutcome().setValue(currentSelection.getDepartureOutcomeDefault());
	}

	protected void onGrdModalityUnitDetailsSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setcurrentSelection(null);
		displayRecord(null);
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setcurrentSelection(null);
		form.grdStatuses().setValue(null);
		clearScreen();
		displayRecord(null);		
		form.setMode(FormMode.EDIT);
	}
	
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdStatuses().getSelectedRowIndex()>-1)
		{
			form.getLocalContext().setcurrentSelection(form.grdStatuses().getValue());
			form.setMode(FormMode.EDIT);
		}
		else
			engine.showMessage("Please select a configuration entry in the grid to edit.");
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		StatusWorkflowConfigVo vo = null;
		
		if (form.grdStatuses().getValue() == null)
			vo = new StatusWorkflowConfigVo();
		else
			vo = form.getLocalContext().getcurrentSelection();

		vo.setWorkflowStatus(form.cmbStatus().getValue());
		vo.setCreatesClinicalDischarge(form.GroupCCD().getValue().equals(GroupCCDEnumeration.rdoCCDYes) ? Boolean.TRUE : Boolean.FALSE);
		vo.setRequiresPreAdmission(form.GroupRPA().getValue().equals(GroupRPAEnumeration.rdoRPAYes) ? Boolean.TRUE : Boolean.FALSE);
		vo.setRecordEDDeparture(form.GroupRED().getValue().equals(GroupREDEnumeration.rdoREDYes) ? Boolean.TRUE : Boolean.FALSE);

		if ( form.GroupRED().getValue().equals(GroupREDEnumeration.rdoREDYes))
		{
			vo.setDepartureContinueToDisplay(null);
			vo.setDepartureSeperateContextRecord(null);
			vo.setDepartureOutcomeDefault(null);
		}
		else
		{
			vo.setDepartureContinueToDisplay(null);
			vo.setDepartureSeperateContextRecord(null);
			vo.setDepartureOutcomeDefault(null);
		}
		
		String[] arrErrors = vo.validate();
		if (arrErrors != null)
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;
		}
		
		try
		{
			form.getLocalContext().setcurrentSelection(domain.saveStatusWorkflowConfig(vo));
			open();
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage("Record was updated by another user. Screen will refresh.");
			form.getLocalContext().setcurrentSelection(domain.getStatusWorkflowConfigVo(form.getLocalContext().getcurrentSelection()));
			open();
			return;
		} 
		
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
	}

	
	private void clearScreen()
	{
		form.grdStatuses().getRows().clear();
		form.cmbStatus().setValue(null);
		form.GroupCCD().setValue(null);
		form.GroupRPA().setValue(null);
		form.GroupRED().setValue(null);

		form.GroupCDT().setValue(null);
		form.GroupSCR().setValue(null);
		form.cmbDefaultOutcome().setValue(null);
	}
	
	private void updateControlsState()
	{

		form.btnEdit().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdStatuses().getSelectedRow() != null);
		form.btnEdit().setEnabled(form.getMode().equals(FormMode.VIEW) && form.grdStatuses().getSelectedRow() != null);

		form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().getGenericGridAddItem().setEnabled(form.getMode().equals(FormMode.VIEW));
		
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdStatuses().getSelectedRow() != null);
		form.getContextMenus().getGenericGridUpdateItem().setEnabled(form.getMode().equals(FormMode.VIEW) && form.grdStatuses().getSelectedRow() != null);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onRadioButtonGroupREDValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	@Override
	protected void onGrdStatusesSelectionChanged()
	{
		form.getLocalContext().setcurrentSelection(form.grdStatuses().getValue());
		displayRecord(form.getLocalContext().getcurrentSelection());
		updateControlsState();
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				onBtnNewClick();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				onBtnEditClick();
				break;
		}
	}
}
