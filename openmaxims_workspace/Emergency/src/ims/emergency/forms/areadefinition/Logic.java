//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.areadefinition;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.emergency.forms.areadefinition.GenForm.grdAreaDefinitionRow;
import ims.emergency.vo.TrackingAreaVo;
import ims.emergency.vo.TrackingAreaVoCollection;
import ims.emergency.vo.enums.AreaDefinitionEvent;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	public void initialize(Boolean isTrackingConfigActive)
	{
		form.getLocalContext().setisTrackingConfigActive(isTrackingConfigActive);
		open();
	}

	public void setValue(TrackingAreaVoCollection areaCollection)
	{
		form.getLocalContext().setTrackingAreaCollection(areaCollection);
	}

	public TrackingAreaVoCollection getValue()
	{
		TrackingAreaVoCollection collectionToSave = new TrackingAreaVoCollection();

		if (form.getLocalContext().getTrackingAreaCollection() == null)
		{
			clear();
			addOverallView();
			addRegistrationArea();// FB
		}

		for (int i = 0; i < form.grdAreaDefinition().getRows().size(); i++)
		{
			collectionToSave.add(form.grdAreaDefinition().getValues().get(i));
		}

		if (form.getLocalContext().getRegistrationArea() != null)
		{
			collectionToSave.add(form.getLocalContext().getRegistrationArea());// FB
		}

		return collectionToSave;

	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{

	}

	private void open()
	{
		populateScreenFromData();
	}

	private void populateScreenFromData()
	{
		TrackingAreaVoCollection trackingAreaCollection;

		clear();
		form.getLocalContext().setRegistrationArea(null); // FB

		if (form.getLocalContext().getTrackingAreaCollectionIsNotNull())
		{
			trackingAreaCollection = form.getLocalContext().getTrackingAreaCollection();

			for (int i = 0; i < trackingAreaCollection.size(); i++)
			{
				grdAreaDefinitionRow row = form.grdAreaDefinition().getRows().newRow();
				row.setArea(trackingAreaCollection.get(i).getAreaDisplayName());
				//row.setPatRefreshRate(trackingAreaCollection.get(i).getPatientRefreshRate().toString());
				row.setStatus(trackingAreaCollection.get(i).getStatus().toString());
				row.setValue(trackingAreaCollection.get(i));

				if (trackingAreaCollection.get(i).getIsOverallViewIsNotNull() && trackingAreaCollection.get(i).getIsOverallView())
				{
					row.setBackColor(Color.Beige);
				}

				if (trackingAreaCollection.get(i).getIsRegistrationAreaIsNotNull() && trackingAreaCollection.get(i).getIsRegistrationArea())
				{
					row.setBackColor(Color.Beige);
					form.getLocalContext().setRegistrationArea(trackingAreaCollection.get(i));
				}
			}
		}
		updateControlsState();
	}

	@Override
	protected void onGrdAreaDefinitionSelectionChanged()
	{
		form.getGlobalContext().Emergency.setTrackingArea(form.grdAreaDefinition().getSelectedRow().getValue());
		form.getLocalContext().setSelectedArea(form.grdAreaDefinition().getSelectedRow().getValue());
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.AreaDefinition.Add:
				form.getGlobalContext().Emergency.setTrackingArea(null);
				form.getLocalContext().setSelectedEvent(null);
				engine.open(form.getForms().Emergency.AddEditArea);
				break;
			case GenForm.ContextMenus.EmergencyNamespace.AreaDefinition.Edit:
				form.getLocalContext().setSelectedEvent(AreaDefinitionEvent.EDIT);
				engine.open(form.getForms().Emergency.AddEditArea);
				break;
			case GenForm.ContextMenus.EmergencyNamespace.AreaDefinition.Remove:
				form.getLocalContext().setSelectedEvent(null);
				removeInstance();
				break;
			case GenForm.ContextMenus.EmergencyNamespace.AreaDefinition.MoveDown:
				form.getLocalContext().setSelectedEvent(null);
				form.grdAreaDefinition().moveDown();
				updateControlsState();
				break;
			case GenForm.ContextMenus.EmergencyNamespace.AreaDefinition.MoveUp:
				form.getLocalContext().setSelectedEvent(null);
				form.grdAreaDefinition().moveUp();
				updateControlsState();
				break;
			case GenForm.ContextMenus.EmergencyNamespace.AreaDefinition.SendToConfig:
				form.getLocalContext().setSelectedEvent(AreaDefinitionEvent.SENDTOCONFIG);
				form.fireCustomControlValueChanged();
				break;
			case GenForm.ContextMenus.EmergencyNamespace.AreaDefinition.ImportAreaDefinition:
				form.getGlobalContext().Emergency.setTrackingArea(null);
				form.getLocalContext().setSelectedEvent(AreaDefinitionEvent.IMPORTAREADEFINITION);
				form.fireCustomControlValueChanged();
				engine.open(form.getForms().Emergency.EmergencyDepartmentsDialog);
				break;
		}
	}

	private void removeInstance()
	{
		if (form.grdAreaDefinition().getSelectedRow().getValue().getID_TrackingAreaIsNotNull() && domain.isAreaUsedInOtherConfigurations(form.grdAreaDefinition().getSelectedRow().getValue()))
		{
			engine.showMessage("The area cannot be deleted because it is used in 'Send To Config'!");
			return;
		}
		form.grdAreaDefinition().removeSelectedRow();
		updateControlsState();
	}

	public void updateControlsState()
	{
		form.getContextMenus().Emergency.getAreaDefinitionAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().Emergency.getAreaDefinitionEditItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdAreaDefinition().getSelectedRow() != null && form.getLocalContext().getSelectedAreaIsNotNull());
		form.getContextMenus().Emergency.getAreaDefinitionMoveDownItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdAreaDefinition().canMoveCurrentDown() && form.getLocalContext().getSelectedAreaIsNotNull() && form.grdAreaDefinition().getSelectedRow().getValue().getIsOverallViewIsNotNull() && !form.grdAreaDefinition().getSelectedRow().getValue().getIsOverallView() && form.grdAreaDefinition().getSelectedRow().getValue().getIsRegistrationAreaIsNotNull() && !form.grdAreaDefinition().getSelectedRow().getValue().getIsRegistrationArea() && !isSecondToLast());
		form.getContextMenus().Emergency.getAreaDefinitionMoveUpItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdAreaDefinition().canMoveCurrentUp() && form.getLocalContext().getSelectedAreaIsNotNull() && form.grdAreaDefinition().getSelectedRow().getValue().getIsOverallViewIsNotNull() && !form.grdAreaDefinition().getSelectedRow().getValue().getIsOverallView() && form.grdAreaDefinition().getSelectedRow().getValue().getIsRegistrationAreaIsNotNull() && !form.grdAreaDefinition().getSelectedRow().getValue().getIsRegistrationArea());
		form.getContextMenus().Emergency.getAreaDefinitionRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdAreaDefinition().getSelectedRow() != null && form.getLocalContext().getSelectedAreaIsNotNull() && form.grdAreaDefinition().getSelectedRow().getValue().getIsOverallViewIsNotNull() && !form.grdAreaDefinition().getSelectedRow().getValue().getIsOverallView() && form.grdAreaDefinition().getSelectedRow().getValue().getIsRegistrationAreaIsNotNull() && !form.grdAreaDefinition().getSelectedRow().getValue().getIsRegistrationArea() && form.grdAreaDefinition().getSelectedRow().getValue().getID_TrackingArea() == null);
		form.getContextMenus().Emergency.getAreaDefinitionSendToConfigItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdAreaDefinition().getSelectedRow() != null && form.getLocalContext().getisTrackingConfigActive() && form.grdAreaDefinition().getSelectedRow().getValue().getIsOverallViewIsNotNull() && !form.grdAreaDefinition().getSelectedRow().getValue().getIsOverallView() && !ims.core.vo.lookups.PreActiveActiveInactiveStatus.INACTIVE.equals(form.grdAreaDefinition().getSelectedRow().getValue().getStatus()));
		form.getContextMenus().Emergency.getAreaDefinitionImportAreaDefinitionItem().setVisible(form.getMode().equals(FormMode.EDIT) && ! form.getLocalContext().getTrackingAreaCollectionIsNotNull()); 
	}

	private boolean isSecondToLast()
	{
		int index = form.grdAreaDefinition().getSelectedRowIndex();

		if (form.grdAreaDefinition().getRows().get(index + 1).getValue().getIsOverallViewIsNotNull() && form.grdAreaDefinition().getRows().get(index + 1).getValue().getIsOverallView())
		{
			return true;
		}

		return false;
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Emergency.AddEditArea) && DialogResult.OK.equals(result))
		{
			if (form.getLocalContext().getTrackingAreaCollection() == null)
			{
				clear();
				form.getLocalContext().setTrackingAreaCollection(new TrackingAreaVoCollection());
				addOverallView();
				addRegistrationArea();// FB
			}

			if (form.getGlobalContext().Emergency.getTrackingAreaIsNotNull() && form.getGlobalContext().Emergency.getEDLocationIsNotNull())
			{
				if (form.getLocalContext().getSelectedEventIsNotNull() && form.getLocalContext().getSelectedEvent().equals(AreaDefinitionEvent.EDIT))
				{
					addAreaDefinition(true);
				}
				else
				{
					addAreaDefinition(false);
					form.getLocalContext().setSelectedArea(form.getGlobalContext().Emergency.getTrackingArea());
					form.grdAreaDefinition().setValue(form.getGlobalContext().Emergency.getTrackingArea());
					updateControlsState();
				}
			}

		}
		else if (formName.equals(form.getForms().Emergency.EmergencyDepartmentsDialog) && DialogResult.OK.equals(result))
		{
			clear();

			if (form.getGlobalContext().Emergency.getTrackingAreaCollectionIsNotNull())
			{
				TrackingAreaVoCollection trackingArea = new TrackingAreaVoCollection();
				trackingArea = form.getGlobalContext().Emergency.getTrackingAreaCollection();

				form.getLocalContext().setTrackingAreaCollection(new TrackingAreaVoCollection());

				grdAreaDefinitionRow row;

				for (int i = 0; i < trackingArea.size(); i++)
				{
					row = form.grdAreaDefinition().getRows().newRow();

					TrackingAreaVo areaDefinition = new TrackingAreaVo();
					areaDefinition.setEDLocation(form.getGlobalContext().Emergency.getEDLocation());
					areaDefinition.setIsOverallView(trackingArea.get(i).getIsOverallView());
					areaDefinition.setIsRegistrationArea(trackingArea.get(i).getIsRegistrationArea());
					areaDefinition.setAreaDisplayName(trackingArea.get(i).getAreaDisplayName());
					areaDefinition.setAreaNameDescription(trackingArea.get(i).getAreaNameDescription());
					areaDefinition.setPatientRefreshRate(trackingArea.get(i).getPatientRefreshRate());
					areaDefinition.setStatus(trackingArea.get(i).getStatus());
					areaDefinition.setAreaType(trackingArea.get(i).getAreaType());

					row.setArea(areaDefinition.getAreaDisplayName());
					//row.setPatRefreshRate(areaDefinition.getPatientRefreshRate().toString());
					row.setStatus(areaDefinition.getStatus().toString());

					if (trackingArea.get(i).getIsRegistrationAreaIsNotNull() && trackingArea.get(i).getIsRegistrationArea())
					{
						row.setBackColor(Color.Beige);
						form.getLocalContext().setRegistrationArea(areaDefinition);
					}
					
					if (trackingArea.get(i).getIsOverallViewIsNotNull() && trackingArea.get(i).getIsOverallView())
					{
						row.setBackColor(Color.Beige);
					}

					row.setValue(areaDefinition);
				}
			}
		}
		else
		{
			if (form.getLocalContext().getSelectedEvent() == null)
			{
				form.grdAreaDefinition().setValue(null);
				form.getLocalContext().setSelectedArea(null);
				form.getGlobalContext().Emergency.setTrackingArea(null);
				//updateControlsState();
			}
		}

	}

	private void addAreaDefinition(boolean update)
	{
		grdAreaDefinitionRow row;

		form.getGlobalContext().Emergency.getTrackingArea().setEDLocation(form.getGlobalContext().Emergency.getEDLocation());

		if (update)
		{
			row = form.grdAreaDefinition().getSelectedRow();
			form.getGlobalContext().Emergency.getTrackingArea().setIsOverallView(row.getValue().getIsOverallView());
			form.getGlobalContext().Emergency.getTrackingArea().setIsRegistrationArea(row.getValue().getIsRegistrationArea());
		}
		else
		{
			form.getGlobalContext().Emergency.getTrackingArea().setIsOverallView(false);
			form.getGlobalContext().Emergency.getTrackingArea().setIsRegistrationArea(false);
			row = form.grdAreaDefinition().getRows().newRowAt(0);
		}

		row.setArea(form.getGlobalContext().Emergency.getTrackingArea().getAreaDisplayName());
		//row.setPatRefreshRate(form.getGlobalContext().Emergency.getTrackingArea().getPatientRefreshRate().toString());
		row.setStatus(form.getGlobalContext().Emergency.getTrackingArea().getStatus().toString());
		row.setValue(form.getGlobalContext().Emergency.getTrackingArea());

	}

	private void addOverallView()
	{
		TrackingAreaVo overallView = new TrackingAreaVo();
		overallView.setEDLocation(form.getGlobalContext().Emergency.getEDLocation());
		overallView.setIsOverallView(true);
		overallView.setIsRegistrationArea(false);
		overallView.setAreaDisplayName("Overall");
		overallView.setAreaNameDescription("Overall View");
		overallView.setPatientRefreshRate(50);
		overallView.setStatus(PreActiveActiveInactiveStatus.ACTIVE);

		grdAreaDefinitionRow row = form.grdAreaDefinition().getRows().newRow();
		row.setArea(overallView.getAreaDisplayName());
		//row.setPatRefreshRate(overallView.getPatientRefreshRate().toString());
		row.setStatus(overallView.getStatus().toString());
		row.setBackColor(Color.Beige);
		row.setValue(overallView);

	}

	public AreaDefinitionEvent getContextMenuSelected()
	{
		return form.getLocalContext().getSelectedEvent();
	}

	public void clear()
	{
		form.grdAreaDefinition().getRows().clear();
	}

	private void addRegistrationArea()
	{
		TrackingAreaVo registrationArea = new TrackingAreaVo();
		registrationArea.setEDLocation(form.getGlobalContext().Emergency.getEDLocation());
		registrationArea.setIsOverallView(false);
		registrationArea.setIsRegistrationArea(true);
		registrationArea.setAreaDisplayName("Registration");
		registrationArea.setAreaNameDescription("Registration Area");
		registrationArea.setPatientRefreshRate(50);
		registrationArea.setStatus(PreActiveActiveInactiveStatus.ACTIVE);

		grdAreaDefinitionRow row = form.grdAreaDefinition().getRows().newRow();
		row.setArea(registrationArea.getAreaDisplayName());
		//row.setPatRefreshRate(registrationArea.getPatientRefreshRate().toString());
		row.setStatus(registrationArea.getStatus().toString());
		row.setBackColor(Color.Beige);
		row.setValue(registrationArea);

		form.getLocalContext().setRegistrationArea(registrationArea);

	}

	public TrackingAreaVo getSelectedArea()
	{
		return form.grdAreaDefinition().getSelectedRow().getValue();
	}

	public void resetContextMenu()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

}
