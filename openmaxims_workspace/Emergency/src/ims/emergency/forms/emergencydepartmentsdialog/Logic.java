//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.emergencydepartmentsdialog;

import ims.emergency.forms.emergencydepartmentsdialog.GenForm.grdDepartmentsRow;
import ims.emergency.forms.emergencydepartmentsdialog.GenForm.grdDepartmentsRowCollection;
import ims.emergency.vo.TrackingConfigurationVoCollection;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.setMode(FormMode.EDIT);
	}

	private void open()
	{
		populateScreenFromData();
	}

	private void populateScreenFromData()
	{
		form.getGlobalContext().Emergency.setTrackingAreaCollection(null);

		TrackingConfigurationVoCollection collLocations = domain.listEDLocations();

		if (collLocations == null)
			return;

		for (int i = 0; i < collLocations.size(); i++)
		{
			grdDepartmentsRow newAreaColumn = form.grdDepartments().getRows().newRow();
			newAreaColumn.setcolDepartment(collLocations.get(i).getEDLocation().getName());
			newAreaColumn.setcolSelect(false);
			newAreaColumn.setValue(collLocations.get(i));
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!isDepartmentSelected())
		{
			engine.showMessage("Please Select a Department.", "Error", MessageButtons.OK, MessageIcon.WARNING);
		}
		else
		{
			engine.close(DialogResult.OK);
		}
	}

	private boolean isDepartmentSelected()
	{
		grdDepartmentsRowCollection departmentsCollection = form.grdDepartments().getRows();

		for (int i = 0; i < departmentsCollection.size(); i++)
		{
			if (departmentsCollection.get(i).getcolSelect())
			{
				form.getGlobalContext().Emergency.setTrackingAreaCollection(departmentsCollection.get(i).getValue().getAreas());
				return true;
			}
		}

		return false;
	}

	@Override
	protected void onGrdStatusGridCheckBoxClicked(int column, grdDepartmentsRow row, boolean isChecked) throws PresentationLogicException
	{
		clearAllRows(row, isChecked);
	}

	private void clearAllRows(grdDepartmentsRow row, boolean isChecked)
	{
		grdDepartmentsRowCollection departmentsCollection = form.grdDepartments().getRows();

		for (int i = 0; i < departmentsCollection.size(); i++)
		{
			if (departmentsCollection.get(i).getValue().getID_TrackingConfiguration() == row.getValue().getID_TrackingConfiguration())
			{
				departmentsCollection.get(i).setcolSelect(isChecked);
			}
			else
			{
				departmentsCollection.get(i).setcolSelect(false);
			}
		}
	}

}
