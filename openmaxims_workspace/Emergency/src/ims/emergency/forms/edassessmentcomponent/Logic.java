//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edassessmentcomponent;


import ims.clinical.configuration.vo.ClinicalProblemRefVo;
import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EmergencyAttendanceRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MedicRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.NurseVo;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.configuration.vo.TrackingAreaRefVo;
import ims.emergency.helper.EmergencyDisplayHelper;
import ims.emergency.vo.EmergencyAttendanceForTriageLiteVo;
import ims.emergency.vo.EmergencyAttendanceForTriageVo;
import ims.emergency.vo.EmergencyEpisodeForTriageLiteVo;
import ims.emergency.vo.EmergencyEpisodeForTriageVo;
import ims.emergency.vo.EmergencyEpisodeForTriageVoCollection;
import ims.emergency.vo.EpisodeOfcareLiteVo;
import ims.emergency.vo.HistoryOfPatientMedsVo;
import ims.emergency.vo.PatientForTriageVo;
import ims.emergency.vo.PatientMedsVo;
import ims.emergency.vo.SeenByHCPVo;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo;
import ims.emergency.vo.TrackingListForClinicianWorklistVo;
import ims.emergency.vo.TriageForClinicianWorklistVo;
import ims.emergency.vo.TriageProtocolAssessmentForTriageVo;
import ims.emergency.vo.TriageProtocolAssessmentForTriageVoCollection;
import ims.emergency.vo.enums.DischargeDetails_CustomEvents;
import ims.emergency.vo.enums.EDAssessmentComponent;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.emergency.vo.lookups.TriagePriority;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.Timer;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.framework.utils.Time;
import ims.icp.vo.enums.PresentationEvent;
import ims.icps.instantiation.vo.PatientICPRefVo;

import java.io.File;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String	COLUMN_NAME			= "0";
	private static final int EMERGENCY_PATIENT_SUMMARY = 320; 
	private static final String CARE_CONTEXT_SEED = "CareContext_id";
	private static final int DISPLAY_TRIAGE	= 1;
	private static final int DISPLAY_CLINICIANASSESSMNRWORKLIST	 	= 2;
	private static final int DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN = 3;		//wdev-17252
	private static final int DISPLAY_TRIAGE_FROM_TRACKING			= 4;			//wdev-17405
	private static final int TRACKING_SUMMARY = 10;
	private static final int TRACKING = 11;
	
	
	private enum TriagePriorityEnum //WDEV-17208
	{ 
		Priority1(TriagePriority.PRIORITY1, 1),
		Priority2(TriagePriority.PRIORITY2, 2),
		Priority3(TriagePriority.PRIORITY3, 3),
		Priority4(TriagePriority.PRIORITY4, 4),
		Priority5(TriagePriority.PRIORITY5, 5),
		SkippedTriage(TriagePriority.SKIPPED_TRIAGE, 7);
		
		private TriagePriority index;
		private Integer order;
		
		TriagePriorityEnum(TriagePriority index,Integer order)
		{
			this.index = index;
			this.order = order;
		}
		
		public TriagePriority getIndex()
		{
			return index;
		}
		
		public Integer getOrder()
		{
			return order;
		}
	}
	
	public void initialization(Integer display, TrackingForClinicianWorklistAndTriageVo tracking, Boolean showReturnLink)
	{
		form.getLocalContext().setShowTriageOrClinicianAssessmentWoklist(display);
		form.getLocalContext().setTrackingFromArgument(tracking);
		form.getLocalContext().setisFormOpenedFromOtherForm(showReturnLink);
		
		clearScreen();		//wdev-17295
		initialize();
		initializeControls();
		initialisebuttons();	//wdev-17329
		open();
		form.setMode(FormMode.VIEW);
		
		boolean isPatientSelected = form.getLocalContext().getSelectedWaitingPatient() != null;
		boolean hasSeenByHcp = isPatientSelected && form.getLocalContext().getSelectedWaitingPatient().getSeenBy() != null; //WDEV-16816
		boolean isDischarged = form.getLocalContext().getSelectedWaitingPatient() != null && Boolean.TRUE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged());  //wdev-17218 
		boolean isHistoryMode = Boolean.TRUE.equals(form.getLocalContext().getHistoryMode());
		
		if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE))
		{
			if( form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() == null && !isHistoryMode  && !isDischarged) //wdev-17218
			{
				//wdev-17286
				TrackingForClinicianWorklistAndTriageVo TrackingForClinician  = domain.getTrackingForTriage(form.getLocalContext().getSelectedWaitingPatient());
				if(TrackingForClinician != null && TrackingForClinician.getTriageDetailsIsNotNull())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					open();
				}
				else
				{
					startTriage();
					onBtnStartTriageProblemCall();   //wdev-17230
				}
			}
		}
		else if(  form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST))
		{
			form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
			
		}
		else if(  form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN))  //wdev-17252 - the same as DISPLAY_CLINICIANASSESSMNRWORKLIST but opens automatically Emergency.EDSeenByAndCompleteDialog dialog  
		{
			form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
			engine.open(form.getForms().Emergency.EDSeenByAndCompleteDialog);
			
		}

		
	}
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-16174
		/*form.getLocalContext().getisFormOpenedFromOtherForm();
		if (args != null && args.length == 2 && args[0] != null && args[1] != null && args[0] instanceof Integer && args[1] instanceof TrackingForClinicianWorklistAndTriageVo )
		{
			form.getLocalContext().setShowTriageOrClinicianAssessmentWoklist((Integer)args[0]);
			form.getLocalContext().setTrackingFromArgument((TrackingForClinicianWorklistAndTriageVo)args[1]);
			
		}
		else if (args != null && args.length == 1 && args[0] != null && args[0] instanceof Integer)
		{
			
			form.getLocalContext().setShowTriageOrClinicianAssessmentWoklist((Integer)args[0]);
			
		}
		else 
		{
			
			throw new FormOpenException("Error: The Dialog is not opened properly");
			
		}
		
		/*else if (args != null && args.length == 1 && args[0] != null && args[0] instanceof Integer)
		{
			//form.getLocalContext().setisFormOpenedFromOtherForm((Boolean)args[0]);
			form.getLocalContext().setShowTriageOrClinicianAssessmentWoklist((Integer)args[0]);
			
		}*/
		
		
		/*initialize();
		initializeControls();
		open();
		form.setMode(FormMode.VIEW);*/
	}

	private void initialize() 
	{
		if(engine.getCurrentLocation() != null)
		{
			form.getLocalContext().setAttendanceKPIConfig(domain.getAttendanceKPIConfigForClinicianWorklist(engine.getCurrentLocation()));
		}
		
		Object user = domain.getHcpLiteUser();
		if(user instanceof HcpRefVo)
		{
			form.getLocalContext().setLoggedHcp((HcpRefVo) user);
		}
		
		//form.GroupClinicianReview().setValue(GroupClinicianReviewEnumeration.rdoAll);
		createPatientGridColumns();
		
		form.lyrPatientTriage().tabPathway().ccICP().initialize();
			
		if(form.getGlobalContext().Core.getCurrentCareContext() != null)
		{
			form.getLocalContext().setSelectedWaitingPatient(domain.getTrackingForClinicianWorklistByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		}
	}

	/*@Override
	protected void onBtnStartAssessmentClick() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
		startClinicianAssessment(form.getLocalContext().getSelectedWaitingPatient());
	}*/

	private void startClinicianAssessment(TrackingForClinicianWorklistAndTriageVo tracking)
	{
		if (tracking == null)
			return;
		
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
		
		if (hcpUser == null || !HcpDisType.MEDICAL.equals(hcpUser.getHcpType()))
		{
			//engine.open(form.getForms().Emergency.AllocatedMedicDialog);
			return;
		}
		else
		{
			// Attempt to save created AllocatedMedic to tracking
			if (saveSeenByHcp(tracking, new MedicRefVo(hcpUser.getID_Hcp(), hcpUser.getVersion_Hcp())))//WDEV-16816
			{
				// Refresh screen
				open();
			}
		}
	}
	
	//WDEV-16816
	private boolean saveSeenByHcp(TrackingForClinicianWorklistAndTriageVo tracking, MedicRefVo medic)
	{
		try
		{
			// Create the SeenByHcp record to be associated with tracking
			SeenByHCPVo seenByHcp = new SeenByHCPVo();
			seenByHcp.setPatient(tracking.getPatient());
			seenByHcp.setEpisode(tracking.getEpisode().getEpisodeOfCare());
			seenByHcp.setAttendance(tracking.getAttendance().getCareContext());
			seenByHcp.setTrackingArea(tracking.getCurrentArea());

			seenByHcp.setAllocatedDateTime(new DateTime());			
			seenByHcp.setAllocatedMedic((MedicVo)domain.getHcpUser());		
			seenByHcp.setSeenDateTime(new DateTime());
			
			// Validate SeenByHcp record
			String[] errors = seenByHcp.validate();

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			form.getLocalContext().setSelectedWaitingPatient(domain.saveTrackingSeenByHcp(tracking, seenByHcp));

			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
	}

	private void createPatientGridColumns() 
	{
		//DynamicGridColumn columnName = form.dyngrdPatients().getColumns().newColumn("Name", COLUMN_NAME);
		//columnName.setWidth(298);
	}

	private void open() 
	{
		//searchWaitingForClinicianReview();
		long startTime = System.currentTimeMillis();//WDEV-17337
		
		selectedInstance();
		updateControlsState();
		
		//WDEV-17337
		long endTime = System.currentTimeMillis();
		long miliseconds = endTime - startTime;
		System.out.println("Time to Populate the Form: " + miliseconds);
	}
	
	

	private void clearScreen() 
	{
		//form.dyngrdPatients().getRows().clear();
		form.lblPatientCategory().setValue(null);	//wdev-16751
		form.lblPresentingComplaint().setValue(null);
		form.lblPresentingProblem().setValue(null);
		form.qmbPresentingProblem().clear();		//wdev-16751
		form.imgTriagePriority().setValue(null);
		form.lblDiscriminator().setValue(null);
		form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().clear();//WDEV-16791
		form.lyrPatientTriage().tabPageCoding().ccCoding().clear();//WDEV-17014
		form.lyrPatientTriage().tabPageHEARTSCoding().ccHeartsCoding().clear();
		form.grdProblem().getRows().clear();
		form.ccAlert().clear();
		form.ccAllergy().clear();
		form.grdAttendanceHistory().getRows().clear();
		//form.dtimIncidentTime().setValue(null);
		form.dtimArrivalTime().setValue(null);
		form.dtimRegistrationTime().setValue(null);
		form.txtLOS().setValue(null);//WDEV-15818
		form.dtimTriageStartTime().setValue(null);
		form.dtimTriageEndTime().setValue(null);
		form.dtimMedicStartTime().setValue(null);
		form.dtimDischargeBreachTime().setValue(null);
		form.dtimDischBreachTime().setValue(null);	//wdev-16751
	}

			
	
	private void deletePatientImages() 
	{
		List<String> importedFiles = form.getLocalContext().getPatientImagesList();
		
		if (importedFiles != null && importedFiles.size() > 0)
		{
			for (Iterator<String> iterator = importedFiles.iterator(); iterator.hasNext();) 
			{
				String file = ((String) iterator.next()).replace("/", "\\");
				File f = new File(file);
				f.delete();											
			}
		}
	}
	
	private Image getPriorityImage(TrackingListForClinicianWorklistVo tracking) 
	{
		if(tracking == null || tracking.getTriageDetails() == null)
			return null;
		
		if(TriagePriority.PRIORITY1.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P1;
		else if(TriagePriority.PRIORITY2.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P2;
		else if(TriagePriority.PRIORITY3.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P3;
		else if(TriagePriority.PRIORITY4.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P4;
		else if(TriagePriority.PRIORITY5.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P5;
		else if(TriagePriority.SKIPPED_TRIAGE.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_SkippedTriage;
		
		return null;
	}

		
		
		
	//@Override
	/*protected void onDyngrdPatientsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{
		form.lyrPatientTriage().showtabNotes();
		
		selectedInstance();
		updateControlsState();
	}*/
	//wdev-17295
	private void clearTooltips()
	{
		
		form.dtimArrivalTime().setTooltip(" ");
		form.dtimRegistrationTime().setTooltip(" ");
		form.dtimTriageStartTime().setTooltip(" ");
		form.dtimTriageEndTime().setTooltip(" ");
		form.dtimMedicStartTime().setTooltip(" ");
    	form.dtimDischargeBreachTime().setTooltip(" ");
		form.dtimDischBreachTime().setTooltip(" ");


	}
	//-------------


	private void setTooltips()
	{
		/*if (form.dtimIncidentTime().getValue() != null)
		{
			form.dtimIncidentTime().setTooltip("Time since Incident: " + EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimIncidentTime().getValue())));
		}*/
		
		if (form.dtimArrivalTime().getValue() != null)
		{
			String arrivalTime  = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimArrivalTime().getValue()));  //wdev-17330
			if( arrivalTime == null )
				arrivalTime = "0 m";
			
			form.dtimArrivalTime().setTooltip("Time since Arrival: " + arrivalTime);
		}
		
		if (form.dtimRegistrationTime().getValue() != null)
		{
			String registrationTime = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimRegistrationTime().getValue())); //wdev-17330
			if( registrationTime == null )
				registrationTime = "0 m";
			
			form.dtimRegistrationTime().setTooltip("Time since Registration: " + registrationTime);
		}
		
		if (form.dtimTriageStartTime().getValue() != null)
		{
			String startTri = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimTriageStartTime().getValue())); //wdev-17282
			if( startTri == null )
				startTri = "0 m";
			form.dtimTriageStartTime().setTooltip("Time since Triage Start: " + startTri);	//wdev-17282
		}
		
		if (form.dtimTriageEndTime().getValue() != null)
		{
			//wdev-17295
			String triageEndTime = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimTriageEndTime().getValue()));
			if( triageEndTime == null)
				triageEndTime = "0 m";
			form.dtimTriageEndTime().setTooltip("Time since Triage End: " + triageEndTime);
		}
		
		///if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST))
		//{
    		if (form.dtimMedicStartTime().getValue() != null)
    		{
    			//wdev-17295
    			String clin = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimMedicStartTime().getValue()));
    			if( clin == null)
    				clin = "0 m";
    			form.dtimMedicStartTime().setTooltip("Time since Medic Intervention: " + clin);   //wdev-17295
    		}
		//}
		
		if ( form.dtimDischargeBreachTime().getValue() != null)
		{
			if( form.dtimDischargeBreachTime().getValue().isGreaterOrEqualThan(new DateTime()))   //wdev-17370
			{
				form.dtimDischargeBreachTime().setTooltip("Time since Breached: 0 m");
			}
			else
			{
			
				String dischargeBreachTime  = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimDischargeBreachTime().getValue())); //wdev-17330
				if( dischargeBreachTime == null )
					dischargeBreachTime = "0 m";
				
				form.dtimDischargeBreachTime().setTooltip("Time since Breached: " + dischargeBreachTime);
			}
		}
		if (form.dtimDischBreachTime().getValue()!= null)
		{
			//wdev-17876
			if( form.getLocalContext().getSelectedWaitingPatientIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged()))
			{
				form.dtimDischBreachTime().setTooltip("Departure Date Time: " + form.dtimDischBreachTime().getValue().toString());//WDEV-17920
			}
			else
			{
			
				if( form.dtimDischBreachTime().getValue().isGreaterOrEqualThan(new DateTime()))   //wdev-17370
				{
					form.dtimDischBreachTime().setTooltip("Time since Departure Breached: 0 m");//WDEV-17920
				}
				else
				{
				
					String dischBreachTime = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimDischBreachTime().getValue())); // wdev-17330
					if( dischBreachTime == null )
						dischBreachTime = "0 m";
					form.dtimDischBreachTime().setTooltip("Time since Departure Breached: " + dischBreachTime);//WDEV-17920
				}
			}
		}
	}

	private void selectedInstance() 
	{
		form.getLocalContext().setHistoryMode(false);
		form.getLocalContext().setSelectedWaitingPatient(null);
		
		if( form.getLocalContext().getTrackingFromArgument() instanceof TrackingForClinicianWorklistAndTriageVo)
		{
			//WDEV-17745
			if (form.getLocalContext().getTrackingFromArgument().getAttendance() != null && form.getLocalContext().getTrackingFromArgument().getAttendance().getDischargeDateTime() != null)
			{
				form.getLocalContext().setHistoryMode(true);
			}
			
			form.getGlobalContext().Emergency.setTracking(form.getLocalContext().getTrackingFromArgument());
			form.getLocalContext().setSelectedWaitingPatient(domain.getTrackingForTriage(form.getLocalContext().getTrackingFromArgument()));
			form.getLocalContext().setTrackingFromArgument(null);//wdev-17598
		}
		else if(form.getGlobalContext().Core.getCurrentCareContext() != null)
		{
			 TrackingForClinicianWorklistAndTriageVo TrackingForClinician = domain.getTrackingForClinicianWorklistByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			//WDEV-15951
			if (TrackingForClinician != null && TrackingForClinician.getAttendanceIsNotNull() && TrackingForClinician.getAttendance().getDischargeDateTimeIsNotNull())
			{
				form.getLocalContext().setHistoryMode(true); //wdev-16064
			}
			
			form.getLocalContext().setSelectedWaitingPatient(TrackingForClinician);
			form.getGlobalContext().Emergency.setTracking(form.getLocalContext().getSelectedWaitingPatient());
			//form.dyngrdPatients().setValue(form.getLocalContext().getSelectedWaitingPatient());
			
		}
		
		if(form.getLocalContext().getSelectedWaitingPatient() != null)
		{
			form.getGlobalContext().Emergency.setTriage(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails());
			
			if(form.getLocalContext().getSelectedWaitingPatient().getEpisode() != null)
			{
				form.getLocalContext().setCurrentEpisode((EmergencyEpisodeForTriageLiteVo) form.getLocalContext().getSelectedWaitingPatient().getEpisode().clone());
			}
			if(form.getLocalContext().getSelectedWaitingPatient().getAttendance() != null && form.getLocalContext().getSelectedWaitingPatient().getAttendance().getDischargeDateTime() == null)
			{
				form.getLocalContext().setCurrentAttendance((EmergencyAttendanceForTriageLiteVo) form.getLocalContext().getSelectedWaitingPatient().getAttendance().clone());
			}
		}
		
		populateScreenFromData();
	}

	private void populateScreenFromData() 
	{
		if(form.getLocalContext().getSelectedWaitingPatient() == null)
			return;
		
		PatientForTriageVo patient = form.getLocalContext().getSelectedWaitingPatient().getPatient();
		EpisodeOfCareRefVo episode = form.getLocalContext().getSelectedWaitingPatient().getEpisode().getEpisodeOfCare();
		CareContextRefVo careContext = form.getLocalContext().getSelectedWaitingPatient().getAttendance().getCareContext();
		
		ClinicalProblemRefVo problem = null;
		if(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMainPresentingProblem() != null)
		{
			problem = form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMainPresentingProblem().getProblem();
		}
		
		PatientICPRefVo icp = form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null ? form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriagePathway() : null;
		
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(patient));//WDEV-15815
		form.getGlobalContext().Core.setEpisodeofCareShort(domain.getEpisodeOfCare(episode));
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(careContext));
		
		populateOtherDetails(patient);
		initializePatientTriageLayer(patient, episode, careContext, problem, icp,form.getLocalContext().getSelectedWaitingPatient());  //wdev-17819
		
		
	}

	private void populateOtherDetails(PatientForTriageVo patient) 
	{
		populateOtherProblems();
		
		form.ccAllergy().refresh();
		form.ccAlert().refresh();
		
		populateAttendanceHisyory(patient);
		
		form.imgTriagePriority().setValue(getPriorityImageByTriagePriority());
		form.lblPresentingComplaint().setValue((form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getEpisode().getPresentingComplaint() != null) ? form.getLocalContext().getSelectedWaitingPatient().getEpisode().getPresentingComplaint().getText() : "");
		//wdev-16751
		if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE_FROM_TRACKING) ))   //wdev-17405
		{
			form.qmbPresentingProblem().clear();
			
			if(form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMainPresentingProblem() != null)
			{
				ClinicalProblemShortVo problem = domain.getClinicalProblemShortVo(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMainPresentingProblem().getProblem());
				
				if(problem != null)
				{
					form.qmbPresentingProblem().newRow(problem, problem.getPCName());
					form.qmbPresentingProblem().setValue(problem);
				}
			}
		}
		else if(form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST) ||form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN)))  //wdev-17252
		{
			form.lblPresentingProblem().setValue((form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMainPresentingProblem() != null) ? form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMainPresentingProblem().getPatientProblem() : null);
		}
		
		
		//-------------
		form.lblDiscriminator().setValue((form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriageAssessment() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriageAssessment().getDiscriminator() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriageAssessment().getDiscriminator().getDiscriminator() != null) ? form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriageAssessment().getDiscriminator().getDiscriminator().getDiscriminatorName() : "");
		form.lblPatientCategory().setValue(form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getEpisodeIsNotNull() && form.getLocalContext().getSelectedWaitingPatient().getEpisode().getCategoryIsNotNull() ? form.getLocalContext().getSelectedWaitingPatient().getEpisode().getCategory().getText():"" );
		
		populateAttendanceTimes();
		
		if (ConfigFlag.UI.USE_HEARTS_CONTRACTING.getValue())//wdev-17486
			populateHEARTSCodinglabels();
	}

	private void populateOtherProblems() 
	{
		form.grdProblem().getRows().clear();
		
		if(form.getGlobalContext().Core.getCurrentCareContext() == null)
			return;
		
		TriageProtocolAssessmentForTriageVoCollection otherProblems = domain.listOtherProblems(form.getGlobalContext().Core.getCurrentCareContext());
		
		for(TriageProtocolAssessmentForTriageVo otherProblem : otherProblems)
		{
			addOtherProblemRow(otherProblem);
		}
	}

	private void addOtherProblemRow(TriageProtocolAssessmentForTriageVo otherProblem) 
	{
		if(otherProblem == null)
			return;
		
		ims.emergency.forms.edassessmentcomponent.GenForm.grdProblemRow row = form.grdProblem().getRows().newRow();
		
		row.setColOtherProblems(otherProblem.getPatientProblem() != null ? otherProblem.getPatientProblem().getPatientProblem() : null);
		row.setColDiscriminator((otherProblem.getDiscriminator() != null && otherProblem.getDiscriminator().getDiscriminator() != null) ? otherProblem.getDiscriminator().getDiscriminator().getDiscriminatorName() : null);
		
		row.setValue(otherProblem);
	}

	private Image getPriorityImageByTriagePriority() 
	{
		if(form.getLocalContext().getSelectedWaitingPatient() == null || form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() == null)
			return null;
		
		if(TriagePriority.PRIORITY1.equals(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P1;
		else if(TriagePriority.PRIORITY2.equals(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P2;
		else if(TriagePriority.PRIORITY3.equals(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P3;
		else if(TriagePriority.PRIORITY4.equals(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P4;
		else if(TriagePriority.PRIORITY5.equals(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P5;
		else if(TriagePriority.SKIPPED_TRIAGE.equals(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_SkippedTriage;
		
		return null;
	}

	private void populateAttendanceTimes() 
	{
		if(form.getLocalContext().getSelectedWaitingPatient() == null)
			return;
		
		//form.dtimIncidentTime().setValue(form.getLocalContext().getSelectedWaitingPatient().getEpisode() != null ? form.getLocalContext().getSelectedWaitingPatient().getEpisode().getInjuryDateTime() : null);
		form.dtimArrivalTime().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance() != null ? form.getLocalContext().getSelectedWaitingPatient().getAttendance().getArrivalDateTime() : null);
		form.dtimRegistrationTime().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance() != null ? form.getLocalContext().getSelectedWaitingPatient().getAttendance().getRegistrationDateTime() : null);
		form.dtimTriageStartTime().setValue(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null ? form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getTriageStartDateTime() : null);
		form.dtimTriageEndTime().setValue(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null ? form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getTriageCompletionTime() : null);
		
		if( ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))	//wdev-18327
			form.txtLOS().setValue(EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimRegistrationTime().getValue())));//WDEV-15818,wdev-18299, wdev-18327
		else
			form.txtLOS().setValue(EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimArrivalTime().getValue())));//WDEV-15818,wdev-18299
		
		//if(	form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST))
		//form.dtimMedicStartTime().setValue(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null ? form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMedicInterventionStartDateTime() : null);
		//wdev-17645
		SeenByHCPVo seenVo =  domain.getFirstSeenByHCP(form.getGlobalContext().Core.getCurrentCareContext());
		form.dtimMedicStartTime().setValue(seenVo != null && seenVo.getSeenDateTimeIsNotNull() ? seenVo.getSeenDateTime():null); 
		//---------
		if( ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))	//wdev-18327
			form.dtimDischargeBreachTime().setValue(calculateBreachTime(form.dtimRegistrationTime().getValue()));  //wdev-16751 //WDEV-18323
		else
			form.dtimDischargeBreachTime().setValue(calculateBreachTime(form.dtimArrivalTime().getValue()));  //wdev-16751 //WDEV-18323
		//wdev-17876
		if( form.getLocalContext().getSelectedWaitingPatient().getIsDischargedIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged()) && form.getLocalContext().getSelectedWaitingPatient().getAttendanceIsNotNull()) //wdev-18318 -added a double check that was not necesary
		{
			form.dtimDischBreachTime().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance().getDischargeDateTime());
			form.lbl1().setValue("Date Time:");	//wdev-17945
		}
		else
		{
			if( ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))	//wdev-18327
				form.dtimDischBreachTime().setValue(calculateDischargeBreachTime(form.dtimRegistrationTime().getValue()));//WDEV-18323
			else
				form.dtimDischBreachTime().setValue(calculateDischargeBreachTime(form.dtimArrivalTime().getValue()));//WDEV-18323
			
			form.lbl1().setValue("Breach Time:");	//wdev-17945
		}
	}
	
	private DateTime calculateDischargeBreachTime(DateTime registrationDateTime) 
	{
		if(registrationDateTime == null)
			return null;
		
		if(form.getLocalContext().getAttendanceKPIConfig() == null || form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPI() == null)
			return null;
		
		return ((DateTime) registrationDateTime.clone()).addMinutes(form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPI());
	}
	//wdev-16751
	private DateTime calculateBreachTime(DateTime registrationDateTime) 
	{
		if(registrationDateTime == null)
			return null;
		
		if(form.getLocalContext().getAttendanceKPIConfig() == null || form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI() == null)
			return null;
		
		return ((DateTime) registrationDateTime.clone()).addMinutes(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI());
	}
	//--------------

	private Integer calculateDateDiffInMinutes(DateTime currentTime, DateTime registrationDateTime) 
	{
		if(currentTime == null || registrationDateTime == null)
			return null;
		
		long currentTimeInMillis = currentTime.getJavaDate().getTime();
		long registrationDateTimeInMillis = registrationDateTime.getJavaDate().getTime();
		
		return (int)(((currentTimeInMillis < registrationDateTimeInMillis ? registrationDateTimeInMillis - currentTimeInMillis : currentTimeInMillis - registrationDateTimeInMillis)/1000)/60);
	}

	private void populateAttendanceHisyory(PatientForTriageVo patient) 
	{
		form.grdAttendanceHistory().getRows().clear();
		form.getLocalContext().setCountOfPreviousAttendances(new Integer(0));	//wdev-16072
		if(patient == null)
			return;
		
		EmergencyEpisodeForTriageVoCollection attendanceHistory = domain.listAttendanceHistory(patient);
		
		if(attendanceHistory == null)
		{
			form.getLocalContext().setCountOfPreviousAttendances(0);		//wdev-16072
			form.lbl18().setValue("Attendance History");					//wdev-16072
			return;
		}
		
		for(EmergencyEpisodeForTriageVo emergencyEpisode : attendanceHistory)
		{
			addEmergencyEpisodeRow(emergencyEpisode);
		}
		
		form.grdAttendanceHistory().setValue(null);
		if(form.getLocalContext().getSelectedWaitingPatient() != null)
		{
			form.grdAttendanceHistory().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance());
		}
		
		form.grdAttendanceHistory().resetScrollPosition();
		//wdev-16072 //WDEV-17898
		if( form.getLocalContext().getCountOfPreviousAttendances() > 0)
		{
			Integer nrcount = new Integer(form.getLocalContext().getCountOfPreviousAttendances());
			form.lbl18().setValue("Attendance History - "+nrcount.toString() + " previous" );				
		}
		else
		{
			form.lbl18().setValue("Attendance History");
		}
		//-----------------end wdev-16072
		
	}

	private void addEmergencyEpisodeRow(EmergencyEpisodeForTriageVo emergencyEpisode) 
	{
		if(emergencyEpisode == null)
			return;
		
		ims.emergency.forms.edassessmentcomponent.GenForm.grdAttendanceHistoryRow row = form.grdAttendanceHistory().getRows().newRow();
		EpisodeOfcareLiteVo tempVo = domain.getEpisodeOfCareLite(emergencyEpisode.getEpisodeOfCare());	//wdev-16070
		row.setColID(emergencyEpisode.getID_EmergencyEpisode().toString() + (tempVo != null ? " - " + tempVo.getStartDate().toString() : ""));	//wdev-16070
		row.setBold(true);
		
		row.setValue((EmergencyEpisodeForTriageLiteVo) emergencyEpisode);
		
		if(emergencyEpisode.getEmergencyAttendances() == null)
			return;
		
		row.setExpanded(true);
		
		for(EmergencyAttendanceForTriageVo emergencyAttendance : emergencyEpisode.getEmergencyAttendances())
		{
			addEmergencyAttendanceRow(row, emergencyAttendance);
			
			//wdev-16072 WDEV-17703 //WDEV-17898
			if (emergencyAttendance.getDischargeDateTime() != null) 
			{
				int nrPreviousAttendances = form.getLocalContext().getCountOfPreviousAttendances();
				nrPreviousAttendances += 1;
				form.getLocalContext().setCountOfPreviousAttendances(nrPreviousAttendances);
			}
			//wdev-16072
		}
	}

	private void addEmergencyAttendanceRow(ims.emergency.forms.edassessmentcomponent.GenForm.grdAttendanceHistoryRow row,	EmergencyAttendanceForTriageVo emergencyAttendance) 
	{
		if(row == null || emergencyAttendance == null)
			return;
		
		ims.emergency.forms.edassessmentcomponent.GenForm.grdAttendanceHistoryRow childRow = row.getRows().newRow();
		childRow.setColID(emergencyAttendance.getID_EmergencyAttendance().toString() + (emergencyAttendance.getRegistrationDateTimeIsNotNull() ? " - " + emergencyAttendance.getRegistrationDateTime().toString() : ""));
		
		childRow.setValue((EmergencyAttendanceForTriageLiteVo) emergencyAttendance);
	}

	private void initializePatientTriageLayer(PatientForTriageVo patient, EpisodeOfCareRefVo episode, CareContextRefVo careContext, ClinicalProblemRefVo problem, PatientICPRefVo icp, TrackingForClinicianWorklistAndTriageVo tracking) 
	{
	
		//wdev-16751
		if(form.lyrPatientTriage().tabNotes().isVisible() &&  form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE_FROM_TRACKING) )) //WDEV-17337, wdev-17405
		{
			form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().initialize(patient, episode, careContext, problem,form.getForms().Emergency.EDTriageWorklistToAssessmentForm);//WDEV-16791
		}
		else if(form.lyrPatientTriage().tabNotes().isVisible() && form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN))) //wdev-17252 //WDEV-17337
		{
			form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().initialize(patient, episode, careContext, problem, form.getForms().Emergency.EDClinicianWorklistToAssessmentForm);//WDEV-16791
		}
		//----------
		
		
		//WDEV-15996
		if (form.lyrPatientTriage().tabObs().isVisible() && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()==false)//WDEV-17337
		{
			form.lyrPatientTriage().tabObs().ccVitalSigns().initialize();
		}
		else if (form.lyrPatientTriage().tabObs2().isVisible())//WDEV-17337
		{
			initializeObsLayerTabs();
		}
		
		if (form.lyrPatientTriage().tabPatientMeds().isVisible())//WDEV-17337
		{
			form.lyrPatientTriage().tabPatientMeds().ccPatientMeds().initialize(patient, careContext, episode,tracking);
		}
		else if (form.lyrPatientTriage().tabRelevantPMH().isVisible())//WDEV-17337
		{
			form.lyrPatientTriage().tabRelevantPMH().ccRelevantPMH().initialize(careContext, patient, episode);
		}
		else if (form.lyrPatientTriage().tabSysReview().isVisible())//WDEV-17337
		{
			form.lyrPatientTriage().tabSysReview().ccSystemReview().initialize(careContext, episode, patient, problem);
		}
		else if (form.lyrPatientTriage().tabPathway().isVisible())//WDEV-17337
		{
			form.lyrPatientTriage().tabPathway().ccICP().setValue(icp);
		}
		else if (form.lyrPatientTriage().tabSupport().isVisible())//WDEV-17337
		{
			form.lyrPatientTriage().tabSupport().ccSupportService().initialize(careContext, episode, patient);
		}
		else if (form.lyrPatientTriage().tabPageOutcome().isVisible())//WDEV-17337
		{
			form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().setValue(careContext);
		}
		else if (form.lyrPatientTriage().tabPageCoding().isVisible())//WDEV-17337
		{
			form.lyrPatientTriage().tabPageCoding().ccCoding().initialize(patient, episode, careContext, true);//WDEV-17014
		}
		else if (form.lyrPatientTriage().tabPageHEARTSCoding().isVisible())//WDEV-17486
		{
			form.lyrPatientTriage().tabPageHEARTSCoding().ccHeartsCoding().initialize(patient, episode, careContext, true);//WDEV-17486
		}
		else if( form.lyrPatientTriage().tabWoundImages().isVisible())	//wdev-17977
		{
			form.lyrPatientTriage().tabWoundImages().ccEDAssessmentWoundImages().initialize(patient, careContext, episode);	//wdev-17977
		}
		
		//wdev-16751
		if(form.lyrPatientTriage().tabDischargeDetails().isVisible() &&  form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE_FROM_TRACKING) ))//WDEV-17337,wdev-17405
		{
			form.lyrPatientTriage().tabDischargeDetails().ccDischargeDetails_AdviceMobility().setValue(form.qmbPresentingProblem().getValue(), careContext);
			//form.lyrPatientTriage().tabDischargeDetails().ccDischarge().setValue(careContext, form.qmbPresentingProblem().getValue());
		}
		else if (form.lyrPatientTriage().tabDischargeDetails().isVisible())//WDEV-17337
			form.lyrPatientTriage().tabDischargeDetails().ccDischargeDetails_AdviceMobility().setValue(problem, careContext);
			//form.lyrPatientTriage().tabDischargeDetails().ccDischarge().setValue(careContext, problem);
		//-------
	}

	//WDEV-15996
	private void initializeObsLayerTabs()
	{
		if (form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().isVisible())
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().initialize();
		}
		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().isVisible())
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().initialize();
		}
		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().isVisible())
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().initialize();
		}
		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().isVisible())
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().initialize();
		}
		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().isVisible())
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().initialize();	
		}
	}

	private void updateControlsState() 
	{
		clearTooltips();	//wdev-17295
		setTooltips(); //WDEV-15820
		
		boolean isTriageCreated = form.getLocalContext().getSelectedWaitingPatientIsNotNull() && form.getLocalContext().getSelectedWaitingPatient().getTriageDetailsIsNotNull();
		boolean isPatientSelected = form.getLocalContext().getSelectedWaitingPatient() != null;
		boolean isPatientFemale = isPatientSelected && form.getLocalContext().getSelectedWaitingPatient().getPatientIsNotNull() && ims.core.vo.lookups.Sex.FEMALE.equals(form.getLocalContext().getSelectedWaitingPatient().getPatient().getSex());    //wdev-17255
		//WDEV-17738
		boolean isQuickRegistrationPatient = form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getPatient() != null && Boolean.TRUE.equals(form.getLocalContext().getSelectedWaitingPatient().getPatient().getIsQuickRegistrationPatient());
		
		//boolean hasMedicAllocated = isPatientSelected && form.getLocalContext().getSelectedWaitingPatient().getCurrentAllocatedMedic() != null;//WDEV-16816
		//boolean isDischarged=form.getLocalContext().getSelectedWaitingPatient()!=null && form.getLocalContext().getSelectedWaitingPatient().getIsDischarged() != null && Boolean.TRUE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged());//WDEV-17153
		boolean hasMainPresentingProblem = ((form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMainPresentingProblem() != null) ? true : false);
		boolean hasMedicInterventionStartDateTime = ((form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMedicInterventionStartDateTimeIsNotNull()) ? true : false);
		boolean hasPresentingComplaint = form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getEpisode() != null && form.getLocalContext().getSelectedWaitingPatient().getEpisode().getPresentingComplaintIsNotNull();
		
		form.btnAddMainProblem().setVisible(false);	//wdev-17381
		
		
		//wdev-16751
		
		if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE_FROM_TRACKING) ))   //wdev-17405
		{
			//boolean isTriageCreated = form.getLocalContext().getSelectedWaitingPatientIsNotNull() && form.getLocalContext().getSelectedWaitingPatient().getTriageDetailsIsNotNull();
			form.qmbPresentingProblem().setVisible(isTriageCreated);
			form.qmbPresentingProblem().setEnabled(isTriageCreated  && form.qmbPresentingProblem().getValue() == null);  //wdev-17250,wdev-17381
			
		}
		
		//------------
		
		form.imgTriagePriority().setVisible(isPatientSelected && form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriagePriority() != null);
		
		if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE_FROM_TRACKING) )) //wdev-17405
		{
			form.btnEditMainProblem().setVisible(isPatientSelected && FormMode.VIEW.equals(form.getMode()) && form.qmbPresentingProblem().getValue() != null );   //wdev-17250,wdev-17381
			
			//WDEV-15996
			form.lyrPatientTriage().tabObs().setHeaderVisible(false/*!ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);
			form.lyrPatientTriage().tabObs().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) && !ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());   //wdev-17232
			
			form.lyrPatientTriage().tabObs2().setHeaderVisible(true/*ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);
			form.lyrPatientTriage().tabObs2().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) /*&& ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/); //wdev-17232
			form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode())/* && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/); //wdev-17232
			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode())/* && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/); //wdev-17232
			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) /*&& ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);   //wdev-17232
			
			form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().setHeaderVisible(isPatientFemale && FormMode.VIEW.equals(form.getMode()));     //wdev-17255
			
			form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) /*&& ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);        //wdev-17232
			form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) /*&& ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);      //wdev-17232 
			
			if (form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().setEnabled(isPatientSelected);  //wdev-17232
			}
			else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().isVisible())//WDEV-17337 
			{
				form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().setEnabled(isPatientSelected);		//wdev-17232
			}
			else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().isVisible())//WDEV-17337 
			{
				form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().setEnabled(isPatientSelected);			//wdev-17232
			}
			else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().isVisible())//WDEV-17337 
			{
				form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().setEnabled(isPatientSelected);					//wdev-17232
			}
			else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().isVisible())//WDEV-17337 
			{
				form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().setEnabled(isPatientSelected);	//wdev-17232	
			}
			//end WDEV-15996
			
			form.lyrPatientTriage().tabSysReview().setHeaderVisible(false);  	//wdev-17361
			form.lyrPatientTriage().tabSysReview().setHeaderEnabled(false);		//wdev-17361
			
			
			form.lyrPatientTriage().tabPatientMeds().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
			form.lyrPatientTriage().tabRelevantPMH().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
			form.lyrPatientTriage().tabSupport().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
			form.lyrPatientTriage().tabPathway().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
			
			form.lyrPatientTriage().tabDischargeDetails().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
			form.lyrPatientTriage().tabPageOutcome().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
			form.lyrPatientTriage().tabPageCoding().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
			form.lyrPatientTriage().tabPageHEARTSCoding().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));//wdev-17598
			form.lyrPatientTriage().tabWoundImages().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));		//wdev-17977	
			
			if (form.lyrPatientTriage().tabNotes().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));//WDEV-16791
			}
			else if (form.lyrPatientTriage().tabObs().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabObs().ccVitalSigns().setEnabled(isPatientSelected);
			}
			else if (form.lyrPatientTriage().tabPathway().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabPathway().ccICP().setReadOnly(!(isPatientSelected && FormMode.VIEW.equals(form.getMode())));
			}
			else if (form.lyrPatientTriage().tabPatientMeds().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabPatientMeds().ccPatientMeds().setEnabled(isPatientSelected);
			}
			else if (form.lyrPatientTriage().tabRelevantPMH().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabRelevantPMH().ccRelevantPMH().setEnabled(isPatientSelected);
			}
			else if (form.lyrPatientTriage().tabSupport().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabSupport().ccSupportService().setEnabled(isPatientSelected);
			}
			else if (form.lyrPatientTriage().tabDischargeDetails().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabDischargeDetails().ccDischargeDetails_AdviceMobility().setReadOnly(!(isPatientSelected));  //wdev-17350
			}
			else if (form.lyrPatientTriage().tabPageOutcome().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().setReadOnly(! (isPatientSelected));
			}
			else if (form.lyrPatientTriage().tabPageCoding().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabPageCoding().ccCoding().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));//WDEV-17014
			}
			else if (form.lyrPatientTriage().tabPageHEARTSCoding().isVisible())
			{
				form.lyrPatientTriage().tabPageHEARTSCoding().ccHeartsCoding().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));//WDEV-17014
				form.lyrPatientTriage().tabPageHEARTSCoding().btnRefresh().setVisible(isPatientSelected && FormMode.VIEW.equals(form.getMode()) && engine.hasRight(AppRight.CAN_REFRESH_CONTRACT_CODING) && ConfigFlag.UI.USE_HEARTS_CONTRACTING.getValue());//WDEV-17839
			}
			else if( form.lyrPatientTriage().tabWoundImages().isVisible())  //wdev-17977
			{
				form.lyrPatientTriage().tabWoundImages().ccEDAssessmentWoundImages().setReadOnly(!(isPatientSelected)); 
			}
			
			//WDEV-17686
			form.ccAlert().setMode(form.getMode());
			form.ccAllergy().setMode(form.getMode());
			
			form.ccAllergy().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) && !engine.hasRight(AppRight.CANNOT_EDIT_ALLERGIES_COMPONENT));//WDEV-17605
			form.ccAlert().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) && !engine.hasRight(AppRight.CANNOT_EDIT_ALERTS_COMPONENT));//WDEV-17605
			
			form.ccAllergy().hideButtons(engine.hasRight(AppRight.CANNOT_EDIT_ALLERGIES_COMPONENT));//WDEV-17605
			form.ccAlert().hideButtons(engine.hasRight(AppRight.CANNOT_EDIT_ALERTS_COMPONENT));//WDEV-17605
			
			if( hasMedicInterventionStartDateTime )
			{
				//form.dtimMedicStartTime().setVisible(true);
				//form.lbl5().setVisible(true);
				//form.lbl12().setVisible(true);
				form.btnMovePatient().setText("Save + Move");
			}
			else
			{
				//form.dtimMedicStartTime().setVisible(false);
				//form.lbl5().setVisible(false);
				//form.lbl12().setVisible(false);
				form.btnMovePatient().setText("Move");
			}
			
		}
		else
		{

			form.btnAddMainProblem().setVisible(isPatientSelected && isTriageCreated && FormMode.VIEW.equals(form.getMode()) /*&& !Boolean.TRUE.equals(form.getLocalContext().getHistoryMode())*/ && !hasMainPresentingProblem);	//wdev-17381
			
			
			form.btnEditMainProblem().setVisible(isPatientSelected && FormMode.VIEW.equals(form.getMode()) /* &&  !Boolean.TRUE.equals(form.getLocalContext().getHistoryMode()) */&& hasMainPresentingProblem);  //wdev-17250
    				
    		//WDEV-15996
    		form.lyrPatientTriage().tabObs().setHeaderVisible(false/*!ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);
    		form.lyrPatientTriage().tabObs().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) && !ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());
    		
    		form.lyrPatientTriage().tabObs2().setHeaderVisible(true/*ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);
    		form.lyrPatientTriage().tabObs2().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) /*&& ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);
    		form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode())/* && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);
    		form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) /*&& ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);
    		form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) /*&& ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);
    		
    		form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().setHeaderVisible(isPatientFemale && FormMode.VIEW.equals(form.getMode()));		//wdev-17255
    		form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) /*&& ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);
    		form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode())/* && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()*/);
    		
    		if (form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().isVisible())//WDEV-17337
    		{
    			form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().setEnabled(isPatientSelected);
    		}
    		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().isVisible())//WDEV-17337
    		{
    			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().setEnabled(isPatientSelected);
    		}
    		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().isVisible())//WDEV-17337
    		{
    			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().setEnabled(isPatientSelected);
    		}
    		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().isVisible())//WDEV-17337
    		{
    			form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().setEnabled(isPatientSelected);
    		}
    		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().isVisible())//WDEV-17337
    		{
    			form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().setEnabled(isPatientSelected);
    		}
    		else if (form.lyrPatientTriage().tabDischargeDetails().isVisible())//WDEV-17337,wdev-17350
			{
				form.lyrPatientTriage().tabDischargeDetails().ccDischargeDetails_AdviceMobility().setReadOnly(!(isPatientSelected));  //wdev-17350
			}
    		//end WDEV-15996
    		
    		form.lyrPatientTriage().tabPatientMeds().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
    		form.lyrPatientTriage().tabSysReview().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
    		form.lyrPatientTriage().tabRelevantPMH().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
    		form.lyrPatientTriage().tabPathway().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
    		form.lyrPatientTriage().tabSupport().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
    		form.lyrPatientTriage().tabDischargeDetails().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
    		form.lyrPatientTriage().tabPageOutcome().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
			form.lyrPatientTriage().tabPageCoding().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
			form.lyrPatientTriage().tabPageHEARTSCoding().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));//wdev-17598
			form.lyrPatientTriage().tabWoundImages().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));		//wdev-17977
			
			if (form.lyrPatientTriage().tabNotes().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));//WDEV-16791
			}
			else if (form.lyrPatientTriage().tabObs().isVisible())//WDEV-17337
    		{
				form.lyrPatientTriage().tabObs().ccVitalSigns().setEnabled(isPatientSelected);
    		}
			else if (form.lyrPatientTriage().tabPathway().isVisible())//WDEV-17337
    		{
				form.lyrPatientTriage().tabPathway().ccICP().setReadOnly(!(isPatientSelected && FormMode.VIEW.equals(form.getMode())));
    		}
    		//if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST))  //wdev-16751
			else if (form.lyrPatientTriage().tabSysReview().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabSysReview().ccSystemReview().setEnabled(isPatientSelected);
			}
			else if (form.lyrPatientTriage().tabPatientMeds().isVisible())//WDEV-17337
    		{
				form.lyrPatientTriage().tabPatientMeds().ccPatientMeds().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
    		}
			else if (form.lyrPatientTriage().tabRelevantPMH().isVisible())//WDEV-17337
    		{
				form.lyrPatientTriage().tabRelevantPMH().ccRelevantPMH().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));
    		}
			else if (form.lyrPatientTriage().tabSupport().isVisible())//WDEV-17337
    		{
				form.lyrPatientTriage().tabSupport().ccSupportService().setEnabled(isPatientSelected);
    		}
    		//form.lyrPatientTriage().tabDischargeDetails().ccDischarge().setReadOnly(!(isPatientSelected && !isHistoryMode));	
			else if (form.lyrPatientTriage().tabPageOutcome().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().setReadOnly(! (isTriageCreated));
			}
			else if (form.lyrPatientTriage().tabPageCoding().isVisible())//WDEV-17337
			{
				form.lyrPatientTriage().tabPageCoding().ccCoding().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));//WDEV-17014
			}
			else if (form.lyrPatientTriage().tabPageHEARTSCoding().isVisible())
			{
				form.lyrPatientTriage().tabPageHEARTSCoding().ccHeartsCoding().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));//WDEV-17014
				form.lyrPatientTriage().tabPageHEARTSCoding().btnRefresh().setVisible(isPatientSelected && FormMode.VIEW.equals(form.getMode()) && engine.hasRight(AppRight.CAN_REFRESH_CONTRACT_CODING) && ConfigFlag.UI.USE_HEARTS_CONTRACTING.getValue());//WDEV-17839
			}
			else if( form.lyrPatientTriage().tabWoundImages().isVisible())  //wdev-17977
			{
				form.lyrPatientTriage().tabWoundImages().ccEDAssessmentWoundImages().setReadOnly(!(isPatientSelected)); 
			}
			
			//WDEV-17686
			form.ccAlert().setMode(form.getMode());
			form.ccAllergy().setMode(form.getMode());
			
			//WDEV-16791
    		form.ccAllergy().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()) && !engine.hasRight(AppRight.CANNOT_EDIT_ALLERGIES_COMPONENT));//WDEV-17605
    		form.ccAlert().setEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode())&& !engine.hasRight(AppRight.CANNOT_EDIT_ALERTS_COMPONENT));//WDEV-17605
    		
    		form.ccAllergy().hideButtons(engine.hasRight(AppRight.CANNOT_EDIT_ALLERGIES_COMPONENT));//WDEV-17605
			form.ccAlert().hideButtons(engine.hasRight(AppRight.CANNOT_EDIT_ALERTS_COMPONENT));//WDEV-17605
    		
		}
		
		
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE_FROM_TRACKING) ))   //wdev-17405
			{
				
				form.btnSeenCompleteHCP().setVisible(isPatientSelected && ( form.getLocalContext().getSelectedWaitingPatient().getIsDischarged() == null || Boolean.FALSE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged())));//WDEV-16816 //WDEV-17177
				form.btnDTA().setVisible(isPatientSelected && !Boolean.TRUE.equals(form.getLocalContext().getHistoryMode()) && !isQuickRegistrationPatient);
				form.btnReferToSpecialty().setVisible(isPatientSelected && ( form.getLocalContext().getSelectedWaitingPatient().getIsDischarged() == null || Boolean.FALSE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged())));//WDEV-17177
				form.btnMovePatient().setVisible(isPatientSelected && (form.getLocalContext().getSelectedWaitingPatient().getIsDischarged() == null || Boolean.FALSE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged())));
			
			}
			else if(form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN) )) //wdev-17252
			{
				
				form.btnReferToSpecialty().setVisible(isPatientSelected && ( form.getLocalContext().getSelectedWaitingPatient().getIsDischarged() == null || Boolean.FALSE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged())));//WDEV-17177
				form.btnDTA().setVisible(isPatientSelected && !Boolean.TRUE.equals(form.getLocalContext().getHistoryMode()) && !isQuickRegistrationPatient);
				form.btnSeenCompleteHCP().setVisible(isPatientSelected && ( form.getLocalContext().getSelectedWaitingPatient().getIsDischarged() == null || Boolean.FALSE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged())));//WDEV-16816 //WDEV-17177
				form.btnMovePatient().setVisible(isPatientSelected && (form.getLocalContext().getSelectedWaitingPatient().getIsDischarged() == null || Boolean.FALSE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged())));
			}
			form.btnOrder().setVisible(isPatientSelected && ( form.getLocalContext().getSelectedWaitingPatient().getIsDischarged() == null || Boolean.FALSE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged())));  //wdev-17040
			form.btnOrder().setEnabled(isPatientSelected && ( form.getLocalContext().getSelectedWaitingPatient().getIsDischarged() == null || Boolean.FALSE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged())));
			form.btnStartTriage().setVisible(isPatientSelected && ( form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() == null && !Boolean.TRUE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged()))); 	//wdev-17230
			form.btnStartTriage().setEnabled(isPatientSelected && ( form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() == null && !Boolean.TRUE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged())));	//wdev-17230
			
			//wdev-17464
			if( isPatientSelected && ( form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() == null && !Boolean.TRUE.equals(form.getLocalContext().getSelectedWaitingPatient().getIsDischarged())) )
				form.btnStartTriage().setFocus();
			//------
			
		}
		else if (FormMode.EDIT.equals(form.getMode()))
		{
			form.btnDTA().setVisible(false);
		}
		
		//if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN)))  //wdev-17252,wdev-17630
		//	form.dtimMedicStartTime().setEnabled(form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriagePriority() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMedicInterventionStartDateTime() == null && FormMode.VIEW.equals(form.getMode()));
		if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE_FROM_TRACKING) )) //wdev-17405
		{
			if( form.getLocalContext().getSelectedWaitingPatient() != null && form.dtimMedicStartTime().getValue() != null) //wdev-16751, wdev-17704
			{
				form.dtimMedicStartTime().setVisible(true);
				form.lbl5().setVisible(true);
				form.lbl12().setVisible(true);
			}
			else
			{
				form.dtimMedicStartTime().setVisible(false);
				form.lbl5().setVisible(false);
				form.lbl12().setVisible(false);
			}
		
			
		}
		form.dtimMedicStartTime().setEnabled(false); //wdev-17630
		
		form.getContextMenus().Emergency.getOtherProblemsTriageMenuADDItem().setVisible(isPatientSelected && isTriageCreated && FormMode.VIEW.equals(form.getMode()));  //wdev-17244
		form.getContextMenus().Emergency.getOtherProblemsTriageMenuEDITItem().setVisible(isPatientSelected  && FormMode.VIEW.equals(form.getMode()) && form.grdProblem().getValue() != null);
		
		//WDEV-16174
		form.lnkReturnToList().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getisFormOpenedFromOtherFormIsNotNull() && form.getLocalContext().getisFormOpenedFromOtherForm());
		
		form.lyrPatientTriage().tabNotes().setHeaderVisible(true);//WDEV-16791
		form.lyrPatientTriage().tabNotes().setHeaderEnabled(isPatientSelected && FormMode.VIEW.equals(form.getMode()));//WDEV-16791
		
	}

	@Override
	protected void onCcVitalSignsValueChanged()	throws PresentationLogicException 
	{
		//WDEV-17337
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabObs().ccVitalSigns().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabObs().ccVitalSigns().getSelectedEvent()))
		{
			form.lyrPatientTriage().tabObs().ccVitalSigns().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode vitalSignMode = form.lyrPatientTriage().tabObs().ccVitalSigns().getMode();
		form.setMode(vitalSignMode);

		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(vitalSignMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}

	@Override
	protected void onGrdProblemSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}
	
	@Override
	protected void onBtnReferToSpecialtyClick()	throws PresentationLogicException 
	{
		form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
		engine.open(form.getForms().Emergency.EDReferralToSpecialtyDialog);//WDEV-16777
	}

	@Override
	protected void onBtnMovePatientClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
		//boolean hasMedicInterventionStartDateTime = ((form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMedicInterventionStartDateTimeIsNotNull()) ? true : false);
		if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE_FROM_TRACKING) ) )  //wdev-17405
		{
			if(form.getLocalContext().getSelectedWaitingPatient() == null)
				return;
			
			/*if( hasMedicInterventionStartDateTime )
			{
				if(saveMedicStartTime())
	    			open();
			}*/
			
			form.getLocalContext().setOldTrackingArea(form.getLocalContext().getSelectedWaitingPatient().getCurrentArea());
			engine.open(form.getForms().Emergency.SendToAreaDialog, new Object[] {Boolean.TRUE});
		}
		else if(form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN)))   //wdev-17252
		{
			if( form.getLocalContext().getSelectedWaitingPatient() != null)	//wdev-17921    		
				form.getLocalContext().setOldTrackingArea(form.getLocalContext().getSelectedWaitingPatient().getCurrentArea());
			
    		engine.open(form.getForms().Emergency.SendToAreaDialog, new Object[] {Boolean.TRUE});
		}
	}

	private boolean saveMedicStartTime() 
	{
		
		if(form.getLocalContext().getSelectedWaitingPatient() == null || form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() == null)
			return false;
		
		if(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMedicInterventionStartDateTime() != null || form.dtimMedicStartTime().getValue() == null)
			return false;
		
		form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().setMedicInterventionStartDateTime(form.dtimMedicStartTime().getValue());
		String[] errors = form.getLocalContext().getSelectedWaitingPatient().validate(validateUIRules()); //wdev-17295
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			domain.saveMedicStartTime(form.getLocalContext().getSelectedWaitingPatient());
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
	//wdev-17295
	private String[] validateUIRules()
	{
		
		ArrayList<String> errorList = new ArrayList<String>();
		
		if( form.dtimMedicStartTime().isVisible() &&  form.dtimRegistrationTime().getValue() != null && form.dtimMedicStartTime().getValue() != null /*&& form.dtimMedicStartTime().getValue().isLessThan(form.dtimRegistrationTime().getValue())*/)
		{
			Date dtMedicStartTime = form.dtimMedicStartTime().getValue().getDate();
			Time tMedicStartTime = form.dtimMedicStartTime().getValue().getTime();
			
			Date dtRegistrationTime = form.dtimRegistrationTime().getValue().getDate();
			Time tRegistrationTime = form.dtimRegistrationTime().getValue().getTime();
			
			if( dtMedicStartTime.isLessThan(dtRegistrationTime))
				errorList.add("Clinician Start Time cannot be less than Registration End Time");
			else if( dtMedicStartTime.equals(dtRegistrationTime))
			{
				if( tMedicStartTime.isLessThan(tRegistrationTime))
					errorList.add("Clinician Start Time cannot be less than Registration End Time");
			}
		}
		if( form.dtimMedicStartTime().isVisible() &&  form.dtimTriageStartTime().getValue() != null && form.dtimMedicStartTime().getValue() != null /*&& form.dtimMedicStartTime().getValue().isLessThan(form.dtimTriageStartTime().getValue())*/)
		{
			
			
			
			Date dtMedicStartTime = form.dtimMedicStartTime().getValue().getDate();
			Time tMedicStartTime = form.dtimMedicStartTime().getValue().getTime();
			
			Date dtTriageStartTime= form.dtimTriageStartTime().getValue().getDate();
			Time tTriageStartTime = form.dtimTriageStartTime().getValue().getTime();
			
			if( dtMedicStartTime.isLessThan(dtTriageStartTime))
				errorList.add("Clinician Start Time cannot be less than Triage Start Time");
			else if( dtMedicStartTime.equals(dtTriageStartTime))
			{
				if( tMedicStartTime.isLessThan(tTriageStartTime))
					errorList.add("Clinician Start Time cannot be less than Triage Start Time");
			}
				
		}
		if( form.dtimMedicStartTime().isVisible() && form.dtimMedicStartTime().getValue() != null && form.dtimMedicStartTime().getValue().isGreaterThan(new DateTime()))
		{
			errorList.add("Clinician Start Time cannot be in the future");
		}

		
		return errorList.toArray(new String[errorList.size()]);
	}


	private Integer getOrderByIndex(TriagePriority priority)
	{
		for(TriagePriorityEnum item : TriagePriorityEnum.values())
		{
			if(item.getIndex().equals(priority))
				return item.getOrder();
		}
		
		return null;
	}
	
	class TrackingComparator implements Comparator<TrackingListForClinicianWorklistVo>
	{
		public int compare(TrackingListForClinicianWorklistVo o1, TrackingListForClinicianWorklistVo o2)
		{
			if (o1 != null && o1.getTriageDetails() != null && o1.getTriageDetails().getCurrentTriagePriority() != null && o2!=null && o2.getTriageDetails() != null && o2.getTriageDetails().getCurrentTriagePriority() != null)
			{
				Integer priorityOrder1 = getOrderByIndex(o1.getTriageDetails().getCurrentTriagePriority());
				Integer priorityOrder2 = getOrderByIndex(o2.getTriageDetails().getCurrentTriagePriority());
				
				int orderByPriority = priorityOrder1.compareTo(priorityOrder2);
				
				if(orderByPriority == 0)
				{
					return compareByLOS(o1, o2);
				}
				
				return orderByPriority;
			}
			
			if((o1 == null || o1.getTriageDetails() == null || o1.getTriageDetails().getCurrentTriagePriority() == null) && (o2 == null || o2.getTriageDetails() == null || o2.getTriageDetails().getCurrentTriagePriority() == null))
				return compareByLOS(o1, o2);
			
			if (o1 == null || o1.getTriageDetails() == null || o1.getTriageDetails().getCurrentTriagePriority() == null)
				return 1;
			
			if (o2 == null || o2.getTriageDetails() == null || o2.getTriageDetails().getCurrentTriagePriority() == null)
				return -1;
			
			return 0;
		}

		private int compareByLOS(TrackingListForClinicianWorklistVo o1, TrackingListForClinicianWorklistVo o2) 
		{
			if(o1 != null && o1.getAttendance() != null && o1.getAttendance().getRegistrationDateTime() != null && o2 != null && o2.getAttendance() != null && o2.getAttendance().getRegistrationDateTime() != null)
			{
				Integer LOS1 = calculateDateDiffInMinutes(new DateTime(), o1.getAttendance().getRegistrationDateTime());
				Integer LOS2 = calculateDateDiffInMinutes(new DateTime(), o2.getAttendance().getRegistrationDateTime());
				
				int orderByLOS = -1 * LOS1.compareTo(LOS2);
				
				if(orderByLOS == 0)
				{
					return compareByName(o1, o2);
				}
				
				return orderByLOS;
			}
			
			if (o1 == null || o1.getAttendance() == null || o1.getAttendance().getRegistrationDateTime() == null)
				return -1;
			
			if (o2 == null || o2.getAttendance() == null || o2.getAttendance().getRegistrationDateTime() == null)
				return 1;
			
			return 0;
		}

		private int compareByName(TrackingListForClinicianWorklistVo o1, TrackingListForClinicianWorklistVo o2) 
		{
			if(o1 != null && o1.getPatient() != null && o1.getPatient().getName() != null && o2 != null && o2.getPatient() != null && o2.getPatient().getName() != null)
			{
				return o1.getPatient().getName().compareTo(o2.getPatient().getName(), true);
			}
			
			if (o1 == null || o1.getPatient() == null || o1.getPatient().getName() == null)
				return -1;
			
			if (o2 == null || o2.getPatient() == null || o2.getPatient().getName() == null)
				return 1;
			
			return 0;
		}
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException 
	{
		//WDEV-17337
		System.out.println("Ed Attendance Details timer = " + ConfigFlag.UI.ED_ATTENDANCE_DETAILS_TIMER_INTERVAL.getValue());
		refreshOtherDetails();
	}

	
	private void clearGlobalContexts() 
	{
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().Core.setEpisodeofCareShort(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Emergency.setTracking(null);
		form.getGlobalContext().Emergency.setTriage(null);
	}

	@Override
	protected void onCcSupportServiceValueChanged()	throws PresentationLogicException 
	{
		//WDEV-17337
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabSupport().ccSupportService().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabSupport().ccSupportService().getSelectedEvent()))
		{
			form.lyrPatientTriage().tabSupport().ccSupportService().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode supportServiceMode = form.lyrPatientTriage().tabSupport().ccSupportService().getMode();
		form.setMode(supportServiceMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(supportServiceMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	@Override
	protected void onCcPatientMedsValueChanged() throws PresentationLogicException 
	{
		//WDEV-17337
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabPatientMeds().ccPatientMeds().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabPatientMeds().ccPatientMeds().getSelectedEvent()))
		{
			form.lyrPatientTriage().tabPatientMeds().ccPatientMeds().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode patMedsMode = form.lyrPatientTriage().tabPatientMeds().ccPatientMeds().getMode();
		form.setMode(patMedsMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(patMedsMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	@Override
	protected void onCcRelevantPMHValueChanged() throws PresentationLogicException 
	{
		//WDEV-17337
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabRelevantPMH().ccRelevantPMH().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabRelevantPMH().ccRelevantPMH().getSelectedEvent()))
		{
			form.lyrPatientTriage().tabRelevantPMH().ccRelevantPMH().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode relevPMHMode = form.lyrPatientTriage().tabRelevantPMH().ccRelevantPMH().getMode();
		form.setMode(relevPMHMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(relevPMHMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	@Override
	protected void onBtnEditMainProblemClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
		if(form.getLocalContext().getSelectedWaitingPatient() == null || form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() == null || form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriageAssessment() == null)
			return;
		
		
		form.getGlobalContext().Emergency.setTriage(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails());		//wdev-17381
		form.getGlobalContext().Emergency.setTriageProtocolAssessment(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriageAssessment());
		engine.open(form.getForms().Emergency.TriageProtocolAssessment);
	}
	//wdev-17230
	private void onBtnStartTriageProblemCall()
	{
		if( form.getLocalContext().getSelectedWaitingPatient().getTriageDetailsIsNotNull()) //wdev-17287
		{
			form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
			form.getGlobalContext().Emergency.setTriage(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails());		//wdev-17381
			form.getGlobalContext().Emergency.setTriageProtocolAssessment(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriageAssessment()); 
			engine.open(form.getForms().Emergency.TriageProtocolAssessment,new Object[] {Boolean.TRUE});
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.OtherProblemsTriageMenu.ADD:
				form.getGlobalContext().Emergency.setTriageProtocolAssessment(null);
				engine.open(form.getForms().Emergency.TriageProtocolAssessment);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.OtherProblemsTriageMenu.EDIT:
				form.getGlobalContext().Emergency.setTriageProtocolAssessment(form.grdProblem().getValue());
				engine.open(form.getForms().Emergency.TriageProtocolAssessment);
			break;
		}
	}

	
	@Override
	protected void onGrdAttendanceHistorySelectionChanged() throws PresentationLogicException 
	{
		selectedAttendanceHistory();
	}
	
	private void selectedAttendanceHistory() 
	{
		form.getLocalContext().setHistoryMode(false);
		
		
		if(form.grdAttendanceHistory().getValue() instanceof EmergencyAttendanceForTriageLiteVo)
		{
			
			if (form.getLocalContext().getCurrentAttendance() == null) //WDEV-15951, wdev-16751
			{
				EmergencyAttendanceForTriageLiteVo attendance = domain.getEmergencyAttendance((EmergencyAttendanceRefVo) form.grdAttendanceHistory().getValue());
				
				if (attendance.getDischargeDateTime() == null)
				{
					form.getLocalContext().setCurrentAttendance(attendance);
				}
			}
			
			
			if(!form.grdAttendanceHistory().getValue().equals(form.getLocalContext().getCurrentAttendance()))
			{
				form.getLocalContext().setHistoryMode(true);
				form.getLocalContext().setMessageBoxIdForOldEmergencyAttendance(engine.showMessage("Do you wish to view the clinician details for the attendance on " + ((EmergencyAttendanceForTriageLiteVo) form.grdAttendanceHistory().getValue()).getRegistrationDateTime(), "" , MessageButtons.YESNO, MessageIcon.QUESTION));
				
				//WDEV-17745
				form.getLocalContext().setCurrentEvent(EDAssessmentComponent.STOP_TIMER);
				form.fireCustomControlValueChanged();
				
			}
			else
			{
				form.getLocalContext().setSelectedWaitingPatient(domain.geTrackingForTriageByAttendanceId((EmergencyAttendanceForTriageLiteVo) form.grdAttendanceHistory().getValue()));
				form.getGlobalContext().Emergency.setTracking(form.getLocalContext().getSelectedWaitingPatient()); //WDEV-17739
				//form.dyngrdPatients().setValue(form.getLocalContext().getSelectedWaitingPatient());
				
				populateScreenFromData();
				updateControlsState();
			}
		}
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getMessageBoxIdForOldEmergencyAttendanceIsNotNull() && form.getLocalContext().getMessageBoxIdForOldEmergencyAttendance().equals(messageBoxId))
		{
			if(DialogResult.YES.equals(result) && form.grdAttendanceHistory().getValue() instanceof EmergencyAttendanceForTriageLiteVo)
			{
				form.getLocalContext().setSelectedWaitingPatient(domain.geTrackingForTriageByAttendanceId((EmergencyAttendanceForTriageLiteVo) form.grdAttendanceHistory().getValue()));
				//form.dyngrdPatients().setValue(form.getLocalContext().getSelectedWaitingPatient());
				form.getLocalContext().setCurrentAttendance(null);
				
				populateScreenFromData();
				updateControlsState();
			}
			//WDEV-15951
			else if (DialogResult.NO.equals(result) && form.grdAttendanceHistory().getValue() instanceof EmergencyAttendanceForTriageLiteVo)//WDEV-15868
			{
				form.getLocalContext().setHistoryMode(false);
				form.grdAttendanceHistory().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance());
			}
			
			//WDEV-17745
			form.getLocalContext().setCurrentEvent(EDAssessmentComponent.START_TIMER);
			form.fireCustomControlValueChanged();
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		form.getGlobalContext().Emergency.setMainPresentingProblem(null);
		
		//WDEV-15951
		if (form.getLocalContext().getHistoryMode() == null)
		{
			form.getLocalContext().setHistoryMode(false);
		}
		
		
		if (form.getForms().Emergency.SendToAreaDialog.equals(formName))
		{
			if (DialogResult.OK.equals(result))
			{
				
					saveTrackingWithWaitingToBeSeenStatus();

					// WDEV-17428
					if (Boolean.TRUE.equals(form.getLocalContext().getFinishedTriage()))
					{
						form.getLocalContext().setFinishedTriage(null);
						engine.open(form.getForms().Core.PrintReport);
					}
					// clearGlobalContexts(); //WDEV-17623
				
			}
		}
		
		
		open();
	}
	private void saveTrackingWithWaitingToBeSeenStatus() 
	{
		if(form.getLocalContext().getSelectedWaitingPatient() == null)
			return;
		
		form.getLocalContext().setSelectedWaitingPatient(domain.getTrackingForTriage(form.getLocalContext().getSelectedWaitingPatient()));
		TrackingForClinicianWorklistAndTriageVo tracking = populateTrackingWithWaitingToBeSeenStatus((TrackingForClinicianWorklistAndTriageVo) form.getLocalContext().getSelectedWaitingPatient().clone());
		
		if(tracking == null)
			return;
		
		String[] errors = tracking.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{	
			TrackingForClinicianWorklistAndTriageVo tempTracking = (TrackingForClinicianWorklistAndTriageVo) form.getLocalContext().getSelectedWaitingPatient().clone();//WDEV-17428
			
			form.getLocalContext().setSelectedWaitingPatient(domain.saveTracking(tracking,null,null));	//wdev-15930,wdev-17825
			
			//WDEV-17428
			if (tempTracking.getTriageDetailsIsNotNull() && tempTracking.getTriageDetails().getTriageCompletionTime()==null && tracking.getTriageDetails().getTriageCompletionTime()!=null) //wdev-17937
			{
				form.getLocalContext().setFinishedTriage(true);
			}
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
	}
	private TrackingForClinicianWorklistAndTriageVo populateTrackingWithWaitingToBeSeenStatus(TrackingForClinicianWorklistAndTriageVo tracking) 
	{
		if(tracking == null)
			return null;
		
		if( tracking.getTriageDetailsIsNotNull())  //wdev-17937
			tracking.setCurrentStatus(createTrackingStatus(TrackingStatus.WAITING_TO_BE_SEEN_BY_A_MEDIC));
		//wdev-16751
		if( tracking.getTriageDetailsIsNotNull() && !tracking.getTriageDetails().getTriageCompletionTimeIsNotNull() )
			tracking.getTriageDetails().setTriageCompletionTime(new DateTime());
		//--------
		
		return tracking;
	}

	private TrackingAttendanceStatusVo createTrackingStatus(TrackingStatus waitingToBeSeenByAMedic) 
	{
		TrackingAttendanceStatusVo status = new TrackingAttendanceStatusVo();
		
		status.setPatient(form.getGlobalContext().Core.getPatientShort());
		status.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		status.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		status.setTrackingArea(form.getLocalContext().getOldTrackingArea());
		status.setStatusDatetime(new DateTime());
		
		Object mos = domain.getMosUser();
		if(mos instanceof MemberOfStaffRefVo)
		{
			status.setCreatedBy((MemberOfStaffRefVo) mos);
		}
		
		status.setStatus(waitingToBeSeenByAMedic);
		
		status.setPrevStatus((form.getLocalContext().getSelectedWaitingPatient()!=null && form.getLocalContext().getSelectedWaitingPatient().getCurrentStatus()!=null  ) ? form.getLocalContext().getSelectedWaitingPatient().getCurrentStatus().getStatus() : null);//WDEV-16777
	
		return status;
	}
	private boolean hasCurentTrackingPriority() 
	{
		if(form.getLocalContext().getSelectedWaitingPatient() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() != null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getCurrentTriagePriority() != null)
			return true;
		
		return false;
	}


	//WDEV-15996
	@Override
	protected void onFormClosing(CancelArgs args) throws PresentationLogicException 
	{
		deletePatientImages();
		
		/*if(	form.getLocalContext().getFormthatShouldBeOpenedIsNotNull() &&  form.getLocalContext().getFormthatShouldBeOpened() == TRACKING_SUMMARY)
			engine.open(form.getForms().Emergency.TrackingSummary);
		else if( form.getLocalContext().getFormthatShouldBeOpenedIsNotNull() &&  form.getLocalContext().getFormthatShouldBeOpened() == TRACKING)
			engine.open(form.getForms().Emergency.Tracking);*/
			
			
	}

	//WDEV-15996
	@Override
	protected void onCcVitalSignsObsValueChanged() throws PresentationLogicException
	{
		//WDEV-17337
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().getSelectedEvent()))
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode vitalSignsObsMode = form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().getMode();
		form.setMode(vitalSignsObsMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(vitalSignsObsMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	//WDEV-15996
	@Override
	protected void onCcUrinalysisValueChanged() throws PresentationLogicException
	{ 
		//WDEV-17337
		if (EdAssessment_CustomControlsEvents.SAVE.equals( form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals( form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().getSelectedEvent()))
		{
			 form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode urinalysisMode = form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().getMode();
		form.setMode(urinalysisMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(urinalysisMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	//WDEV-15996
	@Override
	protected void onCcUrineToxValueChanged() throws PresentationLogicException
	{
		//WDEV-17337
		if (EdAssessment_CustomControlsEvents.SAVE.equals( form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().getSelectedEvent()) || EdAssessment_CustomControlsEvents.RIE.equals( form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().getSelectedEvent()) )
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode urineToxMode = form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().getMode();
		form.setMode(urineToxMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(urineToxMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	//WDEV-15996
	@Override
	protected void onCcHCGValueChanged() throws PresentationLogicException
	{
		//WDEV-17337
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().getSelectedEvent()) || EdAssessment_CustomControlsEvents.RIE.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().getSelectedEvent()) )
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode hcgMode = form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().getMode();
		form.setMode(hcgMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(hcgMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	//WDEV-15996
	@Override
	protected void onCcPatientAssessmentValueChanged() throws PresentationLogicException
	{
		//WDEV-17337
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().getSelectedEvent()))
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode patAssessmentMode = form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().getMode();
		form.setMode(patAssessmentMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(patAssessmentMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	//WDEV-15996
	@Override
	protected void onlyrPatientTriageTabChanged(LayerBridge tab)
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			open();
		}
	}

	//WDEV-15996
	@Override
	protected void onlyrObs2TabChanged(LayerBridge tab)
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			open();//WDEV-17337
		}
	}

	
	//wdev-17230
	protected void onBtnStartTriageClick() throws PresentationLogicException
	{
		//wdev-17286
		TrackingForClinicianWorklistAndTriageVo TrackingForClinician  = domain.getTrackingForTriage(form.getLocalContext().getSelectedWaitingPatient());
		if(TrackingForClinician != null && TrackingForClinician.getTriageDetailsIsNotNull())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
		}
		else
		{
			startTriage();
			onBtnStartTriageProblemCall();   //wdev-17230
		}
		
	}
	
	private void startTriage()
	{
		form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
		//wdev-15930
		form.getLocalContext().setAllocatedNurse(null);
		
		if(domain.getHcpUser() instanceof Hcp)
		{
			Hcp temp = (Hcp)domain.getHcpUser();
			if(temp != null)
			{
				HcpDisType hcptype =getParentNodeHcp(temp.getHcpType()); 
				if( hcptype != null && hcptype.equals(HcpDisType.NURSING))
					form.getLocalContext().setAllocatedNurse(new SeenByHCPVo());//WDEV-16816
			}
		}
		//---------
		//wdev-17825
		PatientMedsVo patmedVo = null;
		String NhsNumber = null;
		if( form.getLocalContext().getSelectedWaitingPatientIsNotNull())
		    NhsNumber = domain.getNHSNumber(form.getLocalContext().getSelectedWaitingPatient().getPatient());
		
		if( NhsNumber != null)
		{
			HistoryOfPatientMedsVo tempVo = domain.getHistoryOfPatientMedsVo(NhsNumber);
			if( tempVo != null)
			{
				patmedVo = new PatientMedsVo();
			

				patmedVo.setPatient(form.getLocalContext().getSelectedWaitingPatientIsNotNull() ? form.getLocalContext().getSelectedWaitingPatient().getPatient():null);
				patmedVo.setAttendance(form.getLocalContext().getSelectedWaitingPatientIsNotNull() && form.getLocalContext().getSelectedWaitingPatient().getAttendanceIsNotNull() ? form.getLocalContext().getSelectedWaitingPatient().getAttendance().getCareContext():null);
				patmedVo.setEpisode(form.getLocalContext().getSelectedWaitingPatientIsNotNull() && form.getLocalContext().getSelectedWaitingPatient().getEpisodeIsNotNull() ? form.getLocalContext().getSelectedWaitingPatient().getEpisode().getEpisodeOfCare():null);
	
				patmedVo.setMedicationDetailsFromGP(tempVo.getExternalMedDetails());		
				
				
	
				AuthoringInformationVo authoringInfo = new AuthoringInformationVo();
	
				authoringInfo.setAuthoringDateTime(new DateTime());
	
				Object hcp = domain.getHcpUser();
				if (hcp instanceof HcpLiteVo)
				{
					authoringInfo.setAuthoringHcp((HcpLiteVo) domain.getHcpUser());
				}
	
				patmedVo.setAuthoringInformation(authoringInfo);
			}
		}
		//------
		if( saveTracking(patmedVo))	//wdev-17825
		{
			open();
			
		}
	}
	private boolean saveTracking( PatientMedsVo patmedVo) 
	{
		if(form.getLocalContext().getSelectedWaitingPatient() == null)
			return false;
		
		TrackingForClinicianWorklistAndTriageVo tracking = populateTrackingWithTriage((TrackingForClinicianWorklistAndTriageVo) form.getLocalContext().getSelectedWaitingPatient().clone());
		
		if(tracking == null)
			return false;
		
		//wdev-15930
		SeenByHCPVo allocNurseVo = populateAllocatedNurse();	//wdev-15930 //WDEV-16816
		form.getLocalContext().setAllocatedNurse(allocNurseVo) ;//WDEV-16816
				
		String[] errors = tracking.validate();	
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setSelectedWaitingPatient(domain.saveTracking(tracking,form.getLocalContext().getAllocatedNurse(),patmedVo)); //wdev-15930 //WDEV-16816,wdev-17825
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			//open();
		}
		
		return true;
	}
	private TrackingForClinicianWorklistAndTriageVo populateTrackingWithTriage(TrackingForClinicianWorklistAndTriageVo tracking) 
	{
		if(tracking == null)
			return null;
		
		if(tracking.getTriageDetails() == null)
		{
			tracking.setTriageDetails(createNewTriage(tracking.getCurrentArea()));
		}
		
		return tracking;
	}

	private TriageForClinicianWorklistVo createNewTriage(TrackingAreaRefVo currentArea) 
	{
		TriageForClinicianWorklistVo triage = new TriageForClinicianWorklistVo();
		triage.setPatient(form.getGlobalContext().Core.getPatientShort());
		triage.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		triage.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		triage.setTriageStartDateTime(new DateTime());
		triage.setTrackingArea(currentArea);
		
		return triage;
	}

	//wdev-15930 //WDEV-16816
	private SeenByHCPVo populateAllocatedNurse()
	{
		if( form.getLocalContext().getAllocatedNurseIsNotNull())
		{
			SeenByHCPVo tempVo = form.getLocalContext().getAllocatedNurse();
			tempVo.setPatient(form.getLocalContext().getSelectedWaitingPatient().getPatient());
			tempVo.setAttendance(form.getLocalContext().getSelectedWaitingPatient().getAttendance().getCareContext());
			tempVo.setEpisode(form.getLocalContext().getSelectedWaitingPatient().getEpisode().getEpisodeOfCare());
			tempVo.setTrackingArea(form.getLocalContext().getSelectedWaitingPatient().getCurrentArea());
			tempVo.setAllocatedDateTime(new DateTime());
			tempVo.setSeenDateTime(new DateTime());
			if(domain.getHcpUser() instanceof NurseVo)
			{
				NurseVo tempHcpVo = (NurseVo) domain.getHcpUser();
				tempVo.setAllocatedNurse(tempHcpVo);
			}
			
			return tempVo;
			
		}
		
		return null;
	}
	//wdev-15930
	private HcpDisType getParentNodeHcp(HcpDisType hcpvo)
	{
		if(hcpvo == null)
			return null;
		if(hcpvo.getParent() == null)
			return hcpvo;
		else
			return getParentNodeHcp(hcpvo.getParent());
		
	}


	//wdev-16751
	protected void onQmbPresentingProblemValueChanged() throws PresentationLogicException
	{
		if(form.qmbPresentingProblem().getValue() == null || form.getLocalContext().getSelectedWaitingPatient() == null || form.getLocalContext().getSelectedWaitingPatient().getTriageDetails() == null)
			return;
		
		form.getGlobalContext().Emergency.setMainPresentingProblem(form.qmbPresentingProblem().getValue());
		form.getGlobalContext().Emergency.setTriageProtocolAssessment(null);
		
		engine.open(form.getForms().Emergency.TriageProtocolAssessment, new Object[] {form.getLocalContext().getSelectedWaitingPatient().getEpisode().getPresentingComplaint()});
		
	}

	//wdev-16751
	protected void onQmbPresentingProblemTextSubmited(String value) throws PresentationLogicException
	{
		listPresentingProblems(value);
		form.qmbPresentingProblem().showOpened();//WDEV-17647
		
	}
	//wdev-16751
	private void listPresentingProblems(String problemText) //WDEV-17647
	{
		form.qmbPresentingProblem().clear();
		
		ClinicalProblemShortVoCollection problems = domain.listClinicalProblems(problemText);
		
		if(problems == null || problems.size() == 0)
			return;
		
		for(ClinicalProblemShortVo problem : problems)
		{
			if(problem == null)
				continue;
			
			form.qmbPresentingProblem().newRow(problem, problem.getPCName());
		}
	
	}
	
	private void initializeControls() 
	{
		//WDEV-16791
		if( form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_TRIAGE_FROM_TRACKING) ))  //wdev-17405
		{
			form.dtimMedicStartTime().setVisible(false);
			form.lbl5().setVisible(false);
			form.lbl12().setVisible(false);
			form.btnSeenCompleteHCP().setVisible(true);//WDEV-16816
			form.btnDTA().setVisible(true);
			
			form.lyrPatientTriage().tabObs().setHeaderVisible(false);
			form.btnMovePatient().setText("Save + Move");
			
			form.lyrPatientTriage().showtabNotes();//WDEV-17498
			
			form.lyrPatientTriage().tabObs().setCaption("Obs");
			form.lyrPatientTriage().tabObs2().setCaption("Obs");
			form.lyrPatientTriage().tabPathway().setCaption("Pathway");
			form.lyrPatientTriage().tabSysReview().setCaption("System Review");
			form.lyrPatientTriage().tabPatientMeds().setCaption("Patient Meds");
			form.lyrPatientTriage().tabRelevantPMH().setCaption("PMH");
			form.lyrPatientTriage().tabSupport().setCaption("Support");
			form.lyrPatientTriage().tabDischargeDetails().setCaption("Discharge Information");//WDEV-17920
			
		}
		else if(form.getLocalContext().getShowTriageOrClinicianAssessmentWoklistIsNotNull() && (form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST) || form.getLocalContext().getShowTriageOrClinicianAssessmentWoklist().equals(DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN) )) //wdev-17252
		{
			form.dtimMedicStartTime().setVisible(true);
			form.lbl5().setVisible(true);
			form.lbl12().setVisible(true);
			form.btnSeenCompleteHCP().setVisible(true);//WDEV-16816
			form.btnDTA().setVisible(true);
			
			form.lyrPatientTriage().tabObs().setHeaderVisible(false);
			form.qmbPresentingProblem().setVisible(false);
			form.lyrPatientTriage().showtabNotes();
			form.lyrPatientTriage().tabNotes().setCaption("Notes");
			form.lyrPatientTriage().tabObs().setCaption("Obs");
			form.lyrPatientTriage().tabObs2().setCaption("Obs");
			form.lyrPatientTriage().tabPathway().setCaption("ICP");
			form.lyrPatientTriage().tabSysReview().setCaption("System Review");
			form.lyrPatientTriage().tabPatientMeds().setCaption("Patient Meds");
			form.lyrPatientTriage().tabRelevantPMH().setCaption("PMH");
			form.lyrPatientTriage().tabSupport().setCaption("Support");
			form.lyrPatientTriage().tabDischargeDetails().setCaption("Discharge Information");//WDEV-17920
			form.lyrPatientTriage().tabSysReview().setHeaderVisible(true);
			form.btnMovePatient().setText("Save + Move");
		}
		if (ConfigFlag.UI.USE_HEARTS_CONTRACTING.getValue())
		{
			form.lyrPatientTriage().tabPageHEARTSCoding().setHeaderVisible(true);
			form.lyrPatientTriage().tabPageCoding().setHeaderVisible(false);
		}
		else
		{
			form.lyrPatientTriage().tabPageHEARTSCoding().setHeaderVisible(false);
			form.lyrPatientTriage().tabPageCoding().setHeaderVisible(true);
		}
			
	}

	
	private void populateHEARTSCodinglabels() 
	{
		//WDEV-18313
		if (form.getLocalContext().getSelectedWaitingPatient() == null)
			return;	
		form.lyrPatientTriage().tabPageHEARTSCoding().lblMC().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance() != null ? form.getLocalContext().getSelectedWaitingPatient().getAttendance().getMC() : "") ;
		form.lyrPatientTriage().tabPageHEARTSCoding().lblCOTA().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance() != null ? form.getLocalContext().getSelectedWaitingPatient().getAttendance().getCOTA() : "") ;
		form.lyrPatientTriage().tabPageHEARTSCoding().lblPCG1().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance() != null ? form.getLocalContext().getSelectedWaitingPatient().getAttendance().getPCG1() : "") ;
		form.lyrPatientTriage().tabPageHEARTSCoding().lblPCG2().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance() != null ? form.getLocalContext().getSelectedWaitingPatient().getAttendance().getPCG2() : "") ;
		form.lyrPatientTriage().tabPageHEARTSCoding().lblPrime().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance() != null ? form.getLocalContext().getSelectedWaitingPatient().getAttendance().getHAR() : "") ;
		form.lyrPatientTriage().tabPageHEARTSCoding().lblPurchaser().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance() != null ? form.getLocalContext().getSelectedWaitingPatient().getAttendance().getPurchaser() : "") ;
		form.lyrPatientTriage().tabPageHEARTSCoding().lblSEQNO().setValue(form.getLocalContext().getSelectedWaitingPatient().getAttendance() != null ? form.getLocalContext().getSelectedWaitingPatient().getAttendance().getSequenceNumber() : "") ;
	}

	protected void onBtnCloseClick() throws PresentationLogicException
	{
		//engine.close(DialogResult.CANCEL);
		
	}

	
	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		form.getLocalContext().setCurrentEvent(EDAssessmentComponent.RETURNLINK);
		form.fireCustomControlValueChanged();
		
	}

	
	public EDAssessmentComponent getSelectedEvent()
	{
		
		return form.getLocalContext().getCurrentEvent();
	}

	
	public void clearSelectedEvent()
	{
		form.getLocalContext().setCurrentEvent(null);
		
	}

	//wdev-16751
	protected void onCcDischargeOutcomeValueChanged() throws PresentationLogicException
	{
		//WDEV-17337
		if( DischargeDetails_CustomEvents.FORMMODECHANGED.equals(form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().getCustomEvent()))
		{
			FormMode dischOutcomeMode = form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().getMode();
			form.setMode(dischOutcomeMode);
			
			form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(dischOutcomeMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
			
			Boolean isDischarged = form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().getRecordedDischarge();
			
			//if(isDischarged)
			//{
				//clearGlobalContexts();
				//form.getLocalContext().setTrackingFromArgument(null);
			//}
			
			if(FormMode.VIEW.equals(form.getMode()))
			{
				open();
				
				/*(if( form.getLocalContext().getSelectedWaitingPatient() == null)
				{
					form.lyrPatientTriage().showtabNotes();
				}*/
			}
			
			form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().clearCustomEvent();
		}
		//WDEV-17337
		else if (DischargeDetails_CustomEvents.SAVE.equals(form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().getCustomEvent()) ||DischargeDetails_CustomEvents.CANCEL.equals(form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().getCustomEvent()) )
		{
			form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().clearCustomEvent();
			refreshOtherDetails();
			FormMode dischOutcomeMode = form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().getMode();
			form.setMode(dischOutcomeMode);
			
			form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(dischOutcomeMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
		}
		//WDEV-17389
		else if ( DischargeDetails_CustomEvents.UNDO.equals(form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().getCustomEvent()))
		{
			refreshOtherDetails();
			FormMode dischOutcomeMode = form.lyrPatientTriage().tabPageOutcome().ccDischargeOutcome().getMode();
			form.setMode(dischOutcomeMode);
			
			form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(dischOutcomeMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
		}
	}

	protected void onBtnDTAClick() throws PresentationLogicException
	{
		//WDEV-17661
		if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING"))
		{
			engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog, new Object[] {form.getLocalContext().getSelectedWaitingPatient()});
		}
		else if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PARTIAL"))
		{
			engine.open(form.getForms().Emergency.EDPartialAdmissionDialog, new Object[] {form.getLocalContext().getSelectedWaitingPatient()});
		}
	}

	//WDEV-16816
	@Override
	protected void onBtnSeenCompleteHCPClick() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
		engine.open(form.getForms().Emergency.EDSeenByAndCompleteDialog);
	}

	//wdev-17040
	protected void onBtnOrderClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().OCRR.SelectAndOrderDialog);
		
	}

	//WDEV-17337
	protected void onCcAttendanceClinicalNotesValueChanged() throws PresentationLogicException
	{
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().getSelectedEvent()) || EdAssessment_CustomControlsEvents.RIE.equals(form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().getSelectedEvent()))
		{
			form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode notesMode = form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().getMode();
		form.setMode(notesMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(notesMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	//WDEV-17337
	protected void onCcICPValueChanged() throws PresentationLogicException
	{
		if (PresentationEvent.ACTION_DETAILS_VIEW.equals(form.lyrPatientTriage().tabPathway().ccICP().getEvent()))
		{
			form.lyrPatientTriage().tabPathway().ccICP().clearEvent();
			refreshOtherDetails();
		}
		
		FormMode icpMode = form.lyrPatientTriage().tabPathway().ccICP().getMode();
		form.setMode(icpMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(icpMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	//WDEV-17337
	protected void onCcSystemReviewValueChanged() throws PresentationLogicException
	{
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabSysReview().ccSystemReview().getSelectedEvent()))
		{
			form.lyrPatientTriage().tabSysReview().ccSystemReview().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode systemReviewMode = form.lyrPatientTriage().tabSysReview().ccSystemReview().getMode();
		form.setMode(systemReviewMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(systemReviewMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
		
	}

	//WDEV-17337
	protected void onCcDischargeDetails_AdviceMobilityValueChanged() throws PresentationLogicException
	{
		if (DischargeDetails_CustomEvents.SAVE.equals(form.lyrPatientTriage().tabDischargeDetails().ccDischargeDetails_AdviceMobility().getCustomEvent()) ||DischargeDetails_CustomEvents.CANCEL.equals(form.lyrPatientTriage().tabDischargeDetails().ccDischargeDetails_AdviceMobility().getCustomEvent()))
		{
			form.lyrPatientTriage().tabDischargeDetails().ccDischargeDetails_AdviceMobility().clearCustomEvent();
			refreshOtherDetails();
		}
		
		FormMode dischPlanningMode = form.lyrPatientTriage().tabDischargeDetails().ccDischargeDetails_AdviceMobility().getMode();
		form.setMode(dischPlanningMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(dischPlanningMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
		
	}

	//WDEV-17337
	protected void onCcCodingValueChanged() throws PresentationLogicException
	{
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabPageCoding().ccCoding().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabPageCoding().ccCoding().getSelectedEvent()))
		{
			form.lyrPatientTriage().tabPageCoding().ccCoding().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode codingMode = form.lyrPatientTriage().tabPageCoding().ccCoding().getMode();
		form.setMode(codingMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(codingMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	//WDEV-17337
	public void refreshOtherDetails()
	{
		long startTime = System.currentTimeMillis();
		if(form.getLocalContext().getSelectedWaitingPatient() == null)
		{
			return;
		}
		form.getLocalContext().setSelectedWaitingPatient(domain.getTrackingForClinicianWorklistAndTriageVo(form.getLocalContext().getSelectedWaitingPatient()));

		populateOtherDetails(form.getLocalContext().getSelectedWaitingPatient().getPatient());
		
		if (form.lyrPatientTriage().tabNotes().isVisible() && form.getLocalContext().getSelectedWaitingPatient()!=null && form.getLocalContext().getSelectedWaitingPatient().getTriageDetails()!=null )  //wdev-17384
		{
			form.lyrPatientTriage().tabNotes().ccAttendanceClinicalNotes().refreshMainPresentingProblem(form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMainPresentingProblemIsNotNull() ? form.getLocalContext().getSelectedWaitingPatient().getTriageDetails().getMainPresentingProblem().getProblem():null);   //wdev-17384
		}
		updateControlsState();//WDEV-17392
		long endTime = System.currentTimeMillis();
		long miliseconds = endTime - startTime;
		System.out.println("Time to refresh Other Details : " + miliseconds);
	}

	//WDEV-17337
	protected void onCcAlertValueChanged() throws PresentationLogicException
	{
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.ccAlert().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.ccAlert().getSelectedEvent()))
		{
			form.ccAlert().resetSelectedEvent();
			refreshOtherDetails();
		}
	}

	//WDEV-17337
	protected void onCcAllergyValueChanged() throws PresentationLogicException
	{
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.ccAllergy().getSelectedEvent()) ||EdAssessment_CustomControlsEvents.CANCEL.equals(form.ccAllergy().getSelectedEvent()))
		{
			form.ccAllergy().resetSelectedEvent();
			refreshOtherDetails();
		}
	}
	//wdev-17329
	private void initialisebuttons()
	{
		form.btnStartTriage().setImage(form.getImages().Core.New);		
		form.btnOrder().setImage(form.getImages().Emergency.ORDER16);
		form.btnDTA().setImage(form.getImages().Emergency.DTA16);
		form.btnReferToSpecialty().setImage(form.getImages().Emergency.REFERTO16);
		form.btnSeenCompleteHCP().setImage(form.getImages().Emergency.SEENCOMPLETE16);
		form.btnMovePatient().setImage(form.getImages().Emergency.MOVE16);
		
	}

	//wdev-17381
	protected void onBtnAddMainProblemClick() throws PresentationLogicException 
	{
		onBtnStartTriageProblemCall();
		
	}

	@Override
	//wdev-17486
	protected void onCcHEARTSCodingValueChanged() throws PresentationLogicException 
	{
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.lyrPatientTriage().tabPageHEARTSCoding().ccHeartsCoding().getSelectedEvent()) 
			|| EdAssessment_CustomControlsEvents.CANCEL.equals(form.lyrPatientTriage().tabPageHEARTSCoding().ccHeartsCoding().getSelectedEvent()))
		{
			form.lyrPatientTriage().tabPageHEARTSCoding().ccHeartsCoding().resetSelectedEvent();
			refreshOtherDetails();
		}
		
		FormMode codingHeartsMode = form.lyrPatientTriage().tabPageHEARTSCoding().ccHeartsCoding().getMode();
		form.setMode(codingHeartsMode);
		
		form.getLocalContext().setCurrentEvent(FormMode.VIEW.equals(codingHeartsMode) ? EDAssessmentComponent.START_TIMER : EDAssessmentComponent.STOP_TIMER);//WDEV-17337
	}

	//WDEV-17839
	protected void onBtnRefreshClick() throws PresentationLogicException
	{
		refreshCoding();
		open();
	}

	//WDEV-17839
	private void refreshCoding()
	{
		if (form.getLocalContext().getSelectedWaitingPatient()==null)
			return ;
		
		EmergencyAttendanceForTriageLiteVo emergencyattendanceToSave=populateDataFromScreen((EmergencyAttendanceForTriageLiteVo) form.getLocalContext().getSelectedWaitingPatient().getAttendance().clone());
		
		// Validate record
		String[] errors = emergencyattendanceToSave.validate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return ;
		}
		
		try
		{
			domain.refreshCoding(emergencyattendanceToSave);
			return ;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return ;
		}
	}

	//WDEV-17839
	private EmergencyAttendanceForTriageLiteVo populateDataFromScreen(EmergencyAttendanceForTriageLiteVo emergencyAttendance)
	{
		emergencyAttendance.setMC(null);
		emergencyAttendance.setCOTA(null);
		emergencyAttendance.setPCG1(null);
		emergencyAttendance.setPCG2(null);
		emergencyAttendance.setHAR(null);
		emergencyAttendance.setPurchaser(null);
		emergencyAttendance.setSequenceNumber(null);
		
		return emergencyAttendance;
	}


	//wdev-17977
	protected void onCcEDAssessmentWoundImagesValueChanged() throws PresentationLogicException
	{
		FormMode vitalSignMode = form.lyrPatientTriage().tabWoundImages().ccEDAssessmentWoundImages().getMode();
		form.setMode(vitalSignMode);
		
	}
}
