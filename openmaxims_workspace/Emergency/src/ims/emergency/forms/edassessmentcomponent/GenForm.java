//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.edassessmentcomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrPatientTriageLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 896, 632, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccAttendanceClinicalNotesForm = loader.loadComponent(129189, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 12, skipContextValidation);
				//ims.framework.Control m_ccAttendanceClinicalNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(896), new Integer(632), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 12), m_ccAttendanceClinicalNotesForm, instance1 } );
				ims.framework.Control m_ccAttendanceClinicalNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 12), m_ccAttendanceClinicalNotesForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAttendanceClinicalNotesControl);
				Menu[] menus1 = m_ccAttendanceClinicalNotesForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.attendancenotescc.IComponent ccAttendanceClinicalNotes()
			{
				return (ims.emergency.forms.attendancenotescc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccAttendanceClinicalNotesValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccAttendanceClinicalNotesVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccAttendanceClinicalNotesVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccAttendanceClinicalNotesEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccAttendanceClinicalNotesEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabObsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 896, 634, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccVitalSignsForm = loader.loadComponent(102387, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1014, skipContextValidation);
				//ims.framework.Control m_ccVitalSignsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(0), new Integer(896), new Integer(634), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1014), m_ccVitalSignsForm, instance1 } );
				ims.framework.Control m_ccVitalSignsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1014), m_ccVitalSignsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccVitalSignsControl);
				Menu[] menus1 = m_ccVitalSignsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.vitalsignsallcc.IComponent ccVitalSigns()
			{
				return (ims.core.forms.vitalsignsallcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccVitalSignsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccVitalSignsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccVitalSignsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccVitalSignsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccVitalSignsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabObs2Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrObs2Layer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabVitalSignsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 878, 605, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccVitalSignsObsForm = loader.loadComponent(102387, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 2016, skipContextValidation);
						//ims.framework.Control m_ccVitalSignsObsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(0), new Integer(0), new Integer(878), new Integer(605), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2016), m_ccVitalSignsObsForm, instance1 } );
						ims.framework.Control m_ccVitalSignsObsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2016), m_ccVitalSignsObsForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccVitalSignsObsControl);
						Menu[] menus1 = m_ccVitalSignsObsForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.core.forms.vitalsignsallcc.IComponent ccVitalSignsObs()
					{
						return (ims.core.forms.vitalsignsallcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccVitalSignsObsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccVitalSignsObsVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccVitalSignsObsVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccVitalSignsObsEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccVitalSignsObsEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabUrinalysisContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 878, 605, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccUrinalysisForm = loader.loadComponent(123254, appForm, startControlID * 10 + 4000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 3017, skipContextValidation);
						//ims.framework.Control m_ccUrinalysisControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(0), new Integer(0), new Integer(878), new Integer(605), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3017), m_ccUrinalysisForm, instance1 } );
						ims.framework.Control m_ccUrinalysisControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3017), m_ccUrinalysisForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccUrinalysisControl);
						Menu[] menus1 = m_ccUrinalysisForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.clinical.forms.urinalysiscc.IComponent ccUrinalysis()
					{
						return (ims.clinical.forms.urinalysiscc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccUrinalysisValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccUrinalysisVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccUrinalysisVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccUrinalysisEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccUrinalysisEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabUrineToxContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 878, 605, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccUrineToxForm = loader.loadComponent(123255, appForm, startControlID * 10 + 5000, anchoringHelper5.getSize(), instance1, startTabIndex.intValue() + 4018, skipContextValidation);
						//ims.framework.Control m_ccUrineToxControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(0), new Integer(0), new Integer(878), new Integer(605), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4018), m_ccUrineToxForm, instance1 } );
						ims.framework.Control m_ccUrineToxControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4018), m_ccUrineToxForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccUrineToxControl);
						Menu[] menus1 = m_ccUrineToxForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.clinical.forms.urinetoxcc.IComponent ccUrineTox()
					{
						return (ims.clinical.forms.urinetoxcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccUrineToxValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccUrineToxVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccUrineToxVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccUrineToxEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccUrineToxEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabHCGContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 878, 605, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccHCGForm = loader.loadComponent(123256, appForm, startControlID * 10 + 6000, anchoringHelper6.getSize(), instance1, startTabIndex.intValue() + 5019, skipContextValidation);
						//ims.framework.Control m_ccHCGControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(0), new Integer(0), new Integer(878), new Integer(605), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5019), m_ccHCGForm, instance1 } );
						ims.framework.Control m_ccHCGControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5019), m_ccHCGForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccHCGControl);
						Menu[] menus1 = m_ccHCGForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.clinical.forms.hcgcc.IComponent ccHCG()
					{
						return (ims.clinical.forms.hcgcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccHCGValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccHCGVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccHCGVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccHCGEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccHCGEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabOtherContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 878, 605, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccPatientAssessmentForm = loader.loadComponent(123257, appForm, startControlID * 10 + 7000, anchoringHelper7.getSize(), instance1, startTabIndex.intValue() + 6020, skipContextValidation);
						//ims.framework.Control m_ccPatientAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(0), new Integer(0), new Integer(878), new Integer(605), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 6020), m_ccPatientAssessmentForm, instance1 } );
						ims.framework.Control m_ccPatientAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 6020), m_ccPatientAssessmentForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccPatientAssessmentControl);
						Menu[] menus1 = m_ccPatientAssessmentForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.clinical.forms.obspatientassessmentcc.IComponent ccPatientAssessment()
					{
						return (ims.clinical.forms.obspatientassessmentcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccPatientAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccPatientAssessmentVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccPatientAssessmentVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccPatientAssessmentEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccPatientAssessmentEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 0, 2, 887, 632, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabVitalSigns = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Vital Signs", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabVitalSignsContainer m_tabVitalSignsContainer = (tabVitalSignsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabVitalSignsContainer.class, m_tabVitalSigns, factory);
					super.addContainer(m_tabVitalSigns, m_tabVitalSignsContainer);
					ims.framework.utils.SizeInfo m_tabVitalSignsDesignSize = new ims.framework.utils.SizeInfo(887, 632);
					ims.framework.utils.SizeInfo m_tabVitalSignsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper8.getWidth(), anchoringHelper8.getHeight());
					m_tabVitalSignsContainer.setContext(form, appForm, m_tabVitalSigns, loader, form_images_local, contextMenus, startControlID, m_tabVitalSignsDesignSize, m_tabVitalSignsRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 0, 2, 887, 632, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabUrinalysis = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Urinalysis", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabUrinalysisContainer m_tabUrinalysisContainer = (tabUrinalysisContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabUrinalysisContainer.class, m_tabUrinalysis, factory);
					super.addContainer(m_tabUrinalysis, m_tabUrinalysisContainer);
					ims.framework.utils.SizeInfo m_tabUrinalysisDesignSize = new ims.framework.utils.SizeInfo(887, 632);
					ims.framework.utils.SizeInfo m_tabUrinalysisRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
					m_tabUrinalysisContainer.setContext(form, appForm, m_tabUrinalysis, loader, form_images_local, contextMenus, startControlID, m_tabUrinalysisDesignSize, m_tabUrinalysisRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 0, 2, 887, 632, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabUrineTox = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Urine Tox", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabUrineToxContainer m_tabUrineToxContainer = (tabUrineToxContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabUrineToxContainer.class, m_tabUrineTox, factory);
					super.addContainer(m_tabUrineTox, m_tabUrineToxContainer);
					ims.framework.utils.SizeInfo m_tabUrineToxDesignSize = new ims.framework.utils.SizeInfo(887, 632);
					ims.framework.utils.SizeInfo m_tabUrineToxRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper10.getWidth(), anchoringHelper10.getHeight());
					m_tabUrineToxContainer.setContext(form, appForm, m_tabUrineTox, loader, form_images_local, contextMenus, startControlID, m_tabUrineToxDesignSize, m_tabUrineToxRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 0, 2, 887, 632, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabHCG = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"HCG", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabHCGContainer m_tabHCGContainer = (tabHCGContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHCGContainer.class, m_tabHCG, factory);
					super.addContainer(m_tabHCG, m_tabHCGContainer);
					ims.framework.utils.SizeInfo m_tabHCGDesignSize = new ims.framework.utils.SizeInfo(887, 632);
					ims.framework.utils.SizeInfo m_tabHCGRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper11.getWidth(), anchoringHelper11.getHeight());
					m_tabHCGContainer.setContext(form, appForm, m_tabHCG, loader, form_images_local, contextMenus, startControlID, m_tabHCGDesignSize, m_tabHCGRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 0, 2, 887, 632, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabOther = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Other", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabOtherContainer m_tabOtherContainer = (tabOtherContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOtherContainer.class, m_tabOther, factory);
					super.addContainer(m_tabOther, m_tabOtherContainer);
					ims.framework.utils.SizeInfo m_tabOtherDesignSize = new ims.framework.utils.SizeInfo(887, 632);
					ims.framework.utils.SizeInfo m_tabOtherRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
					m_tabOtherContainer.setContext(form, appForm, m_tabOther, loader, form_images_local, contextMenus, startControlID, m_tabOtherDesignSize, m_tabOtherRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabVitalSigns().setVisible(false);
					tabUrinalysis().setVisible(false);
					tabUrineTox().setVisible(false);
					tabHCG().setVisible(false);
					tabOther().setVisible(false);
				}
				public void settabVitalSignsEnabled(boolean value)
				{
					tabVitalSigns().setEnabled(value);
				}
				public void settabUrinalysisEnabled(boolean value)
				{
					tabUrinalysis().setEnabled(value);
				}
				public void settabUrineToxEnabled(boolean value)
				{
					tabUrineTox().setEnabled(value);
				}
				public void settabHCGEnabled(boolean value)
				{
					tabHCG().setEnabled(value);
				}
				public void settabOtherEnabled(boolean value)
				{
					tabOther().setEnabled(value);
				}
				public void showtabVitalSigns()
				{
					tabUrinalysis().setVisible(false);
					tabUrineTox().setVisible(false);
					tabHCG().setVisible(false);
					tabOther().setVisible(false);
					tabVitalSigns().setVisible(true);
				}
				public void showtabUrinalysis()
				{
					tabVitalSigns().setVisible(false);
					tabUrineTox().setVisible(false);
					tabHCG().setVisible(false);
					tabOther().setVisible(false);
					tabUrinalysis().setVisible(true);
				}
				public void showtabUrineTox()
				{
					tabVitalSigns().setVisible(false);
					tabUrinalysis().setVisible(false);
					tabHCG().setVisible(false);
					tabOther().setVisible(false);
					tabUrineTox().setVisible(true);
				}
				public void showtabHCG()
				{
					tabVitalSigns().setVisible(false);
					tabUrinalysis().setVisible(false);
					tabUrineTox().setVisible(false);
					tabOther().setVisible(false);
					tabHCG().setVisible(true);
				}
				public void showtabOther()
				{
					tabVitalSigns().setVisible(false);
					tabUrinalysis().setVisible(false);
					tabUrineTox().setVisible(false);
					tabHCG().setVisible(false);
					tabOther().setVisible(true);
				}
		
				public tabVitalSignsContainer tabVitalSigns()
				{
					return (tabVitalSignsContainer)super.layers.get(0);
				}
				public tabUrinalysisContainer tabUrinalysis()
				{
					return (tabUrinalysisContainer)super.layers.get(1);
				}
				public tabUrineToxContainer tabUrineTox()
				{
					return (tabUrineToxContainer)super.layers.get(2);
				}
				public tabHCGContainer tabHCG()
				{
					return (tabHCGContainer)super.layers.get(3);
				}
				public tabOtherContainer tabOther()
				{
					return (tabOtherContainer)super.layers.get(4);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrObs2Layer m_lyrObs2Layer = (lyrObs2Layer)LayerFlyweightFactory.getInstance().createLayer(lyrObs2Layer.class, this, factory);
				super.addLayer(m_lyrObs2Layer);
				m_lyrObs2Layer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
			}

			public lyrObs2Layer lyrObs2()
			{
				return (lyrObs2Layer)super.getLayer(0);
			}
		}
		public static class tabPathwayContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 888, 626, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccICPForm = loader.loadComponent(118128, appForm, startControlID * 10 + 8000, anchoringHelper13.getSize(), instance1, startTabIndex.intValue() + 7021, skipContextValidation);
				//ims.framework.Control m_ccICPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(8), new Integer(0), new Integer(888), new Integer(626), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 7021), m_ccICPForm, instance1 } );
				ims.framework.Control m_ccICPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1020),  new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 7021), m_ccICPForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccICPControl);
				Menu[] menus1 = m_ccICPForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.icp.forms.patienticppresentationcomponent.IComponent ccICP()
			{
				return (ims.icp.forms.patienticppresentationcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccICPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccICPVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccICPVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccICPEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccICPEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabSysReviewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 896, 634, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystemReviewForm = loader.loadComponent(129151, appForm, startControlID * 10 + 9000, anchoringHelper14.getSize(), instance1, startTabIndex.intValue() + 8022, skipContextValidation);
				//ims.framework.Control m_ccSystemReviewControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(0), new Integer(0), new Integer(896), new Integer(634), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8022), m_ccSystemReviewForm, instance1 } );
				ims.framework.Control m_ccSystemReviewControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1022),  new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8022), m_ccSystemReviewForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystemReviewControl);
				Menu[] menus1 = m_ccSystemReviewForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemreview.IComponent ccSystemReview()
			{
				return (ims.emergency.forms.systemreview.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystemReviewValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystemReviewVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystemReviewVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystemReviewEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystemReviewEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabWoundImagesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 896, 632, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccEDAssessmentWoundImagesForm = loader.loadComponent(129208, appForm, startControlID * 10 + 10000, anchoringHelper15.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccEDAssessmentWoundImagesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(0), new Integer(0), new Integer(896), new Integer(632), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccEDAssessmentWoundImagesForm, instance1 } );
				ims.framework.Control m_ccEDAssessmentWoundImagesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1024),  new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccEDAssessmentWoundImagesForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccEDAssessmentWoundImagesControl);
				Menu[] menus1 = m_ccEDAssessmentWoundImagesForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.woundimagescc.IComponent ccEDAssessmentWoundImages()
			{
				return (ims.emergency.forms.woundimagescc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccEDAssessmentWoundImagesValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccEDAssessmentWoundImagesVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccEDAssessmentWoundImagesVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccEDAssessmentWoundImagesEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccEDAssessmentWoundImagesEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPatientMedsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 896, 635, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccPatientMedsForm = loader.loadComponent(129126, appForm, startControlID * 10 + 11000, anchoringHelper16.getSize(), instance1, startTabIndex.intValue() + 9024, skipContextValidation);
				//ims.framework.Control m_ccPatientMedsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(0), new Integer(0), new Integer(896), new Integer(635), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 9024), m_ccPatientMedsForm, instance1 } );
				ims.framework.Control m_ccPatientMedsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1026),  new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 9024), m_ccPatientMedsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPatientMedsControl);
				Menu[] menus1 = m_ccPatientMedsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.triagepatientmeds.IComponent ccPatientMeds()
			{
				return (ims.emergency.forms.triagepatientmeds.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPatientMedsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPatientMedsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPatientMedsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPatientMedsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPatientMedsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabRelevantPMHContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 896, 634, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccRelevantPMHForm = loader.loadComponent(129125, appForm, startControlID * 10 + 12000, anchoringHelper17.getSize(), instance1, startTabIndex.intValue() + 10025, skipContextValidation);
				//ims.framework.Control m_ccRelevantPMHControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(0), new Integer(0), new Integer(896), new Integer(634), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 10025), m_ccRelevantPMHForm, instance1 } );
				ims.framework.Control m_ccRelevantPMHControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1028),  new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 10025), m_ccRelevantPMHForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccRelevantPMHControl);
				Menu[] menus1 = m_ccRelevantPMHForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.relevantpmh.IComponent ccRelevantPMH()
			{
				return (ims.emergency.forms.relevantpmh.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccRelevantPMHValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccRelevantPMHVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccRelevantPMHVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccRelevantPMHEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccRelevantPMHEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabSupportContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 896, 626, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSupportServiceForm = loader.loadComponent(129161, appForm, startControlID * 10 + 13000, anchoringHelper18.getSize(), instance1, startTabIndex.intValue() + 11026, skipContextValidation);
				//ims.framework.Control m_ccSupportServiceControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(0), new Integer(0), new Integer(896), new Integer(626), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 11026), m_ccSupportServiceForm, instance1 } );
				ims.framework.Control m_ccSupportServiceControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1030),  new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 11026), m_ccSupportServiceForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccSupportServiceControl);
				Menu[] menus1 = m_ccSupportServiceForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.supportservices.IComponent ccSupportService()
			{
				return (ims.emergency.forms.supportservices.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSupportServiceValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSupportServiceVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSupportServiceVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSupportServiceEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSupportServiceEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabDischargeDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 880, 621, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccDischargeDetails_AdviceMobilityForm = loader.loadComponent(129192, appForm, startControlID * 10 + 14000, anchoringHelper19.getSize(), instance1, startTabIndex.intValue() + 12027, skipContextValidation);
				//ims.framework.Control m_ccDischargeDetails_AdviceMobilityControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(8), new Integer(8), new Integer(880), new Integer(621), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 12027), m_ccDischargeDetails_AdviceMobilityForm, instance1 } );
				ims.framework.Control m_ccDischargeDetails_AdviceMobilityControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1032),  new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 12027), m_ccDischargeDetails_AdviceMobilityForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccDischargeDetails_AdviceMobilityControl);
				Menu[] menus1 = m_ccDischargeDetails_AdviceMobilityForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.dischargeplanning_advicemobilityequipment.IComponent ccDischargeDetails_AdviceMobility()
			{
				return (ims.emergency.forms.dischargeplanning_advicemobilityequipment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccDischargeDetails_AdviceMobilityValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccDischargeDetails_AdviceMobilityVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccDischargeDetails_AdviceMobilityVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccDischargeDetails_AdviceMobilityEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccDischargeDetails_AdviceMobilityEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageOutcomeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 880, 618, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccDischargeOutcomeForm = loader.loadComponent(129157, appForm, startControlID * 10 + 15000, anchoringHelper20.getSize(), instance1, startTabIndex.intValue() + 13028, skipContextValidation);
				//ims.framework.Control m_ccDischargeOutcomeControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(8), new Integer(8), new Integer(880), new Integer(618), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 13028), m_ccDischargeOutcomeForm, instance1 } );
				ims.framework.Control m_ccDischargeOutcomeControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1034),  new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 13028), m_ccDischargeOutcomeForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccDischargeOutcomeControl);
				Menu[] menus1 = m_ccDischargeOutcomeForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.dischargedetails_outcome.IComponent ccDischargeOutcome()
			{
				return (ims.emergency.forms.dischargedetails_outcome.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccDischargeOutcomeValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccDischargeOutcomeVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccDischargeOutcomeVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccDischargeOutcomeEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccDischargeOutcomeEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageHEARTSCodingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 6, 6, 594, 618, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				ims.framework.FormUiLogic m_ccHeartsCodingForm = loader.loadComponent(129196, appForm, startControlID * 10 + 16000, anchoringHelper21.getSize(), instance1, startTabIndex.intValue() + 14029, skipContextValidation);
				//ims.framework.Control m_ccHeartsCodingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(6), new Integer(6), new Integer(594), new Integer(618), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, new Integer(startTabIndex.intValue() + 14029), m_ccHeartsCodingForm, instance1 } );
				ims.framework.Control m_ccHeartsCodingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1036),  new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, new Integer(startTabIndex.intValue() + 14029), m_ccHeartsCodingForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccHeartsCodingControl);
				Menu[] menus1 = m_ccHeartsCodingForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 608, 464, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Sequence Number>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 608, 440, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Sequence Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 608, 400, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Purchaser>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 608, 376, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Purchaser:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 608, 336, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Prime Recipient>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 608, 312, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Prime Recipient :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 608, 272, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<CCG of Patient >", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 608, 248, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "CCG of Patient :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 608, 208, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<CCG of GP>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 608, 184, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "CCG of GP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 608, 144, 265, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Organisation to which Cost of Treatment accrues>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 608, 120, 287, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Organisation to which Cost of Treatment accrues:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 608, 80, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Main Commissioner >", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 608, 56, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Main Commissioner:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 608, 16, 96, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 15030), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Refresh Coding", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public ims.emergency.forms.interventionsdiagnosisinvestigationscc.IComponent ccHeartsCoding()
			{
				return (ims.emergency.forms.interventionsdiagnosisinvestigationscc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccHeartsCodingValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccHeartsCodingVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccHeartsCodingVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccHeartsCodingEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccHeartsCodingEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Label lblSEQNO()
			{
				return (Label)super.getControl(1);
			}
			public Label lblPurchaser()
			{
				return (Label)super.getControl(3);
			}
			public Label lblPrime()
			{
				return (Label)super.getControl(5);
			}
			public Label lblPCG2()
			{
				return (Label)super.getControl(7);
			}
			public Label lblPCG1()
			{
				return (Label)super.getControl(9);
			}
			public Label lblCOTA()
			{
				return (Label)super.getControl(11);
			}
			public Label lblMC()
			{
				return (Label)super.getControl(13);
			}
			public Button btnRefresh()
			{
				return (Button)super.getControl(15);
			}
		}
		public static class tabPageCodingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 880, 624, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccCodingForm = loader.loadComponent(129196, appForm, startControlID * 10 + 17000, anchoringHelper37.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccCodingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(8), new Integer(8), new Integer(880), new Integer(624), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccCodingForm, instance1 } );
				ims.framework.Control m_ccCodingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1053),  new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccCodingForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccCodingControl);
				Menu[] menus1 = m_ccCodingForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.interventionsdiagnosisinvestigationscc.IComponent ccCoding()
			{
				return (ims.emergency.forms.interventionsdiagnosisinvestigationscc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccCodingValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccCodingVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccCodingVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccCodingEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccCodingEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Notes", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabNotesContainer m_tabNotesContainer = (tabNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNotesContainer.class, m_tabNotes, factory);
			super.addContainer(m_tabNotes, m_tabNotesContainer);
			ims.framework.utils.SizeInfo m_tabNotesDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
			m_tabNotesContainer.setContext(form, appForm, m_tabNotes, loader, form_images_local, contextMenus, startControlID, m_tabNotesDesignSize, m_tabNotesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabObs = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Obs", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabObsContainer m_tabObsContainer = (tabObsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabObsContainer.class, m_tabObs, factory);
			super.addContainer(m_tabObs, m_tabObsContainer);
			ims.framework.utils.SizeInfo m_tabObsDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabObsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper39.getWidth(), anchoringHelper39.getHeight());
			m_tabObsContainer.setContext(form, appForm, m_tabObs, loader, form_images_local, contextMenus, startControlID, m_tabObsDesignSize, m_tabObsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabObs2 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Obs", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabObs2Container m_tabObs2Container = (tabObs2Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabObs2Container.class, m_tabObs2, factory);
			super.addContainer(m_tabObs2, m_tabObs2Container);
			ims.framework.utils.SizeInfo m_tabObs2DesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabObs2RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
			m_tabObs2Container.setContext(form, appForm, m_tabObs2, loader, form_images_local, contextMenus, startControlID, m_tabObs2DesignSize, m_tabObs2RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPathway = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"ICP", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPathwayContainer m_tabPathwayContainer = (tabPathwayContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPathwayContainer.class, m_tabPathway, factory);
			super.addContainer(m_tabPathway, m_tabPathwayContainer);
			ims.framework.utils.SizeInfo m_tabPathwayDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabPathwayRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper41.getWidth(), anchoringHelper41.getHeight());
			m_tabPathwayContainer.setContext(form, appForm, m_tabPathway, loader, form_images_local, contextMenus, startControlID, m_tabPathwayDesignSize, m_tabPathwayRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSysReview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Sys. Review", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSysReviewContainer m_tabSysReviewContainer = (tabSysReviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSysReviewContainer.class, m_tabSysReview, factory);
			super.addContainer(m_tabSysReview, m_tabSysReviewContainer);
			ims.framework.utils.SizeInfo m_tabSysReviewDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabSysReviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper42.getWidth(), anchoringHelper42.getHeight());
			m_tabSysReviewContainer.setContext(form, appForm, m_tabSysReview, loader, form_images_local, contextMenus, startControlID, m_tabSysReviewDesignSize, m_tabSysReviewRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabWoundImages = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Wound Images", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabWoundImagesContainer m_tabWoundImagesContainer = (tabWoundImagesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabWoundImagesContainer.class, m_tabWoundImages, factory);
			super.addContainer(m_tabWoundImages, m_tabWoundImagesContainer);
			ims.framework.utils.SizeInfo m_tabWoundImagesDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabWoundImagesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper43.getWidth(), anchoringHelper43.getHeight());
			m_tabWoundImagesContainer.setContext(form, appForm, m_tabWoundImages, loader, form_images_local, contextMenus, startControlID, m_tabWoundImagesDesignSize, m_tabWoundImagesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPatientMeds = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Meds", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPatientMedsContainer m_tabPatientMedsContainer = (tabPatientMedsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPatientMedsContainer.class, m_tabPatientMeds, factory);
			super.addContainer(m_tabPatientMeds, m_tabPatientMedsContainer);
			ims.framework.utils.SizeInfo m_tabPatientMedsDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabPatientMedsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper44.getWidth(), anchoringHelper44.getHeight());
			m_tabPatientMedsContainer.setContext(form, appForm, m_tabPatientMeds, loader, form_images_local, contextMenus, startControlID, m_tabPatientMedsDesignSize, m_tabPatientMedsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabRelevantPMH = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"PMH", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabRelevantPMHContainer m_tabRelevantPMHContainer = (tabRelevantPMHContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRelevantPMHContainer.class, m_tabRelevantPMH, factory);
			super.addContainer(m_tabRelevantPMH, m_tabRelevantPMHContainer);
			ims.framework.utils.SizeInfo m_tabRelevantPMHDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabRelevantPMHRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper45.getWidth(), anchoringHelper45.getHeight());
			m_tabRelevantPMHContainer.setContext(form, appForm, m_tabRelevantPMH, loader, form_images_local, contextMenus, startControlID, m_tabRelevantPMHDesignSize, m_tabRelevantPMHRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSupport = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Supp.", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSupportContainer m_tabSupportContainer = (tabSupportContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSupportContainer.class, m_tabSupport, factory);
			super.addContainer(m_tabSupport, m_tabSupportContainer);
			ims.framework.utils.SizeInfo m_tabSupportDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabSupportRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper46.getWidth(), anchoringHelper46.getHeight());
			m_tabSupportContainer.setContext(form, appForm, m_tabSupport, loader, form_images_local, contextMenus, startControlID, m_tabSupportDesignSize, m_tabSupportRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDischargeDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Disc.", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDischargeDetailsContainer m_tabDischargeDetailsContainer = (tabDischargeDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDischargeDetailsContainer.class, m_tabDischargeDetails, factory);
			super.addContainer(m_tabDischargeDetails, m_tabDischargeDetailsContainer);
			ims.framework.utils.SizeInfo m_tabDischargeDetailsDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabDischargeDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper47.getWidth(), anchoringHelper47.getHeight());
			m_tabDischargeDetailsContainer.setContext(form, appForm, m_tabDischargeDetails, loader, form_images_local, contextMenus, startControlID, m_tabDischargeDetailsDesignSize, m_tabDischargeDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageOutcome = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Outcome", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageOutcomeContainer m_tabPageOutcomeContainer = (tabPageOutcomeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageOutcomeContainer.class, m_tabPageOutcome, factory);
			super.addContainer(m_tabPageOutcome, m_tabPageOutcomeContainer);
			ims.framework.utils.SizeInfo m_tabPageOutcomeDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabPageOutcomeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper48.getWidth(), anchoringHelper48.getHeight());
			m_tabPageOutcomeContainer.setContext(form, appForm, m_tabPageOutcome, loader, form_images_local, contextMenus, startControlID, m_tabPageOutcomeDesignSize, m_tabPageOutcomeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageHEARTSCoding = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Coding", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageHEARTSCodingContainer m_tabPageHEARTSCodingContainer = (tabPageHEARTSCodingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageHEARTSCodingContainer.class, m_tabPageHEARTSCoding, factory);
			super.addContainer(m_tabPageHEARTSCoding, m_tabPageHEARTSCodingContainer);
			ims.framework.utils.SizeInfo m_tabPageHEARTSCodingDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabPageHEARTSCodingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper49.getWidth(), anchoringHelper49.getHeight());
			m_tabPageHEARTSCodingContainer.setContext(form, appForm, m_tabPageHEARTSCoding, loader, form_images_local, contextMenus, startControlID, m_tabPageHEARTSCodingDesignSize, m_tabPageHEARTSCodingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 16, 92, 904, 658, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageCoding = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Coding", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageCodingContainer m_tabPageCodingContainer = (tabPageCodingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageCodingContainer.class, m_tabPageCoding, factory);
			super.addContainer(m_tabPageCoding, m_tabPageCodingContainer);
			ims.framework.utils.SizeInfo m_tabPageCodingDesignSize = new ims.framework.utils.SizeInfo(904, 658);
			ims.framework.utils.SizeInfo m_tabPageCodingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper50.getWidth(), anchoringHelper50.getHeight());
			m_tabPageCodingContainer.setContext(form, appForm, m_tabPageCoding, loader, form_images_local, contextMenus, startControlID, m_tabPageCodingDesignSize, m_tabPageCodingRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
		}
		public void settabNotesEnabled(boolean value)
		{
			tabNotes().setEnabled(value);
		}
		public void settabObsEnabled(boolean value)
		{
			tabObs().setEnabled(value);
		}
		public void settabObs2Enabled(boolean value)
		{
			tabObs2().setEnabled(value);
		}
		public void settabPathwayEnabled(boolean value)
		{
			tabPathway().setEnabled(value);
		}
		public void settabSysReviewEnabled(boolean value)
		{
			tabSysReview().setEnabled(value);
		}
		public void settabWoundImagesEnabled(boolean value)
		{
			tabWoundImages().setEnabled(value);
		}
		public void settabPatientMedsEnabled(boolean value)
		{
			tabPatientMeds().setEnabled(value);
		}
		public void settabRelevantPMHEnabled(boolean value)
		{
			tabRelevantPMH().setEnabled(value);
		}
		public void settabSupportEnabled(boolean value)
		{
			tabSupport().setEnabled(value);
		}
		public void settabDischargeDetailsEnabled(boolean value)
		{
			tabDischargeDetails().setEnabled(value);
		}
		public void settabPageOutcomeEnabled(boolean value)
		{
			tabPageOutcome().setEnabled(value);
		}
		public void settabPageHEARTSCodingEnabled(boolean value)
		{
			tabPageHEARTSCoding().setEnabled(value);
		}
		public void settabPageCodingEnabled(boolean value)
		{
			tabPageCoding().setEnabled(value);
		}
		public void showtabNotes()
		{
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabNotes().setVisible(true);
		}
		public void showtabObs()
		{
			tabNotes().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabObs().setVisible(true);
		}
		public void showtabObs2()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabObs2().setVisible(true);
		}
		public void showtabPathway()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabPathway().setVisible(true);
		}
		public void showtabSysReview()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabSysReview().setVisible(true);
		}
		public void showtabWoundImages()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabWoundImages().setVisible(true);
		}
		public void showtabPatientMeds()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabPatientMeds().setVisible(true);
		}
		public void showtabRelevantPMH()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabRelevantPMH().setVisible(true);
		}
		public void showtabSupport()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabSupport().setVisible(true);
		}
		public void showtabDischargeDetails()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabDischargeDetails().setVisible(true);
		}
		public void showtabPageOutcome()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(false);
			tabPageOutcome().setVisible(true);
		}
		public void showtabPageHEARTSCoding()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageCoding().setVisible(false);
			tabPageHEARTSCoding().setVisible(true);
		}
		public void showtabPageCoding()
		{
			tabNotes().setVisible(false);
			tabObs().setVisible(false);
			tabObs2().setVisible(false);
			tabPathway().setVisible(false);
			tabSysReview().setVisible(false);
			tabWoundImages().setVisible(false);
			tabPatientMeds().setVisible(false);
			tabRelevantPMH().setVisible(false);
			tabSupport().setVisible(false);
			tabDischargeDetails().setVisible(false);
			tabPageOutcome().setVisible(false);
			tabPageHEARTSCoding().setVisible(false);
			tabPageCoding().setVisible(true);
		}

		public tabNotesContainer tabNotes()
		{
			return (tabNotesContainer)super.layers.get(0);
		}
		public tabObsContainer tabObs()
		{
			return (tabObsContainer)super.layers.get(1);
		}
		public tabObs2Container tabObs2()
		{
			return (tabObs2Container)super.layers.get(2);
		}
		public tabPathwayContainer tabPathway()
		{
			return (tabPathwayContainer)super.layers.get(3);
		}
		public tabSysReviewContainer tabSysReview()
		{
			return (tabSysReviewContainer)super.layers.get(4);
		}
		public tabWoundImagesContainer tabWoundImages()
		{
			return (tabWoundImagesContainer)super.layers.get(5);
		}
		public tabPatientMedsContainer tabPatientMeds()
		{
			return (tabPatientMedsContainer)super.layers.get(6);
		}
		public tabRelevantPMHContainer tabRelevantPMH()
		{
			return (tabRelevantPMHContainer)super.layers.get(7);
		}
		public tabSupportContainer tabSupport()
		{
			return (tabSupportContainer)super.layers.get(8);
		}
		public tabDischargeDetailsContainer tabDischargeDetails()
		{
			return (tabDischargeDetailsContainer)super.layers.get(9);
		}
		public tabPageOutcomeContainer tabPageOutcome()
		{
			return (tabPageOutcomeContainer)super.layers.get(10);
		}
		public tabPageHEARTSCodingContainer tabPageHEARTSCoding()
		{
			return (tabPageHEARTSCodingContainer)super.layers.get(11);
		}
		public tabPageCodingContainer tabPageCoding()
		{
			return (tabPageCodingContainer)super.layers.get(12);
		}
	}
	public static class qmbPresentingProblemComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.ClinicalProblemShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.ClinicalProblemShortVo getValue()
		{
			return (ims.clinical.vo.ClinicalProblemShortVo)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.ClinicalProblemShortVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdAttendanceHistoryRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAttendanceHistoryRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColIDReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColIDReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColIDOpened()
		{
			super.row.showOpened(0);
		}
		public String getColID()
		{
			return (String)super.row.get(0);
		}
		public void setColID(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColIDTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public java.lang.Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.row.setValue(value);
		}
		public grdAttendanceHistoryRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdAttendanceHistoryRow(super.row.getParent());
		}
		public grdAttendanceHistoryRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdAttendanceHistoryRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdAttendanceHistoryRowCollection collection;
	}
	public static class grdAttendanceHistoryRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAttendanceHistoryRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAttendanceHistoryRow get(int index)
		{
			return new grdAttendanceHistoryRow(super.collection.get(index));
		}
		public grdAttendanceHistoryRow newRow()
		{
			return new grdAttendanceHistoryRow(super.collection.newRow());
		}
		public grdAttendanceHistoryRow newRow(boolean autoSelect)
		{
			return new grdAttendanceHistoryRow(super.collection.newRow(autoSelect));
		}
		public grdAttendanceHistoryRow newRowAt(int index)
		{
			return new grdAttendanceHistoryRow(super.collection.newRowAt(index));
		}
		public grdAttendanceHistoryRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAttendanceHistoryRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAttendanceHistoryGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdAttendanceHistoryRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdAttendanceHistoryRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdAttendanceHistoryRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdAttendanceHistoryRow[] result = new GenForm.grdAttendanceHistoryRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdAttendanceHistoryRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdAttendanceHistoryRow[] getAllRows(GenForm.grdAttendanceHistoryRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdAttendanceHistoryRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdAttendanceHistoryRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdAttendanceHistoryRow[] result = new GenForm.grdAttendanceHistoryRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdAttendanceHistoryRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdAttendanceHistoryRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdAttendanceHistoryRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdAttendanceHistoryRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		public java.lang.Object[] getValues()
		{
			java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public java.lang.Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.grid.setValue(value);
		}
		public grdAttendanceHistoryRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAttendanceHistoryRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAttendanceHistoryRowCollection getRows()
		{
			return new grdAttendanceHistoryRowCollection(super.grid.getRows());
		}
		public grdAttendanceHistoryRow getRowByValue(java.lang.Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAttendanceHistoryRow(row);
		}
		public void setColIDHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColIDHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdProblemRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProblemRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColOtherProblemsReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColOtherProblemsReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColOtherProblemsOpened()
		{
			super.row.showOpened(0);
		}
		public String getColOtherProblems()
		{
			return (String)super.row.get(0);
		}
		public void setColOtherProblems(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColOtherProblemsTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDiscriminatorReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDiscriminatorReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDiscriminatorOpened()
		{
			super.row.showOpened(1);
		}
		public String getColDiscriminator()
		{
			return (String)super.row.get(1);
		}
		public void setColDiscriminator(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColDiscriminatorTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.emergency.vo.TriageProtocolAssessmentForTriageVo getValue()
		{
			return (ims.emergency.vo.TriageProtocolAssessmentForTriageVo)super.row.getValue();
		}
		public void setValue(ims.emergency.vo.TriageProtocolAssessmentForTriageVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProblemRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProblemRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProblemRow get(int index)
		{
			return new grdProblemRow(super.collection.get(index));
		}
		public grdProblemRow newRow()
		{
			return new grdProblemRow(super.collection.newRow());
		}
		public grdProblemRow newRow(boolean autoSelect)
		{
			return new grdProblemRow(super.collection.newRow(autoSelect));
		}
		public grdProblemRow newRowAt(int index)
		{
			return new grdProblemRow(super.collection.newRowAt(index));
		}
		public grdProblemRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProblemRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProblemGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.emergency.vo.TriageProtocolAssessmentForTriageVoCollection getValues()
		{
			ims.emergency.vo.TriageProtocolAssessmentForTriageVoCollection listOfValues = new ims.emergency.vo.TriageProtocolAssessmentForTriageVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.emergency.vo.TriageProtocolAssessmentForTriageVo getValue()
		{
			return (ims.emergency.vo.TriageProtocolAssessmentForTriageVo)super.grid.getValue();
		}
		public void setValue(ims.emergency.vo.TriageProtocolAssessmentForTriageVo value)
		{
			super.grid.setValue(value);
		}
		public grdProblemRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProblemRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProblemRowCollection getRows()
		{
			return new grdProblemRowCollection(super.grid.getRows());
		}
		public grdProblemRow getRowByValue(ims.emergency.vo.TriageProtocolAssessmentForTriageVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProblemRow(row);
		}
		public void setColOtherProblemsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColOtherProblemsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDiscriminatorHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDiscriminatorHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(1176, 792);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Timers
		timers = new Timers();
		timers.timerEdAttendanceDetails = factory.createTimer(0, 120, false);
		form.addTimer(timers.timerEdAttendanceDetails);

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Emergency.contextMenuOtherProblemsTriageMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Emergency.contextMenuOtherProblemsTriageMenuADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4700001)))
			contextMenus.Emergency.contextMenuOtherProblemsTriageMenu.add(contextMenus.Emergency.contextMenuOtherProblemsTriageMenuADDItem);
		contextMenus.Emergency.contextMenuOtherProblemsTriageMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4700002)))
			contextMenus.Emergency.contextMenuOtherProblemsTriageMenu.add(contextMenus.Emergency.contextMenuOtherProblemsTriageMenuEDITItem);
		form.registerMenu(contextMenus.Emergency.contextMenuOtherProblemsTriageMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 1160, 752, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 425, 16, 343, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Registration", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 17, 16, 407, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Triage", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 928, 496, 232, 256, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,"Attendance Times", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 920, 210, 240, 96, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ims.framework.FormUiLogic m_ccAlertForm = loader.loadComponent(102401, appForm, startControlID * 10 + 18000, anchoringHelper55.getSize(), instance1, startTabIndex.intValue() + 16033, skipContextValidation);
		//ims.framework.Control m_ccAlertControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(920), new Integer(210), new Integer(240), new Integer(96), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 16033), m_ccAlertForm, instance1 } );
		ims.framework.Control m_ccAlertControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1072),  new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 16033), m_ccAlertForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccAlertControl);
		Menu[] menus1 = m_ccAlertForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 920, 113, 240, 96, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ims.framework.FormUiLogic m_ccAllergyForm = loader.loadComponent(123239, appForm, startControlID * 10 + 19000, anchoringHelper56.getSize(), instance2, startTabIndex.intValue() + 15031, skipContextValidation);
		//ims.framework.Control m_ccAllergyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(920), new Integer(113), new Integer(240), new Integer(96), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 15031), m_ccAllergyForm, instance2 } );
		ims.framework.Control m_ccAllergyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1074),  new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 15031), m_ccAllergyForm, instance2, Boolean.FALSE } );
		super.addControl(m_ccAllergyControl);
		Menu[] menus2 = m_ccAllergyForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}

		// Layer Clasess
		lyrPatientTriageLayer m_lyrPatientTriageLayer = (lyrPatientTriageLayer)LayerFlyweightFactory.getInstance().createLayer(lyrPatientTriageLayer.class, this, factory);
		super.addLayer(m_lyrPatientTriageLayer);
		m_lyrPatientTriageLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 581, 64, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 437, 64, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 581, 40, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 437, 40, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Presenting Complaint:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 205, 40, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 205, 64, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 29, 64, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discriminator:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 29, 40, 151, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Main Presenting Problem:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 928, 312, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Attendance History", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 937, 727, 79, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Breach Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 937, 714, 62, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Departure", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 937, 698, 79, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Breach Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 937, 684, 40, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Triage", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 937, 669, 80, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Intervention:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 937, 558, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 937, 544, 74, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Registration", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 937, 641, 61, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "End Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 937, 628, 40, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Triage", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 937, 613, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Start Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 937, 579, 30, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "TSA:", new Integer(1), "Time Since Arrival", new Integer(0)}));
		RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 937, 656, 38, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Medic", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 937, 599, 40, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Triage", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 937, 523, 77, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Arrival Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 8, 710, 0, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 640, 764, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 17055), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " DTA", Boolean.FALSE, "Decision To Admit", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 8, 764, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 17051), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Start Triage", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 368, 764, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 17053), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Order", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 776, 764, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 17057), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Seen/Complete", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 365, 37, 48, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 365, 37, 48, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Add", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 908, 764, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 17060), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Refer To Specialty", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 1040, 764, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 17061), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save And Move", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 1024, 577, 128, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 17041), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 1024, 717, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 17062), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 1024, 689, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 17049), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 1024, 661, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 17047), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 1024, 633, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 17045), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 1024, 605, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 17043), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 1024, 549, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 17039), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 1024, 521, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 17037), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 205, 38, 157, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbPresentingProblemTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.TRUE});
		addControl(m_qmbPresentingProblemTemp);
		qmbPresentingProblemComboBox qmbPresentingProblem = (qmbPresentingProblemComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbPresentingProblemComboBox.class, m_qmbPresentingProblemTemp);
		super.addComboBox(qmbPresentingProblem);

		// Grid Controls
		RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 928, 328, 232, 132, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		Grid m_grdAttendanceHistoryTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 17035), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAttendanceHistoryTemp);
		grdAttendanceHistoryGrid grdAttendanceHistory = (grdAttendanceHistoryGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAttendanceHistoryGrid.class, m_grdAttendanceHistoryTemp);
		grdAttendanceHistory.addTreeColumn("ID + Date Time", 0, -1, false, true);
		super.addGrid(grdAttendanceHistory);
		RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 770, 28, 390, 60, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdProblemTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuOtherProblemsTriageMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdProblemTemp);
		grdProblemGrid grdProblem = (grdProblemGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProblemGrid.class, m_grdProblemTemp);
		grdProblem.addStringColumn("Other Problems", 0, 0, 230, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProblem.addStringColumn("Discriminator", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdProblem);

		// Link Controls
		RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 1056, 13, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));

		// Picture Controls
		RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 178, 36, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.alertscc.IComponent ccAlert()
	{
		return (ims.core.forms.alertscc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(4)).getLogic();
	}
	public void setccAlertValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(4)).setValueChangedEvent(delegate);
	}
	public void setccAlertVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(4)).setVisible(value);
	}
	public boolean isccAlertVisible()
	{
		return ((ims.framework.Control)super.getControl(4)).isVisible();
	}
	public void setccAlertEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(4)).setEnabled(value);
	}
	public boolean isccAlertEnabled()
	{
		return ((ims.framework.Control)super.getControl(4)).isEnabled();
	}
	public ims.clinical.forms.allergiescc.IComponent ccAllergy()
	{
		return (ims.clinical.forms.allergiescc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(5)).getLogic();
	}
	public void setccAllergyValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(5)).setValueChangedEvent(delegate);
	}
	public void setccAllergyVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(5)).setVisible(value);
	}
	public boolean isccAllergyVisible()
	{
		return ((ims.framework.Control)super.getControl(5)).isVisible();
	}
	public void setccAllergyEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(5)).setEnabled(value);
	}
	public boolean isccAllergyEnabled()
	{
		return ((ims.framework.Control)super.getControl(5)).isEnabled();
	}
	public lyrPatientTriageLayer lyrPatientTriage()
	{
		return (lyrPatientTriageLayer)super.getLayer(0);
	}
	public Label lblPatientCategory()
	{
		return (Label)super.getControl(19);
	}
	public Label lblPresentingComplaint()
	{
		return (Label)super.getControl(21);
	}
	public Label lblPresentingProblem()
	{
		return (Label)super.getControl(23);
	}
	public Label lblDiscriminator()
	{
		return (Label)super.getControl(24);
	}
	public Label lbl18()
	{
		return (Label)super.getControl(27);
	}
	public Label lbl1()
	{
		return (Label)super.getControl(28);
	}
	public Label lbl15()
	{
		return (Label)super.getControl(29);
	}
	public Label lbl5()
	{
		return (Label)super.getControl(32);
	}
	public Label lbl12()
	{
		return (Label)super.getControl(39);
	}
	public Label lblAverageTime()
	{
		return (Label)super.getControl(42);
	}
	public Button btnDTA()
	{
		return (Button)super.getControl(43);
	}
	public Button btnStartTriage()
	{
		return (Button)super.getControl(44);
	}
	public Button btnOrder()
	{
		return (Button)super.getControl(45);
	}
	public Button btnSeenCompleteHCP()
	{
		return (Button)super.getControl(46);
	}
	public Button btnEditMainProblem()
	{
		return (Button)super.getControl(47);
	}
	public Button btnAddMainProblem()
	{
		return (Button)super.getControl(48);
	}
	public Button btnReferToSpecialty()
	{
		return (Button)super.getControl(49);
	}
	public Button btnMovePatient()
	{
		return (Button)super.getControl(50);
	}
	public TextBox txtLOS()
	{
		return (TextBox)super.getControl(51);
	}
	public DateTimeControl dtimDischBreachTime()
	{
		return (DateTimeControl)super.getControl(52);
	}
	public DateTimeControl dtimDischargeBreachTime()
	{
		return (DateTimeControl)super.getControl(53);
	}
	public DateTimeControl dtimMedicStartTime()
	{
		return (DateTimeControl)super.getControl(54);
	}
	public DateTimeControl dtimTriageEndTime()
	{
		return (DateTimeControl)super.getControl(55);
	}
	public DateTimeControl dtimTriageStartTime()
	{
		return (DateTimeControl)super.getControl(56);
	}
	public DateTimeControl dtimRegistrationTime()
	{
		return (DateTimeControl)super.getControl(57);
	}
	public DateTimeControl dtimArrivalTime()
	{
		return (DateTimeControl)super.getControl(58);
	}
	public qmbPresentingProblemComboBox qmbPresentingProblem()
	{
		return (qmbPresentingProblemComboBox)super.getComboBox(0);
	}
	public grdAttendanceHistoryGrid grdAttendanceHistory()
	{
		return (grdAttendanceHistoryGrid)super.getGrid(0);
	}
	public grdProblemGrid grdProblem()
	{
		return (grdProblemGrid)super.getGrid(1);
	}
	public Link lnkReturnToList()
	{
		return (Link)super.getControl(62);
	}
	public Picture imgTriagePriority()
	{
		return (Picture)super.getControl(63);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Emergency = new EmergencyForms();
			Core = new CoreForms();
			OCRR = new OCRRForms();
		}
		public final class EmergencyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyForms()
			{
				TriageNoteDialog = new LocalFormName(129120);
				TriageNotesDialog = new LocalFormName(129147);
				AttendanceHistory = new LocalFormName(129167);
				SendToAreaDialog = new LocalFormName(129121);
				TriageProtocolAssessment = new LocalFormName(129148);
				Tracking = new LocalFormName(129100);
				TrackingSummary = new LocalFormName(129101);
				TrackingAndAttendanceWorklists = new LocalFormName(129137);
				AllocatedNurseDialog = new LocalFormName(129134);
				EDTriageWorklistToAssessmentForm = new LocalFormName(129186);
				EDClinicianWorklistToAssessmentForm = new LocalFormName(129187);
				EDSeenByAndCompleteDialog = new LocalFormName(129191);
				EDReferralToSpecialtyDialog = new LocalFormName(129188);
				EDDecisionToAdmitDialog = new LocalFormName(129193);
				EDPartialAdmissionDialog = new LocalFormName(129205);
				WoundImagesCC = new LocalFormName(129208);
			}
			public final FormName TriageNoteDialog;
			public final FormName TriageNotesDialog;
			public final FormName AttendanceHistory;
			public final FormName SendToAreaDialog;
			public final FormName TriageProtocolAssessment;
			public final FormName Tracking;
			public final FormName TrackingSummary;
			public final FormName TrackingAndAttendanceWorklists;
			public final FormName AllocatedNurseDialog;
			public final FormName EDTriageWorklistToAssessmentForm;
			public final FormName EDClinicianWorklistToAssessmentForm;
			public final FormName EDSeenByAndCompleteDialog;
			public final FormName EDReferralToSpecialtyDialog;
			public final FormName EDDecisionToAdmitDialog;
			public final FormName EDPartialAdmissionDialog;
			public final FormName WoundImagesCC;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PrintReportByIMSId = new LocalFormName(102403);
				PrintReport = new LocalFormName(102180);
			}
			public final FormName PrintReportByIMSId;
			public final FormName PrintReport;
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				SelectAndOrderDialog = new LocalFormName(116131);
			}
			public final FormName SelectAndOrderDialog;
		}

		public EmergencyForms Emergency;
		public CoreForms Core;
		public OCRRForms OCRR;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Emergency = new EmergencyImages();
			Core = new CoreImages();
			OCRR = new OCRRImages();
		}
		public final class EmergencyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyImages()
			{
				Triage_Priority_P1 = new ImageHelper(129125, "Images/Emergency/P1.png", new Integer(24), new Integer(24));
				Triage_Priority_P2 = new ImageHelper(129126, "Images/Emergency/P2.png", new Integer(24), new Integer(24));
				Triage_Priority_P3 = new ImageHelper(129127, "Images/Emergency/P3.png", new Integer(24), new Integer(24));
				Triage_Priority_P4 = new ImageHelper(129128, "Images/Emergency/P4.png", new Integer(24), new Integer(24));
				Triage_Priority_P5 = new ImageHelper(129129, "Images/Emergency/P5.png", new Integer(24), new Integer(24));
				Female = new ImageHelper(129138, "Images/Emergency/female.png", new Integer(48), new Integer(48));
				Male = new ImageHelper(129137, "Images/Emergency/male.png", new Integer(48), new Integer(48));
				Resuscitation48 = new ImageHelper(129136, "Images/Emergency/resuscitation48.png", new Integer(48), new Integer(48));
				Triage_Priority_SkippedTriage = new ImageHelper(129140, "Images/Emergency/ST.png", new Integer(24), new Integer(24));
				ORDER16 = new ImageHelper(129152, "Images/Emergency/Order.png", new Integer(16), new Integer(16));
				SEENCOMPLETE16 = new ImageHelper(129157, "Images/Emergency/SeenComplete16.png", new Integer(16), new Integer(16));
				REFERTO16 = new ImageHelper(129154, "Images/Emergency/ReferTo.png", new Integer(16), new Integer(16));
				MOVE16 = new ImageHelper(129151, "Images/Emergency/Move16.png", new Integer(16), new Integer(16));
				DTA16 = new ImageHelper(129149, "Images/Emergency/DTA16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Triage_Priority_P1;
			public final ims.framework.utils.Image Triage_Priority_P2;
			public final ims.framework.utils.Image Triage_Priority_P3;
			public final ims.framework.utils.Image Triage_Priority_P4;
			public final ims.framework.utils.Image Triage_Priority_P5;
			public final ims.framework.utils.Image Female;
			public final ims.framework.utils.Image Male;
			public final ims.framework.utils.Image Resuscitation48;
			public final ims.framework.utils.Image Triage_Priority_SkippedTriage;
			public final ims.framework.utils.Image ORDER16;
			public final ims.framework.utils.Image SEENCOMPLETE16;
			public final ims.framework.utils.Image REFERTO16;
			public final ims.framework.utils.Image MOVE16;
			public final ims.framework.utils.Image DTA16;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				CareSpell = new ImageHelper(102253, "Images/Core/CareSpell.gif", new Integer(16), new Integer(16));
				BookOpenEnabled = new ImageHelper(102186, "Images/Core/Book-Open.gif", new Integer(16), new Integer(16));
				Alert_RedTriangle2 = new ImageHelper(102142, "Images/Core/alarm-red-triangle-2.gif", new Integer(16), new Integer(16));
				Radiology48 = new ImageHelper(102376, "Images/Core/radiology_48.png", new Integer(48), new Integer(48));
				NoPatientImage = new ImageHelper(102554, "Images/Core/silhouette_blue.png", new Integer(177), new Integer(177));
				Alert48 = new ImageHelper(102342, "Images/Core/Alert_48.png", new Integer(48), new Integer(48));
				Allergies48 = new ImageHelper(102542, "Images/Core/infirmary_48_new.png", new Integer(48), new Integer(48));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image CareSpell;
			public final ims.framework.utils.Image BookOpenEnabled;
			public final ims.framework.utils.Image Alert_RedTriangle2;
			public final ims.framework.utils.Image Radiology48;
			public final ims.framework.utils.Image NoPatientImage;
			public final ims.framework.utils.Image Alert48;
			public final ims.framework.utils.Image Allergies48;
			public final ims.framework.utils.Image New;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Pathology48 = new ImageHelper(116149, "Images/OCRR/pathology_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image Pathology48;
		}
		public final EmergencyImages Emergency;
		public final CoreImages Core;
		public final OCRRImages OCRR;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedWaitingPatient = new ims.framework.ContextVariable("SelectedWaitingPatient", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__SelectedWaitingPatient_" + componentIdentifier + "");
			cxl_LoggedHcp = new ims.framework.ContextVariable("LoggedHcp", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__LoggedHcp_" + componentIdentifier + "");
			cxl_AttendanceKPIConfig = new ims.framework.ContextVariable("AttendanceKPIConfig", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier + "");
			cxl_CurrentAttendance = new ims.framework.ContextVariable("CurrentAttendance", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier + "");
			cxl_CurrentEpisode = new ims.framework.ContextVariable("CurrentEpisode", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentEpisode_" + componentIdentifier + "");
			cxl_MessageBoxIdForOldEmergencyAttendance = new ims.framework.ContextVariable("MessageBoxIdForOldEmergencyAttendance", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__MessageBoxIdForOldEmergencyAttendance_" + componentIdentifier + "");
			cxl_HistoryMode = new ims.framework.ContextVariable("HistoryMode", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__HistoryMode_" + componentIdentifier + "");
			cxl_PatientImagesList = new ims.framework.ContextVariable("PatientImagesList", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__PatientImagesList_" + componentIdentifier + "");
			cxl_CountOfPreviousAttendances = new ims.framework.ContextVariable("CountOfPreviousAttendances", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CountOfPreviousAttendances_" + componentIdentifier + "");
			cxl_isFormOpenedFromOtherForm = new ims.framework.ContextVariable("isFormOpenedFromOtherForm", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__isFormOpenedFromOtherForm_" + componentIdentifier + "");
			cxl_ShowTriageOrClinicianAssessmentWoklist = new ims.framework.ContextVariable("ShowTriageOrClinicianAssessmentWoklist", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__ShowTriageOrClinicianAssessmentWoklist_" + componentIdentifier + "");
			cxl_AllocatedNurse = new ims.framework.ContextVariable("AllocatedNurse", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AllocatedNurse_" + componentIdentifier + "");
			cxl_OldTrackingArea = new ims.framework.ContextVariable("OldTrackingArea", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__OldTrackingArea_" + componentIdentifier + "");
			cxl_TrackingFromArgument = new ims.framework.ContextVariable("TrackingFromArgument", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__TrackingFromArgument_" + componentIdentifier + "");
			cxl_FormthatShouldBeOpened = new ims.framework.ContextVariable("FormthatShouldBeOpened", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__FormthatShouldBeOpened_" + componentIdentifier + "");
			cxl_CurrentEvent = new ims.framework.ContextVariable("CurrentEvent", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentEvent_" + componentIdentifier + "");
			cxl_FinishedTriage = new ims.framework.ContextVariable("FinishedTriage", prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__FinishedTriage_" + componentIdentifier + "");
		}
		
		public boolean getSelectedWaitingPatientIsNotNull()
		{
			return !cxl_SelectedWaitingPatient.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo getSelectedWaitingPatient()
		{
			return (ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo)cxl_SelectedWaitingPatient.getValue(context);
		}
		public void setSelectedWaitingPatient(ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo value)
		{
			cxl_SelectedWaitingPatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedWaitingPatient = null;
		public boolean getLoggedHcpIsNotNull()
		{
			return !cxl_LoggedHcp.getValueIsNull(context);
		}
		public ims.core.resource.people.vo.HcpRefVo getLoggedHcp()
		{
			return (ims.core.resource.people.vo.HcpRefVo)cxl_LoggedHcp.getValue(context);
		}
		public void setLoggedHcp(ims.core.resource.people.vo.HcpRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'LoggedHcp' RefVo context variable.");
			if(value == null)
				cxl_LoggedHcp.setValue(context, null);
			else
				cxl_LoggedHcp.setValue(context, new ims.core.resource.people.vo.HcpRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_LoggedHcp = null;
		public boolean getAttendanceKPIConfigIsNotNull()
		{
			return !cxl_AttendanceKPIConfig.getValueIsNull(context);
		}
		public ims.emergency.vo.AttendanceKPIConfigForClinicianWorklistVo getAttendanceKPIConfig()
		{
			return (ims.emergency.vo.AttendanceKPIConfigForClinicianWorklistVo)cxl_AttendanceKPIConfig.getValue(context);
		}
		public void setAttendanceKPIConfig(ims.emergency.vo.AttendanceKPIConfigForClinicianWorklistVo value)
		{
			cxl_AttendanceKPIConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AttendanceKPIConfig = null;
		public boolean getCurrentAttendanceIsNotNull()
		{
			return !cxl_CurrentAttendance.getValueIsNull(context);
		}
		public ims.emergency.vo.EmergencyAttendanceForTriageLiteVo getCurrentAttendance()
		{
			return (ims.emergency.vo.EmergencyAttendanceForTriageLiteVo)cxl_CurrentAttendance.getValue(context);
		}
		public void setCurrentAttendance(ims.emergency.vo.EmergencyAttendanceForTriageLiteVo value)
		{
			cxl_CurrentAttendance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentAttendance = null;
		public boolean getCurrentEpisodeIsNotNull()
		{
			return !cxl_CurrentEpisode.getValueIsNull(context);
		}
		public ims.emergency.vo.EmergencyEpisodeForTriageLiteVo getCurrentEpisode()
		{
			return (ims.emergency.vo.EmergencyEpisodeForTriageLiteVo)cxl_CurrentEpisode.getValue(context);
		}
		public void setCurrentEpisode(ims.emergency.vo.EmergencyEpisodeForTriageLiteVo value)
		{
			cxl_CurrentEpisode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentEpisode = null;
		public boolean getMessageBoxIdForOldEmergencyAttendanceIsNotNull()
		{
			return !cxl_MessageBoxIdForOldEmergencyAttendance.getValueIsNull(context);
		}
		public Integer getMessageBoxIdForOldEmergencyAttendance()
		{
			return (Integer)cxl_MessageBoxIdForOldEmergencyAttendance.getValue(context);
		}
		public void setMessageBoxIdForOldEmergencyAttendance(Integer value)
		{
			cxl_MessageBoxIdForOldEmergencyAttendance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxIdForOldEmergencyAttendance = null;
		public boolean getHistoryModeIsNotNull()
		{
			return !cxl_HistoryMode.getValueIsNull(context);
		}
		public Boolean getHistoryMode()
		{
			return (Boolean)cxl_HistoryMode.getValue(context);
		}
		public void setHistoryMode(Boolean value)
		{
			cxl_HistoryMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HistoryMode = null;
		public boolean getPatientImagesListIsNotNull()
		{
			return !cxl_PatientImagesList.getValueIsNull(context);
		}
		public java.util.List<String> getPatientImagesList()
		{
			return (java.util.List<String>)cxl_PatientImagesList.getValue(context);
		}
		public void setPatientImagesList(java.util.List<String> value)
		{
			cxl_PatientImagesList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientImagesList = null;
		public boolean getCountOfPreviousAttendancesIsNotNull()
		{
			return !cxl_CountOfPreviousAttendances.getValueIsNull(context);
		}
		public Integer getCountOfPreviousAttendances()
		{
			return (Integer)cxl_CountOfPreviousAttendances.getValue(context);
		}
		public void setCountOfPreviousAttendances(Integer value)
		{
			cxl_CountOfPreviousAttendances.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CountOfPreviousAttendances = null;
		public boolean getisFormOpenedFromOtherFormIsNotNull()
		{
			return !cxl_isFormOpenedFromOtherForm.getValueIsNull(context);
		}
		public Boolean getisFormOpenedFromOtherForm()
		{
			return (Boolean)cxl_isFormOpenedFromOtherForm.getValue(context);
		}
		public void setisFormOpenedFromOtherForm(Boolean value)
		{
			cxl_isFormOpenedFromOtherForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isFormOpenedFromOtherForm = null;
		public boolean getShowTriageOrClinicianAssessmentWoklistIsNotNull()
		{
			return !cxl_ShowTriageOrClinicianAssessmentWoklist.getValueIsNull(context);
		}
		public Integer getShowTriageOrClinicianAssessmentWoklist()
		{
			return (Integer)cxl_ShowTriageOrClinicianAssessmentWoklist.getValue(context);
		}
		public void setShowTriageOrClinicianAssessmentWoklist(Integer value)
		{
			cxl_ShowTriageOrClinicianAssessmentWoklist.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowTriageOrClinicianAssessmentWoklist = null;
		public boolean getAllocatedNurseIsNotNull()
		{
			return !cxl_AllocatedNurse.getValueIsNull(context);
		}
		public ims.emergency.vo.SeenByHCPVo getAllocatedNurse()
		{
			return (ims.emergency.vo.SeenByHCPVo)cxl_AllocatedNurse.getValue(context);
		}
		public void setAllocatedNurse(ims.emergency.vo.SeenByHCPVo value)
		{
			cxl_AllocatedNurse.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllocatedNurse = null;
		public boolean getOldTrackingAreaIsNotNull()
		{
			return !cxl_OldTrackingArea.getValueIsNull(context);
		}
		public ims.emergency.configuration.vo.TrackingAreaRefVo getOldTrackingArea()
		{
			return (ims.emergency.configuration.vo.TrackingAreaRefVo)cxl_OldTrackingArea.getValue(context);
		}
		public void setOldTrackingArea(ims.emergency.configuration.vo.TrackingAreaRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'OldTrackingArea' RefVo context variable.");
			if(value == null)
				cxl_OldTrackingArea.setValue(context, null);
			else
				cxl_OldTrackingArea.setValue(context, new ims.emergency.configuration.vo.TrackingAreaRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_OldTrackingArea = null;
		public boolean getTrackingFromArgumentIsNotNull()
		{
			return !cxl_TrackingFromArgument.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo getTrackingFromArgument()
		{
			return (ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo)cxl_TrackingFromArgument.getValue(context);
		}
		public void setTrackingFromArgument(ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo value)
		{
			cxl_TrackingFromArgument.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TrackingFromArgument = null;
		public boolean getFormthatShouldBeOpenedIsNotNull()
		{
			return !cxl_FormthatShouldBeOpened.getValueIsNull(context);
		}
		public Integer getFormthatShouldBeOpened()
		{
			return (Integer)cxl_FormthatShouldBeOpened.getValue(context);
		}
		public void setFormthatShouldBeOpened(Integer value)
		{
			cxl_FormthatShouldBeOpened.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FormthatShouldBeOpened = null;
		public boolean getCurrentEventIsNotNull()
		{
			return !cxl_CurrentEvent.getValueIsNull(context);
		}
		public ims.emergency.vo.enums.EDAssessmentComponent getCurrentEvent()
		{
			return (ims.emergency.vo.enums.EDAssessmentComponent)cxl_CurrentEvent.getValue(context);
		}
		public void setCurrentEvent(ims.emergency.vo.enums.EDAssessmentComponent value)
		{
			cxl_CurrentEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentEvent = null;
		public boolean getFinishedTriageIsNotNull()
		{
			return !cxl_FinishedTriage.getValueIsNull(context);
		}
		public Boolean getFinishedTriage()
		{
			return (Boolean)cxl_FinishedTriage.getValue(context);
		}
		public void setFinishedTriage(Boolean value)
		{
			cxl_FinishedTriage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FinishedTriage = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EmergencyNamespace Emergency = new EmergencyNamespace();
		public final class EmergencyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class OtherProblemsTriageMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
			}
			public void disableAllOtherProblemsTriageMenuMenuItems()
			{
				this.contextMenuOtherProblemsTriageMenuADDItem.setEnabled(false);
				this.contextMenuOtherProblemsTriageMenuEDITItem.setEnabled(false);
			}
			public void hideAllOtherProblemsTriageMenuMenuItems()
			{
				this.contextMenuOtherProblemsTriageMenuADDItem.setVisible(false);
				this.contextMenuOtherProblemsTriageMenuEDITItem.setVisible(false);
			}
			private Menu contextMenuOtherProblemsTriageMenu;
			public ReadOnlyMenuItem getOtherProblemsTriageMenuADDItem()
			{
				return this.contextMenuOtherProblemsTriageMenuADDItem;
			}
			private MenuItem contextMenuOtherProblemsTriageMenuADDItem;
			public ReadOnlyMenuItem getOtherProblemsTriageMenuEDITItem()
			{
				return this.contextMenuOtherProblemsTriageMenuEDITItem;
			}
			private MenuItem contextMenuOtherProblemsTriageMenuEDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}


	public final class Timers implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private Timer timerEdAttendanceDetails;
		public Timer gettimerEdAttendanceDetails()
		{
			return timerEdAttendanceDetails;
		}
		public void enableAll()
		{
			timerEdAttendanceDetails.setEnabled(true);
		}
		public void disableAll()
		{
			timerEdAttendanceDetails.setEnabled(false);
		}
	}
	private Timers timers;
	public Timers getTimers()
	{
		return this.timers;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[125];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Emergency.MainPresentingProblem", "BO-1073100005-ID", "ID_ClinicalProblem");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Emergency.MainPresentingProblem", "BO-1073100005-PCNAME", "PCName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Emergency.MainPresentingProblem", "BO-1073100005-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Emergency.Tracking", "BO-1086100005-ID", "ID_Tracking");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Emergency.Triage", "BO-1086100004-ID", "ID_Triage");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Emergency.TriageProtocolAssessment", "BO-1086100018-ID", "ID_TriageProtocolAssessment");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__SelectedWaitingPatient_" + componentIdentifier, "BO-1086100005-ID", "ID_Tracking");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__SelectedWaitingPatient_" + componentIdentifier, "BO-1086100005-ISDISCHARGED", "IsDischarged");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__LoggedHcp_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-ID", "ID_AttendanceKPIConfig");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPI", "LosBreachWarningKPI");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPI", "LosBreachedKPI");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPIFLASHINGTEXTCOLOUR", "LosBreachWarningKPIFlashingTextColour");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPIBACKGROUNDCOLOUR", "LosBreachWarningKPIBackgroundColour");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPIFLASHINGTEXTCOLOUR", "LosBreachedKPIFlashingTextColour");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPIBACKGROUNDCOLOUR", "LosBreachedKPIBackgroundColour");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPITEXTCOLOUR", "LosBreachWarningKPITextColour");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPIFLASHINGTEXT", "LosBreachWarningKPIFlashingText");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHKPITEXTCOLOUR", "LosBreachKPITextColour");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPIFLASHINGTEXT", "LosBreachedKPIFlashingText");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHEDKPI", "AwaitingTriageBreachedKPI");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-ID", "ID_EmergencyAttendance");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-REGISTRATIONDATETIME", "RegistrationDateTime");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-AGEATATTENDANCE", "AgeAtAttendance");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-ARRIVALDATETIME", "ArrivalDateTime");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-DISCHARGEDATETIME", "DischargeDateTime");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-CARECONTEXT", "CareContext");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-URGENCYLEVEL", "UrgencyLevel");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-CONCLUSIONDATETIME", "ConclusionDateTime");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-BEDTYPEREQUESTED", "BedTypeRequested");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-MC", "MC");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-COTA", "COTA");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-PCG1", "PCG1");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-PCG2", "PCG2");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-HAR", "HAR");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-PURCHASER", "Purchaser");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentAttendance_" + componentIdentifier, "BO-1004100025-SEQUENCENUMBER", "SequenceNumber");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentEpisode_" + componentIdentifier, "BO-1004100024-ID", "ID_EmergencyEpisode");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentEpisode_" + componentIdentifier, "BO-1004100024-INJURYDATETIME", "InjuryDateTime");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentEpisode_" + componentIdentifier, "BO-1004100024-EPISODEOFCARE", "EpisodeOfCare");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentEpisode_" + componentIdentifier, "BO-1004100024-PRESENTINGCOMPLAINT", "PresentingComplaint");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentEpisode_" + componentIdentifier, "BO-1004100024-CATEGORY", "Category");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__CurrentEpisode_" + componentIdentifier, "BO-1004100024-MEDPATIENTCONSENT", "MedPatientConsent");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AllocatedNurse_" + componentIdentifier, "BO-1086100034-ID", "ID_SeenByHCP");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AllocatedNurse_" + componentIdentifier, "BO-1086100034-PATIENT", "Patient");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AllocatedNurse_" + componentIdentifier, "BO-1086100034-EPISODE", "Episode");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AllocatedNurse_" + componentIdentifier, "BO-1086100034-ATTENDANCE", "Attendance");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AllocatedNurse_" + componentIdentifier, "BO-1086100034-TRACKINGAREA", "TrackingArea");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AllocatedNurse_" + componentIdentifier, "BO-1086100034-ALLOCATEDDATETIME", "AllocatedDateTime");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AllocatedNurse_" + componentIdentifier, "BO-1086100034-SEENDATETIME", "SeenDateTime");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__AllocatedNurse_" + componentIdentifier, "BO-1086100034-COMPLETEDDATETIME", "CompletedDateTime");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__OldTrackingArea_" + componentIdentifier, "BO-1087100001-ID", "ID_TrackingArea");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__TrackingFromArgument_" + componentIdentifier, "BO-1086100005-ID", "ID_Tracking");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDAssessmentComponent.__internal_x_context__TrackingFromArgument_" + componentIdentifier, "BO-1086100005-ISDISCHARGED", "IsDischarged");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
