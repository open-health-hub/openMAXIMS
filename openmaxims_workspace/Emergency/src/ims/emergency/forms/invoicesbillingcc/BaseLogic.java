//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.invoicesbillingcc;

public abstract class BaseLogic extends Handlers implements IComponent
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.emergency.domain.InvoicesBillingCc.class;
	}
	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form, ims.emergency.domain.InvoicesBillingCc domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	public void setMode(ims.framework.enumerations.FormMode mode)
	{
		form.setMode(mode);
	}
	public ims.framework.enumerations.FormMode getMode()
	{
		return form.getMode();
	}
	protected final void oncmbPaymentRefundedValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPaymentRefunded().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPaymentRefundedLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPaymentRefundedLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPaymentRefunded().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPaymentRefundedLookup()
	{
		this.form.cmbPaymentRefunded().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPaymentRefunded().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPaymentRefundedLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPaymentRefunded().setValue(instance);
	}
	protected final void defaultcmbPaymentRefundedLookupValue()
	{
		this.form.cmbPaymentRefunded().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbReasonForNonPaymentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbReasonForNonPayment().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.billing.vo.lookups.ReasonForNonPayment existingInstance = (ims.billing.vo.lookups.ReasonForNonPayment)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbReasonForNonPaymentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.billing.vo.lookups.ReasonForNonPayment)
		{
			ims.billing.vo.lookups.ReasonForNonPayment instance = (ims.billing.vo.lookups.ReasonForNonPayment)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbReasonForNonPaymentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.billing.vo.lookups.ReasonForNonPayment existingInstance = (ims.billing.vo.lookups.ReasonForNonPayment)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbReasonForNonPayment().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbReasonForNonPaymentLookup()
	{
		this.form.cmbReasonForNonPayment().clear();
		ims.billing.vo.lookups.ReasonForNonPaymentCollection lookupCollection = ims.billing.vo.lookups.LookupHelper.getReasonForNonPayment(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbReasonForNonPayment().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbReasonForNonPaymentLookupValue(int id)
	{
		ims.billing.vo.lookups.ReasonForNonPayment instance = ims.billing.vo.lookups.LookupHelper.getReasonForNonPaymentInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbReasonForNonPayment().setValue(instance);
	}
	protected final void defaultcmbReasonForNonPaymentLookupValue()
	{
		this.form.cmbReasonForNonPayment().setValue((ims.billing.vo.lookups.ReasonForNonPayment)domain.getLookupService().getDefaultInstance(ims.billing.vo.lookups.ReasonForNonPayment.class, engine.getFormName().getID(), ims.billing.vo.lookups.ReasonForNonPayment.TYPE_ID));
	}
	protected final void oncmbPaymentTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPaymentType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.pci.vo.lookups.PaymentType existingInstance = (ims.pci.vo.lookups.PaymentType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPaymentTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.pci.vo.lookups.PaymentType)
		{
			ims.pci.vo.lookups.PaymentType instance = (ims.pci.vo.lookups.PaymentType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPaymentTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.pci.vo.lookups.PaymentType existingInstance = (ims.pci.vo.lookups.PaymentType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPaymentType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPaymentTypeLookup()
	{
		this.form.cmbPaymentType().clear();
		ims.pci.vo.lookups.PaymentTypeCollection lookupCollection = ims.pci.vo.lookups.LookupHelper.getPaymentType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPaymentType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPaymentTypeLookupValue(int id)
	{
		ims.pci.vo.lookups.PaymentType instance = ims.pci.vo.lookups.LookupHelper.getPaymentTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPaymentType().setValue(instance);
	}
	protected final void defaultcmbPaymentTypeLookupValue()
	{
		this.form.cmbPaymentType().setValue((ims.pci.vo.lookups.PaymentType)domain.getLookupService().getDefaultInstance(ims.pci.vo.lookups.PaymentType.class, engine.getFormName().getID(), ims.pci.vo.lookups.PaymentType.TYPE_ID));
	}
	protected final void oncmbPaymentMadeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPaymentMade().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPaymentMadeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPaymentMadeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPaymentMade().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPaymentMadeLookup()
	{
		this.form.cmbPaymentMade().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPaymentMade().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPaymentMadeLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPaymentMade().setValue(instance);
	}
	protected final void defaultcmbPaymentMadeLookupValue()
	{
		this.form.cmbPaymentMade().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbExemptionReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbExemptionReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ExemptionReason existingInstance = (ims.emergency.vo.lookups.ExemptionReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbExemptionReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.ExemptionReason)
		{
			ims.emergency.vo.lookups.ExemptionReason instance = (ims.emergency.vo.lookups.ExemptionReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbExemptionReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ExemptionReason existingInstance = (ims.emergency.vo.lookups.ExemptionReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbExemptionReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbExemptionReasonLookup()
	{
		this.form.cmbExemptionReason().clear();
		ims.emergency.vo.lookups.ExemptionReasonCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getExemptionReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbExemptionReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbExemptionReasonLookupValue(int id)
	{
		ims.emergency.vo.lookups.ExemptionReason instance = ims.emergency.vo.lookups.LookupHelper.getExemptionReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbExemptionReason().setValue(instance);
	}
	protected final void defaultcmbExemptionReasonLookupValue()
	{
		this.form.cmbExemptionReason().setValue((ims.emergency.vo.lookups.ExemptionReason)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.ExemptionReason.class, engine.getFormName().getID(), ims.emergency.vo.lookups.ExemptionReason.TYPE_ID));
	}
	protected final void oncmbIsPatientExemptValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbIsPatientExempt().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIsPatientExemptLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIsPatientExemptLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbIsPatientExempt().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIsPatientExemptLookup()
	{
		this.form.cmbIsPatientExempt().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbIsPatientExempt().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIsPatientExemptLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbIsPatientExempt().setValue(instance);
	}
	protected final void defaultcmbIsPatientExemptLookupValue()
	{
		this.form.cmbIsPatientExempt().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.emergency.domain.InvoicesBillingCc domain;
}
