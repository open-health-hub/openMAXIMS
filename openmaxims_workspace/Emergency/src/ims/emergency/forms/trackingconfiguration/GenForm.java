//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.trackingconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabAreaDefinitionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 808, 512, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccAreaDefinitionForm = loader.loadComponent(129111, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 6, skipContextValidation);
				//ims.framework.Control m_ccAreaDefinitionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(808), new Integer(512), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 6), m_ccAreaDefinitionForm, instance1 } );
				ims.framework.Control m_ccAreaDefinitionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 6), m_ccAreaDefinitionForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAreaDefinitionControl);
				Menu[] menus1 = m_ccAreaDefinitionForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.areadefinition.IComponent ccAreaDefinition()
			{
				return (ims.emergency.forms.areadefinition.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccAreaDefinitionValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccAreaDefinitionVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccAreaDefinitionVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccAreaDefinitionEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccAreaDefinitionEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabSendToConfigContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 808, 512, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSendToConfigForm = loader.loadComponent(129110, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1007, skipContextValidation);
				//ims.framework.Control m_ccSendToConfigControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(0), new Integer(808), new Integer(512), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1007), m_ccSendToConfigForm, instance1 } );
				ims.framework.Control m_ccSendToConfigControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1007), m_ccSendToConfigForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccSendToConfigControl);
				Menu[] menus1 = m_ccSendToConfigForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.sendtoconfig.IComponent ccSendToConfig()
			{
				return (ims.emergency.forms.sendtoconfig.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSendToConfigValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSendToConfigVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSendToConfigVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSendToConfigEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSendToConfigEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabAreaWorkspaceContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 808, 504, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccAreaWorkspaceConfigForm = loader.loadComponent(129118, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 2008, skipContextValidation);
				//ims.framework.Control m_ccAreaWorkspaceConfigControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(0), new Integer(0), new Integer(808), new Integer(504), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2008), m_ccAreaWorkspaceConfigForm, instance1 } );
				ims.framework.Control m_ccAreaWorkspaceConfigControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2008), m_ccAreaWorkspaceConfigForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAreaWorkspaceConfigControl);
				Menu[] menus1 = m_ccAreaWorkspaceConfigForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.areaworkspaceconfig.IComponent ccAreaWorkspaceConfig()
			{
				return (ims.emergency.forms.areaworkspaceconfig.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccAreaWorkspaceConfigValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccAreaWorkspaceConfigVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccAreaWorkspaceConfigVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccAreaWorkspaceConfigEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccAreaWorkspaceConfigEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabCubiclesRoomsBedsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 808, 520, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccCubicleRoomBedForm = loader.loadComponent(129173, appForm, startControlID * 10 + 4000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 3009, skipContextValidation);
				//ims.framework.Control m_ccCubicleRoomBedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(8), new Integer(0), new Integer(808), new Integer(520), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3009), m_ccCubicleRoomBedForm, instance1 } );
				ims.framework.Control m_ccCubicleRoomBedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3009), m_ccCubicleRoomBedForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccCubicleRoomBedControl);
				Menu[] menus1 = m_ccCubicleRoomBedForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.cubiclesroomsbedscc.IComponent ccCubicleRoomBed()
			{
				return (ims.emergency.forms.cubiclesroomsbedscc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccCubicleRoomBedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccCubicleRoomBedVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccCubicleRoomBedVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccCubicleRoomBedEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccCubicleRoomBedEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 816, 536, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAreaDefinition = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Area Definition", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAreaDefinitionContainer m_tabAreaDefinitionContainer = (tabAreaDefinitionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAreaDefinitionContainer.class, m_tabAreaDefinition, factory);
			super.addContainer(m_tabAreaDefinition, m_tabAreaDefinitionContainer);
			ims.framework.utils.SizeInfo m_tabAreaDefinitionDesignSize = new ims.framework.utils.SizeInfo(816, 536);
			ims.framework.utils.SizeInfo m_tabAreaDefinitionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper5.getWidth(), anchoringHelper5.getHeight());
			m_tabAreaDefinitionContainer.setContext(form, appForm, m_tabAreaDefinition, loader, startControlID, m_tabAreaDefinitionDesignSize, m_tabAreaDefinitionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 816, 536, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSendToConfig = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Send To config", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSendToConfigContainer m_tabSendToConfigContainer = (tabSendToConfigContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSendToConfigContainer.class, m_tabSendToConfig, factory);
			super.addContainer(m_tabSendToConfig, m_tabSendToConfigContainer);
			ims.framework.utils.SizeInfo m_tabSendToConfigDesignSize = new ims.framework.utils.SizeInfo(816, 536);
			ims.framework.utils.SizeInfo m_tabSendToConfigRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper6.getWidth(), anchoringHelper6.getHeight());
			m_tabSendToConfigContainer.setContext(form, appForm, m_tabSendToConfig, loader, startControlID, m_tabSendToConfigDesignSize, m_tabSendToConfigRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 816, 536, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAreaWorkspace = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Area workspace config", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAreaWorkspaceContainer m_tabAreaWorkspaceContainer = (tabAreaWorkspaceContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAreaWorkspaceContainer.class, m_tabAreaWorkspace, factory);
			super.addContainer(m_tabAreaWorkspace, m_tabAreaWorkspaceContainer);
			ims.framework.utils.SizeInfo m_tabAreaWorkspaceDesignSize = new ims.framework.utils.SizeInfo(816, 536);
			ims.framework.utils.SizeInfo m_tabAreaWorkspaceRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper7.getWidth(), anchoringHelper7.getHeight());
			m_tabAreaWorkspaceContainer.setContext(form, appForm, m_tabAreaWorkspace, loader, startControlID, m_tabAreaWorkspaceDesignSize, m_tabAreaWorkspaceRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 816, 536, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCubiclesRoomsBeds = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Cubicles/Rooms/Beds", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCubiclesRoomsBedsContainer m_tabCubiclesRoomsBedsContainer = (tabCubiclesRoomsBedsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCubiclesRoomsBedsContainer.class, m_tabCubiclesRoomsBeds, factory);
			super.addContainer(m_tabCubiclesRoomsBeds, m_tabCubiclesRoomsBedsContainer);
			ims.framework.utils.SizeInfo m_tabCubiclesRoomsBedsDesignSize = new ims.framework.utils.SizeInfo(816, 536);
			ims.framework.utils.SizeInfo m_tabCubiclesRoomsBedsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper8.getWidth(), anchoringHelper8.getHeight());
			m_tabCubiclesRoomsBedsContainer.setContext(form, appForm, m_tabCubiclesRoomsBeds, loader, startControlID, m_tabCubiclesRoomsBedsDesignSize, m_tabCubiclesRoomsBedsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabAreaDefinition().setVisible(false);
			tabSendToConfig().setVisible(false);
			tabAreaWorkspace().setVisible(false);
			tabCubiclesRoomsBeds().setVisible(false);
		}
		public void settabAreaDefinitionEnabled(boolean value)
		{
			tabAreaDefinition().setEnabled(value);
		}
		public void settabSendToConfigEnabled(boolean value)
		{
			tabSendToConfig().setEnabled(value);
		}
		public void settabAreaWorkspaceEnabled(boolean value)
		{
			tabAreaWorkspace().setEnabled(value);
		}
		public void settabCubiclesRoomsBedsEnabled(boolean value)
		{
			tabCubiclesRoomsBeds().setEnabled(value);
		}
		public void showtabAreaDefinition()
		{
			tabSendToConfig().setVisible(false);
			tabAreaWorkspace().setVisible(false);
			tabCubiclesRoomsBeds().setVisible(false);
			tabAreaDefinition().setVisible(true);
		}
		public void showtabSendToConfig()
		{
			tabAreaDefinition().setVisible(false);
			tabAreaWorkspace().setVisible(false);
			tabCubiclesRoomsBeds().setVisible(false);
			tabSendToConfig().setVisible(true);
		}
		public void showtabAreaWorkspace()
		{
			tabAreaDefinition().setVisible(false);
			tabSendToConfig().setVisible(false);
			tabCubiclesRoomsBeds().setVisible(false);
			tabAreaWorkspace().setVisible(true);
		}
		public void showtabCubiclesRoomsBeds()
		{
			tabAreaDefinition().setVisible(false);
			tabSendToConfig().setVisible(false);
			tabAreaWorkspace().setVisible(false);
			tabCubiclesRoomsBeds().setVisible(true);
		}

		public tabAreaDefinitionContainer tabAreaDefinition()
		{
			return (tabAreaDefinitionContainer)super.layers.get(0);
		}
		public tabSendToConfigContainer tabSendToConfig()
		{
			return (tabSendToConfigContainer)super.layers.get(1);
		}
		public tabAreaWorkspaceContainer tabAreaWorkspace()
		{
			return (tabAreaWorkspaceContainer)super.layers.get(2);
		}
		public tabCubiclesRoomsBedsContainer tabCubiclesRoomsBeds()
		{
			return (tabCubiclesRoomsBedsContainer)super.layers.get(3);
		}
	}
	public static class cmbEmergDepartComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 496, 18, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 576, 18, 166, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tracking Refresh Rate (sec.)", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 139, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Emergency Department", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 4013), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 680, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4012), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 4011), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 4010), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 160, 16, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbEmergDepartTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbEmergDepartTemp);
		cmbEmergDepartComboBox cmbEmergDepart = (cmbEmergDepartComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEmergDepartComboBox.class, m_cmbEmergDepartTemp);
		super.addComboBox(cmbEmergDepart);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 544, 18, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 760, 16, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(8);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(9);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(10);
	}
	public cmbEmergDepartComboBox cmbEmergDepart()
	{
		return (cmbEmergDepartComboBox)super.getComboBox(0);
	}
	public CheckBox chkActive()
	{
		return (CheckBox)super.getControl(12);
	}
	public IntBox intRefreshRate()
	{
		return (IntBox)super.getControl(13);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Emergency = new EmergencyForms();
		}
		public final class EmergencyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyForms()
			{
				AddEditArea = new LocalFormName(129113);
			}
			public final FormName AddEditArea;
		}

		public EmergencyForms Emergency;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_TrackingConfig = new ims.framework.ContextVariable("TrackingConfig", prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingConfig_" + componentIdentifier + "");
			cxl_TrackingArea = new ims.framework.ContextVariable("TrackingArea", prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingArea_" + componentIdentifier + "");
			cxl_AreaFromSendToConfig = new ims.framework.ContextVariable("AreaFromSendToConfig", prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromSendToConfig_" + componentIdentifier + "");
			cxl_AreaFromAreaWorkspace = new ims.framework.ContextVariable("AreaFromAreaWorkspace", prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromAreaWorkspace_" + componentIdentifier + "");
		}
		
		public boolean getTrackingConfigIsNotNull()
		{
			return !cxl_TrackingConfig.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingConfigurationVo getTrackingConfig()
		{
			return (ims.emergency.vo.TrackingConfigurationVo)cxl_TrackingConfig.getValue(context);
		}
		public void setTrackingConfig(ims.emergency.vo.TrackingConfigurationVo value)
		{
			cxl_TrackingConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TrackingConfig = null;
		public boolean getTrackingAreaIsNotNull()
		{
			return !cxl_TrackingArea.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingAreaVo getTrackingArea()
		{
			return (ims.emergency.vo.TrackingAreaVo)cxl_TrackingArea.getValue(context);
		}
		public void setTrackingArea(ims.emergency.vo.TrackingAreaVo value)
		{
			cxl_TrackingArea.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TrackingArea = null;
		public boolean getAreaFromSendToConfigIsNotNull()
		{
			return !cxl_AreaFromSendToConfig.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingAreaVo getAreaFromSendToConfig()
		{
			return (ims.emergency.vo.TrackingAreaVo)cxl_AreaFromSendToConfig.getValue(context);
		}
		public void setAreaFromSendToConfig(ims.emergency.vo.TrackingAreaVo value)
		{
			cxl_AreaFromSendToConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AreaFromSendToConfig = null;
		public boolean getAreaFromAreaWorkspaceIsNotNull()
		{
			return !cxl_AreaFromAreaWorkspace.getValueIsNull(context);
		}
		public ims.emergency.vo.TrackingAreaVo getAreaFromAreaWorkspace()
		{
			return (ims.emergency.vo.TrackingAreaVo)cxl_AreaFromAreaWorkspace.getValue(context);
		}
		public void setAreaFromAreaWorkspace(ims.emergency.vo.TrackingAreaVo value)
		{
			cxl_AreaFromAreaWorkspace.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AreaFromAreaWorkspace = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[104];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDLocation", "BO-1007100007-ID", "ID_Location");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDLocation", "BO-1007100007-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDLocation", "BO-1007100007-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDLocation", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDLocation", "BO-1007100007-TYPE", "Type");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Emergency.EDLocation", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingConfig_" + componentIdentifier, "BO-1087100000-ID", "ID_TrackingConfiguration");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingConfig_" + componentIdentifier, "BO-1087100000-ISACTIVE", "IsActive");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingConfig_" + componentIdentifier, "BO-1087100000-AREACOUNTREFRESHRATE", "AreaCountRefreshRate");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingArea_" + componentIdentifier, "BO-1087100001-ID", "ID_TrackingArea");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingArea_" + componentIdentifier, "BO-1087100001-AREANAMEDESCRIPTION", "AreaNameDescription");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingArea_" + componentIdentifier, "BO-1087100001-AREADISPLAYNAME", "AreaDisplayName");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingArea_" + componentIdentifier, "BO-1087100001-STATUS", "Status");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingArea_" + componentIdentifier, "BO-1087100001-ISOVERALLVIEW", "IsOverallView");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingArea_" + componentIdentifier, "BO-1087100001-ISREGISTRATIONAREA", "IsRegistrationArea");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingArea_" + componentIdentifier, "BO-1087100001-PATIENTREFRESHRATE", "PatientRefreshRate");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__TrackingArea_" + componentIdentifier, "BO-1087100001-AREATYPE", "AreaType");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromSendToConfig_" + componentIdentifier, "BO-1087100001-ID", "ID_TrackingArea");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromSendToConfig_" + componentIdentifier, "BO-1087100001-AREANAMEDESCRIPTION", "AreaNameDescription");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromSendToConfig_" + componentIdentifier, "BO-1087100001-AREADISPLAYNAME", "AreaDisplayName");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromSendToConfig_" + componentIdentifier, "BO-1087100001-STATUS", "Status");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromSendToConfig_" + componentIdentifier, "BO-1087100001-ISOVERALLVIEW", "IsOverallView");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromSendToConfig_" + componentIdentifier, "BO-1087100001-ISREGISTRATIONAREA", "IsRegistrationArea");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromSendToConfig_" + componentIdentifier, "BO-1087100001-PATIENTREFRESHRATE", "PatientRefreshRate");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromSendToConfig_" + componentIdentifier, "BO-1087100001-AREATYPE", "AreaType");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromAreaWorkspace_" + componentIdentifier, "BO-1087100001-ID", "ID_TrackingArea");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromAreaWorkspace_" + componentIdentifier, "BO-1087100001-AREANAMEDESCRIPTION", "AreaNameDescription");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromAreaWorkspace_" + componentIdentifier, "BO-1087100001-AREADISPLAYNAME", "AreaDisplayName");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromAreaWorkspace_" + componentIdentifier, "BO-1087100001-STATUS", "Status");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromAreaWorkspace_" + componentIdentifier, "BO-1087100001-ISOVERALLVIEW", "IsOverallView");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromAreaWorkspace_" + componentIdentifier, "BO-1087100001-ISREGISTRATIONAREA", "IsRegistrationArea");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromAreaWorkspace_" + componentIdentifier, "BO-1087100001-PATIENTREFRESHRATE", "PatientRefreshRate");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TrackingConfiguration.__internal_x_context__AreaFromAreaWorkspace_" + componentIdentifier, "BO-1087100001-AREATYPE", "AreaType");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
