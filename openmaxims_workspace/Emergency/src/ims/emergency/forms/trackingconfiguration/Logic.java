//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.trackingconfiguration;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.TrackingAreaCubiclesVo;
import ims.emergency.vo.TrackingAreaVo;
import ims.emergency.vo.TrackingConfigurationVo;
import ims.emergency.vo.enums.AreaDefinitionEvent;
import ims.emergency.vo.enums.AreaWorkspaceEvent;
import ims.emergency.vo.enums.SendToConfigEvent;
import ims.framework.LayerBridge;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateLocationCombo();
		open();
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbEmergDepart().getValue()!= null)
		{
			form.getGlobalContext().Emergency.setEDLocation(form.cmbEmergDepart().getValue());
			form.getLocalContext().setTrackingConfig(domain.getTrackingConfig(form.cmbEmergDepart().getValue()));

			if (form.getLocalContext().getTrackingConfigIsNotNull())
			{
				form.lyr1().tabSendToConfig().ccSendToConfig().initialize(false, form.getLocalContext().getTrackingConfig().getAreas());
				form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().initialize(false, form.getLocalContext().getTrackingConfig().getAreas());
				form.lyr1().tabCubiclesRoomsBeds().ccCubicleRoomBed().initialize(false, form.getLocalContext().getTrackingConfig().getAreas()); //wdev-16011
			}
		}
		
		populateScreenFromData();
		form.setMode(FormMode.VIEW);
	}

	private void populateScreenFromData() throws PresentationLogicException
	{
		clearControls();

		if (form.cmbEmergDepart().getValue() == null)
			return;

		form.getGlobalContext().Emergency.setEDLocation(form.cmbEmergDepart().getValue());
		form.getLocalContext().setTrackingConfig(domain.getTrackingConfig(form.cmbEmergDepart().getValue()));

		if (form.getLocalContext().getTrackingConfigIsNotNull())
		{
			form.chkActive().setValue(form.getLocalContext().getTrackingConfig().getIsActive());
			form.intRefreshRate().setValue(form.getLocalContext().getTrackingConfig().getAreaCountRefreshRate());
		}
		populateTabs(form.getLocalContext().getTrackingConfig());

	}

	private void populateLocationCombo()
	{
		// FB
		LocationLiteVoCollection collLocations = domain.listLocations();
		if (collLocations == null)
			return;

		for (int i = 0; i < collLocations.size(); i++)
		{
			form.cmbEmergDepart().newRow(collLocations.get(i), collLocations.get(i).getName());
		}

	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.lyr1().tabAreaDefinition().isVisible())
		{
			if (saveTrackConfig())
				open();
		}
		else if (form.lyr1().tabSendToConfig().isVisible() || form.lyr1().tabAreaWorkspace().isVisible()) // WDEV-14347
		{
			if (saveTrackArea())
			{
				open();
			}

		}
		else if(form.lyr1().tabCubiclesRoomsBeds().isVisible())												//wdev-16011
		{
			//WDEV-17368
			if (form.lyr1().tabCubiclesRoomsBeds().ccCubicleRoomBed().removedCubicleAreUsed())
			{
				engine.showMessage("Save cannot be performed because some Cubicles/Rooms/Beds removed are currently assigned to a patient.");
				open();
			}
			
			if( saveTrackingAreaCubicle())
				open();
		}
	}
	private boolean saveTrackingAreaCubicle()
	{
		TrackingAreaCubiclesVo trackingAreaCub = form.lyr1().tabCubiclesRoomsBeds().ccCubicleRoomBed().getValue();
		
		if( trackingAreaCub == null )
		{
			engine.showErrors(new String[]{"Select an Area."});
			return false;
		}
		String[] errors = trackingAreaCub.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			domain.saveTrackingAreaCubicle(trackingAreaCub);
			
		
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		return true;

		
	}

	private boolean saveTrackArea() throws PresentationLogicException
	{
		// WDEV-14347
		TrackingAreaVo trackingAreaToSave;

		if (form.lyr1().tabSendToConfig().isVisible())
		{
			trackingAreaToSave = form.lyr1().tabSendToConfig().ccSendToConfig().getValue();
			form.getLocalContext().setAreaFromSendToConfig(trackingAreaToSave);
		}
		else
		{
			trackingAreaToSave = form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().getValue();
			form.getLocalContext().setAreaFromAreaWorkspace(trackingAreaToSave);
		}

		String[] errors = trackingAreaToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		if (trackingAreaToSave.getID_TrackingAreaIsNotNull() && domain.isStaleTrackingArea(trackingAreaToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setTrackingArea(null);
			open();
			return false;
		}

		try
		{
			form.getLocalContext().setTrackingArea(domain.saveTrackingArea(trackingAreaToSave));
			
			form.getLocalContext().getTrackingArea();
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		return true;
	}

	private boolean saveTrackConfig() throws PresentationLogicException
	{
		TrackingConfigurationVo trackingConfigToSave = populateDataFromScreen(form.getLocalContext().getTrackingConfig());
		TrackingConfigurationVo trackingConfigExistent = domain.getTrackingConfig(form.cmbEmergDepart().getValue());

		String[] errors = trackingConfigToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Condition to create only one TrackingConfig Per Emergency Department
		if (trackingConfigExistent != null && form.getLocalContext().getTrackingConfig() == null)
		{
			engine.showMessage("A Tracking Configuration for the selected Emergency Department already exist. The screen will be refreshed");
			form.getLocalContext().setTrackingConfig(trackingConfigExistent);
			open();
			return false;
		}

		// SOE on EDIT
		if (trackingConfigToSave.getID_TrackingConfigurationIsNotNull() && domain.isStale(trackingConfigToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setTrackingConfig(null);
			open();
			return false;
		}

		try
		{
			form.getLocalContext().setTrackingConfig(domain.save(trackingConfigToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setTrackingConfig(null);
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		return true;
	}

	private TrackingConfigurationVo populateDataFromScreen(TrackingConfigurationVo trackingConfig)
	{
		if (trackingConfig == null)
			trackingConfig = new TrackingConfigurationVo();

		trackingConfig.setEDLocation(form.cmbEmergDepart().getValue());
		trackingConfig.setAreaCountRefreshRate(form.intRefreshRate().getValue());
		trackingConfig.setIsActive(form.chkActive().getValue());
		trackingConfig.setAreas(form.lyr1().tabAreaDefinition().ccAreaDefinition().getValue());

		return trackingConfig;

	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);

		if (form.lyr1().tabSendToConfig().isVisible())
		{
			form.lyr1().tabSendToConfig().ccSendToConfig().initialize(true, null);
		}
		else if (form.lyr1().tabAreaWorkspace().isVisible()) // WDEV-14347
		{
			form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().initialize(true, null);
		}
		else if (form.lyr1().tabAreaDefinition().isVisible())
		{
			form.lyr1().tabAreaDefinition().ccAreaDefinition().initialize(false);
		}
		else if(form.lyr1().tabCubiclesRoomsBeds().isVisible())									//wdev-16011
		{
			form.lyr1().tabCubiclesRoomsBeds().ccCubicleRoomBed().initialize(true, null);
		}
			
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkActive().setValue(true);
		form.lyr1().tabAreaDefinition().ccAreaDefinition().setValue(null);
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onCmbEmergDepartValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		//clearControls();

		form.getLocalContext().setTrackingConfig(null);
		form.getLocalContext().setTrackingArea(null);
		form.getLocalContext().setAreaFromSendToConfig(null);
		form.getLocalContext().setAreaFromAreaWorkspace(null);

		/*
		if (form.cmbEmergDepart().getValue() != null)
		{
			form.getGlobalContext().Emergency.setEDLocation(form.cmbEmergDepart().getValue());
			form.getLocalContext().setTrackingConfig(domain.getTrackingConfig(form.cmbEmergDepart().getValue()));

			if (form.getLocalContext().getTrackingConfigIsNotNull())
			{
				form.lyr1().tabSendToConfig().ccSendToConfig().initialize(false, form.getLocalContext().getTrackingConfig().getAreas());
				form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().initialize(false, form.getLocalContext().getTrackingConfig().getAreas());
			}
		}
		*/
		form.lyr1().showtabAreaDefinition();

		open();
	}

	private void clearControls()
	{
		form.lyr1().tabAreaDefinition().ccAreaDefinition().clear();
		form.chkActive().setValue(null);
		form.intRefreshRate().setValue(null);
	}

	private void populateTabs(TrackingConfigurationVo trackingConfig)
	{

		if (trackingConfig != null)
		{
			form.lyr1().tabAreaDefinition().ccAreaDefinition().setValue(trackingConfig.getAreas());
			form.lyr1().tabAreaDefinition().ccAreaDefinition().initialize(form.chkActive().getValue()); 

			if (form.lyr1().tabSendToConfig().isVisible())
			{
				// form.lyr1().tabSendToConfig().ccSendToConfig().setValue(form.getLocalContext().getTrackingArea());
				//form.lyr1().tabSendToConfig().ccSendToConfig().setValue(form.lyr1().tabSendToConfig().ccSendToConfig().getFromAreaCombo());
				form.lyr1().tabSendToConfig().ccSendToConfig().setValue(form.getLocalContext().getAreaFromSendToConfig());
			}
			else if (form.lyr1().tabAreaWorkspace().isVisible()) // WDEV-14347
			{
				// form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().setValue(form.getLocalContext().getTrackingArea());
				//form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().setValue(form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().getFromAreaCombo());
				form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().setValue(form.getLocalContext().getAreaFromAreaWorkspace());
			}
		}

	}

	public void updateControlsState()
	{
		//form.chkActive().setEnabled(FormMode.EDIT.equals(form.getMode()) && !form.lyr1().tabSendToConfig().isVisible());
		//form.intRefreshRate().setEnabled(FormMode.EDIT.equals(form.getMode()) && !form.lyr1().tabSendToConfig().isVisible());
		
		form.chkActive().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.lyr1().tabAreaDefinition().isVisible() ); 			//wdev-15905
		form.intRefreshRate().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.lyr1().tabAreaDefinition().isVisible() );		//wdev-15905

		form.lyr1().tabAreaDefinition().ccAreaDefinition().setMode(form.getMode());
		form.lyr1().tabSendToConfig().ccSendToConfig().setMode(form.getMode());
		form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().setMode(form.getMode());	// WDEV-14347
		form.lyr1().tabCubiclesRoomsBeds().ccCubicleRoomBed().setMode(form.getMode());	//wdev-16011

		form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode()) && form.cmbEmergDepart().getValue() != null && domain.getTrackingConfig(form.cmbEmergDepart().getValue()) == null);
		form.btnNew().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.cmbEmergDepart().getValue() != null && domain.getTrackingConfig(form.cmbEmergDepart().getValue()) == null);

		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && !form.btnNew().isVisible() && form.cmbEmergDepart().getValue() != null);

		if (!form.chkActive().getValue() && form.lyr1().tabSendToConfig().isVisible())
		{
			form.btnEdit().setEnabled(false);
		}
		else if (form.lyr1().tabSendToConfig().isVisible() && (form.lyr1().tabSendToConfig().ccSendToConfig().getFromAreaCombo() == null || ims.core.vo.lookups.PreActiveActiveInactiveStatus.INACTIVE.equals(form.lyr1().tabSendToConfig().ccSendToConfig().getFromAreaCombo().getStatus())))
		{
			form.btnEdit().setEnabled(false);
		}
		else if (!form.chkActive().getValue() && form.lyr1().tabAreaWorkspace().isVisible())// WDEV-14347
		{
			form.btnEdit().setEnabled(false);
		}
		else if (form.lyr1().tabAreaWorkspace().isVisible() && (form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().getFromAreaCombo() == null || ims.core.vo.lookups.PreActiveActiveInactiveStatus.INACTIVE.equals(form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().getFromAreaCombo().getStatus())))// WDEV-14347
		{
			form.btnEdit().setEnabled(false);
		}
		else if( form.lyr1().tabCubiclesRoomsBeds().isVisible() && (form.lyr1().tabCubiclesRoomsBeds().ccCubicleRoomBed().getFromAreaCombo() == null || ims.core.vo.lookups.PreActiveActiveInactiveStatus.INACTIVE.equals(form.lyr1().tabCubiclesRoomsBeds().ccCubicleRoomBed().getFromAreaCombo().getStatus())) ) //wdev-16011
		{
			form.btnEdit().setEnabled(false);
		}
		else
			form.btnEdit().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.cmbEmergDepart().getValue() != null && domain.getTrackingConfig(form.cmbEmergDepart().getValue()) != null);

		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.lyr1().tabAreaDefinition().setHeaderEnabled(true);

			// if Tracking Configuration doesn't have a AreaDefinition, Only
			// AreaDefinitionTab should be enabled and also should be visible
			form.lyr1().tabSendToConfig().setHeaderEnabled(!form.btnNew().isEnabled() && form.cmbEmergDepart().getValue() != null);
			form.lyr1().tabAreaWorkspace().setHeaderEnabled(!form.btnNew().isEnabled() && form.cmbEmergDepart().getValue() != null);
			form.lyr1().tabCubiclesRoomsBeds().setHeaderEnabled(!form.btnNew().isEnabled() && form.cmbEmergDepart().getValue() != null); //wdev-16011

			if (form.btnNew().isEnabled())
			{
				form.lyr1().showtabAreaDefinition();
			}
		}
		else
		{
			form.lyr1().tabAreaDefinition().setHeaderEnabled(form.lyr1().tabAreaDefinition().isVisible());
			form.lyr1().tabSendToConfig().setHeaderEnabled(form.lyr1().tabSendToConfig().isVisible());
			form.lyr1().tabAreaWorkspace().setHeaderEnabled(form.lyr1().tabAreaWorkspace().isVisible());
			form.lyr1().tabCubiclesRoomsBeds().setHeaderEnabled(form.lyr1().tabCubiclesRoomsBeds().isVisible()); //wdev-16011
		}
	}

	@Override
	protected void onCcAreaDefinitionValueChanged() throws PresentationLogicException
	{
		if (form.lyr1().tabAreaDefinition().ccAreaDefinition().getContextMenuSelected() != null)
		{
			if (form.lyr1().tabAreaDefinition().ccAreaDefinition().getContextMenuSelected().equals(AreaDefinitionEvent.SENDTOCONFIG))
			{
				form.lyr1().tabSendToConfig().setVisible(true);
				form.lyr1().tabSendToConfig().setHeaderEnabled(true);

				form.lyr1().tabAreaDefinition().setVisible(false);
				form.lyr1().tabAreaWorkspace().setVisible(false);

				form.lyr1().tabSendToConfig().ccSendToConfig().setFromAreaCombo(form.lyr1().tabAreaDefinition().ccAreaDefinition().getSelectedArea());
				form.lyr1().tabSendToConfig().ccSendToConfig().initialize(true, null);

				form.lyr1().tabAreaDefinition().ccAreaDefinition().resetContextMenu();
				form.setMode(FormMode.EDIT);
			}
			//WDEV-14894
			else if (form.lyr1().tabAreaDefinition().ccAreaDefinition().getContextMenuSelected().equals(AreaDefinitionEvent.IMPORTAREADEFINITION))
			{
				form.chkActive().setValue(false);
				form.lyr1().tabAreaDefinition().ccAreaDefinition().resetContextMenu();
			}
		}
	}

	protected void onCcSendToConfigValueChanged() throws PresentationLogicException
	{
		if (SendToConfigEvent.COMBOVALUECHANGED.equals(form.lyr1().tabSendToConfig().ccSendToConfig().getSelectedEvent()))
		{
			form.getLocalContext().setAreaFromSendToConfig(form.lyr1().tabSendToConfig().ccSendToConfig().getFromAreaCombo());
			updateControlsState();
		}

	}

	protected void onlyr1TabChanged(LayerBridge tab)
	{
		if (form.lyr1().tabSendToConfig().isVisible())
		{
			form.lyr1().tabSendToConfig().ccSendToConfig().setValue(form.getLocalContext().getAreaFromSendToConfig());
		}
		else if (form.lyr1().tabAreaWorkspace().isVisible())
		{
			form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().setValue(form.getLocalContext().getAreaFromAreaWorkspace());
		}
		
		updateControlsState();
	}

	// WDEV-14347
	protected void onCcAreaWorkspaceConfigValueChanged() throws PresentationLogicException
	{

		if (AreaWorkspaceEvent.COMBOVALUECHANGED.equals(form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().getSelectedEvent()))
		{
			form.getLocalContext().setAreaFromAreaWorkspace(form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().getFromAreaCombo());
			updateControlsState();
		}
		//WDEV-14896
		else if (AreaWorkspaceEvent.COPYAREAWORKSPACEDIALOGCLOSED.equals(form.lyr1().tabAreaWorkspace().ccAreaWorkspaceConfig().getSelectedEvent()))
		{
			open();
			form.lyr1().showtabAreaWorkspace();
		}

	}

	//wdev-16011
	protected void onCcCubicleRoomBedValueChanged() throws PresentationLogicException
	{
		if( SendToConfigEvent.COMBOVALUECHANGED.equals(form.lyr1().tabCubiclesRoomsBeds().ccCubicleRoomBed().getSelectedEvent() ))
		{
			
			updateControlsState();
		}

		
	}

}
