//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.attendancekpiconfiguration;




import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.AttendanceKPIConfigVo;
import ims.emergency.vo.FlashingKPITextCoulourVo;
import ims.emergency.vo.TriageKPIUnboundDBVo;
import ims.emergency.vo.TriagePriorityKpConfigVo;
import ims.emergency.vo.TriagePriorityKpConfigVoCollection;
import ims.emergency.vo.lookups.TriagePriority;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
		
	private static final String	COLUMN_KPI							= "0";
	private static final String	COLUMN_BREACHWARNING				= "1";
	private static final String	COLUMN_BREACHTEXTCOLOUR				= "2";
	private static final String	COLUMN_BREACHED						= "3";
	private static final String	COLUMN_BREACHEDTEXTCOLOUR			= "4";
	private static final String	COLUMN_BREACHFLASHINGTEXTCOLOUR		= "5";
	private static final String	COLUMN_BREACHBACGROUNDCOLOUR		= "6";
	private static final String	COLUMN_BREACHEDFLASHINGTEXTCOLOUR	= "7";
	private static final String	COLUMN_BREACHEDBACKGROUNDCOLOUR		= "8";
	private static final String	COLUMN_DEFAULT_ROW_COLOUR			= "9";
	private static final String	COLUMN_DEFAULT_FONT_COLOUR			= "10";
	
	
	//------------
	private static final String	ROW_AWAITINGTRIAGE		= "Awaiting Triage";
	private static final String	ROW_PRIORITY1			= "Priority 1";
	private static final String	ROW_PRIORITY2			= "Priority 2";
	private static final String	ROW_PRIORITY3			= "Priority 3";
	private static final String	ROW_PRIORITY4			= "Priority 4";
	private static final String	ROW_PRIORITY5			= "Priority 5";
	private static final String	ROW_SKIPPEDTRIAGE		= "Skipped Triage";
	private static final String	ROW_AWAITINGCLIN		= "Awaiting Clinician";
	private static final String	ROW_LENGHTOFSTAY		= "Length of Stay";
	
	//------------

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void initialize()
	{
		form.btnNew().setVisible(false);
		form.btnEdit().setVisible(false);
		
		createdDynamicGridKPI();
		populateEmergencyDepartmentCombo();
	}
	private void updateControlsState()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.btnNew().setVisible(form.getLocalContext().getCurrentAttendanceKPIConfig() == null && form.cmbEmergencyDepartment().getValue() != null);
			
			form.btnEdit().setVisible(form.getLocalContext().getCurrentAttendanceKPIConfigIsNotNull() && form.dyngrdKPI().getSelectedRow() != null);
			form.imbDelete().setEnabled(form.getLocalContext().getCurrentAttendanceKPIConfigIsNotNull() && form.dyngrdKPI().getSelectedRow() != null && showRemove());
			//form.dyngrdKPI().setReadOnly(true);
		}
		else
		{
			//form.dyngrdKPI().setReadOnly(false);
			form.imbDelete().setEnabled(false);
		}
	}
	private void populateEmergencyDepartmentCombo()
	{
		LocationLiteVoCollection collLocations = domain.listLocations();
		if (collLocations != null)
		{
			
			for (int i = 0; i < collLocations.size(); i++)
			{
				form.cmbEmergencyDepartment().newRow(collLocations.get(i), collLocations.get(i).getName());
			}
		}
	}
	private void createdDynamicGridKPI()
	{
		form.dyngrdKPI().getRows().clear();
		form.dyngrdKPI().setHeaderHeight(50);
		DynamicGridColumn columnName = form.dyngrdKPI().getColumns().newColumn("KPI", COLUMN_KPI);
		columnName.setWidth(100);//WDEV-16991
	
		columnName = form.dyngrdKPI().getColumns().newColumn("Breach" + "\n"+"Warning"+"\n" +"(mins)", COLUMN_BREACHWARNING);
		columnName.setWidth(55);//WDEV-16991
		columnName = form.dyngrdKPI().getColumns().newColumn("Breach" + "\n"+ "Text Colour", COLUMN_BREACHTEXTCOLOUR);
		columnName.setWidth(100);//WDEV-16991
		columnName = form.dyngrdKPI().getColumns().newColumn("Breach Text" + "\n"+"Flashing Colour", COLUMN_BREACHFLASHINGTEXTCOLOUR);
		columnName.setWidth(100);//WDEV-16991
		columnName = form.dyngrdKPI().getColumns().newColumn("Breach Text" + "\n"+"Background Colour", COLUMN_BREACHBACGROUNDCOLOUR);
		columnName.setWidth(110);//WDEV-16991
		columnName = form.dyngrdKPI().getColumns().newColumn("Breached" +"\n" +"(mins)", COLUMN_BREACHED);
		columnName.setWidth(60);//WDEV-16991
		columnName = form.dyngrdKPI().getColumns().newColumn("Breached" + "\n"+"Text Colour", COLUMN_BREACHEDTEXTCOLOUR);
		columnName.setWidth(100);//WDEV-16991
		columnName = form.dyngrdKPI().getColumns().newColumn("Breached Text" + "\n"+"Flashing Colour", COLUMN_BREACHEDFLASHINGTEXTCOLOUR);
		columnName.setWidth(100);//WDEV-16991
		columnName = form.dyngrdKPI().getColumns().newColumn("Breached Text" + "\n"+"Background Colour", COLUMN_BREACHEDBACKGROUNDCOLOUR);
		columnName.setWidth(100);//WDEV-16991
		
		//WDEV-16991
		columnName = form.dyngrdKPI().getColumns().newColumn("Default" + "\n"+"Row Colour", COLUMN_DEFAULT_ROW_COLOUR);
		columnName.setWidth(100);
		columnName = form.dyngrdKPI().getColumns().newColumn("Default" + "\n"+"Font Colour", COLUMN_DEFAULT_FONT_COLOUR);
		columnName.setWidth(100);
	}
	
	private void open()
	{
		form.dyngrdKPI().getRows().clear();
		AttendanceKPIConfigVo attendanceKpiVo = domain.getAttendanceKPIConfigVo(form.cmbEmergencyDepartment().getValue());
		form.getLocalContext().setCurrentAttendanceKPIConfig(attendanceKpiVo);
		if(attendanceKpiVo != null)
		{
			initializeKPIDynamicGrid();
			populateDynamicGrid(attendanceKpiVo);
		}
		form.setMode(FormMode.VIEW);
		
			
	}
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Emergency.KPIDataEntryDialog) && result.equals(DialogResult.OK))
		{
			if(form.getGlobalContext().Emergency.getTriageKPIIsNotNull() && form.dyngrdKPI().getSelectedRow() != null)
				pupulateRowDynGrid(form.getGlobalContext().Emergency.getTriageKPI(),form.dyngrdKPI().getSelectedRow());
		}
		else		//Cancel
			open();
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save())
			open();
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		editInstance();
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		form.getLocalContext().setCurrentAttendanceKPIConfig(new AttendanceKPIConfigVo());
		form.setMode(FormMode.EDIT);
		initializeKPIDynamicGrid();
		
	}
	
	protected void onCmbEmergencyDepartmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		updateControlsState();
		updateContextMenu();
	}
	
	protected void onFormModeChanged() 
	{
		updateControlsState();
		updateContextMenu();
		
	}
	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.AttendanceKPIConfiguration.EDIT :
				editInstance();
				form.setMode(FormMode.EDIT);
				break;

			case GenForm.ContextMenus.EmergencyNamespace.AttendanceKPIConfiguration.DELETE:
				removeValues();
				form.setMode(FormMode.EDIT);
				break;
			default :
				break;
		}
		
	}
	private void editInstance()
	{
		TriageKPIUnboundDBVo tempVO  = new TriageKPIUnboundDBVo();
		DynamicGridRow row = form.dyngrdKPI().getSelectedRow();
		
		DynamicGridCell cell = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
		tempVO.setBreachWarning(cell.getValue() != null ? Integer.parseInt((String) cell.getValue()):null);
		
		cell = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));
		tempVO.setBreachWarningTextColour((Color) cell.getValue());				//wdev-16138
		//wdev-16138
		cell = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));
		tempVO.setBreachWarningFlashingTextColour((Color) cell.getValue());
		
		cell = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));
		tempVO.setBreachWarningBackgroundColour((Color) cell.getValue());				
		//------------
		cell = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
		tempVO.setBreachedKPI(cell.getValue() != null ? Integer.parseInt((String) cell.getValue()):null);
		
		cell = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));		//wdev-16138
		tempVO.setBreachedKPITextColour((Color) cell.getValue());
		
		//wdev-16138
		cell = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
		tempVO.setBreachedKPIFlashingTextColour((Color) cell.getValue());
		
		cell = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
		tempVO.setBreachedKPIBackgroundColour((Color) cell.getValue());
		
		//WDEV-16991
		cell = row.getCells().get(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR));
		tempVO.setDefaultRowColour((Color) cell.getValue());
		
		cell = row.getCells().get(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR));
		tempVO.setDefaultFontColour((Color) cell.getValue());
		
		FlashingKPITextCoulourVo tempKpiVo = (FlashingKPITextCoulourVo) row.getIdentifier();
		if( tempKpiVo != null && tempKpiVo instanceof FlashingKPITextCoulourVo)
		{
			if( tempKpiVo != null)
			{
				tempVO.setBreachWarningFlashingText(tempKpiVo.getBreachWarningFlashingTest());
				tempVO.setBreachedKPIFlashingText(tempKpiVo.getBreachedKPIFlashingText());
			}
		}
		else
		{
			tempVO.setBreachWarningFlashingText(null);
			tempVO.setBreachedKPIFlashingText(null);
		}
		//--------------
		tempVO.setTypeRow((String) form.dyngrdKPI().getSelectedRow().getValue());
		form.getGlobalContext().Emergency.setTriageKPI(tempVO);
		engine.open(form.getForms().Emergency.KPIDataEntryDialog, new Object[]{new String((String) form.dyngrdKPI().getSelectedRow().getValue())}); 	
	}
	private DynamicGridColumn getColumnKPI(String identifier) 
	{
		return form.dyngrdKPI().getColumns().getByIdentifier(identifier);
	}
	private boolean save()
	{
		AttendanceKPIConfigVo record = (AttendanceKPIConfigVo) form.getLocalContext().getCurrentAttendanceKPIConfig().clone();
		record = populateDataFromScreen(record);
		String[] err = record.validate();
		if (err != null && err.length > 0)
		{
			engine.showErrors(err);
			return false;
		}
		
		record = populateDataFromScreen(form.getLocalContext().getCurrentAttendanceKPIConfig());
		
		try 
		{
			
				record = domain.saveAttendanceKPIConfig(record);
		}
		
		catch (StaleObjectException e) 
		{
			engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });
			
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showErrors(new String[] { "A Triage Priority KPI Configuration already exists for this Emergency Department. The screen will be refreshed." });
			
		}
		
		return true;
	}
	private AttendanceKPIConfigVo populateDataFromScreen(AttendanceKPIConfigVo record)
	{
		if(record == null)
			return null;
		record.setEDLocation(form.cmbEmergencyDepartment().getValue());
		if(	record.getID_AttendanceKPIConfig() == null)
		{
			return record;
		}
		TriagePriorityKpConfigVoCollection temColl = record.getTriagePriorityKPIs();
		for(int i = 0; i < form.dyngrdKPI().getRows().size();i++)
		{
			DynamicGridRow row = form.dyngrdKPI().getRows().get(i);
			
			DynamicGridCell Breach  = null;
			DynamicGridCell BreachTextColour = null;			//wdev-16138
			DynamicGridCell BreachFlashingTextColour = null;	//wdev-16138
			DynamicGridCell BreachBackgroundColour = null;		//wdev-16138
			DynamicGridCell Breached = null;
			DynamicGridCell BreachedTextColour = null;			//wdev-16138
			DynamicGridCell BreachedFlashingTextColour = null;	//wdev-16138
			DynamicGridCell BreachedBacgroundColour = null;		//wdev-16138
			DynamicGridCell DefaultRowColour = null;	//wdev-16991
			DynamicGridCell DefaultFontColour = null;		//wdev-16991
			
			
			if(row.getValue() != null && row.getValue().equals(ROW_AWAITINGTRIAGE))
			{
				Breach = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
				record.setAwaitingTriageBreachWarningKPI(Breach.getValue() != null ? Integer.parseInt((String) Breach.getValue()):null);
				
				//wdev-16138
				BreachTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));
				record.setAwaitingTriageBreachWarningKPITextColour((Color) BreachTextColour.getValue());
				
				BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));
				record.setAwaitingTriageBreachWarningKPIFlashingTextColour((Color) BreachFlashingTextColour.getValue());
				
				BreachBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));
				record.setAwaitingTriageBreachWarningKPIBackgroundColour((Color) BreachBackgroundColour.getValue());
				
				
				Breached = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
				record.setAwaitingTriageBreachedKPI(Breached.getValue() != null ? Integer.parseInt((String) Breached.getValue()):null);
			
				//wdev-16138
				BreachedTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));
				record.setAwaitingTriageBreachKPITextColour((Color) BreachedTextColour.getValue());
				
				BreachedFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
				record.setAwaitingTriageBreachKPIFlashingTextColour((Color) BreachedFlashingTextColour.getValue());
				
				BreachedBacgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
				record.setAwaitingTriageBreachKPIBackgroundColour((Color) BreachedBacgroundColour.getValue());
				
				//wdev-16138
				if( row.getIdentifier() != null && row.getIdentifier() instanceof FlashingKPITextCoulourVo)
				{
					FlashingKPITextCoulourVo tempKpiVo = (FlashingKPITextCoulourVo) row.getIdentifier();
					if( tempKpiVo != null )
					{
						record.setAwaitingTriageBreachWarningKPIFlashingText(tempKpiVo.getBreachWarningFlashingTest());
						record.setAwaitingTriageBreachKPIFlashingText(tempKpiVo.getBreachedKPIFlashingText());
					}
				}
				
			}
			else if(row.getValue() != null && row.getValue().equals(ROW_AWAITINGCLIN))
			{
				Breach = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
				record.setAwaitingClinicianBreachWarningKPI(Breach.getValue() != null ? Integer.parseInt((String) Breach.getValue()):null);
				
				BreachTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));					//wdev-16138
				record.setAwaitingClinicianBreachWarningKPITextColour((Color) BreachTextColour.getValue());		//wdev-16138
				
				//wdev-16138
				BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));					
				record.setAwaitingClinicianBreachWarningKPIFlashingTextColour((Color) BreachFlashingTextColour.getValue());	
				
				
				BreachBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));					
				record.setAwaitingClinicianBreachWarningKPIBackgroundColour((Color) BreachBackgroundColour.getValue());	
				//--------
				
				
				Breached = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
				record.setAwaitingClinicianBreachedKPI(Breached.getValue() != null ? Integer.parseInt((String) Breached.getValue()):null);
				
				//wdev-16138
				BreachedTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));
				record.setAwaitingClinicianBreachKPITextColour((Color) BreachedTextColour.getValue());
				
				BreachedFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
				record.setAwaitingClinicianBreachKPIFlashingTextColour((Color) BreachedFlashingTextColour.getValue());
				
				BreachedBacgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
				record.setAwaitingClinicianBreachKPIBackgroundColour((Color) BreachedBacgroundColour.getValue());
				
				if( row.getIdentifier() != null && row.getIdentifier() instanceof FlashingKPITextCoulourVo)
				{
					FlashingKPITextCoulourVo tempKpiVo = (FlashingKPITextCoulourVo) row.getIdentifier();
					if( tempKpiVo != null  )
					{
						record.setAwaitingClinicianBreachWarningKPIFlashingText(tempKpiVo.getBreachWarningFlashingTest());
						record.setAwaitingClinicianBreachKPIFlashingText(tempKpiVo.getBreachedKPIFlashingText());
					}
				}
				
				//---------
				
				
			}
			else if(row.getValue() != null && row.getValue().equals(ROW_LENGHTOFSTAY))
			{
				Breach = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
				record.setLosBreachWarningKPI(Breach.getValue() != null ? Integer.parseInt((String) Breach.getValue()):null);
				
				//wdev-16138
				
				BreachTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));
				record.setLosBreachWarningKPITextColour((Color) BreachTextColour.getValue());
				
				BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));
				record.setLosBreachWarningKPIFlashingTextColour((Color) BreachFlashingTextColour.getValue());
				
				BreachBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));
				record.setLosBreachWarningKPIBackgroundColour((Color) BreachBackgroundColour.getValue());
				
				
				//----------------
				
				Breached = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
				record.setLosBreachedKPI(Breached.getValue() != null ? Integer.parseInt((String) Breached.getValue()):null);
				
				//wdev-16138
				
				BreachedTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));
				record.setLosBreachKPITextColour((Color) BreachedTextColour.getValue());
				
				BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
				record.setLosBreachedKPIFlashingTextColour((Color) BreachFlashingTextColour.getValue());
				
				BreachedBacgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
				record.setLosBreachedKPIBackgroundColour((Color) BreachedBacgroundColour.getValue());
				
				if( row.getIdentifier() != null && row.getIdentifier() instanceof FlashingKPITextCoulourVo)
				{
					FlashingKPITextCoulourVo tempKpiVo = (FlashingKPITextCoulourVo) row.getIdentifier();
					if( tempKpiVo != null)
					{
						record.setLosBreachWarningKPIFlashingText(tempKpiVo.getBreachWarningFlashingTest());
						record.setLosBreachedKPIFlashingText(tempKpiVo.getBreachedKPIFlashingText());
					}
				}
				
				//---------------------
				
			}
			else
			{
				TriagePriorityKpConfigVo tempVo = null;
				if(row.getValue() != null && row.getValue().equals(ROW_PRIORITY1) )
				{
					tempVo = getTriagePriority(temColl,TriagePriority.PRIORITY1);
					if( tempVo == null)
					{
						tempVo = new TriagePriorityKpConfigVo();
						tempVo.setTriagePriority(TriagePriority.PRIORITY1);
					}
						
											
				}
				else if(row.getValue() != null && row.getValue().equals(ROW_PRIORITY2) )
				{
					tempVo = getTriagePriority(temColl,TriagePriority.PRIORITY2);
					if( tempVo == null)
					{
						tempVo = new TriagePriorityKpConfigVo();
						tempVo.setTriagePriority(TriagePriority.PRIORITY2);
					}
											
				}
				else if(row.getValue() != null && row.getValue().equals(ROW_PRIORITY3) )
				{
					tempVo = getTriagePriority(temColl,TriagePriority.PRIORITY3);
					if( tempVo == null)
					{
						tempVo = new TriagePriorityKpConfigVo();
						tempVo.setTriagePriority(TriagePriority.PRIORITY3);
					}
											
				}
				else if(row.getValue() != null && row.getValue().equals(ROW_PRIORITY4) )
				{
					tempVo = getTriagePriority(temColl,TriagePriority.PRIORITY4);
					if( tempVo == null)
					{
						tempVo = new TriagePriorityKpConfigVo();
						tempVo.setTriagePriority(TriagePriority.PRIORITY4);
					}
											
				}
				else if(row.getValue() != null && row.getValue().equals(ROW_PRIORITY5) )
				{
					tempVo = getTriagePriority(temColl,TriagePriority.PRIORITY5);
					if( tempVo == null)
					{
						tempVo = new TriagePriorityKpConfigVo();
						tempVo.setTriagePriority(TriagePriority.PRIORITY5);
					}
											
				}						
				else if(row.getValue() != null && row.getValue().equals(ROW_SKIPPEDTRIAGE) )
				{
					tempVo = getTriagePriority(temColl,TriagePriority.SKIPPED_TRIAGE);
					if( tempVo == null)
					{
						tempVo = new TriagePriorityKpConfigVo();
						tempVo.setTriagePriority(TriagePriority.SKIPPED_TRIAGE);
					}
											
				}
				if(	tempVo != null)
				{
					Breach = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
					tempVo.setPriorityBreachWarningKPI(Breach.getValue() != null ? Integer.parseInt((String) Breach.getValue()):null);
					
					//wdev-16138
					BreachTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));
					tempVo.setPriorityBreachWarningKPITextColour((Color) BreachTextColour.getValue());
					
					BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));
					tempVo.setPriorityBreachWarningKPIFlashingTextColour((Color) BreachFlashingTextColour.getValue());
					
					BreachBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));
					tempVo.setPriorityBreachWarningKPIBackgroundColour((Color) BreachBackgroundColour.getValue());
					
					//-----------------
					
					
					Breached = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
					tempVo.setPriorityBreachedKPI(Breached.getValue() != null ? Integer.parseInt((String) Breached.getValue()):null);
					
					//wdev-16138
					BreachedTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));
					tempVo.setPriorityBreachKPITextColour((Color) BreachedTextColour.getValue());
					
					BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
					tempVo.setPriorityBreachedKPIFlashingTextColour((Color) BreachFlashingTextColour.getValue());
					
					BreachedBacgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
					tempVo.setPriorityBreachedKPIBackgroundColour((Color) BreachedBacgroundColour.getValue());
					
					//WDEV-16991
					DefaultRowColour = row.getCells().get(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR));
					tempVo.setDefaultRowColour((Color) DefaultRowColour.getValue());
					
					DefaultFontColour = row.getCells().get(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR));
					tempVo.setDefaultFontColour((Color) DefaultFontColour.getValue());
					
					if( row.getIdentifier() != null && row.getIdentifier() instanceof FlashingKPITextCoulourVo)
					{
						
						FlashingKPITextCoulourVo tempKpiVo = (FlashingKPITextCoulourVo) row.getIdentifier();
						if( tempKpiVo != null )
						{
							tempVo.setPriorityBreachWarningKPIFlashingText(tempKpiVo.getBreachWarningFlashingTest());
							tempVo.setPriorityBreachedKPIFlashingText(tempKpiVo.getBreachedKPIFlashingText());
						}
					}
					
					//-----------------
					if(tempVo.getID_TriagePriorityKPConfig() == null && tempVo.getPriorityBreachedKPIIsNotNull() && tempVo.getPriorityBreachKPITextColourIsNotNull() )
						temColl.add(tempVo);
					else if(tempVo.getID_TriagePriorityKPConfig() != null)
					{
						if(!tempVo.getPriorityBreachedKPIIsNotNull() && !tempVo.getPriorityBreachKPITextColourIsNotNull() && !tempVo.getPriorityBreachedKPIBackgroundColourIsNotNull() && !tempVo.getPriorityBreachedKPIFlashingTextColourIsNotNull() && !tempVo.getPriorityBreachWarningKPITextColourIsNotNull() && !tempVo.getPriorityBreachWarningKPIBackgroundColourIsNotNull() && !tempVo.getPriorityBreachWarningKPIFlashingTextColourIsNotNull()  && !tempVo.getPriorityBreachWarningKPIIsNotNull())
						{
							temColl.remove(tempVo);
						}
					}
				}
				
			}
		}
		record.setTriagePriorityKPIs(temColl);
		return record;
	}
	private void initializeKPIDynamicGrid()
	{
		form.dyngrdKPI().getRows().clear();

		//AWAITING TRIAGE
		DynamicGridRow patientRow = form.dyngrdKPI().getRows().newRow();
		patientRow.setValue(ROW_AWAITINGTRIAGE);
		DynamicGridCell Kpi = patientRow.getCells().newCell(getColumnKPI(COLUMN_KPI), DynamicCellType.STRING);
		Kpi.setValue(ROW_AWAITINGTRIAGE);
		DynamicGridCell Breach = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHWARNING), DynamicCellType.STRING);
		Breach.setValue(null);
		DynamicGridCell BreachTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHTEXTCOLOUR), DynamicCellType.ENUMERATION);		//wdev-16138
		BreachTextColour.setValue(null);
		//wdev-16138
		DynamicGridCell BreachFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);		
		BreachFlashingTextColour.setValue(null);
		
		DynamicGridCell BreachBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR), DynamicCellType.ENUMERATION);		
		BreachBackgroundColour.setValue(null);
		//------
		
		DynamicGridCell Breached = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHED), DynamicCellType.STRING);
		Breached.setValue(null);
		//wdev-16138
		DynamicGridCell BreachedTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedTextColour.setValue(null);
		
		DynamicGridCell BreachedFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedFlashingTextColour.setValue(null);
		
		DynamicGridCell BreachedBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachedBackgroundColour.setValue(null);
		
		//WDEV-16991
		DynamicGridCell DefaultRowColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR), DynamicCellType.ENUMERATION);
		DefaultRowColour.setValue(null);
		
		DynamicGridCell DefaultFontColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR), DynamicCellType.ENUMERATION);
		DefaultFontColour.setValue(null);
		
		//PRIORITY1
		patientRow = form.dyngrdKPI().getRows().newRow();
		patientRow.setValue(ROW_PRIORITY1);
		Kpi = patientRow.getCells().newCell(getColumnKPI(COLUMN_KPI), DynamicCellType.STRING);
		Kpi.setValue(ROW_PRIORITY1);
		Breach = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHWARNING), DynamicCellType.STRING);
		Breach.setValue(null);
		//wdev-16138
		BreachTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachTextColour.setValue(null);
		
		BreachFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachFlashingTextColour.setValue(null);
		
		BreachBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachBackgroundColour.setValue(null);
		
		//-----------------
		Breached = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHED), DynamicCellType.STRING);
		Breached.setValue(null);
		
		//wdev-16138
		BreachedTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedTextColour.setValue(null);
		
		BreachedFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedFlashingTextColour.setValue(null);
		
		BreachedBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachedBackgroundColour.setValue(null);
		
		//WDEV-16991
		DefaultRowColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR), DynamicCellType.ENUMERATION);
		DefaultRowColour.setValue(null);
		
		DefaultFontColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR), DynamicCellType.ENUMERATION);
		DefaultFontColour.setValue(null);
		
		//---------------
		
		//Priority2
		patientRow = form.dyngrdKPI().getRows().newRow();
		patientRow.setValue(ROW_PRIORITY2);
		Kpi = patientRow.getCells().newCell(getColumnKPI(COLUMN_KPI), DynamicCellType.STRING);
		Kpi.setValue(ROW_PRIORITY2);
		Breach = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHWARNING), DynamicCellType.STRING);
		Breach.setValue(null);
		//wdev-16138
		BreachTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachTextColour.setValue(null);
		
		BreachFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachFlashingTextColour.setValue(null);
		
		
		BreachBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachBackgroundColour.setValue(null);
		//-----
		Breached = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHED), DynamicCellType.STRING);
		Breached.setValue(null);
		
		//wdev-16138
		BreachedTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedTextColour.setValue(null);
		
		BreachedFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedFlashingTextColour.setValue(null);
		
		BreachedBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachedBackgroundColour.setValue(null);
		
		//WDEV-16991
		DefaultRowColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR), DynamicCellType.ENUMERATION);
		DefaultRowColour.setValue(null);
		
		DefaultFontColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR), DynamicCellType.ENUMERATION);
		DefaultFontColour.setValue(null);
		//--------------
		
		//Priority3
		patientRow = form.dyngrdKPI().getRows().newRow();
		patientRow.setValue(ROW_PRIORITY3);
		Kpi = patientRow.getCells().newCell(getColumnKPI(COLUMN_KPI), DynamicCellType.STRING);
		Kpi.setValue(ROW_PRIORITY3);
		Breach = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHWARNING), DynamicCellType.STRING);
		Breach.setValue(null);
		
		//wdev-16138
		BreachTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachTextColour.setValue(null);
		BreachFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachFlashingTextColour.setValue(null);
		BreachBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachBackgroundColour.setValue(null);
		
		//--------
		Breached = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHED), DynamicCellType.STRING);
		Breached.setValue(null);
		
		//wdev-16138
		BreachedTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedTextColour.setValue(null);
		
		BreachedFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedFlashingTextColour.setValue(null);
		
		BreachedBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachedBackgroundColour.setValue(null);
		
		//WDEV-16991
		DefaultRowColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR), DynamicCellType.ENUMERATION);
		DefaultRowColour.setValue(null);
		
		DefaultFontColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR), DynamicCellType.ENUMERATION);
		DefaultFontColour.setValue(null);
		
		//---------
		
		//Priority4
		patientRow = form.dyngrdKPI().getRows().newRow();
		patientRow.setValue(ROW_PRIORITY4);
		Kpi = patientRow.getCells().newCell(getColumnKPI(COLUMN_KPI), DynamicCellType.STRING);
		Kpi.setValue(ROW_PRIORITY4);
		Breach = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHWARNING), DynamicCellType.STRING);
		Breach.setValue(null);
		
		//wdev-16138
		BreachTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachTextColour.setValue(null);
		
		BreachFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachFlashingTextColour.setValue(null);
		
		
		BreachBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachBackgroundColour.setValue(null);
		
		//---------------
		Breached = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHED), DynamicCellType.STRING);
		Breached.setValue(null);
		
		//wdev-16138
		BreachedTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedTextColour.setValue(null);
		
		BreachedFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedFlashingTextColour.setValue(null);
		
		BreachedBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachedBackgroundColour.setValue(null);
		
		//WDEV-16991
		DefaultRowColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR), DynamicCellType.ENUMERATION);
		DefaultRowColour.setValue(null);
		
		DefaultFontColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR), DynamicCellType.ENUMERATION);
		DefaultFontColour.setValue(null);
		
		//---------------
		
		//Priority5
		patientRow = form.dyngrdKPI().getRows().newRow();
		patientRow.setValue(ROW_PRIORITY5);
		Kpi = patientRow.getCells().newCell(getColumnKPI(COLUMN_KPI), DynamicCellType.STRING);
		Kpi.setValue(ROW_PRIORITY5);
		Breach = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHWARNING), DynamicCellType.STRING);
		Breach.setValue(null);
		
		//wdev-16138
		BreachTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachTextColour.setValue(null);
		
		BreachFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachFlashingTextColour.setValue(null);
		
		BreachBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachBackgroundColour.setValue(null);
		
		//----------
		Breached = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHED), DynamicCellType.STRING);
		Breached.setValue(null);
		
		//wdev-16138
		BreachedTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedTextColour.setValue(null);
		
		BreachedFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedFlashingTextColour.setValue(null);
		
		BreachedBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachedBackgroundColour.setValue(null);
		
		//WDEV-16991
		DefaultRowColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR), DynamicCellType.ENUMERATION);
		DefaultRowColour.setValue(null);
		
		DefaultFontColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR), DynamicCellType.ENUMERATION);
		DefaultFontColour.setValue(null);
		
		//-------------	
		//SkippedTriage
		patientRow = form.dyngrdKPI().getRows().newRow();
		patientRow.setValue(ROW_SKIPPEDTRIAGE);
		Kpi = patientRow.getCells().newCell(getColumnKPI(COLUMN_KPI), DynamicCellType.STRING);
		Kpi.setValue(ROW_SKIPPEDTRIAGE);
		Breach = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHWARNING), DynamicCellType.STRING);
		Breach.setValue(null);
		
		//wdev-16138
		BreachTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachTextColour.setValue(null);
		
		BreachFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachFlashingTextColour.setValue(null);
		
		BreachBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachBackgroundColour.setValue(null);
		
		//-------------
		Breached = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHED), DynamicCellType.STRING);
		Breached.setValue(null);
		
		//wdev-16138
		BreachedTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedTextColour.setValue(null);
		
		BreachedFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedFlashingTextColour.setValue(null);
		
		BreachedBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachedBackgroundColour.setValue(null);
		
		//WDEV-16991
		DefaultRowColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR), DynamicCellType.ENUMERATION);
		DefaultRowColour.setValue(null);
		
		DefaultFontColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR), DynamicCellType.ENUMERATION);
		DefaultFontColour.setValue(null);
		
		//---------
		
		
		//Awaiting Clinician
		patientRow = form.dyngrdKPI().getRows().newRow();
		patientRow.setValue(ROW_AWAITINGCLIN);
		Kpi = patientRow.getCells().newCell(getColumnKPI(COLUMN_KPI), DynamicCellType.STRING);
		Kpi.setValue(ROW_AWAITINGCLIN);
		Breach = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHWARNING), DynamicCellType.STRING);
		Breach.setValue(null);
		
		//wdev-16138
		BreachTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachTextColour.setValue(null);
		
		BreachFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachFlashingTextColour.setValue(null);
		
		BreachBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachBackgroundColour.setValue(null);
		
		//--------------------
		Breached = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHED), DynamicCellType.STRING);
		Breached.setValue(null);
		
		//wdev-16138
		BreachedTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedTextColour.setValue(null);
		
		BreachedFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedFlashingTextColour.setValue(null);
		
		BreachedBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachedBackgroundColour.setValue(null);
		
		//WDEV-16991
		DefaultRowColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR), DynamicCellType.ENUMERATION);
		DefaultRowColour.setValue(null);
		
		DefaultFontColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR), DynamicCellType.ENUMERATION);
		DefaultFontColour.setValue(null);
		
		//--------------
		
		//Lenght Of Stay
		patientRow = form.dyngrdKPI().getRows().newRow();
		patientRow.setValue(ROW_LENGHTOFSTAY);
		Kpi = patientRow.getCells().newCell(getColumnKPI(COLUMN_KPI), DynamicCellType.STRING);
		Kpi.setValue(ROW_LENGHTOFSTAY);
		Breach = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHWARNING), DynamicCellType.STRING);
		Breach.setValue(null);
		//wdev-16138
		BreachTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachTextColour.setValue(null);
		
		BreachFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachFlashingTextColour.setValue(null);
		
		BreachBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachBackgroundColour.setValue(null);
		//--------------
		Breached = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHED), DynamicCellType.STRING);
		Breached.setValue(null);
		
		//wdev-16138
		BreachedTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedTextColour.setValue(null);
		
		BreachedFlashingTextColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR), DynamicCellType.ENUMERATION);
		BreachedFlashingTextColour.setValue(null);
		
		
		BreachedBackgroundColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR), DynamicCellType.ENUMERATION);
		BreachedBackgroundColour.setValue(null);
		
		//WDEV-16991
		DefaultRowColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR), DynamicCellType.ENUMERATION);
		DefaultRowColour.setValue(null);
		
		DefaultFontColour = patientRow.getCells().newCell(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR), DynamicCellType.ENUMERATION);
		DefaultFontColour.setValue(null);
		//--------------
				
		
	}
	private TriagePriorityKpConfigVo getTriagePriority(TriagePriorityKpConfigVoCollection temColl,TriagePriority prio)
	{
		if(temColl == null || temColl.size() == 0 || prio == null)
			return null;
		for(int j = 0;j < temColl.size();j++)
		{
			TriagePriorityKpConfigVo  tempVo = temColl.get(j);
			if(tempVo != null && tempVo.getTriagePriorityIsNotNull() && tempVo.getTriagePriority().equals(prio) )
				return tempVo;
		}
		return null;
		
	}
	private void populateDynamicGrid(AttendanceKPIConfigVo record)
	{
		if(record != null)
		{
			TriagePriorityKpConfigVoCollection temColl = (TriagePriorityKpConfigVoCollection) record.getTriagePriorityKPIs().clone();
			for(int i = 0 ; i  < form.dyngrdKPI().getRows().size();i++)
			{
				DynamicGridRow row = form.dyngrdKPI().getRows().get(i);
				DynamicGridCell Breach  = null;
				DynamicGridCell BreachTextColour = null;			//wdev-16138
				DynamicGridCell BreachFlashingTextColour = null;	//wdev-16138
				DynamicGridCell BreachBackgroundColour = null;		//wdev-16138
				DynamicGridCell Breached = null;
				DynamicGridCell BreachedTextColour = null;			//wdev-16138
				DynamicGridCell BreachedFlashingTextColour = null;	//wdev-16138
				DynamicGridCell BreachedBackgroundColour = null;	//wdev-16138	
				
				DynamicGridCell DefaultRowColour = null;	//wdev-16991
				DynamicGridCell DefaultFontColour = null;	//wdev-16991
				
				Color[] ca = Color.getAllColors();
				if(row.getValue() != null && row.getValue().equals(ROW_AWAITINGTRIAGE))
				{
					Breach = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
					Breach.setValue(record.getAwaitingTriageBreachWarningKPIIsNotNull() ? record.getAwaitingTriageBreachWarningKPI().toString():null);
					
					//wdev-16138
					BreachTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));
					//if( record.getAwaitingTriageBreachWarningKPIColourIsNotNull() )
					//	BreachColour.getItems().newItem( record.getAwaitingTriageBreachWarningKPIColour(),  record.getAwaitingTriageBreachWarningKPIColour().getName(), record.getAwaitingTriageBreachWarningKPIColour().getImage());
					
					for (int k = 0; k < ca.length; k++)
						BreachTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachTextColour.setValue(record.getAwaitingTriageBreachWarningKPITextColourIsNotNull() ? record.getAwaitingTriageBreachWarningKPITextColour():null);
					
					BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));
					for (int k = 0; k < ca.length; k++)
						BreachFlashingTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachFlashingTextColour.setValue(record.getAwaitingTriageBreachWarningKPIFlashingTextColourIsNotNull() ? record.getAwaitingTriageBreachWarningKPIFlashingTextColour():null);
					
					BreachBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));
					for (int k = 0; k < ca.length; k++)
						BreachBackgroundColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachBackgroundColour.setValue(record.getAwaitingTriageBreachWarningKPIBackgroundColourIsNotNull() ? record.getAwaitingTriageBreachWarningKPIBackgroundColour():null);
					
					
					Breached = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
					Breached.setValue(record.getAwaitingTriageBreachedKPIIsNotNull() ? record.getAwaitingTriageBreachedKPI().toString():null);
					
					//wdev-16138
					BreachedTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));
					//if( record.getAwaitingTriageBreachKPIColourIsNotNull())
					//	BreachedColour.getItems().newItem(record.getAwaitingTriageBreachKPIColour(), record.getAwaitingTriageBreachKPIColour().getName(), record.getAwaitingTriageBreachKPIColour().getImage());
					
					for (int k = 0; k < ca.length; k++)
						BreachedTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachedTextColour.setValue(record.getAwaitingTriageBreachKPITextColourIsNotNull() ? record.getAwaitingTriageBreachKPITextColour():null);
					
					BreachedFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
					
					for (int k = 0; k < ca.length; k++)
						BreachedFlashingTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachedFlashingTextColour.setValue(record.getAwaitingTriageBreachKPIFlashingTextColourIsNotNull() ? record.getAwaitingTriageBreachKPIFlashingTextColour() : null);
					
					
					BreachedBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
					
					for (int k = 0; k < ca.length; k++)
						BreachedBackgroundColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachedBackgroundColour.setValue(record.getAwaitingTriageBreachKPIBackgroundColourIsNotNull()? record.getAwaitingTriageBreachKPIBackgroundColour():null);
					
					FlashingKPITextCoulourVo tempKpiVo = new FlashingKPITextCoulourVo();
					tempKpiVo.setBreachWarningFlashingTest(record.getAwaitingTriageBreachWarningKPIFlashingText());
					tempKpiVo.setBreachedKPIFlashingText(record.getAwaitingTriageBreachKPIFlashingText());
					row.setIdentifier(tempKpiVo);
					
					//------------
					
				}
				else if(row.getValue() != null && row.getValue().equals(ROW_AWAITINGCLIN))
				{
					Breach = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
					Breach.setValue(record.getAwaitingClinicianBreachWarningKPIIsNotNull() ? record.getAwaitingClinicianBreachWarningKPI().toString():null);
					
					
					//wdev-16138
					BreachTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));
					//if( record.getAwaitingClinicianBreachWarningKPIColourIsNotNull())
					//	BreachColour.getItems().newItem(record.getAwaitingClinicianBreachWarningKPIColour(), record.getAwaitingClinicianBreachWarningKPIColour().getName(), record.getAwaitingClinicianBreachWarningKPIColour().getImage());
					for (int k = 0; k < ca.length; k++)
						BreachTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachTextColour.setValue(record.getAwaitingClinicianBreachWarningKPITextColourIsNotNull()? record.getAwaitingClinicianBreachWarningKPITextColour() : null);
					
					BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));
					for (int k = 0; k < ca.length; k++)
						BreachFlashingTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachFlashingTextColour.setValue(record.getAwaitingClinicianBreachWarningKPIFlashingTextColourIsNotNull()? record.getAwaitingClinicianBreachWarningKPIFlashingTextColour() : null);
					
					BreachBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));
					for (int k = 0; k < ca.length; k++)
						BreachBackgroundColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachBackgroundColour.setValue(record.getAwaitingClinicianBreachWarningKPIBackgroundColourIsNotNull()? record.getAwaitingClinicianBreachWarningKPIBackgroundColour():null);
				
					
					//-----------
					Breached = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
					Breached.setValue(record.getAwaitingClinicianBreachedKPIIsNotNull() ? record.getAwaitingClinicianBreachedKPI().toString():null);
					
					//wdev-16138
					BreachedTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));
					//if(	record.getAwaitingClinicianBreachKPIColourIsNotNull())
					//	BreachedColour.getItems().newItem(record.getAwaitingClinicianBreachKPIColour(), record.getAwaitingClinicianBreachKPIColour().getName(), record.getAwaitingClinicianBreachKPIColour().getImage());
					for (int k = 0; k < ca.length; k++)
						BreachedTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachedTextColour.setValue(record.getAwaitingClinicianBreachKPITextColourIsNotNull() ? record.getAwaitingClinicianBreachKPITextColour() : null);
					
					BreachedFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
					
					for (int k = 0; k < ca.length; k++)
						BreachedFlashingTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachedFlashingTextColour.setValue(record.getAwaitingClinicianBreachKPIFlashingTextColourIsNotNull() ? record.getAwaitingClinicianBreachKPIFlashingTextColour() : null);
					
					BreachedBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
					
					for (int k = 0; k < ca.length; k++)
						BreachedBackgroundColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachedBackgroundColour.setValue(record.getAwaitingClinicianBreachKPIBackgroundColourIsNotNull() ? record.getAwaitingClinicianBreachKPIBackgroundColour() : null);
					
					FlashingKPITextCoulourVo tempKpiVo = new FlashingKPITextCoulourVo();
					tempKpiVo.setBreachWarningFlashingTest(record.getAwaitingClinicianBreachWarningKPIFlashingText());
					tempKpiVo.setBreachedKPIFlashingText(record.getAwaitingClinicianBreachKPIFlashingText());
					row.setIdentifier(tempKpiVo);
					//-----------
					
					
				}
				else if(row.getValue() != null && row.getValue().equals(ROW_LENGHTOFSTAY))
				{
					Breach = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
					Breach.setValue(record.getLosBreachWarningKPIIsNotNull() ? record.getLosBreachWarningKPI().toString():null);
					
					//wdev-16138
					BreachTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));
					//if( record.getLosBreachWarningKPIColourIsNotNull())
					//	BreachColour.getItems().newItem(record.getLosBreachWarningKPIColour().getValue(), record.getLosBreachWarningKPIColour().getName(), record.getLosBreachWarningKPIColour().getImage());
					for (int k = 0; k < ca.length; k++)
						BreachTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachTextColour.setValue(record.getLosBreachWarningKPITextColourIsNotNull() ? record.getLosBreachWarningKPITextColour() : null);
					
					BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));
					
					for (int k = 0; k < ca.length; k++)
						BreachFlashingTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachFlashingTextColour.setValue(record.getLosBreachWarningKPIFlashingTextColourIsNotNull() ? record.getLosBreachWarningKPIFlashingTextColour() : null);
					
					BreachBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));
					
					for (int k = 0; k < ca.length; k++)
						BreachBackgroundColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachBackgroundColour.setValue(record.getLosBreachWarningKPIBackgroundColourIsNotNull() ? record.getLosBreachWarningKPIBackgroundColour() : null);
					
					//--------------
					
					Breached = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
					Breached.setValue(record.getLosBreachedKPIIsNotNull() ? record.getLosBreachedKPI().toString():null);
					
					//wdev-16138
					BreachedTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));
					//if(	record.getLosBreachKPIColourIsNotNull())
					//	BreachedColour.getItems().newItem(record.getLosBreachKPIColour().getValue(), record.getLosBreachKPIColour().getName(), record.getLosBreachKPIColour().getImage());
					for (int k = 0; k < ca.length; k++)
						BreachedTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachedTextColour.setValue(record.getLosBreachKPITextColourIsNotNull() ? record.getLosBreachKPITextColour():null);
					
					
					BreachedFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
					for (int k = 0; k < ca.length; k++)
						BreachedFlashingTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachedFlashingTextColour.setValue(record.getLosBreachedKPIFlashingTextColourIsNotNull() ? record.getLosBreachedKPIFlashingTextColour():null);
					
					
					BreachedBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
					for (int k = 0; k < ca.length; k++)
						BreachedBackgroundColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
					BreachedBackgroundColour.setValue(record.getLosBreachedKPIBackgroundColourIsNotNull() ? record.getLosBreachedKPIBackgroundColour():null);
					
					FlashingKPITextCoulourVo tempKpiVo = new FlashingKPITextCoulourVo();
					tempKpiVo.setBreachWarningFlashingTest(record.getLosBreachWarningKPIFlashingText());
					tempKpiVo.setBreachedKPIFlashingText(record.getLosBreachedKPIFlashingText());
					row.setIdentifier(tempKpiVo);
					
					//----------------
					
				}
				else
				{
					
					if(temColl != null && temColl.size() > 0)
					{
						
						TriagePriorityKpConfigVo  tempVo = null;
						
						if(row.getValue() != null && row.getValue().equals(ROW_PRIORITY1) )
						{
							tempVo = getTriagePriority(temColl,TriagePriority.PRIORITY1);
													
						}
						else if(row.getValue() != null && row.getValue().equals(ROW_PRIORITY2) )
						{
							tempVo = getTriagePriority(temColl,TriagePriority.PRIORITY2);
													
						}
						else if(row.getValue() != null && row.getValue().equals(ROW_PRIORITY3) )
						{
							tempVo = getTriagePriority(temColl,TriagePriority.PRIORITY3);
													
						}
						else if(row.getValue() != null && row.getValue().equals(ROW_PRIORITY4) )
						{
							tempVo = getTriagePriority(temColl,TriagePriority.PRIORITY4);
													
						}
						else if(row.getValue() != null && row.getValue().equals(ROW_PRIORITY5) )
						{
							tempVo = getTriagePriority(temColl,TriagePriority.PRIORITY5);
													
						}						
						else if(row.getValue() != null && row.getValue().equals(ROW_SKIPPEDTRIAGE) )
						{
							tempVo = getTriagePriority(temColl,TriagePriority.SKIPPED_TRIAGE);
													
						}
						if(	tempVo != null)
						{
							Breach = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
							Breach.setValue(tempVo.getPriorityBreachWarningKPIIsNotNull() ? tempVo.getPriorityBreachWarningKPI().toString():null);
							
							//wdev-16138
							BreachTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));
							//if(	tempVo.getPriorityBreachWarningKPIColourIsNotNull())
							//	BreachColour.getItems().newItem(tempVo.getPriorityBreachWarningKPIColour(), tempVo.getPriorityBreachWarningKPIColour().getName(), tempVo.getPriorityBreachWarningKPIColour().getImage());
							for (int k = 0; k < ca.length; k++)
								BreachTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
							BreachTextColour.setValue(tempVo.getPriorityBreachWarningKPITextColourIsNotNull() ? tempVo.getPriorityBreachWarningKPITextColour() : null);
							
							BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));
							for (int k = 0; k < ca.length; k++)
								BreachFlashingTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
							BreachFlashingTextColour.setValue(tempVo.getPriorityBreachWarningKPIFlashingTextColourIsNotNull() ? tempVo.getPriorityBreachWarningKPIFlashingTextColour() : null);
							
							BreachBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));
							for (int k = 0; k < ca.length; k++)
								BreachBackgroundColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
							BreachBackgroundColour.setValue(tempVo.getPriorityBreachWarningKPIBackgroundColourIsNotNull() ? tempVo.getPriorityBreachWarningKPIBackgroundColour() : null);
							
							//--------
							
							Breached = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
							Breached.setValue(tempVo.getPriorityBreachedKPIIsNotNull() ? tempVo.getPriorityBreachedKPI().toString():null);
							
							//wdev-16138
							BreachedTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));
							//if(	tempVo.getPriorityBreachKPIColourIsNotNull())
							//	BreachedColour.getItems().newItem(tempVo.getPriorityBreachKPIColour(), tempVo.getPriorityBreachKPIColour().getName(), tempVo.getPriorityBreachKPIColour().getImage());
							for (int k = 0; k < ca.length; k++)
								BreachedTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
							BreachedTextColour.setValue(tempVo.getPriorityBreachKPITextColourIsNotNull() ? tempVo.getPriorityBreachKPITextColour() : null);
							
							BreachedFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
							for (int k = 0; k < ca.length; k++)
								BreachedFlashingTextColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
							BreachedFlashingTextColour.setValue(tempVo.getPriorityBreachedKPIFlashingTextColourIsNotNull() ? tempVo.getPriorityBreachedKPIFlashingTextColour() : null);
							
							BreachedBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
							for (int k = 0; k < ca.length; k++)
								BreachedBackgroundColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
							BreachedBackgroundColour.setValue(tempVo.getPriorityBreachedKPIBackgroundColourIsNotNull() ? tempVo.getPriorityBreachedKPIBackgroundColour() : null);
							
							//WDEV-16991
							DefaultRowColour = row.getCells().get(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR));
							for (int k = 0; k < ca.length; k++)
								DefaultRowColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
							DefaultRowColour.setValue(tempVo.getDefaultRowColourIsNotNull() ? tempVo.getDefaultRowColour() : null);

							DefaultFontColour = row.getCells().get(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR));
							for (int k = 0; k < ca.length; k++)
								DefaultFontColour.getItems().newItem(ca[k], ca[k].getName(), ca[k].getImage());
							DefaultFontColour.setValue(tempVo.getDefaultFontColourIsNotNull() ? tempVo.getDefaultFontColour() : null);
							
							FlashingKPITextCoulourVo tempKpiVo = new FlashingKPITextCoulourVo();
							tempKpiVo.setBreachWarningFlashingTest(tempVo.getPriorityBreachWarningKPIFlashingText());
							tempKpiVo.setBreachedKPIFlashingText(tempVo.getPriorityBreachedKPIFlashingText());
							row.setIdentifier(tempKpiVo);
							//----------------
							
							temColl.remove(tempVo);
						}
						
					}
				}
			}
		}
	}
	private void pupulateRowDynGrid(TriageKPIUnboundDBVo tempVo,DynamicGridRow row)
	{
		 	
		DynamicGridCell Breach = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
		Breach.setValue(tempVo.getBreachWarningIsNotNull() ? tempVo.getBreachWarning().toString():null);
		
		//wdev-16138
		DynamicGridCell BreachTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));
		if( tempVo.getBreachWarningTextColour() != null)
			BreachTextColour.getItems().newItem(tempVo.getBreachWarningTextColour(), tempVo.getBreachWarningTextColour().getName(), tempVo.getBreachWarningTextColour().getImage());
		BreachTextColour.setValue(tempVo.getBreachWarningTextColour());
		
		DynamicGridCell BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));
		if( tempVo.getBreachWarningFlashingTextColour() != null)
			BreachFlashingTextColour.getItems().newItem(tempVo.getBreachWarningFlashingTextColour(), tempVo.getBreachWarningFlashingTextColour().getName(), tempVo.getBreachWarningFlashingTextColour().getImage());
		BreachFlashingTextColour.setValue(tempVo.getBreachWarningFlashingTextColour());
		
		
		DynamicGridCell BreachBacgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));
		if( tempVo.getBreachWarningBackgroundColour() != null)
			BreachBacgroundColour.getItems().newItem(tempVo.getBreachWarningBackgroundColour(), tempVo.getBreachWarningBackgroundColour().getName(), tempVo.getBreachWarningBackgroundColour().getImage());
		BreachBacgroundColour.setValue(tempVo.getBreachWarningBackgroundColour());
		
		//------------------
		DynamicGridCell Breached = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
		Breached.setValue(tempVo.getBreachedKPIIsNotNull()? tempVo.getBreachedKPI().toString():null);
		
		//wdev-16138
		DynamicGridCell BreachedTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));
		if( tempVo.getBreachedKPITextColour() != null)
			BreachedTextColour.getItems().newItem(tempVo.getBreachedKPITextColour(), tempVo.getBreachedKPITextColour().getName(), tempVo.getBreachedKPITextColour().getImage());
		BreachedTextColour.setValue(tempVo.getBreachedKPITextColour());
		
		DynamicGridCell BreachedFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
		if( tempVo.getBreachedKPIFlashingTextColour() != null)
			BreachedFlashingTextColour.getItems().newItem(tempVo.getBreachedKPIFlashingTextColour(), tempVo.getBreachedKPIFlashingTextColour().getName(), tempVo.getBreachedKPIFlashingTextColour().getImage());
		BreachedFlashingTextColour.setValue(tempVo.getBreachedKPIFlashingTextColour());
		
		DynamicGridCell BreachedBacgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
		if( tempVo.getBreachedKPIBackgroundColour() != null)
			BreachedBacgroundColour.getItems().newItem(tempVo.getBreachedKPIBackgroundColour(), tempVo.getBreachedKPIBackgroundColour().getName(), tempVo.getBreachedKPIBackgroundColour().getImage());
		BreachedBacgroundColour.setValue(tempVo.getBreachedKPIBackgroundColour());
		
		//WDEV-16991
		DynamicGridCell DefaultRowColour = row.getCells().get(getColumnKPI(COLUMN_DEFAULT_ROW_COLOUR));
		if( tempVo.getDefaultRowColour() != null)
			DefaultRowColour.getItems().newItem(tempVo.getDefaultRowColour(), tempVo.getDefaultRowColour().getName(), tempVo.getDefaultRowColour().getImage());
		DefaultRowColour.setValue(tempVo.getDefaultRowColour());
		
		DynamicGridCell DefaultFontColour = row.getCells().get(getColumnKPI(COLUMN_DEFAULT_FONT_COLOUR));
		if( tempVo.getDefaultFontColour() != null)
			DefaultFontColour.getItems().newItem(tempVo.getDefaultFontColour(), tempVo.getDefaultFontColour().getName(), tempVo.getDefaultFontColour().getImage());
		DefaultFontColour.setValue(tempVo.getDefaultFontColour());
		
		
		FlashingKPITextCoulourVo tempKpiVo = new FlashingKPITextCoulourVo();
		tempKpiVo.setBreachWarningFlashingTest(tempVo.getBreachWarningFlashingText());
		tempKpiVo.setBreachedKPIFlashingText(tempVo.getBreachedKPIFlashingText());
		row.setIdentifier(tempKpiVo);
		//-------------------------
	}
	
	protected void onDyngrdKPIRowSelectionChanged(DynamicGridRow row)	throws PresentationLogicException 
	{
		updateControlsState();
		updateContextMenu();
		
	}
	
	protected void onImbDeleteClick() throws PresentationLogicException 
	{
		removeValues();
		form.setMode(FormMode.EDIT);
		
	}
	private void updateContextMenu()
	{
		form.getContextMenus().Emergency.hideAllAttendanceKPIConfigurationMenuItems();
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().Emergency.getAttendanceKPIConfigurationDELETEItem().setVisible(form.getLocalContext().getCurrentAttendanceKPIConfigIsNotNull() && form.dyngrdKPI().getSelectedRow() != null && showRemove());
			form.getContextMenus().Emergency.getAttendanceKPIConfigurationEDITItem().setVisible(form.getLocalContext().getCurrentAttendanceKPIConfigIsNotNull() && form.dyngrdKPI().getSelectedRow() != null);
			
		}
	}
	private void removeValues()
	{
		TriageKPIUnboundDBVo tempVo = new TriageKPIUnboundDBVo();
		pupulateRowDynGrid(tempVo,form.dyngrdKPI().getSelectedRow());
	}
	private boolean showRemove()
	{
		if(form.dyngrdKPI().getSelectedRow() != null)
		{
			DynamicGridRow row = form.dyngrdKPI().getSelectedRow();
			DynamicGridCell Breach = row.getCells().get(getColumnKPI(COLUMN_BREACHWARNING));
			//wdev-16138
			DynamicGridCell BreachTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHTEXTCOLOUR));
			DynamicGridCell BreachFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHFLASHINGTEXTCOLOUR));
			DynamicGridCell BreachBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHBACGROUNDCOLOUR));
			
			//----------------
			DynamicGridCell Breached = row.getCells().get(getColumnKPI(COLUMN_BREACHED));
			//wdev-16138
			DynamicGridCell BreachedTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDTEXTCOLOUR));
			DynamicGridCell BreachedFlashingTextColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDFLASHINGTEXTCOLOUR));
			DynamicGridCell BreachedBackgroundColour = row.getCells().get(getColumnKPI(COLUMN_BREACHEDBACKGROUNDCOLOUR));
			//------------
			if(Breach.getValue() == null && BreachTextColour.getValue() == null && BreachFlashingTextColour.getValue() == null && BreachBackgroundColour.getValue() == null && Breached.getValue() == null && BreachedTextColour.getValue() == null && BreachedFlashingTextColour.getValue() == null && BreachedBackgroundColour.getValue() == null )
				return false;
			else
				return true;
			
			
		}
		return false;
	}

}
