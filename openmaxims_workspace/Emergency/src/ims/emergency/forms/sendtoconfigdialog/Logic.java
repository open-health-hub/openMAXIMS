//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.sendtoconfigdialog;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.emergency.forms.sendtoconfigdialog.GenForm.grdToAreaRow;
import ims.emergency.forms.sendtoconfigdialog.GenForm.grdToAreaRowCollection;
import ims.emergency.vo.TrackingAreaVo;
import ims.emergency.vo.TrackingAreaVoCollection;
import ims.emergency.vo.TrackingConfigurationVo;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onGrdToAreaSelectionChanged()
	{
		// TODO Add your code here.
	}
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		form.cmbFromArea().newRow(form.getGlobalContext().Emergency.getTrackingArea(), form.getGlobalContext().Emergency.getTrackingArea().getAreaDisplayName());
		form.cmbFromArea().setValue(form.getGlobalContext().Emergency.getTrackingArea());
		populateGridToArea();
		
		updateContextMenuState();
		
	}
	private void populateGridToArea()
	{
		//TrackingAreaVoCollection collAreas = domain.getAreasDefinitions(form.cmbFromArea().getValue().getEDLocation());
		 TrackingConfigurationVo trackConfig = domain.getTrackingConfig(form.cmbFromArea().getValue().getEDLocation());
		
		if (trackConfig==null)
			return;
		 
		TrackingAreaVoCollection collAreas = trackConfig.getAreas();
		
		if (collAreas==null)
			return;
		
		for (int i=0;i<collAreas.size();i++)
		{
			if (collAreas.get(i).getIsRegistrationArea() || collAreas.get(i).getIsOverallView() || (collAreas.get(i).getStatusIsNotNull() && PreActiveActiveInactiveStatus.INACTIVE.equals(collAreas.get(i).getStatus())))
				continue;
			
			if (!collAreas.get(i).equals(form.cmbFromArea().getValue()))
			{
				addRow(collAreas.get(i));
			}
		}
	}
	
	private void addRow(TrackingAreaVo trackArea)
	{
		grdToAreaRow row = form.grdToArea().getRows().newRow();
		row.setcolToArea(trackArea.getAreaDisplayName());
		row.setcolSelect(isSendToArea(trackArea));
		row.setValue(trackArea);
		
	}
	private boolean isSendToArea(TrackingAreaVo trackArea)
	{
		TrackingAreaVoCollection sendToAreas = form.cmbFromArea().getValue().getSendToAreas();
		for (int i=0;i<sendToAreas.size();i++)
		{
			if (sendToAreas.get(i).equals(trackArea))
				return true;
		}
		return false;
	}
	private void updateContextMenuState()
	{
		form.getContextMenus().Emergency.getSelectSendToConfigSelectAllItem().setVisible(true);
		form.getContextMenus().Emergency.getSelectSendToConfigDeselectAllItem().setVisible(true);
				
		form.getContextMenus().Emergency.getSelectSendToConfigSelectAllItem().setEnabled(form.grdToArea().getRows().size()>0);
		form.getContextMenus().Emergency.getSelectSendToConfigDeselectAllItem().setEnabled(form.grdToArea().getRows().size()>0);
		
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.SelectSendToConfig.SelectAll:
				selectAll();
				break;
			case GenForm.ContextMenus.EmergencyNamespace.SelectSendToConfig.DeselectAll:
				deselectAll();
				break;
		}
	}
	
	private void selectAll() 
	{
		for(int i=0; i<form.grdToArea().getRows().size(); i++)
		{
			form.grdToArea().getRows().get(i).setcolSelect(true);
		}
	}
	
	private void deselectAll() 
	{
		for(int i=0; i<form.grdToArea().getRows().size(); i++)
		{
			form.grdToArea().getRows().get(i).setcolSelect(false);
		}
	}
	@Override
	protected void onBtnOkClick() throws PresentationLogicException
	{
		populateDataFromScreen();
		engine.close(DialogResult.OK);
	}
	private void populateDataFromScreen()
	{
		TrackingAreaVoCollection collSendToArea = new TrackingAreaVoCollection();
		grdToAreaRowCollection rows = form.grdToArea().getRows();
		for (int i=0;i<rows.size();i++)
		{
			if (rows.get(i).getcolSelect())
			{
				collSendToArea.add(rows.get(i).getValue());
			}
		}
		
		form.getGlobalContext().Emergency.getTrackingArea().setSendToAreas(collSendToArea);
	}
	
	
}
