//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.triagenotetemplateconfiguration;

import ims.clinical.vo.ClinicalProblemVo;
import ims.clinical.vo.ClinicalProblemVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.triagenotetemplateconfiguration.GenForm.grdPresentingProbRow;
import ims.emergency.vo.TriageNoteDefaultTextConfigVo;
import ims.emergency.vo.TriageNoteDefaultTextConfigVoCollection;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			doSearch();
		}
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearInstanceControls();
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onImbResetClick() throws PresentationLogicException
	{
		form.qmbSearchPresentingProblem().clear();
		form.grdPresentingProb().getRows().clear();
		form.cmbSearchStatus().setValue(null);
		clearInstanceControls();
		updateControlsState();
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		doSearch();
		updateControlsState();
	}

	private void doSearch()
	{
		clearInstanceControls();
		form.grdPresentingProb().getRows().clear();
		
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.setMode(FormMode.VIEW);
		}

		TriageNoteDefaultTextConfigVoCollection coll = null;
		coll = domain.listTriageNotes(form.qmbSearchPresentingProblem().getValue(), form.cmbSearchStatus().getValue());

		if (coll == null || coll.size() == 0)
		{
			engine.showMessage("There are no Records for the Search Criteria Provided");
			return;
		}

		populateScreenFromData(coll);

	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.TriageNoteTemplate.New:
				newInstance();
				break;
			case GenForm.ContextMenus.EmergencyNamespace.TriageNoteTemplate.Edit:
				onBtnEditClick();
				break;
		}
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbSearchStatus().setValue(PreActiveActiveInactiveStatus.ACTIVE);
		doSearch();
	}

	private void populateScreenFromData(TriageNoteDefaultTextConfigVoCollection coll)
	{

		if (coll == null)
			return;

		if (form.getLocalContext().getSelectedTriageNote() != null)
		{
			form.grdPresentingProb().setValue(form.getLocalContext().getSelectedTriageNote());
		}

		for (int i = 0; i < coll.size(); i++)
		{
			TriageNoteDefaultTextConfigVo triageNote = coll.get(i);
			grdPresentingProbRow row = form.grdPresentingProb().getRows().newRow();
			row.setcolPresProbl(triageNote.getProblem().getPCName());
			row.setcolDefaultTriageNote(triageNote.getDefaultTriageNote());
			row.setTooltipForcolDefaultTriageNote(triageNote.getDefaultTriageNote());
			row.setcolStatus(triageNote.getStatus().toString());
			row.setValue(triageNote);
		}
		if (form.getLocalContext().getSelectedTriageNote() != null)
		{
			form.grdPresentingProb().setValue(form.getLocalContext().getSelectedTriageNote());
		}
	}

	public void clearInstanceControls()
	{
		form.ctnDetails().qmbPresentingProblem().clear();
		form.ctnDetails().richNote().setValue(null);
		form.ctnDetails().cmbStatus().setValue(null);
		form.getLocalContext().setSelectedTriageNote(null);
		form.grdPresentingProb().setValue(null);
	}

	private void clearContainerValues()
	{
		form.ctnDetails().qmbPresentingProblem().clear();
		form.ctnDetails().richNote().setValue(null);
		form.ctnDetails().cmbStatus().setValue(null);
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		onBtnNewClick();
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		TriageNoteDefaultTextConfigVo TriageNoteToSave = populateDataFromScreen(form.getLocalContext().getSelectedTriageNote());

		String[] errors = TriageNoteToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Check SOE
		if (TriageNoteToSave.getID_TriageNoteDefaultTextConfigIsNotNull() && domain.isStale(TriageNoteToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			doSearch();
			return false;
		}

		// check if an active triage note already exists for the selected problem
		if (TriageNoteToSave.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
		{
			TriageNoteDefaultTextConfigVoCollection TriageNote = domain.listTriageNotes(TriageNoteToSave.getProblem(), TriageNoteToSave.getStatus());
			if (TriageNote != null && TriageNote.getActiveCount() != 0 && !TriageNote.contains(TriageNoteToSave))
			{
				engine.showMessage("An active note already exists for the selected problem.", "", MessageButtons.OK, MessageIcon.WARNING);
				return false;
			}
		}

		try
		{
			TriageNoteToSave = domain.saveTriageNote(TriageNoteToSave);
		}

		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			doSearch();
			return false;
		}

		form.getLocalContext().setSelectedTriageNote(TriageNoteToSave);

		return true;
	}

	private TriageNoteDefaultTextConfigVo populateDataFromScreen(TriageNoteDefaultTextConfigVo selectedProblem)
	{
		if (selectedProblem == null)
		{
			selectedProblem = new TriageNoteDefaultTextConfigVo();
		}

		selectedProblem.setProblem(form.ctnDetails().qmbPresentingProblem().getValue());
		selectedProblem.setDefaultTriageNote(form.ctnDetails().richNote().getValue());
		selectedProblem.setStatus(form.ctnDetails().cmbStatus().getValue());

		return selectedProblem;
	}

	public void updateControlsState()
	{
		form.ctnDetails().setCollapsed(!((form.grdPresentingProb().getValue() != null && form.getMode().equals(FormMode.VIEW)) || form.getMode().equals(FormMode.EDIT)));

		if (form.getMode() == FormMode.VIEW)
		{
			form.btnEdit().setVisible(form.grdPresentingProb().getValue() != null);
			form.btnEdit().setEnabled(form.grdPresentingProb().getValue() != null);
		}

		if (form.getMode() == FormMode.EDIT)
		{
			removePreactiveOrActiveLookup();
		}

		form.getContextMenus().Emergency.getTriageNoteTemplateNewItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().Emergency.getTriageNoteTemplateEditItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdPresentingProb().getValue() instanceof TriageNoteDefaultTextConfigVo);
	}

	private void removePreactiveOrActiveLookup()
	{
		PreActiveActiveInactiveStatus status = form.ctnDetails().cmbStatus().getValue();
		form.ctnDetails().cmbStatus().clear();
		PreActiveActiveInactiveStatusCollection lookupColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for (int i = 0; lookupColl != null && i < lookupColl.size(); i++)
		{
			if (isStatusActive() && lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE))
				continue;
			if (isStatusInactive() && (lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE) || lookupColl.get(i).equals(PreActiveActiveInactiveStatus.ACTIVE)))
				continue;

			form.ctnDetails().cmbStatus().newRow(lookupColl.get(i), lookupColl.get(i).toString(), lookupColl.get(i).getImage(), lookupColl.get(i).getColor());
		}
		form.ctnDetails().cmbStatus().setValue(status);
	}

	private boolean isStatusActive()
	{
		TriageNoteDefaultTextConfigVo voTriageNote = form.getLocalContext().getSelectedTriageNote();
		return voTriageNote != null && voTriageNote.getStatusIsNotNull() && voTriageNote.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE);
	}

	private boolean isStatusInactive()
	{
		TriageNoteDefaultTextConfigVo voTriageNote = form.getLocalContext().getSelectedTriageNote();
		return voTriageNote != null && voTriageNote.getStatusIsNotNull() && voTriageNote.getStatus().equals(PreActiveActiveInactiveStatus.INACTIVE);
	}

	public void updateInstance()
	{
		// TODO: Add you code here.
	}

	@Override
	protected void onQmbSearchPresentingProblemTextSubmited(String value) throws PresentationLogicException
	{
		listProblemSearch(value);
	}

	private void listProblemSearch(String value)
	{

		ClinicalProblemVoCollection coll = null;

		coll = domain.listProblems(value);

		form.qmbSearchPresentingProblem().setValue(null);
		form.qmbSearchPresentingProblem().clear();

		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				ClinicalProblemVo vo = coll.get(i);
				form.qmbSearchPresentingProblem().newRow(vo, vo.getPCName());
			}

			if (coll.size() == 1)
			{
				form.qmbSearchPresentingProblem().setValue(coll.get(0));
			}

			if (coll.size() > 1)
			{
				form.qmbSearchPresentingProblem().showOpened();
			}
		}
	}

	@Override
	protected void onQmbPresentingProblemTextSubmited(String value) throws PresentationLogicException
	{
		listPresentingProblemSearch(value);
	}

	private void listPresentingProblemSearch(String value)
	{
		ClinicalProblemVoCollection coll = null;

		coll = domain.listProblems(value);

		
		
		form.ctnDetails().qmbPresentingProblem().setValue(null);	//wdev-15998
		form.ctnDetails().qmbPresentingProblem().clear();			//wdev-15998

		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				ClinicalProblemVo vo = coll.get(i);
				form.ctnDetails().qmbPresentingProblem().newRow(vo, vo.getPCName());
			}

			if (coll.size() == 1)
			{
				form.ctnDetails().qmbPresentingProblem().setValue(coll.get(0));
			}

			if (coll.size() > 1)
			{
				form.ctnDetails().qmbPresentingProblem().showOpened();
			}
		}

	}

	@Override
	protected void onGrdPresentingProbSelectionChanged() throws PresentationLogicException
	{
		TriageNoteDefaultTextConfigVo selectedTriageNote = null;

		selectedTriageNote = domain.getTriageNote(form.grdPresentingProb().getValue());

		if (form.grdPresentingProb().getSelectedRow().getValue().getID_TriageNoteDefaultTextConfigIsNotNull() && domain.isStale(form.grdPresentingProb().getSelectedRow().getValue()))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			doSearch();
			return;
		}

		form.getLocalContext().setSelectedTriageNote(selectedTriageNote);
		populateInstanceControlsFromData(selectedTriageNote);
		updateControlsState();

	}

	private void populateInstanceControlsFromData(TriageNoteDefaultTextConfigVo selectedProblem)
	{
		clearContainerValues();

		if (selectedProblem == null)
			return;

		if (selectedProblem.getDefaultTriageNoteIsNotNull())
		{
			form.ctnDetails().qmbPresentingProblem().newRow(selectedProblem.getProblem(), selectedProblem.getProblem().getPCName());
			form.ctnDetails().qmbPresentingProblem().setValue(selectedProblem.getProblem());
			form.ctnDetails().richNote().setValue(selectedProblem.getDefaultTriageNote());
			form.ctnDetails().cmbStatus().setValue(selectedProblem.getStatus());
		}
	}

}
