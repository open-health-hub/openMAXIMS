//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.woundimagescc;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;

import ims.admin.vo.AppImageVo;
import ims.configuration.EnvironmentConfig;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AppDBImageVo;
import ims.core.vo.PatientWoundAppDBImAndCommentVo;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.EDAssessmentWoundImagesVo;
import ims.emergency.vo.WoundImagesVo;
import ims.emergency.vo.WoundImagesVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.utils.Base64;
import ims.framework.utils.DateTime;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getForms().Core.WoundImageSelection.equals(formName))
		{
			if (DialogResult.OK.equals(result))
			{
				if( form.getGlobalContext().Core.getPatientWoundAppDBImAndCommentIsNotNull())
				{
					populateWoundImageControl(form.getGlobalContext().Core.getPatientWoundAppDBImAndComment().getWoundImage());
					form.txtComment().setValue(form.getGlobalContext().Core.getPatientWoundAppDBImAndComment().getComment());
					form.getLocalContext().setWoundImageDB(form.getGlobalContext().Core.getPatientWoundAppDBImAndComment().getWoundImage());
				}
				form.getLocalContext().setCurrentWoundImage(null);
				form.setMode(FormMode.EDIT);
				
				
				
			}
			else
			{
				open();
				
			}
			form.fireCustomControlValueChanged();
			
			
		}
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.fireCustomControlValueChanged();
		open();
		
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.fireCustomControlValueChanged();
		if( save())
			open();
		
	}
	private boolean save()
	{
		String[] errors = validateUIRules();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		EDAssessmentWoundImagesVo record = populateDataFromScreen(form.getLocalContext().getEDAssessmentWoundImages());
		errors = record.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			domain.saveRecord(record);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
		}
		return true;
	}
	private String[] validateUIRules()
	{
		
		ArrayList<String> errorList = new ArrayList<String>();
		
		if( form.ccWoundAuthoring().getValue() == null)
		{
			errorList.add("Authoring HCP and Authoring Date / Time are mandatory.");
			
		}
		else
		{
			if (form.ccWoundAuthoring().getValue().getAuthoringHcp() == null)
				errorList.add("Authoring HCP is mandatory.");
			
			if (form.ccWoundAuthoring().getValue().getAuthoringDateTime() == null)
				errorList.add("Authoring Date / Time is mandatory.");
		}
				
		return errorList.toArray(new String[errorList.size()]);
	}

	private EDAssessmentWoundImagesVo populateDataFromScreen(EDAssessmentWoundImagesVo record)
	{
		if( record == null)
			record = new EDAssessmentWoundImagesVo();
		
		if( !record.getAuthoringInformationIsNotNull())
			record.setAuthoringInformation(form.ccWoundAuthoring().getValue());
		
		record.setPatient(form.getLocalContext().getPatientRef());
		record.setCareContext(form.getLocalContext().getCareContextRef());
		
		
		WoundImagesVo tempwoundVo = form.getLocalContext().getCurrentWoundImage();
		if( tempwoundVo == null )
			tempwoundVo = new WoundImagesVo();
		
		tempwoundVo.setAuthoringInformation(form.ccWoundAuthoring().getValue());
		tempwoundVo.setComment(form.txtComment().getValue());
		tempwoundVo.setPhoto(form.getLocalContext().getWoundImageDB());
		
		WoundImagesVoCollection woundColl = record.getWoundImages();
		if( woundColl == null)
			woundColl = new WoundImagesVoCollection();
		
		if( tempwoundVo.getID_WoundImageIsNotNull())
		{
			if( woundColl.contains(tempwoundVo))
			{
				woundColl.remove(tempwoundVo);
				woundColl.add(tempwoundVo);
			}
			else
				woundColl.add(tempwoundVo);
		}
		else
			woundColl.add(tempwoundVo);
		
		
		record.setWoundImages(woundColl);
		
		return record;
		
		
		
	}
	
	protected void onBtnCaptureImportClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clear();
		PatientWoundAppDBImAndCommentVo tempVo = new PatientWoundAppDBImAndCommentVo();
	  	tempVo.setComment(form.txtComment().getValue());
	  	form.getGlobalContext().Core.setPatientWoundAppDBImAndComment(tempVo);
	  	
		form.ccWoundAuthoring().initializeComponent();
		engine.open(form.getForms().Core.WoundImageSelection, new Object[]{null});
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.fireCustomControlValueChanged();
		form.setMode(FormMode.EDIT);
	}
	
	protected void onRecbrwoundImagesValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recbrwoundImagesValueChanged();
	}
	private void recbrwoundImagesValueChanged()
	{
		if( form.recbrwoundImages().getValue() != null)
		{
			WoundImagesVo tempVo = domain.getWoundImagesVo(form.recbrwoundImages().getValue());
			form.getLocalContext().setCurrentWoundImage(tempVo);
			populateScreenFromData(tempVo);
			if( tempVo != null)
				form.getLocalContext().setWoundImageDB(tempVo.getPhoto());
			
		}
	}
	private void populateScreenFromData(WoundImagesVo woundimg)
	{
		if( woundimg != null)
		{
			populateWoundImageControl(woundimg.getPhoto());
			form.ccWoundAuthoring().setValue(woundimg.getAuthoringInformation());
			form.txtComment().setValue(woundimg.getComment());
		}
	}
	private void populateWoundImageControl(AppDBImageVo dbImageVo)
	{
		if (dbImageVo == null) 
		{
			form.imgWoundImage().setValue(form.getImages().Core.NoPatientImage);			
			return;
		}
		else
		{			
			try 
			{
				form.imgWoundImage().setVisible(true);
				String sessionID = engine.getSessionId();
				String encodedImage = dbImageVo.getImageData();
				String type = dbImageVo.getImageType().getText();
				decodeFromBase64(encodedImage, sessionID, type);
			}
			catch (IOException error) 
			{		
				engine.showMessage(error.getMessage());
			}
			
		}
	}
	private String decodeFromBase64(String content, String sessionID, String imageType) throws IOException
	{
		byte[] decBytes = Base64.decode(content);

		if (decBytes == null || (decBytes != null && decBytes.length == 0)) 
		{
			engine.showMessage("Base64 image size is zero");
			return null;
		}
		//Get CurrentTimeMillis() segment
	    String str = Long.toHexString(System.currentTimeMillis());
	    while (str.length () < 12)
        {
            str = '0' + str;
        }
		
		String image = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "_" +sessionID + "." + imageType.toLowerCase();
		ArrayList<String> patientPhotoTempFiles = form.getGlobalContext().Core.getPatientPhotoTempFilesIsNotNull() ? form.getGlobalContext().Core.getPatientPhotoTempFiles() :  new ArrayList<String>();
		patientPhotoTempFiles.add(image);
		form.getGlobalContext().Core.setPatientPhotoTempFiles(patientPhotoTempFiles);
		
		try
		{		
			FileOutputStream fos = new FileOutputStream(image);				
			fos.write(decBytes);
			fos.close();	
			
			AppImageVo vo = new AppImageVo();
			
			if (ConfigFlag.GEN.APPLICATION_URL.getValue() == "")
			{			
				vo.setImagePath(EnvironmentConfig.getAplicationURL() + (ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "_" +sessionID + "." + imageType.toLowerCase()).replace("\\", "/"));
			}
			else
			{
				vo.setImagePath(ConfigFlag.GEN.APPLICATION_URL.getValue() + (ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "_" +sessionID + "." + imageType.toLowerCase()).replace("\\", "/"));
			}
			
			form.imgWoundImage().setValue(vo);		
			
		}		
		catch(FileNotFoundException exception) {			
			System.out.println("FileNotFoundException : " + exception);
		}		
		catch(IOException ioexception) {						
			System.out.println("IOException : " + ioexception);
		}
						
		return null;			
	}
	public void initialize(ims.core.patient.vo.PatientRefVo patientRef, ims.core.admin.vo.CareContextRefVo careContextRefVo, ims.core.admin.vo.EpisodeOfCareRefVo episodeOfCareRef)
	{
		form.getLocalContext().setPatientRef(patientRef);
		form.getLocalContext().setCareContextRef(careContextRefVo);
		form.getLocalContext().setEpisodeOfCareRef(episodeOfCareRef);
		form.getLocalContext().setEDAssessmentWoundImages(null);
		form.getLocalContext().setCurrentWoundImage(null);
		form.getLocalContext().setWoundImageDB(null);
		form.getLocalContext().setReadOnly(null);
		
		
		
		open();
		
		
		
	}
	
	private void clear()
	{
		form.recbrwoundImages().clear();
		form.ccWoundAuthoring().setValue(null);
		form.txtComment().setValue(null);
		form.imgWoundImage().setValue(form.getImages().Core.NoPatientImage);	
	}
	
	private void open()
	{
		clear();
		EDAssessmentWoundImagesVo tempVo = domain.getEDAssessmentWoundImageByPatient(form.getLocalContext().getPatientRef());
		form.getLocalContext().setEDAssessmentWoundImages(tempVo);
		if( tempVo != null && tempVo.getWoundImagesIsNotNull() && tempVo.getWoundImages().size() > 0)
		{
			populateRecordBrowser();
			recbrwoundImagesValueChanged();
		}
		
		form.setMode(FormMode.VIEW);
		
	}
	private void populateRecordBrowser()
	{
		if( form.getLocalContext().getEDAssessmentWoundImagesIsNotNull() && form.getLocalContext().getEDAssessmentWoundImages().getWoundImagesIsNotNull() && form.getLocalContext().getEDAssessmentWoundImages().getWoundImages().size() > 0)
		{
			WoundImagesVo tempVo = null;
			WoundImagesVoCollection tempColl =  form.getLocalContext().getEDAssessmentWoundImages().getWoundImages();
			tempColl.sort(new WoundImageComparator(SortOrder.DESCENDING));
			
			for(int i = 0; i < tempColl.size();i++)
			{
				tempVo = tempColl.get(i);
				if( tempVo != null)
				{
					form.recbrwoundImages().newRow(tempVo, tempVo.getAuthoringInformation().getAuthoringHcp().getIHcpName() + " - " +tempVo.getAuthoringInformation().getAuthoringDateTime().toString() );
				}
			}
			if( !form.getLocalContext().getCurrentWoundImageIsNotNull())
				form.getLocalContext().setCurrentWoundImage(tempColl.get(0));
			
			form.recbrwoundImages().setValue(form.getLocalContext().getCurrentWoundImage());
		}
	}

	
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}
	private void updateControlsState()
	{
		boolean isReadOnly = Boolean.TRUE.equals(form.getLocalContext().getReadOnly());
		form.ccWoundAuthoring().setIsRequiredPropertyToControls(true);
		
		if( form.getMode().equals(FormMode.EDIT))
			form.btnEdit().setVisible(false);
		else
		{
			form.btnEdit().setVisible(!isReadOnly && form.getLocalContext().getEDAssessmentWoundImagesIsNotNull());
			form.btnCaptureImport().setVisible(!isReadOnly);
		}
	}
		
	public class WoundImageComparator implements Comparator
	{
		private int direction = 1;
		
		public WoundImageComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public WoundImageComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime pdate1 = null;
			DateTime pdate2 = null;
			if(ob1 instanceof WoundImagesVo )
			{
				WoundImagesVo ps1 = (WoundImagesVo)ob1;
				pdate1 = ps1.getSystemInformationIsNotNull() && ps1.getSystemInformation().getCreationDateTime() != null ? ps1.getSystemInformation().getCreationDateTime():null;
			}
			if(ob2 instanceof WoundImagesVo)
			{
				WoundImagesVo ps2 = (WoundImagesVo)ob2;
				pdate2 = ps2.getSystemInformationIsNotNull() && ps2.getSystemInformation().getCreationDateTime() != null ? ps2.getSystemInformation().getCreationDateTime():null;
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	
	public void setReadOnly(Boolean readOnly)
	{
		form.getLocalContext().setReadOnly(readOnly);
		
		updateControlsState();
		
	}
}
