//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.54 build 2685.26610)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.emergency.forms.tracking;


import ims.admin.vo.MenuActionVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.forms.tracking.GenForm.GroupDisplayEnumeration;
import ims.emergency.forms.tracking.GenForm.GroupViewEnumeration;
import ims.emergency.forms.tracking.GenForm.grdTrackingCountRow;
import ims.emergency.helper.EmergencyDisplayHelper;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.emergency.vo.BedAvailabilityForTrackingVo;
import ims.emergency.vo.ColumnDetailVo;
import ims.emergency.vo.ColumnDetailVoCollection;
import ims.emergency.vo.DNWForTrackingSaveVo;
import ims.emergency.vo.DNWForTrackingVo;
import ims.emergency.vo.DNWStatusForTrackingSaveVo;
import ims.emergency.vo.DNWStatusForTrackingSaveVoCollection;
import ims.emergency.vo.TrackingAreaForTrackingVo;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingColumnsSortOrderVo;
import ims.emergency.vo.TrackingConfigurationForTrackingVo;
import ims.emergency.vo.TrackingCountVo;
import ims.emergency.vo.TrackingCountVoCollection;
import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo;
import ims.emergency.vo.TrackingSaveVo;
import ims.emergency.vo.TrackingVo;
import ims.emergency.vo.TrackingVoCollection;
import ims.emergency.vo.TrackingWithPartialAdmissionVo;
import ims.emergency.vo.TriagePriorityKpConfigVo;
import ims.emergency.vo.enums.OpenFormFromNewTriageComponent;
import ims.emergency.vo.lookups.AllocationStatus;
import ims.emergency.vo.lookups.AttendanceOutcome;
import ims.emergency.vo.lookups.TrackingAreaColumn;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.emergency.vo.lookups.TriagePriority;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellTable;
import ims.framework.controls.DynamicGridCellTable.TableCell;
import ims.framework.controls.DynamicGridCellTable.TableCellOptions;
import ims.framework.controls.DynamicGridCellTable.TableCellType;
import ims.framework.controls.DynamicGridCellTable.TableRow;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.enumerations.Align;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FontFamily;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.UILayoutState;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppRole;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final int DISPLAY_TRIAGE	= 1;
	private static final int DISPLAY_CLINICIANASSESSMNRWORKLIST	 = 2;
	private static final int DISPLAY_TRIAGE_FROM_TRACKING		 = 4;			//wdev-17405
	private static final int TRACKING_SUMMARY = 10;		//wdev-16751
	private static final int TRACKING = 11;				//wdev-16751
	
	private static final int M_WHITE_BOARD 			= 5040016;
	private static final int M_ASSESSMENT_DETAILS 	= 5040017;
	private static final int M_EVENT_HISTORY 		= 5040001;
	private static final int M_VIEW_HISTORY 		= 5040002; ///-------------
	private static final int M_DTA 					= 5040018;
	private static final int M_X_RAY 				= 5040004;
	private static final int M_BED_STATUS 			= 5040005;
	private static final int M_MOVE 				= 5040006;
	private static final int M_REFER_TO 			= 5040007;
	private static final int M_SEEN_COMHCP 			= 5040008;
	private static final int M_ALLOCATE_CUB 		= 5040009;
	private static final int M_PAT_STATUS 			= 5040010;
	private static final int M_ORDER 				= 5040011;
	private static final int M_RESULTS 				= 5040012;
	private static final int M_REFRESH 				= 5040013;
	private static final int M_DNW_PLUS				= 5040014;
	private static final int M_DNW_MINUS 			= 5040015;
	private static final int M_TRANSFER 			= 5040003;
	
	//WDEV-17966
	private static final String SEEN_COMPLETE_BUTTON_TEXT 		= "Seen/Complete HCP";
	private static final String REFER_TO_BUTTON_TEXT 			= "Refer To";
	private static final String ALLOCATE_CUBICLE_BUTTON_TEXT  	= "Allocate Cubicle";
	private static final String MASKED_TEXT  	= "*****";
	
	
	/**
	 * @author btofei
	 *
	 */
	private class TrackingPatientsComparator implements Comparator<TrackingVo> //WDEV-15819
	{
		private int direction;
		TrackingAreaColumn column = null;

		public TrackingPatientsComparator(TrackingAreaColumn columnType, Boolean sortOrder)
		{
			this.column = columnType;

			if (Boolean.TRUE.equals(sortOrder))
			{
				direction = 1;
			}
			else
			{
				direction = -1;
			}
		}

		public int compare(TrackingVo o1, TrackingVo o2)
		{
			//WDEV-16816
			if(TrackingAreaColumn.SEEN_BY_HCP.equals(column))
			{
				if (o1.getSeenBy() != null && o2.getSeenBy() != null)
				{
					if (o1.getSeenBy().getAllocatedMedic() != null && o2.getSeenBy().getAllocatedMedic() != null)
					{
						return o1.getSeenBy().getAllocatedMedic().toString().toUpperCase().compareTo(o2.getSeenBy().getAllocatedMedic().toString().toUpperCase()) * direction;
					}
				}

				if (o1.getSeenBy() != null && o1.getSeenBy().getAllocatedMedic() != null && (o2.getSeenBy() == null || o2.getSeenBy().getAllocatedMedic() == null))
				{
					return direction;
				}

				if (o2.getSeenBy() != null && o2.getSeenBy().getAllocatedMedic() != null && (o1.getSeenBy() == null || o1.getSeenBy().getAllocatedMedic() == null))
				{
					return -1 * direction;
				}
			}
			/*//WDEV-16816
			else if(TrackingAreaColumn.ALLOCATED_NURSE.equals(column))
			{
				if (o1.getCurrentAllocatedNurse() != null && o2.getCurrentAllocatedNurse() != null)
				{
					if (o1.getCurrentAllocatedNurse().getAllocatedNurse() != null && o2.getCurrentAllocatedNurse().getAllocatedNurse() != null)
					{
						return o1.getCurrentAllocatedNurse().getAllocatedNurse().toString().toUpperCase().compareTo(o2.getCurrentAllocatedNurse().getAllocatedNurse().toString().toUpperCase()) * direction;
					}
				}

				if (o1.getCurrentAllocatedNurse() != null && o1.getCurrentAllocatedNurse().getAllocatedNurse() != null && (o2.getCurrentAllocatedNurse() == null || o2.getCurrentAllocatedNurse().getAllocatedNurse() == null))
				{
					return direction;
				}

				if (o2.getCurrentAllocatedNurse() != null && o2.getCurrentAllocatedNurse().getAllocatedNurse() != null && (o1.getCurrentAllocatedNurse() == null || o1.getCurrentAllocatedNurse().getAllocatedNurse() == null))
				{
					return -1 * direction;
				}
			}
			*/
			else if(TrackingAreaColumn.CHART_NUMBER.equals(column))
			{
				String CN1 = getIdentifier(o1, PatIdType.HOSPNUM);
				String CN2 = getIdentifier(o2, PatIdType.HOSPNUM);
				
				if (CN1 != null && CN2 != null)
				{
					return CN1.toUpperCase().compareTo(CN2.toUpperCase()) * direction;
				}

				if (CN1 != null && CN2 == null)
				{
					return direction;
				}

				if (CN2 != null && CN1 == null)
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.COMMENTS.equals(column))
			{
				if (o1.getAttendance() != null && o2.getAttendance() != null)
				{
					if (o1.getAttendance().getComments() != null && o2.getAttendance().getComments() != null)
					{
						return o1.getAttendance().getComments().toUpperCase().compareTo(o2.getAttendance().getComments().toUpperCase()) * direction;
					}
				}

				if (o1.getAttendance() != null && o1.getAttendance().getComments() != null && (o2.getAttendance() == null || o2.getAttendance().getComments() == null))
				{
					return direction;
				}

				if (o2.getAttendance() != null && o2.getAttendance().getComments() != null && (o1.getAttendance() == null || o1.getAttendance().getComments() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.CUBICLE.equals(column))
			{
				if (o1.getCurrentCubicle() != null && o2.getCurrentCubicle() != null)
				{
					if (o1.getCurrentCubicle().getCubicleRoomBed() != null && o2.getCurrentCubicle().getCubicleRoomBed() != null)
					{
						return o1.getCurrentCubicle().getCubicleRoomBed().getCubicleRoomBedName().toUpperCase().compareTo(o2.getCurrentCubicle().getCubicleRoomBed().getCubicleRoomBedName().toUpperCase()) * direction;
					}
				}

				if (o1.getCurrentCubicle() != null && o1.getCurrentCubicle().getCubicleRoomBed() != null && (o2.getCurrentCubicle() == null || o2.getCurrentCubicle().getCubicleRoomBed() == null))
				{
					return direction;
				}

				if (o2.getCurrentCubicle() != null && o2.getCurrentCubicle().getCubicleRoomBed() != null && (o1.getCurrentCubicle() == null || o1.getCurrentCubicle().getCubicleRoomBed() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.DISCHARGE_OUTCOME.equals(column))
			{
				if (o1.getAttendance() != null && o2.getAttendance() != null)
				{
					if (o1.getAttendance().getOutcome() != null && o2.getAttendance().getOutcome() != null)
					{
						return o1.getAttendance().getOutcome().getText().toUpperCase().compareTo(o2.getAttendance().getOutcome().getText().toUpperCase()) * direction;
					}
				}

				if (o1.getAttendance() != null && o1.getAttendance().getOutcome() != null && (o2.getAttendance() == null || o2.getAttendance().getOutcome() == null))
				{
					return direction;
				}

				if (o2.getAttendance() != null && o2.getAttendance().getOutcome() != null && (o1.getAttendance() == null || o1.getAttendance().getOutcome() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.ED_SITE.equals(column))
			{
				if (o1.getEDLocation() != null && o2.getEDLocation() != null)
				{
					if (o1.getEDLocation().getName() != null && o2.getEDLocation().getName() != null)
					{
						return o1.getEDLocation().getName().toUpperCase().compareTo(o2.getEDLocation().getName().toUpperCase()) * direction;
					}
				}

				if (o1.getEDLocation() != null && o1.getEDLocation().getName() != null && (o2.getEDLocation() == null || o2.getEDLocation().getName() == null))
				{
					return direction;
				}

				if (o2.getEDLocation() != null && o2.getEDLocation().getName() != null && (o1.getEDLocation() == null || o1.getEDLocation().getName() == null))
				{
					return -1 * direction;
				}
				
			}
			else if(TrackingAreaColumn.HOSPITAL_NUMBER.equals(column))
			{
				String HN1 = getIdentifier(o1, PatIdType.HOSPNUM);
				String HN2 = getIdentifier(o2, PatIdType.HOSPNUM);
				
				if (HN1 != null && HN2 != null)
				{
					return HN1.toUpperCase().compareTo(HN2.toUpperCase()) * direction;
				}

				if (HN1 != null && HN2 == null)
				{
					return direction;
				}

				if (HN2 != null && HN1 == null)
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.NHS_NUMBER.equals(column))
			{
				String NHS1 = getIdentifier(o1, PatIdType.NHSN);
				String NHS2 = getIdentifier(o2, PatIdType.NHSN);
				
				if (NHS1 != null && NHS2 != null)
				{
					return NHS1.toUpperCase().compareTo(NHS2.toUpperCase()) * direction;
				}

				if (NHS1 != null && NHS2 == null)
				{
					return direction;
				}

				if (NHS2 != null && NHS1 == null)
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.PATIENT_ADDRESS_LINE_1.equals(column))
			{
				if (o1.getPatient().getAddress() != null && o2.getPatient().getAddress() != null)
				{
					if (o1.getPatient().getAddress().getLine1() != null && o2.getPatient().getAddress().getLine1() != null)
					{
						return o1.getPatient().getAddress().getLine1().toUpperCase().compareTo(o2.getPatient().getAddress().getLine1().toUpperCase()) * direction;
					}
				}

				if (o1.getPatient().getAddress() != null && o1.getPatient().getAddress().getLine1() != null && (o2.getPatient().getAddress() == null || o2.getPatient().getAddress().getLine1() == null))
				{
					return direction;
				}

				if (o2.getPatient().getAddress() != null && o2.getPatient().getAddress().getLine1() != null && (o1.getPatient().getAddress() == null || o1.getPatient().getAddress().getLine1() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.PATIENT_CURRENT_STATUS.equals(column))
			{
				if (o1.getCurrentStatus() != null && o2.getCurrentStatus() != null)
				{
					if (o1.getCurrentStatus().getStatus() != null && o2.getCurrentStatus().getStatus() != null)
					{
						return o1.getCurrentStatus().getStatus().getText().toUpperCase().compareTo(o2.getCurrentStatus().getStatus().getText().toUpperCase()) * direction;
					}
				}

				if (o1.getCurrentStatus() != null && o1.getCurrentStatus().getStatus() != null && (o2.getCurrentStatus() == null || o2.getCurrentStatus().getStatus() == null))
				{
					return direction;
				}

				if (o2.getCurrentStatus() != null && o2.getCurrentStatus().getStatus() != null && (o1.getCurrentStatus() == null || o1.getCurrentStatus().getStatus() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.PATIENT_FORENAME.equals(column))
			{
				if (o1.getPatient().getName() != null && o2.getPatient().getName() != null)
				{
					if (o1.getPatient().getName().getForename() != null && o2.getPatient().getName().getForename() != null)
					{
						return o1.getPatient().getName().getForename().toUpperCase().compareTo(o2.getPatient().getName().getForename().toUpperCase()) * direction;
					}
				}

				if (o1.getPatient().getName() != null && o1.getPatient().getName().getForename() != null && (o2.getPatient().getName() == null || o2.getPatient().getName().getForename() == null))
				{
					return direction;
				}

				if (o2.getPatient().getName() != null && o2.getPatient().getName().getForename() != null && (o1.getPatient().getName() == null || o1.getPatient().getName().getForename() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.PATIENT_GENDER.equals(column))
			{
				if (o1.getPatient() != null && o2.getPatient() != null)
				{
					if (o1.getPatient().getSex() != null && o2.getPatient().getSex() != null)
					{
						return o1.getPatient().getSex().getText().toUpperCase().compareTo(o2.getPatient().getSex().getText().toUpperCase()) * direction;
					}
				}

				if (o1.getPatient() != null && o1.getPatient().getSex() != null && (o2.getPatient() == null || o2.getPatient().getSex() == null))
				{
					return direction;
				}

				if (o2.getPatient() != null && o2.getPatient().getSex() != null && (o1.getPatient() == null || o1.getPatient().getSex() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.PATIENT_SURNAME.equals(column))
			{
				if (o1.getPatient().getName() != null && o2.getPatient().getName() != null)
				{
					if (o1.getPatient().getName().getSurname() != null && o2.getPatient().getName().getSurname() != null)
					{
						return o1.getPatient().getName().getSurname().toUpperCase().compareTo(o2.getPatient().getName().getSurname().toUpperCase()) * direction;
					}
				}

				if (o1.getPatient().getName() != null && o1.getPatient().getName().getSurname() != null && (o2.getPatient().getName() == null || o2.getPatient().getName().getSurname() == null))
				{
					return direction;
				}

				if (o2.getPatient().getName() != null && o2.getPatient().getName().getSurname() != null && (o1.getPatient().getName() == null || o1.getPatient().getName().getSurname() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.PATIENT_TITLE.equals(column))
			{
				if (o1.getPatient().getName() != null && o2.getPatient().getName() != null)
				{
					if (o1.getPatient().getName().getTitle() != null && o2.getPatient().getName().getTitle() != null)
					{
						return o1.getPatient().getName().getTitle().getText().toUpperCase().compareTo(o2.getPatient().getName().getTitle().getText().toUpperCase()) * direction;
					}
				}

				if (o1.getPatient().getName() != null && o1.getPatient().getName().getTitle() != null && (o2.getPatient().getName() == null || o2.getPatient().getName().getTitle() == null))
				{
					return direction;
				}

				if (o2.getPatient().getName() != null && o2.getPatient().getName().getTitle() != null && (o1.getPatient().getName() == null || o1.getPatient().getName().getTitle() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.PRESENTING_COMPLAINT.equals(column))
			{
				if (o1.getEpisode() != null && o2.getEpisode() != null)
				{
					if (o1.getEpisode().getPresentingComplaint() != null && o2.getEpisode().getPresentingComplaint() != null)
					{
						return o1.getEpisode().getPresentingComplaint().getText().toUpperCase().compareTo(o2.getEpisode().getPresentingComplaint().getText().toUpperCase()) * direction;
					}
				}

				if (o1.getEpisode() != null && o1.getEpisode().getPresentingComplaint() != null && (o2.getEpisode() == null || o2.getEpisode().getPresentingComplaint() == null))
				{
					return direction;
				}

				if (o2.getEpisode() != null && o2.getEpisode().getPresentingComplaint() != null && (o1.getEpisode() == null || o1.getEpisode().getPresentingComplaint() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.PRESENTING_PROBLEM.equals(column))
			{
				if (o1.getTriageDetails() != null && o2.getTriageDetails() != null)
				{
					if (o1.getTriageDetails().getMainPresentingProblem() != null && o2.getTriageDetails().getMainPresentingProblem() != null)
					{
						return o1.getTriageDetails().getMainPresentingProblem().getPatientProblem().toUpperCase().compareTo(o2.getTriageDetails().getMainPresentingProblem().getPatientProblem().toUpperCase()) * direction;
					}
				}

				if (o1.getTriageDetails() != null && o1.getTriageDetails().getMainPresentingProblem() != null && (o2.getTriageDetails() == null || o2.getTriageDetails().getMainPresentingProblem() == null))
				{
					return direction;
				}

				if (o2.getTriageDetails() != null && o2.getTriageDetails().getMainPresentingProblem() != null && (o1.getTriageDetails() == null || o1.getTriageDetails().getMainPresentingProblem() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.REFERRAL_SPECIALTY.equals(column))
			{
				if (o1.getCurrentReferral() != null && o2.getCurrentReferral() != null)
				{
					if (o1.getCurrentReferral().getSpecialty() != null && o2.getCurrentReferral().getSpecialty() != null)
					{
						return o1.getCurrentReferral().getSpecialty().getText().toUpperCase().compareTo(o2.getCurrentReferral().getSpecialty().getText().toUpperCase()) * direction;
					}
				}

				if (o1.getCurrentReferral() != null && o1.getCurrentReferral().getSpecialty() != null && (o2.getCurrentReferral() == null || o2.getCurrentReferral().getSpecialty() == null))
				{
					return direction;
				}

				if (o2.getCurrentReferral() != null && o2.getCurrentReferral().getSpecialty() != null && (o1.getCurrentReferral() == null || o1.getCurrentReferral().getSpecialty() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.TRACKING_ZONE.equals(column))
			{
				if (o1.getCurrentArea() != null && o2.getCurrentArea() != null)
				{
					if (o1.getCurrentArea().getAreaDisplayName() != null && o2.getCurrentArea().getAreaDisplayName() != null)
					{
						return o1.getCurrentArea().getAreaDisplayName().toUpperCase().compareTo(o2.getCurrentArea().getAreaDisplayName().toUpperCase()) * direction;
					}
				}

				if (o1.getCurrentArea() != null && o1.getCurrentArea().getAreaDisplayName() != null && (o2.getCurrentArea() == null || o2.getCurrentArea().getAreaDisplayName() == null))
				{
					return direction;
				}

				if (o2.getCurrentArea() != null && o2.getCurrentArea().getAreaDisplayName() != null && (o1.getCurrentArea() == null || o1.getCurrentArea().getAreaDisplayName() == null))
				{
					return -1 * direction;
				}
			}
			else if(TrackingAreaColumn.TRIAGE_PRIORITY.equals(column))
			{
				if (o1.getTriageDetails() != null && o2.getTriageDetails() != null)
				{
					if (o1.getTriageDetails().getCurrentTriagePriority() != null && o2.getTriageDetails().getCurrentTriagePriority() != null)
					{
						return o1.getTriageDetails().getCurrentTriagePriority().getText().toUpperCase().compareTo(o2.getTriageDetails().getCurrentTriagePriority().getText().toUpperCase()) * direction;
					}
				}

				if (o1.getTriageDetails() != null && o1.getTriageDetails().getCurrentTriagePriority() != null && (o2.getTriageDetails() == null || o2.getTriageDetails().getCurrentTriagePriority() == null))
				{
					return direction;
				}

				if (o2.getTriageDetails() != null && o2.getTriageDetails().getCurrentTriagePriority() != null && (o1.getTriageDetails() == null || o1.getTriageDetails().getCurrentTriagePriority() == null))
				{
					return -1 * direction;
				}
			}
			//WDEV-16816
			else if (TrackingAreaColumn.SEEN_BY_HCP_ALLOCATED_DATE_TIME.equals(column)) 
			{
				//WDEV-16816
				if (o1.getSeenBy() != null && o2.getSeenBy() != null)
				{
					if (o1.getSeenBy().getAllocatedDateTime() != null && o2.getSeenBy().getAllocatedDateTime() != null)
					{
						return o1.getSeenBy().getAllocatedDateTime().compareTo(o2.getSeenBy().getAllocatedDateTime()) * direction;
					}
				}

				if (o1.getSeenBy() != null && o1.getSeenBy().getAllocatedDateTime() != null && (o2.getSeenBy() == null || o2.getSeenBy().getAllocatedDateTime() == null))
				{
					return direction;
				}

				if (o2.getSeenBy() != null && o2.getSeenBy().getAllocatedDateTime() != null && (o1.getSeenBy() == null || o1.getSeenBy().getAllocatedDateTime() == null))
				{
					return -1 * direction;
				}
			}
			//WDEV-16816
			else if (TrackingAreaColumn.SEEN_BY_HCP_SEEN_DATE_TIME.equals(column))
			{
				//WDEV-16816
				if (o1.getSeenBy() != null && o2.getSeenBy() != null)
				{
					if (o1.getSeenBy().getSeenDateTime() != null && o2.getSeenBy().getSeenDateTime() != null)
					{
						return o1.getSeenBy().getSeenDateTime().compareTo(o2.getSeenBy().getSeenDateTime()) * direction;
					}
				}

				if (o1.getSeenBy() != null && o1.getSeenBy().getSeenDateTime() != null && (o2.getSeenBy() == null || o2.getSeenBy().getSeenDateTime() == null))
				{
					return direction;
				}

				if (o2.getSeenBy() != null && o2.getSeenBy().getSeenDateTime() != null && (o1.getSeenBy() == null || o1.getSeenBy().getSeenDateTime() == null))
				{
					return -1 * direction;
				}
			}
			/*//WDEV-16816
			else if (TrackingAreaColumn.ALLOCATED_NURSE_DATE_TIME.equals(column))
			{
				
				if (o1.getCurrentAllocatedNurse() != null && o2.getCurrentAllocatedNurse() != null)
				{
					if (o1.getCurrentAllocatedNurse().getAllocatedDateTime() != null && o2.getCurrentAllocatedNurse().getAllocatedDateTime() != null)
					{
						return o1.getCurrentAllocatedNurse().getAllocatedDateTime().compareTo(o2.getCurrentAllocatedNurse().getAllocatedDateTime()) * direction;
					}
				}

				if (o1.getCurrentAllocatedNurse() != null && o1.getCurrentAllocatedNurse().getAllocatedDateTime() != null && (o2.getCurrentAllocatedNurse() == null || o2.getCurrentAllocatedNurse().getAllocatedDateTime() == null))
				{
					return direction;
				}

				if (o2.getCurrentAllocatedNurse() != null && o2.getCurrentAllocatedNurse().getAllocatedDateTime() != null && (o1.getCurrentAllocatedNurse() == null || o1.getCurrentAllocatedNurse().getAllocatedDateTime() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.ALLOCATED_NURSE_SEEN_DATE_TIME.equals(column))
			{
				
				if (o1.getCurrentAllocatedNurse() != null && o2.getCurrentAllocatedNurse() != null)
				{
					if (o1.getCurrentAllocatedNurse().getSeenDateTime() != null && o2.getCurrentAllocatedNurse().getSeenDateTime() != null)
					{
						return o1.getCurrentAllocatedNurse().getSeenDateTime().compareTo(o2.getCurrentAllocatedNurse().getSeenDateTime()) * direction;
					}
				}

				if (o1.getCurrentAllocatedNurse() != null && o1.getCurrentAllocatedNurse().getSeenDateTime() != null && (o2.getCurrentAllocatedNurse() == null || o2.getCurrentAllocatedNurse().getSeenDateTime() == null))
				{
					return direction;
				}

				if (o2.getCurrentAllocatedNurse() != null && o2.getCurrentAllocatedNurse().getSeenDateTime() != null && (o1.getCurrentAllocatedNurse() == null || o1.getCurrentAllocatedNurse().getSeenDateTime() == null))
				{
					return -1 * direction;
				}
			}
			*/
			else if (TrackingAreaColumn.ARRIVAL_DATE_TIME.equals(column))
			{
				
				if (o1.getAttendance() != null && o2.getAttendance() != null)
				{
					if (o1.getAttendance().getArrivalDateTime() != null && o2.getAttendance().getArrivalDateTime() != null)
					{
						return o1.getAttendance().getArrivalDateTime().compareTo(o2.getAttendance().getArrivalDateTime()) * direction;
					}
				}

				if (o1.getAttendance() != null && o1.getAttendance().getArrivalDateTime() != null && (o2.getAttendance() == null || o2.getAttendance().getArrivalDateTime() == null))
				{
					return direction;
				}

				if (o2.getAttendance() != null && o2.getAttendance().getArrivalDateTime() != null && (o1.getAttendance() == null || o1.getAttendance().getArrivalDateTime() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.ATTENDANCE_ID.equals(column))
			{
				
				if (o1.getAttendance() != null && o1.getAttendance().getID_EmergencyAttendance() != null && o2.getAttendance() != null && o2.getAttendance().getID_EmergencyAttendance() != null)
				{
					return o1.getAttendance().getID_EmergencyAttendance().compareTo(o2.getAttendance().getID_EmergencyAttendance()) * direction;
				}

				if (o1.getAttendance() != null && o1.getAttendance().getID_EmergencyAttendance() != null && (o2.getAttendance() == null || o2.getAttendance().getID_EmergencyAttendance() == null))
				{
					return direction;
				}

				if (o2.getAttendance() != null && o2.getAttendance().getID_EmergencyAttendance() != null && (o1.getAttendance() == null || o1.getAttendance().getID_EmergencyAttendance() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.DISCHARGE_DATE_AND_TIME.equals(column))
			{
				
				if (o1.getAttendance() != null && o2.getAttendance() != null)
				{
					if (o1.getAttendance().getDischargeDateTime() != null && o2.getAttendance().getDischargeDateTime() != null)
					{
						return o1.getAttendance().getDischargeDateTime().compareTo(o2.getAttendance().getDischargeDateTime()) * direction;
					}
				}

				if (o1.getAttendance() != null && o1.getAttendance().getDischargeDateTime() != null && (o2.getAttendance() == null || o2.getAttendance().getDischargeDateTime() == null))
				{
					return direction;
				}

				if (o2.getAttendance() != null && o2.getAttendance().getDischargeDateTime() != null && (o1.getAttendance() == null || o1.getAttendance().getDischargeDateTime() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.EPISODE_ID.equals(column))
			{
				
				if (o1.getEpisode() != null && o1.getEpisode().getID_EmergencyEpisode() != null && o2.getEpisode() != null && o2.getEpisode().getID_EmergencyEpisode() != null)
				{
					return o1.getEpisode().getID_EmergencyEpisode().compareTo(o2.getEpisode().getID_EmergencyEpisode()) * direction;
				}

				if (o1.getEpisode() != null && o1.getEpisode().getID_EmergencyEpisode() != null && (o2.getEpisode() == null || o2.getEpisode().getID_EmergencyEpisode() == null))
				{
					return direction;
				}

				if (o2.getEpisode() != null && o2.getEpisode().getID_EmergencyEpisode() != null && (o1.getEpisode() == null || o1.getEpisode().getID_EmergencyEpisode() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.INJURY_DATE_TIME.equals(column))
			{
				
				if (o1.getEpisode() != null && o2.getEpisode() != null)
				{
					if (o1.getEpisode().getInjuryDateTime() != null && o2.getEpisode().getInjuryDateTime() != null)
					{
						return o1.getEpisode().getInjuryDateTime().compareTo(o2.getEpisode().getInjuryDateTime()) * direction;
					}
				}

				if (o1.getEpisode() != null && o1.getEpisode().getInjuryDateTime() != null && (o2.getEpisode() == null || o2.getEpisode().getInjuryDateTime() == null))
				{
					return direction;
				}

				if (o2.getEpisode() != null && o2.getEpisode().getInjuryDateTime() != null && (o1.getEpisode() == null || o1.getEpisode().getInjuryDateTime() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.LAST_MOVEMENT_DATE_AND_TIME.equals(column))
			{
				
				if (o1.getLastMovementDateInMinutes() != null && o2.getLastMovementDateInMinutes() != null)
				{
					return o1.getLastMovementDateInMinutes().compareTo(o2.getLastMovementDateInMinutes()) * direction;
				}

				if (o1.getLastMovementDateInMinutes() != null && o2.getLastMovementDateInMinutes() == null)
				{
					return direction;
				}

				if (o2.getLastMovementDateInMinutes() != null && o1.getLastMovementDateInMinutes() == null)
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.LENGTH_OF_STAY.equals(column))
			{
				
				if (o1.getAttendance() != null && o1.getAttendance().getLengthOfStay() != null && o2.getAttendance() != null && o2.getAttendance().getLengthOfStay() != null)
				{
					return o1.getAttendance().getLengthOfStay().compareTo(o2.getAttendance().getLengthOfStay()) * direction;
				}

				if (o1.getAttendance() != null && o1.getAttendance().getLengthOfStay() != null && (o2.getAttendance() == null || o2.getAttendance().getLengthOfStay() == null))
				{
					return direction;
				}

				if (o2.getAttendance() != null && o2.getAttendance().getLengthOfStay() != null && (o1.getAttendance() == null || o1.getAttendance().getLengthOfStay() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.PATIENT_AGE.equals(column))
			{
				
				if (o1.getPatient() != null && o1.getPatient().getAge() != null && o2.getPatient() != null && o2.getPatient().getAge() != null)
				{
					return o1.getPatient().getAge().compareTo(o2.getPatient().getAge()) * direction;
				}

				if (o1.getPatient() != null && o1.getPatient().getAge() != null && (o2.getPatient() == null || o2.getPatient().getAge() == null))
				{
					return direction;
				}

				if (o2.getPatient() != null && o2.getPatient().getAge() != null && (o1.getPatient() == null || o1.getPatient().getAge() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.PATIENT_DOB.equals(column))
			{
				
				if (o1.getPatient() != null && o1.getPatient().getDob() != null && o2.getPatient() != null && o2.getPatient().getDob() != null)
				{
					return o1.getPatient().getDob().compareTo(o2.getPatient().getDob()) * direction;
				}

				if (o1.getPatient() != null && o1.getPatient().getDob() != null && (o2.getPatient() == null || o2.getPatient().getDob() == null))
				{
					return direction;
				}

				if (o2.getPatient() != null && o2.getPatient().getDob() != null && (o1.getPatient() == null || o1.getPatient().getDob() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.PATIENT_DOD.equals(column))
			{
				
				if (o1.getPatient() != null && o1.getPatient().getDod() != null && o2.getPatient() != null && o2.getPatient().getDod() != null)
				{
					return o1.getPatient().getDod().compareTo(o2.getPatient().getDod()) * direction;
				}

				if (o1.getPatient() != null && o1.getPatient().getDod() != null && (o2.getPatient() == null || o2.getPatient().getDod() == null))
				{
					return direction;
				}

				if (o2.getPatient() != null && o2.getPatient().getDod() != null && (o1.getPatient() == null || o1.getPatient().getDod() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.REFERRAL_DATE_AND_TIME.equals(column))
			{
				
				if (o1.getCurrentReferral() != null && o2.getCurrentReferral() != null)
				{
					if (o1.getCurrentReferral().getReferredDateTime() != null && o2.getCurrentReferral().getReferredDateTime() != null)
					{
						return o1.getCurrentReferral().getReferredDateTime().compareTo(o2.getCurrentReferral().getReferredDateTime()) * direction;
					}
				}

				if (o1.getCurrentReferral() != null && o1.getCurrentReferral().getReferredDateTime() != null && (o2.getCurrentReferral() == null || o2.getCurrentReferral().getReferredDateTime() == null))
				{
					return direction;
				}

				if (o2.getCurrentReferral() != null && o2.getCurrentReferral().getReferredDateTime() != null && (o1.getCurrentReferral() == null || o1.getCurrentReferral().getReferredDateTime() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.REFERRAL_SEEN_DATE_AND_TIME.equals(column))
			{
				
				if (o1.getCurrentReferral() != null && o2.getCurrentReferral() != null)
				{
					if (o1.getCurrentReferral().getSeenDateTime() != null && o2.getCurrentReferral().getSeenDateTime() != null)
					{
						return o1.getCurrentReferral().getSeenDateTime().compareTo(o2.getCurrentReferral().getSeenDateTime()) * direction;
					}
				}

				if (o1.getCurrentReferral() != null && o1.getCurrentReferral().getSeenDateTime() != null && (o2.getCurrentReferral() == null || o2.getCurrentReferral().getSeenDateTime() == null))
				{
					return direction;
				}

				if (o2.getCurrentReferral() != null && o2.getCurrentReferral().getSeenDateTime() != null && (o1.getCurrentReferral() == null || o1.getCurrentReferral().getSeenDateTime() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.REGISTRATION_DATE_TIME.equals(column))
			{
				
				if (o1.getAttendance() != null && o2.getAttendance() != null)
				{
					if (o1.getAttendance().getRegistrationDateTime() != null && o2.getAttendance().getRegistrationDateTime() != null)
					{
						return o1.getAttendance().getRegistrationDateTime().compareTo(o2.getAttendance().getRegistrationDateTime()) * direction;
					}
				}

				if (o1.getAttendance() != null && o1.getAttendance().getRegistrationDateTime() != null && (o2.getAttendance() == null || o2.getAttendance().getRegistrationDateTime() == null))
				{
					return direction;
				}

				if (o2.getAttendance() != null && o2.getAttendance().getRegistrationDateTime() != null && (o1.getAttendance() == null || o1.getAttendance().getRegistrationDateTime() == null))
				{
					return -1 * direction;
				}
			}
			else if (TrackingAreaColumn.TRIAGE_DATE_AND_TIME.equals(column))
			{
				
				if (o1.getTriageDetails() != null && o2.getTriageDetails() != null)
				{
					if (o1.getTriageDetails().getTriageStartDateTime() != null && o2.getTriageDetails().getTriageStartDateTime() != null)
					{
						return o1.getTriageDetails().getTriageStartDateTime().compareTo(o2.getTriageDetails().getTriageStartDateTime()) * direction;
					}
				}

				if (o1.getTriageDetails() != null && o1.getTriageDetails().getTriageStartDateTime() != null && (o2.getTriageDetails() == null || o2.getTriageDetails().getTriageStartDateTime() == null))
				{
					return direction;
				}

				if (o2.getTriageDetails() != null && o2.getTriageDetails().getTriageStartDateTime() != null && (o1.getTriageDetails() == null || o1.getTriageDetails().getTriageStartDateTime() == null))
				{
					return -1 * direction;
				}
			}
			//WDEV-17748
			else if (TrackingAreaColumn.DNA.equals(column))
			{
				if (o1.getCurrentDNW() != null && o2.getCurrentDNW() != null)
				{
					if (o1.getCurrentDNW().getCurrentStatus() != null && o1.getCurrentDNW().getCurrentStatus().getCalledAmount() != null && o2.getCurrentDNW().getCurrentStatus() != null && o2.getCurrentDNW().getCurrentStatus().getCalledAmount() != null)
					{
						return o1.getCurrentDNW().getCurrentStatus().getCalledAmount().compareTo(o2.getCurrentDNW().getCurrentStatus().getCalledAmount()) * direction;
					}
				}

					if (o1.getCurrentDNW() != null && o1.getCurrentDNW().getCurrentStatus() != null && o1.getCurrentDNW().getCurrentStatus().getCalledAmount() != null && (o2.getCurrentDNW() == null || o2.getCurrentDNW().getCurrentStatus() == null || o2.getCurrentDNW().getCurrentStatus().getCalledAmount() == null))
					{
						return direction;
					}

					if (o2.getCurrentDNW() != null && o2.getCurrentDNW().getCurrentStatus() != null && o2.getCurrentDNW().getCurrentStatus().getCalledAmount() != null && (o1.getCurrentDNW() == null || o1.getCurrentDNW().getCurrentStatus() == null || o1.getCurrentDNW().getCurrentStatus().getCalledAmount() == null))
					{
						return -1 * direction;
					}
			}
			else if (TrackingAreaColumn.BED_STATUS.equals(column))
			{
				if (o1.getBedAvailability() != null && o2.getBedAvailability() != null)
				{
					Integer val1, val2;
					
					if (o1.getBedAvailability().getAvailableDateTime() != null)
					{
						val1 = 1;
					}
					else if (o1.getBedAvailability().getAwaitingDateTime() != null)
					{
						val1 = 2;
					}
					else 
						val1 = 0;
					
					if (o2.getBedAvailability().getAvailableDateTime() != null)
					{
						val2 = 1;
					}
					else if (o2.getBedAvailability().getAwaitingDateTime() != null)
					{
						val2 = 2;
					}
					else 
						val2 = 0;
					
					if (val1 != 0 && val2 != 0)
					{
						return val1.compareTo(val2) * direction;
					}

					if (val1 != 0 && val2 == 0)
					{
						return direction;
					}

					if (val2 != 0 && val1 == 0)
					{
						return -1 * direction;
					}	
				}
			}

			return 0;

		}

	}

	private static final long serialVersionUID = 1L;

	private enum TriagePriorityEnum //WDEV-17208
	{ 
		Priority1(TriagePriority.PRIORITY1, 1),
		Priority2(TriagePriority.PRIORITY2, 2),
		Priority3(TriagePriority.PRIORITY3, 3),
		Priority4(TriagePriority.PRIORITY4, 4),
		Priority5(TriagePriority.PRIORITY5, 5),
		SkippedTriage(TriagePriority.SKIPPED_TRIAGE, 7);
		
		private TriagePriority index;
		private Integer order;
		
		TriagePriorityEnum(TriagePriority index,Integer order)
		{
			this.index = index;
			this.order = order;
		}
		
		public TriagePriority getIndex()
		{
			return index;
		}
		
		public Integer getOrder()
		{
			return order;
		}
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	private void open()
	{
		populateEDs(form.chkAllSites().getValue());
		populateTrackingGrid();
		updateControlsState();
	}

	private int populateTrackingCount(ILocation currentLocation, grdTrackingCountRow row) 
	{
		if(row == null)
		{
			form.grdTrackingCount().getRows().clear();
		}
		else
		{
			row.getRows().clear();
		}
		
		if(currentLocation == null)
			return 0;
		
		TrackingCountVoCollection trackingAreaColl = domain.listTrackingAreas(currentLocation);
		
		if(trackingAreaColl == null)
			return 0;
		
		TrackingCountVo overallTrackingCount = null;
		TrackingCountVo registrationTrackingCount = null;
		
		int totalNumberOfPatients = 0;
		
		for(TrackingCountVo trackingArea : trackingAreaColl)
		{
			if(trackingArea == null)
				continue;
			
			if(trackingArea.getTrackingAreaIsNotNull() && Boolean.TRUE.equals(trackingArea.getTrackingArea().getIsRegistrationArea()))
			{
				registrationTrackingCount = trackingArea;
				continue;
			}
			
			if(trackingArea.getTrackingAreaIsNotNull() && Boolean.TRUE.equals(trackingArea.getTrackingArea().getIsOverallView()))
			{
				overallTrackingCount = trackingArea;
				continue;
			}
			
			totalNumberOfPatients += addTrackingArea(trackingArea, row);
		}
		
		//totalNumberOfPatients += addTrackingArea(registrationTrackingCount, row);//wdev-17306
		
		if(row == null)
		{
			overallTrackingCount.setNumberOfPatiens(totalNumberOfPatients);
			addTrackingArea(overallTrackingCount, row);
		}
		else
		{
			row.setColNumberOfPatients(totalNumberOfPatients);
		}
		
		form.grdTrackingCount().setValue(form.getLocalContext().getSelectedTrackingArea());
		
		return totalNumberOfPatients;
	}

	private int addTrackingArea(TrackingCountVo trackingArea, grdTrackingCountRow row) 
	{
		if(trackingArea == null)
			return 0;
		
		grdTrackingCountRow childRow = null;
		
		if(row == null)
		{
			childRow = form.grdTrackingCount().getRows().newRow();
		}
		else
		{
			childRow = row.getRows().newRow();
		}
		
		childRow.setColArea(trackingArea.getTrackingArea().getAreaDisplayName());
		childRow.setTooltipForColArea(trackingArea.getTrackingArea().getAreaDisplayName());//WDEV-17301
		childRow.setColNumberOfPatients(trackingArea.getNumberOfPatiens());
		
		childRow.setValue(trackingArea.getTrackingArea());
		
		/*if(trackingArea.getTrackingArea() != null && Boolean.TRUE.equals(trackingArea.getTrackingArea().getIsOverallView()))
		{
			childRow.setSelectable(false);
		}*/
		
		return trackingArea.getNumberOfPatiensIsNotNull() ? trackingArea.getNumberOfPatiens() : 0;
	}

	private void initialize()
	{
		ILocation currentLocation = engine.getCurrentLocation();
		if(currentLocation != null)
		{
			form.getLocalContext().setAttendanceKPIConfig(domain.getAttendanceKPIConfig(currentLocation));
		}
		
		Object user = domain.getHcpLiteUser();
		if(user instanceof HcpLiteVo)
		{
			HcpLiteVo hcp = (HcpLiteVo) user;
			form.getLocalContext().setLoggedHcpRef(hcp);
			form.getLocalContext().setLoggedMosRef(hcp.getMos());
		}
		else
		{
			Object mos = domain.getMosUser();
			
			if(mos instanceof MemberOfStaffRefVo)
			{
				form.getLocalContext().setLoggedMosRef((MemberOfStaffRefVo) mos);
			}
		}
		
		listDeniedActionForCurrentUser(); //WDEV-18338 moved here (unnecessary call in updateControlsState()
		initializeButtons();
				
		form.pnlTrackPatients().setValue("Selecting a tracking area will list patients for that area");
		form.GroupView().setValue(GroupViewEnumeration.rdoViewAll);
		
		initializeTimers();
		form.getLocalContext().setCurentAreaOfPatient(null);		//wdev-16067
		
		//WDEV-17966
		if (form.getGlobalContext().Emergency.getTrackingPublicArea()==null)
		{
			form.getGlobalContext().Emergency.setTrackingPublicArea(false);
		}
	}

	private void initializeTimers() 
	{
		form.getTimers().getAreaCountRefrresh().setEnabled(true);
		
		ILocation currentLocation = engine.getCurrentLocation();
		if(currentLocation == null)
			return;
		
		TrackingConfigurationForTrackingVo areaCountRefreshRate = domain.getTrackingConfig(currentLocation);
		if(areaCountRefreshRate != null && areaCountRefreshRate.getAreaCountRefreshRate() != null)
		{
			form.getTimers().getAreaCountRefrresh().setInterval(areaCountRefreshRate.getAreaCountRefreshRate());
		}
		
		//form.getTimers().getPatientRefresh().setEnabled(false);
	}

	private void initializeButtons() 
	{
		form.btnEventHistory().setImage(form.getImages().Emergency.EVENTHISTORY16);	//wdev-17329
		form.btnMove().setImage(form.getImages().Emergency.MOVE16);					//wdev-17329	
		form.btnOrder().setImage(form.getImages().Emergency.ORDER16);				//wdev-17329
		form.btnResult().setImage(form.getImages().Emergency.RESULTS16);			//wdev-17329
		form.btnPatStatus().setImage(form.getImages().Emergency.PATIENTSTATUS16);	//wdev-17329	
		form.btnRefer().setImage(form.getImages().Emergency.REFERTO16);				//wdev-17329
		form.btnRefresh().setImage(form.getImages().Emergency.REFRESH16);			//wdev-17329	
		form.btnTransfer().setImage(form.getImages().Emergency.TransferEnabled16);	//wdev-17329
		form.btnWhiteBoard().setImage(form.getImages().Emergency.WhiteBoardEnabled16);//wdev-17329
		form.btnXray().setImage(form.getImages().Emergency.XRAY16);					//wdev-17329
		form.btnDNWAdd().setImage(form.getImages().Emergency.DNWPLUS16);			//wdev-17329	
		form.btnDNWMinus().setImage(form.getImages().Emergency.DNWMINUS16);			//wdev-17329
		form.btnViewHistory().setImage((form.getImages().Emergency.VIEWHISTORY16));	//wdev-17329
		form.btnSeenCompleteHCP().setImage(form.getImages().Emergency.SEENCOMPLETE16);	//wdev-17229,//wdev-17329
		form.btnDTA().setImage(form.getImages().Emergency.DTA16);	//wdev-17229
		form.btnAllocatedCubicle().setImage(form.getImages().Emergency.ALLOCATECUBICLE16);	//wdev-17229
		form.btnAssessmentDetails().setImage(form.getImages().Emergency.ASSESSMNTDETAILS16);	//wdev-17229
		form.imbFormLayout().setTooltip("Press this button to maximize the current form");//WDEV-17864
	}

	private void setMaximizeScreenDefaults()
	{
		form.imbFormLayout().setTooltip("Press this button to minimize the current form and display the navigation");
		form.imbFormLayout().setEnabledImage(form.getImages().Core.Minimize);
		engine.setCurrentLayoutState(UILayoutState.FULLSCREEN);
	}


	@Override
	protected void onBtnReferClick() throws PresentationLogicException
	{
		//engine.open(form.getForms().Emergency.ReferralToSpecialty);
		engine.open(form.getForms().Emergency.EDReferralToSpecialtyDialog);//WDEV-16777
	}

	@Override
	protected void onImbFormLayoutClick() throws PresentationLogicException
	{
		if (UILayoutState.FULLSCREEN.equals(engine.getCurrentLayoutState()))
		{
			setMinimizeScreenDefaults();
			return;
		}
		
		setMaximizeScreenDefaults();	
	}

	private void setMinimizeScreenDefaults()
	{
		form.imbFormLayout().setTooltip("Press this button to maximize the current form");
		form.imbFormLayout().setEnabledImage(form.getImages().Core.Maximize);
		engine.setCurrentLayoutState(UILayoutState.DEFAULT);
	}

	@Override
	protected void onBtnWhiteBoardClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.EDWhiteBoardDialog);//WDEV-17631
	}

	@Override
	protected void onBtnXrayClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.SendToXRay);		
	}

	@Override
	protected void onGrdTrackingCountSelectionChanged()	throws PresentationLogicException 
	{
		trackingAreaSelectionChanged();
		updateControlsState();
	}

	private void trackingAreaSelectionChanged() 
	{
		if(!(form.grdTrackingCount().getValue() instanceof TrackingAreaForTrackingVo))
			return;
		
		if(form.chkAllSites().getValue())
		{
			if(form.grdTrackingCount().getSelectedRow() != null && form.grdTrackingCount().getSelectedRow().getParentRow() != null)
			{
				if(form.grdTrackingCount().getSelectedRow().getParentRow().getValue() instanceof LocationLiteVo)
				{
					form.getLocalContext().setAttendanceKPIConfig(domain.getAttendanceKPIConfig((LocationLiteVo) form.grdTrackingCount().getSelectedRow().getParentRow().getValue())); 
				}
			}
		}
		
		form.getLocalContext().setSelectedTrackingArea((TrackingAreaForTrackingVo) form.grdTrackingCount().getValue());
		form.getLocalContext().setSelectedTrackingPatient(null);
		
		form.GroupView().setValue(GroupViewEnumeration.rdoViewAll);
		form.GroupDisplay().setValue(GroupDisplayEnumeration.rdoCurrentlyInDept);//WDEV-16987
		
		form.pnlTrackPatients().setValue("Patients currently in Area: " + ((TrackingAreaForTrackingVo) form.grdTrackingCount().getValue()).getAreaDisplayName());
		
		populateTrackingGrid();
		
		//initializePatientRefreshTimer();		//wdev-17613
	}

	/*private void initializePatientRefreshTimer() 
	{
		if(form.getLocalContext().getSelectedTrackingArea() == null)
			return;
		
		if(form.getLocalContext().getSelectedTrackingArea().getPatientRefreshRate() != null)
		{
			form.getTimers().getPatientRefresh().setInterval(form.getLocalContext().getSelectedTrackingArea().getPatientRefreshRate());
		}
		
		form.getTimers().getPatientRefresh().setEnabled(true);
	}*/

	private void initializeTrackingGrid() 
	{
		form.dyngrdTrack().clear();
		form.dyngrdTrack().setSelectable(true);
		
		if(!(form.grdTrackingCount().getValue() instanceof TrackingAreaForTrackingVo) || ((TrackingAreaForTrackingVo) form.grdTrackingCount().getValue()).getColumns() == null)
			return;
		
		for(ColumnDetailVo column : ((TrackingAreaForTrackingVo)form.grdTrackingCount().getValue()).getColumns())
		{
			addTrackingColumn(column);
		}
	}

	private void addTrackingColumn(ColumnDetailVo column) 
	{
		if(column == null || column.getColHeader() == null)
			return;
		
		DynamicGridColumn gridColumn = form.dyngrdTrack().getColumns().newColumn(column.getColHeader());
		gridColumn.setIdentifier(column.getColumn());
		gridColumn.setWidth(column.getColWidth());
		
		//WDEV-15819
		if (! isImageColumn(gridColumn)) //image columns will not have the sort option
		{
			gridColumn.setSortMode(SortMode.MANUAL);
		}
		

	}

	//WDEV-15819
	private boolean isImageColumn(DynamicGridColumn column)
	{
		if(TrackingAreaColumn.ALERTS.equals(column.getIdentifier()))
		{
			return true;
		}
		
		if(TrackingAreaColumn.PRIMARY_CARE.equals(column.getIdentifier()))
		{
			return true;
		}
		
		if(TrackingAreaColumn.UNKNOWN_PATIENT.equals(column.getIdentifier()))
		{
			return true;
		}
		
		if(TrackingAreaColumn.TRANSFER.equals(column.getIdentifier())) //wdev-16867  
		{
			return true;
		}
		
		return false;
	}

	private void populateTrackingGrid() 
	{
		initializeTrackingGrid();
		
		clearContext();
		
		//WDEV-15971
		clearPriorityLocalContexts();
		
		if(!(form.grdTrackingCount().getValue() instanceof TrackingAreaForTrackingVo))
			return;
		
		boolean isViewMyAllocated = false;
		if(GroupViewEnumeration.rdoViewMyAllocated.equals(form.GroupView().getValue()))//WDEV-16987
		{
			isViewMyAllocated = true;
			if(form.getLocalContext().getLoggedHcpRef() == null)
				return;
		}
		TrackingAreaForTrackingVo trackingArea = (TrackingAreaForTrackingVo) form.grdTrackingCount().getValue();
		
		//WDEV-17259
		Boolean wasPatientStatusColumnAdded =  Boolean.FALSE; 
		
		for (int x = 0; x < trackingArea.getColumns().size(); x++)
		{
			if (TrackingAreaColumn.PATIENT_CURRENT_STATUS.equals(trackingArea.getColumns().get(x).getColumn()))
				wasPatientStatusColumnAdded = Boolean.TRUE;
		}
		
		//create a dummy column so the the domain will return values for the CurrentStatus.Status field
		if (Boolean.FALSE.equals(wasPatientStatusColumnAdded))
		{
			ColumnDetailVo dummyColumn = new ColumnDetailVo(); 
			dummyColumn.setColumn(TrackingAreaColumn.PATIENT_CURRENT_STATUS);
			trackingArea.getColumns().add(dummyColumn);
		}
		
		TrackingVoCollection trackingPatients = domain.listTrackingPatients(trackingArea, Boolean.TRUE.equals(isViewMyAllocated) ? form.getLocalContext().getLoggedHcpRef() : null, null, GroupViewEnumeration.rdoViewUnallocated.equals(form.GroupView().getValue()), GroupDisplayEnumeration.rdoCurrentlyInDept.equals(form.GroupDisplay().getValue()),GroupDisplayEnumeration.rdoDeparted.equals(form.GroupDisplay().getValue()),GroupDisplayEnumeration.rdoCurrentAndDeparted.equals(form.GroupDisplay().getValue()));//WDEV-16987
		
		form.getLocalContext().setTrackingPatients(trackingPatients);
		
		if(trackingPatients == null)
			return;
		
		//WDEV-16534
		if (form.getLocalContext().getSortOrder() != null)
		{
			trackingPatients.sort(new TrackingPatientsComparator((TrackingAreaColumn) form.getLocalContext().getSortOrder().getColumnType(), form.getLocalContext().getSortOrder().getSortOrder()));
		}
		else
			trackingPatients.sort(new TrackingComparator());
		
		for(TrackingVo trackingPatient : trackingPatients)
		{
			addTrackingPatientRow(trackingPatient);
		}
		
		form.dyngrdTrack().setValue(form.getLocalContext().getSelectedTrackingPatient());
		
		trackingSelectionChanged();
		
		populatePriorityLabels();//WDEV-15971
	}

	
	//WDEV-15971
	private void populatePriorityLabels()
	{
		populatePriorityImages();
		
		form.lblP1().setValue(": "+form.getLocalContext().getNoPatientsPriority1());
		form.lblP2().setValue(": "+form.getLocalContext().getNoPatientsPriority2());
		form.lblP3().setValue(": "+form.getLocalContext().getNoPatientsPriority3());
		form.lblP4().setValue(": "+form.getLocalContext().getNoPatientsPriority4());
		form.lblP5().setValue(": "+form.getLocalContext().getNoPatientsPriority5());
		form.lblST().setValue(": "+form.getLocalContext().getNoPatientsSkippedTriage());//WDEV-16987
	}

	//WDEV-15971
	private void populatePriorityImages()
	{
		form.imgP1().setValue(form.getImages().Emergency.Triage_Priority_P1);
		form.imgP2().setValue(form.getImages().Emergency.Triage_Priority_P2);
		form.imgP3().setValue(form.getImages().Emergency.Triage_Priority_P3);
		form.imgP4().setValue(form.getImages().Emergency.Triage_Priority_P4);
		form.imgP5().setValue(form.getImages().Emergency.Triage_Priority_P5);
		form.imgST().setValue(form.getImages().Emergency.Triage_Priority_SkippedTriage);//WDEV-16987
	}

	//WDEV-15971
	private void clearPriorityLocalContexts()
	{
		form.lblP1().setValue(null);
		form.lblP2().setValue(null);
		form.lblP3().setValue(null);
		form.lblP4().setValue(null);
		form.lblP5().setValue(null);
		form.lblST().setValue(null);//WDEV-16987
		
		form.getLocalContext().setNoPatientsPriority1(0);
		form.getLocalContext().setNoPatientsPriority2(0);
		form.getLocalContext().setNoPatientsPriority3(0);
		form.getLocalContext().setNoPatientsPriority4(0);
		form.getLocalContext().setNoPatientsPriority5(0);
		form.getLocalContext().setNoPatientsSkippedTriage(0);//WDEV-16987
		
		
	}

	private void addTrackingPatientRow(TrackingVo trackingPatient) 
	{
		if(trackingPatient == null)
			return;
		
		boolean hasTriagePriority = false;
		if(trackingPatient.getTriageDetails() != null && trackingPatient.getTriageDetails().getCurrentTriagePriority() != null)
		{
			hasTriagePriority = true;
		}
		
		DynamicGridRow row = form.dyngrdTrack().getRows().newRow();
		row.setValue(trackingPatient);
		
		DynamicGridCell cell = null;
		
		for(int i=0; i<form.dyngrdTrack().getColumns().size(); i++)
		{
			DynamicGridColumn column = form.dyngrdTrack().getColumns().get(i);
	
			if(column.getIdentifier() == null)
				continue;
			
			if(TrackingAreaColumn.ALERTS.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
				cell.setValue(trackingPatient.getPatient() != null && Boolean.TRUE.equals(trackingPatient.getPatient().getHasAlerts()) ? form.getImages().Core.Alert_RedTriangle2 : null);
				
				if(trackingPatient.getPatient() != null && Boolean.TRUE.equals(trackingPatient.getPatient().getHasAlerts()))
				{
					cell.setTooltip("The patient has alerts");
				}
			}
			//wdev-16867
			else if( TrackingAreaColumn.TRANSFER.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
				cell.setValue(trackingPatient.getCurrentTransferRecordIsNotNull() ? form.getImages().Emergency.Ambulance20 : null);
				
			}
			//WDEV-16816
			else if(TrackingAreaColumn.SEEN_BY_HCP.equals(column.getIdentifier()))
			{			
				if(Boolean.TRUE.equals(trackingPatient.getIsDischarged()))
				{
					cell = row.getCells().newCell(column, DynamicCellType.STRING);
					cell.setValue((trackingPatient.getSeenBy() != null && trackingPatient.getSeenBy().getAllocatedMedic() != null) ? trackingPatient.getSeenBy().getAllocatedMedic().toString()  : ((trackingPatient.getSeenBy() != null && trackingPatient.getSeenBy().getAllocatedNurse() != null) ? trackingPatient.getSeenBy().getAllocatedNurse().toString()  : null)); //WDEV-16816 ////WDEV-16987
				}
				else
				{
					cell = row.getCells().newCell(column, DynamicCellType.BUTTON);

					cell.setButtonText((trackingPatient.getSeenBy() != null && trackingPatient.getSeenBy().getAllocatedMedic() != null) ? trackingPatient.getSeenBy().getAllocatedMedic().toString()  : ((trackingPatient.getSeenBy() != null && trackingPatient.getSeenBy().getAllocatedNurse() != null) ? trackingPatient.getSeenBy().getAllocatedNurse().toString()  : SEEN_COMPLETE_BUTTON_TEXT)); //WDEV-16987 //WDEV-17966
					cell.setTooltip((trackingPatient.getSeenBy() != null && trackingPatient.getSeenBy().getAllocatedMedic() != null) ? trackingPatient.getSeenBy().getAllocatedMedic().toString()  : ((trackingPatient.getSeenBy() != null && trackingPatient.getSeenBy().getAllocatedNurse() != null) ? trackingPatient.getSeenBy().getAllocatedNurse().toString()  : SEEN_COMPLETE_BUTTON_TEXT)); //WDEV-16987 //WDEV-17966
				}
			}
			else if(TrackingAreaColumn.SEEN_BY_HCP_ALLOCATED_DATE_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getSeenBy() != null && trackingPatient.getSeenBy().getAllocatedDateTime() != null) ? trackingPatient.getSeenBy().getAllocatedDateTime().toString()  : null); //WDEV-16816
			}
			else if(TrackingAreaColumn.SEEN_BY_HCP_SEEN_DATE_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getSeenBy() != null && trackingPatient.getSeenBy().getSeenDateTime() != null) ? trackingPatient.getSeenBy().getSeenDateTime().toString()  : null); //WDEV-16816
			}
			/*//WDEV-16816
			else if(TrackingAreaColumn.ALLOCATED_HCP.equals(column.getIdentifier()))
			{
				if(Boolean.TRUE.equals(trackingPatient.getIsDischarged()))
				{
					cell = row.getCells().newCell(column, DynamicCellType.STRING);
				}
				else
				{
					cell = row.getCells().newCell(column, DynamicCellType.BUTTON);
				}
				cell.setValue((trackingPatient.getCurrentAllocatedMedic() != null && trackingPatient.getCurrentAllocatedMedic().getAllocatedMedic() != null) ? trackingPatient.getCurrentAllocatedMedic().getAllocatedMedic().toString()  : null);
			}
			else if(TrackingAreaColumn.ALLOCATED_HCP_DATE_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getCurrentAllocatedMedic() != null && trackingPatient.getCurrentAllocatedMedic().getAllocatedDateTime() != null) ? trackingPatient.getCurrentAllocatedMedic().getAllocatedDateTime().toString()  : null);
			}
			else if(TrackingAreaColumn.ALLOCATED_HCP_SEEN_DATE_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getCurrentAllocatedMedic() != null && trackingPatient.getCurrentAllocatedMedic().getSeenDateTime() != null) ? trackingPatient.getCurrentAllocatedMedic().getSeenDateTime().toString()  : null);
			}
			else if(TrackingAreaColumn.ALLOCATED_NURSE.equals(column.getIdentifier()))
			{
				if(Boolean.TRUE.equals(trackingPatient.getIsDischarged()))
				{
					cell = row.getCells().newCell(column, DynamicCellType.STRING);
				}
				else
				{
					cell = row.getCells().newCell(column, DynamicCellType.BUTTON);
				}
				cell.setValue((trackingPatient.getCurrentAllocatedNurse() != null && trackingPatient.getCurrentAllocatedNurse().getAllocatedNurse() != null) ? trackingPatient.getCurrentAllocatedNurse().getAllocatedNurse().toString()  : null);
			}
			else if(TrackingAreaColumn.ALLOCATED_NURSE_DATE_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getCurrentAllocatedNurse() != null && trackingPatient.getCurrentAllocatedNurse().getAllocatedDateTime() != null) ? trackingPatient.getCurrentAllocatedNurse().getAllocatedDateTime().toString()  : null);
			}
			else if(TrackingAreaColumn.ALLOCATED_NURSE_SEEN_DATE_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getCurrentAllocatedNurse() != null && trackingPatient.getCurrentAllocatedNurse().getSeenDateTime() != null) ? trackingPatient.getCurrentAllocatedNurse().getSeenDateTime().toString()  : null);
			}
			*/
			
			else if(TrackingAreaColumn.ARRIVAL_DATE_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getAttendance() != null && trackingPatient.getAttendance().getArrivalDateTime() != null) ? trackingPatient.getAttendance().getArrivalDateTime().toString()  : null);
			}
			else if(TrackingAreaColumn.ATTENDANCE_ID.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.INT);
				cell.setValue(trackingPatient.getAttendance() != null ? trackingPatient.getAttendance().getID_EmergencyAttendance() : null);
			}
			else if(TrackingAreaColumn.BED_STATUS.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
				cell.setValue(getBedStatusImage(trackingPatient.getBedAvailability()));
				cell.setTooltip(getBedStatusTooltip(trackingPatient.getBedAvailability()));
			}
			else if(TrackingAreaColumn.CHART_NUMBER.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue(getIdentifier(trackingPatient, PatIdType.CHARTNUM));
			}
			else if(TrackingAreaColumn.COMMENTS.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue(trackingPatient.getAttendance() != null ? trackingPatient.getAttendance().getComments() : null);
			}
			else if(TrackingAreaColumn.CUBICLE.equals(column.getIdentifier()))
			{
				if(Boolean.TRUE.equals(trackingPatient.getIsDischarged()))
				{
					cell = row.getCells().newCell(column, DynamicCellType.STRING);
					cell.setValue((trackingPatient.getCurrentCubicle() != null && trackingPatient.getCurrentCubicle().getCubicleRoomBed() != null) ? trackingPatient.getCurrentCubicle().getCubicleRoomBed().getCubicleRoomBedName() : null);   //wdev-16987
				}
				else
				{
					cell = row.getCells().newCell(column, DynamicCellType.BUTTON);	
					cell.setButtonText((trackingPatient.getCurrentCubicle() != null && trackingPatient.getCurrentCubicle().getCubicleRoomBed() != null) ? trackingPatient.getCurrentCubicle().getCubicleRoomBed().getCubicleRoomBedName() : ALLOCATE_CUBICLE_BUTTON_TEXT);  //WDEV-16987 //WDEV-17966
					cell.setTooltip((trackingPatient.getCurrentCubicle() != null && trackingPatient.getCurrentCubicle().getCubicleRoomBed() != null) ? trackingPatient.getCurrentCubicle().getCubicleRoomBed().getCubicleRoomBedName() : ALLOCATE_CUBICLE_BUTTON_TEXT);  //WDEV-16987 //WDEV-17966
				}
			}
			else if(TrackingAreaColumn.DISCHARGE_DATE_AND_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getAttendance() != null && trackingPatient.getAttendance().getDischargeDateTime() != null) ? trackingPatient.getAttendance().getDischargeDateTime().toString() : null);
			}
			else if(TrackingAreaColumn.DISCHARGE_OUTCOME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getAttendance() != null && trackingPatient.getAttendance().getOutcome() != null) ? trackingPatient.getAttendance().getOutcome().getText() : null);
			}
			else if(TrackingAreaColumn.DNA.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
				cell.setValue(getDNWImage(trackingPatient.getCurrentDNW()));
				cell.setTooltip(getDNWTooltip(trackingPatient.getCurrentDNW()));
			}
			else if(TrackingAreaColumn.ED_SITE.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue(trackingPatient.getEDLocation() != null ? trackingPatient.getEDLocation().getName() : null);
			}
			else if(TrackingAreaColumn.EPISODE_ID.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.INT);
				cell.setValue(trackingPatient.getEpisode() != null ? trackingPatient.getEpisode().getID_EmergencyEpisode() : null);
			}
			else if(TrackingAreaColumn.INJURY_DATE_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getEpisode() != null && trackingPatient.getEpisode().getInjuryDateTime() != null) ? trackingPatient.getEpisode().getInjuryDateTime().toString()  : null);
			}
			else if(TrackingAreaColumn.HOSPITAL_NUMBER.equals(column.getIdentifier()))
			{
				int cellWidth = column.getWidth();
				
				Integer noOfHospNumber = trackingPatient.getPatient() != null ? trackingPatient.getPatient().getNoOfHospNumbers() : null;
				
				cell = row.getCells().newCell(column, DynamicCellType.TABLE);
				
				DynamicGridCellTable helper = new DynamicGridCellTable(cell);
				TableRow  tableRow = helper.getRows().newRow();
				
				TableCell tableCell = tableRow.getCells().newCell();
				tableCell.setType(TableCellType.STRING);
				if(cellWidth > form.getImages().Core.InfoEnabled16.getImageWidth())
				{
					tableCell.setWidth(cellWidth - form.getImages().Core.InfoEnabled16.getImageWidth());
				}
				String indentifier = getIdentifier(trackingPatient, PatIdType.HOSPNUM);
				tableCell.setValue(indentifier);
				tableCell.setTooltip(indentifier);
				
				if(noOfHospNumber != null && noOfHospNumber > 1)
				{
					tableCell = tableRow.getCells().newCell();
					tableCell.setType(TableCellType.IMAGE);		
					tableCell.setValue(form.getImages().Core.InfoEnabled16);
					tableCell.setTooltip("Patient has multiple Hospital Numbers");
				}
				
				//WDEV-17966
				if (maskInPublicArea(column) && Boolean.TRUE.equals(form.getGlobalContext().Emergency.getTrackingPublicArea()) && tableCell.getValue()!=null )
				{
					tableCell.setValue(MASKED_TEXT);
					tableCell.setTooltip(null);
				}
				
				cell.setValue(helper);
			}
			else if(TrackingAreaColumn.LAST_MOVEMENT_DATE_AND_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue(EmergencyDisplayHelper.minutesToHoursAndMinutes(trackingPatient.getLastMovementDateInMinutes()));// 	WDEV-15818
			}
			else if(TrackingAreaColumn.LENGTH_OF_STAY.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.TABLE);
				
				DynamicGridCellTable helper = new DynamicGridCellTable(cell);
				TableRow  tableRow = helper.getRows().newRow();
				
				TableCell tableCell = tableRow.getCells().newCell();
				tableCell.setType(TableCellType.STRING);		
				TableCellOptions cellOptions = new TableCellOptions();										 
								 cellOptions.setFontFamily(FontFamily.TAHOMA);
								 cellOptions.setFontSize(11);								 
								 cellOptions.setAlign(Align.LEFT);
				
				tableCell.setOptions(cellOptions);				
				tableCell.setValue(trackingPatient.getAttendance() != null ? EmergencyDisplayHelper.minutesToHoursAndMinutes(trackingPatient.getAttendance().getLengthOfStay()) : null);// 	WDEV-15818
				tableCell.setTooltip(trackingPatient.getAttendance() != null ? EmergencyDisplayHelper.minutesToHoursAndMinutes(trackingPatient.getAttendance().getLengthOfStay()) : null);// 	WDEV-15818
				
				//WDEV-17966
				if (maskInPublicArea(column) && Boolean.TRUE.equals(form.getGlobalContext().Emergency.getTrackingPublicArea()) && tableCell.getValue()!=null )
				{
					tableCell.setValue(MASKED_TEXT);
					tableCell.setTooltip(null);
				}
				
				setLOSColorCell(cellOptions, trackingPatient);
				
				cell.setValue(helper);
			}
			else if(TrackingAreaColumn.NHS_NUMBER.equals(column.getIdentifier()))
			{
				int cellWidth = column.getWidth();
				
				Integer noOfNHSNumber = trackingPatient.getPatient() != null ? trackingPatient.getPatient().getNoOfNHSNumbers() : null;
				
				cell = row.getCells().newCell(column, DynamicCellType.TABLE);
				
				DynamicGridCellTable helper = new DynamicGridCellTable(cell);
				TableRow  tableRow = helper.getRows().newRow();
				
				TableCell tableCell = tableRow.getCells().newCell();
				tableCell.setType(TableCellType.STRING);
				if(cellWidth > form.getImages().Core.InfoEnabled16.getImageWidth())
				{
					tableCell.setWidth(cellWidth - form.getImages().Core.InfoEnabled16.getImageWidth());
				}
				String indentifier = getIdentifier(trackingPatient, PatIdType.NHSN);
				tableCell.setValue(indentifier);
				tableCell.setTooltip(indentifier);
				
				if(noOfNHSNumber != null && noOfNHSNumber > 1)
				{
					tableCell = tableRow.getCells().newCell();
					tableCell.setType(TableCellType.IMAGE);		
					tableCell.setValue(form.getImages().Core.InfoEnabled16);
					tableCell.setTooltip("Patient has multiple NHS Numbers");
				}
				
				//WDEV-17966
				if (maskInPublicArea(column) && Boolean.TRUE.equals(form.getGlobalContext().Emergency.getTrackingPublicArea()) && tableCell.getValue()!=null )
				{
					tableCell.setValue(MASKED_TEXT);
					tableCell.setTooltip(null);
				}
				
				cell.setValue(helper);
			}
			else if(TrackingAreaColumn.PATIENT_ADDRESS_LINE_1.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getPatient() != null && trackingPatient.getPatient().getAddress() != null) ? trackingPatient.getPatient().getAddress().getLine1() : null);
			}
			else if(TrackingAreaColumn.PATIENT_AGE.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.INT);
				cell.setValue(trackingPatient.getPatient() != null ? trackingPatient.getPatient().getAge() : null);
			}
			else if(TrackingAreaColumn.PATIENT_CURRENT_STATUS.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient != null && trackingPatient.getCurrentStatus() != null && trackingPatient.getCurrentStatus().getStatus() != null) ? trackingPatient.getCurrentStatus().getStatus().getText() : null);
			}
			else if(TrackingAreaColumn.PATIENT_DOB.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.PARTIALDATE);
				cell.setValue(trackingPatient.getPatient() != null ? trackingPatient.getPatient().getDob() : null);
			}
			else if(TrackingAreaColumn.PATIENT_DOD.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getPatient() != null && trackingPatient.getPatient().getDod() != null) ? trackingPatient.getPatient().getDod().toString() : null);
			}
			else if(TrackingAreaColumn.PATIENT_FORENAME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.TABLE);
				
				DynamicGridCellTable helper = new DynamicGridCellTable(cell);
				TableRow  tableRow = helper.getRows().newRow();
				
				TableCell tableCell = tableRow.getCells().newCell();
				tableCell.setType(TableCellType.STRING);		
				TableCellOptions cellOptions = new TableCellOptions();										 
								 cellOptions.setFontFamily(FontFamily.TAHOMA);
								 cellOptions.setFontSize(11);								 
								 cellOptions.setAlign(Align.LEFT);
				
				tableCell.setOptions(cellOptions);				
				tableCell.setValue((trackingPatient.getPatient() != null && trackingPatient.getPatient().getName() != null) ? trackingPatient.getPatient().getName().getForename() : null);
				tableCell.setTooltip((trackingPatient.getPatient() != null && trackingPatient.getPatient().getName() != null) ? trackingPatient.getPatient().getName().getForename() : null);
				
				//WDEV-17966
				if (maskInPublicArea(column) && Boolean.TRUE.equals(form.getGlobalContext().Emergency.getTrackingPublicArea()) && tableCell.getValue()!=null )
				{
					tableCell.setValue(MASKED_TEXT);
					tableCell.setTooltip(null);
				}
				
				setNameKPIColorCell(cellOptions, trackingPatient, false);
				
				cell.setValue(helper);
			}
			else if(TrackingAreaColumn.PATIENT_GENDER.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getPatient() != null && trackingPatient.getPatient().getSex() != null) ? trackingPatient.getPatient().getSex().getText() : null);
			}
			else if(TrackingAreaColumn.PATIENT_SURNAME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.TABLE);
				
				DynamicGridCellTable helper = new DynamicGridCellTable(cell);
				TableRow  tableRow = helper.getRows().newRow();
				
				TableCell tableCell = tableRow.getCells().newCell();
				tableCell.setType(TableCellType.STRING);		
				TableCellOptions cellOptions = new TableCellOptions();										 
								 cellOptions.setFontFamily(FontFamily.TAHOMA);
								 cellOptions.setFontSize(11);								 
								 cellOptions.setAlign(Align.LEFT);
				
				tableCell.setOptions(cellOptions);				
				tableCell.setValue((trackingPatient.getPatient() != null && trackingPatient.getPatient().getName() != null) ? trackingPatient.getPatient().getName().getSurname() : null);
				tableCell.setTooltip((trackingPatient.getPatient() != null && trackingPatient.getPatient().getName() != null) ? trackingPatient.getPatient().getName().getSurname() : null);
				
				//WDEV-17966
				if (maskInPublicArea(column) && Boolean.TRUE.equals(form.getGlobalContext().Emergency.getTrackingPublicArea()) && tableCell.getValue()!=null )
				{
					tableCell.setValue(MASKED_TEXT);
					tableCell.setTooltip(null);
				}
				
				setNameKPIColorCell(cellOptions, trackingPatient, false);
				
				cell.setValue(helper);
			}
			else if(TrackingAreaColumn.PATIENT_TITLE.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getPatient() != null && trackingPatient.getPatient().getName() != null && trackingPatient.getPatient().getName().getTitle() != null) ? trackingPatient.getPatient().getName().getTitle().getText() : null);
			}
			else if(TrackingAreaColumn.PRESENTING_COMPLAINT.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getEpisode() != null && trackingPatient.getEpisode().getPresentingComplaint() != null) ? trackingPatient.getEpisode().getPresentingComplaint().getText() : null);
			}
			else if(TrackingAreaColumn.PRESENTING_PROBLEM.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getTriageDetails() != null && trackingPatient.getTriageDetails().getMainPresentingProblem() != null) ? trackingPatient.getTriageDetails().getMainPresentingProblem().getPatientProblem() : null);
			}
			else if(TrackingAreaColumn.PRIMARY_CARE.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
				cell.setValue(trackingPatient.getAttendance() != null && Boolean.TRUE.equals(trackingPatient.getAttendance().getIsPrimaryCare()) ? form.getImages().Admin.Primary : null);
				cell.setTooltip(trackingPatient.getAttendance() != null && Boolean.TRUE.equals(trackingPatient.getAttendance().getIsPrimaryCare()) ? "Primary Care" : null);
			}
			else if(TrackingAreaColumn.REFERRAL_DATE_AND_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getCurrentReferral() != null && trackingPatient.getCurrentReferral().getReferredDateTime()!= null) ? trackingPatient.getCurrentReferral().getReferredDateTime().toString() : null);
			}
			else if(TrackingAreaColumn.REFERRAL_SEEN_DATE_AND_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getCurrentReferral() != null && trackingPatient.getCurrentReferral().getSeenDateTime() != null) ? trackingPatient.getCurrentReferral().getSeenDateTime().toString() : null);
			}
			else if(TrackingAreaColumn.REFERRAL_SPECIALTY.equals(column.getIdentifier()))
			{
				//WDEV-16987
				StringBuffer cellText = new StringBuffer();
				
				if(trackingPatient.getCurrentReferralIsNotNull())
				{
					if(trackingPatient.getCurrentReferral().getSpecialtyIsNotNull())
					{
						cellText.append(trackingPatient.getCurrentReferral().getSpecialty().getText());
					}
					
					if(trackingPatient.getCurrentReferral().getTeamConsultantIsNotNull())
					{
						cellText.append(" - " + trackingPatient.getCurrentReferral().getTeamConsultant().getText()); //WDEV-17638
					}
				}
				
				if(Boolean.TRUE.equals(trackingPatient.getIsDischarged()))
				{
					cell = row.getCells().newCell(column, DynamicCellType.STRING);
					cell.setValue(cellText.toString());//WDEV-16987
				}
				else
				{
					cell = row.getCells().newCell(column, DynamicCellType.BUTTON);
					cell.setButtonText(cellText.length()>0 ? cellText.toString() : REFER_TO_BUTTON_TEXT);  //WDEV-16987 //WDEV-17966
					cell.setTooltip(cellText.length()>0 ? cellText.toString() : REFER_TO_BUTTON_TEXT);  //WDEV-16987 //WDEV-17966
				}
				
				
			}
			else if(TrackingAreaColumn.REGISTRATION_DATE_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getAttendance() != null && trackingPatient.getAttendance().getRegistrationDateTime() != null) ? trackingPatient.getAttendance().getRegistrationDateTime().toString()  : null);
			}
			else if(TrackingAreaColumn.TRACKING_ZONE.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue(trackingPatient.getCurrentArea() != null ? trackingPatient.getCurrentArea().getAreaDisplayName()  : null);
			}
			else if(TrackingAreaColumn.TRIAGE_DATE_AND_TIME.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getTriageDetails() != null && trackingPatient.getTriageDetails().getTriageStartDateTime() != null) ? trackingPatient.getTriageDetails().getTriageStartDateTime().toString()  : null);
			}
			else if(TrackingAreaColumn.TRIAGE_PRIORITY.equals(column.getIdentifier()))
			{
				/*cell = row.getCells().newCell(column, DynamicCellType.STRING);	
				
				setPriorityCellColor(cell, trackingPatient);
				cell.setValue((trackingPatient.getTriageDetails() != null && trackingPatient.getTriageDetails().getCurrentTriagePriority() != null) ? "<b>" + trackingPatient.getTriageDetails().getCurrentTriagePriority().getText() + "</b>" : null);*/
				
				cell = row.getCells().newCell(column, DynamicCellType.TABLE);
				
				DynamicGridCellTable helper = new DynamicGridCellTable(cell);
				TableRow  tableRow = helper.getRows().newRow();
				
				TableCell tableCell = tableRow.getCells().newCell();
				tableCell.setType(TableCellType.STRING);		
				TableCellOptions cellOptions = new TableCellOptions();										 
								 cellOptions.setFontFamily(FontFamily.TAHOMA);
								 cellOptions.setFontSize(11);								 
								 cellOptions.setAlign(Align.LEFT);
								 setPriorityCellColor(cellOptions, trackingPatient);
				
				tableCell.setOptions(cellOptions);				
				tableCell.setValue((trackingPatient.getTriageDetails() != null && trackingPatient.getTriageDetails().getCurrentTriagePriority() != null) ? "<b>" + trackingPatient.getTriageDetails().getCurrentTriagePriority().getText() + "</b>" : null);
				tableCell.setTooltip((trackingPatient.getTriageDetails() != null && trackingPatient.getTriageDetails().getCurrentTriagePriority() != null) ? "<b>" + trackingPatient.getTriageDetails().getCurrentTriagePriority().getText() + "</b>" : null);
				
				//WDEV-17966
				if (maskInPublicArea(column) && Boolean.TRUE.equals(form.getGlobalContext().Emergency.getTrackingPublicArea()) && tableCell.getValue()!=null )
				{
					tableCell.setValue(MASKED_TEXT);
					tableCell.setTooltip(null);
				}
				
				cell.setValue(helper);
			}
			else if(TrackingAreaColumn.UNKNOWN_PATIENT.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
				cell.setValue(trackingPatient.getAttendance() != null && Boolean.TRUE.equals(trackingPatient.getAttendance().getIsUnknownPatient()) ? form.getImages().Core.Patient_restrict : null);
				cell.setTooltip(trackingPatient.getAttendance() != null && Boolean.TRUE.equals(trackingPatient.getAttendance().getIsUnknownPatient()) ? "Unknown Patient" : null);
			}
			//WDEV-16987
			else if(TrackingAreaColumn.ADMISSION_WARD.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getPatient() != null && trackingPatient.getPatient().getWard()!=null && Boolean.TRUE.equals(trackingPatient.getPatient().getWard().getDisplayInEDTracking()) ) ? trackingPatient.getPatient().getWard().getName() : null);
			}
			else if(TrackingAreaColumn.DIAGNOSIS.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue((trackingPatient.getPrimaryDiagnosis() != null ) ? trackingPatient.getPrimaryDiagnosis().getDiagnosisDescription() : null);
				cell.setTooltip((trackingPatient.getPrimaryDiagnosis() != null ) ? trackingPatient.getPrimaryDiagnosis().getDiagnosisDescription() : null);
			}
			else if(TrackingAreaColumn.DIAGNOSIS_REQUIRED.equals(column.getIdentifier()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
				cell.setValue((trackingPatient.getPrimaryDiagnosis() == null ) ? form.getImages().Core.AnswerBox_Yes : null);
			}
			else if(TrackingAreaColumn.NEW_RESULTS.equals(column.getIdentifier()))
			{
				if (Boolean.TRUE.equals(trackingPatient.getPatient().hasPatientNotification()))
				{
					cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
					cell.setValue(form.getImages().OCRR.Pathology24);
				}
			}
			
			//WDEV-17966
			if (maskInPublicArea(column) && Boolean.TRUE.equals(form.getGlobalContext().Emergency.getTrackingPublicArea()) && cell.getValue()!=null && !DynamicCellType.TABLE.equals(cell.getType()) && !DynamicCellType.BUTTON.equals(cell.getType()))
			{
				cell = row.getCells().newCell(column, DynamicCellType.STRING);
				cell.setValue(MASKED_TEXT);
			}
			else if (maskInPublicArea(column) && Boolean.TRUE.equals(form.getGlobalContext().Emergency.getTrackingPublicArea()) && DynamicCellType.BUTTON.equals(cell.getType()) && !(cell.getButtonText()==REFER_TO_BUTTON_TEXT || cell.getButtonText()==ALLOCATE_CUBICLE_BUTTON_TEXT  || cell.getButtonText()==SEEN_COMPLETE_BUTTON_TEXT))
			{	
				cell.setButtonText(MASKED_TEXT);
				cell.setTooltip(null);
			}
			
		}
		
		//WDEV-15971
		incrementPriority(trackingPatient);
	}

	//WDEV-17966
	private boolean maskInPublicArea(DynamicGridColumn column)
	{
		if (form.getLocalContext().getSelectedTrackingArea()==null || form.getLocalContext().getSelectedTrackingArea().getColumns()==null)
			return false;
		
		ColumnDetailVoCollection collColumns = form.getLocalContext().getSelectedTrackingArea().getColumns();
		
		for (int i=0;i<collColumns.size();i++)
		{
			ColumnDetailVo columnDetail = collColumns.get(i);
			if (columnDetail.getColumn().equals(column.getIdentifier()) && Boolean.TRUE.equals(columnDetail.getMaskInPublicArea()))
			{
				return true;
			}
		}
		
		return false;
	}
	
	private void setLOSColorCell(TableCellOptions cellOptions,	TrackingVo trackingPatient) 
	{
		if(cellOptions == null || trackingPatient == null)
			return;
		
		Color losFontColor = null;
		Color losBackgroudColor = null;
		Color losFlashingTextColour = null;
		
		boolean losBreachWarning = false;
		boolean losBreached = false;
		
		Integer LOS = trackingPatient.getAttendance().getLengthOfStay();
		
		if(LOS != null && form.getLocalContext().getAttendanceKPIConfig() != null)
		{	
			if(form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPI() != null && form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPI() != null)
			{
				if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPI() && LOS < form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPI())
				{
					losFontColor = form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPITextColour(); 			
					losBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPIBackgroundColour();	
					losFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPIFlashingTextColour();	
					
					losBreachWarning = true;
				}
				else if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPI())
				{
					losFontColor = form.getLocalContext().getAttendanceKPIConfig().getLosBreachKPITextColour();				
					losBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPIBackgroundColour();			
					losFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPIFlashingTextColour();	
					
					losBreached = true;
				}
			}
		}
		
		if((losBreachWarning && YesNo.YES.equals(form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPIFlashingText()))
				|| (losBreached && YesNo.YES.equals(form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPIFlashingText())))
		{
			if(losFontColor != null && losFlashingTextColour != null && losBackgroudColor != null)
				cellOptions.setTextAndBackgroundBlink(losFontColor ,losFlashingTextColour ,losBackgroudColor, losBackgroudColor);	
		}
		
		if(losBackgroudColor != null)
			cellOptions.setBackgroundColor(losBackgroudColor);	
		if(losFontColor != null)
			cellOptions.setTextColor(losFontColor);	
	}

	private void setNameKPIColorCell(TableCellOptions cellOptions,	TrackingVo trackingPatient, boolean b) 
	{
		if(cellOptions == null || trackingPatient == null)
			return;
		
		Color surnameFontColor = null;
		Color surnameBackgroudColor = null;
		Color surnameFlashingTextColour = null;		
		
		boolean awaitingBreachWarning = false;
		boolean awaitingBreached = false;
		
		YesNo surnameBreachWarningFlashing = null;
		YesNo surnameBreachedFlashing = null;
		Integer LOS = trackingPatient.getAttendance().getLengthOfStay();
		
		if(trackingPatient.getCurrentStatus() != null)
		{
			if(TrackingStatus.SKIPPED_TRIAGE.equals(trackingPatient.getCurrentStatus().getStatus()))
			{
				TriagePriorityKpConfigVo triagePriorityKpConfig = getTriagePriorityKpConfig(TriagePriority.SKIPPED_TRIAGE);	
				
				if(triagePriorityKpConfig != null)
				{
					if(triagePriorityKpConfig.getDefaultFontColour() != null)
						surnameFontColor = triagePriorityKpConfig.getDefaultFontColour();
					if(triagePriorityKpConfig.getDefaultRowColour()!= null)
						surnameBackgroudColor = triagePriorityKpConfig.getDefaultRowColour();
				}
				
				if(LOS != null && triagePriorityKpConfig != null)
				{	
					if(triagePriorityKpConfig.getPriorityBreachWarningKPI() != null && triagePriorityKpConfig.getPriorityBreachedKPI() != null)
					{
						if(LOS >= triagePriorityKpConfig.getPriorityBreachWarningKPI() && LOS < triagePriorityKpConfig.getPriorityBreachedKPI())
						{
							surnameFontColor = triagePriorityKpConfig.getPriorityBreachWarningKPITextColour();			
							surnameBackgroudColor = triagePriorityKpConfig.getPriorityBreachWarningKPIBackgroundColour();	
							surnameFlashingTextColour = triagePriorityKpConfig.getPriorityBreachWarningKPIFlashingTextColour();
							
							awaitingBreachWarning = true;
							surnameBreachWarningFlashing = triagePriorityKpConfig.getPriorityBreachWarningKPIFlashingText();
						}
						else if(LOS >= triagePriorityKpConfig.getPriorityBreachedKPI())
						{
							surnameFontColor = triagePriorityKpConfig.getPriorityBreachKPITextColour();				
							surnameBackgroudColor = triagePriorityKpConfig.getPriorityBreachedKPIBackgroundColour();
							surnameFlashingTextColour = triagePriorityKpConfig.getPriorityBreachedKPIFlashingTextColour();
							
							awaitingBreached = true;
							surnameBreachedFlashing = triagePriorityKpConfig.getPriorityBreachedKPIFlashingText();
						}
					}
				}
			}
			/*else if(TrackingStatus.WAITING_TO_BE_SEEN_BY_A_MEDIC.equals(trackingPatient.getCurrentStatus().getStatus()))
			{
				if(LOS != null && form.getLocalContext().getAttendanceKPIConfig() != null)
				{
					if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPI() != null && form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachedKPI() != null)
					{
						if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPI() && LOS < form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachedKPI())
						{
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPITextColour() != null)
								surnameFontColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPITextColour(); 
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPIBackgroundColour() != null)
								surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPIBackgroundColour();
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPIFlashingTextColour() != null)
								surnameFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPIFlashingTextColour();
							
							awaitingBreachWarning = true;
							surnameBreachWarningFlashing = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPIFlashingText();
						}
						else if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachedKPI())
						{
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPITextColour() != null)
								surnameFontColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPITextColour();	
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPIBackgroundColour() != null)
								surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPIBackgroundColour();
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPIFlashingTextColour() != null)
								surnameFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPIFlashingTextColour();	
							
							awaitingBreached = true;
							surnameBreachedFlashing = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPIFlashingText();
						}
					}
				}
			}*/
			else if(TrackingStatus.WAITING_TO_BE_TRIAGED.equals(trackingPatient.getCurrentStatus().getStatus()))
			{
				if(LOS != null && form.getLocalContext().getAttendanceKPIConfig() != null)
				{
					if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPI() != null && form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI() != null)
					{
						if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPI() && LOS < form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI())
						{
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPITextColour() != null)
								surnameFontColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPITextColour(); 
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIBackgroundColour() != null)
								surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIBackgroundColour();
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIFlashingTextColour() != null)
								surnameFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIFlashingTextColour();
							
							surnameBreachWarningFlashing = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIFlashingText();
							awaitingBreachWarning = true;
						}
						else if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI())
						{
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPITextColour() != null)
								surnameFontColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPITextColour();	
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIBackgroundColour() != null)
								surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIBackgroundColour();
							if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIFlashingTextColour() != null)
								surnameFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIFlashingTextColour();	
							
							surnameBreachedFlashing = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIFlashingText();
							awaitingBreached = true;
						}
					}
				}
			}
		}
		
		if((awaitingBreachWarning && YesNo.YES.equals(surnameBreachWarningFlashing))
				|| (awaitingBreached && YesNo.YES.equals(surnameBreachedFlashing)))
		{
			if(surnameFontColor != null && surnameFlashingTextColour != null && surnameBackgroudColor != null)
				cellOptions.setTextAndBackgroundBlink(surnameFontColor ,surnameFlashingTextColour ,surnameBackgroudColor, surnameBackgroudColor);
		}
		 
		if(surnameBackgroudColor != null)
			cellOptions.setBackgroundColor(surnameBackgroudColor);	
		
		if(surnameFontColor != null)
			cellOptions.setTextColor(surnameFontColor);	
	}

	//WDEV-15971
	private void incrementPriority(TrackingVo trackingPatient)
	{
		String priority = ((trackingPatient.getTriageDetails() != null && trackingPatient.getTriageDetails().getCurrentTriagePriority() != null) ? trackingPatient.getTriageDetails().getCurrentTriagePriority().getText(): null);
		
		//WDEV-17259
		if (trackingPatient.getCurrentStatus() != null && TrackingStatus.SKIPPED_TRIAGE.equals(trackingPatient.getCurrentStatus().getStatus()))
		{
			form.getLocalContext().setNoPatientsSkippedTriage(form.getLocalContext().getNoPatientsSkippedTriage()+1);
		}
		
		if (priority==null)
			return;
		
		if (priority.equals("P1"))
		{
			form.getLocalContext().setNoPatientsPriority1(form.getLocalContext().getNoPatientsPriority1()+1);
		}
		else if (priority.equals("P2"))
		{
			form.getLocalContext().setNoPatientsPriority2(form.getLocalContext().getNoPatientsPriority2()+1);
		}
		else if (priority.equals("P3"))
		{
			form.getLocalContext().setNoPatientsPriority3(form.getLocalContext().getNoPatientsPriority3()+1);
		}
		else if (priority.equals("P4"))
		{
			form.getLocalContext().setNoPatientsPriority4(form.getLocalContext().getNoPatientsPriority4()+1);
		}
		else if (priority.equals("P5"))
		{
			form.getLocalContext().setNoPatientsPriority5(form.getLocalContext().getNoPatientsPriority5()+1);
		}
		
	}

	private String getDNWTooltip(DNWForTrackingVo currentDNW) 
	{
		if(currentDNW == null ||currentDNW.getCurrentStatus() == null || currentDNW.getCurrentStatus().getCalledAmount() == null)
			return null;
		
		if(currentDNW.getCurrentStatus().getCalledAmount() == 1)
			return "DNW 1";
		else if(currentDNW.getCurrentStatus().getCalledAmount() == 2)
			return "DNW 2";
		else if(currentDNW.getCurrentStatus().getCalledAmount() == 3)
			return "DNW 3";
		
		return null;
	}

	private Image getDNWImage(DNWForTrackingVo currentDNW) 
	{
		if(currentDNW == null ||currentDNW.getCurrentStatus() == null || currentDNW.getCurrentStatus().getCalledAmount() == null)
			return null;
		
		if(currentDNW.getCurrentStatus().getCalledAmount() == 1)
			return form.getImages().Emergency.DNW1;
		else if(currentDNW.getCurrentStatus().getCalledAmount() == 2)
			return form.getImages().Emergency.DNW2;
		else if(currentDNW.getCurrentStatus().getCalledAmount() == 3)
			return form.getImages().Emergency.DNW3;
		
		return null;
	}

	private String getBedStatusTooltip(BedAvailabilityForTrackingVo bedAvailability) 
	{
		if(bedAvailability == null)
			return null;
		
		if(bedAvailability.getAvailableDateTime() != null)
			return "Bed Available";
		
		if(bedAvailability.getAwaitingDateTime() != null)
			return "Bed Awaiting";
			
		return null;
	}

	private void setPriorityCellColor(TableCellOptions cellOptions, TrackingVo tracking) 
	{
		if(cellOptions == null)
			return;
		
		Color priorityFontColor = null;
		Color priorityBackgroudColor = null;
		Color priorityFlashingTextColour = null;
		
		boolean priorityBreachWarning = false;
		boolean priorityBreached = false;
		YesNo priorityBreachWarningFlashing = null;
		YesNo priorityBreachedFlashing = null;
		
		if(tracking != null && tracking.getTriageDetails() != null)
		{
			if(tracking.getTriageDetails().getMedicInterventionStartDateTime() != null && tracking.getTriageDetails().getCurrentTriagePriority() != null)
			{
				if(tracking.getTriageDetails().getCurrentTriagePriority().getColor() != null)
					priorityFontColor = tracking.getTriageDetails().getCurrentTriagePriority().getColor();
			}
			else
			{
				TriagePriorityKpConfigVo triagePriorityKpConfig = getTriagePriorityKpConfig(tracking.getTriageDetails().getCurrentTriagePriority());	
				
				if(triagePriorityKpConfig != null)
				{
					if(triagePriorityKpConfig.getDefaultFontColour() != null)
						priorityFontColor = triagePriorityKpConfig.getDefaultFontColour();
					if(triagePriorityKpConfig.getDefaultRowColour()!= null)
						priorityBackgroudColor = triagePriorityKpConfig.getDefaultRowColour();
				}
				
				if(tracking.getTriageDetails().getTriageStartDateTime() != null)
				{
					int timeSinceTriage = calculateDateDiffInMinutes(new DateTime(), tracking.getTriageDetails().getTriageStartDateTime());
					
					if(triagePriorityKpConfig != null)
					{	
						if(triagePriorityKpConfig.getPriorityBreachWarningKPI() != null && triagePriorityKpConfig.getPriorityBreachedKPI() != null)
						{
							if(timeSinceTriage >= triagePriorityKpConfig.getPriorityBreachWarningKPI() && timeSinceTriage < triagePriorityKpConfig.getPriorityBreachedKPI())
							{
								priorityFontColor = triagePriorityKpConfig.getPriorityBreachWarningKPITextColour();			
								priorityBackgroudColor = triagePriorityKpConfig.getPriorityBreachWarningKPIBackgroundColour();	
								priorityFlashingTextColour = triagePriorityKpConfig.getPriorityBreachWarningKPIFlashingTextColour();
								
								priorityBreachWarning = true;
								priorityBreachWarningFlashing = triagePriorityKpConfig.getPriorityBreachWarningKPIFlashingText();
							}
							else if(timeSinceTriage >= triagePriorityKpConfig.getPriorityBreachedKPI())
							{
								priorityFontColor = triagePriorityKpConfig.getPriorityBreachKPITextColour();				
								priorityBackgroudColor = triagePriorityKpConfig.getPriorityBreachedKPIBackgroundColour();
								priorityFlashingTextColour = triagePriorityKpConfig.getPriorityBreachedKPIFlashingTextColour();
								
								priorityBreached = true;
								priorityBreachedFlashing = triagePriorityKpConfig.getPriorityBreachedKPIFlashingText();
							}
						}
					}
				}
			}
		}
			
		if((priorityBreachWarning && YesNo.YES.equals(priorityBreachWarningFlashing))
				|| (priorityBreached && YesNo.YES.equals(priorityBreachedFlashing)))
		{
			if(priorityFontColor != null && priorityFlashingTextColour != null && priorityBackgroudColor != null)
				cellOptions.setTextAndBackgroundBlink(priorityFontColor ,priorityFlashingTextColour ,priorityBackgroudColor, priorityBackgroudColor);	
		}
		
		if(priorityBackgroudColor != null)
			cellOptions.setBackgroundColor(priorityBackgroudColor);	
		
		if(priorityFontColor != null)
			cellOptions.setTextColor(priorityFontColor);	
	}
	
	private TriagePriorityKpConfigVo getTriagePriorityKpConfig(TriagePriority currentTriagePriority) 
	{
		if(form.getLocalContext().getAttendanceKPIConfig() == null || form.getLocalContext().getAttendanceKPIConfig().getTriagePriorityKPIs() == null || currentTriagePriority == null)
			return null;
		
		for(TriagePriorityKpConfigVo triagePriorityConfig : form.getLocalContext().getAttendanceKPIConfig().getTriagePriorityKPIs())
		{
			if(triagePriorityConfig == null)
				continue;
			
			if(currentTriagePriority.equals(triagePriorityConfig.getTriagePriority()))
				return triagePriorityConfig;
		}
		
		return null;
	}

	private int calculateDateDiffInMinutes(DateTime currentTime, DateTime date) 
	{
		long currentTimeInMillis = currentTime.getJavaDate().getTime();
		long registrationDateTimeInMillis = date.getJavaDate().getTime();
		
		return (int)(((currentTimeInMillis < registrationDateTimeInMillis ? registrationDateTimeInMillis - currentTimeInMillis : currentTimeInMillis - registrationDateTimeInMillis)/1000)/60);
	}


	private Image getBedStatusImage(BedAvailabilityForTrackingVo bedAvailability) 
	{
		if(bedAvailability == null)
			return null;
		
		if(bedAvailability.getAvailableDateTime() != null)
			return form.getImages().Emergency.Bed_Available;//WDEV-16987
		
		if(bedAvailability.getAwaitingDateTime() != null)
			return form.getImages().Emergency.Bed_Awaiting;//WDEV-16987
			
		return null;
	}

	private String getIdentifier(TrackingVo trackingPatient, PatIdType identifierType) 
	{
		if(trackingPatient == null || identifierType == null)
			return null;
		
		String chartNumber = null;
		
		if(trackingPatient.getPatientIsNotNull() && trackingPatient.getPatient().getIdentifiersIsNotNull())
		{
			for(int j=0; j<trackingPatient.getPatient().getIdentifiers().size(); j++)
			{
				if(identifierType.equals(trackingPatient.getPatient().getIdentifiers().get(j).getType()))
				{
					chartNumber = trackingPatient.getPatient().getIdentifiers().get(j).getValue();
				}
			}
		}
	
		return chartNumber;
	}
	
	@Override
	protected void onDyngrdTrackRowSelectionChanged(DynamicGridRow row)	throws PresentationLogicException 
	{
		trackingSelectionChanged();
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.chkAllSites().setVisible(engine.hasRight(AppRight.ED_CAN_VIEW_TRACKING_ACROSS_ALL_ED_SITES));
		
		boolean isPatientSelected = form.getGlobalContext().Core.getPatientShortIsNotNull() 
									&& form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull() 
									&& form.getGlobalContext().Core.getCurrentCareContextIsNotNull() 
									&& form.getGlobalContext().Emergency.getTracking() != null;
		
		
		
		
		
		form.btnEventHistory().setEnabled(isPatientSelected);
		form.btnViewHistory().setEnabled(isPatientSelected);
		form.btnResult().setEnabled(isPatientSelected);
		
		//wdev-16067
		Boolean isRegistration = null;
		if( form.getLocalContext().getCurentAreaOfPatientIsNotNull() && form.getLocalContext().getCurentAreaOfPatientIsNotNull() )
			isRegistration = form.getLocalContext().getCurentAreaOfPatient().getIsRegistrationArea();
		//wdev-16067
		boolean isDischarged = false;
		
		if(form.dyngrdTrack().getValue() instanceof TrackingVo && Boolean.TRUE.equals(((TrackingVo) form.dyngrdTrack().getValue()).getIsDischarged()))
		{
			isDischarged = true;
		}
		
		//WDEV-17283
		Boolean isWaitingToBeTriaged = form.getLocalContext().getSelectedTrackingPatientIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatusIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatusIsNotNull() &&  form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatus().equals(TrackingStatus.WAITING_TO_BE_TRIAGED);
		Boolean isSkippedTriage = form.getLocalContext().getSelectedTrackingPatientIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatusIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatusIsNotNull() &&  form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatus().equals(TrackingStatus.SKIPPED_TRIAGE);
		
		form.btnTransfer().setEnabled(isPatientSelected && !isDischarged && engine.hasRight(AppRight.ED_CAN_PERFORM_TRANSFER));//WDEV-17209
		form.btnTransfer().setVisible(engine.hasRight(AppRight.ED_CAN_PERFORM_TRANSFER));//WDEV-17209
		form.btnRefer().setEnabled(isPatientSelected && !isDischarged);
		form.btnXray().setEnabled(isPatientSelected && !isDischarged);
		form.btnAllocatedCubicle().setEnabled(isPatientSelected && !isDischarged && !Boolean.TRUE.equals(isRegistration)); //wdev-16067
		form.btnPatStatus().setEnabled(isPatientSelected && !isDischarged);
		form.btnMove().setEnabled(isPatientSelected && !isDischarged);
		form.btnDNWAdd().setEnabled(isPatientSelected && !isDischarged);//WDEV-17283
		form.btnPatStatus().setEnabled(isPatientSelected && !isDischarged);
		form.btnOrder().setEnabled(isPatientSelected && !isDischarged);
		form.btnSeenCompleteHCP().setEnabled(isPatientSelected && (!isDischarged || (isDischarged && form.getGlobalContext().Core.getPatientShort().getWardIsNotNull())));//WDEV-16816 //WDEV-17925
		form.btnDTA().setEnabled(isPatientSelected && !isDischarged && engine.hasRight(AppRight.ED_CAN_PERFORM_ADMISSION) && (form.getLocalContext().getSelectedTrackingPatient()!=null && !Boolean.TRUE.equals(form.getLocalContext().getSelectedTrackingPatient().getPatient().getIsQuickRegistrationPatient())));//WDEV-16987
		
		//wdev-16751  //WDEV-16987
		form.btnAssessmentDetails().setEnabled(isPatientSelected && form.getLocalContext().getSelectedTrackingPatientIsNotNull() ); //WDEV-17153, wdev-17273
		if( isPatientSelected && !isDischarged && form.getLocalContext().getSelectedTrackingPatientIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatusIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatusIsNotNull() &&  form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatus().equals(TrackingStatus.WAITING_TO_BE_TRIAGED)  )
		{
			form.btnAssessmentDetails().setText("Assessment Details");//WDEV-16987
		}
		else if( isPatientSelected && !isDischarged && form.getLocalContext().getSelectedTrackingPatientIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatusIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatusIsNotNull() &&  form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatus().equals(TrackingStatus.WAITING_TO_BE_SEEN_BY_A_MEDIC) )
		{
			form.btnAssessmentDetails().setText("Assessment Details");//WDEV-16987
		}
		//form.btnClinicianAssessmentWorklist().setEnabled(form.getLocalContext().getSelectedTrackingPatientIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatusIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatusIsNotNull() &&  form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatus().equals(TrackingStatus.WAITING_TO_BE_SEEN_BY_A_MEDIC) );
		//----------
		
		int calledAmount = -1;
		if(form.dyngrdTrack().getValue() instanceof TrackingVo && ((TrackingVo) form.dyngrdTrack().getValue()).getCurrentDNW() != null && ((TrackingVo) form.dyngrdTrack().getValue()).getCurrentDNW().getCurrentStatus() != null)
		{
			calledAmount = ((TrackingVo) form.dyngrdTrack().getValue()).getCurrentDNW().getCurrentStatus().getCalledAmount();
		}
		
		form.btnDNWMinus().setEnabled(isPatientSelected && !isDischarged && calledAmount >= 1 );//WDEV-17283
		
		form.GroupView().setVisible(form.grdTrackingCount().getValue() instanceof TrackingAreaForTrackingVo);
		form.GroupDisplay().setVisible(form.grdTrackingCount().getValue() instanceof TrackingAreaForTrackingVo && (Boolean.TRUE.equals(((TrackingAreaForTrackingVo)form.grdTrackingCount().getValue()).getIsOverallView())));//WDEV-16987
		form.lblDisplayPatientWhoAre().setVisible(form.grdTrackingCount().getValue() instanceof TrackingAreaForTrackingVo && (Boolean.TRUE.equals(((TrackingAreaForTrackingVo)form.grdTrackingCount().getValue()).getIsOverallView())));//WDEV-16987
		form.hzlGroupDisplay().setVisible(form.grdTrackingCount().getValue() instanceof TrackingAreaForTrackingVo && (Boolean.TRUE.equals(((TrackingAreaForTrackingVo)form.grdTrackingCount().getValue()).getIsOverallView())));//WDEV-16987
		
		//WDEV-15971
		form.imgP1().setVisible(form.dyngrdTrack().getRows().size()>0);
		form.imgP2().setVisible(form.dyngrdTrack().getRows().size()>0);
		form.imgP3().setVisible(form.dyngrdTrack().getRows().size()>0);
		form.imgP4().setVisible(form.dyngrdTrack().getRows().size()>0);
		form.imgP5().setVisible(form.dyngrdTrack().getRows().size()>0);
		form.imgST().setVisible(form.dyngrdTrack().getRows().size()>0);//WDEV-16987
		
		form.lblP1().setVisible(form.dyngrdTrack().getRows().size()>0);
		form.lblP2().setVisible(form.dyngrdTrack().getRows().size()>0);
		form.lblP3().setVisible(form.dyngrdTrack().getRows().size()>0);
		form.lblP4().setVisible(form.dyngrdTrack().getRows().size()>0);
		form.lblP5().setVisible(form.dyngrdTrack().getRows().size()>0);
		form.lblST().setVisible(form.dyngrdTrack().getRows().size()>0);//WDEV-16987
		
		updateContextMenu();	//wdev-16751		
		

		//WDEV-16987
		form.getContextMenus().Emergency.getTrackingTriageMenuEVENT_HISTORYItem().setVisible(isPatientSelected);
		form.getContextMenus().Emergency.getTrackingTriageMenuVIEW_HISTORYItem().setVisible(isPatientSelected);
		form.getContextMenus().Emergency.getTrackingTriageMenuTRANSFERItem().setVisible(isPatientSelected && !isDischarged && engine.hasRight(AppRight.ED_CAN_PERFORM_TRANSFER));//WDEV-17209
		form.getContextMenus().Emergency.getTrackingTriageMenuXRAYItem().setVisible(isPatientSelected && !isDischarged);
		form.getContextMenus().Emergency.getTrackingTriageMenuBED_STATUSItem().setVisible(false);
		form.getContextMenus().Emergency.getTrackingTriageMenuMOVEItem().setVisible(isPatientSelected && !isDischarged);
		form.getContextMenus().Emergency.getTrackingTriageMenuREFER_TOItem().setVisible(isPatientSelected && !isDischarged);
		form.getContextMenus().Emergency.getTrackingTriageMenuSEEN_COMPLETE_HCPItem().setVisible(isPatientSelected && !isDischarged);
		form.getContextMenus().Emergency.getTrackingTriageMenuALLOCATE_CUBICLEItem().setVisible(isPatientSelected && !isDischarged && !Boolean.TRUE.equals(isRegistration)); //wdev-16067
		form.getContextMenus().Emergency.getTrackingTriageMenuPAT_STATUSItem().setVisible(isPatientSelected && !isDischarged);
		form.getContextMenus().Emergency.getTrackingTriageMenuORDERItem().setVisible(isPatientSelected && !isDischarged);
		form.getContextMenus().Emergency.getTrackingTriageMenuRESULTItem().setVisible(isPatientSelected);
		form.getContextMenus().Emergency.getTrackingTriageMenuREFRESHItem().setVisible(true);
		form.getContextMenus().Emergency.getTrackingTriageMenuDNW_ADDItem().setVisible(isPatientSelected && !isDischarged);
		form.getContextMenus().Emergency.getTrackingTriageMenuDNW_MINUSItem().setVisible(isPatientSelected && !isDischarged && calledAmount >= 1);//WDEV-17720
		form.getContextMenus().Emergency.getTrackingTriageMenuDTAItem().setVisible(isPatientSelected && !isDischarged && engine.hasRight(AppRight.ED_CAN_PERFORM_ADMISSION) && (form.getLocalContext().getSelectedTrackingPatient()!=null && !Boolean.TRUE.equals(form.getLocalContext().getSelectedTrackingPatient().getPatient().getIsQuickRegistrationPatient())));
		
		form.getContextMenus().Emergency.getTrackingTriageMenuVIEW_TRIAGEItem().setVisible(isPatientSelected && isDischarged);//WDEV-17153
		
		form.btnRefresh().setVisible(true);
		form.btnRefresh().setEnabled(true);		
		
		form.btnWhiteBoard().setVisible(ConfigFlag.UI.WHITEBOARD_FUNCTIONALITY.getValue());//WDEV-17922
		
		//WDEV-17966
		updatePublicPrivateButtonText();		
	}
	//wdev-17604
	private void listDeniedActionForCurrentUser() 
	{
		
		
		AppFormForTrackingVo currentForm = domain.getFormMenuAction(engine.getFormName().getID());
		
		if(currentForm == null)
			return;
		
		IAppRole role = engine.getLoggedInRole();
		
		if(role == null)
			return;
		
		for(MenuActionVo menuAction : currentForm.getMenuActions())
		{
			if(menuAction == null)
				continue;
			
			if(!role.hasMenuActionRight(currentForm, menuAction))
			{
				showHidebuttons(menuAction.getID_MenuAction());
				
					
			}
		}
		
		
	}
	private void showHidebuttons(Integer menuaction)
	{
	
		if( M_EVENT_HISTORY ==  menuaction)
			form.btnEventHistory().setVisible(false);
		else if( M_VIEW_HISTORY == menuaction)	
			form.btnViewHistory().setVisible(false);
		else if( M_RESULTS == menuaction )
			form.btnResult().setVisible(false);
		else if( M_TRANSFER == menuaction )
			form.btnTransfer().setVisible(false);
		else if( M_REFER_TO == menuaction )
			form.btnRefer().setVisible(false);
		else if( M_X_RAY == menuaction )
			form.btnXray().setVisible(false);
		else if( M_ALLOCATE_CUB == menuaction )
			form.btnAllocatedCubicle().setVisible(false);
		else if( M_PAT_STATUS == menuaction )
			form.btnPatStatus().setVisible(false);
		else if( M_MOVE == menuaction )
			form.btnMove().setVisible(false);
		else if( M_DNW_PLUS == menuaction )
			form.btnDNWAdd().setVisible(false);
		else if( M_DNW_MINUS == menuaction )
			form.btnDNWMinus().setVisible(false);
		else if( M_ORDER == menuaction )
			form.btnOrder().setVisible(false);
		else if( M_SEEN_COMHCP == menuaction )
			form.btnSeenCompleteHCP().setVisible(false);
		else if( M_DTA == menuaction )
			form.btnDTA().setVisible(false);
		else if( M_ASSESSMENT_DETAILS == menuaction )
			form.btnAssessmentDetails().setVisible(false);
		else if( M_REFRESH == menuaction )
		{
			form.btnRefresh().setVisible(false);
		}
		else if( M_WHITE_BOARD == menuaction )
			form.btnWhiteBoard().setVisible(false);
		
	}
	//wdev-16751
	private void updateContextMenu()
	{
		boolean isPatientSelected = form.getGlobalContext().Core.getPatientShortIsNotNull() 
		&& form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull() 
		&& form.getGlobalContext().Core.getCurrentCareContextIsNotNull() 
		&& form.getGlobalContext().Emergency.getTracking() != null;
		
		form.getContextMenus().Emergency.hideAllTrackingTriageMenuMenuItems();
		//form.getContextMenus().Emergency.getTrackingTriageMenuTriageItem().setVisible(form.getLocalContext().getSelectedTrackingPatientIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatusIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatusIsNotNull() &&  form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatus().equals(TrackingStatus.WAITING_TO_BE_TRIAGED) );
		//form.getContextMenus().Emergency.getTrackingTriageMenuEDITTRIAGEItem().setVisible(form.getLocalContext().getSelectedTrackingPatientIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatusIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatusIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatus().equals(TrackingStatus.WAITING_TO_BE_SEEN_BY_A_MEDIC));
		form.getContextMenus().Emergency.getTrackingTriageMenuASSESSMENT_DETAILSItem().setVisible(isPatientSelected && form.getLocalContext().getSelectedTrackingPatientIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatusIsNotNull() );	//wdev-17273 
		//form.getContextMenus().Emergency.getTrackingMenuCLINICIANASSESSMENTWORKLISTItem().setVisible(form.getLocalContext().getSelectedTrackingPatientIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatusIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatusIsNotNull() && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatus().equals(TrackingStatus.WAITING_TO_BE_SEEN_BY_A_MEDIC));	
	}

	private void trackingSelectionChanged() 
	{
		if(!(form.dyngrdTrack().getValue() instanceof TrackingVo))
			return;
	
		form.getLocalContext().setSelectedTrackingPatient(domain.getTrackingVo((TrackingVo) form.dyngrdTrack().getValue()));  //wdev-16751
		
		TrackingVo tracking = (TrackingVo) form.dyngrdTrack().getValue();
		
		form.getLocalContext().setCurentAreaOfPatient(domain.getTrackingAreaForTracking(tracking));  	//wdev-16067
		
		setContext(tracking);
	}

	private void setContext(TrackingVo tracking) 
	{
		clearContext();
		
		if(tracking == null)
			return;
		
		form.getGlobalContext().Emergency.setTracking(tracking);
		
		if(tracking.getPatient() != null)
		{
			PatientShort patientShort = new PatientShort(tracking.getPatient().getID_Patient(), tracking.getPatient().getVersion_Patient());
			form.getGlobalContext().Core.setPatientShort(patientShort);
		}
		
		if(tracking.getEpisode() != null && tracking.getEpisode().getEpisodeOfCare() != null)
		{
			form.getGlobalContext().Core.setEpisodeofCareShort(domain.getEpisodeOfCare(tracking.getEpisode().getEpisodeOfCare()));
		}
		
		if(tracking.getAttendance() != null && tracking.getAttendance().getCareContext() != null)
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(tracking.getAttendance().getCareContext()));
		}
		
		refreshPIDBarText();//WDEV-17332
	}

	//WDEV-17332
	private void refreshPIDBarText()
	{
		if (form.getGlobalContext().Core.getPatientShort() == null
				|| form.getGlobalContext().Core.getCurrentCareContext()==null 	
				|| form.getGlobalContext().Core.getEpisodeofCareShort()==null)
				return;

			new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getEpisodeofCareShort()));
	}

	private void clearContext() 
	{
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setEpisodeofCareShort(null);
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().Emergency.setTracking(null);
	}

	@Override
	protected void onRadioButtonGroupViewValueChanged()	throws PresentationLogicException 
	{
		populateTrackingGrid();
		updateControlsState();
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException 
	{
		if(timer.equals(form.getTimers().getAreaCountRefrresh()))
		{
			populateEDs(form.chkAllSites().getValue());
			
			populateTrackingGrid();						//wdev-17613
		}
		/*else if(timer.equals(form.getTimers().getPatientRefresh()))
		{
			populateTrackingGrid();
			System.out.println("patient refresh");
		}*/
		
		updateControlsState();
	}

	@Override
	protected void onBtnResultClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.AttendanceResultListDialog);
	}

	@Override
	protected void onBtnOrderClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().OCRR.SelectAndOrderDialog);
	}

	@Override
	protected void onBtnDNWAddClick() throws PresentationLogicException 
	{
		if(updateDNWStatus(1))
		{
			populateEDs(form.chkAllSites().getValue());
			populateTrackingGrid();
		}
		
		updateControlsState();
	}

	private boolean updateDNWStatus(int calledAmountIncrease) 
	{
		if(!(form.dyngrdTrack().getValue() instanceof TrackingVo))
			return false;
		
		TrackingSaveVo trackingWithDNW = domain.getTracking((TrackingVo) form.dyngrdTrack().getValue());
		
		if(trackingWithDNW == null)
			return false;
		
		//wdev-15897
		TrackingVo tempTrackingVo = (TrackingVo)form.dyngrdTrack().getValue(); //wdev-15897
		if( tempTrackingVo.getVersion_Tracking() != trackingWithDNW.getVersion_Tracking() && trackingWithDNW.getCurrentDNW().getCurrentStatus().getCalledAmount() == ConfigFlag.DOM.AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER.getValue())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		//---------
		trackingWithDNW.setCurrentDNW(populateDNWRecord(trackingWithDNW.getCurrentDNW(), calledAmountIncrease));
		
		if(trackingWithDNW.getCurrentDNW().getCurrentStatus().getCalledAmount() == ConfigFlag.DOM.AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER.getValue()) //wdev-15897
		{
			trackingWithDNW = dischargePatient(trackingWithDNW);
		}
		
		String[] errors = trackingWithDNW.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			domain.saveTracking(trackingWithDNW);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
		} 
		catch (UniqueKeyViolationException e) 
		{
			e.printStackTrace();
		}
		
		return true;
	}

	private TrackingSaveVo dischargePatient(TrackingSaveVo trackingWithDNW) 
	{
		if(trackingWithDNW != null)
		{
			if(trackingWithDNW.getAttendance() != null)
			{
				trackingWithDNW.getAttendance().setDischargeDateTime(new DateTime());
				trackingWithDNW.getAttendance().setOutcome(AttendanceOutcome.DID_NOT_WAIT);
				
				if(trackingWithDNW.getAttendance().getCareContext() != null)
				{
					trackingWithDNW.getAttendance().getCareContext().setEndDateTime(new DateTime());
				}
				
				//WDEV-17283
				if (trackingWithDNW.getAssociatedPendingEmergencyAdmissionIsNotNull())
				{
					trackingWithDNW.getAssociatedPendingEmergencyAdmission().setAdmissionStatus(EmergencyAdmissionStatus.CANCELLED);
				}
			}
			
			trackingWithDNW.setCurrentArea(null);
			trackingWithDNW.setIsDischarged(true);
			trackingWithDNW.setCurrentStatus(createTrackingStatus(TrackingStatus.DISCHARGED));
		}
		
		return trackingWithDNW;
	}

	private TrackingAttendanceStatusVo createTrackingStatus(TrackingStatus status) 
	{
		TrackingAttendanceStatusVo dischargeStatus = new TrackingAttendanceStatusVo();
		
		dischargeStatus.setPatient(form.getGlobalContext().Core.getPatientShort());
		dischargeStatus.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		dischargeStatus.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		dischargeStatus.setTrackingArea(form.grdTrackingCount().getValue() instanceof TrackingAreaForTrackingVo ? (TrackingAreaForTrackingVo) form.grdTrackingCount().getValue() : null);
		dischargeStatus.setStatusDatetime(new DateTime());
		dischargeStatus.setCreatedBy(form.getLocalContext().getLoggedMosRef());
		dischargeStatus.setStatus(status);
		//WDEV-16777
		dischargeStatus.setPrevStatus((form.getLocalContext().getSelectedTrackingPatient()!=null && form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus()!=null  ) ? form.getLocalContext().getSelectedTrackingPatient().getCurrentStatus().getStatus() : null);
		dischargeStatus.setPrevTrackingArea(form.getLocalContext().getSelectedTrackingPatient().getCurrentArea());//WDEV-17119
		
		return dischargeStatus;
	}

	private DNWForTrackingSaveVo populateDNWRecord(DNWForTrackingSaveVo currentDNW, int calledAmountIncrease) 
	{	
		int calledAmount = (currentDNW != null && currentDNW.getCurrentStatus() != null) ? currentDNW.getCurrentStatus().getCalledAmount() + calledAmountIncrease : calledAmountIncrease;
		
		if(currentDNW == null)
			currentDNW = new DNWForTrackingSaveVo();
		
		currentDNW.setPatient(form.getGlobalContext().Core.getPatientShort());
		currentDNW.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		currentDNW.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		currentDNW.setTrackingArea(form.grdTrackingCount().getValue() instanceof TrackingAreaForTrackingVo ? (TrackingAreaForTrackingVo) form.grdTrackingCount().getValue() : null);
		
		DNWStatusForTrackingSaveVo currentDNWStatus = createDNWStatus(calledAmount);
		
		currentDNW.setCurrentStatus(currentDNWStatus);
		
		if(currentDNW.getStatusHistory() == null)
			currentDNW.setStatusHistory(new DNWStatusForTrackingSaveVoCollection());
		
		currentDNW.getStatusHistory().add(currentDNWStatus);
		
		return currentDNW;
	}

	private DNWStatusForTrackingSaveVo createDNWStatus(int calledAmount) 
	{
		DNWStatusForTrackingSaveVo dnwStatus = new DNWStatusForTrackingSaveVo();
		
		dnwStatus.setCalledAmount(calledAmount);
		dnwStatus.setStatusDateTime(new DateTime());
		dnwStatus.setArea(form.grdTrackingCount().getValue() instanceof TrackingAreaForTrackingVo ? (TrackingAreaForTrackingVo) form.grdTrackingCount().getValue() : null);
		dnwStatus.setAuthoringUser(form.getLocalContext().getLoggedMosRef());
		
		return dnwStatus;
	}

	@Override
	protected void onBtnDNWMinusClick() throws PresentationLogicException 
	{
		if(updateDNWStatus(-1))
		{
			populateEDs(form.chkAllSites().getValue());
			populateTrackingGrid();
		}
		
		updateControlsState();
	}

	@Override
	protected void onBtnAllocatedCubicleClick()	throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.AllocateCubicle);
	}

	@Override
	protected void onBtnMoveClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.SendToAreaDialog, new Object[] {Boolean.TRUE});
	}

	@Override
	protected void onDyngrdTrackCellButtonClicked(DynamicGridCell cell) 
	{
		if(cell == null || cell.getRow() == null || cell.getColumn() == null)
			return;
		
		form.dyngrdTrack().setValue(cell.getRow().getValue());
		
		trackingSelectionChanged();
		updateControlsState();
		
		if(TrackingAreaColumn.CUBICLE.equals(cell.getColumn().getIdentifier()))
		{
			engine.open(form.getForms().Emergency.AllocateCubicle);
		}
		else if(TrackingAreaColumn.REFERRAL_SPECIALTY.equals(cell.getColumn().getIdentifier()))
		{
			engine.open(form.getForms().Emergency.EDReferralToSpecialtyDialog);//WDEV-16777
		}
		else if(TrackingAreaColumn.SEEN_BY_HCP.equals(cell.getColumn().getIdentifier()))//WDEV-16816
		{
			engine.open(form.getForms().Emergency.EDSeenByAndCompleteDialog);//WDEV-16816
		}
	}
	
	private Integer getOrderByIndex(TriagePriority priority)
	{
		for(TriagePriorityEnum item : TriagePriorityEnum.values())
		{
			if(item.getIndex().equals(priority))
				return item.getOrder();
		}
		
		return null;
	}
	
	class TrackingComparator implements Comparator<TrackingVo>
	{
		public int compare(TrackingVo o1, TrackingVo o2)
		{
			if (o1 != null && o1.getTriageDetails() != null && o1.getTriageDetails().getCurrentTriagePriority() != null && o2!=null && o2.getTriageDetails() != null && o2.getTriageDetails().getCurrentTriagePriority() != null)
			{
				Integer priorityOrder1 = getOrderByIndex(o1.getTriageDetails().getCurrentTriagePriority());
				Integer priorityOrder2 = getOrderByIndex(o2.getTriageDetails().getCurrentTriagePriority());
				
				int orderByPriority = 0;	//wdev-17215 - the code was crashed here when priorityOrder1 == null or priorityOrder2 == null  				
				if( priorityOrder1 != null && priorityOrder2 != null ) //wdev-17215
					orderByPriority = priorityOrder1.compareTo(priorityOrder2);
				
				if(orderByPriority == 0)
				{
					return compareByLOS(o1, o2);
				}
				
				return orderByPriority;
			}
			
			if((o1 == null || o1.getTriageDetails() == null || o1.getTriageDetails().getCurrentTriagePriority() == null) && (o2 == null || o2.getTriageDetails() == null || o2.getTriageDetails().getCurrentTriagePriority() == null))
				return compareByLOS(o1, o2);
			
			if (o1 == null || o1.getTriageDetails() == null || o1.getTriageDetails().getCurrentTriagePriority() == null)
				return 1;
			
			if (o2 == null || o2.getTriageDetails() == null || o2.getTriageDetails().getCurrentTriagePriority() == null)
				return -1;
			
			return 0;
		}

		private int compareByLOS(TrackingVo o1, TrackingVo o2) 
		{
			if(o1 != null && o1.getAttendance() != null && o1.getAttendance().getLengthOfStay() != null && o2 != null && o2.getAttendance() != null && o2.getAttendance().getLengthOfStay() != null)
			{
				int orderByLOS = -1 * o1.getAttendance().getLengthOfStay().compareTo(o2.getAttendance().getLengthOfStay());
				
				if(orderByLOS == 0)
				{
					return compareByName(o1, o2);
				}
				
				return orderByLOS;
			}
			
			if (o1 == null || o1.getAttendance() == null || o1.getAttendance().getLengthOfStay() == null)
				return -1;
			
			if (o2 == null || o2.getAttendance() == null || o2.getAttendance().getLengthOfStay() == null)
				return 1;
			
			return 0;
		}

		private int compareByName(TrackingVo o1, TrackingVo o2) 
		{
			if(o1 != null && o1.getPatient() != null && o1.getPatient().getName() != null && o2 != null && o2.getPatient() != null && o2.getPatient().getName() != null)
			{
				return o1.getPatient().getName().compareTo(o2.getPatient().getName(), true);
			}
			
			if (o1 == null || o1.getPatient() == null || o1.getPatient().getName() == null)
				return -1;
			
			if (o2 == null || o2.getPatient() == null || o2.getPatient().getName() == null)
				return 1;
			
			return 0;
		}
	}

	@Override
	protected void onChkAllSitesValueChanged() throws PresentationLogicException 
	{
		if(!form.chkAllSites().getValue())
		{
			ILocation currentLocation = engine.getCurrentLocation();
			if(currentLocation != null)
			{
				form.getLocalContext().setAttendanceKPIConfig(domain.getAttendanceKPIConfig(currentLocation));
			}
		}
		
		form.grdTrackingCount().setColAreaCaption(form.chkAllSites().getValue() ? "ED/Area" : "Area");
		populateEDs(form.chkAllSites().getValue());
		updateControlsState();//WDEV-16987 
	}

	private void populateEDs(boolean all) 
	{
		if(!all)
		{
			ILocation currentLocation = engine.getCurrentLocation();
			populateTrackingCount(currentLocation, null);
		}
		else
		{
			form.grdTrackingCount().getRows().clear();
			int total = 0;
			
			LocationLiteVoCollection eds = domain.listAllEDs();
			
			for(LocationLiteVo ed : eds)
			{
				total += addEDRow(ed);
			}
			
			grdTrackingCountRow totalRow = form.grdTrackingCount().getRows().newRow();
			totalRow.setColArea("Total");
			totalRow.setColNumberOfPatients(total);
			totalRow.setSelectable(false);
			totalRow.setBold(true);
		}
	}

	private int addEDRow(LocationLiteVo ed) 
	{
		if(ed == null)
			return 0;
		
		grdTrackingCountRow row = form.grdTrackingCount().getRows().newRow();
		row.setBold(true);
		row.setColArea(ed.getName());
		row.setTooltipForColArea(ed.getName());//WDEV-17301
		row.setValue(ed);
		row.setSelectable(false);
		row.setExpanded(true);
		
		return populateTrackingCount(ed, row);
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(form.getForms().Emergency.EDAssessmentComponent.equals(formName))			//wdev-16751
		{
			if(	DialogResult.OK.equals(result))
			{
				
				if(	OpenFormFromNewTriageComponent.TRACKINGSUMMARY.equals(form.getGlobalContext().Emergency.getNewTriageComponentOpenForm()))
				{
					form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
					engine.open(form.getForms().Emergency.TrackingSummary);
					
				}
				else if(OpenFormFromNewTriageComponent.TRACKING.equals(form.getGlobalContext().Emergency.getNewTriageComponentOpenForm()))
				{
					form.getGlobalContext().Emergency.setNewTriageComponentOpenForm(null);
					engine.open(form.getForms().Emergency.Tracking);
					
				}
				
			}
		}
		else if( form.getForms().Emergency.TransferDialog.equals(formName)) 		//wdev-16867
		{
			if(	DialogResult.OK.equals(result))
			{
				TrackingSaveVo trackingWithDNW = domain.getTracking((TrackingVo) form.dyngrdTrack().getValue());
			
				if( trackingWithDNW != null && !trackingWithDNW.getCurrentTransferRecordIsNotNull() && form.getGlobalContext().Emergency.getEDTransferVoIsNotNull())
				{
					trackingWithDNW.setCurrentTransferRecord(form.getGlobalContext().Emergency.getEDTransferVo());
					String[] errors = trackingWithDNW.validate();
					if(errors != null && errors.length > 0)
					{
						engine.showErrors(errors);
						return;
					}
					
					try 
					{
						domain.saveTracking(trackingWithDNW);
					} 
					catch (StaleObjectException e) 
					{
						e.printStackTrace();
					} 
					catch (UniqueKeyViolationException e) 
					{
						e.printStackTrace();
					}
					
				}
					
			}
		}
		
		open();
	}

	@Override
	protected void onBtnRefreshClick() throws PresentationLogicException 
	{
		open();
	}

	@Override
	protected void onBtnViewHistoryClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.AttendanceHistory);
	}

	@Override
	protected void onBtnEventHistoryClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.EventHistoryDialog);
	}

	@Override
	protected void onBtnPatStatusClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.TrackingStatusDialog);
	}

	@Override
	//WDEV-15819
	protected void onDyngrdTrackColumnHeaderClicked(DynamicGridColumn column)
	{
		TrackingVoCollection patients = form.getLocalContext().getTrackingPatients();
		
		if(patients == null || patients.size() == 0)//WDEV-17310
			return;
		
		alternateSortOrder(column);
		patients.sort(new TrackingPatientsComparator((TrackingAreaColumn) column.getIdentifier(), form.getLocalContext().getSortOrder().getSortOrder()));
		populateRecordsToGrid(form.getLocalContext().getTrackingPatients());
	}

	//WDEV-15819
	private void alternateSortOrder(DynamicGridColumn column)
	{
		if (form.getLocalContext().getSortOrder() == null)
		{
			form.getLocalContext().setSortOrder(new TrackingColumnsSortOrderVo());
		}
		
		if (column.getIdentifier().equals(form.getLocalContext().getSortOrder().getColumnType()))
		{
			if (Boolean.TRUE.equals(form.getLocalContext().getSortOrder().getSortOrder()))
			{
				form.getLocalContext().getSortOrder().setSortOrder(false);
			}
			else
			{
				form.getLocalContext().getSortOrder().setSortOrder(true);
			}
		}
		else
		{
			form.getLocalContext().getSortOrder().setColumnType((TrackingAreaColumn) column.getIdentifier());
			form.getLocalContext().getSortOrder().setSortOrder(true);
		}
	}
	
	//WDEV-15819
	private void populateRecordsToGrid(TrackingVoCollection trackingPatients)
	{
		form.dyngrdTrack().getRows().clear();
		
		for(TrackingVo trackingPatient : trackingPatients)
		{
			addTrackingPatientRow(trackingPatient);
		}
		
		form.dyngrdTrack().setValue(form.getLocalContext().getSelectedTrackingPatient());
		
		trackingSelectionChanged();
	}

	//wdev-16751
	private HcpDisType getParentNodeHcp(HcpDisType hcpvo)
	{
		if(hcpvo == null)
			return null;
		if(hcpvo.getParent() == null)
			return hcpvo;
		else
			return getParentNodeHcp(hcpvo.getParent());
		
	}
	//wdev-16751
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		
		switch (menuItemID)
		{
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.Triage :
				openEDAssessmentDialog();
				break;
				
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.ASSESSMENT_DETAILS:		//wdev-16751
				openEDAssessmentDialog();
				break;
				
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.EDITTRIAGE:
				openEDAssessmentDialog();
				//tempVo = domain.getTrackingForClinicianWorklistAndTriageVo(form.getLocalContext().getSelectedTrackingPatient());
				//engine.open(form.getForms().Emergency.EDAssessmentComponent, new Object[] {DISPLAY_CLINICIANASSESSMNRWORKLIST,tempVo},"Clinician Assessment Worklist");
				break;
			//WDEV-17153
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.VIEW_TRIAGE :
				TrackingForClinicianWorklistAndTriageVo tempVo = domain.getTrackingForClinicianWorklistAndTriageVo(form.getLocalContext().getSelectedTrackingPatient());
				engine.open(form.getForms().Emergency.EDAssessmentDialog, new Object[] {DISPLAY_TRIAGE_FROM_TRACKING,tempVo},"Triage");		//wdev-17405
			break;	
			//WDEV-16987
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.EVENT_HISTORY :
				onBtnEventHistoryClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.VIEW_HISTORY :
				onBtnViewHistoryClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.TRANSFER :
				onBtnTransferClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.DTA :
				onBtnDTAClick();
			break;
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.XRAY :
				onBtnXrayClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.MOVE :
				onBtnMoveClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.REFER_TO :
				onBtnReferClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.SEEN_COMPLETE_HCP :
				onBtnSeenCompleteHCPClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.ALLOCATE_CUBICLE :
				onBtnAllocatedCubicleClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.PAT_STATUS :
				onBtnPatStatusClick();
			break;
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.ORDER :
				onBtnOrderClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.RESULT :
				onBtnResultClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.REFRESH :
				onBtnRefreshClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.DNW_ADD :
				onBtnDNWAddClick();
			break;	
			case ims.emergency.forms.tracking.GenForm.ContextMenus.EmergencyNamespace.TrackingTriageMenu.DNW_MINUS :
				onBtnDNWMinusClick();
			break;	
				
		}
		
	}
	//wdev-16751
	private void openEDAssessmentDialog()
	{
		TrackingForClinicianWorklistAndTriageVo tempVo = domain.getTrackingForClinicianWorklistAndTriageVo(form.getLocalContext().getSelectedTrackingPatient());
		
		//wdev-17309
		if( tempVo != null )
		{
			if( tempVo.getTriageDetailsIsNotNull() )
				engine.open(form.getForms().Emergency.EDAssessmentDialog, new Object[] {DISPLAY_CLINICIANASSESSMNRWORKLIST,tempVo},"Clinician Assessment Worklist");
			else
				engine.open(form.getForms().Emergency.EDAssessmentDialog, new Object[] {DISPLAY_TRIAGE_FROM_TRACKING,tempVo},"Triage");		//wdev-17405
				
		}
		
	}

	//WDEV-16816
	protected void onBtnSeenCompleteHCPClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.EDSeenByAndCompleteDialog);
	}

	//WDEV-16987
	@Override
	protected void onBtnAssessmentDetailsClick() throws PresentationLogicException
	{
		openEDAssessmentDialog();
	}

	//WDEV-16987
	@Override
	protected void onRadioButtonGroupDisplayValueChanged() throws PresentationLogicException
	{
		populateTrackingGrid();
		updateControlsState();
	}

	//WDEV-16987
	@Override
	protected void onBtnTransferClick() throws PresentationLogicException
	{
		//wdev-16867
		TrackingWithPartialAdmissionVo trackingWithDNW = domain.getTrackingWithEDPartialAdmission((TrackingVo) form.dyngrdTrack().getValue());
		if( trackingWithDNW != null )
			form.getGlobalContext().Emergency.setEDTransferVo(trackingWithDNW.getCurrentTransferRecord());
		
		if( trackingWithDNW.getCurrentPartialAdmissionIsNotNull() && !AllocationStatus.CANCELLED_ADMISSION.equals(trackingWithDNW.getCurrentPartialAdmission().getAllocatedStatus()))
		{
			form.getLocalContext().setPartialAdmissionForTrackingVo(trackingWithDNW.getCurrentPartialAdmission());
			form.getLocalContext().setDTAWithTransferMessageId(engine.showMessage("A decision to admit record exists for this patient. If you proceed to Transfer the patient, the record will be cancelled on the ED system and the PAS system. Are you sure you want to continue?","Confirm Transfer" ,MessageButtons.YESNO, MessageIcon.QUESTION));
		}
		else
			engine.open(form.getForms().Emergency.TransferDialog);
		//------------
		
	}
	
	//WDEV-16987
	@Override
	protected void onBtnDTAClick() throws PresentationLogicException
	{
		//WDEV-17661
		if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING"))
		{
			engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog, new Object[] {form.getLocalContext().getSelectedTrackingPatient()});
		}
		else if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PARTIAL")) 
		{
			engine.open(form.getForms().Emergency.EDPartialAdmissionDialog, new Object[] {form.getLocalContext().getSelectedTrackingPatient()});
		}
	}

	//wdev-16867
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if( form.getLocalContext().getDTAWithTransferMessageId() != null && messageBoxId == form.getLocalContext().getDTAWithTransferMessageId())
		{
			if( DialogResult.YES.equals(result))
			{
				 
				engine.open(form.getForms().Emergency.TransferDialog, new Object[] { form.getLocalContext().getPartialAdmissionForTrackingVo()});
			}
			else
				form.getGlobalContext().Emergency.setEDTransferVo(null);
			
			form.getLocalContext().setDTAWithTransferMessageId(null);
			form.getLocalContext().setPartialAdmissionForTrackingVo(null);
				
		}
	}

	//WDEV-17966
	@Override
	protected void onBtnPublicPrivateAreaClick() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setTrackingPublicArea(!form.getGlobalContext().Emergency.getTrackingPublicArea());
		populateTrackingGrid();
		updatePublicPrivateButtonText();
	}

	//WDEV-17966
	private void updatePublicPrivateButtonText()
	{
		form.btnPublicPrivateArea().setText(Boolean.FALSE.equals(form.getGlobalContext().Emergency.getTrackingPublicArea()) ? "Public Area" : "Private Area" );
	}
}
