//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.systemreviewnotesdialog;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.SystemReviewVo;
import ims.emergency.vo.SystemReviewVoCollection;
import ims.framework.enumerations.DialogResult;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
	}

	private void initialise()
	{
		showHideTabs();
		initialiseTabs();
	}

	private void initialiseTabs()
	{
		
		Integer noOfSystems = form.getGlobalContext().Emergency.getSystemReviewCollection().size();
		SystemReviewVoCollection systemsColl = form.getGlobalContext().Emergency.getSystemReviewCollection();

		if (noOfSystems >= 1)
		{
			form.lyrSystemReview().tab1().ccSystem1().initialise();
			form.lyrSystemReview().tab1().ccSystem1().setValue(systemsColl.get(0));
			form.lyrSystemReview().tab1().setCaption(systemsColl.get(0).getSystems().getText());
		}

		if (noOfSystems >= 2)
		{
			form.lyrSystemReview().tab2().ccSystem2().initialise();
			form.lyrSystemReview().tab2().ccSystem2().setValue(systemsColl.get(1));
			form.lyrSystemReview().tab2().setCaption(systemsColl.get(1).getSystems().getText());
		}

		if (noOfSystems >= 3)
		{
			form.lyrSystemReview().tab3().ccSystem3().initialise();
			form.lyrSystemReview().tab3().ccSystem3().setValue(systemsColl.get(2));
			form.lyrSystemReview().tab3().setCaption(systemsColl.get(2).getSystems().getText());
		}

		if (noOfSystems >= 4)
		{
			form.lyrSystemReview().tab4().ccSystem4().initialise();
			form.lyrSystemReview().tab4().ccSystem4().setValue(systemsColl.get(3));
			form.lyrSystemReview().tab4().setCaption(systemsColl.get(3).getSystems().getText());
		}

		if (noOfSystems >= 5)
		{
			form.lyrSystemReview().tab5().ccSystem5().initialise();
			form.lyrSystemReview().tab5().ccSystem5().setValue(systemsColl.get(4));
			form.lyrSystemReview().tab5().setCaption(systemsColl.get(4).getSystems().getText());
		}

		if (noOfSystems >= 6)
		{
			form.lyrSystemReview().tab6().ccSystem6().initialise();
			form.lyrSystemReview().tab6().ccSystem6().setValue(systemsColl.get(5));
			form.lyrSystemReview().tab6().setCaption(systemsColl.get(5).getSystems().getText());
		}

		if (noOfSystems >= 7)
		{
			form.lyrSystemReview().tab7().ccSystem7().initialise();
			form.lyrSystemReview().tab7().ccSystem7().setValue(systemsColl.get(6));
			form.lyrSystemReview().tab7().setCaption(systemsColl.get(6).getSystems().getText());
		}

		if (noOfSystems >= 8)
		{
			form.lyrSystemReview().tab8().ccSystem8().initialise();
			form.lyrSystemReview().tab8().ccSystem8().setValue(systemsColl.get(7));
			form.lyrSystemReview().tab8().setCaption(systemsColl.get(7).getSystems().getText());
		}

		if (noOfSystems >= 9)
		{
			form.lyrSystemReview().tab9().ccSystem9().initialise();
			form.lyrSystemReview().tab9().ccSystem9().setValue(systemsColl.get(8));
			form.lyrSystemReview().tab9().setCaption(systemsColl.get(8).getSystems().getText());
		}

		if (noOfSystems >= 10)
		{
			form.lyrSystemReview().tab10().ccSystem10().initialise();
			form.lyrSystemReview().tab10().ccSystem10().setValue(systemsColl.get(9));
			form.lyrSystemReview().tab10().setCaption(systemsColl.get(9).getSystems().getText());
		}

		if (noOfSystems >= 11)
		{
			form.lyrSystemReview().tab11().ccSystem11().initialise();
			form.lyrSystemReview().tab11().ccSystem11().setValue(systemsColl.get(10));
			form.lyrSystemReview().tab11().setCaption(systemsColl.get(10).getSystems().getText());
		}

		if (noOfSystems >= 12)
		{
			form.lyrSystemReview().tab12().ccSystem12().initialise();
			form.lyrSystemReview().tab12().ccSystem12().setValue(systemsColl.get(11));
			form.lyrSystemReview().tab12().setCaption(systemsColl.get(11).getSystems().getText());
		}
	}

	private void showHideTabs()
	{
		Integer noOfSystems = form.getGlobalContext().Emergency.getSystemReviewCollection().size();

		form.lyrSystemReview().tab1().setHeaderVisible(noOfSystems >= 1);
		form.lyrSystemReview().tab2().setHeaderVisible(noOfSystems >= 2);
		form.lyrSystemReview().tab3().setHeaderVisible(noOfSystems >= 3);
		form.lyrSystemReview().tab4().setHeaderVisible(noOfSystems >= 4);
		form.lyrSystemReview().tab5().setHeaderVisible(noOfSystems >= 5);
		form.lyrSystemReview().tab6().setHeaderVisible(noOfSystems >= 6);
		form.lyrSystemReview().tab7().setHeaderVisible(noOfSystems >= 7);
		form.lyrSystemReview().tab8().setHeaderVisible(noOfSystems >= 8);
		form.lyrSystemReview().tab9().setHeaderVisible(noOfSystems >= 9);
		form.lyrSystemReview().tab10().setHeaderVisible(noOfSystems >= 10);
		form.lyrSystemReview().tab11().setHeaderVisible(noOfSystems >= 11);
		form.lyrSystemReview().tab12().setHeaderVisible(noOfSystems >= 12);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		save();
	}

	private void save()
	{
		SystemReviewVoCollection records = populateDataFromScreen();
		
		SystemReviewVoCollection activeNotes =  new SystemReviewVoCollection();
		
		if (form.getGlobalContext().Emergency.getSystemReviewCollection().size() > 0)
		{
			activeNotes = domain.getAllActiveSystemNotes(form.getGlobalContext().Emergency.getSystemReviewCollection().get(0).getAttendance());
		}
		
		Boolean isStale = false;
		
		//check if another user has already saved one of the notes you want to save and throw stale
		if (activeNotes != null)
		{
			for (int a = 0; a < activeNotes.size(); a++)
			{
				for (int b = 0; b < records.size(); b++)
				{
					if (activeNotes.get(a).getSystems() != null && records.get(b).getSystems() != null && activeNotes.get(a).getSystems().equals(records.get(b).getSystems()))
					{
						records.remove(records.get(b));
						isStale = Boolean.TRUE;
					}
				}
			}
		}

		String[] errors = records.validate();

		if (errors == null) // if there are no errors, check at least one note is completed
		{
			errors = validateUiRules(records, isStale);
		}

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		try
		{
			domain.saveSystemsReview(records);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		if (isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		engine.close(DialogResult.OK);
	}

	private String[] validateUiRules(SystemReviewVoCollection records, Boolean isStale)
	{

		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (records.size() == 0 && !isStale)
		{
			listOfErrors.add("Please complete at least one note.");
		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);
		
		return result;
	}

	private SystemReviewVoCollection populateDataFromScreen()
	{
		SystemReviewVoCollection systemsCollToSave = new SystemReviewVoCollection();
		
		if (form.lyrSystemReview().tab1().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab1().ccSystem1().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab2().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab2().ccSystem2().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab3().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab3().ccSystem3().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab4().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab4().ccSystem4().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab5().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab5().ccSystem5().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab6().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab6().ccSystem6().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab7().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab7().ccSystem7().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab8().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab8().ccSystem8().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab9().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab9().ccSystem9().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab10().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab10().ccSystem10().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab11().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab11().ccSystem11().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		if (form.lyrSystemReview().tab12().isHeaderVisible())
		{
			SystemReviewVo system = form.lyrSystemReview().tab12().ccSystem12().getValue();
			
			if (system.getSystemReviewNote() != null && system.getSystemReviewNote() != "")
			{
				systemsCollToSave.add(system);
			}
		}
		
		return systemsCollToSave;
	}
}
