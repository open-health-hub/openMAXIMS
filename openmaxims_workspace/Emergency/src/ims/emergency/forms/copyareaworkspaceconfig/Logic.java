//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.copyareaworkspaceconfig;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.ColumnDetailVoCollection;
import ims.emergency.vo.TrackingAreaVo;
import ims.emergency.vo.TrackingAreaVoCollection;
import ims.emergency.vo.TrackingConfigurationVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args != null)
		{
			if (args.length == 1 && args[0] != null && args[0] instanceof Boolean)
			{
				form.getLocalContext().setdialogOpenArgument((Boolean) args[0]);
			}
		}
		else
			form.getLocalContext().setdialogOpenArgument(null);

		clearControls();
		populateEmergencyCombo();
		updateControlsState();
		form.getLocalContext().setcurrentTrackingConfig(domain.getTrackingConfig(form.getGlobalContext().Emergency.getEDLocation()));
	}

	private void clearControls()
	{
		form.cmbEmergencyDep().setValue(null);
		form.cmbArea().setValue(null);
	}

	private void updateControlsState()
	{
		form.cmbEmergencyDep().setEnabled(true);
		form.cmbArea().setEnabled(form.cmbEmergencyDep().getValue() != null);
		form.btnCopy().setEnabled(form.cmbArea().getValue() != null);
	}

	private void populateEmergencyCombo()
	{
		LocationLiteVoCollection collLocations = domain.listEmergencyDepartments();
		if (collLocations == null)
			return;

		for (int i = 0; i < collLocations.size(); i++)
		{
			form.cmbEmergencyDep().newRow(collLocations.get(i), collLocations.get(i).getName());
		}

	}

	@Override
	protected void onBtnCopyClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getdialogOpenArgument() == null)
		{
			if (save())
				engine.close(DialogResult.OK);
		}
		else if (form.getLocalContext().getdialogOpenArgument() == true)
		{
			form.getGlobalContext().Emergency.setTrackingAreaColumns(populateColumnsToBeCopied(form.cmbArea().getValue()));
			engine.close(DialogResult.OK);
		}
	}

	private ColumnDetailVoCollection populateColumnsToBeCopied(TrackingAreaVo trackingArea)
	{
		ColumnDetailVoCollection collColumns = trackingArea.getColumns();
		for (int i = 0; i < collColumns.size(); i++)
		{
			collColumns.get(i).setID_ColumnDetail(null);
		}
		return collColumns;
	}

	private boolean save()
	{
		TrackingAreaVo areaToAdd = form.cmbArea().getValue();

		// If Area selected is Registration or Overall, should be copied only ColumnnDefinitions over the Registration or Overall for the Selected EmergencyDepartment
		if (areaToAdd.getIsRegistrationArea() || areaToAdd.getIsOverallView())
		{
			TrackingAreaVo trackingAreaToSave = populateTrackingArea(areaToAdd);

			String[] errors = trackingAreaToSave.validate();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			try
			{
				domain.saveTrackinConfig(null, trackingAreaToSave);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				engine.close(DialogResult.ABORT);
				return false;
			}

		}
		else
		{
			TrackingConfigurationVo trackingConfigToSave = populateTrackingConfig(areaToAdd);

			String[] errors = trackingConfigToSave.validate();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			try
			{
				domain.saveTrackinConfig(trackingConfigToSave, null);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				engine.close(DialogResult.ABORT);
				return false;
			}
		}
		return true;
	}

	private TrackingAreaVo populateTrackingArea(TrackingAreaVo areaToAdd)
	{
		TrackingConfigurationVo tracking = form.getLocalContext().getcurrentTrackingConfig();
		TrackingAreaVo areaToSave = new TrackingAreaVo();

		TrackingAreaVoCollection collAreas = tracking.getAreas();
		for (int i = 0; i < collAreas.size(); i++)
		{
			if (collAreas.get(i).getIsOverallView() && areaToAdd.getIsOverallView())
			{
				areaToSave = collAreas.get(i);
				break;
			}
			else if (collAreas.get(i).getIsRegistrationArea() && areaToAdd.getIsRegistrationArea())
			{
				areaToSave = collAreas.get(i);
				break;
			}
		}

		ColumnDetailVoCollection collColumnsToAdd = areaToAdd.getColumns();

		for (int i = 0; i < collColumnsToAdd.size(); i++)
		{
			collColumnsToAdd.get(i).setID_ColumnDetail(null);
			areaToSave.getColumns().add(collColumnsToAdd.get(i));
		}

		return areaToSave;
	}

	private TrackingConfigurationVo populateTrackingConfig(TrackingAreaVo areaToAdd)
	{

		TrackingConfigurationVo trackingToSave = form.getLocalContext().getcurrentTrackingConfig();

		TrackingAreaVo areaToSave = new TrackingAreaVo();
		areaToSave = (TrackingAreaVo) areaToAdd.clone();

		areaToSave.setID_TrackingArea(null);
		areaToSave.setEDLocation(form.getGlobalContext().Emergency.getEDLocation());
		areaToSave.setSendToAreas(null);

		ColumnDetailVoCollection collColumns = areaToSave.getColumns();

		for (int i = 0; i < collColumns.size(); i++)
		{
			collColumns.get(i).setID_ColumnDetail(null);
		}

		trackingToSave.getAreas().add(0, areaToSave);//WDEV-15848
		
		return trackingToSave;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onCmbEmergencyDepValueChanged() throws PresentationLogicException
	{
		populateAreaCombo(form.cmbEmergencyDep().getValue());
		updateControlsState();

	}

	private void populateAreaCombo(LocationLiteVo value)
	{
		form.cmbArea().clear();
		if (form.cmbEmergencyDep().getValue()==null)
			return;
		
		TrackingAreaVoCollection collAreas = domain.getTrackingAreasByLocation(form.cmbEmergencyDep().getValue());
		if (collAreas == null)
			return;

		for (int i = 0; i < collAreas.size(); i++)
		{
			form.cmbArea().newRow(collAreas.get(i), collAreas.get(i).getAreaDisplayName());
		}
		form.cmbArea().showOpened();
	}

	@Override
	protected void onCmbAreaValueChanged() throws PresentationLogicException
	{

		if (form.cmbArea().getValue()!=null && form.cmbArea().getValue().getColumns()!=null && form.cmbArea().getValue().getColumns().size() == 0)
		{
			engine.showMessage("The Area selected doesn't have Columns configured. Please select another area");
			form.cmbArea().setValue(null);
		}
		else if (form.cmbArea().getValue()!=null && (form.cmbArea().getValue().getIsRegistrationArea() || form.cmbArea().getValue().getIsOverallView()) && form.getLocalContext().getdialogOpenArgument() == null)
		{
			TrackingAreaVoCollection collAreas = form.getLocalContext().getcurrentTrackingConfig().getAreas();
			for (int i = 0; i < collAreas.size(); i++)
			{
				if (form.cmbArea().getValue().getIsRegistrationArea() && collAreas.get(i).getIsRegistrationArea() && collAreas.get(i).getColumns().size() > 0)
				{
					engine.showMessage("There are Columns configured for the Registration Area from the current TrackingConfiguration.\nThe copy is not allowed in this case. \n Please Select another area. ");
					form.cmbArea().setValue(null);
					break;
				}
				else if (form.cmbArea().getValue().getIsOverallView() && collAreas.get(i).getIsOverallView() && collAreas.get(i).getColumns().size() > 0)
				{
					engine.showMessage("There are Columns configured for the Overall Area from the current TrackingConfiguration.\nThe copy is not allowed in this case. \n Please Select another area. ");
					form.cmbArea().setValue(null);
					break;
				}
			}
		}
		updateControlsState();

	}

}
