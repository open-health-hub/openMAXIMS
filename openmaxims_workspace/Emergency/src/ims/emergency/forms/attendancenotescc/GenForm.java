//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.attendancenotescc;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbAttendanceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.CareContextShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.CareContextShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.CareContextShortVo getValue()
		{
			return (ims.core.vo.CareContextShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.CareContextShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbNoteTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.emergency.vo.lookups.AttendanceClinicalNoteType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.emergency.vo.lookups.AttendanceClinicalNoteType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.emergency.vo.lookups.AttendanceClinicalNoteType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.emergency.vo.lookups.AttendanceClinicalNoteType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.emergency.vo.lookups.AttendanceClinicalNoteType value)
		{
			return super.control.removeRow(value);
		}
		public ims.emergency.vo.lookups.AttendanceClinicalNoteType getValue()
		{
			return (ims.emergency.vo.lookups.AttendanceClinicalNoteType)super.control.getValue();
		}
		public void setValue(ims.emergency.vo.lookups.AttendanceClinicalNoteType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbDisciplineComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.HcpDisType getValue()
		{
			return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.HcpDisType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdNotesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdNotesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColNoteReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColNoteReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColNoteOpened()
		{
			super.row.showOpened(0);
		}
		public String getColNote()
		{
			return (String)super.row.get(0);
		}
		public void setColNote(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColNoteTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.emergency.vo.AttendanceClinicalNotesVo getValue()
		{
			return (ims.emergency.vo.AttendanceClinicalNotesVo)super.row.getValue();
		}
		public void setValue(ims.emergency.vo.AttendanceClinicalNotesVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdNotesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdNotesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdNotesRow get(int index)
		{
			return new grdNotesRow(super.collection.get(index));
		}
		public grdNotesRow newRow()
		{
			return new grdNotesRow(super.collection.newRow());
		}
		public grdNotesRow newRow(boolean autoSelect)
		{
			return new grdNotesRow(super.collection.newRow(autoSelect));
		}
		public grdNotesRow newRowAt(int index)
		{
			return new grdNotesRow(super.collection.newRowAt(index));
		}
		public grdNotesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdNotesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdNotesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addHtmlColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addHtmlColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, canGrow);
		}
		public ims.emergency.vo.AttendanceClinicalNotesVoCollection getValues()
		{
			ims.emergency.vo.AttendanceClinicalNotesVoCollection listOfValues = new ims.emergency.vo.AttendanceClinicalNotesVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.emergency.vo.AttendanceClinicalNotesVo getValue()
		{
			return (ims.emergency.vo.AttendanceClinicalNotesVo)super.grid.getValue();
		}
		public void setValue(ims.emergency.vo.AttendanceClinicalNotesVo value)
		{
			super.grid.setValue(value);
		}
		public grdNotesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdNotesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdNotesRowCollection getRows()
		{
			return new grdNotesRowCollection(super.grid.getRows());
		}
		public grdNotesRow getRowByValue(ims.emergency.vo.AttendanceClinicalNotesVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdNotesRow(row);
		}
		public void setColNoteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColNoteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}

	public static class GroupRadioFilterRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 384, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Latest First", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 112, 384, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Oldest First", startTabIndex.intValue() + 3);
		}
		public void setText(GroupRadioFilterEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupRadioFilterEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupRadioFilterEnumeration.None;
				case 0: return GroupRadioFilterEnumeration.rdoLatestFirst;
				case 1: return GroupRadioFilterEnumeration.rdoOldestFirst;
			}
			return null;
		}
		public void setValue(GroupRadioFilterEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupRadioFilterEnumeration.None.id);
		}
		public boolean isEnabled(GroupRadioFilterEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupRadioFilterEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupRadioFilterEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupRadioFilterEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupRadioFilterEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupRadioFilterEnumeration None = new GroupRadioFilterEnumeration(-1);
		public static GroupRadioFilterEnumeration rdoLatestFirst = new GroupRadioFilterEnumeration(0);
		public static GroupRadioFilterEnumeration rdoOldestFirst = new GroupRadioFilterEnumeration(1);
		private GroupRadioFilterEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupRadioFilterEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.emergency.vo.AttendanceNotesSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.emergency.vo.AttendanceNotesSearchCriteriaVo' of the global context variable 'Emergency.AttendanceNotesSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(824, 528);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenuNEWItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5050001)))
			contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenu.add(contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenuNEWItem);
		contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Correct", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5050002)))
			contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenu.add(contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenuEDITItem);
		contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenuRIEItem = factory.createMenuItem(startControlID.intValue() + 3, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5050003)))
			contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenu.add(contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenuRIEItem);
		form.registerMenu(contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 360, 536, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Filters", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 544, 0, 280, 528, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		ims.framework.FormUiLogic m_ccInterventionDiagnosisInvestigationsForm = loader.loadComponent(129196, appForm, startControlID * 10 + 1000, anchoringHelper4.getSize(), instance1, -1, skipContextValidation);
		//ims.framework.Control m_ccInterventionDiagnosisInvestigationsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(544), new Integer(0), new Integer(280), new Integer(528), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, new Integer(-1), m_ccInterventionDiagnosisInvestigationsForm, instance1 } );
		ims.framework.Control m_ccInterventionDiagnosisInvestigationsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, new Integer(-1), m_ccInterventionDiagnosisInvestigationsForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccInterventionDiagnosisInvestigationsControl);
		Menu[] menus1 = m_ccInterventionDiagnosisInvestigationsForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 410, 73, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Attendance:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 442, 66, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Note Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 256, 410, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Discipline:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 256, 442, 60, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Specialty:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 168, 482, 76, 40, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "RIE", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 88, 482, 76, 40, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Correct Note", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 482, 76, 40, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New Note", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 88, 408, 158, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbAttendanceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAttendanceTemp);
		cmbAttendanceComboBox cmbAttendance = (cmbAttendanceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAttendanceComboBox.class, m_cmbAttendanceTemp);
		super.addComboBox(cmbAttendance);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 88, 440, 158, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbNoteTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbNoteTypeTemp);
		cmbNoteTypeComboBox cmbNoteType = (cmbNoteTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbNoteTypeComboBox.class, m_cmbNoteTypeTemp);
		super.addComboBox(cmbNoteType);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 320, 408, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ComboBox m_cmbDisciplineTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDisciplineTemp);
		cmbDisciplineComboBox cmbDiscipline = (cmbDisciplineComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDisciplineComboBox.class, m_cmbDisciplineTemp);
		super.addComboBox(cmbDiscipline);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 320, 440, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);

		// Grid Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 6, 536, 346, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdNotesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuAttendanceClinicalNoteMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdNotesTemp);
		grdNotesGrid grdNotes = (grdNotesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdNotesGrid.class, m_grdNotesTemp);
		grdNotes.addHtmlColumn("Notes", 0, 0, -1, true, false, 0, true);
		super.addGrid(grdNotes);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 504, 403, 30, 30, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 472, 403, 30, 30, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for notes matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupRadioFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE});
		super.addControl(tmpGroupRadioFilter);
		GroupRadioFilterRadioButton GroupRadioFilter = (GroupRadioFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupRadioFilterRadioButton.class, tmpGroupRadioFilter);
		GroupRadioFilter.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupRadioFilter);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.emergency.forms.interventionsdiagnosisinvestigationscc.IComponent ccInterventionDiagnosisInvestigations()
	{
		return (ims.emergency.forms.interventionsdiagnosisinvestigationscc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccInterventionDiagnosisInvestigationsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccInterventionDiagnosisInvestigationsVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccInterventionDiagnosisInvestigationsVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccInterventionDiagnosisInvestigationsEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccInterventionDiagnosisInvestigationsEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Button btnRIE()
	{
		return (Button)super.getControl(6);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(7);
	}
	public Button btnNote()
	{
		return (Button)super.getControl(8);
	}
	public cmbAttendanceComboBox cmbAttendance()
	{
		return (cmbAttendanceComboBox)super.getComboBox(0);
	}
	public cmbNoteTypeComboBox cmbNoteType()
	{
		return (cmbNoteTypeComboBox)super.getComboBox(1);
	}
	public cmbDisciplineComboBox cmbDiscipline()
	{
		return (cmbDisciplineComboBox)super.getComboBox(2);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(3);
	}
	public grdNotesGrid grdNotes()
	{
		return (grdNotesGrid)super.getGrid(0);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(14);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(15);
	}
	public GroupRadioFilterRadioButton GroupRadioFilter()
	{
		return (GroupRadioFilterRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Emergency = new EmergencyForms();
			Clinical = new ClinicalForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}
		public final class EmergencyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyForms()
			{
				AttendanceClinicalNoteDialog = new LocalFormName(129190);
				EDTriageWorklistToAssessmentForm = new LocalFormName(129186);
				EDClinicianWorklistToAssessmentForm = new LocalFormName(129187);
				InterventionsTreatments = new LocalFormName(129194);
				InvestigationAttendenceDetailDialog = new LocalFormName(129195);
				NoteCorrectionDialog = new LocalFormName(129199);
			}
			public final FormName AttendanceClinicalNoteDialog;
			public final FormName EDTriageWorklistToAssessmentForm;
			public final FormName EDClinicianWorklistToAssessmentForm;
			public final FormName InterventionsTreatments;
			public final FormName InvestigationAttendenceDetailDialog;
			public final FormName NoteCorrectionDialog;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				DiagnosisDialog = new LocalFormName(123146);
			}
			public final FormName DiagnosisDialog;
		}

		public CoreForms Core;
		public EmergencyForms Emergency;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Patient = new ims.framework.ContextVariable("Patient", prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__Patient_" + componentIdentifier + "");
			cxl_EpisodeOfCare = new ims.framework.ContextVariable("EpisodeOfCare", prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__EpisodeOfCare_" + componentIdentifier + "");
			cxl_CareContext = new ims.framework.ContextVariable("CareContext", prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__CareContext_" + componentIdentifier + "");
			cxl_IsEnabled = new ims.framework.ContextVariable("IsEnabled", prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__IsEnabled_" + componentIdentifier + "");
			cxl_PresentingProblem = new ims.framework.ContextVariable("PresentingProblem", prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__PresentingProblem_" + componentIdentifier + "");
			cxl_RIERecord = new ims.framework.ContextVariable("RIERecord", prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__RIERecord_" + componentIdentifier + "");
			cxl_LoggedHCP = new ims.framework.ContextVariable("LoggedHCP", prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__LoggedHCP_" + componentIdentifier + "");
			cxl_parentFormName = new ims.framework.ContextVariable("parentFormName", prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__parentFormName_" + componentIdentifier + "");
			cxl_SelectedEvent = new ims.framework.ContextVariable("SelectedEvent", prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__SelectedEvent_" + componentIdentifier + "");
		}
		
		public boolean getPatientIsNotNull()
		{
			return !cxl_Patient.getValueIsNull(context);
		}
		public ims.core.patient.vo.PatientRefVo getPatient()
		{
			return (ims.core.patient.vo.PatientRefVo)cxl_Patient.getValue(context);
		}
		public void setPatient(ims.core.patient.vo.PatientRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'Patient' RefVo context variable.");
			if(value == null)
				cxl_Patient.setValue(context, null);
			else
				cxl_Patient.setValue(context, new ims.core.patient.vo.PatientRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_Patient = null;
		public boolean getEpisodeOfCareIsNotNull()
		{
			return !cxl_EpisodeOfCare.getValueIsNull(context);
		}
		public ims.core.admin.vo.EpisodeOfCareRefVo getEpisodeOfCare()
		{
			return (ims.core.admin.vo.EpisodeOfCareRefVo)cxl_EpisodeOfCare.getValue(context);
		}
		public void setEpisodeOfCare(ims.core.admin.vo.EpisodeOfCareRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'EpisodeOfCare' RefVo context variable.");
			if(value == null)
				cxl_EpisodeOfCare.setValue(context, null);
			else
				cxl_EpisodeOfCare.setValue(context, new ims.core.admin.vo.EpisodeOfCareRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_EpisodeOfCare = null;
		public boolean getCareContextIsNotNull()
		{
			return !cxl_CareContext.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getCareContext()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_CareContext.getValue(context);
		}
		public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CareContext' RefVo context variable.");
			if(value == null)
				cxl_CareContext.setValue(context, null);
			else
				cxl_CareContext.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CareContext = null;
		public boolean getIsEnabledIsNotNull()
		{
			return !cxl_IsEnabled.getValueIsNull(context);
		}
		public Boolean getIsEnabled()
		{
			return (Boolean)cxl_IsEnabled.getValue(context);
		}
		public void setIsEnabled(Boolean value)
		{
			cxl_IsEnabled.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsEnabled = null;
		public boolean getPresentingProblemIsNotNull()
		{
			return !cxl_PresentingProblem.getValueIsNull(context);
		}
		public ims.clinical.configuration.vo.ClinicalProblemRefVo getPresentingProblem()
		{
			return (ims.clinical.configuration.vo.ClinicalProblemRefVo)cxl_PresentingProblem.getValue(context);
		}
		public void setPresentingProblem(ims.clinical.configuration.vo.ClinicalProblemRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PresentingProblem' RefVo context variable.");
			if(value == null)
				cxl_PresentingProblem.setValue(context, null);
			else
				cxl_PresentingProblem.setValue(context, new ims.clinical.configuration.vo.ClinicalProblemRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PresentingProblem = null;
		public boolean getRIERecordIsNotNull()
		{
			return !cxl_RIERecord.getValueIsNull(context);
		}
		public ims.vo.ValueObject getRIERecord()
		{
			return (ims.vo.ValueObject)cxl_RIERecord.getValue(context);
		}
		public void setRIERecord(ims.vo.ValueObject value)
		{
			cxl_RIERecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RIERecord = null;
		public boolean getLoggedHCPIsNotNull()
		{
			return !cxl_LoggedHCP.getValueIsNull(context);
		}
		public ims.core.resource.people.vo.HcpRefVo getLoggedHCP()
		{
			return (ims.core.resource.people.vo.HcpRefVo)cxl_LoggedHCP.getValue(context);
		}
		public void setLoggedHCP(ims.core.resource.people.vo.HcpRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'LoggedHCP' RefVo context variable.");
			if(value == null)
				cxl_LoggedHCP.setValue(context, null);
			else
				cxl_LoggedHCP.setValue(context, new ims.core.resource.people.vo.HcpRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_LoggedHCP = null;
		public boolean getparentFormNameIsNotNull()
		{
			return !cxl_parentFormName.getValueIsNull(context);
		}
		public ims.framework.FormName getparentFormName()
		{
			return (ims.framework.FormName)cxl_parentFormName.getValue(context);
		}
		public void setparentFormName(ims.framework.FormName value)
		{
			cxl_parentFormName.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_parentFormName = null;
		public boolean getSelectedEventIsNotNull()
		{
			return !cxl_SelectedEvent.getValueIsNull(context);
		}
		public ims.emergency.vo.enums.EdAssessment_CustomControlsEvents getSelectedEvent()
		{
			return (ims.emergency.vo.enums.EdAssessment_CustomControlsEvents)cxl_SelectedEvent.getValue(context);
		}
		public void setSelectedEvent(ims.emergency.vo.enums.EdAssessment_CustomControlsEvents value)
		{
			cxl_SelectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedEvent = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EmergencyNamespace Emergency = new EmergencyNamespace();
		public final class EmergencyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class AttendanceClinicalNoteMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 1;
				public static final int EDIT = 2;
				public static final int RIE = 3;
			}
			public void disableAllAttendanceClinicalNoteMenuMenuItems()
			{
				this.contextMenuAttendanceClinicalNoteMenuNEWItem.setEnabled(false);
				this.contextMenuAttendanceClinicalNoteMenuEDITItem.setEnabled(false);
				this.contextMenuAttendanceClinicalNoteMenuRIEItem.setEnabled(false);
			}
			public void hideAllAttendanceClinicalNoteMenuMenuItems()
			{
				this.contextMenuAttendanceClinicalNoteMenuNEWItem.setVisible(false);
				this.contextMenuAttendanceClinicalNoteMenuEDITItem.setVisible(false);
				this.contextMenuAttendanceClinicalNoteMenuRIEItem.setVisible(false);
			}
			private Menu contextMenuAttendanceClinicalNoteMenu;
			public ReadOnlyMenuItem getAttendanceClinicalNoteMenuNEWItem()
			{
				return this.contextMenuAttendanceClinicalNoteMenuNEWItem;
			}
			private MenuItem contextMenuAttendanceClinicalNoteMenuNEWItem;
			public ReadOnlyMenuItem getAttendanceClinicalNoteMenuEDITItem()
			{
				return this.contextMenuAttendanceClinicalNoteMenuEDITItem;
			}
			private MenuItem contextMenuAttendanceClinicalNoteMenuEDITItem;
			public ReadOnlyMenuItem getAttendanceClinicalNoteMenuRIEItem()
			{
				return this.contextMenuAttendanceClinicalNoteMenuRIEItem;
			}
			private MenuItem contextMenuAttendanceClinicalNoteMenuRIEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[105];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-SPECIALTY", "Specialty");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-CARECONTEXT", "CareContext");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-ADDEDDURINGCODING", "AddedDuringCoding");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-CODINGSEQUENCE", "CodingSequence");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-ID", "ID_AttendanceClinicalNotes");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-PATIENT", "Patient");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-EPISODE", "Episode");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-CLINICALNOTE", "ClinicalNote");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-NOTETYPE", "NoteType");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-DISCIPLINE", "Discipline");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-SPECIALTY", "Specialty");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-ISCORRECTED", "IsCorrected");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Emergency.AttendanceClinicalNotes", "BO-1086100035-CORRECTIONCOMMENTS", "CorrectionComments");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-ID", "ID_InterventionsTreatmentsForAttendence");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-PATIENT", "Patient");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-EPISODE", "Episode");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-ATTENDANCE", "Attendance");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-ID", "ID_InvestigationAttendenceDetail");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-PATIENT", "Patient");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-EPISODE", "Episode");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-ATTENDANCE", "Attendance");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-ATTENDENCEINVESTIGATION", "AttendenceInvestigation");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-ACTIVE", "Active");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Emergency.InvestigationAttendenceDetail", "BO-1086100020-ADDEDDURINGCODING", "AddedDuringCoding");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__EpisodeOfCare_" + componentIdentifier, "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__PresentingProblem_" + componentIdentifier, "BO-1073100005-ID", "ID_ClinicalProblem");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.AttendanceNotesCc.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
