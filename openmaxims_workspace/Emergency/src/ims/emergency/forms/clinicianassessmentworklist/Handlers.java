//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.clinicianassessmentworklist;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void onFormModeChanged();
	abstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormClosing(CancelArgs args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnResultsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkReturnClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnStartAssessmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSeenCompleteHCPClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnTriageNotesClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditMainProblemClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdAttendanceHistorySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdProblemSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrPatientTriageTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onCcVitalSignsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrObs2TabChanged(ims.framework.LayerBridge tab);
	abstract protected void onCcVitalSignsObsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcUrinalysisValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcUrineToxValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcHCGValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcPatientAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcPatientMedsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcRelevantPMHValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcSupportServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcDischargeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnReferToSpecialtyClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnMovePatientClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnViewHistoryClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPatientSummaryClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnTrackingSummaryClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnTrackingClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdPatientsRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupClinicianReviewValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTimer(ims.framework.controls.Timer timer) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setMessageBoxClosedEvent(new MessageBoxClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onMessageBoxClosed(messageBoxId, result);
			}
		});
		this.form.setFormClosingEvent(new FormClosing()
		{
			private static final long serialVersionUID = 1L;
			public void handle(CancelArgs args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormClosing(args);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnResults().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnResultsClick();
			}
		});
		this.form.lnkReturn().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkReturnClick();
			}
		});
		this.form.btnStartAssessment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnStartAssessmentClick();
			}
		});
		this.form.btnSeenCompleteHCP().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSeenCompleteHCPClick();
			}
		});
		this.form.btnTriageNotes().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnTriageNotesClick();
			}
		});
		this.form.btnEditMainProblem().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditMainProblemClick();
			}
		});
		this.form.grdAttendanceHistory().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdAttendanceHistorySelectionChanged();
			}
		});
		this.form.grdProblem().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdProblemSelectionChanged();
			}
		});
		this.form.lyrPatientTriage().tabNotes().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPatientTriagetabNotesActivated();
			}
		});
		this.form.lyrPatientTriage().tabObs().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPatientTriagetabObsActivated();
			}
		});
		this.form.lyrPatientTriage().tabObs2().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPatientTriagetabObs2Activated();
			}
		});
		this.form.lyrPatientTriage().tabPathway().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPatientTriagetabPathwayActivated();
			}
		});
		this.form.lyrPatientTriage().tabSysReview().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPatientTriagetabSysReviewActivated();
			}
		});
		this.form.lyrPatientTriage().tabPatientMeds().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPatientTriagetabPatientMedsActivated();
			}
		});
		this.form.lyrPatientTriage().tabRelevantPMH().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPatientTriagetabRelevantPMHActivated();
			}
		});
		this.form.lyrPatientTriage().tabSupport().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPatientTriagetabSupportActivated();
			}
		});
		this.form.lyrPatientTriage().tabDischargeDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrPatientTriagetabDischargeDetailsActivated();
			}
		});
		this.form.lyrPatientTriage().tabObs().setccVitalSignsValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcVitalSignsValueChanged();
			}
		});
		this.form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrObs2tabVitalSignsActivated();
			}
		});
		this.form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrObs2tabUrinalysisActivated();
			}
		});
		this.form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrObs2tabUrineToxActivated();
			}
		});
		this.form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrObs2tabHCGActivated();
			}
		});
		this.form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrObs2tabOtherActivated();
			}
		});
		this.form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().setccVitalSignsObsValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcVitalSignsObsValueChanged();
			}
		});
		this.form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().setccUrinalysisValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcUrinalysisValueChanged();
			}
		});
		this.form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().setccUrineToxValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcUrineToxValueChanged();
			}
		});
		this.form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().setccHCGValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcHCGValueChanged();
			}
		});
		this.form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().setccPatientAssessmentValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcPatientAssessmentValueChanged();
			}
		});
		this.form.lyrPatientTriage().tabPatientMeds().setccPatientMedsValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcPatientMedsValueChanged();
			}
		});
		this.form.lyrPatientTriage().tabRelevantPMH().setccRelevantPMHValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcRelevantPMHValueChanged();
			}
		});
		this.form.lyrPatientTriage().tabSupport().setccSupportServiceValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcSupportServiceValueChanged();
			}
		});
		this.form.lyrPatientTriage().tabDischargeDetails().setccDischargeValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcDischargeValueChanged();
			}
		});
		this.form.btnReferToSpecialty().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnReferToSpecialtyClick();
			}
		});
		this.form.btnMovePatient().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnMovePatientClick();
			}
		});
		this.form.btnViewHistory().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnViewHistoryClick();
			}
		});
		this.form.btnPatientSummary().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPatientSummaryClick();
			}
		});
		this.form.btnTrackingSummary().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnTrackingSummaryClick();
			}
		});
		this.form.btnTracking().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnTrackingClick();
			}
		});
		this.form.dyngrdPatients().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdPatientsRowSelectionChanged(row);
			}
		});
		this.form.GroupClinicianReview().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupClinicianReviewValueChanged();
			}
		});
		this.form.setTimerElapsedEvent(new ims.framework.delegates.TimerElapsed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.Timer timer) throws ims.framework.exceptions.PresentationLogicException
			{
				onTimer(timer);
			}
		});
		this.form.getContextMenus().Emergency.getOtherProblemsTriageMenuADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.OtherProblemsTriageMenu.ADD, sender);
			}
		});
		this.form.getContextMenus().Emergency.getOtherProblemsTriageMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.EmergencyNamespace.OtherProblemsTriageMenu.EDIT, sender);
			}
		});
	}
	private void onlyrPatientTriagetabNotesActivated()
	{
		this.form.lyrPatientTriage().showtabNotes();
		onlyrPatientTriageTabChanged(this.form.lyrPatientTriage().tabNotes());
	}
	private void onlyrPatientTriagetabObsActivated()
	{
		this.form.lyrPatientTriage().showtabObs();
		onlyrPatientTriageTabChanged(this.form.lyrPatientTriage().tabObs());
	}
	private void onlyrPatientTriagetabObs2Activated()
	{
		this.form.lyrPatientTriage().showtabObs2();
		onlyrPatientTriageTabChanged(this.form.lyrPatientTriage().tabObs2());
	}
	private void onlyrPatientTriagetabPathwayActivated()
	{
		this.form.lyrPatientTriage().showtabPathway();
		onlyrPatientTriageTabChanged(this.form.lyrPatientTriage().tabPathway());
	}
	private void onlyrPatientTriagetabSysReviewActivated()
	{
		this.form.lyrPatientTriage().showtabSysReview();
		onlyrPatientTriageTabChanged(this.form.lyrPatientTriage().tabSysReview());
	}
	private void onlyrPatientTriagetabPatientMedsActivated()
	{
		this.form.lyrPatientTriage().showtabPatientMeds();
		onlyrPatientTriageTabChanged(this.form.lyrPatientTriage().tabPatientMeds());
	}
	private void onlyrPatientTriagetabRelevantPMHActivated()
	{
		this.form.lyrPatientTriage().showtabRelevantPMH();
		onlyrPatientTriageTabChanged(this.form.lyrPatientTriage().tabRelevantPMH());
	}
	private void onlyrPatientTriagetabSupportActivated()
	{
		this.form.lyrPatientTriage().showtabSupport();
		onlyrPatientTriageTabChanged(this.form.lyrPatientTriage().tabSupport());
	}
	private void onlyrPatientTriagetabDischargeDetailsActivated()
	{
		this.form.lyrPatientTriage().showtabDischargeDetails();
		onlyrPatientTriageTabChanged(this.form.lyrPatientTriage().tabDischargeDetails());
	}
	private void onlyrObs2tabVitalSignsActivated()
	{
		this.form.lyrPatientTriage().tabObs2().lyrObs2().showtabVitalSigns();
		onlyrObs2TabChanged(this.form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns());
	}
	private void onlyrObs2tabUrinalysisActivated()
	{
		this.form.lyrPatientTriage().tabObs2().lyrObs2().showtabUrinalysis();
		onlyrObs2TabChanged(this.form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis());
	}
	private void onlyrObs2tabUrineToxActivated()
	{
		this.form.lyrPatientTriage().tabObs2().lyrObs2().showtabUrineTox();
		onlyrObs2TabChanged(this.form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox());
	}
	private void onlyrObs2tabHCGActivated()
	{
		this.form.lyrPatientTriage().tabObs2().lyrObs2().showtabHCG();
		onlyrObs2TabChanged(this.form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG());
	}
	private void onlyrObs2tabOtherActivated()
	{
		this.form.lyrPatientTriage().tabObs2().lyrObs2().showtabOther();
		onlyrObs2TabChanged(this.form.lyrPatientTriage().tabObs2().lyrObs2().tabOther());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
