//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.edwhiteboardconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbAreaComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.emergency.vo.TrackingAreaLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.emergency.vo.TrackingAreaLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.emergency.vo.TrackingAreaLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.emergency.vo.TrackingAreaLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.emergency.vo.TrackingAreaLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.emergency.vo.TrackingAreaLiteVo getValue()
		{
			return (ims.emergency.vo.TrackingAreaLiteVo)super.control.getValue();
		}
		public void setValue(ims.emergency.vo.TrackingAreaLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbEDLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdConfigurableQuestionsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdConfigurableQuestionsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolTextReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolTextReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolTextOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolText(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolText()
		{
			return (String)super.row.get(0);
		}
		public void setcolText(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolTextTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolAnswerTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolAnswerTypeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolAnswerTypeOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolAnswerType(String value)
		{
			super.row.setTooltip(1, value);
		}
		public Object getcolAnswerType()
		{
			return super.row.get(1);
		}
		public void setcolAnswerType(Object value)
		{
			super.row.set(1, value);
		}
		public void setCellcolAnswerTypeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolWidthReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolWidthReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolWidthOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolWidth(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolWidth()
		{
			return (String)super.row.get(2);
		}
		public void setcolWidth(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolWidthTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolGenderSpecificReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolGenderSpecificReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolGenderSpecificOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolGenderSpecific(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolGenderSpecific()
		{
			return (String)super.row.get(3);
		}
		public void setcolGenderSpecific(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolGenderSpecificTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolAgeRangeMinReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolAgeRangeMinReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolAgeRangeMinOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolAgeRangeMin(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolAgeRangeMin()
		{
			return (String)super.row.get(4);
		}
		public void setcolAgeRangeMin(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolAgeRangeMinTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolAgeRangeMaxReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolAgeRangeMaxReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolAgeRangeMaxOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolAgeRangeMax(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getcolAgeRangeMax()
		{
			return (String)super.row.get(5);
		}
		public void setcolAgeRangeMax(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolAgeRangeMaxTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.emergency.vo.WhiteBoardQuestionConfigVo getValue()
		{
			return (ims.emergency.vo.WhiteBoardQuestionConfigVo)super.row.getValue();
		}
		public void setValue(ims.emergency.vo.WhiteBoardQuestionConfigVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdConfigurableQuestionsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdConfigurableQuestionsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdConfigurableQuestionsRow get(int index)
		{
			return new grdConfigurableQuestionsRow(super.collection.get(index));
		}
		public grdConfigurableQuestionsRow newRow()
		{
			return new grdConfigurableQuestionsRow(super.collection.newRow());
		}
		public grdConfigurableQuestionsRow newRow(boolean autoSelect)
		{
			return new grdConfigurableQuestionsRow(super.collection.newRow(autoSelect));
		}
		public grdConfigurableQuestionsRow newRowAt(int index)
		{
			return new grdConfigurableQuestionsRow(super.collection.newRowAt(index));
		}
		public grdConfigurableQuestionsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdConfigurableQuestionsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdConfigurableQuestionsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public ims.emergency.vo.WhiteBoardQuestionConfigVoCollection getValues()
		{
			ims.emergency.vo.WhiteBoardQuestionConfigVoCollection listOfValues = new ims.emergency.vo.WhiteBoardQuestionConfigVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.emergency.vo.WhiteBoardQuestionConfigVo getValue()
		{
			return (ims.emergency.vo.WhiteBoardQuestionConfigVo)super.grid.getValue();
		}
		public void setValue(ims.emergency.vo.WhiteBoardQuestionConfigVo value)
		{
			super.grid.setValue(value);
		}
		public grdConfigurableQuestionsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdConfigurableQuestionsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdConfigurableQuestionsRowCollection getRows()
		{
			return new grdConfigurableQuestionsRowCollection(super.grid.getRows());
		}
		public grdConfigurableQuestionsRow getRowByValue(ims.emergency.vo.WhiteBoardQuestionConfigVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdConfigurableQuestionsRow(row);
		}
		public void setcolTextHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolTextHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolAnswerTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolAnswerTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox colAnswerTypeComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
		public void setcolWidthHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolWidthHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolGenderSpecificHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolGenderSpecificHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolAgeRangeMinHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolAgeRangeMinHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolAgeRangeMaxHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolAgeRangeMaxHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	public static class grdFixedQuestionsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdFixedQuestionsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolName(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolName()
		{
			return (String)super.row.get(0);
		}
		public void setcolName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSelectOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolSelect(String value)
		{
			super.row.setTooltip(1, value);
		}
		public boolean getcolSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setcolSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellcolSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdFixedQuestionsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdFixedQuestionsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdFixedQuestionsRow get(int index)
		{
			return new grdFixedQuestionsRow(super.collection.get(index));
		}
		public grdFixedQuestionsRow newRow()
		{
			return new grdFixedQuestionsRow(super.collection.newRow());
		}
		public grdFixedQuestionsRow newRow(boolean autoSelect)
		{
			return new grdFixedQuestionsRow(super.collection.newRow(autoSelect));
		}
		public grdFixedQuestionsRow newRowAt(int index)
		{
			return new grdFixedQuestionsRow(super.collection.newRowAt(index));
		}
		public grdFixedQuestionsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdFixedQuestionsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdFixedQuestionsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdFixedQuestionsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdFixedQuestionsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdFixedQuestionsRowCollection getRows()
		{
			return new grdFixedQuestionsRowCollection(super.grid.getRows());
		}
		public grdFixedQuestionsRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdFixedQuestionsRow(row);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdAssessmentsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAssessmentsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolName(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolName()
		{
			return (String)super.row.get(0);
		}
		public void setcolName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolIconReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolIconReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolIconOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolIcon(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.framework.utils.Image getcolIcon()
		{
			return (ims.framework.utils.Image)super.row.get(1);
		}
		public void setcolIcon(ims.framework.utils.Image value)
		{
			super.row.set(1, value);
		}
		public void setCellcolIconTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolTaxonomyReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolTaxonomyReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolTaxonomyOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolTaxonomy(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolTaxonomy()
		{
			return (String)super.row.get(2);
		}
		public void setcolTaxonomy(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolTaxonomyTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.emergency.vo.WhiteBoardAssessmentConfigVo getValue()
		{
			return (ims.emergency.vo.WhiteBoardAssessmentConfigVo)super.row.getValue();
		}
		public void setValue(ims.emergency.vo.WhiteBoardAssessmentConfigVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAssessmentsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAssessmentsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAssessmentsRow get(int index)
		{
			return new grdAssessmentsRow(super.collection.get(index));
		}
		public grdAssessmentsRow newRow()
		{
			return new grdAssessmentsRow(super.collection.newRow());
		}
		public grdAssessmentsRow newRow(boolean autoSelect)
		{
			return new grdAssessmentsRow(super.collection.newRow(autoSelect));
		}
		public grdAssessmentsRow newRowAt(int index)
		{
			return new grdAssessmentsRow(super.collection.newRowAt(index));
		}
		public grdAssessmentsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAssessmentsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAssessmentsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection getValues()
		{
			ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection listOfValues = new ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.emergency.vo.WhiteBoardAssessmentConfigVo getValue()
		{
			return (ims.emergency.vo.WhiteBoardAssessmentConfigVo)super.grid.getValue();
		}
		public void setValue(ims.emergency.vo.WhiteBoardAssessmentConfigVo value)
		{
			super.grid.setValue(value);
		}
		public grdAssessmentsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAssessmentsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAssessmentsRowCollection getRows()
		{
			return new grdAssessmentsRowCollection(super.grid.getRows());
		}
		public grdAssessmentsRow getRowByValue(ims.emergency.vo.WhiteBoardAssessmentConfigVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAssessmentsRow(row);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolIconHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolIconHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolTaxonomyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolTaxonomyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5310001)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuADDItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5310002)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuEDITItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5310003)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuREMOVEItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 4, "Move Up", true, false, new Integer(102197), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5310004)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_UPItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Down", true, false, new Integer(102198), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5310005)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_DOWNItem);
		form.registerMenu(contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenu);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem = factory.createMenuItem(startControlID.intValue() + 6, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5300001)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5300002)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5300005)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 9, "Move Up", true, false, new Integer(102197), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5300003)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem);
		contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 10, "Move Down", true, false, new Integer(102198), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5300004)))
			contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu.add(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem);
		form.registerMenu(contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 3, 26, 840, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 563, 8, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Area:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 584, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 483, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Configurable Questions:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 326, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Fixed Questions:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 165, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assessments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 38, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient button:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 143, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Emergency Department:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 376, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Preview", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 764, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 684, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 600, 6, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAreaTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAreaTemp);
		cmbAreaComboBox cmbArea = (cmbAreaComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAreaComboBox.class, m_cmbAreaTemp);
		super.addComboBox(cmbArea);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 152, 6, 405, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbEDLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbEDLocationTemp);
		cmbEDLocationComboBox cmbEDLocation = (cmbEDLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEDLocationComboBox.class, m_cmbEDLocationTemp);
		super.addComboBox(cmbEDLocation);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 88, 584, 24, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 498, 832, 86, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdConfigurableQuestionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuEDWhiteboardConfig_ConfigQuestGridMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdConfigurableQuestionsTemp);
		grdConfigurableQuestionsGrid grdConfigurableQuestions = (grdConfigurableQuestionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdConfigurableQuestionsGrid.class, m_grdConfigurableQuestionsTemp);
		grdConfigurableQuestions.addStringColumn("Text", 0, 0, 380, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdConfigurableQuestions.addComboBoxColumn("Answer Type", 0, 0, 100, true, true, false, false, true, -1);
		grdConfigurableQuestions.addStringColumn("Width", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdConfigurableQuestions.addStringColumn("Gender Specific", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdConfigurableQuestions.addStringColumn("Age Range Min", 0, 0, 95, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdConfigurableQuestions.addStringColumn("Age Range Max", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdConfigurableQuestions);
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 341, 832, 141, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdFixedQuestionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdFixedQuestionsTemp);
		grdFixedQuestionsGrid grdFixedQuestions = (grdFixedQuestionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFixedQuestionsGrid.class, m_grdFixedQuestionsTemp);
		grdFixedQuestions.addStringColumn("Name", 0, 0, 750, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdFixedQuestions.addBoolColumn("Select", 0, 0, -1, false, false, 0, true);
		super.addGrid(grdFixedQuestions);
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 180, 832, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdAssessmentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuEDWhiteboardConfig_AssessmentsGridMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAssessmentsTemp);
		grdAssessmentsGrid grdAssessments = (grdAssessmentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAssessmentsGrid.class, m_grdAssessmentsTemp);
		grdAssessments.addStringColumn("Name", 0, 0, 700, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAssessments.addImageColumn("Icon", 0, 0, 50, true, 0);
		grdAssessments.addStringColumn("Taxonomy", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAssessments);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 152, 38, 405, 130, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnPreview()
	{
		return (Button)super.getControl(8);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(9);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(10);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(11);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(12);
	}
	public cmbAreaComboBox cmbArea()
	{
		return (cmbAreaComboBox)super.getComboBox(0);
	}
	public cmbEDLocationComboBox cmbEDLocation()
	{
		return (cmbEDLocationComboBox)super.getComboBox(1);
	}
	public CheckBox chkComments()
	{
		return (CheckBox)super.getControl(15);
	}
	public grdConfigurableQuestionsGrid grdConfigurableQuestions()
	{
		return (grdConfigurableQuestionsGrid)super.getGrid(0);
	}
	public grdFixedQuestionsGrid grdFixedQuestions()
	{
		return (grdFixedQuestionsGrid)super.getGrid(1);
	}
	public grdAssessmentsGrid grdAssessments()
	{
		return (grdAssessmentsGrid)super.getGrid(2);
	}
	public DynamicGrid dyngrdPatientButton()
	{
		return (DynamicGrid)super.getControl(19);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Emergency = new EmergencyForms();
		}
		public final class EmergencyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyForms()
			{
				AddEditAssessmentsToWhiteboard = new LocalFormName(129209);
				AddEditQuestionsToWhiteboard = new LocalFormName(129210);
				ImportWhiteboardConfig = new LocalFormName(129211);
				EDWhiteBoardPreviewDialog = new LocalFormName(129213);
			}
			public final FormName AddEditAssessmentsToWhiteboard;
			public final FormName AddEditQuestionsToWhiteboard;
			public final FormName ImportWhiteboardConfig;
			public final FormName EDWhiteBoardPreviewDialog;
		}

		public EmergencyForms Emergency;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
			Emergency = new EmergencyImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Allergies18 = new ImageHelper(102518, "Images/Core/allergies_18.png", new Integer(18), new Integer(18));
				Allergies48 = new ImageHelper(102542, "Images/Core/infirmary_48_new.png", new Integer(48), new Integer(48));
				NoPatientImage = new ImageHelper(102554, "Images/Core/silhouette_blue.png", new Integer(177), new Integer(177));
			}
			public final ims.framework.utils.Image Allergies18;
			public final ims.framework.utils.Image Allergies48;
			public final ims.framework.utils.Image NoPatientImage;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Pathology48 = new ImageHelper(116149, "Images/OCRR/pathology_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image Pathology48;
		}
		public final class EmergencyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyImages()
			{
				Male = new ImageHelper(129137, "Images/Emergency/male.png", new Integer(48), new Integer(48));
				EvenHistoryEnabled16 = new ImageHelper(129101, "Images/Emergency/clock.gif", new Integer(16), new Integer(16));
				Triage_Priority_P1 = new ImageHelper(129125, "Images/Emergency/P1.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Male;
			public final ims.framework.utils.Image EvenHistoryEnabled16;
			public final ims.framework.utils.Image Triage_Priority_P1;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
		public final EmergencyImages Emergency;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_selectedWhiteBoardConfig = new ims.framework.ContextVariable("selectedWhiteBoardConfig", prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier + "");
		}
		
		public boolean getselectedWhiteBoardConfigIsNotNull()
		{
			return !cxl_selectedWhiteBoardConfig.getValueIsNull(context);
		}
		public ims.emergency.vo.WhiteBoardConfigVo getselectedWhiteBoardConfig()
		{
			return (ims.emergency.vo.WhiteBoardConfigVo)cxl_selectedWhiteBoardConfig.getValue(context);
		}
		public void setselectedWhiteBoardConfig(ims.emergency.vo.WhiteBoardConfigVo value)
		{
			cxl_selectedWhiteBoardConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedWhiteBoardConfig = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EmergencyNamespace Emergency = new EmergencyNamespace();
		public final class EmergencyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class EDWhiteboardConfig_ConfigQuestGridMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int REMOVE = 3;
				public static final int MOVE_UP = 4;
				public static final int MOVE_DOWN = 5;
			}
			public void disableAllEDWhiteboardConfig_ConfigQuestGridMenuMenuItems()
			{
				this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuADDItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuEDITItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuREMOVEItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_UPItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_DOWNItem.setEnabled(false);
			}
			public void hideAllEDWhiteboardConfig_ConfigQuestGridMenuMenuItems()
			{
				this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuADDItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuEDITItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuREMOVEItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_UPItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_DOWNItem.setVisible(false);
			}
			private Menu contextMenuEDWhiteboardConfig_ConfigQuestGridMenu;
			public ReadOnlyMenuItem getEDWhiteboardConfig_ConfigQuestGridMenuADDItem()
			{
				return this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuADDItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_ConfigQuestGridMenuADDItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_ConfigQuestGridMenuEDITItem()
			{
				return this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuEDITItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_ConfigQuestGridMenuEDITItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_ConfigQuestGridMenuREMOVEItem()
			{
				return this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuREMOVEItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_ConfigQuestGridMenuREMOVEItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_ConfigQuestGridMenuMOVE_UPItem()
			{
				return this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_UPItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_UPItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_ConfigQuestGridMenuMOVE_DOWNItem()
			{
				return this.contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_DOWNItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_ConfigQuestGridMenuMOVE_DOWNItem;
			public final class EDWhiteboardConfig_AssessmentsGridMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 6;
				public static final int EDIT = 7;
				public static final int REMOVE = 8;
				public static final int MOVE_UP = 9;
				public static final int MOVE_DOWN = 10;
			}
			public void disableAllEDWhiteboardConfig_AssessmentsGridMenuMenuItems()
			{
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem.setEnabled(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem.setEnabled(false);
			}
			public void hideAllEDWhiteboardConfig_AssessmentsGridMenuMenuItems()
			{
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem.setVisible(false);
				this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem.setVisible(false);
			}
			private Menu contextMenuEDWhiteboardConfig_AssessmentsGridMenu;
			public ReadOnlyMenuItem getEDWhiteboardConfig_AssessmentsGridMenuADDItem()
			{
				return this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_AssessmentsGridMenuADDItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_AssessmentsGridMenuEDITItem()
			{
				return this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_AssessmentsGridMenuEDITItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem()
			{
				return this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_AssessmentsGridMenuREMOVEItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem()
			{
				return this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_UPItem;
			public ReadOnlyMenuItem getEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem()
			{
				return this.contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem;
			}
			private MenuItem contextMenuEDWhiteboardConfig_AssessmentsGridMenuMOVE_DOWNItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[99];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardAssessmentConfig", "BO-1087100019-ID", "ID_WhiteBoardAssessmentConfig");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardAssessmentConfig", "BO-1087100019-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardAssessmentConfig", "BO-1087100019-ICON", "Icon");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardAssessmentConfig", "BO-1087100019-MAXIMSMAPPINGVALUE", "MAXIMSMappingValue");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-ID", "ID_WhiteBoardQuestionConfig");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-QUESTIONTEXT", "QuestionText");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-COLUMNHEADERTEXT", "ColumnHeaderText");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-ANSWERTYPE", "AnswerType");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-COLUMNWIDTH", "ColumnWidth");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-GENDERSPECIFIC", "GenderSpecific");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-AGERANGEMIN", "AgeRangeMin");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardQuestionConfig", "BO-1087100020-AGERANGEMAX", "AgeRangeMax");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-ID", "ID_WhiteBoardConfig");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-ISACTIVE", "IsActive");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-MEDSGIVEN", "MedsGiven");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-OBSTAKEN", "ObsTaken");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-ECG", "ECG");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-NPO", "NPO");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-ISOLATION", "Isolation");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Emergency.WhiteBoardConfig", "BO-1087100018-COMMENTS", "Comments");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-ID", "ID_WhiteBoardConfig");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-ISACTIVE", "IsActive");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-MEDSGIVEN", "MedsGiven");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-OBSTAKEN", "ObsTaken");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-ECG", "ECG");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-NPO", "NPO");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-ISOLATION", "Isolation");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWhiteboardConfiguration.__internal_x_context__selectedWhiteBoardConfig_" + componentIdentifier, "BO-1087100018-COMMENTS", "Comments");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
