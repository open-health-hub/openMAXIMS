//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edworklisttoassessmentform;

import ims.admin.vo.AppImageVo;
import ims.configuration.AppRight;
import ims.configuration.EnvironmentConfig;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.AppDBImageVo;
import ims.core.vo.lookups.Sex;
import ims.core.vo.lookups.YesNo;
import ims.emergency.helper.EmergencyDisplayHelper;
import ims.emergency.vo.TrackingAreaShortVo;
import ims.emergency.vo.TrackingAreaShortVoCollection;
import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo;
import ims.emergency.vo.TrackingForDisplayClinicianAndTriageWorklistVo;
import ims.emergency.vo.TrackingForDisplayClinicianAndTriageWorklistVoCollection;
import ims.emergency.vo.TriagePriorityKpConfigVo;
import ims.emergency.vo.searchCriteriaForClinicianWorklistVo;
import ims.emergency.vo.enums.EDAssessmentComponent;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.emergency.vo.lookups.TriagePriority;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellTable;
import ims.framework.controls.DynamicGridCellTable.TableCell;
import ims.framework.controls.DynamicGridCellTable.TableCellOptions;
import ims.framework.controls.DynamicGridCellTable.TableCellType;
import ims.framework.controls.DynamicGridCellTable.TableRow;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.enumerations.Align;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FontFamily;
import ims.framework.enumerations.FontStyle;
import ims.framework.enumerations.FontWeight;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Base64;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int DISPLAY_TRIAGE	= 1;
	
	private static final int DISPLAY_CLINICIANASSESSMNRWORKLIST	 		 = 2;
	private static final int DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN	 = 3;	//wdev-17252
	
	private static final String	COLUMN_NAMETRIAGE					= "0";
	private static final String	COLUMN_NAMEASSESSMENT				= "1";
	private static final String	COLUMN_STARTEDITTRIAGE				= "2";
	private static final String	COLUMN_STARTEDITASSESSMENT			= "3";
	private static final String	COLUMN_PATIENTSUMMARYTRIAGE			= "4";
	private static final String	COLUMN_PATIENTSUMMARYASSESSMENT		= "5";
	private static final String	COLUMN_VIEWHISTORYTRIAGE			= "6";
	private static final String	COLUMN_VIEWHISTORYASSESSMENT		= "7";
	private static final String	COLUMN_DECISIONTOADMITTRIAGE		= "8";		//wdev-16950
	private static final String	COLUMN_DECISIONTOADMITASSESSMENT	= "9";		//wdev-16950
	private static final String	COLUMN_EXTTRANSFERTRIAGE			= "10";		//wdev-16950
	private static final String	COLUMN_EXTTRANSFERASSESSMENT		= "11";		//wdev-16950
	private static final String	COLUMN_SEENBYCOMPLASSESSMENT		= "12";		//wdev-17252

	
	private static final int EMERGENCY_PATIENT_SUMMARY = 320; 
	private static final String CARE_CONTEXT_SEED = "CareContext_id";
	
	private enum TriagePriorityEnum
	{ 
		Priority1(TriagePriority.PRIORITY1, 1),
		Priority2(TriagePriority.PRIORITY2, 2),
		Priority3(TriagePriority.PRIORITY3, 3),
		Priority4(TriagePriority.PRIORITY4, 4),
		Priority5(TriagePriority.PRIORITY5, 5),
		//Priority6(TriagePriority.PRIORITY6, 6),  wdev-17208 in behalf of Florin
		SkippedTriage(TriagePriority.SKIPPED_TRIAGE, 7);
		
		private TriagePriority index;
		private Integer order;
		
		TriagePriorityEnum(TriagePriority index,Integer order)
		{
			this.index = index;
			this.order = order;
		}
		
		public TriagePriority getIndex()
		{
			return index;
		}
		
		public Integer getOrder()
		{
			return order;
		}
	}
	//wdev-17138
	private enum SelectedTriageWorklistButtons
	{ 
		STARTEDITTRIAGE,PATIENTSUMMARY,VIEWHISTORY,DECISIONTOAMIT,EXTERNTRANSFER
	}
	private enum SelectedClinicianWorklistButtons
	{ 
		SEENBYCOMPLASSESSMNENT,EDITASSESSMENT,PATIENTSUMMARY,VIEWHISTORY,DECISIONTOAMIT,EXTERNTRANSFER
	}

			
	protected void onBtnTrackingClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Emergency.Tracking);
	}
	
	protected void onBtnTrackingClinicianClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.Tracking);
		
	}
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		open();
		
	}
	private void initialize()
	{
		form.lyrWorklist().tabTriageWorklist().GroupClinicianReview().setValue(ims.emergency.forms.edworklisttoassessmentform.GenForm.lyrWorklistLayer.tabTriageWorklistContainer.GroupClinicianReviewEnumeration.rdoAll);
		//form.lyrWorklist().tabClinicianWorklist().GroupClinicianReviewClin().setValue(GroupClinicianReviewClinEnumeration.rdoAllClin);
		
		Object user = domain.getHcpLiteUser();
		if(user instanceof HcpRefVo)
		{
			form.getLocalContext().setLoggedHcp((HcpRefVo) user);
		}
		
		if(engine.getCurrentLocation() != null)
		{
			form.getLocalContext().setAttendanceKPIConfig(domain.getAttendanceKPIConfigForTriage(engine.getCurrentLocation()));
			
		}
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if( form.getForms().Emergency.EDDecisionToAdmitDialog.equals(formName) || form.getForms().Emergency.EDPartialAdmissionDialog.equals(formName) )			//wdev-16866 //WDEV-17661
		{
			if(	DialogResult.OK.equals(result))
			{
				open();
			}
		}
		
	}
	private void clearcontrols()
	{
		form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getRows().clear();
		form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getRows().clear();
	}
	private void open()
	{
		//WDEV-18001
		long startTime, endTime,miliseconds;
		
		TrackingForDisplayClinicianAndTriageWorklistVoCollection patientsWaiting = null;//WDEV-18001
		clearcontrols();
		HcpRefVo hcp = null;
			
		if( engine.getFormName().equals(form.getForms().Emergency.EDTriageWorklistToAssessmentForm))
		{
			createddyngrdTriageWorklist();
			if(form.getLocalContext().getLoggedHcpIsNotNull() && ims.emergency.forms.edworklisttoassessmentform.GenForm.lyrWorklistLayer.tabTriageWorklistContainer.GroupClinicianReviewEnumeration.rdoMyAllocated.equals(form.lyrWorklist().tabTriageWorklist().GroupClinicianReview().getValue()))
			{
				hcp = form.getLocalContext().getLoggedHcp();
			}
			
			form.lyrWorklist().showtabTriageWorklist();
			form.lyrWorklist().tabClinicianWorklist().setHeaderVisible(false);
			form.lyrWorklist().tabDetails().setHeaderVisible(false);
			//WDEV-18001
			startTime = System.currentTimeMillis();
			
			patientsWaiting = domain.listPatientWaitings(TrackingStatus.WAITING_TO_BE_TRIAGED, engine.getCurrentLocation(),hcp);
			
			endTime = System.currentTimeMillis();
			miliseconds = endTime - startTime;
			System.out.println("Total Time get records from DB: " + miliseconds);
			
			//WDEV-18001
			startTime = System.currentTimeMillis();
			
			populategrdTriageWorklist(patientsWaiting);
			
			endTime = System.currentTimeMillis();
			miliseconds = endTime - startTime;
			System.out.println("Time Populate Triage Worklist Grid: " + miliseconds);
			
		}
		else if( engine.getFormName().equals(form.getForms().Emergency.EDClinicianWorklistToAssessmentForm))
		{
			
			createdDdyngrdClinicianWorklist();
			initialiseareasCombo();				//wdev-17326
			initialiseTrackingStatusCombo();	//wdev-17326
			
			if( form.getGlobalContext().Emergency.getClinicianWorklistSearchCriteriaIsNotNull() )
			{
				form.lyrWorklist().tabClinicianWorklist().cmbAreas().setValue(form.getGlobalContext().Emergency.getClinicianWorklistSearchCriteria().getTrackingArea());
				form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().setValue(form.getGlobalContext().Emergency.getClinicianWorklistSearchCriteria().getCurrentStatus());
			}
						
			form.lyrWorklist().tabTriageWorklist().setHeaderVisible(false);
			form.lyrWorklist().showtabClinicianWorklist();
			form.lyrWorklist().tabDetails().setHeaderVisible(false);
			if( form.lyrWorklist().tabClinicianWorklist().cmbAreas().getValue() != null && form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().getValue() != null) //wdev-17326
			{
				//WDEV-18001
				startTime = System.currentTimeMillis();
				
				patientsWaiting = domain.listTrackingPatients(form.lyrWorklist().tabClinicianWorklist().cmbAreas().getValue(),form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().getValue(), null);  //wdev-17326
				
				endTime = System.currentTimeMillis();
				miliseconds = endTime - startTime;
				System.out.println("Total Time get records from DB: " + miliseconds);
				
				searchCriteriaForClinicianWorklistVo tempVo = form.getGlobalContext().Emergency.getClinicianWorklistSearchCriteria();
				if( tempVo == null )
					tempVo = new searchCriteriaForClinicianWorklistVo();
				
				tempVo.setCurrentStatus(form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().getValue());
				tempVo.setTrackingArea(form.lyrWorklist().tabClinicianWorklist().cmbAreas().getValue());
				form.getGlobalContext().Emergency.setClinicianWorklistSearchCriteria(tempVo);
			}
			
			//WDEV-18001
			startTime = System.currentTimeMillis();
		
			populategrdClinicianWorklist(patientsWaiting);
			
			endTime = System.currentTimeMillis();
			miliseconds = endTime - startTime;
			System.out.println("Time Populate Clinician Worklist Grid: " + miliseconds);
		}
		else
		{
			form.lyrWorklist().tabTriageWorklist().setHeaderVisible(true);
			form.lyrWorklist().tabClinicianWorklist().setHeaderVisible(false);
			form.lyrWorklist().tabDetails().setHeaderVisible(false);
		}
			
	}
	
	private void populategrdTriageWorklist(TrackingForDisplayClinicianAndTriageWorklistVoCollection patientsWaiting)//WDEV-18001
	{
		deletePatientImages();
		
		if( patientsWaiting == null || patientsWaiting.size() < 1)
			return;
		patientsWaiting.sort(new TriageLOSComparator(SortOrder.DESCENDING));
		for(int i = 0; i < patientsWaiting.size();i++)
		{
			TrackingForDisplayClinicianAndTriageWorklistVo tempVo = patientsWaiting.get(i);//WDEV-18001
			if( tempVo != null)
			{
				addRowToTriageDyngrd(tempVo);
				
			}
			
		}
		
	}
	private void populategrdClinicianWorklist(TrackingForDisplayClinicianAndTriageWorklistVoCollection patientsWaiting)//WDEV-18001
	{
		deletePatientImages();
		if( patientsWaiting == null || patientsWaiting.size() < 1)
			return;
		patientsWaiting.sort(new TrackingComparator());
		for(int i = 0; i < patientsWaiting.size();i++)
		{
			TrackingForDisplayClinicianAndTriageWorklistVo tempVo = patientsWaiting.get(i);//WDEV-18001
			if( tempVo != null)
			{
				addRowToClinicianDyngrd(tempVo);//WDEV-17131
				
			}
			
		}
		
	}
	
	protected void onGrdTriageWorklistSelectionChanged() throws PresentationLogicException
	{
		TrackingForDisplayClinicianAndTriageWorklistVo temp  = (TrackingForDisplayClinicianAndTriageWorklistVo)form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getSelectedRow().getValue(); //WDEV-18001
		if( temp != null && temp.getTriageDetailsIsNotNull())
		{
			displayDetailsTab(DISPLAY_TRIAGE, (TrackingForDisplayClinicianAndTriageWorklistVo)form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getSelectedRow().getValue(),true);//WDEV-18001
			form.getLocalContext().setPreviousTab(DISPLAY_TRIAGE);
		}
		
	}
	private void displayDetailsTab(int triageorcliniciantype, TrackingForDisplayClinicianAndTriageWorklistVo tempTrack, Boolean showReturnLink) //WDEV-18001
	{
		
		if(tempTrack != null )//WDEV-18001
		{
			TrackingForClinicianWorklistAndTriageVo temp = domain.getTrackingForClinicianWorklistAndTriage(tempTrack);//WDEV-18001
			
			initializeTimer();//WDEV-17337
			if( triageorcliniciantype == DISPLAY_TRIAGE)
			{
				form.lyrWorklist().tabDetails().ccEDAssessmentComponent().initialization(DISPLAY_TRIAGE, temp,showReturnLink);
				form.lyrWorklist().tabTriageWorklist().setHeaderVisible(false);
				form.lyrWorklist().showtabDetails();
			}
			else if( triageorcliniciantype == DISPLAY_CLINICIANASSESSMNRWORKLIST)
			{
				form.lyrWorklist().tabDetails().ccEDAssessmentComponent().initialization(DISPLAY_CLINICIANASSESSMNRWORKLIST, temp,showReturnLink);
				form.lyrWorklist().tabClinicianWorklist().setHeaderVisible(false);
				form.lyrWorklist().showtabDetails();
			}
			else if( triageorcliniciantype == DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN)				//wdev-17252
			{
				form.lyrWorklist().tabDetails().ccEDAssessmentComponent().initialization(DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN, temp,showReturnLink);
				form.lyrWorklist().tabClinicianWorklist().setHeaderVisible(false);
				form.lyrWorklist().showtabDetails();
			}
		}

	}
	
	protected void onGrdClinicianWorklistSelectionChanged() throws PresentationLogicException
	{
		TrackingForDisplayClinicianAndTriageWorklistVo temp  = (TrackingForDisplayClinicianAndTriageWorklistVo)form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getSelectedRow().getValue(); //WDEV-18001
		if( temp != null && temp.getTriageDetailsIsNotNull())
		{
			displayDetailsTab(DISPLAY_CLINICIANASSESSMNRWORKLIST,(TrackingForDisplayClinicianAndTriageWorklistVo)form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getSelectedRow().getValue(),true); //WDEV-18001
			form.getLocalContext().setPreviousTab(DISPLAY_CLINICIANASSESSMNRWORKLIST);
		}
		
	}

	
	protected void onDyngrdgrdTriageWorklistCellButtonClicked(DynamicGridCell cell)
	{
		
		
		//wdev-17138	
		if( cell.getValue() != null && cell.getValue() instanceof DynamicGridCellTable)
	    {
			
            DynamicGridCellTable helper = (DynamicGridCellTable)cell.getValue();
            if( helper.getFiredCell() != null && helper.getFiredCell().getIdentifier() != null)
            {
                   if( helper.getFiredCell().getIdentifier() instanceof SelectedTriageWorklistButtons)
                   {
                	   
                	    TrackingForClinicianWorklistAndTriageVo tempVo  = domain.getTrackingForClinicianWorklistAndTriage((TrackingForDisplayClinicianAndTriageWorklistVo)cell.getRow().getValue());//WDEV-18001
                	    if( tempVo != null && tempVo.getPatientIsNotNull() )
                	    {
                	    	form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(tempVo.getPatient()));
                	    }
	                    if( SelectedTriageWorklistButtons.STARTEDITTRIAGE.equals((SelectedTriageWorklistButtons) helper.getFiredCell().getIdentifier()))
	                	{
	                    	displayDetailsTab(DISPLAY_TRIAGE, (TrackingForDisplayClinicianAndTriageWorklistVo)cell.getRow().getValue(),true); //WDEV-18001
	            			form.getLocalContext().setPreviousTab(DISPLAY_TRIAGE);  
	                	}
	                    else if( SelectedTriageWorklistButtons.PATIENTSUMMARY.equals((SelectedTriageWorklistButtons) helper.getFiredCell().getIdentifier()))
	                    {
	                    	//TrackingForClinicianWorklistAndTriageVo tempVo = (TrackingForClinicianWorklistAndTriageVo)cell.getRow().getValue();
	            			
	            			if( tempVo != null)
	            			{
	            				form.getGlobalContext().Core.setImsReportId(EMERGENCY_PATIENT_SUMMARY);
	            				engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {CARE_CONTEXT_SEED, tempVo.getAttendance().getCareContext().getID_CareContext()});
	            			}	
	                    }
	                    else if( SelectedTriageWorklistButtons.DECISIONTOAMIT.equals((SelectedTriageWorklistButtons) helper.getFiredCell().getIdentifier()))
	                    {
	                    	//TrackingForClinicianWorklistAndTriageVo tempVo = (TrackingForClinicianWorklistAndTriageVo)cell.getRow().getValue();
	                    	form.getGlobalContext().Emergency.setTracking(tempVo);
	            			
	            			//WDEV-17661
	            			if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING"))
	            			{
	            				engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog, new Object[] {tempVo});
	            			}
	            			else if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PARTIAL"))
	            			{
	            				engine.open(form.getForms().Emergency.EDPartialAdmissionDialog, new Object[] {tempVo});
	            			}
	                    }
	                    else if( SelectedTriageWorklistButtons.VIEWHISTORY.equals((SelectedTriageWorklistButtons) helper.getFiredCell().getIdentifier()))
	                    {
	                    	engine.open(form.getForms().Emergency.AttendanceHistory);
	                    }
                   }
            }
            //--------------
	        

	    }
		
		/*if( cell != null && cell.getColumn() != null && cell.getColumn().getIdentifier() != null &&  cell.getColumn().getIdentifier().equals(COLUMN_EXTTRANSFERTRIAGE ))		//wdev-16950
		{
			
		}
		*/
		
	}

	
	protected void onDyngrdgrdTriageWorklistRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		TrackingForDisplayClinicianAndTriageWorklistVo temp  = (TrackingForDisplayClinicianAndTriageWorklistVo)row.getValue(); //wdev-16751 //WDEV-18001
		
		//wdev-17138
		if( temp != null && temp.getPatientIsNotNull() )
 	    {
 	    	form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(temp.getPatient()));
 	    }
		//---------
		if( temp != null && temp.getTriageDetailsIsNotNull())
		{
			displayDetailsTab(DISPLAY_TRIAGE,temp ,true);
			form.getLocalContext().setPreviousTab(DISPLAY_TRIAGE);
		}
		
	}
	private void createddyngrdTriageWorklist()
	{
		form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getRows().clear();
		form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getColumns().clear();
		
		
		DynamicGridColumn columnName = form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getColumns().newColumn("Name", COLUMN_NAMETRIAGE);
		columnName.setWidth(300);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		
		columnName = form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getColumns().newColumn(" ", COLUMN_STARTEDITTRIAGE);
		columnName.setWidth(170);
		columnName.setReadOnly(false);
		
		columnName = form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getColumns().newColumn(" ", COLUMN_PATIENTSUMMARYTRIAGE);
		columnName.setWidth(170);
		columnName.setReadOnly(false);
		
		columnName = form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getColumns().newColumn(" ", COLUMN_VIEWHISTORYTRIAGE);
		columnName.setWidth(170);
		columnName.setReadOnly(false);
		
		//wdev-16950
		if( engine.hasRight(AppRight.ED_CAN_PERFORM_ADMISSION))
		{
			columnName = form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getColumns().newColumn(" ", COLUMN_DECISIONTOADMITTRIAGE);
			columnName.setWidth(170);
			columnName.setReadOnly(false);
		}
		
		if( engine.hasRight(AppRight.ED_CAN_PERFORM_TRANSFER))
		{
			columnName = form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getColumns().newColumn(" ", COLUMN_EXTTRANSFERTRIAGE);
			columnName.setWidth(170);
			columnName.setReadOnly(false);
		}
		
		//------------
	
	}
	
	private void createdDdyngrdClinicianWorklist()
	{
		form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getRows().clear();
		form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getColumns().clear();
		
		DynamicGridColumn columnName = form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getColumns().newColumn("Name", COLUMN_NAMEASSESSMENT);
		columnName.setWidth(400);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(true);
		
		columnName = form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getColumns().newColumn(" ", COLUMN_SEENBYCOMPLASSESSMENT);		//wdev-17252
		columnName.setWidth(120);
		columnName.setReadOnly(false);
		
		columnName = form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getColumns().newColumn(" ", COLUMN_STARTEDITASSESSMENT);
		columnName.setWidth(120);
		columnName.setReadOnly(false);
		
		columnName = form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getColumns().newColumn(" ", COLUMN_PATIENTSUMMARYASSESSMENT);
		columnName.setWidth(120);
		columnName.setReadOnly(false);
		
		columnName = form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getColumns().newColumn(" ", COLUMN_VIEWHISTORYASSESSMENT);
		columnName.setWidth(120);
		columnName.setReadOnly(false);
		
		//wdev-16950
		if( engine.hasRight(AppRight.ED_CAN_PERFORM_ADMISSION))
		{
			columnName = form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getColumns().newColumn(" ", COLUMN_DECISIONTOADMITASSESSMENT);
			columnName.setWidth(120);
			columnName.setReadOnly(false);
		}
		if( engine.hasRight(AppRight.ED_CAN_PERFORM_TRANSFER))
		{
			columnName = form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getColumns().newColumn(" ", COLUMN_EXTTRANSFERASSESSMENT);
			columnName.setWidth(120);
			columnName.setReadOnly(false);
		}
		//----------------
	
	}
	private void addRowToTriageDyngrd(TrackingForDisplayClinicianAndTriageWorklistVo tempVo)//WDEV-18001
	{
		if(	tempVo == null)
			return;
			
		
		DynamicGridRow row = form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getRows().newRow();
		row.setValue(tempVo);
					
		
		addNameTriageRow(tempVo,row);
		//wdev-17138
		DynamicGridCell cellLabel = row.getCells().newCell(getColumn(COLUMN_STARTEDITTRIAGE), DynamicCellType.TABLE);
		DynamicGridCellTable helper = new DynamicGridCellTable(cellLabel);		
		TableRow  tableRow = helper.getRows().newRow();
		TableCell tableCell = tableRow.getCells().newCell();
		  		  tableCell.setType(TableCellType.BUTTON);		
		  		
					
		TableCellOptions cellOptions = new TableCellOptions();
						 cellOptions.setAutopostback(true);
						 
						 if(	tempVo.getTriageDetailsIsNotNull())
						 {
							 cellOptions.setButtonImage(form.getImages().Core.Edit);
							 cellOptions.setButtonImageText("  Edit Triage");
							 
								
						 }
						 else
						 {
							 cellOptions.setButtonImage(form.getImages().Core.New);
							 cellOptions.setButtonImageText("  Start Triage");
								
						 }
						 
						 cellOptions.setButtonHeight(72);
						 cellOptions.setButtonWidth(160);
						 cellOptions.setAlign(Align.CENTER);
	
						 				 	
		tableCell.setOptions(cellOptions);
		tableCell.setIdentifier(SelectedTriageWorklistButtons.STARTEDITTRIAGE);
		cellLabel.setValue(helper);
		//----------------------
				
		//wdev-17138
		cellLabel = row.getCells().newCell(getColumn(COLUMN_PATIENTSUMMARYTRIAGE), DynamicCellType.TABLE);
		helper = new DynamicGridCellTable(cellLabel);		
		tableRow = helper.getRows().newRow();
		tableCell = tableRow.getCells().newCell();
		  		  tableCell.setType(TableCellType.BUTTON);		
					
		cellOptions = new TableCellOptions();
						 cellOptions.setAutopostback(true);
						 cellOptions.setButtonImage(form.getImages().Clinical.PatientDiagnosisChecklist48);
						 cellOptions.setButtonImageText("  Patient Summary");
						 cellOptions.setButtonHeight(72);
						 cellOptions.setButtonWidth(160);
	
		tableCell.setOptions(cellOptions);
		tableCell.setIdentifier(SelectedTriageWorklistButtons.PATIENTSUMMARY);
		cellLabel.setValue(helper);

		cellLabel = row.getCells().newCell(getColumn(COLUMN_VIEWHISTORYTRIAGE), DynamicCellType.TABLE);
		helper = new DynamicGridCellTable(cellLabel);		
		tableRow = helper.getRows().newRow();
		tableCell = tableRow.getCells().newCell();
		  		  tableCell.setType(TableCellType.BUTTON);		
					
		cellOptions = new TableCellOptions();
						 cellOptions.setAutopostback(true);
						 cellOptions.setButtonImage(form.getImages().Emergency.VIEWHISTORY16);		//wdev-17329
						 cellOptions.setButtonImageText("  View History");
						 cellOptions.setButtonHeight(72);
						 cellOptions.setButtonWidth(160);
	
		tableCell.setOptions(cellOptions);
		tableCell.setIdentifier(SelectedTriageWorklistButtons.VIEWHISTORY);
		cellLabel.setValue(helper);
		//-----------------
			
		
		//wdev-16950
		if( engine.hasRight(AppRight.ED_CAN_PERFORM_ADMISSION))
		{
			if( tempVo != null && tempVo.getPatientIsNotNull() && !Boolean.TRUE.equals(tempVo.getPatient().getIsQuickRegistrationPatient())) //wdev-17110
			{
				//wdev-17138
				cellLabel = row.getCells().newCell(getColumn(COLUMN_DECISIONTOADMITTRIAGE), DynamicCellType.TABLE);
				helper = new DynamicGridCellTable(cellLabel);		
				tableRow = helper.getRows().newRow();
				tableCell = tableRow.getCells().newCell();
				  		  tableCell.setType(TableCellType.BUTTON);		
							
				cellOptions = new TableCellOptions();
								 cellOptions.setAutopostback(true);
								 cellOptions.setButtonImage(form.getImages().Emergency.DTA16);		//wdev-17329
								 cellOptions.setButtonImageText("  Decision to Admit");
								 cellOptions.setButtonHeight(72);
								 cellOptions.setButtonWidth(160);
			
				tableCell.setOptions(cellOptions);
				tableCell.setIdentifier(SelectedTriageWorklistButtons.DECISIONTOAMIT);
				cellLabel.setValue(helper);

			
			}
		}
		if( engine.hasRight(AppRight.ED_CAN_PERFORM_TRANSFER))
		{
			if( ConfigFlag.UI.ED_TRANSFER_TO_OTHER_HOSPITAL.getValue())
			{
				DynamicGridCell exttransf = row.getCells().newCell(getColumn(COLUMN_EXTTRANSFERTRIAGE), DynamicCellType.BUTTON);
				exttransf.setButtonText("External Transfer");
				exttransf.setReadOnly(false);
			}
		}
		//-------------
	}
	private void addRowToClinicianDyngrd(TrackingForDisplayClinicianAndTriageWorklistVo tempVo)//WDEV-17131 //WDEV-18001
	{
		if(	tempVo == null)
			return;
			
		DynamicGridRow row = form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getRows().newRow();
		row.setValue(tempVo);
						
		addNameClinicianRow(tempVo,row);//WDEV-17131
		
		//wdev-17252
		DynamicGridCell cellLabel = row.getCells().newCell(getColumnClin(COLUMN_SEENBYCOMPLASSESSMENT), DynamicCellType.TABLE);
		DynamicGridCellTable helper = new DynamicGridCellTable(cellLabel);		
		TableRow  tableRow = helper.getRows().newRow();
		TableCell tableCell = tableRow.getCells().newCell();
		  		  tableCell.setType(TableCellType.BUTTON);		
		  		
					
		TableCellOptions cellOptions = new TableCellOptions();
						 cellOptions.setAutopostback(true);
						 cellOptions.setButtonImage(form.getImages().Emergency.SEENCOMPLETE16);		//wdev-17329
						 cellOptions.setButtonImageText("  Seen");
						 cellOptions.setButtonHeight(111);
						 cellOptions.setButtonWidth(110);
						 cellOptions.setAlign(Align.CENTER);
	
		tableCell.setOptions(cellOptions);
		tableCell.setIdentifier(SelectedClinicianWorklistButtons.SEENBYCOMPLASSESSMNENT);
		cellLabel.setValue(helper);
		//----------
				
		//----------------- wdev-17138
		cellLabel = row.getCells().newCell(getColumnClin(COLUMN_STARTEDITASSESSMENT), DynamicCellType.TABLE);
		helper = new DynamicGridCellTable(cellLabel);		
		tableRow = helper.getRows().newRow();
		tableCell = tableRow.getCells().newCell();
		  		  tableCell.setType(TableCellType.BUTTON);		
		  		
					
		cellOptions = new TableCellOptions();
						 cellOptions.setAutopostback(true);
						 cellOptions.setButtonImage(form.getImages().Core.Edit);
						 cellOptions.setButtonImageText("  Edit"+"<br>"+ "Assessment");
						 cellOptions.setButtonHeight(111);
						 cellOptions.setButtonWidth(110);
						 cellOptions.setAlign(Align.CENTER);
	
		tableCell.setOptions(cellOptions);
		tableCell.setIdentifier(SelectedClinicianWorklistButtons.EDITASSESSMENT);
		cellLabel.setValue(helper);
		
		cellLabel = row.getCells().newCell(getColumnClin(COLUMN_PATIENTSUMMARYASSESSMENT), DynamicCellType.TABLE);
		helper = new DynamicGridCellTable(cellLabel);		
		tableRow = helper.getRows().newRow();
		tableCell = tableRow.getCells().newCell();
		  		  tableCell.setType(TableCellType.BUTTON);		
					
		cellOptions = new TableCellOptions();
						 cellOptions.setAutopostback(true);
						 cellOptions.setButtonImage(form.getImages().Clinical.PatientDiagnosisChecklist48);
						 cellOptions.setButtonImageText("  Patient"+"<br>"+ "Summary");
						 cellOptions.setButtonHeight(111);
						 cellOptions.setButtonWidth(110);
	
		tableCell.setOptions(cellOptions);
		tableCell.setIdentifier(SelectedClinicianWorklistButtons.PATIENTSUMMARY);
		cellLabel.setValue(helper);

		cellLabel = row.getCells().newCell(getColumnClin(COLUMN_VIEWHISTORYASSESSMENT), DynamicCellType.TABLE);
		helper = new DynamicGridCellTable(cellLabel);		
		tableRow = helper.getRows().newRow();
		tableCell = tableRow.getCells().newCell();
		  		  tableCell.setType(TableCellType.BUTTON);		
					
		cellOptions = new TableCellOptions();
						 cellOptions.setAutopostback(true);
						 cellOptions.setButtonImage(form.getImages().Emergency.VIEWHISTORY16);		//wdev-17329
						 cellOptions.setButtonImageText("  View History");
						 cellOptions.setButtonHeight(111);
						 cellOptions.setButtonWidth(110);
	
		tableCell.setOptions(cellOptions);
		tableCell.setIdentifier(SelectedClinicianWorklistButtons.VIEWHISTORY);
		cellLabel.setValue(helper);
	
		
		
		//----------------------
	
				
		//wdev-16950
		if( engine.hasRight(AppRight.ED_CAN_PERFORM_ADMISSION))
		{
			if( tempVo != null && tempVo.getPatientIsNotNull() && !Boolean.TRUE.equals(tempVo.getPatient().getIsQuickRegistrationPatient())) //wdev-17110
			{
						
				cellLabel = row.getCells().newCell(getColumnClin(COLUMN_DECISIONTOADMITASSESSMENT), DynamicCellType.TABLE);
				helper = new DynamicGridCellTable(cellLabel);		
				tableRow = helper.getRows().newRow();
				tableCell = tableRow.getCells().newCell();
				  		  tableCell.setType(TableCellType.BUTTON);		
							
				cellOptions = new TableCellOptions();
								 cellOptions.setAutopostback(true);
								 cellOptions.setButtonImage(form.getImages().Emergency.DTA16);	//wdev-17329
								 cellOptions.setButtonImageText(" Decision"+"<br>" + "to Admit");
								 cellOptions.setButtonHeight(111);
								 cellOptions.setButtonWidth(110);
			
				tableCell.setOptions(cellOptions);
				tableCell.setIdentifier(SelectedClinicianWorklistButtons.DECISIONTOAMIT);
				cellLabel.setValue(helper);
			}
		}
		if( engine.hasRight(AppRight.ED_CAN_PERFORM_TRANSFER))
		{
			if( ConfigFlag.UI.ED_TRANSFER_TO_OTHER_HOSPITAL.getValue())
			{
				DynamicGridCell exttransf = row.getCells().newCell(getColumnClin(COLUMN_EXTTRANSFERASSESSMENT), DynamicCellType.BUTTON);
				exttransf.setButtonText("External Transfer");
				exttransf.setReadOnly(false);
			}
		}
		//-------------
		
	}
	
	//wdev-16751
	
	private Integer calculateDateDiffInMinutes(DateTime currentTime, DateTime registrationDateTime) 
	{
		if(currentTime == null || registrationDateTime == null)
			return null;
		
		long currentTimeInMillis = currentTime.getJavaDate().getTime();
		long registrationDateTimeInMillis = registrationDateTime.getJavaDate().getTime();
		
		return (int)(((currentTimeInMillis < registrationDateTimeInMillis ? registrationDateTimeInMillis - currentTimeInMillis : currentTimeInMillis - registrationDateTimeInMillis)/1000)/60);
	}
	private void deletePatientImages() 
	{
		List<String> importedFiles = form.getLocalContext().getPatientImagesList();
		
		if (importedFiles != null && importedFiles.size() > 0)
		{
			for (Iterator<String> iterator = importedFiles.iterator(); iterator.hasNext();) 
			{
				String file = ((String) iterator.next()).replace("/", "\\");
				File f = new File(file);
				f.delete();											
			}
		}
	}
	
	private Image getPriorityImage(TrackingForDisplayClinicianAndTriageWorklistVo tracking)  //WDEV-18001
	{
		if(tracking == null || tracking.getTriageDetails() == null)
			return null;
		
		if(TriagePriority.PRIORITY1.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P1;
		else if(TriagePriority.PRIORITY2.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P2;
		else if(TriagePriority.PRIORITY3.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P3;
		else if(TriagePriority.PRIORITY4.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P4;
		else if(TriagePriority.PRIORITY5.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P5;
		else if( TriagePriority.SKIPPED_TRIAGE.equals(tracking.getTriageDetails().getCurrentTriagePriority()))
				 return form.getImages().Emergency.Triage_Priority_SkippedTriage;
		return null;
	}
	private Integer addNameClinicianRow(TrackingForDisplayClinicianAndTriageWorklistVo tracking, DynamicGridRow row)//WDEV-17131 //WDEV-18001
	{
		if( tracking == null)
			return null;
		
		boolean isSkippedTriage = tracking.getCurrentStatus() != null && TrackingStatus.SKIPPED_TRIAGE.equals(tracking.getCurrentStatus().getStatus());
		
		AppImageVo patientImage = null;
		
		try 
		{
			patientImage = getPatientImage(tracking);
			
			if(tracking != null && tracking.getPatient() != null && tracking.getPatient().getPhoto() != null)
			{
				addPatientToLocalCollection(patientImage);
			}
		}
		catch (IOException e) 
		{
			
		}
		
		Integer LOS = null;
		
		if( ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))	//wdev-18327
		{
    		if(tracking.getAttendance() != null && tracking.getAttendance().getRegistrationDateTime() != null)
    		{
    			LOS = calculateDateDiffInMinutes(new DateTime(), tracking.getAttendance().getRegistrationDateTime());
    		}
		}
		else
		{
    		if(tracking.getAttendance() != null && tracking.getAttendance().getArrivalDateTime() != null)					//wdev-18299
    		{
    			LOS = calculateDateDiffInMinutes(new DateTime(), tracking.getAttendance().getArrivalDateTime());			//wdev-18299
    		}
		}	
		
					
		DynamicGridCell cellLabel = row.getCells().newCell(getColumnClin(COLUMN_NAMEASSESSMENT),DynamicCellType.TABLE);
		
		DynamicGridCellTable helper = new DynamicGridCellTable(cellLabel);		
		helper.setBorder(4);		
		
		TableRow  tableRow = helper.getRows().newRow();
		
		//Patient			
		TableCell tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		TableCellOptions cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(16);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						 setAwaitingClinicianNameCellOptionsColors(cellOptions, LOS, isSkippedTriage);
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(220);		
		tableCell.setColSpan(4);			
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getNameIsNotNull())
		{
			String strSurname = tracking.getPatient().getName().getSurname();	//wdev-17580
			if( strSurname == null )
				strSurname = "                 ";
			tableCell.setValue(strSurname.toUpperCase());// + ", " + (tracking.getPatient().getName().getForename()!=null ? tracking.getPatient().getName().getForename():""));//WDEV-17184,wdev-17580
			tableCell.setTooltip("Surname: " + strSurname.toUpperCase());//WDEV-17138,wdev-17580
			
		}
		//wdev-17138 ---------------
		tableRow = helper.getRows().newRow();   //wdev-17138
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(16);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						 setAwaitingClinicianNameCellOptionsColors(cellOptions, LOS, isSkippedTriage);
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(220);		
		tableCell.setColSpan(4);
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getNameIsNotNull())  //wdev-17138
		{	
			
			String strForename = tracking.getPatient().getName().getForename();
			if( strForename == null)
				strForename = "                 ";
			tableCell.setValue(strForename.toUpperCase());//WDEV-17184
			tableCell.setTooltip("Forename: " + strForename);//wdev-17138
			
			//tableCell.setTooltip(tracking.getPatient().getName().getSurname().toUpperCase() + ", " + (tracking.getPatient().getName().getForename()!=null ? tracking.getPatient().getName().getForename():""));//WDEV-17184
			//tableCell.setValue(tracking.getPatient().getName().getSurname().toUpperCase() + ", " + (tracking.getPatient().getName().getForename()!=null ? tracking.getPatient().getName().getForename():""));//WDEV-17184
			//tableCell.setTooltip(tracking.getPatient().getName().getSurname().toUpperCase() + ", " + (tracking.getPatient().getName().getForename()!=null ? tracking.getPatient().getName().getForename():""));//WDEV-17184
		}		
		
		//-------------------------
			
		//Hospital
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(13);
						 cellOptions.setAlign(Align.RIGHT);
		tableCell.setOptions(cellOptions);
		tableCell.setColSpan(2);
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getHospnum() != null)
		{
			tableCell.setValue(tracking.getPatient().getHospnum().getIdValue());
			tableCell.setTooltip(tracking.getPatient().getHospnum().getIdValue());
		}		
				
		//Triage priority
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setValue(getPriorityImage(tracking));//engine.getRegisteredImage(129110));
		tableCell.setWidth(18);		//wdev-17138
	
		tableCell.setColSpan(2);
		
		//Temporary patient Image  - wdev-17138
		if( Boolean.TRUE.equals(tracking.getPatient().getIsQuickRegistrationPatient()))
		{
			tableCell = tableRow.getCells().newCell();
			tableCell.setType(TableCellType.IMAGE);
			tableCell.setValue(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getIsQuickRegistrationPatient()) ? form.getImages().Emergency.EvenHistoryEnabled16 : null);
			
			tableCell.setTooltip("Temporary Patient");
			tableCell.setWidth(17);
		}
		//--------------------------
		
		tableRow = helper.getRows().newRow();
		
		//Patient image
				 tableCell = tableRow.getCells().newCell();
							tableCell.setType(TableCellType.IMAGE);		
							tableCell.setRowSpan(3);
							tableCell.setValue(patientImage);
							tableCell.setWidth(50);
		
		//Gender
				tableCell = tableRow.getCells().newCell();
				tableCell.setType(TableCellType.IMAGE);
				tableCell.setWidth(24);
				if (tracking.getPatientIsNotNull() && tracking.getPatient().getSex() != null)
				{
					if(tracking.getPatient().getSex().equals(Sex.MALE))
					{
						tableCell.setValue(form.getImages().Emergency.Male);
					}
					else if(tracking.getPatient().getSex().equals(Sex.FEMALE))
					{
						tableCell.setValue(form.getImages().Emergency.Female);
					}			
				}		
		
		//Presenting problem
		tableCell = tableRow.getCells().newCell();
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(13);
						 cellOptions.setFontStyle(FontStyle.ITALIC);
						 cellOptions.setFontWeight(FontWeight.BOLD);
						 setProblemCellOptionColor(cellOptions, tracking, LOS);
						 cellOptions.setAlign(Align.CENTER);					 
		tableCell.setType(TableCellType.STRING);
		tableCell.setOptions(cellOptions);
		
		if(tracking.getTriageDetails() != null && tracking.getTriageDetails().getMainPresentingProblem() != null)
		{
			tableCell.setValue(tracking.getTriageDetails().getMainPresentingProblem().getPatientProblem());
		}
		tableCell.setWidth(140);
		tableCell.setColSpan(3);
		

		//Path Image
		//WDEV-17131	
		if (Boolean.TRUE.equals(tracking.getPatient().hasPatientNotification()))
		{
			tableCell = tableRow.getCells().newCell();
    		tableCell.setType(TableCellType.IMAGE);
    		
    		tableCell.setValue(form.getImages().OCRR.Pathology48);
    		tableCell.setWidth(24);
		}	
		//WDEV-17131
		/*
		//Rad Image
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		if(position == 0 || position == 2)
		{
			tableCell.setValue(form.getImages().Core.Radiology48);//engine.getRegisteredImage(129121));	
		}
		tableCell.setWidth(24);
		*/
		
		//DOB
		tableRow = helper.getRows().newRow();
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(11);
						 cellOptions.setFontWeight(FontWeight.BOLD);
						 cellOptions.setAlign(Align.LEFT);
		tableCell.setOptions(cellOptions);
		tableCell.setValue("DOB:");
		tableCell.setWidth(30);
		
		//dd/mm/yyy
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(11);					
						 cellOptions.setAlign(Align.LEFT);
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(105);
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getDobIsNotNull())
		{
			tableCell.setValue(tracking.getPatient().getDob().toString() + (tracking.getAttendance() != null && tracking.getAttendance().getAgeAtAttendance() != null ? " (" + tracking.getAttendance().getAgeAtAttendance() + ")" : ""));
			tableCell.setTooltip(tracking.getPatient().getDob().toString() + (tracking.getAttendance() != null && tracking.getAttendance().getAgeAtAttendance() != null ? " (" + tracking.getAttendance().getAgeAtAttendance() + ")" : ""));
		}
		
		
		//Time since
				tableCell = tableRow.getCells().newCell();
				cellOptions = new TableCellOptions();		
								 cellOptions.setTextColor(Color.Black);
								 cellOptions.setFontFamily(FontFamily.CALIBRI);
								 cellOptions.setFontSize(12);
								 cellOptions.setFontWeight(FontWeight.BOLD);										 
								 //cellOptions.setBackgroundColor(Color.Yellow);
								 cellOptions.setAlign(Align.CENTER);
				tableCell.setType(TableCellType.STRING);
				tableCell.setOptions(cellOptions);
				
				if(tracking.getTriageDetails() != null && tracking.getTriageDetails().getTriageStartDateTime() != null)
				{
					Integer timeSince = calculateDateDiffInMinutes(new DateTime(), tracking.getTriageDetails().getTriageStartDateTime());
					tableCell.setValue(EmergencyDisplayHelper.minutesToHoursAndMinutes(timeSince));//WDEV-15818
					String str = EmergencyDisplayHelper.minutesToHoursAndMinutes(timeSince);
					if( str != null)
						tableCell.setTooltip(str +" since Triage");//WDEV-15818
				}
				tableCell.setWidth(50);
		
		
		
		//LOS
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(11);
						 cellOptions.setFontWeight(FontWeight.BOLD);
						 setLOSCellOptionColor(cellOptions, LOS);
						 cellOptions.setAlign(Align.CENTER);
						 
		tableCell.setOptions(cellOptions);
		
		if(LOS != null)
		{
			tableCell.setValue(EmergencyDisplayHelper.minutesToHoursAndMinutes(LOS));//WDEV-15818
			String str1 = EmergencyDisplayHelper.minutesToHoursAndMinutes(LOS);
			if( str1 != null)
			{
				if( ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))	//wdev-18327
					tableCell.setTooltip(str1+" since Registration");//WDEV-15818, wdev-16751
				else
					tableCell.setTooltip(str1+" since Arrival ");//WDEV-15818, wdev-16751,wdev-18299
			}
		}
		tableCell.setWidth(50);
		
		//WDEV-17924
		//Allergy
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		tableCell.setValue(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAllergies()) ? form.getImages().Core.Allergies48 : null);
		tableCell.setTooltip(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAllergies())? "The patient has allergies.":null);//WDEV-17924
		
		//Alert
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		tableCell.setValue(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAlerts()) ? form.getImages().Core.Allergies18 : null);//WDEV-17924
		tableCell.setTooltip(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAlerts()) ? "The patient has alerts." : null);//WDEV-17924
		
		//wdev-17326
		// - STatus
		tableRow = helper.getRows().newRow();  
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(10);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						 //setAwaitingClinicianNameCellOptionsColors(cellOptions, LOS, isSkippedTriage);
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(140);		
		tableCell.setColSpan(3);
		if( tracking.getCurrentStatusIsNotNull() && tracking.getCurrentStatus().getStatusIsNotNull() ) 
		{	
			//WDEV-17909
			if (TrackingStatus.REFERRED_TO_OTHER_SPECIALITY.equals(tracking.getCurrentStatus().getStatus()) )
			{
				tableCell.setValue("Referred to:" + ((tracking.getCurrentReferral()!=null && tracking.getCurrentReferral().getSpecialty()!=null ) ? tracking.getCurrentReferral().getSpecialty().getText():""));
			}
			else 
			{
				tableCell.setValue(tracking.getCurrentStatus().getStatus().getIItemText());
			}
			
			tableCell.setTooltip("Status: " + tracking.getCurrentStatus().getStatus().getIItemText() + (TrackingStatus.REFERRED_TO_OTHER_SPECIALITY.equals(tracking.getCurrentStatus().getStatus()) && tracking.getCurrentReferral()!=null && tracking.getCurrentReferral().getSpecialty()!=null  ? "<br>Specialty: " +tracking.getCurrentReferral().getSpecialty().getText() : "")); //WDEV-17638
		}
		
		//Current Area
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(10);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						 //setAwaitingClinicianNameCellOptionsColors(cellOptions, LOS, isSkippedTriage);
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(100);		
		tableCell.setColSpan(4);
		if( tracking.getCurrentAreaIsNotNull() ) 
		{	
			tableCell.setValue(tracking.getCurrentArea().getAreaDisplayName());
			tableCell.setTooltip("Current Area: " + tracking.getCurrentArea().getAreaDisplayName());
		}
		//-----------
		
		cellLabel.setValue(helper);
		cellLabel.setReadOnly(true);
		
		row.setValue(tracking);
		
		return LOS;

	}
	
	private void setAwaitingClinicianNameCellOptionsColors(TableCellOptions cellOptions,	Integer LOS, boolean isSkippedTriage) 
	{
		if(cellOptions == null)
			return;
		
		Color surnameFontColor = null;
		Color surnameBackgroudColor = null;
		Color surnameFlashingTextColour = null;		
		
		boolean awaitingClinicianBreachWarning = false;
		boolean awaitingClinicianBreached = false;
		
		YesNo surnameBreachWarningFlashing = null;
		YesNo surnameBreachedFlashing = null;
		
		if(isSkippedTriage)
		{
			TriagePriorityKpConfigVo triagePriorityKpConfig = getTriagePriorityKpConfig(TriagePriority.SKIPPED_TRIAGE);	
			
			if(triagePriorityKpConfig != null)
			{
				surnameFontColor = triagePriorityKpConfig.getDefaultFontColour();
				surnameBackgroudColor = triagePriorityKpConfig.getDefaultRowColour();
			}
			
			if(LOS != null && triagePriorityKpConfig != null)
			{	
				if(triagePriorityKpConfig.getPriorityBreachWarningKPI() != null && triagePriorityKpConfig.getPriorityBreachedKPI() != null)
				{
					if(LOS >= triagePriorityKpConfig.getPriorityBreachWarningKPI() && LOS < triagePriorityKpConfig.getPriorityBreachedKPI())
					{
						surnameFontColor = triagePriorityKpConfig.getPriorityBreachWarningKPITextColour();			
						surnameBackgroudColor = triagePriorityKpConfig.getPriorityBreachWarningKPIBackgroundColour();	
						surnameFlashingTextColour = triagePriorityKpConfig.getPriorityBreachWarningKPIFlashingTextColour();
						
						awaitingClinicianBreachWarning = true;
						surnameBreachWarningFlashing = triagePriorityKpConfig.getPriorityBreachWarningKPIFlashingText();
					}
					else if(LOS >= triagePriorityKpConfig.getPriorityBreachedKPI())
					{
						surnameFontColor = triagePriorityKpConfig.getPriorityBreachKPITextColour();				
						surnameBackgroudColor = triagePriorityKpConfig.getPriorityBreachedKPIBackgroundColour();
						surnameFlashingTextColour = triagePriorityKpConfig.getPriorityBreachedKPIFlashingTextColour();
						
						awaitingClinicianBreached = true;
						surnameBreachedFlashing = triagePriorityKpConfig.getPriorityBreachedKPIFlashingText();
					}
				}
			}
		}
		/*else
		{
			if(LOS != null && form.getLocalContext().getAttendanceKPIConfig() != null)
			{
				if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPI() != null && form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachedKPI() != null)
				{
					if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPI() && LOS < form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachedKPI())
					{
						surnameFontColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPITextColour(); 
						surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPIBackgroundColour();
						surnameFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPIFlashingTextColour();
						
						awaitingClinicianBreachWarning = true;
						surnameBreachWarningFlashing = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachWarningKPIFlashingText();
					}
					else if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachedKPI())
					{
						surnameFontColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPITextColour();	
						surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPIBackgroundColour();
						surnameFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPIFlashingTextColour();	
						
						awaitingClinicianBreached = true;
						surnameBreachedFlashing = form.getLocalContext().getAttendanceKPIConfig().getAwaitingClinicianBreachKPIFlashingText();
					}
				}
			}
		}*/
		
		if((awaitingClinicianBreachWarning && YesNo.YES.equals(surnameBreachWarningFlashing))
				|| (awaitingClinicianBreached && YesNo.YES.equals(surnameBreachedFlashing)))
		{
			if(surnameFontColor != null && surnameFlashingTextColour != null && surnameBackgroudColor != null)
				cellOptions.setTextAndBackgroundBlink(surnameFontColor ,surnameFlashingTextColour ,surnameBackgroudColor, surnameBackgroudColor);
		}
		 
		if(surnameBackgroudColor != null)
			cellOptions.setBackgroundColor(surnameBackgroudColor);	
		if(surnameFontColor != null)
			cellOptions.setTextColor(surnameFontColor);	
	}

	private Integer addNameTriageRow(TrackingForDisplayClinicianAndTriageWorklistVo tracking, DynamicGridRow row)//WDEV-18001
	{
		if(tracking == null)
			return null;
		
		AppImageVo patientImage = null;
		
		try 
		{
			patientImage = getPatientImage(tracking);
			
			if(tracking != null && tracking.getPatient() != null && tracking.getPatient().getPhoto() != null)
			{
				addPatientToLocalCollection(patientImage);
			}
		}
		catch (IOException e) 
		{		
		} 
		
		Integer LOS = null;
		if( ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))	//wdev-18327
		{
			if(tracking.getAttendance() != null && tracking.getAttendance().getRegistrationDateTime() != null)
			{
				LOS = calculateDateDiffInMinutes(new DateTime(), tracking.getAttendance().getRegistrationDateTime());
			}
		}
		else
		{
    		if(tracking.getAttendance() != null && tracking.getAttendance().getArrivalDateTime() != null)				//wdev-18299	
    		{
    			LOS = calculateDateDiffInMinutes(new DateTime(), tracking.getAttendance().getArrivalDateTime());		//wdev-18299
    		}
		}
		
		DynamicGridCell cellLabel = row.getCells().newCell(getColumn(COLUMN_NAMETRIAGE), DynamicCellType.TABLE);
		DynamicGridCellTable helper = new DynamicGridCellTable(cellLabel);		
		helper.setBorder(4);		
		
		TableRow  tableRow = helper.getRows().newRow();
		
		TableCell tableCell = tableRow.getCells().newCell();
					tableCell.setType(TableCellType.IMAGE);		
					tableCell.setRowSpan(2);
					tableCell.setValue(patientImage);
					tableCell.setWidth(50);
					
		//Patient Name								
		TableCellOptions cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(16);
						 cellOptions.setFontWeight(FontWeight.BOLDER);	
						 cellOptions.setAlign(Align.CENTER);
						 setAwaitingTriageNameCellOptionsColors(cellOptions, LOS);						 

		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(130);		
		tableCell.setColSpan(3);
		
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getNameIsNotNull())
		{
			String strForename = tracking.getPatient().getName().getForename();
			if( strForename == null)
				strForename = "       ";
			
			String strSurname = tracking.getPatient().getName().getSurnameIsNotNull() ? tracking.getPatient().getName().getSurname().toUpperCase():"       "; 		//wdev-17580
			tableCell.setValue( strSurname + "<br>"  + strForename ); 		//wdev-15939 ,wdev-17138
			tableCell.setTooltip("Surname: " + strSurname + ", Forename: " + (tracking.getPatient().getName().getForenameIsNotNull() ? tracking.getPatient().getName().getForename():""));		//wdev-15939,wdev-17580
		}
			
								
		//Hospital No
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(13);
						 cellOptions.setAlign(Align.RIGHT);
		tableCell.setOptions(cellOptions);
		tableCell.setColSpan(2);
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getHospnum() != null)
		{
			tableCell.setValue(tracking.getPatient().getHospnum().getIdValue());
			tableCell.setTooltip(tracking.getPatient().getHospnum().getIdValue());
		}		
		tableCell.setColSpan(2);
		
		
		
		//UrgencyImage
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setValue(getImageForUrgency(tracking));
		tableCell.setWidth(30);
		
		//-------------------------
		//Temporary patient Image  - wdev-17138
		if( Boolean.TRUE.equals(tracking.getPatient().getIsQuickRegistrationPatient()))
		{
					
			tableCell = tableRow.getCells().newCell();
			tableCell.setType(TableCellType.IMAGE);
			tableCell.setValue(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getIsQuickRegistrationPatient()) ? form.getImages().Emergency.EvenHistoryEnabled16 : null);
			
			tableCell.setTooltip("Temporary Patient");
			tableCell.setWidth(17);
		}
		//--------------------------
		
		
		//DOB
		tableRow = helper.getRows().newRow();
		
		//dd/mm/yyyy
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(11);								 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(110);
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getDobIsNotNull())
		{
			tableCell.setValue(tracking.getPatient().getDob().toString() + (tracking.getAttendance() != null && tracking.getAttendance().getAgeAtAttendance() != null ? " (" + tracking.getAttendance().getAgeAtAttendance() + ")" : ""));
			tableCell.setTooltip(tracking.getPatient().getDob().toString() + (tracking.getAttendance() != null && tracking.getAttendance().getAgeAtAttendance() != null ? " (" + tracking.getAttendance().getAgeAtAttendance() + ")" : ""));
		}
		
		//Gender
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getSex() != null)
		{
			if(tracking.getPatient().getSex().equals(Sex.MALE))
			{
				tableCell.setValue(form.getImages().Emergency.Male);
			}
			else if(tracking.getPatient().getSex().equals(Sex.FEMALE))
			{
				tableCell.setValue(form.getImages().Emergency.Female);
			}			
		}		
		
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(10);
		//LOS
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		
		
		cellOptions = new TableCellOptions();	
							 
		cellOptions.setFontFamily(FontFamily.CALIBRI);
		cellOptions.setFontSize(11);
		cellOptions.setFontWeight(FontWeight.BOLD);
		
		setLOSCellOptionColor(cellOptions, LOS);
							 
		tableCell.setOptions(cellOptions);
		
		if(LOS != null)
		{
			tableCell.setValue(EmergencyDisplayHelper.minutesToHoursAndMinutes(LOS));//WDEV-15818
			String str = EmergencyDisplayHelper.minutesToHoursAndMinutes(LOS);
			if( str != null)
			{
				if( ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))	//wdev-18327
					tableCell.setTooltip(str + " since Registration");//WDEV-15818, wdev-17252
				else
					tableCell.setTooltip(str + " since Arrival");//WDEV-15818, wdev-17252,wdev-18299
			}
		}
		tableCell.setWidth(70);
		
		//WDEV-17924
		//Allergies
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		tableCell.setValue(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAllergies()) ? form.getImages().Core.Allergies48 : null);
		tableCell.setTooltip(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAllergies())? "The patient has allergies." : null);//WDEV-17924
		
		//Alert
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		tableCell.setValue(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAlerts()) ? form.getImages().Core.Allergies18 : null);//WDEV-17924
		tableCell.setTooltip(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAlerts()) ? "The patient has alerts." : null);//WDEV-17924
		
		helper.renderValue();
		cellLabel.setValue(helper);
		cellLabel.setReadOnly(true);
		
		row.setValue(tracking);
		
		return LOS;
	}
	
	private void setAwaitingTriageNameCellOptionsColors(TableCellOptions cellOptions, Integer LOS) 
	{
		Color surnameFontColor = null;
		Color surnameBackgroudColor = null;
		Color surnameFlashingTextColour = null;		
		
		boolean awaitingTriageBreachWarning = false;
		boolean awaitingTriageBreached = false;
		
		if(LOS != null && form.getLocalContext().getAttendanceKPIConfig() != null)
		{
			if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPI() != null && form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI() != null)
			{
				if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPI() && LOS < form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI())
				{
					if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPITextColour() != null)
						surnameFontColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPITextColour(); 
					if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIBackgroundColour() != null)
						surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIBackgroundColour();
					if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIFlashingTextColour() != null)
						surnameFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIFlashingTextColour();
					
					awaitingTriageBreachWarning = true;
				}
				else if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI())
				{
					if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPITextColour() != null)
						surnameFontColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPITextColour();	
					if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIBackgroundColour() != null)
						surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIBackgroundColour();
					if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIFlashingTextColour() != null)
						surnameFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIFlashingTextColour();	
					
					awaitingTriageBreached = true;
				}
			}
		}
		
		if((awaitingTriageBreachWarning && YesNo.YES.equals(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIFlashingText()))
				 || (awaitingTriageBreached && YesNo.YES.equals(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIFlashingText())))
		 {
			 if(surnameFontColor != null && surnameFlashingTextColour != null && surnameBackgroudColor != null)
				  cellOptions.setTextAndBackgroundBlink(surnameFontColor ,surnameFlashingTextColour ,surnameBackgroudColor, surnameBackgroudColor);
		 }
		 
		 if(surnameBackgroudColor != null)
			 cellOptions.setBackgroundColor(surnameBackgroudColor);	
		 if(surnameFontColor != null)
			 cellOptions.setTextColor(surnameFontColor);	
	}

	private void setLOSCellOptionColor(TableCellOptions cellOptions, Integer LOS) 
	{
		if(cellOptions == null)
			return;
		
		Color losFontColor = null;
		Color losBackgroudColor = null;
		Color losFlashingTextColour = null;
		
		boolean losBreachWarning = false;
		boolean losBreached = false;
		
		if(LOS != null && form.getLocalContext().getAttendanceKPIConfig() != null)
		{	
			if(form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPI() != null && form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPI() != null)
			{
				if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPI() && LOS < form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPI())
				{
					losFontColor = form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPITextColour(); 			
					losBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPIBackgroundColour();	
					losFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPIFlashingTextColour();	
					
					losBreachWarning = true;
				}
				else if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPI())
				{
					losFontColor = form.getLocalContext().getAttendanceKPIConfig().getLosBreachKPITextColour();				
					losBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPIBackgroundColour();			
					losFlashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPIFlashingTextColour();	
					
					losBreached = true;
				}
			}
		}
		
		if((losBreachWarning && YesNo.YES.equals(form.getLocalContext().getAttendanceKPIConfig().getLosBreachWarningKPIFlashingText()))
				|| (losBreached && YesNo.YES.equals(form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPIFlashingText())))
		{
			if(losFontColor != null && losFlashingTextColour != null && losBackgroudColor != null)
				cellOptions.setTextAndBackgroundBlink(losFontColor ,losFlashingTextColour ,losBackgroudColor, losBackgroudColor);	
		}
		
		if(losBackgroudColor != null)
			cellOptions.setBackgroundColor(losBackgroudColor);	
		if(losFontColor != null)
			cellOptions.setTextColor(losFontColor);	
	}
	
	private void setProblemCellOptionColor(TableCellOptions cellOptions, TrackingForDisplayClinicianAndTriageWorklistVo tempVo, Integer LOS) //WDEV-18001 
	{
		if(cellOptions == null)
			return;
		
		Color problemFontColor = null;
		Color problemBackgroudColor = null;
		Color problemFlashingTextColour = null;
		
		boolean problemBreachWarning = false;
		boolean problemBreached = false;
		YesNo problemBreachWarningFlashing = null;
		YesNo problemBreachedFlashing = null;
		
		if(tempVo != null && tempVo.getTriageDetails() != null)
		{
			if(tempVo.getTriageDetails().getMedicInterventionStartDateTime() != null && tempVo.getTriageDetails().getCurrentTriagePriority() != null)
			{
				if(tempVo.getTriageDetails().getCurrentTriagePriority().getColor() != null)
					problemFontColor = tempVo.getTriageDetails().getCurrentTriagePriority().getColor();
			}
			else
			{
				TriagePriorityKpConfigVo triagePriorityKpConfig = getTriagePriorityKpConfig(tempVo.getTriageDetails().getCurrentTriagePriority());	
				
				if(triagePriorityKpConfig != null)
				{
					problemFontColor = triagePriorityKpConfig.getDefaultFontColour();
					problemBackgroudColor = triagePriorityKpConfig.getDefaultRowColour();
				}
				
				if(LOS != null && triagePriorityKpConfig != null)
				{	
					if(triagePriorityKpConfig.getPriorityBreachWarningKPI() != null && triagePriorityKpConfig.getPriorityBreachedKPI() != null)
					{
						if(LOS >= triagePriorityKpConfig.getPriorityBreachWarningKPI() && LOS < triagePriorityKpConfig.getPriorityBreachedKPI())
						{
							problemFontColor = triagePriorityKpConfig.getPriorityBreachWarningKPITextColour();			
							problemBackgroudColor = triagePriorityKpConfig.getPriorityBreachWarningKPIBackgroundColour();	
							problemFlashingTextColour = triagePriorityKpConfig.getPriorityBreachWarningKPIFlashingTextColour();
							
							problemBreachWarning = true;
							problemBreachWarningFlashing = triagePriorityKpConfig.getPriorityBreachWarningKPIFlashingText();
						}
						else if(LOS >= triagePriorityKpConfig.getPriorityBreachedKPI())
						{
							problemFontColor = triagePriorityKpConfig.getPriorityBreachKPITextColour();				
							problemBackgroudColor = triagePriorityKpConfig.getPriorityBreachedKPIBackgroundColour();
							problemFlashingTextColour = triagePriorityKpConfig.getPriorityBreachedKPIFlashingTextColour();
							
							problemBreached = true;
							problemBreachedFlashing = triagePriorityKpConfig.getPriorityBreachedKPIFlashingText();
						}
					}
				}
			}
		}
			
		if((problemBreachWarning && YesNo.YES.equals(problemBreachWarningFlashing))
				|| (problemBreached && YesNo.YES.equals(problemBreachedFlashing)))
		{
			if(problemFontColor != null && problemFlashingTextColour != null && problemBackgroudColor != null)
				cellOptions.setTextAndBackgroundBlink(problemFontColor ,problemFlashingTextColour ,problemBackgroudColor, problemBackgroudColor);	
		}
		
		if(problemBackgroudColor != null)
			cellOptions.setBackgroundColor(problemBackgroudColor);	
		if(problemFontColor != null)
			cellOptions.setTextColor(problemFontColor);	
	}
	
	private TriagePriorityKpConfigVo getTriagePriorityKpConfig(TriagePriority currentTriagePriority) 
	{
		if(form.getLocalContext().getAttendanceKPIConfig() == null || form.getLocalContext().getAttendanceKPIConfig().getTriagePriorityKPIs() == null || currentTriagePriority == null)
			return null;
		
		for(TriagePriorityKpConfigVo triagePriorityConfig : form.getLocalContext().getAttendanceKPIConfig().getTriagePriorityKPIs())
		{
			if(triagePriorityConfig == null)
				continue;
			
			if(currentTriagePriority.equals(triagePriorityConfig.getTriagePriority()))
				return triagePriorityConfig;
		}
		
		return null;
	}
	private DateTime calculateDischargeBreachTime(DateTime registrationDateTime) 
	{
		if(registrationDateTime == null)
			return null;
		
		if(form.getLocalContext().getAttendanceKPIConfig() == null || form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPI() == null)
			return null;
		
		return ((DateTime) registrationDateTime.clone()).addMinutes(form.getLocalContext().getAttendanceKPIConfig().getLosBreachedKPI());
	}

	private void addPatientToLocalCollection(AppImageVo patientImage) 
	{
		if(patientImage == null)
			return;
		
		List<String> imagesColl = form.getLocalContext().getPatientImagesList();
		
		if (imagesColl == null)
			imagesColl = new ArrayList<String>();
		
		if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
		{
			imagesColl.add(EnvironmentConfig.getFileUploadMountpoint() + patientImage.getImagePath());
		}
		else
		{
			imagesColl.add(EnvironmentConfig.getBaseUri() + patientImage.getImagePath());
		}
		
		form.getLocalContext().setPatientImagesList(imagesColl);
	}
	private AppImageVo getPatientImage(TrackingForDisplayClinicianAndTriageWorklistVo tracking) throws IOException //WDEV-18001
	{
		if (tracking == null || tracking.getPatient() == null)
			return null;
		
		String sessionID = engine.getSessionId();
		
		AppDBImageVo dbImageVo =  tracking.getPatient().getPhoto();
		
		//Existing Patient with no image
		if (dbImageVo == null)
		{
			// NoPatientImage	
			AppImageVo imageVo = new AppImageVo();
			imageVo.setImagePath(form.getImages().Core.NoPatientImage.getImagePath());
			
			return imageVo;
		}
		
		String encodedImage = dbImageVo.getImageData();
		String type = dbImageVo.getImageType().getText();	  		  		  	
  	
		return decodeFromBase64(encodedImage, sessionID, type);
	}
	
	private AppImageVo decodeFromBase64(String content, String sessionID, String imageType) throws IOException
	{
		byte[] decBytes = Base64.decode(content);

		if (decBytes == null || (decBytes != null && decBytes.length == 0)) 
		{
			engine.showMessage("Base64 image size is zero");
			return null;
		}
		 
	    String str = generateName();
	    String image = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "." + imageType.toLowerCase();		
		
		try
		{		
			FileOutputStream fos = new FileOutputStream(image);				
			fos.write(decBytes);
			fos.close();	
			
			AppImageVo imageVo = new AppImageVo();
			imageVo.setImagePath(((ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "." + imageType.toLowerCase()).replace("\\", "/")));
			return imageVo;
		}		
		catch(FileNotFoundException exception) {			
			System.out.println("FileNotFoundException : " + exception);
		}		
		catch(IOException ioexception) {						
			System.out.println("IOException : " + ioexception);
		}
						
		return null;	
	}
	private String generateName() 
	{
		String str = "";

		try
		{
			//Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			//Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			//Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}
	private Image getImageForUrgency(TrackingForDisplayClinicianAndTriageWorklistVo tracking) //WDEV-18001
	{
		if(tracking == null || tracking.getAttendance() == null || tracking.getAttendance().getUrgencyLevel() == null)
			return  null;
		
		Image urgency = null;
		
		urgency = tracking.getAttendance().getUrgencyLevel().getImage();
		
		return urgency;
	}
	
	
	private DynamicGridColumn getColumn(String identifier) 
	{
		return form.lyrWorklist().tabTriageWorklist().dyngrdgrdTriageWorklist().getColumns().getByIdentifier(identifier);
	}
	private DynamicGridColumn getColumnClin(String identifier) 
	{
		return form.lyrWorklist().tabClinicianWorklist().dyngrdClinicianWorklist().getColumns().getByIdentifier(identifier);
	}

	
	protected void onDyngrdClinicianWorklistCellButtonClicked(DynamicGridCell cell) //WDEV-18001
	{
		
		//wdev-17138	
		if( cell.getValue() != null && cell.getValue() instanceof DynamicGridCellTable)
	    {
			
            DynamicGridCellTable helper = (DynamicGridCellTable)cell.getValue();
            if( helper.getFiredCell() != null && helper.getFiredCell().getIdentifier() != null)
            {
                   if( helper.getFiredCell().getIdentifier() instanceof SelectedClinicianWorklistButtons)
                   {
                	   
                	    TrackingForClinicianWorklistAndTriageVo tempVo  = domain.getTrackingForClinicianWorklistAndTriage((TrackingForDisplayClinicianAndTriageWorklistVo)cell.getRow().getValue());//WDEV-18001
                	    if( tempVo != null && tempVo.getPatientIsNotNull() )
                	    {
                	    	form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(tempVo.getPatient()));
                	    }
	                    if( SelectedClinicianWorklistButtons.EDITASSESSMENT.equals((SelectedClinicianWorklistButtons) helper.getFiredCell().getIdentifier()))
	                	{
	                    	displayDetailsTab(DISPLAY_CLINICIANASSESSMNRWORKLIST, (TrackingForDisplayClinicianAndTriageWorklistVo)cell.getRow().getValue(),true);//WDEV-18001
	            			form.getLocalContext().setPreviousTab(DISPLAY_CLINICIANASSESSMNRWORKLIST);
	                	}
	                    else if( SelectedClinicianWorklistButtons.PATIENTSUMMARY.equals((SelectedClinicianWorklistButtons) helper.getFiredCell().getIdentifier()))
	                    {
	            			if( tempVo != null)
	            			{
	            				form.getGlobalContext().Core.setImsReportId(EMERGENCY_PATIENT_SUMMARY);
	            				engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {CARE_CONTEXT_SEED, tempVo.getAttendance().getCareContext().getID_CareContext()});
	            			}
	                    }
	                    else if( SelectedClinicianWorklistButtons.DECISIONTOAMIT.equals((SelectedClinicianWorklistButtons) helper.getFiredCell().getIdentifier()))
	                    {
	                    	form.getGlobalContext().Emergency.setTracking(tempVo);
	            			
	            			//WDEV-17661
	            			if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PENDING"))
	            			{
	            				engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog, new Object[] {tempVo});
	            			}
	            			else if (ConfigFlag.GEN.ED_DTA_ADMISSION_FUNCTIONALITY.getValue().equals("PARTIAL"))
	            			{
	            				engine.open(form.getForms().Emergency.EDPartialAdmissionDialog, new Object[] {tempVo});
	            			}
	                    	
	                    }
	                    else if( SelectedClinicianWorklistButtons.VIEWHISTORY.equals((SelectedClinicianWorklistButtons) helper.getFiredCell().getIdentifier()))
	                    {
	                    	engine.open(form.getForms().Emergency.AttendanceHistory);
	                    }
	                    else if( SelectedClinicianWorklistButtons.SEENBYCOMPLASSESSMNENT.equals((SelectedClinicianWorklistButtons) helper.getFiredCell().getIdentifier()))   //wdev-17252
	                    {
	                    	displayDetailsTab(DISPLAY_CLINICIANASSESSMNRWORKLISTWITHSEEN, (TrackingForDisplayClinicianAndTriageWorklistVo)cell.getRow().getValue(),true); //WDEV-18001
	            			form.getLocalContext().setPreviousTab(DISPLAY_CLINICIANASSESSMNRWORKLIST);  //return to clinician worklist tab
	                    }
                   }
            }
	    }
		
		
		/*if( cell != null && cell.getColumn() != null && cell.getColumn().getIdentifier() != null &&  cell.getColumn().getIdentifier().equals(COLUMN_EXTTRANSFERASSESSMENT ))		//wdev-16950
		{
			
		}
		*/
		
	}

	
	protected void onDyngrdClinicianWorklistRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		displayDetailsTab(DISPLAY_CLINICIANASSESSMNRWORKLIST,(TrackingForDisplayClinicianAndTriageWorklistVo)row.getValue(),true); //WDEV-18001
		form.getLocalContext().setPreviousTab(DISPLAY_CLINICIANASSESSMNRWORKLIST);
		
	}

	
	protected void onCcEDAssessmentComponentValueChanged() throws PresentationLogicException
	{
		if( EDAssessmentComponent.RETURNLINK.equals(form.lyrWorklist().tabDetails().ccEDAssessmentComponent().getSelectedEvent()) )
		{
			form.getTimers().gettimerEdAttendanceDetails().setEnabled(false);//WDEV-17337
			if( form.getLocalContext().getPreviousTabIsNotNull() && form.getLocalContext().getPreviousTab().equals(DISPLAY_TRIAGE))
			{
				form.lyrWorklist().showtabTriageWorklist();
				form.lyrWorklist().tabDetails().setHeaderVisible(false);
				form.getLocalContext().setPreviousTab(null);
				form.lyrWorklist().tabDetails().ccEDAssessmentComponent().clearSelectedEvent();
				open();
				
			}
			else if( form.getLocalContext().getPreviousTabIsNotNull() && form.getLocalContext().getPreviousTab().equals(DISPLAY_CLINICIANASSESSMNRWORKLIST) )
			{
				form.lyrWorklist().showtabClinicianWorklist();
				form.lyrWorklist().tabDetails().setHeaderVisible(false);
				form.getLocalContext().setPreviousTab(null);
				form.lyrWorklist().tabDetails().ccEDAssessmentComponent().clearSelectedEvent();
				open();
			}
		}
		
		//WDEV-17337
		if (form.lyrWorklist().tabDetails().ccEDAssessmentComponent().getSelectedEvent()!=null )
		{
			form.getTimers().gettimerEdAttendanceDetails().setEnabled(EDAssessmentComponent.START_TIMER.equals(form.lyrWorklist().tabDetails().ccEDAssessmentComponent().getSelectedEvent()));//WDEV-17337
			form.lyrWorklist().tabDetails().ccEDAssessmentComponent().clearSelectedEvent();
		}
		
	}

	
	protected void onRadioButtonGroupClinicianReviewValueChanged() throws PresentationLogicException 
	{
		open();	
	}
	


	
	protected void onRadioButtonGroupClinicianReviewClinValueChanged() throws PresentationLogicException 
	{
		open();
		
	}
	class TriageLOSComparator implements Comparator<TrackingForDisplayClinicianAndTriageWorklistVo> //WDEV-18001
	{
		private int order =1;
		public TriageLOSComparator()
		{
			order = 1;
		}
		public TriageLOSComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}
		public int compare(TrackingForDisplayClinicianAndTriageWorklistVo o1, TrackingForDisplayClinicianAndTriageWorklistVo o2) //WDEV-18001
		{
			if (o1 != null && o1.getAttendance() != null && o1.getAttendance().getRegistrationDateTime() != null && o2!=null && o2.getAttendance() != null && o2.getAttendance().getRegistrationDateTime() != null)
			{
				Integer LOS1 = calculateDateDiffInMinutes(new DateTime(), o1.getAttendance().getRegistrationDateTime());
				Integer LOS2 = calculateDateDiffInMinutes(new DateTime(), o2.getAttendance().getRegistrationDateTime());
				
				return order*LOS1.compareTo(LOS2);
			}
			if (o1 == null || o1.getAttendance() == null || o1.getAttendance().getRegistrationDateTime() == null)
				return -1*order;
			if (o2 == null || o2.getAttendance() == null || o2.getAttendance().getRegistrationDateTime() == null)
				return order;
			
			return 0;
		}	
	}
	private Integer getOrderByIndex(TriagePriority priority)
	{
		for(TriagePriorityEnum item : TriagePriorityEnum.values())
		{
			if(item.getIndex().equals(priority))
				return item.getOrder();
		}
		
		return null;
	}
	class TrackingComparator implements Comparator<TrackingForDisplayClinicianAndTriageWorklistVo> //WDEV-18001
	{
		public int compare(TrackingForDisplayClinicianAndTriageWorklistVo o1, TrackingForDisplayClinicianAndTriageWorklistVo o2) //WDEV-18001
		{
			if (o1 != null && o1.getTriageDetails() != null && o1.getTriageDetails().getCurrentTriagePriority() != null && o2!=null && o2.getTriageDetails() != null && o2.getTriageDetails().getCurrentTriagePriority() != null)
			{
				Integer priorityOrder1 = getOrderByIndex(o1.getTriageDetails().getCurrentTriagePriority());
				Integer priorityOrder2 = getOrderByIndex(o2.getTriageDetails().getCurrentTriagePriority());
				
				int orderByPriority = priorityOrder1.compareTo(priorityOrder2);
				
				if(orderByPriority == 0)
				{
					return compareByLOS(o1, o2);
				}
				
				return orderByPriority;
			}
			
			if((o1 == null || o1.getTriageDetails() == null || o1.getTriageDetails().getCurrentTriagePriority() == null) && (o2 == null || o2.getTriageDetails() == null || o2.getTriageDetails().getCurrentTriagePriority() == null))
				return compareByLOS(o1, o2);
			
			if (o1 == null || o1.getTriageDetails() == null || o1.getTriageDetails().getCurrentTriagePriority() == null)
				return 1;
			
			if (o2 == null || o2.getTriageDetails() == null || o2.getTriageDetails().getCurrentTriagePriority() == null)
				return -1;
			
			return 0;
		}

		private int compareByLOS(TrackingForDisplayClinicianAndTriageWorklistVo o1, TrackingForDisplayClinicianAndTriageWorklistVo o2) //WDEV-18001
		{
			if(o1 != null && o1.getAttendance() != null && o1.getAttendance().getRegistrationDateTime() != null && o2 != null && o2.getAttendance() != null && o2.getAttendance().getRegistrationDateTime() != null)
			{
				Integer LOS1 = calculateDateDiffInMinutes(new DateTime(), o1.getAttendance().getRegistrationDateTime());
				Integer LOS2 = calculateDateDiffInMinutes(new DateTime(), o2.getAttendance().getRegistrationDateTime());
				
				int orderByLOS = -1 * LOS1.compareTo(LOS2);
				
				if(orderByLOS == 0)
				{
					return compareByName(o1, o2);
				}
				
				return orderByLOS;
			}
			
			if (o1 == null || o1.getAttendance() == null || o1.getAttendance().getRegistrationDateTime() == null)
				return -1;
			
			if (o2 == null || o2.getAttendance() == null || o2.getAttendance().getRegistrationDateTime() == null)
				return 1;
			
			return 0;
		}

		private int compareByName(TrackingForDisplayClinicianAndTriageWorklistVo o1, TrackingForDisplayClinicianAndTriageWorklistVo o2)  //WDEV-18001
		{
			if(o1 != null && o1.getPatient() != null && o1.getPatient().getName() != null && o2 != null && o2.getPatient() != null && o2.getPatient().getName() != null)
			{
				return o1.getPatient().getName().compareTo(o2.getPatient().getName(), true);
			}
			
			if (o1 == null || o1.getPatient() == null || o1.getPatient().getName() == null)
				return -1;
			
			if (o2 == null || o2.getPatient() == null || o2.getPatient().getName() == null)
				return 1;
			
			return 0;
		}
	}
	
	//wdev-17326
	protected void onCmbTrackingStatusValueChanged() throws PresentationLogicException 
	{
		clearcontrols();
		//WDEV-18293
		TrackingForDisplayClinicianAndTriageWorklistVoCollection patientsWaiting = domain.listTrackingPatients(form.lyrWorklist().tabClinicianWorklist().cmbAreas().getValue(),form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().getValue() , domain.getCurrentLocation()); 
		if( form.lyrWorklist().tabClinicianWorklist().cmbAreas().getValue() != null && form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().getValue() != null) //wdev-17326
		{
			
			searchCriteriaForClinicianWorklistVo tempVo = form.getGlobalContext().Emergency.getClinicianWorklistSearchCriteria();
			if( tempVo == null )
				tempVo = new searchCriteriaForClinicianWorklistVo();
			
			tempVo.setCurrentStatus(form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().getValue());
			tempVo.setTrackingArea(form.lyrWorklist().tabClinicianWorklist().cmbAreas().getValue());
			form.getGlobalContext().Emergency.setClinicianWorklistSearchCriteria(tempVo);
		}

		
		
		populategrdClinicianWorklist(patientsWaiting);

		
	}

	//wdev-17326
	protected void onCmbAreasValueChanged() throws PresentationLogicException 
	{
		clearcontrols();
		TrackingForDisplayClinicianAndTriageWorklistVoCollection patientsWaiting = domain.listTrackingPatients(form.lyrWorklist().tabClinicianWorklist().cmbAreas().getValue(),form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().getValue() , null); //WDEV-18001
		if( form.lyrWorklist().tabClinicianWorklist().cmbAreas().getValue() != null && form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().getValue() != null) //wdev-17326
		{
			
			searchCriteriaForClinicianWorklistVo tempVo = form.getGlobalContext().Emergency.getClinicianWorklistSearchCriteria();
			if( tempVo == null )
				tempVo = new searchCriteriaForClinicianWorklistVo();
			
			tempVo.setCurrentStatus(form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().getValue());
			tempVo.setTrackingArea(form.lyrWorklist().tabClinicianWorklist().cmbAreas().getValue());
			form.getGlobalContext().Emergency.setClinicianWorklistSearchCriteria(tempVo);
		}

		populategrdClinicianWorklist(patientsWaiting);
		
	}
	
	//wdev-17326
	private void initialiseareasCombo()
	{
		form.lyrWorklist().tabClinicianWorklist().cmbAreas().clear();
		TrackingAreaShortVoCollection tempVoColl = domain.listTrackingAreas(engine.getCurrentLocation());
		TrackingAreaShortVo overral = null; 
		if( tempVoColl != null && tempVoColl.size() > 0 )
		{
						
			for( int i = 0; i < tempVoColl.size();i++ )
			{
				TrackingAreaShortVo  tempTrVo = tempVoColl.get(i);
				if( tempTrVo != null && tempTrVo.getIsOverallViewIsNotNull() && Boolean.TRUE.equals(tempTrVo.getIsOverallView()))
					overral = tempTrVo;
				form.lyrWorklist().tabClinicianWorklist().cmbAreas().newRow(tempTrVo,tempTrVo.getAreaDisplayName());
			}
			if( overral != null)
				form.lyrWorklist().tabClinicianWorklist().cmbAreas().setValue(overral);
		}
	}
	
	//wdev-17326
	private void initialiseTrackingStatusCombo()
	{
		form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().clear();
		ims.emergency.vo.lookups.TrackingStatusCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getTrackingStatus(domain.getLookupService());
		ims.emergency.vo.lookups.TrackingStatus tempLook = null;
		if( lookupCollection != null && lookupCollection.size() > 0)
		{
			
			for( int x = 0; x < lookupCollection.size(); x++)
			{
				if( lookupCollection.get(x).isActive() == true && lookupCollection.get(x).equals(TrackingStatus.WAITING_TO_BE_SEEN_BY_A_MEDIC))
					tempLook = lookupCollection.get(x);
				if( TrackingStatus.DISCHARGED.equals(lookupCollection.get(x)))
					continue;
				form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			}
			if( tempLook != null)
			    form.lyrWorklist().tabClinicianWorklist().cmbTrackingStatus().setValue(tempLook);
		}


	}

	//WDEV-17337
	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		form.lyrWorklist().tabDetails().ccEDAssessmentComponent().refreshOtherDetails();
	}
	
	//WDEV-17337
	private void initializeTimer()
	{	
		if(ConfigFlag.UI.ED_ATTENDANCE_DETAILS_TIMER_INTERVAL.getValue() > 0)
		{
			form.getTimers().gettimerEdAttendanceDetails().setInterval(ConfigFlag.UI.ED_ATTENDANCE_DETAILS_TIMER_INTERVAL.getValue());
			form.getTimers().gettimerEdAttendanceDetails().setEnabled(true);
		}
	}

	
	
}
