//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.edworklisttoassessmentform;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrWorklistLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabTriageWorklistContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
		
			public static class GroupClinicianReviewRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 50, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "My Allocated", startTabIndex.intValue() + 2);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 10, 8, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "All", startTabIndex.intValue() + 1);
				}
				public void setText(GroupClinicianReviewEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupClinicianReviewEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupClinicianReviewEnumeration.None;
						case 0: return GroupClinicianReviewEnumeration.rdoMyAllocated;
						case 1: return GroupClinicianReviewEnumeration.rdoAll;
					}
					return null;
				}
				public void setValue(GroupClinicianReviewEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupClinicianReviewEnumeration.None.id);
				}
				public boolean isEnabled(GroupClinicianReviewEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupClinicianReviewEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupClinicianReviewEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupClinicianReviewEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupClinicianReviewEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupClinicianReviewEnumeration None = new GroupClinicianReviewEnumeration(-1);
				public static GroupClinicianReviewEnumeration rdoMyAllocated = new GroupClinicianReviewEnumeration(0);
				public static GroupClinicianReviewEnumeration rdoAll = new GroupClinicianReviewEnumeration(1);
				private GroupClinicianReviewEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupClinicianReviewEnumeration)o).id;
				}
				private int id;
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 738, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Tracking", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 1142, 696, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// RadioButton Controls
				RadioButton tmpGroupClinicianReview = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupClinicianReview);
				GroupClinicianReviewRadioButton GroupClinicianReview = (GroupClinicianReviewRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupClinicianReviewRadioButton.class, tmpGroupClinicianReview);
				GroupClinicianReview.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupClinicianReview);
			}

			public Button btnTracking()
			{
				return (Button)super.getControl(0);
			}
			public DynamicGrid dyngrdgrdTriageWorklist()
			{
				return (DynamicGrid)super.getControl(1);
			}
			public GroupClinicianReviewRadioButton GroupClinicianReview()
			{
				return (GroupClinicianReviewRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabClinicianWorklistContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbTrackingStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.emergency.vo.lookups.TrackingStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.emergency.vo.lookups.TrackingStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.emergency.vo.lookups.TrackingStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.emergency.vo.lookups.TrackingStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.emergency.vo.lookups.TrackingStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.emergency.vo.lookups.TrackingStatus getValue()
				{
					return (ims.emergency.vo.lookups.TrackingStatus)super.control.getValue();
				}
				public void setValue(ims.emergency.vo.lookups.TrackingStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbAreasComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.emergency.vo.TrackingAreaShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.emergency.vo.TrackingAreaShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.emergency.vo.TrackingAreaShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.emergency.vo.TrackingAreaShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.emergency.vo.TrackingAreaShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.emergency.vo.TrackingAreaShortVo getValue()
				{
					return (ims.emergency.vo.TrackingAreaShortVo)super.control.getValue();
				}
				public void setValue(ims.emergency.vo.TrackingAreaShortVo value)
				{
					super.control.setValue(value);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 253, 8, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tracking Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 10, 8, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Areas:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 738, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Tracking", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 352, 6, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTrackingStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.FALSE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTrackingStatusTemp);
				cmbTrackingStatusComboBox cmbTrackingStatus = (cmbTrackingStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTrackingStatusComboBox.class, m_cmbTrackingStatusTemp);
				super.addComboBox(cmbTrackingStatus);
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 50, 6, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbAreasTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.FALSE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAreasTemp);
				cmbAreasComboBox cmbAreas = (cmbAreasComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAreasComboBox.class, m_cmbAreasTemp);
				super.addComboBox(cmbAreas);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 1142, 696, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public Button btnTrackingClinician()
			{
				return (Button)super.getControl(2);
			}
			public cmbTrackingStatusComboBox cmbTrackingStatus()
			{
				return (cmbTrackingStatusComboBox)super.getComboBox(0);
			}
			public cmbAreasComboBox cmbAreas()
			{
				return (cmbAreasComboBox)super.getComboBox(1);
			}
			public DynamicGrid dyngrdClinicianWorklist()
			{
				return (DynamicGrid)super.getControl(5);
			}
		}
		public static class tabDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 1142, 784, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccEDAssessmentComponentForm = loader.loadComponent(129183, appForm, startControlID * 10 + 1000, anchoringHelper11.getSize(), instance1, startTabIndex.intValue() + 11, skipContextValidation);
				//ims.framework.Control m_ccEDAssessmentComponentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(8), new Integer(0), new Integer(1142), new Integer(784), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 11), m_ccEDAssessmentComponentForm, instance1 } );
				ims.framework.Control m_ccEDAssessmentComponentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010),  new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 11), m_ccEDAssessmentComponentForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccEDAssessmentComponentControl);
				Menu[] menus1 = m_ccEDAssessmentComponentForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.edassessmentcomponent.IComponent ccEDAssessmentComponent()
			{
				return (ims.emergency.forms.edassessmentcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccEDAssessmentComponentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccEDAssessmentComponentVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccEDAssessmentComponentVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccEDAssessmentComponentEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccEDAssessmentComponentEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 1166, 816, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTriageWorklist = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Triage Worklist", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabTriageWorklistContainer m_tabTriageWorklistContainer = (tabTriageWorklistContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTriageWorklistContainer.class, m_tabTriageWorklist, factory);
			super.addContainer(m_tabTriageWorklist, m_tabTriageWorklistContainer);
			ims.framework.utils.SizeInfo m_tabTriageWorklistDesignSize = new ims.framework.utils.SizeInfo(1166, 816);
			ims.framework.utils.SizeInfo m_tabTriageWorklistRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
			m_tabTriageWorklistContainer.setContext(form, appForm, m_tabTriageWorklist, loader, form_images_local, startControlID, m_tabTriageWorklistDesignSize, m_tabTriageWorklistRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 1166, 816, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClinicianWorklist = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinician Worklist", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabClinicianWorklistContainer m_tabClinicianWorklistContainer = (tabClinicianWorklistContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClinicianWorklistContainer.class, m_tabClinicianWorklist, factory);
			super.addContainer(m_tabClinicianWorklist, m_tabClinicianWorklistContainer);
			ims.framework.utils.SizeInfo m_tabClinicianWorklistDesignSize = new ims.framework.utils.SizeInfo(1166, 816);
			ims.framework.utils.SizeInfo m_tabClinicianWorklistRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
			m_tabClinicianWorklistContainer.setContext(form, appForm, m_tabClinicianWorklist, loader, form_images_local, startControlID, m_tabClinicianWorklistDesignSize, m_tabClinicianWorklistRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 1166, 816, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
			super.addContainer(m_tabDetails, m_tabDetailsContainer);
			ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(1166, 816);
			ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
			m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, form_images_local, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabTriageWorklist().setVisible(false);
			tabClinicianWorklist().setVisible(false);
			tabDetails().setVisible(false);
		}
		public void showtabTriageWorklist()
		{
			tabClinicianWorklist().setVisible(false);
			tabDetails().setVisible(false);
			tabTriageWorklist().setVisible(true);
		}
		public void showtabClinicianWorklist()
		{
			tabTriageWorklist().setVisible(false);
			tabDetails().setVisible(false);
			tabClinicianWorklist().setVisible(true);
		}
		public void showtabDetails()
		{
			tabTriageWorklist().setVisible(false);
			tabClinicianWorklist().setVisible(false);
			tabDetails().setVisible(true);
		}

		public tabTriageWorklistContainer tabTriageWorklist()
		{
			return (tabTriageWorklistContainer)super.layers.get(0);
		}
		public tabClinicianWorklistContainer tabClinicianWorklist()
		{
			return (tabClinicianWorklistContainer)super.layers.get(1);
		}
		public tabDetailsContainer tabDetails()
		{
			return (tabDetailsContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(1192, 830);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Timers
		timers = new Timers();
		timers.timerEdAttendanceDetails = factory.createTimer(0, 120, false);
		form.addTimer(timers.timerEdAttendanceDetails);


		// Layer Clasess
		lyrWorklistLayer m_lyrWorklistLayer = (lyrWorklistLayer)LayerFlyweightFactory.getInstance().createLayer(lyrWorklistLayer.class, this, factory);
		super.addLayer(m_lyrWorklistLayer);
		m_lyrWorklistLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrWorklistLayer lyrWorklist()
	{
		return (lyrWorklistLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Emergency = new EmergencyForms();
			Core = new CoreForms();
		}
		public final class EmergencyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyForms()
			{
				EDTriageWorklistToAssessmentForm = new LocalFormName(129186);
				EDClinicianWorklistToAssessmentForm = new LocalFormName(129187);
				Tracking = new LocalFormName(129100);
				EDDecisionToAdmitDialog = new LocalFormName(129193);
				AttendanceHistory = new LocalFormName(129167);
				EDPartialAdmissionDialog = new LocalFormName(129205);
			}
			public final FormName EDTriageWorklistToAssessmentForm;
			public final FormName EDClinicianWorklistToAssessmentForm;
			public final FormName Tracking;
			public final FormName EDDecisionToAdmitDialog;
			public final FormName AttendanceHistory;
			public final FormName EDPartialAdmissionDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PrintReportByIMSId = new LocalFormName(102403);
			}
			public final FormName PrintReportByIMSId;
		}

		public EmergencyForms Emergency;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Emergency = new EmergencyImages();
			Core = new CoreImages();
			OCRR = new OCRRImages();
			Clinical = new ClinicalImages();
		}
		public final class EmergencyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyImages()
			{
				Male = new ImageHelper(129137, "Images/Emergency/male.png", new Integer(48), new Integer(48));
				Female = new ImageHelper(129138, "Images/Emergency/female.png", new Integer(48), new Integer(48));
				Triage_Priority_P1 = new ImageHelper(129125, "Images/Emergency/P1.png", new Integer(24), new Integer(24));
				Triage_Priority_P2 = new ImageHelper(129126, "Images/Emergency/P2.png", new Integer(24), new Integer(24));
				Triage_Priority_P3 = new ImageHelper(129127, "Images/Emergency/P3.png", new Integer(24), new Integer(24));
				Triage_Priority_P4 = new ImageHelper(129128, "Images/Emergency/P4.png", new Integer(24), new Integer(24));
				Triage_Priority_P5 = new ImageHelper(129129, "Images/Emergency/P5.png", new Integer(24), new Integer(24));
				EvenHistoryEnabled16 = new ImageHelper(129101, "Images/Emergency/clock.gif", new Integer(16), new Integer(16));
				Triage_Priority_SkippedTriage = new ImageHelper(129140, "Images/Emergency/ST.png", new Integer(24), new Integer(24));
				SEENCOMPLETE16 = new ImageHelper(129157, "Images/Emergency/SeenComplete16.png", new Integer(16), new Integer(16));
				VIEWHISTORY16 = new ImageHelper(129158, "Images/Emergency/ViewHistory.png", new Integer(16), new Integer(16));
				DTA16 = new ImageHelper(129149, "Images/Emergency/DTA16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Male;
			public final ims.framework.utils.Image Female;
			public final ims.framework.utils.Image Triage_Priority_P1;
			public final ims.framework.utils.Image Triage_Priority_P2;
			public final ims.framework.utils.Image Triage_Priority_P3;
			public final ims.framework.utils.Image Triage_Priority_P4;
			public final ims.framework.utils.Image Triage_Priority_P5;
			public final ims.framework.utils.Image EvenHistoryEnabled16;
			public final ims.framework.utils.Image Triage_Priority_SkippedTriage;
			public final ims.framework.utils.Image SEENCOMPLETE16;
			public final ims.framework.utils.Image VIEWHISTORY16;
			public final ims.framework.utils.Image DTA16;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Allergies48 = new ImageHelper(102542, "Images/Core/infirmary_48_new.png", new Integer(48), new Integer(48));
				NoPatientImage = new ImageHelper(102554, "Images/Core/silhouette_blue.png", new Integer(177), new Integer(177));
				Radiology48 = new ImageHelper(102376, "Images/Core/radiology_48.png", new Integer(48), new Integer(48));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				View = new ImageHelper(102223, "Images/Core/Slide Show.gif", new Integer(16), new Integer(16));
				BedLayoutList48 = new ImageHelper(102461, "Images/Core/bed_layout_list_48.png", new Integer(48), new Integer(48));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				Allergies18 = new ImageHelper(102518, "Images/Core/allergies_18.png", new Integer(18), new Integer(18));
			}
			public final ims.framework.utils.Image Allergies48;
			public final ims.framework.utils.Image NoPatientImage;
			public final ims.framework.utils.Image Radiology48;
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image View;
			public final ims.framework.utils.Image BedLayoutList48;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image Allergies18;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Pathology48 = new ImageHelper(116149, "Images/OCRR/pathology_48.png", new Integer(48), new Integer(48));
				Seen = new ImageHelper(116135, "Images/OCRR/Seen.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Pathology48;
			public final ims.framework.utils.Image Seen;
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				PatientDiagnosisChecklist48 = new ImageHelper(123125, "Images/Clinical/patient_diagnosis_checklist_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image PatientDiagnosisChecklist48;
		}
		public final EmergencyImages Emergency;
		public final CoreImages Core;
		public final OCRRImages OCRR;
		public final ClinicalImages Clinical;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PreviousTab = new ims.framework.ContextVariable("PreviousTab", prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__PreviousTab_" + componentIdentifier + "");
			cxl_LoggedHcp = new ims.framework.ContextVariable("LoggedHcp", prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__LoggedHcp_" + componentIdentifier + "");
			cxl_PatientImagesList = new ims.framework.ContextVariable("PatientImagesList", prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__PatientImagesList_" + componentIdentifier + "");
			cxl_AttendanceKPIConfig = new ims.framework.ContextVariable("AttendanceKPIConfig", prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier + "");
		}
		
		public boolean getPreviousTabIsNotNull()
		{
			return !cxl_PreviousTab.getValueIsNull(context);
		}
		public Integer getPreviousTab()
		{
			return (Integer)cxl_PreviousTab.getValue(context);
		}
		public void setPreviousTab(Integer value)
		{
			cxl_PreviousTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousTab = null;
		public boolean getLoggedHcpIsNotNull()
		{
			return !cxl_LoggedHcp.getValueIsNull(context);
		}
		public ims.core.resource.people.vo.HcpRefVo getLoggedHcp()
		{
			return (ims.core.resource.people.vo.HcpRefVo)cxl_LoggedHcp.getValue(context);
		}
		public void setLoggedHcp(ims.core.resource.people.vo.HcpRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'LoggedHcp' RefVo context variable.");
			if(value == null)
				cxl_LoggedHcp.setValue(context, null);
			else
				cxl_LoggedHcp.setValue(context, new ims.core.resource.people.vo.HcpRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_LoggedHcp = null;
		public boolean getPatientImagesListIsNotNull()
		{
			return !cxl_PatientImagesList.getValueIsNull(context);
		}
		public java.util.List<String> getPatientImagesList()
		{
			return (java.util.List<String>)cxl_PatientImagesList.getValue(context);
		}
		public void setPatientImagesList(java.util.List<String> value)
		{
			cxl_PatientImagesList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientImagesList = null;
		public boolean getAttendanceKPIConfigIsNotNull()
		{
			return !cxl_AttendanceKPIConfig.getValueIsNull(context);
		}
		public ims.emergency.vo.AttendanceKPIConfigForClinicianAndTriageWorklistVo getAttendanceKPIConfig()
		{
			return (ims.emergency.vo.AttendanceKPIConfigForClinicianAndTriageWorklistVo)cxl_AttendanceKPIConfig.getValue(context);
		}
		public void setAttendanceKPIConfig(ims.emergency.vo.AttendanceKPIConfigForClinicianAndTriageWorklistVo value)
		{
			cxl_AttendanceKPIConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AttendanceKPIConfig = null;
	}

	public final class Timers implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private Timer timerEdAttendanceDetails;
		public Timer gettimerEdAttendanceDetails()
		{
			return timerEdAttendanceDetails;
		}
		public void enableAll()
		{
			timerEdAttendanceDetails.setEnabled(true);
		}
		public void disableAll()
		{
			timerEdAttendanceDetails.setEnabled(false);
		}
	}
	private Timers timers;
	public Timers getTimers()
	{
		return this.timers;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[105];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Emergency.Tracking", "BO-1086100005-ID", "ID_Tracking");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__LoggedHcp_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-ID", "ID_AttendanceKPIConfig");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-EDLOCATION", "EDLocation");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHWARNINGKPI", "AwaitingTriageBreachWarningKPI");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHWARNINGKPITEXTCOLOUR", "AwaitingTriageBreachWarningKPITextColour");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHWARNINGKPIFLASHINGTEXT", "AwaitingTriageBreachWarningKPIFlashingText");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHWARNINGKPIFLASHINGTEXTCOLOUR", "AwaitingTriageBreachWarningKPIFlashingTextColour");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHWARNINGKPIBACKGROUNDCOLOUR", "AwaitingTriageBreachWarningKPIBackgroundColour");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHEDKPI", "AwaitingTriageBreachedKPI");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHKPITEXTCOLOUR", "AwaitingTriageBreachKPITextColour");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHKPIFLASHINGTEXT", "AwaitingTriageBreachKPIFlashingText");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHKPIFLASHINGTEXTCOLOUR", "AwaitingTriageBreachKPIFlashingTextColour");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGTRIAGEBREACHKPIBACKGROUNDCOLOUR", "AwaitingTriageBreachKPIBackgroundColour");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHWARNINGKPI", "AwaitingClinicianBreachWarningKPI");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHWARNINGKPITEXTCOLOUR", "AwaitingClinicianBreachWarningKPITextColour");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHWARNINGKPIFLASHINGTEXT", "AwaitingClinicianBreachWarningKPIFlashingText");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHWARNINGKPIFLASHINGTEXTCOLOUR", "AwaitingClinicianBreachWarningKPIFlashingTextColour");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHWARNINGKPIBACKGROUNDCOLOUR", "AwaitingClinicianBreachWarningKPIBackgroundColour");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHEDKPI", "AwaitingClinicianBreachedKPI");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHKPITEXTCOLOUR", "AwaitingClinicianBreachKPITextColour");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHKPIFLASHINGTEXT", "AwaitingClinicianBreachKPIFlashingText");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHKPIFLASHINGTEXTCOLOUR", "AwaitingClinicianBreachKPIFlashingTextColour");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-AWAITINGCLINICIANBREACHKPIBACKGROUNDCOLOUR", "AwaitingClinicianBreachKPIBackgroundColour");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPI", "LosBreachWarningKPI");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPITEXTCOLOUR", "LosBreachWarningKPITextColour");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPIFLASHINGTEXT", "LosBreachWarningKPIFlashingText");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPIFLASHINGTEXTCOLOUR", "LosBreachWarningKPIFlashingTextColour");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHWARNINGKPIBACKGROUNDCOLOUR", "LosBreachWarningKPIBackgroundColour");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPI", "LosBreachedKPI");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHKPITEXTCOLOUR", "LosBreachKPITextColour");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPIFLASHINGTEXT", "LosBreachedKPIFlashingText");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPIFLASHINGTEXTCOLOUR", "LosBreachedKPIFlashingTextColour");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.EDWorklistToAssessmentForm.__internal_x_context__AttendanceKPIConfig_" + componentIdentifier, "BO-1087100007-LOSBREACHEDKPIBACKGROUNDCOLOUR", "LosBreachedKPIBackgroundColour");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
