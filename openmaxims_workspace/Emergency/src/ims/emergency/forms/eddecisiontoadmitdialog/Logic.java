//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.eddecisiontoadmitdialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PasEventShortVo;
import ims.core.vo.lookups.AdmissionType;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.BedAvailabilityForTrackVo;
import ims.emergency.vo.PendingEmergencyAdmissionShortVo;
import ims.emergency.vo.ReferralToSpecialtyTeamVo;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo;
import ims.emergency.vo.TrackingForReferalToSpecialtyVo;
import ims.emergency.vo.TrackingRefVo;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		if (args != null && args.length == 1 && args[0] != null && args[0] instanceof TrackingRefVo)
		{
			TrackingForClinicianWorklistAndTriageVo tempVo = domain.getTrackingForClinicianWorklistAndTriageVo((TrackingRefVo) args[0]);

			form.getLocalContext().setTrackingForClinicianWorklistAndTriageVo(tempVo);

			if (tempVo != null)
			{
				form.getLocalContext().setPendingEmergencyAdmission(tempVo.getAssociatedPendingEmergencyAdmission());
				form.getLocalContext().setBedAvailabilityForTrackVo(tempVo.getBedAvailability());
			}

			open();
		}
		// WDEV-16777, WDEV-16987
		else if (args != null && args.length >= 1 && args[0] != null && args[0] instanceof TrackingRefVo)
		{
			TrackingForClinicianWorklistAndTriageVo tempVo = domain.getTrackingForClinicianWorklistAndTriageVo((TrackingRefVo) args[0]);

			if (args[0] instanceof TrackingForReferalToSpecialtyVo)
			{
				if (args.length == 2 && args[1] != null && args[1] instanceof ReferralToSpecialtyTeamVo)
				{
					form.getLocalContext().setreferralToSpecialtyToBeSaved((ReferralToSpecialtyTeamVo) args[1]);
				}
			}

			form.getLocalContext().setTrackingForClinicianWorklistAndTriageVo(tempVo);
			form.getLocalContext().setPendingEmergencyAdmission(tempVo.getAssociatedPendingEmergencyAdmission());
			form.getLocalContext().setBedAvailabilityForTrackVo(tempVo.getBedAvailability());
			open();
		}
		else
		{
			throw new FormOpenException("Error: The Dialog is not opened properly");
		}
	}
	
	private void initialize()
	{
		form.ccRequestedBy().isRequired(true);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().Emergency.TrackingStatusDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if (removeBed(form.getGlobalContext().Emergency.getTrackingAttendanceStatus()))
				engine.close(DialogResult.OK);
		}
	}

	private void open()
	{
		populateScreenFromData(form.getLocalContext().getPendingEmergencyAdmission(), form.getLocalContext().getBedAvailabilityForTrackVo());

		// If no MoS was populated into control default in logged in MoS user, if any
		if (form.ccRequestedBy().getValue() == null)
		{
			Object mos = domain.getMosUser();

			if (mos instanceof MemberOfStaffLiteVo)
			{
				form.ccRequestedBy().setValue((MemberOfStaffLiteVo) mos);
			}
		}
		
		if (form.dtimDecisionToAdmitDate().getValue() == null)
		{
//			if (form.getLocalContext().getConclusionDateTime() != null)
//				form.dtimDecisionToAdmitDate().setValue(form.getLocalContext().getConclusionDateTime());
//			else
				form.dtimDecisionToAdmitDate().setValue(new DateTime());
		}
		
		form.setMode(FormMode.EDIT);
		updateControlsState();
		
	}
	private void updateControlsState()
	{
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.btnSave().setEnabled(form.cmbDTABedType().getValue() != null);
		}
		form.btnRemoveBedRequest().setVisible(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull()
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getID_Tracking() != null
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getBedAvailabilityIsNotNull()
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getBedAvailability().getID_BedAvailability() != null); //wdev-17254
		
		form.btnRemoveBedRequest().setEnabled(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull()
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getID_Tracking() != null
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getBedAvailabilityIsNotNull()
												&& form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getBedAvailability().getID_BedAvailability() != null); //wdev-17254
	}
	private void clearControls()
	{
		form.dtimDecisionToAdmitDate().setValue(null);
		form.cmbDTABedType().setValue(null);
	}
	private void populateScreenFromData(PendingEmergencyAdmissionShortVo pendrec, BedAvailabilityForTrackVo bedAvailability)
	{
		clearControls();

		if (pendrec == null)
			return;
		
		if (!EmergencyAdmissionStatus.CANCELLED.equals(pendrec.getAdmissionStatus()))  //wdev-17254
		{
			if (bedAvailability != null)
				form.ccRequestedBy().setValue(bedAvailability.getRequestedBy());
			
			form.dtimDecisionToAdmitDate().setValue(pendrec.getDTADateTime());
			form.cmbDTABedType().setValue(pendrec.getBedTypeRequested());
			
			if (bedAvailability != null)
				form.dtimAvailableBedTime().setValue(bedAvailability.getAvailableDateTime());
		}
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = getUiErrors();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		PendingEmergencyAdmissionShortVo record = populateDataFromScreen(form.getLocalContext().getPendingEmergencyAdmission());
		BedAvailabilityForTrackVo bedAvailable = populateBedAvailabilityFromScreen(form.getLocalContext().getBedAvailabilityForTrackVo());
		TrackingForClinicianWorklistAndTriageVo tempVo = domain.getTrackingForClinicianWorklistAndTriageVo(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo());

		if (record != null && !record.getID_PendingEmergencyAdmissionIsNotNull())
		{
			if (tempVo != null && tempVo.getAssociatedPendingEmergencyAdmissionIsNotNull())
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				engine.close(DialogResult.ABORT);// WDEV-16777
				return;
			}
		}
		
		// Create new current status (Decision To Admit) for tracking
		TrackingAttendanceStatusVo newStatus = new TrackingAttendanceStatusVo();

		newStatus.setPatient(tempVo.getPatient());
		newStatus.setEpisode(tempVo.getEpisode().getEpisodeOfCare());
		newStatus.setAttendance(tempVo.getAttendance().getCareContext());
		newStatus.setTrackingArea(tempVo.getCurrentArea());
		newStatus.setStatusDatetime(new DateTime());
		newStatus.setCreatedBy((MemberOfStaffRefVo) domain.getMosUser());
		newStatus.setStatus(TrackingStatus.DECISION_TO_ADMIT);
		
		newStatus.setPrevStatus((tempVo != null && tempVo.getCurrentStatus() != null) ? tempVo.getCurrentStatus().getStatus() : null);
		newStatus.setPrevTrackingArea((tempVo != null && tempVo.getCurrentStatus() != null) ? tempVo.getCurrentStatus().getTrackingArea() : null);
		form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().setCurrentStatus(newStatus);
		
		if (form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getConclusionDateTime() == null)
		{
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().setConclusionDateTime(form.dtimDecisionToAdmitDate().getValue());
		}
		
		form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().setBedTypeRequested(form.cmbDTABedType().getValue());
		
		errors = record.validate(bedAvailable.validate(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().validate()));
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			domain.save(record, bedAvailable, form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo(), form.getLocalContext().getreferralToSpecialtyToBeSaved());//WDEV-16777
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			//WDEV-16777
			engine.close(DialogResult.ABORT);
			return;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		engine.close(DialogResult.OK);
	}
	private BedAvailabilityForTrackVo populateBedAvailabilityFromScreen(BedAvailabilityForTrackVo bedAvailability)
	{
		if (bedAvailability == null)
			bedAvailability = new BedAvailabilityForTrackVo();
		
		bedAvailability.setPatient(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getPatient());
		bedAvailability.setEpisode(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getEpisode().getEpisodeOfCare());
		bedAvailability.setAttendance(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getCareContext());
		bedAvailability.setTrackingArea(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getCurrentArea());
		bedAvailability.setAwaitingDateTime(form.dtimDecisionToAdmitDate().getValue());
		bedAvailability.setAvailableDateTime(form.dtimAvailableBedTime().getValue());
		bedAvailability.setRequestedBy((MemberOfStaffLiteVo) form.ccRequestedBy().getValue());
		
		return bedAvailability;
	}

	private PendingEmergencyAdmissionShortVo populateDataFromScreen(PendingEmergencyAdmissionShortVo record)
	{
		if( record == null)
			record = new PendingEmergencyAdmissionShortVo();
		
		record.setAdmissionStatus(EmergencyAdmissionStatus.DTA);
		record.setDTADateTime(form.dtimDecisionToAdmitDate().getValue());
		record.setAdmissionType(AdmissionType.PLANNED);
		
		LocationLiteVo tempVo = getCurrentLocation();	//wdev-17488
		if( tempVo != null )//WDEV-17615
		{
			//WDEV-17615
			LocationLiteVo currentHospital = domain.getCurrentHospital(tempVo);
			record.setCurrentLocation(currentHospital);
		}
		record.setBedTypeRequested(form.cmbDTABedType().getValue());
		
		if( !record.getPasEventIsNotNull())
		{
			PasEventShortVo pasVo = new PasEventShortVo();
			if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull() && form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendanceIsNotNull() && form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getRegistrationDateTimeIsNotNull() )
				pasVo.setEventDateTime(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getRegistrationDateTime());
			if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull())
			{
				pasVo.setPatient(domain.getPatientShort( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getPatient()));
							
			}
			pasVo.setPasEventId(new DateTime().toString()); //wdev-17231
			LocationLiteVo templocVo = getCurrentLocation();	//wdev-17488
			if( templocVo != null )//WDEV-17615
			{
				//WDEV-17615
				LocationLiteVo currentHospital = domain.getCurrentHospital(templocVo);
				pasVo.setLocation(currentHospital);
			}
			pasVo.setSpecialty(Specialty.EMERGENCY);
			record.setPasEvent(pasVo);
			
			
			
		}
		if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull() && !form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getBedAvailabilityIsNotNull())
		{
			BedAvailabilityForTrackVo bedTrackVo = new BedAvailabilityForTrackVo();
			bedTrackVo.setPatient( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getPatient());
			bedTrackVo.setEpisode( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getEpisode().getEpisodeOfCare());
			bedTrackVo.setAttendance(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getCareContext());
			bedTrackVo.setTrackingArea(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getCurrentArea());
			Object user = domain.getMosUser();
			if( user instanceof MemberOfStaffLiteVo)
			{
				bedTrackVo.setRequestedBy((MemberOfStaffLiteVo)user);
			}
			
			bedTrackVo.setAwaitingDateTime(new DateTime());
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().setBedAvailability(bedTrackVo);
		}
		
		return record;
	}
	//wdev-17488
	private LocationLiteVo getCurrentLocation()
	{
		LocationLiteVo loc = null;
		LocSiteLiteVo locsite = null;
		if (domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			loc = (LocationLiteVo) domain.getCurrentLocation();

		}
		else if (domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locsite = (LocSiteLiteVo) domain.getCurrentLocation();
			if (locsite != null)
			{
				loc = new LocationLiteVo(locsite.getID_Location(), locsite.getVersion_Location());
				loc = domain.getLocationLiteVo(loc);
				
			}
		}
		return loc;
	}
	private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
	
		if( form.dtimDecisionToAdmitDate().getValue() == null )
		{
			errors.add("Decision to Admit Date is mandatory.");
		}
		else
		{
			if( form.dtimDecisionToAdmitDate().getValue().isGreaterThan(new DateTime()))
			{
				errors.add("Decision to Admit Date cannot be in the future.");
			}
		}
		if( form.cmbDTABedType().getValue() == null)
		{
			errors.add("DTA Bedtype is mandatory.");
		}
		if(errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Attendance Record", searchErrors);
			
			return searchErrors;
		}
		return null;
	}

	
	protected void onDtimDecisionToAdmitDateValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		//updateControlsState();
	}
	
	protected void onCmbDTABedTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
		if( form.dtimDecisionToAdmitDate().getValue() == null)
			engine.showMessage("Decision to Admit Date is mandatory.");
	}
	
	//wdev-17254
	protected void onBtnRemoveBedRequestClick()	throws PresentationLogicException 
	{
		//wdev-17380
		if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull() )
		{
			if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getEpisodeIsNotNull() && form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getEpisode().getEpisodeOfCareIsNotNull())
				form.getGlobalContext().Core.setEpisodeofCareShort(domain.getEpisodeOfCare(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getEpisode().getEpisodeOfCare()));
			if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendanceIsNotNull() && form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getCareContextIsNotNull())
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShort(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().getCareContext()));
		}
		//----------
		engine.open(form.getForms().Emergency.TrackingStatusDialog);
	}

	//wdev-17254
	private boolean removeBed(TrackingAttendanceStatusVo newStatus)
	{
		if (form.getLocalContext().getTrackingForClinicianWorklistAndTriageVoIsNotNull())
		{
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().setCurrentStatus(newStatus);
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().setConclusionDateTime(null);
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAttendance().setBedTypeRequested(null);
			
			PendingEmergencyAdmissionShortVo temppend = null;
			if( form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAssociatedPendingEmergencyAdmissionIsNotNull() )
			{
				temppend = form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().getAssociatedPendingEmergencyAdmission(); 
				temppend.setAdmissionStatus(EmergencyAdmissionStatus.CANCELLED);
				temppend.setAllocatedWard(null);
			}
			form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().setBedAvailability(null);
			
			String[] errors = form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo().validate();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
			try 
			{
				domain.saveRemoveBed(form.getLocalContext().getTrackingForClinicianWorklistAndTriageVo(),temppend);
			} 
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return true;
			} 
			catch (UniqueKeyViolationException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			
			return true;
			
		}
		return false;
	}
}
