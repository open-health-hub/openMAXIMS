//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.addeditarea;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.emergency.vo.TrackingAreaVo;
import ims.framework.enumerations.DialogResult;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	private void open()
	{
		initialize();//FB
		populateScreenFromData(form.getGlobalContext().Emergency.getTrackingArea());
	}

	//FB
	private void initialize()
	{
		form.cmbStatus().setValue(PreActiveActiveInactiveStatus.PREACTIVE);	
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (add())
			engine.close(DialogResult.OK);
	}

	private boolean add()
	{
		//FB
		TrackingAreaVo trackingAreaToSave=form.getGlobalContext().Emergency.getTrackingArea();
		
		if (trackingAreaToSave==null)
			trackingAreaToSave=new TrackingAreaVo();

		String[] errors = validateUIRules();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		trackingAreaToSave.setAreaDisplayName(form.txtAreaName().getValue());
		trackingAreaToSave.setAreaNameDescription(form.txtAreaDescription().getValue());
		//trackingAreaToSave.setPatientRefreshRate(form.intRefreshRate().getValue());
		trackingAreaToSave.setStatus(form.cmbStatus().getValue());
		trackingAreaToSave.setAreaType(form.cmbAreaType().getValue());
		
		form.getGlobalContext().Emergency.setTrackingArea(trackingAreaToSave);
		return true;

	}

	private void populateScreenFromData(TrackingAreaVo trackingAreaToSave)
	{
		//FB
		if (trackingAreaToSave==null)
		{  
			return;
		}
	
		form.txtAreaName().setValue(trackingAreaToSave.getAreaDisplayName());
		form.txtAreaDescription().setValue(trackingAreaToSave.getAreaNameDescription());
		//form.intRefreshRate().setValue(trackingAreaToSave.getPatientRefreshRate());

		if (trackingAreaToSave.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
		{
			form.cmbStatus().removeRow(PreActiveActiveInactiveStatus.PREACTIVE);
		}
		else if (trackingAreaToSave.getStatus().equals(PreActiveActiveInactiveStatus.INACTIVE))
		{
			form.cmbStatus().removeRow(PreActiveActiveInactiveStatus.PREACTIVE);
			form.cmbStatus().removeRow(PreActiveActiveInactiveStatus.ACTIVE);
		}
			
		form.cmbStatus().setValue(trackingAreaToSave.getStatus());
		form.cmbAreaType().setValue(trackingAreaToSave.getAreaType());
		
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.txtAreaName().setEnabled( !((form.getGlobalContext().Emergency.getTrackingArea().getIsOverallViewIsNotNull() && form.getGlobalContext().Emergency.getTrackingArea().getIsOverallView().equals(true)) || (form.getGlobalContext().Emergency.getTrackingArea().getIsRegistrationAreaIsNotNull() && form.getGlobalContext().Emergency.getTrackingArea().getIsRegistrationArea().equals(true))));
		form.txtAreaDescription().setEnabled( ! ((form.getGlobalContext().Emergency.getTrackingArea().getIsOverallViewIsNotNull() && form.getGlobalContext().Emergency.getTrackingArea().getIsOverallView().equals(true)) || (form.getGlobalContext().Emergency.getTrackingArea().getIsRegistrationAreaIsNotNull() && form.getGlobalContext().Emergency.getTrackingArea().getIsRegistrationArea().equals(true))));
		form.cmbStatus().setEnabled( ! ((form.getGlobalContext().Emergency.getTrackingArea().getIsOverallViewIsNotNull() && form.getGlobalContext().Emergency.getTrackingArea().getIsOverallView().equals(true)) || (form.getGlobalContext().Emergency.getTrackingArea().getIsRegistrationAreaIsNotNull() && form.getGlobalContext().Emergency.getTrackingArea().getIsRegistrationArea().equals(true))));
		form.cmbAreaType().setEnabled(! ((form.getGlobalContext().Emergency.getTrackingArea().getIsOverallViewIsNotNull() && form.getGlobalContext().Emergency.getTrackingArea().getIsOverallView().equals(true)) || (form.getGlobalContext().Emergency.getTrackingArea().getIsRegistrationAreaIsNotNull() && form.getGlobalContext().Emergency.getTrackingArea().getIsRegistrationArea().equals(true))));
	}

	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();

		if (form.txtAreaName().getValue() == null)
		{
			uiErrors.add("Area Name is mandatory");
		}

		if (form.txtAreaDescription().getValue() == null)
		{
			uiErrors.add("Area Description is mandatory");
		}

		/*if (form.intRefreshRate().getValue() == null)
		{
			uiErrors.add("Patient refresh rate is mandatory");
		}*/

		if (form.cmbStatus().getValue() == null)
		{
			uiErrors.add("Status is mandatory");
		}

		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);

		return uiResults;
	}
}
