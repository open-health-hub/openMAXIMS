//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.sendtoareadialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.sendtoareadialog.GenForm.grdSendToAreaRow;
import ims.emergency.vo.TrackingAreaLiteVo;
import ims.emergency.vo.TrackingAreaVo;
import ims.emergency.vo.TrackingAreaVoCollection;
import ims.emergency.vo.TrackingLiteVo;
import ims.emergency.vo.TrackingMovementTimesVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(checkIfanAreaisSelected() == false)
		{
			engine.showMessage("Please select an Area.");
			return;
		}
		if(	form.getLocalContext().getAttendaceDetailsOrOtherIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getAttendaceDetailsOrOther()))  //wdev-14567
		{
			TrackingLiteVo trackLiteVo = form.getLocalContext().getTracking();
			if(	trackLiteVo != null)
			{
				trackLiteVo.setLastMovementDateTime(new DateTime());
				trackLiteVo.setCurrentArea(gettrackingArea());
			}
			
			TrackingMovementTimesVo trackMovVo = new TrackingMovementTimesVo();
			trackMovVo.setPatient(form.getGlobalContext().Core.getPatientShort());
			trackMovVo.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
			trackMovVo.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
			trackMovVo.setAreaMovedTo(gettrackingArea());
			trackMovVo.setMovedDateTime(new DateTime());
			trackMovVo.setMovedBy((MemberOfStaffLiteVo) domain.getMosUser());
			
			try 
			{
				domain.saveTrackingAndTrackingMovementTimes(trackLiteVo, trackMovVo);
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			
		}
		else
			form.getGlobalContext().Emergency.setTrackingAreaForSendToAreaVo(gettrackingArea());
		
		engine.close(DialogResult.OK);
	}
	
	protected void onGrdSendToAreaGridCheckBoxClicked(int column, GenForm.grdSendToAreaRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
		for(int i = 0;i < form.grdSendToArea().getRows().size();i++)
		{
			GenForm.grdSendToAreaRow row1 = form.grdSendToArea().getRows().get(i); 
			if(!row1.getValue().equals(row.getValue()) && row1.getColumnSelect() == true)
				row1.setColumnSelect(false);
		}
	}

	
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		if(args != null )
		{
			if(	args.length == 1 && args[0] != null && args[0] instanceof Boolean )
			{
				form.getLocalContext().setAttendaceDetailsOrOther((Boolean)args[0]);
			}
			else
				form.getLocalContext().setAttendaceDetailsOrOther(null);
		}
		else
			form.getLocalContext().setAttendaceDetailsOrOther(null);
		
		open();
		
	}
	
	private void open()
	{
		clearControls();
		LocationLiteVo loc = null;
		LocSiteLiteVo locsite = null;
		TrackingAreaVoCollection tempCollVo = null;
		
		if(domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			loc = (LocationLiteVo) domain.getCurrentLocation();
			
		}
		else if(domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locsite = (LocSiteLiteVo) domain.getCurrentLocation();
			if(locsite != null)
			{
				loc = new LocationLiteVo(locsite.getID_Location(),locsite.getVersion_Location());
				
			}
			
		}
		if(loc != null)
		{
			if(	form.getLocalContext().getAttendaceDetailsOrOtherIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getAttendaceDetailsOrOther()))  //wdev-14567
			{
				if(	form.getGlobalContext().Emergency.getTrackingIsNotNull())
				{
					TrackingLiteVo trackLiteVo = domain.getTrackingLiteVo(form.getGlobalContext().Emergency.getTracking());
					if(	trackLiteVo != null)
					{
						tempCollVo = domain.listTrackingAreas(loc,trackLiteVo.getCurrentArea());
						form.getLocalContext().setTracking(trackLiteVo);
					}
				}
			}
			//WDEV-17140
			else if(form.getLocalContext().getAttendaceDetailsOrOtherIsNotNull() && Boolean.FALSE.equals(form.getLocalContext().getAttendaceDetailsOrOther()))  //wdev-14567
			{
				TrackingAreaLiteVo registrationArea = domain.getRegistrationAreaByLocation(loc);
				
				tempCollVo = domain.listTrackingAreas(loc,registrationArea);
			}
			else
			{
				tempCollVo = domain.listTrackingAreas(loc,null);
			}
			populateSendToAreaGrid(tempCollVo);
		}
	}
	
	private void clearControls()
	{
		form.grdSendToArea().getRows().clear();
	}
	
	private void populateSendToAreaGrid(TrackingAreaVoCollection tempCollVo)
	{
		//form.grdSendToArea().setEnabled(true);
		form.grdSendToArea().getRows().clear();
		
		if(tempCollVo == null)
			return;
		
		for(int i = 0; i < tempCollVo.size(); i++)
		{
			TrackingAreaVo tempVo = tempCollVo.get(i);
			
			//WDEV-15815 //WDEV-17249
			if(tempVo != null && ((tempVo.getAreaType() == null) || form.getGlobalContext().Core.getPatientShort() == null || (form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().calculateAge() == null) || ( tempVo.getAreaTypeIsNotNull() && (isAdultPatient() && tempVo.getAreaType().equals(ims.emergency.vo.lookups.AreaType.ADULT_ONLY)) || 
																										( ( ! isAdultPatient()) && tempVo.getAreaType().equals(ims.emergency.vo.lookups.AreaType.PAEDIATRIC_ONLY)))))
			{
				grdSendToAreaRow row = form.grdSendToArea().getRows().newRow();
				row.setColumnArea(tempVo.getAreaDisplayName());
				
				if (tempCollVo.size() == 1) //WDEV-16557
				{
					row.setColumnSelect(Boolean.TRUE);
				}
				else
					row.setColumnSelect(Boolean.FALSE);
				
				row.setValue(tempVo);
			}
		}
	}
	
	//WDEV-15815
	private boolean isAdultPatient()
	{	
		if (form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().calculateAge() > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue())
		{
			return true;
		}
		
		return false;
	}

	private boolean checkIfanAreaisSelected()
	{
		for(int i = 0;i < form.grdSendToArea().getRows().size();i++)
		{
			GenForm.grdSendToAreaRow row1 = form.grdSendToArea().getRows().get(i); 
			if(row1.getColumnSelect() == true)
				return true;
		}
		return false;
	}
	private TrackingAreaVo gettrackingArea()
	{
		for(int i = 0;i < form.grdSendToArea().getRows().size();i++)
		{
			GenForm.grdSendToAreaRow row1 = form.grdSendToArea().getRows().get(i); 
			if(row1.getColumnSelect() == true)
				return row1.getValue();
		}
		return null;
	}
}
