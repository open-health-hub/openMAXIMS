//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4892.20548)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.transferdialog;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.EDPartialAdmissionVo;
import ims.emergency.vo.EDTransferVo;
import ims.emergency.vo.lookups.TransferToHospital;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if( args != null && args.length == 1 && args[0] != null && args[0] instanceof EDPartialAdmissionVo)
		{
			form.getLocalContext().setEDPartialAdmissionForTrackingVo((EDPartialAdmissionVo) args[0]);
		}
		else
			form.getLocalContext().setEDPartialAdmissionForTrackingVo(null);
		
		open();
	}
	
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	private boolean save()
	{
		String[] errors1 = validateUIRules(); 
		
		if(errors1 != null && errors1.length > 0)
		{
			engine.showErrors(errors1);
			return false;
		}
		
		EDTransferVo tempVo = populateDataFromScreen(form.getGlobalContext().Emergency.getEDTransferVo());
		String[] errors = tempVo.validate(validateUIRules()); 
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getGlobalContext().Emergency.setEDTransferVo(domain.saveEDTransfer(tempVo,form.getLocalContext().getEDPartialAdmissionForTrackingVo()));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
		}
		catch (UniqueKeyViolationException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		engine.close(DialogResult.OK);
		return true;
	}
	private String[] validateUIRules()
	{
		
		ArrayList<String> errorList = new ArrayList<String>();
		
		if( form.dtimReferredDateTime().getValue() == null )
		{
			errorList.add("Referred Date Time is mandatory");
		}
		else if( form.dtimReferredDateTime().getValue() != null && form.dtimReferredDateTime().getValue().isGreaterThan(new DateTime()))
		{
			errorList.add("Referred Date Time cannot be in the future");
		}
		if( form.dtimAcceptedDateTime().getValue() != null && form.dtimAcceptedDateTime().getValue().isGreaterThan(new DateTime() ))
		{
			errorList.add("Accepted Date Time cannot be in the future");
		}
		if( form.cmbHospital().getValue() == null )
		{
			errorList.add("Hospital is mandatory");
		}
		else if( form.cmbHospital().getValue() != null && form.cmbHospital().getValue().equals(TransferToHospital.OTHER) )
		{
			if( form.txtOtherHospital().getValue() == null)
			{
				errorList.add(" Other Hospital is mandatory");
			}
		}
			
		
		
		return errorList.toArray(new String[errorList.size()]);
	}

	private EDTransferVo populateDataFromScreen( EDTransferVo tempVo)
	{
		if( tempVo == null)
			tempVo = new EDTransferVo();
		
		tempVo.setAcceptedDateTime(form.dtimAcceptedDateTime().getValue());
		tempVo.setReferredDateTime(form.dtimReferredDateTime().getValue());
		tempVo.setToHospital(form.cmbHospital().getValue());
		tempVo.setOtherHospital(form.txtOtherHospital().getValue());
		tempVo.setTransferMode(form.cmbTransferMode().getValue());
		tempVo.setTransferEscort(form.cmbTransferEscort().getValue());
		tempVo.setComment(form.txtComment().getValue());
		
		return tempVo;
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		save();
	}
	private void open()
	{
		clearScreen();
			
		if( form.getGlobalContext().Emergency.getEDTransferVoIsNotNull() )
			form.getGlobalContext().Emergency.setEDTransferVo(domain.getEDTransferVo(form.getGlobalContext().Emergency.getEDTransferVo()));
		
		populateScreenFromData(form.getGlobalContext().Emergency.getEDTransferVo());
		updateControlsState();
	}
	private void populateScreenFromData( ims.emergency.vo.EDTransferVo edTrVo)
	{
		
		if( edTrVo == null )
			return;
		
		form.dtimReferredDateTime().setValue(edTrVo.getReferredDateTime());
		form.dtimAcceptedDateTime().setValue(edTrVo.getAcceptedDateTime());
		form.cmbHospital().setValue(edTrVo.getToHospital());
		form.cmbTransferEscort().setValue(edTrVo.getTransferEscort());
		form.cmbTransferMode().setValue(edTrVo.getTransferMode());
		form.txtComment().setValue(edTrVo.getComment());
		form.txtOtherHospital().setValue(edTrVo.getOtherHospital());
		
	}
	private void clearScreen()
	{
		form.dtimAcceptedDateTime().setValue(null);
		form.dtimReferredDateTime().setValue(null);
		form.cmbHospital().setValue(null);
		form.cmbTransferEscort().setValue(null);
		form.cmbTransferMode().setValue(null);
		form.txtComment().setValue(null);
		form.txtOtherHospital().setValue(null);
	}

	
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	private void updateControlsState()
	{
		if( form.cmbHospital().getValue() != null && form.cmbHospital().getValue().equals(TransferToHospital.OTHER))
		{
			form.txtOtherHospital().setRequired(true);
		}
		else
			form.txtOtherHospital().setRequired(false);
	}
}
