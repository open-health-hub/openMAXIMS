//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.addeditquestionstowhiteboard;

import ims.core.forms.questionanswertype.GenForm;
import ims.core.vo.AnswerOptionForEDWhiteboardConfigVo;
import ims.core.vo.AnswerOptionForEDWhiteboardConfigVoCollection;
import ims.core.vo.lookups.QuestionAnswerType;
import ims.emergency.forms.addeditquestionstowhiteboard.GenForm.grdAnswerOptionsRow;
import ims.emergency.vo.WhiteBoardQuestionConfigVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.IntRange;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initializeScreen();
		open();
	}
	private void open()
	{
		populateScreenFromData(form.getGlobalContext().Emergency.getWhiteBoardQuestionConfig());
		updateControlsState();
	}
	
	private void populateScreenFromData(WhiteBoardQuestionConfigVo whiteBoardQuestionConfig)
	{
		clearScreen();
		if (whiteBoardQuestionConfig==null)
			return;
		
		form.txtQuestionText().setValue(whiteBoardQuestionConfig.getQuestionText());
		form.txtColumnText().setValue(whiteBoardQuestionConfig.getColumnHeaderText());
		form.cmbAnswerType().setValue(whiteBoardQuestionConfig.getAnswerType());
		populateAnswerOptionsGrid(whiteBoardQuestionConfig.getOptions());
		form.intColumnWidth().setValue(whiteBoardQuestionConfig.getColumnWidth());
		form.cmbGender().setValue(whiteBoardQuestionConfig.getGenderSpecific());
		form.irbAgeRange().setValue(new IntRange(whiteBoardQuestionConfig.getAgeRangeMin(),whiteBoardQuestionConfig.getAgeRangeMax()));
		
	}
	private void populateAnswerOptionsGrid(AnswerOptionForEDWhiteboardConfigVoCollection collAnsOptions)
	{
		if (collAnsOptions==null)
			return;
		
		for (int i=0;i<collAnsOptions.size();i++)
		{
			AnswerOptionForEDWhiteboardConfigVo ansOption = collAnsOptions.get(i);
			
			if (ansOption==null)
				continue;
			
			grdAnswerOptionsRow row = form.grdAnswerOptions().getRows().newRow();
			row.setcolOptionText(ansOption.getOptionText());
			row.setcolOptionDesc(ansOption.getOptionDescription());
			row.setValue(ansOption);
		}
	}
	private void clearScreen()
	{
		form.txtQuestionText().setValue(null);
		form.txtColumnText().setValue(null);
		form.cmbAnswerType().setValue(null);
		form.grdAnswerOptions().getRows().clear();
		form.intColumnWidth().setValue(null);
		form.cmbGender().setValue(null);
		form.irbAgeRange().setValue(new IntRange());
		
	}
	private void initializeScreen()
	{
		setContextMenu();
		deleteItemsFromCmbAnswerType();
	}
	private void deleteItemsFromCmbAnswerType()
	{
		form.cmbAnswerType().removeRow(QuestionAnswerType.MULTISELECT);
		form.cmbAnswerType().removeRow(QuestionAnswerType.SEPARATOR);
	}
	private void setContextMenu()
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add Answer Option");
		form.getContextMenus().getGenericGridRemoveItem().setText("Remove Answer Option");
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		WhiteBoardQuestionConfigVo whiteBoardQuestToSave = populateDataFromScreen(form.getGlobalContext().Emergency.getWhiteBoardQuestionConfig());
		
		String[] errors = getUIErrors();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return ;
		}

		form.getGlobalContext().Emergency.setWhiteBoardQuestionConfig(whiteBoardQuestToSave);
		engine.close(DialogResult.OK);
	}
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.txtQuestionText().getValue()==null)
			errors.add("'Text' is mandatory!");
		
		if (form.txtColumnText().getValue()==null)
			errors.add("'Column Header Text' is mandatory!");
		
		if (form.intColumnWidth().getValue()==null)
			errors.add("'Column Width' is mandatory!");
		
		if (form.cmbAnswerType().getValue()==null)
			errors.add("'Answer Type' is mandatory!");
		
		if (form.cmbGender().getValue()==null)
			errors.add("'Gender Specific' is mandatory!");
	
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	private WhiteBoardQuestionConfigVo populateDataFromScreen(WhiteBoardQuestionConfigVo whiteBoardQuestionConfig)
	{
		if (whiteBoardQuestionConfig==null)
			whiteBoardQuestionConfig=new WhiteBoardQuestionConfigVo();
		else
			whiteBoardQuestionConfig=(WhiteBoardQuestionConfigVo) whiteBoardQuestionConfig.clone();
		
		whiteBoardQuestionConfig.setQuestionText(form.txtQuestionText().getValue());
		whiteBoardQuestionConfig.setColumnHeaderText(form.txtColumnText().getValue());
		whiteBoardQuestionConfig.setAnswerType(form.cmbAnswerType().getValue());
		whiteBoardQuestionConfig.setOptions(populateOptionsFromGrid());
		whiteBoardQuestionConfig.setColumnWidth(form.intColumnWidth().getValue());
		whiteBoardQuestionConfig.setGenderSpecific(form.cmbGender().getValue());
		whiteBoardQuestionConfig.setAgeRangeMin(form.irbAgeRange().getValue()!=null ? form.irbAgeRange().getValue().getMin() : null);
		whiteBoardQuestionConfig.setAgeRangeMax(form.irbAgeRange().getValue()!=null ? form.irbAgeRange().getValue().getMax() : null);
		
		return whiteBoardQuestionConfig;
	}
	private AnswerOptionForEDWhiteboardConfigVoCollection populateOptionsFromGrid()
	{
		AnswerOptionForEDWhiteboardConfigVoCollection voColl = new AnswerOptionForEDWhiteboardConfigVoCollection();
		for (int i = 0; i < form.grdAnswerOptions().getRows().size(); i++)
		{
			grdAnswerOptionsRow row = form.grdAnswerOptions().getRows().get(i);
			AnswerOptionForEDWhiteboardConfigVo voAnswerOption = row.getValue() != null ? row.getValue() : new AnswerOptionForEDWhiteboardConfigVo();
			voAnswerOption.setOptionText(row.getcolOptionText());
			voAnswerOption.setOptionDescription(row.getcolOptionDesc());
						
			voColl.add(voAnswerOption);
		}
		return voColl;
	}
	@Override
	protected void onGrdAnswerOptionsSelectionChanged()
	{
		updateControlsState();
	}
	@Override
	protected void onCmbAnswerTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
		
		if (!QuestionAnswerType.PICKLIST.equals(form.cmbAnswerType().getValue()))
			form.grdAnswerOptions().getRows().clear();
	}
	private void updateControlsState()
	{
		boolean gridIsEnabled = QuestionAnswerType.PICKLIST.equals(form.cmbAnswerType().getValue());
		form.grdAnswerOptions().setReadOnly(!gridIsEnabled);
		form.grdAnswerOptions().setEnabled(gridIsEnabled);
		
		form.getContextMenus().getGenericGridAddItem().setVisible(gridIsEnabled);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(gridIsEnabled && form.grdAnswerOptions().getSelectedRowIndex() >= 0);
		form.getContextMenus().getGenericGridMoveUpItem().setVisible(gridIsEnabled && form.grdAnswerOptions().canMoveCurrentUp());
		form.getContextMenus().getGenericGridMoveDownItem().setVisible(gridIsEnabled && form.grdAnswerOptions().canMoveCurrentDown());
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
				addAnswerOption();
			break;
			case GenForm.ContextMenus.GenericGrid.Remove :
				form.grdAnswerOptions().removeSelectedRow();
			break;
			case GenForm.ContextMenus.GenericGrid.MoveUp :
				form.grdAnswerOptions().moveUp();
			break;
			case GenForm.ContextMenus.GenericGrid.MoveDown :
				form.grdAnswerOptions().moveDown();
			break;
		}
		updateControlsState();
	}
	
	private void addAnswerOption()
	{
		grdAnswerOptionsRow row = form.grdAnswerOptions().getRows().newRow(true);
		row.setReadOnly(false);
		//row.setcolScoreReadOnly(!isScoringAssessmentQuestion());
		//row.setcolColourReadOnly(!isColorColumnVisible());
		row.setValue(new AnswerOptionForEDWhiteboardConfigVo());
	}
}
