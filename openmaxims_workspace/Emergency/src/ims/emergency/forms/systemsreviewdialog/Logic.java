//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.systemsreviewdialog;

import ims.clinical.configuration.vo.ClinicalProblemRefVo;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.SystemReviewForPresentingProblemConfigVo;
import ims.emergency.vo.SystemReviewVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;



public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
	
		initialize();
		if(args != null )
		{
			
			if(	args.length == 2  )
			{
				ClinicalProblemRefVo clinProbVo = null;
				if(	args[0] != null && args[0] instanceof SystemReviewVo)
					form.getLocalContext().setCurrentSystemReview((SystemReviewVo)args[0]);
				
				if(	args[1] != null && args[1] instanceof ClinicalProblemRefVo)
					clinProbVo = (ClinicalProblemRefVo)args[1];
				
				if( clinProbVo != null)
				{
					SystemReviewForPresentingProblemConfigVo tempVo = domain.getSystemReviewForPresentingProblemConfigVo(clinProbVo);
					populateReviewOfSystemCombo(tempVo);
				}
				if(	form.getLocalContext().getCurrentSystemReviewIsNotNull() && form.getLocalContext().getCurrentSystemReview().getID_SystemsReviewIsNotNull())
				{
					form.ccAuthoring().setValue(form.getLocalContext().getCurrentSystemReview().getAuthoringInformation());
					//if(	form.cmbReviewofSystem().size() == 0 )
					//{
					//	if(	form.getLocalContext().getCurrentSystemReview().getSymptomIsNotNull())
					//		form.cmbReviewofSystem().newRow(form.getLocalContext().getCurrentSystemReview().getSymptom(), form.getLocalContext().getCurrentSystemReview().getSymptom().getText());
					//}
					form.cmbReviewofSystem().setValue(form.getLocalContext().getCurrentSystemReview().getSystems());
					form.richTextSystemReviewNotes().setValue(form.getLocalContext().getCurrentSystemReview().getSystemReviewNote());
				}
				else
				{
					
					form.ccAuthoring().initializeComponent();	//default authoring on new button
				}
			}
						
		}
	}
	private void initialize()
	{
		form.ccAuthoring().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.getLocalContext().setCurrentSystemReview(null);
		
	}
	private void populateReviewOfSystemCombo(SystemReviewForPresentingProblemConfigVo tempVo)
	{
		form.cmbReviewofSystem().clear();
		if(tempVo != null && tempVo.getSystemIsNotNull())
		{
			for(int j = 0; j < tempVo.getSystem().size();j++)
			{
				form.cmbReviewofSystem().newRow(tempVo.getSystem().get(j), tempVo.getSystem().get(j).getText());
			}
		}
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		save();
	}
	private void save()
	{
		SystemReviewVo record = populateDataFromScreen(form.getLocalContext().getCurrentSystemReview());
		String[] errors = record.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);			
			return;
		}
		try 
		{
			domain.saveSystemReview(record);
		}
		catch (StaleObjectException e) 
		{
		
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
		}
		engine.close(DialogResult.OK);
		
	}
	/*private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
	
		if(form.ccAuthoring().getValue() == null || form.ccAuthoring().getValue().getAuthoringDateTime() == null || form.ccAuthoring().getValue() == null)
		{
			
			errors.add("Authoring HCP and Authoring Date Time are mandatory. ");
			
		}
		if(	form.cmbReviewofSystem().getValue() == null)
		{
			errors.add("Review of System is mandatory. ");
		}
		if(	form.richTextSystemReviewNotes().getValue() == null)
		{
			errors.add("System Review Notes is mandatory. ");
		}
				
							
		if(errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			return searchErrors;
		}
		return null;
	}*/
	private SystemReviewVo populateDataFromScreen(SystemReviewVo record)
	{
		if(	record == null)
			record = new SystemReviewVo();
		
		record.setAuthoringInformation(form.ccAuthoring().getValue());
		record.setSystems(form.cmbReviewofSystem().getValue());
		record.setSystemReviewNote(form.richTextSystemReviewNotes().getValue());
		
		return record;
	}
	
	
}
