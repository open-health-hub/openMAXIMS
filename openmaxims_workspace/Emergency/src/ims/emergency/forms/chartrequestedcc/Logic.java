//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.chartrequestedcc;

import ims.admin.vo.EDAttendanceControlsConfigVo;
import ims.admin.vo.EDAttendanceControlsConfigVoCollection;
import ims.admin.vo.lookups.EDAttendenceControlType;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EmergencyAttendanceRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.AttendanceDetailsVo;
import ims.emergency.vo.ChartRequestedVo;
import ims.emergency.vo.enums.EmergencyAttendanceEvent;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final String CHART_REQUIRED_BY_TRIAGE 	= "CR01";
	private static final String CHART_REQUESTED_BY_RECEPTION= "CR02";
	private static final String DATE_TIME_REQUESTED 		= "CR03";
	private static final String REASON_NON_REQUESTED 		= "CR04";
	private static final String CHART_RECEIVED 				= "CR05";
	private static final String DATE_TIME_RECEIVED 			= "CR06";
	private static final String COMMENTS 					= "CR07";
	
	public void initialize(EmergencyAttendanceRefVo attendanceDetailsRef, PatientRefVo patientRef, CareContextRefVo careContextRef, EpisodeOfCareRefVo episodeOfCareRef)
	{
		form.getLocalContext().setAttendanceDetailsRef(attendanceDetailsRef);
		form.getLocalContext().setPatientRef(patientRef);
		form.getLocalContext().setEpisodeOfCareRef(episodeOfCareRef);
		form.getLocalContext().setCareContextRef(careContextRef);
	}
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}
	private void updateControlState()
	{
		
		ChartRequestedVo currentChartRequested = (form.getLocalContext().getAttendanceDetailsRefIsNotNull() ? domain.getChartRequestedByEmergencyAttendance(form.getLocalContext().getAttendanceDetailsRef()):null);
		
		AttendanceDetailsVo currentAttendanceDetails = (form.getLocalContext().getAttendanceDetailsRef()!=null ? domain.getAttendanceDetails(form.getLocalContext().getAttendanceDetailsRef()):null);
		
		form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode()) && currentChartRequested==null && (currentAttendanceDetails!=null && currentAttendanceDetails.getDischargeDateTime()==null));
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && currentChartRequested!=null);
		
		
		EDAttendanceControlsConfigVoCollection attendanceControlsConfig = domain.getEDAttendanceControlsConfig(EDAttendenceControlType.CHART_CONTROLS);
		
		for (int i=0;attendanceControlsConfig!=null && i<attendanceControlsConfig.size();i++)
		{
			EDAttendanceControlsConfigVo controlConfig = attendanceControlsConfig.get(i);
			
			if (CHART_REQUIRED_BY_TRIAGE.equals(controlConfig.getControlIMSID()))
			{
				form.lblChartRequiredByTriage().setVisible(controlConfig.getIsVisible());
				
				form.cmbChartRequiredByTriage().setVisible(controlConfig.getIsVisible());
				form.cmbChartRequiredByTriage().setRequired(controlConfig.getIsRequired());
				form.cmbChartRequiredByTriage().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (CHART_REQUESTED_BY_RECEPTION.equals(controlConfig.getControlIMSID()))
			{
				form.lblChartRequestedByReception().setVisible(controlConfig.getIsVisible());
				
				form.cmbChartRequestedByReception().setVisible(controlConfig.getIsVisible());
				form.cmbChartRequestedByReception().setRequired(controlConfig.getIsRequired());
				form.cmbChartRequestedByReception().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
								
			}
			else if (DATE_TIME_REQUESTED.equals(controlConfig.getControlIMSID()))
			{
				form.lblDateTimeRequested().setVisible(controlConfig.getIsVisible());
				
				form.dtimDateTimeRequested().setVisible(controlConfig.getIsVisible());
				form.dtimDateTimeRequested().setRequired(controlConfig.getIsRequired());
				form.dtimDateTimeRequested().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (REASON_NON_REQUESTED.equals(controlConfig.getControlIMSID()))
			{
				form.lblReasonNotRequested().setVisible(controlConfig.getIsVisible());
				
				form.cmbReasonNotRequested().setVisible(controlConfig.getIsVisible());
				form.cmbReasonNotRequested().setRequired(controlConfig.getIsRequired() || YesNo.NO.equals(form.cmbChartRequestedByReception().getValue()));
				form.cmbReasonNotRequested().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (CHART_RECEIVED.equals(controlConfig.getControlIMSID()))
			{
				form.lblChartReceived().setVisible(controlConfig.getIsVisible());
				
				form.cmbChartReceived().setVisible(controlConfig.getIsVisible());
				form.cmbChartReceived().setRequired(controlConfig.getIsRequired());
				form.cmbChartReceived().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (DATE_TIME_RECEIVED.equals(controlConfig.getControlIMSID()))
			{
				form.lblDateTimeReceived().setVisible(controlConfig.getIsVisible());
				
				form.dtimDateTimeReceived().setVisible(controlConfig.getIsVisible());
				form.dtimDateTimeReceived().setRequired(controlConfig.getIsRequired());
				form.dtimDateTimeReceived().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (COMMENTS.equals(controlConfig.getControlIMSID()))
			{
				form.lblComments().setVisible(controlConfig.getIsVisible());
				
				form.txtComments().setVisible(controlConfig.getIsVisible());
				form.txtComments().setRequired(controlConfig.getIsRequired());
				form.txtComments().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
		}
		
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.NEW);
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getcurrentChartRequestedIsNotNull())
		{
			form.getLocalContext().setcurrentChartRequested(domain.getChartRequested(form.getLocalContext().getcurrentChartRequested()));
			populateScreenFromData(form.getLocalContext().getcurrentChartRequested());
		}
		
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.EDIT);
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.SAVE);
			form.fireCustomControlValueChanged();
		}
	}
	private boolean save()
	{
		//WDEV-17160
		AttendanceDetailsVo currentAttendanceDetails = (form.getLocalContext().getAttendanceDetailsRef()!=null ? domain.getAttendanceDetails(form.getLocalContext().getAttendanceDetailsRef()):null);
		if (currentAttendanceDetails!=null && currentAttendanceDetails.getDischargeDateTimeIsNotNull())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}
	
		ChartRequestedVo chartRequestedToSave = populateDataFromScreen(form.getLocalContext().getcurrentChartRequested());

		String[] errors = chartRequestedToSave.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		//WDEV-17160
		ChartRequestedVo currentChartRequested = (form.getLocalContext().getAttendanceDetailsRef()!=null ? domain.getChartRequestedByEmergencyAttendance(form.getLocalContext().getAttendanceDetailsRef()):null);
		
		if (chartRequestedToSave.getID_ChartRequested()==null && currentChartRequested!=null)//WDEV-17160
		{
			engine.showMessage("A Chart Request already exists for the selected Emergency Attendance !");
			form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}
		
		try
		{
			form.getLocalContext().setcurrentChartRequested(domain.save(chartRequestedToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}

		return true;
	}
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.cmbChartRequiredByTriage().isRequired() && form.cmbChartRequiredByTriage().getVisible() && form.cmbChartRequiredByTriage().isEnabled() && form.cmbChartRequiredByTriage().getValue()==null)
		{
			errors.add("Chart Required By Triage is mandatory!");
		}
		
		if (form.cmbChartRequestedByReception().isRequired() && form.cmbChartRequestedByReception().getVisible() && form.cmbChartRequestedByReception().isEnabled() && form.cmbChartRequestedByReception().getValue()==null)
		{
			errors.add("Chart Requested By Reception is mandatory!");
		}
		
		if (form.dtimDateTimeRequested().isRequired() && form.dtimDateTimeRequested().isVisible() && form.dtimDateTimeRequested().isEnabled() && form.dtimDateTimeRequested().getValue()==null)
		{
			errors.add("Date Time Requested is mandatory!");
		}
		
		if( form.dtimDateTimeRequested().getValue() != null && form.dtimDateTimeRequested().getValue().isGreaterThan(new DateTime()))
		{	
				errors.add("Date Time Requested cannot be set in the future!");
		}
			
		if (form.cmbReasonNotRequested().isRequired() && form.cmbReasonNotRequested().getVisible() && form.cmbReasonNotRequested().isEnabled() && form.cmbReasonNotRequested().getValue()==null)
		{
			errors.add("Reason Not Requested is mandatory!");
		}
		
		if (form.cmbChartReceived().isRequired() && form.cmbChartReceived().getVisible() && form.cmbChartReceived().isEnabled() && form.cmbChartReceived().getValue()==null)
		{
			errors.add("Chart Received is mandatory!");
		}
		
		if (form.dtimDateTimeReceived().isRequired() && form.dtimDateTimeReceived().isVisible() && form.dtimDateTimeReceived().isEnabled() && form.dtimDateTimeReceived().getValue()==null)
		{
			errors.add("Date Time Received is mandatory!");
		}
		
		if( form.dtimDateTimeReceived().getValue() != null)
		{
			if (form.dtimDateTimeReceived().getValue().isGreaterThan(new DateTime()))
			{
				errors.add("Date Time Received cannot be set in the future!");
			}
			
			else if (form.dtimDateTimeRequested().getValue() != null  && (form.dtimDateTimeRequested().getValue().getDate().isGreaterThan(form.dtimDateTimeReceived().getValue().getDate()) || (form.dtimDateTimeRequested().getValue().getDate().equals(form.dtimDateTimeReceived().getValue().getDate()) && form.dtimDateTimeRequested().getValue().getTime().isGreaterThan(form.dtimDateTimeReceived().getValue().getTime()))))
			{
				errors.add("Date Time Received cannot be less than Date Time Requested !");
			}
		}
		
		if (form.txtComments().isRequired() && form.txtComments().isVisible() && form.txtComments().isEnabled()  && form.txtComments().getValue()==null)
		{
			errors.add("Comments is mandatory!");
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	private ChartRequestedVo populateDataFromScreen(ChartRequestedVo chartRequested)
	{
		if (chartRequested==null)
			chartRequested=new ChartRequestedVo();
		else
			chartRequested=(ChartRequestedVo) chartRequested.clone();
		
		chartRequested.setEmergencyAttendence(form.getLocalContext().getAttendanceDetailsRef());
		chartRequested.setPatient(form.getLocalContext().getPatientRef());
		chartRequested.setEpisode(form.getLocalContext().getEpisodeOfCareRef());
		chartRequested.setAttendance(form.getLocalContext().getCareContextRef());
		
		chartRequested.setChartRequiredbyTriage(form.cmbChartRequiredByTriage().getValue());
		chartRequested.setRequestedbyReception(form.cmbChartRequestedByReception().getValue());
		chartRequested.setDateTimeRequested(form.dtimDateTimeRequested().getValue());
		chartRequested.setReasonnotrequested(form.cmbReasonNotRequested().getValue());
		chartRequested.setChartReceived(form.cmbChartReceived().getValue());
		chartRequested.setDateTimeReceived(form.dtimDateTimeReceived().getValue());
		chartRequested.setComment(form.txtComments().getValue());
		
		return chartRequested;
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.CANCEL);
		form.fireCustomControlValueChanged();
	}

	public void setValue(ChartRequestedVo chartRequested)
	{
		form.getLocalContext().setcurrentChartRequested(chartRequested);
		populateScreenFromData(form.getLocalContext().getcurrentChartRequested());
	}

	private void populateScreenFromData(ChartRequestedVo chartRequestedVo)
	{
		clearScreen();
		if (chartRequestedVo==null)
			return;
		
		form.cmbChartRequiredByTriage().setValue(chartRequestedVo.getChartRequiredbyTriage());
		form.cmbChartRequestedByReception().setValue(chartRequestedVo.getRequestedbyReception());
		form.dtimDateTimeRequested().setValue(chartRequestedVo.getDateTimeRequested());
		form.cmbReasonNotRequested().setValue(chartRequestedVo.getReasonnotrequested());
		form.cmbChartReceived().setValue(chartRequestedVo.getChartReceived());
		form.dtimDateTimeReceived().setValue(chartRequestedVo.getDateTimeReceived());
		form.txtComments().setValue(chartRequestedVo.getComment());
		
	}
	private void clearScreen()
	{
		form.cmbChartRequiredByTriage().setValue(null);
		form.cmbChartRequestedByReception().setValue(null);
		form.dtimDateTimeRequested().setValue(null);
		form.cmbReasonNotRequested().setValue(null);
		form.cmbChartReceived().setValue(null);
		form.dtimDateTimeReceived().setValue(null);
		form.txtComments().setValue(null);
	}
	public ims.emergency.vo.enums.EmergencyAttendanceEvent getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}

	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

	@Override
	protected void onCmbChartReceivedValueChanged() throws PresentationLogicException
	{
		if (YesNo.YES.equals(form.cmbChartReceived().getValue()))
			form.dtimDateTimeReceived().setValue(new DateTime());
	}

	@Override
	protected void onCmbChartRequestedByReceptionValueChanged() throws PresentationLogicException
	{
		if (YesNo.YES.equals(form.cmbChartRequestedByReception().getValue()))
				form.dtimDateTimeRequested().setValue(new DateTime());
		updateControlState();
	}
	
	
}
