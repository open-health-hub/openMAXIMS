//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ancuta Ciubotaru using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edworkloadsummary;


import ims.emergency.forms.edworkloadsummary.GenForm.grdCurrentEmergDeptRow;
import ims.emergency.vo.MosLiteEDVoCollection;
import ims.emergency.vo.TrackingAreaVoCollection;
import ims.emergency.vo.lookups.TriagePriority;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;



public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final Integer COL_STATUS = new Integer(1);
	private static final Integer COL_OVERALL = new Integer(2);
	private static final Integer COL_AREA = new Integer(3);
	private static final Integer refresh_rate=ims.configuration.gen.ConfigFlag.UI.ED_WORKLOAD_SUMMARY_AUTO_REFRESH_TIME_MINUTES.getValue()*60;
	
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
		initialize();
		open();		
	}

	private void initialize() {
		
		initializeTimer();
	}

	private void initializeTimer()
	{
		form.getTimers().gettimerEDWSum().setEnabled(true);
		ILocation currentLocation = engine.getCurrentLocation();
		if(currentLocation == null)
			return;
		
		form.getTimers().gettimerEDWSum().setInterval(refresh_rate);
	}

	private void open() 
	{					
		populateAreasGrid();
		populateMOSGrid();
	}

	private void populateMOSGrid() {
		// TODO Auto-generated method stub		
		form.grdCurrentEmergDept().getRows().clear();
		ILocation currentLocation=domain.getCurrentLocation();
		populateMedics(currentLocation);
		populateNurses(currentLocation);
	}
	
	private void populateMedics(ILocation currentLocation) 
	{
		MosLiteEDVoCollection medics=domain.getMedics(currentLocation);
		for(int i=0;i<medics.size();i++)
		{
			grdCurrentEmergDeptRow row=form.grdCurrentEmergDept().getRows().newRow();
			String str="";
			if(medics.get(i).getName().getTitleIsNotNull())
			{
				str=str+medics.get(i).getName().getTitle().toString();
			}
			if(medics.get(i).getName().getSurnameIsNotNull())
			{
				str=str+" "+medics.get(i).getName().getSurname().toString();
			}
			if(medics.get(i).getName().getForenameIsNotNull()) //WDEV-15947
			{
				str=str+" "+medics.get(i).getName().getForename().toString();
			}
				
			row.setMemberOfStaff(str);			
			row.setMedicImage(form.getImages().Emergency.DoctorEnabled16);
			
			String val=domain.getCurrentlyAllocatedCountsMedics(currentLocation, medics.get(i));
			row.setCurrentlyAllocatedTotal(val.equals("0")?"-":val);
			
			val=domain.getMedicsToBeSeenCounts(currentLocation, medics.get(i));
			row.setTobeSeen(val.equals("0")?"-":val);
			
			val=domain.getMedicsSeenCounts(currentLocation, medics.get(i));
			row.setSeen(val.equals("0")?"-":val);
			
			val=domain.getAwaitingCompletionCounts(currentLocation, medics.get(i));
			row.setAwaitingCompletion(val.equals("0")?"-":val);
		}
		
	}
	private void populateNurses(ILocation currentLocation) 
	{
		// TODO Auto-generated method stub
		MosLiteEDVoCollection nurses=domain.getNurses(currentLocation);
		for(int i=0;i<nurses.size();i++)
		{
			grdCurrentEmergDeptRow row=form.grdCurrentEmergDept().getRows().newRow();
			String str="";
			if(nurses.get(i).getName().getTitleIsNotNull())
			{
				str=str+nurses.get(i).getName().getTitle().toString();
			}
			if(nurses.get(i).getName().getSurnameIsNotNull())
			{
				str=str+" "+nurses.get(i).getName().getSurname().toString();
			}
			if(nurses.get(i).getName().getSurnameIsNotNull())
			{
				str=str+" "+nurses.get(i).getName().getForename().toString();
			}
				
			row.setMemberOfStaff(str);
			row.setMedicImage(form.getImages().Emergency.NurseEnabled16);
			
			String val=domain.getCurrentlyAllocatedNursesCounts(currentLocation, nurses.get(i));
			row.setCurrentlyAllocatedTotal(val.equals("0")?"-":val);
			
			val=domain.getNursesToBeSeenCounts(currentLocation, nurses.get(i));
			row.setTobeSeen(val.equals("0")?"-":val);
			
			val=domain.getNursesSeenCounts(currentLocation, nurses.get(i));
			row.setSeen(val.equals("0")?"-":val);
			
			val=domain.getNursesAwaitingCompletionCounts(currentLocation, nurses.get(i));
			row.setAwaitingCompletion(val.equals("0")?"-":val);
		}
	}
	
	private void populateAreasGrid() {
		// TODO Auto-generated method stub
				
		form.dyngrdAreas().clear();
		
		form.dyngrdAreas().setSelectable(false);
		form.dyngrdAreas().setReadOnly(false);
		
		DynamicGridColumn column = form.dyngrdAreas().getColumns().newColumn("Status");
		column.setIdentifier(COL_STATUS);
		column.setWidth(160);
		column.setBackColor(Color.LightSteelBlue);
		
		
		ILocation currentLocation=domain.getCurrentLocation();
		TrackingAreaVoCollection areas=domain.getAreas(currentLocation);
		
		for(int i=0;i< areas.size();i++)
		{
			column = form.dyngrdAreas().getColumns().newColumn(areas.get(i).getAreaDisplayName());
			column.setIdentifier(COL_AREA+areas.get(i).getID_TrackingArea());
			column.setWidth(135);
			//System.out.println(areas.get(i).getID_TrackingArea() + " - "+ areas.get(i).getAreaDisplayName());
		}
				
		column = form.dyngrdAreas().getColumns().newColumn("Overall");
		column.setIdentifier(COL_OVERALL);
		column.setWidth(90);
		column.setBackColor(Color.LightSeaGreen);
		
		populateAreasRows(areas,currentLocation);
	}

	private void ListAwaitingTriageCounts(TrackingAreaVoCollection areas, ILocation currentLocation)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();		
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(140);
		cell.setValue("Awaiting Triage");
		cell.setBackColor(Color.fromRGB(198, 223, 242));
		
		int overall_sum=0;
		for(int i=0;i< areas.size();i++)
		{
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);
			String val=domain.getAwaitingTriageCounts(currentLocation, areas.get(i));								
			if(val!=null)
			{
				if(!val.equals("0")&& !val.equals(""))
				{
					cell.setValue(val);
					overall_sum=overall_sum+Integer.valueOf(val).intValue();					
				}	
				else
				{
					cell.setValue("-");
				}
			}
			else
			{
				cell.setValue("-");
			}
		}
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);
		cell.setValue("<b>"+(overall_sum>0?String.valueOf(overall_sum):"-")+"<b>");
		cell.setBackColor(Color.Bisque);
	}
	private void ListPrioritiesCounts(ILocation currentLocation,TrackingAreaVoCollection areas, String priority, TriagePriority lookup_inst_id)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(150);
		cell.setValue(priority);
		cell.setBackColor(Color.fromRGB(198, 223, 242));
		
		int overall_sum=0;
		for(int i=0;i< areas.size();i++)
		{
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);
			String val=domain.getPriorityXCounts(currentLocation, areas.get(i),lookup_inst_id);
			if(val!=null)
			{
				if(!val.equals("0")&& !val.equals(""))
				{
					cell.setValue(val);
					overall_sum=overall_sum+Integer.valueOf(val).intValue();					
				}	
				else
				{
					cell.setValue("-");
				}
			}
			else
			{
				cell.setValue("-");
			}
		}
				
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);
		cell.setValue("<b>"+(overall_sum>0?String.valueOf(overall_sum):"-")+"<b>");
		cell.setBackColor(Color.Bisque);
	}
	private void ListUnallocated(ILocation currentLocation,TrackingAreaVoCollection areas)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(150);
		cell.setValue("Unallocated");
		cell.setBackColor(Color.fromRGB(198, 223, 242));
		
		int overall_sum=0;
		for(int i=0;i< areas.size();i++)
		{
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);
			String val=domain.getUnallocated(currentLocation, areas.get(i));
			if(val!=null)
			{
				if(!val.equals("0")&& !val.equals(""))
				{
					cell.setValue(val);
					overall_sum=overall_sum+Integer.valueOf(val).intValue();					
				}	
				else
				{
					cell.setValue("-");
				}
			}
			else
			{
				cell.setValue("-");
			}
		}
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);
		cell.setValue("<b>"+(overall_sum>0?String.valueOf(overall_sum):"-")+"<b>");
		cell.setBackColor(Color.Bisque);
	}
	
	private void ListAllocated(ILocation currentLocation,TrackingAreaVoCollection areas)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(150);
		cell.setValue("Allocated");
		cell.setBackColor(Color.fromRGB(198, 223, 242));
		
		int overall_sum=0;
		for(int i=0;i< areas.size();i++)
		{			
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);
			String val=domain.getAllocated(currentLocation, areas.get(i));
			if(val!=null)
			{
				if(!val.equals("0")&& !val.equals(""))
				{
					cell.setValue(val);
					overall_sum=overall_sum+Integer.valueOf(val).intValue();					
				}	
				else
				{
					cell.setValue("-");
				}
			}
			else
			{
				cell.setValue("-");
			}
		}
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);
		cell.setValue("<b>"+(overall_sum>0?String.valueOf(overall_sum):"-")+"<b>");
		cell.setBackColor(Color.Bisque);
	}
	private void ListReferredToSpecialty(ILocation currentLocation,TrackingAreaVoCollection areas)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(150);
		cell.setValue("Referred to Specialty");
		cell.setBackColor(Color.fromRGB(198, 223, 242));
		
		int overall_sum=0;
		for(int i=0;i< areas.size();i++)
		{			
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);
			String val=domain.getReferredToSpecialty(currentLocation, areas.get(i));
			if(val!=null)
			{
				if(!val.equals("0")&& !val.equals(""))
				{
					cell.setValue(val);
					overall_sum=overall_sum+Integer.valueOf(val).intValue();					
				}	
				else
				{
					cell.setValue("-");
				}
			}
			else
			{
				cell.setValue("-");
			}
		}
		
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);
		cell.setValue("<b>"+(overall_sum>0?String.valueOf(overall_sum):"-")+"<b>");		
		cell.setBackColor(Color.Bisque);
		
		
	}
	private void ListTotalPatientsOnArea(ILocation currentLocation,TrackingAreaVoCollection areas)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(150);
		cell.setValue("<b>Total No. of Patients<b>");
		cell.setBackColor(Color.LightSteelBlue);
		

		int overall_sum=0;
		for(int i=0;i< areas.size();i++)
		{			
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);
			cell.setBackColor(Color.LightSteelBlue);
			String val=domain.totalPatientsOnArea(currentLocation, areas.get(i));
			if(val!=null)
			{
				if(!val.equals("0")&& !val.equals(""))
				{
					cell.setValue("<b>"+val+"<b>");
					overall_sum=overall_sum+Integer.valueOf(val).intValue();					
				}	
				else
				{
					cell.setValue("-");
				}
			}
			else
			{
				cell.setValue("-");
			}
		}
		
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);
		cell.setValue("<b>" + (overall_sum>0?String.valueOf(overall_sum):"-") + "</b>");
		cell.setBackColor(Color.LightSteelBlue);
		
	
	}
	private void ListAwaitingClinicalImagingResult(ILocation currentLocation,TrackingAreaVoCollection areas)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(200);
		cell.setValue("Awaiting Clinical Imaging Result");
		cell.setBackColor(Color.fromRGB(198, 223, 242));				
		
		for(int i=0;i< areas.size();i++)
		{			
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);
			//String val="";
			cell.setValue("-");
			//cell.setBackColor(Color.LightSteelBlue);			
		}
		
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);
		cell.setValue("<b>-</B>");
		cell.setBackColor(Color.Bisque);
	}
	private void ListAwaitingPathologyResult(ILocation currentLocation,TrackingAreaVoCollection areas)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(150);
		cell.setValue("Awaiting Pathology Result");
		cell.setBackColor(Color.fromRGB(198, 223, 242));

		for(int i=0;i< areas.size();i++)
		{			
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);
			//String val="";
			cell.setValue("-");
			//cell.setBackColor(Color.LightSteelBlue);			
		}
		
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);
		cell.setValue("<b>-</B>");
		cell.setBackColor(Color.Bisque);
	}
	private void List15MinLOSBreached(ILocation currentLocation,TrackingAreaVoCollection areas)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(150);
		cell.setValue("<15mins to LOS Breach");
		cell.setBackColor(Color.fromRGB(198, 223, 242));

		int overall_sum=0;
		for(int i=0;i< areas.size();i++)
		{			
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);		
			String val=domain.get15MinLOS(currentLocation, areas.get(i));
			if(val!=null)
			{
				if(!val.equals("0")&& !val.equals(""))
				{
					cell.setValue(val);
					overall_sum=overall_sum+Integer.valueOf(val).intValue();					
				}	
				else
				{
					cell.setValue("-");
				}
			}
			else
			{
				cell.setValue("-");
			}		
		}
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);
		cell.setValue("<b>"+(overall_sum>0?String.valueOf(overall_sum):"-")+"<b>");
		cell.setBackColor(Color.Bisque);
	}
	private void ListLOSBreached(ILocation currentLocation,TrackingAreaVoCollection areas)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(150);
		cell.setValue("LOS Breached");
		cell.setBackColor(Color.fromRGB(198, 223, 242));

		int overall_sum=0;
		for(int i=0;i< areas.size();i++)
		{			
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);
			String val=domain.getLOSBreached(currentLocation, areas.get(i));
			if(val!=null)
			{
				if(!val.equals("0")&& !val.equals(""))
				{
					cell.setValue(val);
					overall_sum=overall_sum+Integer.valueOf(val).intValue();					
				}	
				else
				{
					cell.setValue("-");
				}
			}
			else
			{
				cell.setValue("-");
			}
		}
		
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);
		cell.setValue("<b>"+(overall_sum>0?String.valueOf(overall_sum):"-")+"<b>");
		cell.setBackColor(Color.Bisque);
	}
	private void ListAverageLengthOfStay(ILocation currentLocation,TrackingAreaVoCollection areas)
	{
		DynamicGridRow row = form.dyngrdAreas().getRows().newRow();
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setWidth(150);
		cell.setValue("Average Length of Stay");
		cell.setBackColor(Color.fromRGB(198, 223, 242));

		int overall_sum=0;
		for(int i=0;i< areas.size();i++)
		{			
			cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_AREA+areas.get(i).getID_TrackingArea()), DynamicCellType.STRING);
			cell.setWidth(150);
			String val=domain.getAverageLengthOfStay(currentLocation, areas.get(i));
			if(val!=null)
			{
				String time_val=get_h_m_s(val);
				if(!time_val.equals("0"))
				{
					cell.setValue(time_val);
					overall_sum=overall_sum+Integer.valueOf(val).intValue();					
				}	
				else
				{
					cell.setValue("-");
				}
			}
			else
			{
				cell.setValue("-");
			}
					
		}
		
		cell = row.getCells().newCell(form.dyngrdAreas().getColumns().getByIdentifier(COL_OVERALL), DynamicCellType.HTMLVIEW);
		cell.setWidth(90);		
		cell.setValue("<b>"+(overall_sum>0?get_h_m_s(String.valueOf(overall_sum)):"-")+"<b>");
		//cell.setValue("-");
		cell.setBackColor(Color.Bisque);
	}
	private String get_h_m_s(String val) 
	{
		String ret="";
		
		if(val==null)
			return "0";
		if(val.equals("0")||val.equals(""))
			return "0";
		
		int seconds=Integer.valueOf(val).intValue();
		
		int min_temp=(int)Math.floor(seconds/60);
		int sec=seconds%60;
		int h=(int)Math.floor(min_temp/60);
		int minOk=min_temp%60;
		
		if(h>0)
			ret=ret+String.valueOf(h)+"hr ";
		if(minOk>0)
			ret=ret+ String.valueOf(minOk)+"m ";
		if(sec>0)
			ret=ret+String.valueOf(sec)+"s";
		
		return ret;
	}

	private void populateAreasRows(TrackingAreaVoCollection areas, ILocation currentLocation) {
		// TODO Auto-generated method stub
					
		ListAwaitingTriageCounts(areas,currentLocation);
		ListPrioritiesCounts(currentLocation,areas, "Priority 1", ims.emergency.vo.lookups.TriagePriority.PRIORITY1);
		ListPrioritiesCounts(currentLocation,areas, "Priority 2",ims.emergency.vo.lookups.TriagePriority.PRIORITY2);
		ListPrioritiesCounts(currentLocation,areas, "Priority 3",ims.emergency.vo.lookups.TriagePriority.PRIORITY3);
		ListPrioritiesCounts(currentLocation,areas, "Priority 4",ims.emergency.vo.lookups.TriagePriority.PRIORITY4);	
		ListPrioritiesCounts(currentLocation,areas, "Priority 5",ims.emergency.vo.lookups.TriagePriority.PRIORITY5);
		ListUnallocated(currentLocation,areas);
		ListAllocated(currentLocation,areas);
		ListReferredToSpecialty(currentLocation,areas);
		ListAwaitingClinicalImagingResult(currentLocation,areas);
		ListAwaitingPathologyResult(currentLocation,areas);
		List15MinLOSBreached(currentLocation,areas);
		ListLOSBreached(currentLocation,areas);
		ListAverageLengthOfStay(currentLocation,areas);
		ListTotalPatientsOnArea(currentLocation,areas);
		
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException 
	{
		if(timer.getInterval()==refresh_rate.intValue())
		{
			populateAreasGrid();
			populateMOSGrid();
		}
		
	}

	@Override
	protected void onBtnStopRefreshClick() throws PresentationLogicException 
	{
		form.getTimers().gettimerEDWSum().setEnabled(false);
		form.btnStopRefresh().setEnabled(false);
		form.btnAutoRefresh().setEnabled(true);
		
	}

	@Override
	protected void onBtnAutoRefreshClick() throws PresentationLogicException 
	{
		form.getTimers().gettimerEDWSum().setEnabled(true);
		form.btnStopRefresh().setEnabled(true);
		form.btnAutoRefresh().setEnabled(false);		
	}
}
