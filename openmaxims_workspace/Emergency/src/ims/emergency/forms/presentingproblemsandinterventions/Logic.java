//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.62 build 2971.25997)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.emergency.forms.presentingproblemsandinterventions;

import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ProblemListVo;
import ims.clinical.vo.ProblemListVoCollection;
import ims.clinical.vo.ProcedureListVo;
import ims.clinical.vo.ProcedureListVoCollection;
import ims.clinicaladmin.vo.PMHChecklistConfigVoCollection;
import ims.clinicaladmin.vo.PresProblemChecklistConfigVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientProblemVo;
import ims.core.vo.PatientProblemVoCollection;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.PatientProcedureVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.presentingproblemsandinterventions.GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow;
import ims.emergency.forms.presentingproblemsandinterventions.GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow;
import ims.emergency.vo.EmergencyPatientPresentingProblemsVo;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyr().tabPresentingProblems().setHeaderVisible(true);
		form.lyr().tabInterventions().setHeaderVisible(true);
		
		open();
	}
	@Override
	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(false);
		}
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.customControlAuthoringInfo().initializeComponent();
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);

		form.setMode(FormMode.EDIT);
		form.setcustomControlAuthoringInfoEnabled(true);
		
		displayRecords(false);
	}
	@Override
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
		
		form.setMode(FormMode.EDIT);
		form.setcustomControlAuthoringInfoEnabled(false);
		
		displayRecords(false);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
	}

	private void open()
	{
		form.setMode(FormMode.VIEW);
	
		clearScreen();
		
		displayRecords(true);
	}
	private void displayRecords(boolean forView)
	{
		PatientProblemVoCollection list = null;
		PatientProcedureVoCollection listProc = null;
		
		form.lyr().tabPresentingProblems().grdProblems().getRows().clear();
		
		EmergencyPatientPresentingProblemsVo headerRecord = domain.getEmergencyPresentingProblems(form.getGlobalContext().Core.getCurrentCareContext());
		
		form.getLocalContext().setSelectedInstance(headerRecord);
		
		if(headerRecord != null)
		{
			list = headerRecord.getPresentingProblems();
			listProc = headerRecord.getProceduresPerformed();
			
			form.lyr().tabPresentingProblems().txtHistory().setValue(headerRecord.getHistoryPresentingProblem());
			form.customControlAuthoringInfo().setValue(headerRecord.getAuthoringInformation());
		}
		else
		{
			list = new PatientProblemVoCollection();
			listProc = new PatientProcedureVoCollection();
		}
		
		if(forView)
		{
			if(list == null || list.size() == 0)
			{
				form.btnNew().setVisible(true);
				form.btnUpdate().setVisible(false);
			}
			else
			{
				form.btnNew().setVisible(false);
				form.btnUpdate().setVisible(true);
			}
		}
		
		displayProblemsForDataEntry(forView, list, listProc);
	}
	
	private void clearScreen()
	{
		form.customControlAuthoringInfo().setValue(null);
		form.lyr().tabPresentingProblems().txtHistory().setValue("");
		form.lyr().tabPresentingProblems().grdProblems().getRows().clear();
	}
	private void displayProblemsForDataEntry(boolean forView, PatientProblemVoCollection list, PatientProcedureVoCollection listProc)
	{
		//problems
		form.lyr().tabPresentingProblems().grdProblems().getRows().clear();
		
		PresProblemChecklistConfigVoCollection coll = domain.listPresentingProblems();
		
		for (int i = 0; i < coll.size(); i++)
		{
			grdProblemsRow row = null;
			
			if(forView)
			{
				if(anyProblemsForThisSpecialty(coll.get(i).getSpecialty(), list))
				{
					row = form.lyr().tabPresentingProblems().grdProblems().getRows().newRow();
				}
			}
			else
			{
				row = form.lyr().tabPresentingProblems().grdProblems().getRows().newRow();
			}

			if(row != null)
			{
				row.setcolSpecialty(coll.get(i).getSpecialty().getText());
				row.setSelectedImage(form.getImages().Emergency.GreenBall);
				row.setExpandedImage(form.getImages().Emergency.GreenBall);
				
				row.setValue(coll.get(i).getSpecialty());
				
				ProblemListVoCollection ppColl = coll.get(i).getPresentingProblems().sort(coll.get(i).getPresentingProblems().getPCNameComparator());
				
				for (int j = 0; j < ppColl.size(); j++)
				{
					ProblemListVo problem = ppColl.get(j);
					
					PatientProblemVo patientProblem = getInstantiatedProblem(problem, coll.get(i).getSpecialty(), list);
					
					if(forView)
					{
						if(patientProblem != null)
						{
							grdProblemsRow childRow = row.getRows().newRow();
							
							childRow.setcolSpecialty(problem.getPresentingProblem().getPCName());
							childRow.setcolOnset(patientProblem.getOnset());
							childRow.setcolNotes(patientProblem.getProblemNote());
							
							childRow.setcolOnsetReadOnly(true);
							childRow.setcolNotesReadOnly(true);
							childRow.setcolSelect(true);
							
							childRow.setValue(problem.getPresentingProblem());
						}
					}
					else
					{
						grdProblemsRow childRow = row.getRows().newRow();
						childRow.setcolSpecialty(problem.getPresentingProblem().getPCName());

						if(patientProblem != null)
						{
							childRow.setcolOnset(patientProblem.getOnset());
							childRow.setcolNotes(patientProblem.getProblemNote());
							childRow.setcolSelect(true);
						}
						
						childRow.setcolOnsetReadOnly(false);
						childRow.setcolNotesReadOnly(false);
						
						childRow.setValue(problem.getPresentingProblem());
					}
				}
				
				row.setExpanded(true);
				row.setBold(true);
			}
		}
		
		//procedures
		form.lyr().tabInterventions().grdProcedures().getRows().clear();
		
		PMHChecklistConfigVoCollection collProc = domain.listConfiguredProcedures();
		
		for (int i = 0; i < collProc.size(); i++)
		{
			grdProceduresRow row = null;
			
			if(forView)
			{
				if(anyProceduresForThisSpecialty(collProc.get(i).getSpecialty(), listProc))
				{
					row = form.lyr().tabInterventions().grdProcedures().getRows().newRow();
				}
			}
			else
			{
				row = form.lyr().tabInterventions().grdProcedures().getRows().newRow();
			}

			if(row != null)
			{
				row.setcolSpecialty(collProc.get(i).getSpecialty().getText());
				row.setSelectedImage(form.getImages().Emergency.GreenBall);
				row.setExpandedImage(form.getImages().Emergency.GreenBall);
				
				row.setValue(collProc.get(i).getSpecialty());
				
				ProcedureListVoCollection ppColl = collProc.get(i).getProcedureList().sort(collProc.get(i).getProcedureList().getProcNameComparator());
				
				for (int j = 0; j < ppColl.size(); j++)
				{
					ProcedureListVo procedure = ppColl.get(j);
					
					PatientProcedureVo patientProcedure = getInstantiatedProcedure(procedure, collProc.get(i).getSpecialty(), listProc);
					
					if(forView)
					{
						if(patientProcedure != null)
						{
							grdProceduresRow childRow = row.getRows().newRow();
							
							childRow.setcolSpecialty(procedure.getProcedure().getProcedureName());
							childRow.setcolOnset(patientProcedure.getProcDate());
							childRow.setcolNotes(patientProcedure.getNotes());
							
							childRow.setcolOnsetReadOnly(true);
							childRow.setcolNotesReadOnly(true);
							childRow.setcolSelect(true);
							
							childRow.setValue(procedure.getProcedure());
						}
					}
					else
					{
						grdProceduresRow childRow = row.getRows().newRow();
						childRow.setcolSpecialty(procedure.getProcedure().getProcedureName());

						if(patientProcedure != null)
						{
							childRow.setcolOnset(patientProcedure.getProcDate());
							childRow.setcolNotes(patientProcedure.getNotes());
							childRow.setcolSelect(true);
						}
						
						childRow.setcolOnsetReadOnly(false);
						childRow.setcolNotesReadOnly(false);
						
						childRow.setValue(procedure.getProcedure());
					}
				}
				
				row.setExpanded(true);
				row.setBold(true);
			}
		}
		
	}
	
	private PatientProcedureVo getInstantiatedProcedure(ProcedureListVo procedure, Specialty specialty, PatientProcedureVoCollection list)
	{
		if(list == null)
			return null;
		
		for (int i = 0; i < list.size(); i++)
		{
			if(list.get(i).getSpecialtyIsNotNull() && list.get(i).getSpecialty().equals(specialty) && list.get(i).getProcedureIsNotNull() && list.get(i).getProcedure().getID_Procedure().equals(procedure.getProcedure().getID_Procedure()))
				return list.get(i);
		}

		return null;
	}
	private boolean anyProceduresForThisSpecialty(Specialty specialty, PatientProcedureVoCollection list)
	{
		if(list == null)
			return false;
		
		for (int i = 0; i < list.size(); i++)
		{
			if(list.get(i).getSpecialtyIsNotNull() && list.get(i).getSpecialty().equals(specialty))
				return true;
		}
		
		return false;
	}
	private PatientProblemVo getInstantiatedProblem(ProblemListVo problem, Specialty specialty, PatientProblemVoCollection list)
	{
		if(list == null)
			return null;
		
		for (int i = 0; i < list.size(); i++)
		{
			if(list.get(i).getSpecialtyIsNotNull() && list.get(i).getSpecialty().equals(specialty) && list.get(i).getProblemIsNotNull() && list.get(i).getProblem().getID_ClinicalProblem().equals(problem.getPresentingProblem().getID_ClinicalProblem()))
				return list.get(i);
		}

		return null;
	}
	
	private boolean anyProblemsForThisSpecialty(Specialty specialty, PatientProblemVoCollection list)
	{
		if(list == null)
			return false;
		
		for (int i = 0; i < list.size(); i++)
		{
			if(list.get(i).getSpecialtyIsNotNull() && list.get(i).getSpecialty().equals(specialty))
				return true;
		}
		
		return false;
	}

	private void populateDataFromScreen(EmergencyPatientPresentingProblemsVo header)
	{
		int index;
		
		if(header == null)
			return;
		
		PatientProblemVoCollection orphanProblems = new PatientProblemVoCollection();
		PatientProcedureVoCollection orphanProcedures = new PatientProcedureVoCollection();
		
		if(header.getAuthoringInformation() == null)
			header.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		
		header.setHistoryPresentingProblem(form.lyr().tabPresentingProblems().txtHistory().getValue());
		header.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if(header.getPresentingProblems() == null)
			header.setPresentingProblems(new PatientProblemVoCollection());
		if(header.getProceduresPerformed() == null)
			header.setProceduresPerformed(new PatientProcedureVoCollection());
		
		//problems
		for (int i = 0; i < form.lyr().tabPresentingProblems().grdProblems().getRows().size(); i++)
		{
			grdProblemsRow row = form.lyr().tabPresentingProblems().grdProblems().getRows().get(i);
			
			for (int j = 0; j < row.getRows().size(); j++)
			{
				grdProblemsRow childRow = row.getRows().get(j);
				
				index = getProblemIndex((ClinicalProblemShortVo)childRow.getValue(), (Specialty)row.getValue(), header.getPresentingProblems());
				
				if(index == -1)
				{
					if(childRow.getcolSelect())
					{
						PatientProblemVo item = new PatientProblemVo();
						
						populateItemFromRow(item, childRow);
						header.getPresentingProblems().add(item);
					}
				}
				else
				{
					if(childRow.getcolSelect() == false)
					{
						//we have to delete the collection item
						orphanProblems.add(header.getPresentingProblems().get(index));
						header.getPresentingProblems().remove(index);
					}
					else
					{
						populateItemFromRow(header.getPresentingProblems().get(index), childRow);
					}
				}
			}
		}
		
		header.setOrphanProblems(orphanProblems);
		
		//procedures
		for (int i = 0; i < form.lyr().tabInterventions().grdProcedures().getRows().size(); i++)
		{
			grdProceduresRow row = form.lyr().tabInterventions().grdProcedures().getRows().get(i);
			
			for (int j = 0; j < row.getRows().size(); j++)
			{
				grdProceduresRow childRow = row.getRows().get(j);
				
				index = getProcedureIndex((ProcedureLiteVo)childRow.getValue(), (Specialty)row.getValue(), header.getProceduresPerformed());
				
				if(index == -1)
				{
					if(childRow.getcolSelect())
					{
						PatientProcedureVo item = new PatientProcedureVo();
						
						populateItemFromRow(item, childRow);
						header.getProceduresPerformed().add(item);
					}
				}
				else
				{
					if(childRow.getcolSelect() == false)
					{
						//we have to delete the collection item
						orphanProcedures.add(header.getProceduresPerformed().get(index));
						header.getProceduresPerformed().remove(index);
					}
					else
					{
						populateItemFromRow(header.getProceduresPerformed().get(index), childRow);
					}
				}
			}
		}
		
		header.setOrphanProcedures(orphanProcedures);
		
	}

	private void populateItemFromRow(PatientProcedureVo item, grdProceduresRow childRow)
	{
		if(item == null)
			return;
		
		item.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		item.setProcDate(childRow.getcolOnset());
		item.setProcedure((ProcedureLiteVo) childRow.getValue());
		item.setNotes(childRow.getcolNotes());
		item.setProcedureDescription(childRow.getcolNotes());
		item.setSpecialty((Specialty) childRow.getParentRow().getValue());
		item.setInfoSource(SourceofInformation.CLINICALCONTACT);
		item.setProcedureStatus(PatientProcedureStatus.PERFORMED);
		
		if(item.getAuthoringInformation() == null)
		{
			item.setAuthoringInformation(getAuthoringInfo());
		}
	}
	private int getProcedureIndex(ProcedureLiteVo procedure, Specialty specialty, PatientProcedureVoCollection list)
	{
		if(list == null)
			return -1;
		
		for (int i = 0; i < list.size(); i++)
		{
			if(list.get(i).getSpecialtyIsNotNull() && list.get(i).getSpecialty().equals(specialty) && list.get(i).getProcedureIsNotNull() && list.get(i).getProcedure().getID_Procedure().equals(procedure.getID_Procedure()))
				return i;
		}

		return -1;
	}
	private void populateItemFromRow(PatientProblemVo item, grdProblemsRow childRow)
	{
		if(item == null)
			return;
		
		item.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		item.setIsActive(Boolean.TRUE);
		item.setIsPresentingProblem(Boolean.TRUE);
		item.setOnset(childRow.getcolOnset());
		item.setPatientProblem(((ClinicalProblemShortVo)childRow.getValue()).getPCName());
		item.setProblem((ClinicalProblemShortVo) childRow.getValue());
		item.setProblemNote(childRow.getcolNotes());
		item.setSpecialty((Specialty) childRow.getParentRow().getValue());
		
		if(item.getAuthoringInformation() == null)
		{
			item.setAuthoringInformation(getAuthoringInfo());
		}
	}
	
	private AuthoringInformationVo getAuthoringInfo()
	{
		AuthoringInformationVo auth = new AuthoringInformationVo();
		
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			auth.setAuthoringDateTime(form.getGlobalContext().Core.getCurrentClinicalContact().getStartDateTime() == null ? new DateTime() : form.getGlobalContext().Core.getCurrentClinicalContact().getStartDateTime());
			auth.setAuthoringHcp(form.getGlobalContext().Core.getCurrentClinicalContact().getSeenBy());			
		}
		else
		{
			auth.setAuthoringDateTime(new DateTime());
			auth.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		}
		
		return auth;
	}
	
	private boolean save()
	{
		EmergencyPatientPresentingProblemsVo header = form.getLocalContext().getSelectedInstance();
		
		if(header == null)
			header = new EmergencyPatientPresentingProblemsVo();
		
		populateDataFromScreen(header);
		
		if(header.getAuthoringInformation() == null || header.getAuthoringInformation().getAuthoringHcp() == null || header.getAuthoringInformation().getAuthoringDateTime() == null)
		{
			engine.showErrors(new String[] {"The Authoring info fields are mandatory !"});
			return false;
		}

		String[] errors = header.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			header = domain.saveEmergencyPresentingProblems(header);
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.toString());
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.toString());
			return false;
		}
		
		return true;
	}
	
	private int getProblemIndex(ClinicalProblemShortVo problem, Specialty specialty, PatientProblemVoCollection list)
	{
		if(list == null)
			return -1;
		
		for (int i = 0; i < list.size(); i++)
		{
			if(list.get(i).getSpecialtyIsNotNull() && list.get(i).getSpecialty().equals(specialty) && list.get(i).getProblemIsNotNull() && list.get(i).getProblem().getID_ClinicalProblem().equals(problem.getID_ClinicalProblem()))
				return i;
		}

		return -1;
	}
	
	@Override
	protected void onGrdProblemsGridCheckBoxClicked(int column, grdProblemsRow row, boolean isChecked) throws PresentationLogicException
	{
		if(isChecked)
		{
			row.setcolOnsetReadOnly(false);
			row.setcolNotesReadOnly(false);
			
			row.setcolNotes(row.getcolSpecialty() + "...");
		}
		else
		{
			row.setcolOnset(null);
			row.setcolNotes("");
			row.setcolOnsetReadOnly(true);
			row.setcolNotesReadOnly(true);
		}
		
	}
	@Override
	protected void onGrdProceduresGridCheckBoxClicked(int column, grdProceduresRow row, boolean isChecked) throws PresentationLogicException
	{
		if(isChecked)
		{
			row.setcolOnsetReadOnly(false);
			row.setcolNotesReadOnly(false);
			
			row.setcolNotes(row.getcolSpecialty() + "...");
		}
		else
		{
			row.setcolOnset(null);
			row.setcolNotes("");
			row.setcolOnsetReadOnly(true);
			row.setcolNotesReadOnly(true);
		}
	}
	
}
