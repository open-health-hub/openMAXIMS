//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.presentingproblemsandinterventions;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPresentingProblemsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdProblemsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProblemsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setIsParentRow(boolean value)
				{
					super.setIsParentRow(value);
				}
				public boolean isParentRow()
				{
					return super.isParentRow();
				}
				public void setExpanded(boolean value)
				{
					super.setExpanded(value);
				}
				public boolean isExpanded()
				{
					return super.isExpanded();
				}
				public void setcolSpecialtyReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolSpecialtyReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolSpecialtyOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolSpecialty()
				{
					return (String)super.row.get(0);
				}
				public void setcolSpecialty(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolSpecialtyTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getcolSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolOnsetReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolOnsetReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolOnsetOpened()
				{
					super.row.showOpened(2);
				}
				public ims.framework.utils.PartialDate getcolOnset()
				{
					return (ims.framework.utils.PartialDate)super.row.get(2);
				}
				public void setcolOnset(ims.framework.utils.PartialDate value)
				{
					super.row.set(2, value);
				}
				public void setCellcolOnsetTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolNotesReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolNotesReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolNotesOpened()
				{
					super.row.showOpened(3);
				}
				public String getcolNotes()
				{
					return (String)super.row.get(3);
				}
				public void setcolNotes(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolNotesTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public java.lang.Object getValue()
				{
					return super.row.getValue();
				}
				public void setValue(java.lang.Object value)
				{
					super.row.setValue(value);
				}
				public grdProblemsRow getParentRow()
				{
					return super.row.getParent() == null ? null : new grdProblemsRow(super.row.getParent());
				}
				public grdProblemsRowCollection getRows()
				{
					if(this.collection == null)
						this.collection = new grdProblemsRowCollection(super.row.getRows());
					return this.collection;
				}
				private grdProblemsRowCollection collection;
			}
			public static class grdProblemsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProblemsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProblemsRow get(int index)
				{
					return new grdProblemsRow(super.collection.get(index));
				}
				public grdProblemsRow newRow()
				{
					return new grdProblemsRow(super.collection.newRow());
				}
				public grdProblemsRow newRow(boolean autoSelect)
				{
					return new grdProblemsRow(super.collection.newRow(autoSelect));
				}
				public grdProblemsRow newRowAt(int index)
				{
					return new grdProblemsRow(super.collection.newRowAt(index));
				}
				public grdProblemsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProblemsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProblemsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow[] getAllRows()
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow row = getRows().get(x);
						rows.add(row);
						GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow[] result = new GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow)rows.get(x);
					}
					return result;
				}
				public GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow[] getAllRows(GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow parentRow)
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow row = parentRow.getRows().get(x);
						rows.add(row);
						GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow[] result = new GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow)rows.get(x);
					}
					return result;
				}
				public void expandAll()
				{
					expandCollapseAll(true);
				}
				public void collapseAll()
				{
					expandCollapseAll(false);
				}
				private void expandCollapseAll(boolean expand)
				{
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow row = getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void expandCollapseRow(GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow parentRow, boolean expand)
				{
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrLayer.tabPresentingProblemsContainer.grdProblemsRow row = parentRow.getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public java.lang.Object[] getValues()
				{
					java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public java.lang.Object getValue()
				{
					return super.grid.getValue();
				}
				public void setValue(java.lang.Object value)
				{
					super.grid.setValue(value);
				}
				public grdProblemsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProblemsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProblemsRowCollection getRows()
				{
					return new grdProblemsRowCollection(super.grid.getRows());
				}
				public grdProblemsRow getRowByValue(java.lang.Object value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProblemsRow(row);
				}
				public void setcolSpecialtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolSpecialtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolOnsetHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolOnsetHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolNotesHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolNotesHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 320, 808, 136, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"History of Presenting Problems", new Integer(2), ""}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 344, 792, 104, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(4000), Boolean.TRUE, Boolean.FALSE, contextMenus.contextMenuPresentingProblems, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 304, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdProblemsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdProblemsTemp);
				grdProblemsGrid grdProblems = (grdProblemsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProblemsGrid.class, m_grdProblemsTemp);
				grdProblems.addTreeColumn("Specialty / Problems", 0, 300, false, true);
				grdProblems.addBoolColumn("Select", 1, 1, 50, false, true, 0, true);
				grdProblems.addPartialDateColumn("Onset", 0, 0, 70, false, true, null, false, 0, true);
				grdProblems.addStringColumn("Problem Description", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdProblems);
			}

			public TextBox txtHistory()
			{
				return (TextBox)super.getControl(1);
			}
			public grdProblemsGrid grdProblems()
			{
				return (grdProblemsGrid)super.getGrid(0);
			}
		}
		public static class tabInterventionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdProceduresRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProceduresRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setIsParentRow(boolean value)
				{
					super.setIsParentRow(value);
				}
				public boolean isParentRow()
				{
					return super.isParentRow();
				}
				public void setExpanded(boolean value)
				{
					super.setExpanded(value);
				}
				public boolean isExpanded()
				{
					return super.isExpanded();
				}
				public void setcolSpecialtyReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolSpecialtyReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolSpecialtyOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolSpecialty()
				{
					return (String)super.row.get(0);
				}
				public void setcolSpecialty(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolSpecialtyTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getcolSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolOnsetReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolOnsetReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolOnsetOpened()
				{
					super.row.showOpened(2);
				}
				public ims.framework.utils.PartialDate getcolOnset()
				{
					return (ims.framework.utils.PartialDate)super.row.get(2);
				}
				public void setcolOnset(ims.framework.utils.PartialDate value)
				{
					super.row.set(2, value);
				}
				public void setCellcolOnsetTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolNotesReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolNotesReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolNotesOpened()
				{
					super.row.showOpened(3);
				}
				public String getcolNotes()
				{
					return (String)super.row.get(3);
				}
				public void setcolNotes(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolNotesTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public java.lang.Object getValue()
				{
					return super.row.getValue();
				}
				public void setValue(java.lang.Object value)
				{
					super.row.setValue(value);
				}
				public grdProceduresRow getParentRow()
				{
					return super.row.getParent() == null ? null : new grdProceduresRow(super.row.getParent());
				}
				public grdProceduresRowCollection getRows()
				{
					if(this.collection == null)
						this.collection = new grdProceduresRowCollection(super.row.getRows());
					return this.collection;
				}
				private grdProceduresRowCollection collection;
			}
			public static class grdProceduresRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProceduresRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProceduresRow get(int index)
				{
					return new grdProceduresRow(super.collection.get(index));
				}
				public grdProceduresRow newRow()
				{
					return new grdProceduresRow(super.collection.newRow());
				}
				public grdProceduresRow newRow(boolean autoSelect)
				{
					return new grdProceduresRow(super.collection.newRow(autoSelect));
				}
				public grdProceduresRow newRowAt(int index)
				{
					return new grdProceduresRow(super.collection.newRowAt(index));
				}
				public grdProceduresRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProceduresRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProceduresGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow[] getAllRows()
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow row = getRows().get(x);
						rows.add(row);
						GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow[] result = new GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow)rows.get(x);
					}
					return result;
				}
				public GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow[] getAllRows(GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow parentRow)
				{
					java.util.ArrayList rows = new java.util.ArrayList();
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow row = parentRow.getRows().get(x);
						rows.add(row);
						GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow[] childRows = getAllRows(row);
						for(int i = 0; i < childRows.length; i++)
						{
							rows.add(childRows[i]);
						}
					}
					GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow[] result = new GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow[rows.size()];
					for(int x = 0; x < rows.size(); x++)
					{
						result[x] = (GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow)rows.get(x);
					}
					return result;
				}
				public void expandAll()
				{
					expandCollapseAll(true);
				}
				public void collapseAll()
				{
					expandCollapseAll(false);
				}
				private void expandCollapseAll(boolean expand)
				{
					for(int x = 0; x < getRows().size(); x++)
					{
						GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow row = getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void expandCollapseRow(GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow parentRow, boolean expand)
				{
					for(int x = 0; x < parentRow.getRows().size(); x++)
					{
						GenForm.lyrLayer.tabInterventionsContainer.grdProceduresRow row = parentRow.getRows().get(x);
						row.setExpanded(expand);
						expandCollapseRow(row, expand);
					}
				}
				private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public java.lang.Object[] getValues()
				{
					java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public java.lang.Object getValue()
				{
					return super.grid.getValue();
				}
				public void setValue(java.lang.Object value)
				{
					super.grid.setValue(value);
				}
				public grdProceduresRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProceduresRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProceduresRowCollection getRows()
				{
					return new grdProceduresRowCollection(super.grid.getRows());
				}
				public grdProceduresRow getRowByValue(java.lang.Object value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProceduresRow(row);
				}
				public void setcolSpecialtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolSpecialtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolOnsetHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolOnsetHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolNotesHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolNotesHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 448, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdProceduresTemp);
				grdProceduresGrid grdProcedures = (grdProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProceduresGrid.class, m_grdProceduresTemp);
				grdProcedures.addTreeColumn("Specialty / Procedures", 0, 300, false, true);
				grdProcedures.addBoolColumn("Select", 1, 1, 50, false, true, 0, true);
				grdProcedures.addPartialDateColumn("Procedure date", 0, 0, 90, false, true, null, false, 0, true);
				grdProcedures.addStringColumn("Procedure Description", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdProcedures);
			}

			public grdProceduresGrid grdProcedures()
			{
				return (grdProceduresGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPresentingProblems = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Presenting problems", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPresentingProblemsContainer m_tabPresentingProblemsContainer = (tabPresentingProblemsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPresentingProblemsContainer.class, m_tabPresentingProblems, factory);
			super.addContainer(m_tabPresentingProblems, m_tabPresentingProblemsContainer);
			ims.framework.utils.SizeInfo m_tabPresentingProblemsDesignSize = new ims.framework.utils.SizeInfo(832, 488);
			ims.framework.utils.SizeInfo m_tabPresentingProblemsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper5.getWidth(), anchoringHelper5.getHeight());
			m_tabPresentingProblemsContainer.setContext(form, appForm, m_tabPresentingProblems, loader, form_images_local, contextMenus, startControlID, m_tabPresentingProblemsDesignSize, m_tabPresentingProblemsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabInterventions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Interventions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabInterventionsContainer m_tabInterventionsContainer = (tabInterventionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInterventionsContainer.class, m_tabInterventions, factory);
			super.addContainer(m_tabInterventions, m_tabInterventionsContainer);
			ims.framework.utils.SizeInfo m_tabInterventionsDesignSize = new ims.framework.utils.SizeInfo(832, 488);
			ims.framework.utils.SizeInfo m_tabInterventionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper6.getWidth(), anchoringHelper6.getHeight());
			m_tabInterventionsContainer.setContext(form, appForm, m_tabInterventions, loader, form_images_local, contextMenus, startControlID, m_tabInterventionsDesignSize, m_tabInterventionsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPresentingProblems().setVisible(false);
			tabInterventions().setVisible(false);
		}
		public void settabPresentingProblemsEnabled(boolean value)
		{
			tabPresentingProblems().setEnabled(value);
		}
		public void settabInterventionsEnabled(boolean value)
		{
			tabInterventions().setEnabled(value);
		}
		public void showtabPresentingProblems()
		{
			tabInterventions().setVisible(false);
			tabPresentingProblems().setVisible(true);
		}
		public void showtabInterventions()
		{
			tabPresentingProblems().setVisible(false);
			tabInterventions().setVisible(true);
		}

		public tabPresentingProblemsContainer tabPresentingProblems()
		{
			return (tabPresentingProblemsContainer)super.layers.get(0);
		}
		public tabInterventionsContainer tabInterventions()
		{
			return (tabInterventionsContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedInstance();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuPresentingProblems = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuPresentingProblemsAddFromProblemsSearchItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Problem from Problems Search", true, false, null, true, false);
		contextMenus.contextMenuPresentingProblems.add(contextMenus.contextMenuPresentingProblemsAddFromProblemsSearchItem);
		contextMenus.contextMenuPresentingProblemsAddFromTaxonomySearchItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Problem from Taxonomy Search", true, false, null, true, false);
		contextMenus.contextMenuPresentingProblems.add(contextMenus.contextMenuPresentingProblemsAddFromTaxonomySearchItem);
		contextMenus.contextMenuPresentingProblemsAddCCIfromTaxonomyItem = factory.createMenuItem(startControlID.intValue() + 3, "Add a CCI from taxonomy", true, false, new Integer(116106), true, false);
		contextMenus.contextMenuPresentingProblems.add(contextMenus.contextMenuPresentingProblemsAddCCIfromTaxonomyItem);
		contextMenus.contextMenuPresentingProblemsAddCCIfromLocalSearchItem = factory.createMenuItem(startControlID.intValue() + 4, "Add a CCI from local search", true, false, new Integer(102120), true, false);
		contextMenus.contextMenuPresentingProblems.add(contextMenus.contextMenuPresentingProblemsAddCCIfromLocalSearchItem);
		contextMenus.contextMenuPresentingProblemsUnlinkItem = factory.createMenuItem(startControlID.intValue() + 5, "Unlink", true, false, new Integer(116137), true, false);
		contextMenus.contextMenuPresentingProblems.add(contextMenus.contextMenuPresentingProblemsUnlinkItem);
		form.registerMenu(contextMenus.contextMenuPresentingProblems);


		// Panel Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Presenting Problems and Interventions", new Integer(1), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 41, 424, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper8.getSize(), instance1, -1, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(8), new Integer(41), new Integer(424), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_customControlAuthoringInfoForm, instance1 } );
		ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringInfoControl);
		Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Layer Clasess
		lyrLayer m_lyrLayer = (lyrLayer)LayerFlyweightFactory.getInstance().createLayer(lyrLayer.class, this, factory);
		super.addLayer(m_lyrLayer);
		m_lyrLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 72, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 72, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 72, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 768, 600, 72, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean iscustomControlAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setcustomControlAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public lyrLayer lyr()
	{
		return (lyrLayer)super.getLayer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(4);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				TaxonomySearch = new LocalFormName(104102);
				DiagnosisProcedureProblemSearch = new LocalFormName(102179);
			}
			public final FormName TaxonomySearch;
			public final FormName DiagnosisProcedureProblemSearch;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Emergency = new EmergencyImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				BlueSquare = new ImageHelper(102121, "Images/Core/circle_blue.png", new Integer(16), new Integer(16));
				GreenSquare = new ImageHelper(102124, "Images/Core/circle_green.png", new Integer(16), new Integer(16));
				RedSqaure = new ImageHelper(102122, "Images/Core/circle_red.png", new Integer(16), new Integer(16));
				YellowSquare = new ImageHelper(102123, "Images/Core/circle_yellow.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image BlueSquare;
			public final ims.framework.utils.Image GreenSquare;
			public final ims.framework.utils.Image RedSqaure;
			public final ims.framework.utils.Image YellowSquare;
		}
		public final class EmergencyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyImages()
			{
				GreenBall = new ImageHelper(129116, "Images/Emergency/green1.gif", new Integer(12), new Integer(12));
			}
			public final ims.framework.utils.Image GreenBall;
		}
		public final CoreImages Core;
		public final EmergencyImages Emergency;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_Emergency.PresentingProblemsAndInterventions.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
		}
		
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.emergency.vo.EmergencyPatientPresentingProblemsVo getSelectedInstance()
		{
			return (ims.emergency.vo.EmergencyPatientPresentingProblemsVo)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.emergency.vo.EmergencyPatientPresentingProblemsVo value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class PresentingProblems implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int AddFromProblemsSearch = 1;
			public static final int AddFromTaxonomySearch = 2;
			public static final int AddCCIfromTaxonomy = 3;
			public static final int AddCCIfromLocalSearch = 4;
			public static final int Unlink = 5;
		}
		public void disableAllPresentingProblemsMenuItems()
		{
			this.contextMenuPresentingProblemsAddFromProblemsSearchItem.setEnabled(false);
			this.contextMenuPresentingProblemsAddFromTaxonomySearchItem.setEnabled(false);
			this.contextMenuPresentingProblemsAddCCIfromTaxonomyItem.setEnabled(false);
			this.contextMenuPresentingProblemsAddCCIfromLocalSearchItem.setEnabled(false);
			this.contextMenuPresentingProblemsUnlinkItem.setEnabled(false);
		}
		public void hideAllPresentingProblemsMenuItems()
		{
			this.contextMenuPresentingProblemsAddFromProblemsSearchItem.setVisible(false);
			this.contextMenuPresentingProblemsAddFromTaxonomySearchItem.setVisible(false);
			this.contextMenuPresentingProblemsAddCCIfromTaxonomyItem.setVisible(false);
			this.contextMenuPresentingProblemsAddCCIfromLocalSearchItem.setVisible(false);
			this.contextMenuPresentingProblemsUnlinkItem.setVisible(false);
		}
		private Menu contextMenuPresentingProblems;
		public MenuItem getPresentingProblemsAddFromProblemsSearchItem()
		{
			return this.contextMenuPresentingProblemsAddFromProblemsSearchItem;
		}
		private MenuItem contextMenuPresentingProblemsAddFromProblemsSearchItem;
		public MenuItem getPresentingProblemsAddFromTaxonomySearchItem()
		{
			return this.contextMenuPresentingProblemsAddFromTaxonomySearchItem;
		}
		private MenuItem contextMenuPresentingProblemsAddFromTaxonomySearchItem;
		public MenuItem getPresentingProblemsAddCCIfromTaxonomyItem()
		{
			return this.contextMenuPresentingProblemsAddCCIfromTaxonomyItem;
		}
		private MenuItem contextMenuPresentingProblemsAddCCIfromTaxonomyItem;
		public MenuItem getPresentingProblemsAddCCIfromLocalSearchItem()
		{
			return this.contextMenuPresentingProblemsAddCCIfromLocalSearchItem;
		}
		private MenuItem contextMenuPresentingProblemsAddCCIfromLocalSearchItem;
		public MenuItem getPresentingProblemsUnlinkItem()
		{
			return this.contextMenuPresentingProblemsUnlinkItem;
		}
		private MenuItem contextMenuPresentingProblemsUnlinkItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[74];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.PresentingProblemsAndInterventions.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1086100007-ID", "ID_PresProblemsProceduresPerformed");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.PresentingProblemsAndInterventions.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1086100007-CARECONTEXT", "CareContext");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.PresentingProblemsAndInterventions.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1086100007-HISTORYPRESENTINGPROBLEM", "HistoryPresentingProblem");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
