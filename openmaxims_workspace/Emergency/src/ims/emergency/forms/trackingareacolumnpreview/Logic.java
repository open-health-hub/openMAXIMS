//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.trackingareacolumnpreview;

import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		open();
	}

	private void open()
	{
		initializeDynamicGrid();
		addNewRow();
	}

	private void addNewRow()
	{

		DynamicGridRow newRow = form.dyngrdTrackingArea().getRows().newRow();
		newRow.setSelectable(false);
		DynamicGridCell checkCell;
		for (int i = 0; i < form.getGlobalContext().Emergency.getTrackingAreaColumns().size(); i++)
		{
			if (form.getGlobalContext().Emergency.getTrackingAreaColumns().get(i).getColumn().getImage() != null)
			{
				checkCell = newRow.getCells().newCell(getColumn(form.getGlobalContext().Emergency.getTrackingAreaColumns().get(i).getColumn().getID()), DynamicCellType.IMAGE);
				checkCell.setValue(form.getGlobalContext().Emergency.getTrackingAreaColumns().get(i).getColumn().getImage());
				checkCell.getColumn().setAlignment(Alignment.CENTER);
			}
			else
			{
				checkCell = newRow.getCells().newCell(getColumn(form.getGlobalContext().Emergency.getTrackingAreaColumns().get(i).getColumn().getID()), DynamicCellType.STRING);
				String name = form.getGlobalContext().Emergency.getTrackingAreaColumns().get(i).getColHeader();
				name = name + "...";
				checkCell.setValue(name);
			}
		}

	}

	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdTrackingArea().getColumns().getByIdentifier(identifier);
	}

	private void initializeDynamicGrid()
	{

		form.dyngrdTrackingArea().setReadOnly(true);//WDEV-15850
		form.dyngrdTrackingArea().clear();

		if (!form.getGlobalContext().Emergency.getTrackingAreaColumnsIsNotNull())
			return;

		for (int i = 0; i < form.getGlobalContext().Emergency.getTrackingAreaColumns().size(); i++)
		{
			DynamicGridColumn column = form.dyngrdTrackingArea().getColumns().newColumn(form.getGlobalContext().Emergency.getTrackingAreaColumns().get(i).getColHeader());
			column.setWidth(form.getGlobalContext().Emergency.getTrackingAreaColumns().get(i).getColWidth());
			column.setIdentifier(form.getGlobalContext().Emergency.getTrackingAreaColumns().get(i).getColumn().getID());
		}
		
	}

	@Override
	protected void onBtnOKClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

}
