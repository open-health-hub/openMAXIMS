//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.interventionstreatments;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTreatmentTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.TreatmentInterventionType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.TreatmentInterventionType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.TreatmentInterventionType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.TreatmentInterventionType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.TreatmentInterventionType value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.TreatmentInterventionType getValue()
		{
			return (ims.clinical.vo.lookups.TreatmentInterventionType)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.TreatmentInterventionType value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbTreatmentInterventionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinicaladmin.vo.TreatmentInterventionLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinicaladmin.vo.TreatmentInterventionLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinicaladmin.vo.TreatmentInterventionLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinicaladmin.vo.TreatmentInterventionLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinicaladmin.vo.TreatmentInterventionLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinicaladmin.vo.TreatmentInterventionLiteVo getValue()
		{
			return (ims.clinicaladmin.vo.TreatmentInterventionLiteVo)super.control.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.TreatmentInterventionLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdSelectedRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSelectedRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColTreatmentInterventionReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTreatmentInterventionReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTreatmentInterventionOpened()
		{
			super.row.showOpened(0);
		}
		public String getColTreatmentIntervention()
		{
			return (String)super.row.get(0);
		}
		public void setColTreatmentIntervention(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColTreatmentInterventionTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public java.lang.Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.row.setValue(value);
		}
		public grdSelectedRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdSelectedRow(super.row.getParent());
		}
		public grdSelectedRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdSelectedRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdSelectedRowCollection collection;
	}
	public static class grdSelectedRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSelectedRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSelectedRow get(int index)
		{
			return new grdSelectedRow(super.collection.get(index));
		}
		public grdSelectedRow newRow()
		{
			return new grdSelectedRow(super.collection.newRow());
		}
		public grdSelectedRow newRow(boolean autoSelect)
		{
			return new grdSelectedRow(super.collection.newRow(autoSelect));
		}
		public grdSelectedRow newRowAt(int index)
		{
			return new grdSelectedRow(super.collection.newRowAt(index));
		}
		public grdSelectedRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSelectedRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSelectedGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdSelectedRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdSelectedRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdSelectedRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdSelectedRow[] result = new GenForm.grdSelectedRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdSelectedRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdSelectedRow[] getAllRows(GenForm.grdSelectedRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdSelectedRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdSelectedRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdSelectedRow[] result = new GenForm.grdSelectedRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdSelectedRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdSelectedRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdSelectedRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdSelectedRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		public java.lang.Object[] getValues()
		{
			java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public java.lang.Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.grid.setValue(value);
		}
		public grdSelectedRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSelectedRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSelectedRowCollection getRows()
		{
			return new grdSelectedRowCollection(super.grid.getRows());
		}
		public grdSelectedRow getRowByValue(java.lang.Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSelectedRow(row);
		}
		public void setColTreatmentInterventionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTreatmentInterventionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdHotlistInterventionTreatmentsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdHotlistInterventionTreatmentsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColTreatmentInterventionReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTreatmentInterventionReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTreatmentInterventionOpened()
		{
			super.row.showOpened(0);
		}
		public String getColTreatmentIntervention()
		{
			return (String)super.row.get(0);
		}
		public void setColTreatmentIntervention(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColTreatmentInterventionTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public java.lang.Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.row.setValue(value);
		}
		public grdHotlistInterventionTreatmentsRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdHotlistInterventionTreatmentsRow(super.row.getParent());
		}
		public grdHotlistInterventionTreatmentsRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdHotlistInterventionTreatmentsRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdHotlistInterventionTreatmentsRowCollection collection;
	}
	public static class grdHotlistInterventionTreatmentsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdHotlistInterventionTreatmentsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdHotlistInterventionTreatmentsRow get(int index)
		{
			return new grdHotlistInterventionTreatmentsRow(super.collection.get(index));
		}
		public grdHotlistInterventionTreatmentsRow newRow()
		{
			return new grdHotlistInterventionTreatmentsRow(super.collection.newRow());
		}
		public grdHotlistInterventionTreatmentsRow newRow(boolean autoSelect)
		{
			return new grdHotlistInterventionTreatmentsRow(super.collection.newRow(autoSelect));
		}
		public grdHotlistInterventionTreatmentsRow newRowAt(int index)
		{
			return new grdHotlistInterventionTreatmentsRow(super.collection.newRowAt(index));
		}
		public grdHotlistInterventionTreatmentsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdHotlistInterventionTreatmentsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdHotlistInterventionTreatmentsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdHotlistInterventionTreatmentsRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdHotlistInterventionTreatmentsRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdHotlistInterventionTreatmentsRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdHotlistInterventionTreatmentsRow[] result = new GenForm.grdHotlistInterventionTreatmentsRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdHotlistInterventionTreatmentsRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdHotlistInterventionTreatmentsRow[] getAllRows(GenForm.grdHotlistInterventionTreatmentsRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdHotlistInterventionTreatmentsRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdHotlistInterventionTreatmentsRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdHotlistInterventionTreatmentsRow[] result = new GenForm.grdHotlistInterventionTreatmentsRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdHotlistInterventionTreatmentsRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdHotlistInterventionTreatmentsRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdHotlistInterventionTreatmentsRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdHotlistInterventionTreatmentsRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		public java.lang.Object[] getValues()
		{
			java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public java.lang.Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.grid.setValue(value);
		}
		public grdHotlistInterventionTreatmentsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdHotlistInterventionTreatmentsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdHotlistInterventionTreatmentsRowCollection getRows()
		{
			return new grdHotlistInterventionTreatmentsRowCollection(super.grid.getRows());
		}
		public grdHotlistInterventionTreatmentsRow getRowByValue(java.lang.Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdHotlistInterventionTreatmentsRow(row);
		}
		public void setColTreatmentInterventionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTreatmentInterventionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(672, 488);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 400, 672, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ims.framework.FormUiLogic m_ccAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 8, skipContextValidation);
		//ims.framework.Control m_ccAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(400), new Integer(672), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 8), m_ccAuthoringInfoForm, instance1 } );
		ims.framework.Control m_ccAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 8), m_ccAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccAuthoringInfoControl);
		Menu[] menus1 = m_ccAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 66, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 376, 8, 212, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Selected Treatments / Interventions", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 161, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatments / Interventions", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 581, 464, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 581, 464, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 472, 464, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save and Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 464, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 312, 232, 48, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<<", Boolean.FALSE, "Remove Selected Treatment / Intervention", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 312, 200, 48, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, ">>", Boolean.FALSE, "Add Selected Treatment / Intervention", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 312, 31, 48, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, ">>", Boolean.FALSE, "Add Selected Treatment / Intervention", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 48, 64, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbTreatmentTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTreatmentTypeTemp);
		cmbTreatmentTypeComboBox cmbTreatmentType = (cmbTreatmentTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatmentTypeComboBox.class, m_cmbTreatmentTypeTemp);
		super.addComboBox(cmbTreatmentType);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbTreatmentInterventionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.TRUE});
		addControl(m_qmbTreatmentInterventionTemp);
		qmbTreatmentInterventionComboBox qmbTreatmentIntervention = (qmbTreatmentInterventionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbTreatmentInterventionComboBox.class, m_qmbTreatmentInterventionTemp);
		super.addComboBox(qmbTreatmentIntervention);

		// Grid Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 376, 32, 280, 360, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		Grid m_grdSelectedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSelectedTemp);
		grdSelectedGrid grdSelected = (grdSelectedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSelectedGrid.class, m_grdSelectedTemp);
		grdSelected.addTreeColumn("Treatment / Intervention", 0, -1, false, true);
		super.addGrid(grdSelected);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 288, 296, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdHotlistInterventionTreatmentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdHotlistInterventionTreatmentsTemp);
		grdHotlistInterventionTreatmentsGrid grdHotlistInterventionTreatments = (grdHotlistInterventionTreatmentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHotlistInterventionTreatmentsGrid.class, m_grdHotlistInterventionTreatmentsTemp);
		grdHotlistInterventionTreatments.addTreeColumn("Treatment / Intervention", 0, -1, false, true);
		super.addGrid(grdHotlistInterventionTreatments);
	}


	public ims.core.forms.authoringinfo.IComponent ccAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Button btnClose()
	{
		return (Button)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(7);
	}
	public Button btnRemoveSelected()
	{
		return (Button)super.getControl(8);
	}
	public Button btnAddSelected()
	{
		return (Button)super.getControl(9);
	}
	public Button btnAdd()
	{
		return (Button)super.getControl(10);
	}
	public cmbTreatmentTypeComboBox cmbTreatmentType()
	{
		return (cmbTreatmentTypeComboBox)super.getComboBox(0);
	}
	public qmbTreatmentInterventionComboBox qmbTreatmentIntervention()
	{
		return (qmbTreatmentInterventionComboBox)super.getComboBox(1);
	}
	public grdSelectedGrid grdSelected()
	{
		return (grdSelectedGrid)super.getGrid(0);
	}
	public grdHotlistInterventionTreatmentsGrid grdHotlistInterventionTreatments()
	{
		return (grdHotlistInterventionTreatmentsGrid)super.getGrid(1);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_AddedDuringCoding = new ims.framework.ContextVariable("AddedDuringCoding", prefix + "_lv_Emergency.InterventionsTreatments.__internal_x_context__AddedDuringCoding_" + componentIdentifier + "");
			cxl_LoggedInAuthoring = new ims.framework.ContextVariable("LoggedInAuthoring", prefix + "_lv_Emergency.InterventionsTreatments.__internal_x_context__LoggedInAuthoring_" + componentIdentifier + "");
			cxl_AuthoringInfoControlIsEnabled = new ims.framework.ContextVariable("AuthoringInfoControlIsEnabled", prefix + "_lv_Emergency.InterventionsTreatments.__internal_x_context__AuthoringInfoControlIsEnabled_" + componentIdentifier + "");
		}
		
		public boolean getAddedDuringCodingIsNotNull()
		{
			return !cxl_AddedDuringCoding.getValueIsNull(context);
		}
		public Boolean getAddedDuringCoding()
		{
			return (Boolean)cxl_AddedDuringCoding.getValue(context);
		}
		public void setAddedDuringCoding(Boolean value)
		{
			cxl_AddedDuringCoding.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AddedDuringCoding = null;
		public boolean getLoggedInAuthoringIsNotNull()
		{
			return !cxl_LoggedInAuthoring.getValueIsNull(context);
		}
		public ims.core.vo.AuthoringInformationVo getLoggedInAuthoring()
		{
			return (ims.core.vo.AuthoringInformationVo)cxl_LoggedInAuthoring.getValue(context);
		}
		public void setLoggedInAuthoring(ims.core.vo.AuthoringInformationVo value)
		{
			cxl_LoggedInAuthoring.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoggedInAuthoring = null;
		public boolean getAuthoringInfoControlIsEnabledIsNotNull()
		{
			return !cxl_AuthoringInfoControlIsEnabled.getValueIsNull(context);
		}
		public Boolean getAuthoringInfoControlIsEnabled()
		{
			return (Boolean)cxl_AuthoringInfoControlIsEnabled.getValue(context);
		}
		public void setAuthoringInfoControlIsEnabled(Boolean value)
		{
			cxl_AuthoringInfoControlIsEnabled.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AuthoringInfoControlIsEnabled = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[77];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-ID", "ID_InterventionsTreatmentsForAttendence");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-PATIENT", "Patient");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-EPISODE", "Episode");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Emergency.InterventionsTreatmentsForAttendence", "BO-1086100012-ATTENDANCE", "Attendance");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsTreatments.__internal_x_context__LoggedInAuthoring_" + componentIdentifier, "BO-1003100069-ID", "ID_AuthoringInformation");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.InterventionsTreatments.__internal_x_context__LoggedInAuthoring_" + componentIdentifier, "BO-1003100069-AUTHORINGDATETIME", "AuthoringDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
