//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.triagenotescc;

import ims.clinical.configuration.vo.ClinicalProblemRefVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.triagenotescc.GenForm.grdNotesRow;
import ims.emergency.vo.TriageNotesVo;
import ims.emergency.vo.TriageNotesVoCollection;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			doRIE();
		}
		
		open();
	}
	
	private void doRIE() 
	{
		boolean isStale = false;
		
		if(form.getLocalContext().getRIERecord() != null)
		{
			if(domain.isStale(form.getLocalContext().getRIERecord()))
			{
				isStale = true;
			}
		}
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		try 
		{
			domain.markAsRie(form.getLocalContext().getRIERecord(), engine.getFormName(), form.getLocalContext().getPatient().getID_Patient(), null, form.getLocalContext().getCareContext().getID_CareContext(), form.getGlobalContext().Core.getRieMessage());
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}

	@Override
	protected void onBtnNoteClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newTriageNote();
	}

	private void newTriageNote() 
	{
		TriageNotesVo note = new TriageNotesVo();
		note.setPatient(form.getLocalContext().getPatient());
		note.setEpisode(form.getLocalContext().getEpisodeOfCare());
		note.setAttendance(form.getLocalContext().getCareContext());
		note.setPresentingProblem(form.getLocalContext().getPresentingProblem());
		form.getGlobalContext().Emergency.setTriageNote(note);
		
		engine.open(form.getForms().Emergency.TriageNoteDialog);
	}
	
	public void initialize(ims.core.patient.vo.PatientRefVo patient, ims.core.admin.vo.EpisodeOfCareRefVo episodeOfCare, ims.core.admin.vo.CareContextRefVo careContext, ClinicalProblemRefVo presentingProblem)
	{
		form.getLocalContext().setIsEnabled(true);
		
		form.getLocalContext().setPatient(patient);
		form.getLocalContext().setEpisodeOfCare(episodeOfCare);
		form.getLocalContext().setCareContext(careContext);
		form.getLocalContext().setPresentingProblem(presentingProblem);
		
		Object hcp = domain.getHcpLiteUser();
		if(hcp instanceof HcpRefVo)
		{
			form.getLocalContext().setLoggedHCP((HcpRefVo) hcp);
		}
		
		open();
	}

	private void open() 
	{
		populateScreenFromData();
		updateControlsState();
	}

	private void populateScreenFromData() 
	{
		form.grdNotes().getRows().clear();
		
		TriageNotesVoCollection notes = domain.listNotes(form.getLocalContext().getPatient(), form.getLocalContext().getEpisodeOfCare(), form.getLocalContext().getCareContext());
		
		for(TriageNotesVo note : notes)
		{
			if(note == null)
				continue;
			
			addNoteRow(note);
		}
	}

	private void addNoteRow(TriageNotesVo note) 
	{
		if(note == null)
			return;
		
		grdNotesRow row = form.grdNotes().getRows().newRow();
		
		StringBuffer sb = new StringBuffer();
		
		if(note.getAuthoringInformationIsNotNull())
		{
			sb.append("<b>" + note.getAuthoringInformation().getAuthoringDateTime());
			
			if(note.getAuthoringInformation().getAuthoringHcpIsNotNull())
			{
				if(sb.length() > 0)
					sb.append(" - ");
				
				sb.append(note.getAuthoringInformation().getAuthoringHcp().getIHcpName());
			}
			
			sb.append("</b>");
		}
		
		sb.append("<br><br>");
		sb.append(note.getTriageNote());
		
		row.setColNote(sb.toString());
		row.setValue(note);
	}

	private void updateControlsState() 
	{
		form.btnNote().setVisible(true);
		form.btnNote().setEnabled(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()));
		form.btnEdit().setEnabled(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdNotes().getValue() != null && (form.grdNotes().getValue().getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getLoggedHCP()) || engine.hasRight(AppRight.ED_ALLOW_CORRECTION_OF_ANY_TRIAGE_NOTE)));
		form.btnRIE().setEnabled(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdNotes().getValue() != null);
		
		form.getContextMenus().Emergency.getTriageNoteMenuNEWItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()));
		form.getContextMenus().Emergency.getTriageNoteMenuEDITItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdNotes().getValue() != null && (form.grdNotes().getValue().getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getLoggedHCP()) || engine.hasRight(AppRight.ED_ALLOW_CORRECTION_OF_ANY_TRIAGE_NOTE)));
		form.getContextMenus().Emergency.getTriageNoteMenuRIEItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdNotes().getValue() != null);
	}

	public void setEnabled(Boolean value) 
	{
		form.getLocalContext().setIsEnabled(value);
		updateControlsState();
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Emergency.setTriageNote(form.grdNotes().getValue());
		
		engine.open(form.getForms().Emergency.TriageNoteDialog);
	}

	@Override
	protected void onGrdNotesSelectionChanged()	throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onBtnRIEClick() throws PresentationLogicException 
	{
		markAsRIE();
	}

	private void markAsRIE() 
	{
		if(form.grdNotes().getValue() == null)
			return;
		
		form.getLocalContext().setRIERecord(form.grdNotes().getValue());
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}

	public void clear() 
	{
		form.getLocalContext().setPatient(null);
		form.getLocalContext().setEpisodeOfCare(null);
		form.getLocalContext().setCareContext(null);
		form.getLocalContext().setPresentingProblem(null);
		form.getLocalContext().setRIERecord(null);
		form.grdNotes().getRows().clear();

		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.TriageNoteMenu.NEW:
				newTriageNote();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.TriageNoteMenu.EDIT:
				form.getGlobalContext().Emergency.setTriageNote(form.grdNotes().getValue());
				engine.open(form.getForms().Emergency.TriageNoteDialog);
			break;
				
			case GenForm.ContextMenus.EmergencyNamespace.TriageNoteMenu.RIE:
				markAsRIE();
			break;
		}
	}
}
