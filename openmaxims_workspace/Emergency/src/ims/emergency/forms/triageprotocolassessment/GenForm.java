//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.triageprotocolassessment;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class qmbAssessmentHCPComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbProblemComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.ClinicalProblemShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.ClinicalProblemShortVo getValue()
		{
			return (ims.clinical.vo.ClinicalProblemShortVo)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.ClinicalProblemShortVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdPrioritiesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPrioritiesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColPriorityReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColPriorityReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColPriorityOpened()
		{
			super.row.showOpened(0);
		}
		public String getColPriority()
		{
			return (String)super.row.get(0);
		}
		public void setColPriority(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColPriorityTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDiscriminatorReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDiscriminatorReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDiscriminatorOpened()
		{
			super.row.showOpened(1);
		}
		public String getColDiscriminator()
		{
			return (String)super.row.get(1);
		}
		public void setColDiscriminator(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColDiscriminatorTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(2);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.emergency.vo.ProtocolDiscriminatorLiteVo getValue()
		{
			return (ims.emergency.vo.ProtocolDiscriminatorLiteVo)super.row.getValue();
		}
		public void setValue(ims.emergency.vo.ProtocolDiscriminatorLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPrioritiesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPrioritiesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPrioritiesRow get(int index)
		{
			return new grdPrioritiesRow(super.collection.get(index));
		}
		public grdPrioritiesRow newRow()
		{
			return new grdPrioritiesRow(super.collection.newRow());
		}
		public grdPrioritiesRow newRow(boolean autoSelect)
		{
			return new grdPrioritiesRow(super.collection.newRow(autoSelect));
		}
		public grdPrioritiesRow newRowAt(int index)
		{
			return new grdPrioritiesRow(super.collection.newRowAt(index));
		}
		public grdPrioritiesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPrioritiesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPrioritiesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.emergency.vo.ProtocolDiscriminatorLiteVoCollection getValues()
		{
			ims.emergency.vo.ProtocolDiscriminatorLiteVoCollection listOfValues = new ims.emergency.vo.ProtocolDiscriminatorLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.emergency.vo.ProtocolDiscriminatorLiteVo getValue()
		{
			return (ims.emergency.vo.ProtocolDiscriminatorLiteVo)super.grid.getValue();
		}
		public void setValue(ims.emergency.vo.ProtocolDiscriminatorLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdPrioritiesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPrioritiesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPrioritiesRowCollection getRows()
		{
			return new grdPrioritiesRowCollection(super.grid.getRows());
		}
		public grdPrioritiesRow getRowByValue(ims.emergency.vo.ProtocolDiscriminatorLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPrioritiesRow(row);
		}
		public void setColPriorityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColPriorityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDiscriminatorHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDiscriminatorHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
		if(new ims.framework.ContextVariable("Emergency.Triage", "_cv_Emergency.Triage").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Emergency.Triage' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(688, 576);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 522, 147, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Assessment Date / Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 498, 103, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Assessment HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 424, 73, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Description:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 400, 85, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Discriminator:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 376, 90, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Triage Priority:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 82, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Protocol:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Presenting Problem:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 10, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Presenting Complaint:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 597, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 516, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 168, 424, 504, 64, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 168, 400, 504, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 168, 376, 504, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 144, 79, 528, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 144, 8, 528, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 168, 520, 176, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 168, 496, 352, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_qmbAssessmentHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbAssessmentHCPTemp);
		qmbAssessmentHCPComboBox qmbAssessmentHCP = (qmbAssessmentHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbAssessmentHCPComboBox.class, m_qmbAssessmentHCPTemp);
		super.addComboBox(qmbAssessmentHCP);
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 144, 30, 528, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbProblemTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.TRUE});
		addControl(m_qmbProblemTemp);
		qmbProblemComboBox qmbProblem = (qmbProblemComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProblemComboBox.class, m_qmbProblemTemp);
		super.addComboBox(qmbProblem);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 144, 57, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Main Problem", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 104, 656, 264, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdPrioritiesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPrioritiesTemp);
		grdPrioritiesGrid grdPriorities = (grdPrioritiesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPrioritiesGrid.class, m_grdPrioritiesTemp);
		grdPriorities.addStringColumn("Priority", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPriorities.addStringColumn("Discriminator", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPriorities.addBoolColumn("Select", 1, 1, -1, false, true, 0, true);
		super.addGrid(grdPriorities);
	}


	public Button btnCancel()
	{
		return (Button)super.getControl(8);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(9);
	}
	public TextBox txtDiscriminatorDescription()
	{
		return (TextBox)super.getControl(10);
	}
	public TextBox txtDiscriminator()
	{
		return (TextBox)super.getControl(11);
	}
	public TextBox txtPriority()
	{
		return (TextBox)super.getControl(12);
	}
	public TextBox txtProtocolName()
	{
		return (TextBox)super.getControl(13);
	}
	public TextBox txtPresentingComplain()
	{
		return (TextBox)super.getControl(14);
	}
	public DateTimeControl dtimAsessmentDate()
	{
		return (DateTimeControl)super.getControl(15);
	}
	public qmbAssessmentHCPComboBox qmbAssessmentHCP()
	{
		return (qmbAssessmentHCPComboBox)super.getComboBox(0);
	}
	public qmbProblemComboBox qmbProblem()
	{
		return (qmbProblemComboBox)super.getComboBox(1);
	}
	public CheckBox chkMainProblem()
	{
		return (CheckBox)super.getControl(18);
	}
	public grdPrioritiesGrid grdPriorities()
	{
		return (grdPrioritiesGrid)super.getGrid(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Triage = new ims.framework.ContextVariable("Triage", prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__Triage_" + componentIdentifier + "");
			cxl_SelectedProtocolDiscriminator = new ims.framework.ContextVariable("SelectedProtocolDiscriminator", prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__SelectedProtocolDiscriminator_" + componentIdentifier + "");
			cxl_SelectedManchesterTriageProtocol = new ims.framework.ContextVariable("SelectedManchesterTriageProtocol", prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__SelectedManchesterTriageProtocol_" + componentIdentifier + "");
			cxl_EmergencyEpisode = new ims.framework.ContextVariable("EmergencyEpisode", prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__EmergencyEpisode_" + componentIdentifier + "");
			cxl_IsPatientInED = new ims.framework.ContextVariable("IsPatientInED", prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__IsPatientInED_" + componentIdentifier + "");
			cxl_TriageProtocolAssessment = new ims.framework.ContextVariable("TriageProtocolAssessment", prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__TriageProtocolAssessment_" + componentIdentifier + "");
		}
		
		public boolean getTriageIsNotNull()
		{
			return !cxl_Triage.getValueIsNull(context);
		}
		public ims.emergency.vo.TriageForTriageProtocolAssessmentVo getTriage()
		{
			return (ims.emergency.vo.TriageForTriageProtocolAssessmentVo)cxl_Triage.getValue(context);
		}
		public void setTriage(ims.emergency.vo.TriageForTriageProtocolAssessmentVo value)
		{
			cxl_Triage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Triage = null;
		public boolean getSelectedProtocolDiscriminatorIsNotNull()
		{
			return !cxl_SelectedProtocolDiscriminator.getValueIsNull(context);
		}
		public ims.emergency.vo.ProtocolDiscriminatorLiteVo getSelectedProtocolDiscriminator()
		{
			return (ims.emergency.vo.ProtocolDiscriminatorLiteVo)cxl_SelectedProtocolDiscriminator.getValue(context);
		}
		public void setSelectedProtocolDiscriminator(ims.emergency.vo.ProtocolDiscriminatorLiteVo value)
		{
			cxl_SelectedProtocolDiscriminator.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedProtocolDiscriminator = null;
		public boolean getSelectedManchesterTriageProtocolIsNotNull()
		{
			return !cxl_SelectedManchesterTriageProtocol.getValueIsNull(context);
		}
		public ims.emergency.vo.ManchesterTriageProtocolConfigForTriageProtocolAssessmentVo getSelectedManchesterTriageProtocol()
		{
			return (ims.emergency.vo.ManchesterTriageProtocolConfigForTriageProtocolAssessmentVo)cxl_SelectedManchesterTriageProtocol.getValue(context);
		}
		public void setSelectedManchesterTriageProtocol(ims.emergency.vo.ManchesterTriageProtocolConfigForTriageProtocolAssessmentVo value)
		{
			cxl_SelectedManchesterTriageProtocol.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedManchesterTriageProtocol = null;
		public boolean getEmergencyEpisodeIsNotNull()
		{
			return !cxl_EmergencyEpisode.getValueIsNull(context);
		}
		public ims.emergency.vo.EmergencyEpisodeForTriageLiteVo getEmergencyEpisode()
		{
			return (ims.emergency.vo.EmergencyEpisodeForTriageLiteVo)cxl_EmergencyEpisode.getValue(context);
		}
		public void setEmergencyEpisode(ims.emergency.vo.EmergencyEpisodeForTriageLiteVo value)
		{
			cxl_EmergencyEpisode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EmergencyEpisode = null;
		public boolean getIsPatientInEDIsNotNull()
		{
			return !cxl_IsPatientInED.getValueIsNull(context);
		}
		public Boolean getIsPatientInED()
		{
			return (Boolean)cxl_IsPatientInED.getValue(context);
		}
		public void setIsPatientInED(Boolean value)
		{
			cxl_IsPatientInED.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsPatientInED = null;
		public boolean getTriageProtocolAssessmentIsNotNull()
		{
			return !cxl_TriageProtocolAssessment.getValueIsNull(context);
		}
		public ims.emergency.vo.TriageProtocolAssessmentVo getTriageProtocolAssessment()
		{
			return (ims.emergency.vo.TriageProtocolAssessmentVo)cxl_TriageProtocolAssessment.getValue(context);
		}
		public void setTriageProtocolAssessment(ims.emergency.vo.TriageProtocolAssessmentVo value)
		{
			cxl_TriageProtocolAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TriageProtocolAssessment = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[99];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Emergency.MainPresentingProblem", "BO-1073100005-ID", "ID_ClinicalProblem");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Emergency.MainPresentingProblem", "BO-1073100005-PCNAME", "PCName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Emergency.MainPresentingProblem", "BO-1073100005-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Emergency.TriageProtocolAssessment", "BO-1086100018-ID", "ID_TriageProtocolAssessment");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Emergency.Triage", "BO-1086100004-ID", "ID_Triage");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__Triage_" + componentIdentifier, "BO-1086100004-ID", "ID_Triage");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__Triage_" + componentIdentifier, "BO-1086100004-CURRENTTRIAGEPRIORITY", "CurrentTriagePriority");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__Triage_" + componentIdentifier, "BO-1086100004-CURRENTTRIAGEPATHWAY", "CurrentTriagePathway");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__Triage_" + componentIdentifier, "BO-1086100004-EPISODE", "Episode");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__SelectedProtocolDiscriminator_" + componentIdentifier, "BO-1087100011-ID", "ID_ProtocolDiscriminator");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__SelectedProtocolDiscriminator_" + componentIdentifier, "BO-1087100011-PRIORITY", "Priority");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__SelectedManchesterTriageProtocol_" + componentIdentifier, "BO-1087100010-ID", "ID_ManchesterTriageProtocolConfiguration");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__SelectedManchesterTriageProtocol_" + componentIdentifier, "BO-1087100010-PROTOCOLNAME", "ProtocolName");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__SelectedManchesterTriageProtocol_" + componentIdentifier, "BO-1087100010-DEFAULTPRIORITY", "DefaultPriority");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__EmergencyEpisode_" + componentIdentifier, "BO-1004100024-ID", "ID_EmergencyEpisode");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__EmergencyEpisode_" + componentIdentifier, "BO-1004100024-INJURYDATETIME", "InjuryDateTime");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__EmergencyEpisode_" + componentIdentifier, "BO-1004100024-EPISODEOFCARE", "EpisodeOfCare");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__EmergencyEpisode_" + componentIdentifier, "BO-1004100024-PRESENTINGCOMPLAINT", "PresentingComplaint");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__EmergencyEpisode_" + componentIdentifier, "BO-1004100024-CATEGORY", "Category");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__EmergencyEpisode_" + componentIdentifier, "BO-1004100024-MEDPATIENTCONSENT", "MedPatientConsent");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__TriageProtocolAssessment_" + componentIdentifier, "BO-1086100018-ID", "ID_TriageProtocolAssessment");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__TriageProtocolAssessment_" + componentIdentifier, "BO-1086100018-PATIENT", "Patient");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__TriageProtocolAssessment_" + componentIdentifier, "BO-1086100018-EPISODE", "Episode");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__TriageProtocolAssessment_" + componentIdentifier, "BO-1086100018-ATTENDANCE", "Attendance");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__TriageProtocolAssessment_" + componentIdentifier, "BO-1086100018-TRIAGEPRIORITY", "TriagePriority");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__TriageProtocolAssessment_" + componentIdentifier, "BO-1086100018-ISMAIN", "IsMain");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__TriageProtocolAssessment_" + componentIdentifier, "BO-1086100018-TRIAGEPROTOCOL", "TriageProtocol");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.TriageProtocolAssessment.__internal_x_context__TriageProtocolAssessment_" + componentIdentifier, "BO-1086100018-ASSESSMENTDATETIME", "AssessmentDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
