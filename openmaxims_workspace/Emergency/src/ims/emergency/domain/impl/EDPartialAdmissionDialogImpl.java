//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4892.20548)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.core.admin.domain.objects.EmergencyAttendance;
import ims.core.admin.domain.objects.ProviderSystem;
import ims.core.admin.vo.EmergencyAttendanceRefVo;
import ims.core.vo.lookups.MsgEventType;
import ims.core.vo.lookups.QueueType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.domain.base.impl.BaseEDPartialAdmissionDialogImpl;
import ims.emergency.domain.objects.EDPartialAdmission;
import ims.emergency.domain.objects.Tracking;
import ims.emergency.vo.EDPartialAdmissionRefVo;
import ims.emergency.vo.TrackingForEDPartialAdmissionVo;
import ims.emergency.vo.domain.EDPartialAdmissionVoAssembler;
import ims.emergency.vo.domain.TrackingForEDPartialAdmissionVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;
import ims.hl7adtout.domain.objects.EdAttendanceMessageQueue;
import ims.hl7adtout.domain.objects.InPatientADTMessageQueue;
import ims.ocrr.vo.lookups.OrderMessageStatus;
import ims.vo.LookupInstVo;

import java.util.List;

public class EDPartialAdmissionDialogImpl extends BaseEDPartialAdmissionDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.TrackingForEDPartialAdmissionVo getTrackingForEdPartialAdmission(ims.emergency.vo.TrackingRefVo trackingRef)
	{
		if (trackingRef == null || trackingRef.getID_Tracking() == null)
		{
			throw new CodingRuntimeException("Cannot get TrackingAreaRefVo on null Id for Tracking ");
		}

		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer();
		hql.append("select tracking from Tracking as tracking where tracking.id = :trackingID ");

		List<?> list = factory.find(hql.toString(), new String[] { "trackingID" }, new Object[] { trackingRef.getID_Tracking() });
	
		if (list!=null && list.size()>0)
		{
			return TrackingForEDPartialAdmissionVoAssembler.create((Tracking) list.get(0));
		}

		return null;
	}

	public ims.emergency.vo.EDPartialAdmissionVo save(ims.emergency.vo.TrackingForEDPartialAdmissionVo trackingToSave, ims.emergency.vo.EDPartialAdmissionVo edPartialAdmissionToSave) throws ims.domain.exceptions.StaleObjectException
	{
		if (edPartialAdmissionToSave == null && trackingToSave == null)
			throw new CodingRuntimeException("Cannot save null EDPartialAdmissionVo or TrackingForEDPartialAdmissionVo ");

		DomainFactory factory = getDomainFactory();

		if (edPartialAdmissionToSave != null && trackingToSave == null)
		{
			if (!edPartialAdmissionToSave.isValidated())
				throw new DomainRuntimeException("EDPartialAdmissionVo Not Validated.");

			EDPartialAdmission domainEDPartialAdmissionToSave = EDPartialAdmissionVoAssembler.extractEDPartialAdmission(factory, edPartialAdmissionToSave);
			factory.save(domainEDPartialAdmissionToSave);

			return EDPartialAdmissionVoAssembler.create(domainEDPartialAdmissionToSave);
		}
		else if (edPartialAdmissionToSave == null && trackingToSave != null)
		{
			if (!trackingToSave.isValidated())
				throw new DomainRuntimeException("TrackingForEDPartialAdmissionVo Not Validated.");

			Tracking domainTrackingforReferral = TrackingForEDPartialAdmissionVoAssembler.extractTracking(factory, trackingToSave);
			factory.save(domainTrackingforReferral);

			TrackingForEDPartialAdmissionVo track = TrackingForEDPartialAdmissionVoAssembler.create(domainTrackingforReferral);

			if (track != null)
				return track.getCurrentPartialAdmission();
		}
		

		return null;
	}

	public void triggerCancelPartialAdmission(EmergencyAttendanceRefVo edAttendance,EDPartialAdmissionRefVo partialAdmission)throws DomainInterfaceException, StaleObjectException
	{
		triggerPartialAdmissionEvent(edAttendance,partialAdmission,MsgEventType.A11);
	}

	public void triggerCreatePartialAdmission(EmergencyAttendanceRefVo edAttendance,EDPartialAdmissionRefVo partialAdmission)throws DomainInterfaceException, StaleObjectException 
	{
		triggerPartialAdmissionEvent(edAttendance,partialAdmission,MsgEventType.A01);
	}
	
	private void triggerPartialAdmissionEvent(EmergencyAttendanceRefVo emergencyAttendance,EDPartialAdmissionRefVo partialAdmission,LookupInstVo type) throws StaleObjectException
	{
		if(emergencyAttendance!=null&&partialAdmission!=null)
		{
			DomainFactory factory = getDomainFactory();
			String hqlString = "select ot.providerSystem from OutboundTriggers as ot left join ot.queueType as qt left join qt.instance as i"
					+ " where(i.id = "+QueueType.INPATIENTADT.getId()+")";

			java.util.List<ProviderSystem> list = factory.find(hqlString);
			for (ProviderSystem providerSystem : list)
			{
				InPatientADTMessageQueue event = new InPatientADTMessageQueue();
				event.setAttendance((EmergencyAttendance)factory.getDomainObject(emergencyAttendance));
				event.setPartialAdmission((EDPartialAdmission)factory.getDomainObject(partialAdmission));
				event.setProviderSystem(providerSystem);
				event.setWasProcessed(Boolean.FALSE);
				event.setMessageStatus(getDomLookup(OrderMessageStatus.CREATED));
				event.setMsgType(getDomLookup(type));
				event.setQueueType(getDomLookup(QueueType.INPATIENTADT));
				factory.save(event);
			}
		}
	}
	
	
}
