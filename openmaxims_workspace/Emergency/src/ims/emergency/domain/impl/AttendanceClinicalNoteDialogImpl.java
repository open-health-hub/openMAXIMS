//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.clinical.configuration.vo.ClinicalProblemRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.configuration.domain.objects.ClinicianNoteDefaultTextConfig;
import ims.emergency.configuration.domain.objects.TriageNoteDefaultTextConfig;
import ims.emergency.domain.base.impl.BaseAttendanceClinicalNoteDialogImpl;
import ims.emergency.domain.objects.AttendanceClinicalNotes;
import ims.emergency.domain.objects.ReferralToSpecTeam;
import ims.emergency.domain.objects.SeenByHCP;
import ims.emergency.helper.EmergencyHelper;
import ims.emergency.helper.IEmergencyHelper;
import ims.emergency.vo.AttendanceClinicalNotesVo;
import ims.emergency.vo.AttendanceClinicalNotesVoCollection;
import ims.emergency.vo.ClinicianNoteDefaultTextConfigVo;
import ims.emergency.vo.ReferralToSpecialtyTeamVo;
import ims.emergency.vo.SeenByHCPVo;
import ims.emergency.vo.TriageNoteDefaultTextConfigVo;
import ims.emergency.vo.domain.AttendanceClinicalNotesVoAssembler;
import ims.emergency.vo.domain.ClinicianNoteDefaultTextConfigVoAssembler;
import ims.emergency.vo.domain.ReferralToSpecialtyTeamVoAssembler;
import ims.emergency.vo.domain.SeenByHCPVoAssembler;
import ims.emergency.vo.domain.TriageNoteDefaultTextConfigVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;
import ims.vo.ValueObject;

import java.util.List;

public class AttendanceClinicalNoteDialogImpl extends BaseAttendanceClinicalNoteDialogImpl
{

	private static final long serialVersionUID = 1L;

	public AttendanceClinicalNotesVo save(AttendanceClinicalNotesVo attendanceClinicalNoteToSave, ValueObject parentRecord) throws StaleObjectException
	{
		if (attendanceClinicalNoteToSave == null)
			throw new CodingRuntimeException("Cannot save null AttendanceClinicalNotesVo ");

		if (!attendanceClinicalNoteToSave.isValidated())
			throw new DomainRuntimeException("AttendanceClinicalNotesVo Not Validated.");

		DomainFactory factory = getDomainFactory();
			
		AttendanceClinicalNotes domainAttClinicalNote = AttendanceClinicalNotesVoAssembler.extractAttendanceClinicalNotes(factory, attendanceClinicalNoteToSave);
		factory.save(domainAttClinicalNote);
		
		AttendanceClinicalNotesVo attendanceClinicalNoteSaved = AttendanceClinicalNotesVoAssembler.create(domainAttClinicalNote);
		
		if (parentRecord!=null && parentRecord instanceof ReferralToSpecialtyTeamVo)
		{
			ReferralToSpecialtyTeamVo referralToSpecialtyToSave = (ReferralToSpecialtyTeamVo)parentRecord;
			
			referralToSpecialtyToSave=ReferralToSpecialtyTeamVoAssembler.create((ReferralToSpecTeam) factory.getDomainObject(ReferralToSpecTeam.class, referralToSpecialtyToSave.getID_ReferralToSpecTeam()));
			
			referralToSpecialtyToSave.setComments(populateCollComments(referralToSpecialtyToSave.getComments(),attendanceClinicalNoteSaved));
			
			//save referralToSpecialty
			ReferralToSpecTeam domainReferralToSave = ReferralToSpecialtyTeamVoAssembler.extractReferralToSpecTeam(factory, referralToSpecialtyToSave);
			factory.save(domainReferralToSave);
		}
		else if (parentRecord!=null && parentRecord instanceof SeenByHCPVo)
		{
			SeenByHCPVo seenByHcpToSave = (SeenByHCPVo)parentRecord;
			
			seenByHcpToSave=SeenByHCPVoAssembler.create((SeenByHCP) factory.getDomainObject(SeenByHCP.class, seenByHcpToSave.getID_SeenByHCP()));
			
			seenByHcpToSave.setSeenByHCPNotes(populateCollComments(seenByHcpToSave.getSeenByHCPNotes(),attendanceClinicalNoteSaved));
			
			//save referralToSpecialty
			SeenByHCP domainSeenByHcpToSave = SeenByHCPVoAssembler.extractSeenByHCP(factory, seenByHcpToSave);
			factory.save(domainSeenByHcpToSave);		}
		
		return attendanceClinicalNoteSaved;
	}

	private AttendanceClinicalNotesVoCollection populateCollComments(AttendanceClinicalNotesVoCollection collComments, AttendanceClinicalNotesVo voAttendanceClinicalNoteToSave)
	{
		if (collComments==null)
			collComments=new AttendanceClinicalNotesVoCollection();
		else
			collComments=(AttendanceClinicalNotesVoCollection) collComments.clone();
		
		collComments.add(voAttendanceClinicalNoteToSave);
		return collComments;
	}
	
	public CareContextShortVoCollection getCareContextByPatient(PatientRefVo patientRef)
	{
		IEmergencyHelper impl = (IEmergencyHelper)getDomainImpl(EmergencyHelper.class);
		return impl.getCareContextsByPatient(patientRef);
	}

	public Specialty getSpecialtyForHCP(HcpRefVo hcpRef, HcpDisType hcpDisType)
	{
		IEmergencyHelper impl = (IEmergencyHelper)getDomainImpl(EmergencyHelper.class);
		return impl.getSpecialtyForHCP(hcpRef, hcpDisType);
	}

	public TriageNoteDefaultTextConfigVo getDefaultTriageNote(ClinicalProblemRefVo clinicalProblemRef)
	{
		if(clinicalProblemRef == null || clinicalProblemRef.getID_ClinicalProblem() == null)
			throw new CodingRuntimeException("Cannot get default triage note for a null Presenting Problem Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select tn from TriageNoteDefaultTextConfig as tn left join tn.problem as p where p.id = :ProblemId and tn.status.id = :ActiveStatus ";
		
		List<?> defaultTriageNoteList = factory.find(query, new String[] {"ProblemId", "ActiveStatus"}, new Object[] {clinicalProblemRef.getID_ClinicalProblem(), PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if(defaultTriageNoteList == null || defaultTriageNoteList.size() == 0)
			return null;
		
		return TriageNoteDefaultTextConfigVoAssembler.create((TriageNoteDefaultTextConfig) defaultTriageNoteList.get(0));
	}

	//WDEV-17270
	public ClinicianNoteDefaultTextConfigVo getDefaultClinicianNote(ClinicalProblemRefVo clinicalProblemRef)
	{
		if(clinicalProblemRef == null || clinicalProblemRef.getID_ClinicalProblem() == null)
			throw new CodingRuntimeException("Cannot get default clinician note for a null Presenting Problem Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select cn from ClinicianNoteDefaultTextConfig as cn left join cn.problem as p where p.id = :ProblemId and cn.status.id = :ActiveStatus ";
		
		List<?> defaultClinicianNoteList = factory.find(query, new String[] {"ProblemId", "ActiveStatus"}, new Object[] {clinicalProblemRef.getID_ClinicalProblem(), PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if(defaultClinicianNoteList == null || defaultClinicianNoteList.size() == 0)
			return null;
		
		return ClinicianNoteDefaultTextConfigVoAssembler.create((ClinicianNoteDefaultTextConfig) defaultClinicianNoteList.get(0));
	}

}
