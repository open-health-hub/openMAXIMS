//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.emergency.configuration.domain.objects.ClinicianNoteDefaultTextConfig;
import ims.emergency.domain.base.impl.BaseMedicNoteDialogImpl;
import ims.emergency.domain.objects.MedicNotes;
import ims.emergency.vo.domain.ClinicianNoteDefaultTextConfigVoAssembler;
import ims.emergency.vo.domain.MedicNotesVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class MedicNoteDialogImpl extends BaseMedicNoteDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.MedicNotesVo saveNote(ims.emergency.vo.MedicNotesVo note) throws ims.domain.exceptions.StaleObjectException
	{
		if(note == null)
			throw new CodingRuntimeException("Cannot save a null MedicNote.");
		
		if(!note.isValidated())
			throw new CodingRuntimeException("MedicNote is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		MedicNotes doNote = MedicNotesVoAssembler.extractMedicNotes(factory, note);
		factory.save(doNote);
		
		return MedicNotesVoAssembler.create(doNote);
	}

	public ims.emergency.vo.ClinicianNoteDefaultTextConfigVo getDefaultTriageNote(ims.clinical.configuration.vo.ClinicalProblemRefVo problem)
	{
		if(problem == null || problem.getID_ClinicalProblem() == null)
			throw new CodingRuntimeException("Cannot get default medic note for a null Presenting Problem Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select cn from ClinicianNoteDefaultTextConfig as cn left join cn.problem as p where p.id = :ProblemId and cn.status.id = :ActiveStatus ";
		
		List<?> defaultMedicNoteList = factory.find(query, new String[] {"ProblemId", "ActiveStatus"}, new Object[] {problem.getID_ClinicalProblem(), PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if(defaultMedicNoteList == null || defaultMedicNoteList.size() == 0)
			return null;
		
		return ClinicianNoteDefaultTextConfigVoAssembler.create( (ClinicianNoteDefaultTextConfig) defaultMedicNoteList.get(0));
	}
}
