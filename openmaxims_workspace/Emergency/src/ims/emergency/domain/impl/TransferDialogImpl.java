//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4892.20548)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;


import ims.domain.DomainFactory;
import ims.emergency.domain.base.impl.BaseTransferDialogImpl;
import ims.emergency.domain.objects.EDPartialAdmission;
import ims.emergency.domain.objects.EDTransfer;
import ims.emergency.vo.EDPartialAdmissionVo;
import ims.emergency.vo.EDTransferVo;
import ims.emergency.vo.domain.EDPartialAdmissionVoAssembler;
import ims.emergency.vo.domain.EDTransferVoAssembler;
import ims.emergency.vo.lookups.AllocationStatus;
import ims.framework.exceptions.CodingRuntimeException;

public class TransferDialogImpl extends BaseTransferDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.EDTransferVo saveEDTransfer(EDTransferVo record, EDPartialAdmissionVo partialadmis) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if(record == null)
			throw new CodingRuntimeException("Cannot save a null EDTransfer record.");
		
				
		DomainFactory factory = getDomainFactory();
		EDTransfer doEDTransfer = EDTransferVoAssembler.extractEDTransfer(factory, record);
		
		factory.save(doEDTransfer);
		
		if( partialadmis != null )
		{
			partialadmis.setAllocatedStatus(AllocationStatus.CANCELLED_ADMISSION);
			EDPartialAdmission  doEDPartialAdmission = EDPartialAdmissionVoAssembler.extractEDPartialAdmission(factory, partialadmis);
			factory.save(doEDPartialAdmission);
		}
		
		return EDTransferVoAssembler.create(doEDTransfer);
	}

	public ims.emergency.vo.EDTransferVo getEDTransferVo(ims.emergency.vo.EDTransferRefVo edTransferRef)
	{
		if(edTransferRef == null || edTransferRef.getID_EDTransfer() == null)
			throw new CodingRuntimeException("Cannnot get EDTransferRefVo for a null Id.");
		
		return EDTransferVoAssembler.create((EDTransfer) getDomainFactory().getDomainObject(EDTransfer.class, edTransferRef.getID_EDTransfer()));
	}


	
}
