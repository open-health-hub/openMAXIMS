//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.clinical.vo.ClinicalProblemVo;
import ims.clinical.vo.ClinicalProblemVoCollection;
import ims.clinical.vo.domain.ClinicalProblemVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.configuration.domain.objects.ClinicianNoteDefaultTextConfig;
import ims.emergency.configuration.vo.ClinicianNoteDefaultTextConfigRefVo;
import ims.emergency.domain.base.impl.BaseClinicianNoteTemplateConfigurationImpl;
import ims.emergency.vo.ClinicianNoteDefaultTextConfigVo;
import ims.emergency.vo.ClinicianNoteDefaultTextConfigVoCollection;
import ims.emergency.vo.domain.ClinicianNoteDefaultTextConfigVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;
import ims.vo.LookupInstVo;

import java.util.ArrayList;

public class ClinicianNoteTemplateConfigurationImpl extends BaseClinicianNoteTemplateConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	public ClinicalProblemVoCollection listProblems(String problemName)
	{
		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		if (problemName == null || (problemName != null && problemName.length() == 0))
			throw new DomainRuntimeException("String for search is null.");

		String probNameLite = problemName != null ? problemName.toUpperCase() + "%" : "%%";

		StringBuffer hql = new StringBuffer();

		hql.append(" select probl from ClinicalProblem as probl left join probl.keywords as k where (probl.pCName like :ClinicalProblemSearchText or k.keyword like :ClinicalProblemSearchText) and probl.isActive = 1");
		hql.append(" order by UPPER(probl.pCName) asc");

		markers.add("ClinicalProblemSearchText");
		values.add(probNameLite);

		return ClinicalProblemVoAssembler.createClinicalProblemVoCollectionFromClinicalProblem(factory.find(hql.toString(), markers, values));
	}

	public ClinicianNoteDefaultTextConfigVo saveClinicianNote(ClinicianNoteDefaultTextConfigVo clinicianNoteToSave) throws StaleObjectException
	{
		if (clinicianNoteToSave == null)
			throw new CodingRuntimeException("Cannot save null ClinicianNote");

		if (!clinicianNoteToSave.isValidated())
			throw new DomainRuntimeException("ClinicianNoteVo Not Validated.");

		DomainFactory factory = getDomainFactory();
		ClinicianNoteDefaultTextConfig domainClinicianNote = ClinicianNoteDefaultTextConfigVoAssembler.extractClinicianNoteDefaultTextConfig(factory, clinicianNoteToSave);

		factory.save(domainClinicianNote);

		return ClinicianNoteDefaultTextConfigVoAssembler.create(domainClinicianNote);
	}

	public ClinicianNoteDefaultTextConfigVoCollection listClinicianNotes(ClinicalProblemVo presentingProblem, LookupInstVo status)
	{
		DomainFactory factory = getDomainFactory();

		String hql = " select cn from ClinicianNoteDefaultTextConfig as cn ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		if (presentingProblem != null)
		{
			condStr.append(andStr + " where cn.problem.id = :cName");
			markers.add("cName");
			values.add(presentingProblem.getID_ClinicalProblem());
			andStr = " and ";
		}
		else
			andStr = " where ";

		if (status != null)
		{
			condStr.append(andStr + " cn.status.id = :cStatus");
			markers.add("cStatus");
			values.add(status.getID());
		}

		condStr.append(" order by UPPER(cn.problem.pCName) asc");
		
		hql += condStr.toString();
		return ClinicianNoteDefaultTextConfigVoAssembler.createClinicianNoteDefaultTextConfigVoCollectionFromClinicianNoteDefaultTextConfig(factory.find(hql, markers, values));
	}

	public Boolean isStale(ClinicianNoteDefaultTextConfigVo clinicianNote)
	{
		if (clinicianNote == null || clinicianNote.getID_ClinicianNoteDefaultTextConfig() == null)
		{
			throw new CodingRuntimeException("Cannot get TrackingConfigurationVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();
		ClinicianNoteDefaultTextConfig domainClinicianNote = (ClinicianNoteDefaultTextConfig) factory.getDomainObject(ClinicianNoteDefaultTextConfig.class, clinicianNote.getID_ClinicianNoteDefaultTextConfig());

		if (domainClinicianNote == null)
		{
			return true;
		}

		if (domainClinicianNote.getVersion() > clinicianNote.getVersion_ClinicianNoteDefaultTextConfig())
		{
			return true;
		}

		return false;
	}

	public ClinicianNoteDefaultTextConfigVo getClinicianNote(ClinicianNoteDefaultTextConfigRefVo clinicianNote)
	{
		if (clinicianNote == null || clinicianNote.getID_ClinicianNoteDefaultTextConfig() == null)
		{
			throw new CodingRuntimeException("Cannot get ClinicianNoteDefaultTextConfigVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		ClinicianNoteDefaultTextConfig domainClinicianNote = (ClinicianNoteDefaultTextConfig) factory.getDomainObject(ClinicianNoteDefaultTextConfig.class, clinicianNote.getID_ClinicianNoteDefaultTextConfig());

		return ClinicianNoteDefaultTextConfigVoAssembler.create(domainClinicianNote);
	}

}
