//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import java.util.List;


import ims.domain.DomainFactory;
import ims.emergency.domain.base.impl.BaseSystemsReviewDialogImpl;
import ims.emergency.domain.objects.SystemsReview;
import ims.emergency.vo.SystemReviewForPresentingProblemConfigVoCollection;
import ims.emergency.vo.domain.SystemReviewForPresentingProblemConfigVoAssembler;
import ims.emergency.vo.domain.SystemReviewVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class SystemsReviewDialogImpl extends BaseSystemsReviewDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.SystemReviewVo saveSystemReview(ims.emergency.vo.SystemReviewVo record) throws ims.domain.exceptions.StaleObjectException
	{
		if( record == null )
			throw new CodingRuntimeException("SystemReviewVo not provided");
		
		DomainFactory factory = getDomainFactory();
	
		SystemsReview doSystemReview= SystemReviewVoAssembler.extractSystemsReview(factory, record);
		factory.save(doSystemReview);
		return SystemReviewVoAssembler.create(doSystemReview);
	}

	public ims.emergency.vo.SystemReviewForPresentingProblemConfigVo getSystemReviewForPresentingProblemConfigVo(ims.clinical.configuration.vo.ClinicalProblemRefVo clinicalprobelmRef)
	{
		if( clinicalprobelmRef == null )
			throw new CodingRuntimeException("Cannot get clinicalprobelmRef");
		
		DomainFactory factory = getDomainFactory();
		
		String hsql = "select s1_1	from SystemReviewForPresentingProblemConfig as s1_1 left join s1_1.problem as c1_1	where  (c1_1.id = :idproblem)";
	
		List systemrev = factory.find(hsql, new String[] {"idproblem"}, new Object[] {clinicalprobelmRef.getID_ClinicalProblem()});
		if(	systemrev != null && systemrev.size() > 0)
		{
			SystemReviewForPresentingProblemConfigVoCollection tempColl = SystemReviewForPresentingProblemConfigVoAssembler.createSystemReviewForPresentingProblemConfigVoCollectionFromSystemReviewForPresentingProblemConfig(systemrev);
			if(	tempColl != null && tempColl.size() > 0)
			{
				return tempColl.get(0);
			}
		}
		return null;
	}
}
