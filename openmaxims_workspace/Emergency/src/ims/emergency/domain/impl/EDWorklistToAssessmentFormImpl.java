//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;


import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.emergency.configuration.domain.objects.AttendanceKPIConfig;
import ims.emergency.domain.base.impl.BaseEDWorklistToAssessmentFormImpl;
import ims.emergency.domain.objects.Tracking;
import ims.emergency.vo.AttendanceKPIConfigForClinicianAndTriageWorklistVo;
import ims.emergency.vo.TrackingAreaShortVo;
import ims.emergency.vo.TrackingAreaShortVoCollection;
import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo;
import ims.emergency.vo.TrackingForDisplayClinicianAndTriageWorklistVo;
import ims.emergency.vo.TrackingForDisplayClinicianAndTriageWorklistVoCollection;
import ims.emergency.vo.TrackingRefVo;
import ims.emergency.vo.domain.AttendanceKPIConfigForClinicianAndTriageWorklistVoAssembler;
import ims.emergency.vo.domain.TrackingAreaShortVoAssembler;
import ims.emergency.vo.domain.TrackingForClinicianWorklistAndTriageVoAssembler;
import ims.emergency.vo.domain.TrackingForDisplayClinicianAndTriageWorklistVoAssembler;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;

import java.util.ArrayList;
import java.util.List;

public class EDWorklistToAssessmentFormImpl extends BaseEDWorklistToAssessmentFormImpl
{

	private static final long serialVersionUID = 1L;

	//WDEV-18001
	public ims.emergency.vo.TrackingForDisplayClinicianAndTriageWorklistVoCollection listPatientWaitings(ims.emergency.vo.lookups.TrackingStatus status, ILocation edLocation, HcpRefVo allocatedHcp)
	{


		DomainFactory factory = getDomainFactory();
		
		StringBuilder hqlJoins = new StringBuilder("select tr , (select count (alert.id) from PatientAlert as alert where ( alert.isRIE = false or alert.isRIE is null ) and alert.isCurrentlyActiveAlert = true and alert.patient.id = p.id), (select count (allergy.id) from PatientAllergy as allergy where ( allergy.isRIE = false or allergy.isRIE is null ) and allergy.isCurrentlyActiveAllergy = true and allergy.patient.id = p.id) from Tracking as tr left join tr.patient as p left join tr.attendance as att ");
		StringBuilder hqlConditions = new StringBuilder(" where ((tr.isDischarged is null or tr.isDischarged = 0) and att.outcome is null) ");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		String and = " and ";
		
		if(edLocation != null)
		{
			hqlJoins.append(" left join tr.eDLocation as loc ");
			
			hqlConditions.append(and);
			hqlConditions.append(" loc.id = :locId ");
			paramNames.add("locId");
			paramValues.add(edLocation.getID());
			and = " and ";
		}
		
		if(status != null)
		{
			hqlJoins.append(" left join tr.currentStatus as cs left join cs.status as s ");
			
			hqlConditions.append(and);
			hqlConditions.append(" s.id = :statusId ");
			paramNames.add("statusId");
			paramValues.add(status.getID());
			and = " and ";
		}
		
		//WDEV-16816
		if(allocatedHcp != null && allocatedHcp.getID_Hcp() != null)
		{
			HcpLiteVo tempHcpLiteVo = HcpLiteVoAssembler.create((Hcp) factory.getDomainObject(Hcp.class, allocatedHcp.getID_Hcp()));
			
			if (tempHcpLiteVo!=null && HcpDisType.MEDICAL.equals(tempHcpLiteVo.getHcpType()))
			{
				String[] allocatedHcpJoin = {" left join tr.seenBy as seenByHcp left join seenByHcp.allocatedMedic  as medic "};
			
			
    			for(int a=0; a<allocatedHcpJoin.length; a++)
    			{
    				if(hqlJoins.indexOf(allocatedHcpJoin[a]) < 0)
    				{
    					hqlJoins.append(allocatedHcpJoin[a]);
    				}
    			}
    			
    			hqlConditions.append(" and medic.id = :HcpId " );
    			paramNames.add("HcpId");
    			paramValues.add(allocatedHcp.getID_Hcp());
			}
			else if (tempHcpLiteVo!=null && HcpDisType.NURSING.equals(tempHcpLiteVo.getHcpType()))
			{
				String[] allocatedNurseJoin = {" left join tr.seenBy as seenByHcp left join seenByHcp.allocatedNurse as nurse "};
			
    			for(int a=0; a<allocatedNurseJoin.length; a++)
    			{
    				if(hqlJoins.indexOf(allocatedNurseJoin[a]) < 0)
    				{
    					hqlJoins.append(allocatedNurseJoin[a]);
    				}
    			}
    			
    			hqlConditions.append(" and nurse.id = :HcpId ");
    			paramNames.add("HcpId");
    			paramValues.add(allocatedHcp.getID_Hcp());
			}
			
		}
		
		//WDEV-18001
		long startTime = System.currentTimeMillis();
		
		List<?> patients = factory.find(hqlJoins.append(hqlConditions.toString()).toString(), paramNames, paramValues);
		
		long endTime = System.currentTimeMillis();
		long miliseconds = endTime - startTime;
		System.out.println("Time Factory.Find : " + miliseconds);
		
		
		if(patients == null || patients.size() == 0)
			return null;
		
		TrackingForDisplayClinicianAndTriageWorklistVoCollection coll = new TrackingForDisplayClinicianAndTriageWorklistVoCollection();//WDEV-18001
		
		//WDEV-18001
		startTime = System.currentTimeMillis();
		
		for(int i=0; i<patients.size(); i++)
		{
			Object[] items = (Object[]) patients.get(i);
			TrackingForDisplayClinicianAndTriageWorklistVo tracking = null;//WDEV-18001
			
			
			if(items[0] instanceof Tracking)
			{	
				//WDEV-18001
				long startTime1 = System.currentTimeMillis();
				
				tracking = TrackingForDisplayClinicianAndTriageWorklistVoAssembler.create((Tracking) items[0]);
				
				long endTime1 = System.currentTimeMillis();
				long miliseconds1 = endTime1 - startTime1;
				System.out.println("Time Assembly TrackingForClinicianWorklistAndTriageVo : " + miliseconds1);
			}
			
			
			if(items[1] instanceof Long)
			{
				if(tracking != null && tracking.getPatient() != null)
				{
					tracking.getPatient().setHasAlerts(((Long) items[1]) > 0 ? Boolean.TRUE : Boolean.FALSE);
				}
			}
			
			if(items[2] instanceof Long)
			{
				if(tracking != null && tracking.getPatient() != null)
					
				{
					tracking.getPatient().setHasAllergies(((Long) items[2]) > 0 ? Boolean.TRUE : Boolean.FALSE);
				}
			}
			
			coll.add(tracking);
		}
		
		endTime = System.currentTimeMillis();
		miliseconds = endTime - startTime;
		System.out.println("Time Assembler : " + miliseconds);
		return coll;

	}

	
	public AttendanceKPIConfigForClinicianAndTriageWorklistVo getAttendanceKPIConfigForTriage(ILocation edLocation) 
	{
		if(edLocation == null)
			throw new CodingRuntimeException("Cannot get AttendanceKPIConfig for a null EDLocation Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select kpi from AttendanceKPIConfig as kpi left join kpi.eDLocation as loc where loc.id = :EDLoc";
		
		List<?> list = factory.find(query, new String[] {"EDLoc"}, new Object[] {edLocation.getID()});
		
		if(list == null || list.size() == 0)
			return null;
		
		return AttendanceKPIConfigForClinicianAndTriageWorklistVoAssembler.create((AttendanceKPIConfig) list.get(0));

	}


	//wdev-17138
	public PatientShort getPatientShort(PatientRefVo record) 
	{
		if(record == null || record.getID_Patient() == null)
			throw new CodingRuntimeException("Cannnot get Patient for a null Id.");
		
		return PatientShortAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class, record.getID_Patient()));
	
	}


	//wdev-17326  //WDEV-18001
	public TrackingForDisplayClinicianAndTriageWorklistVoCollection listTrackingPatients( TrackingAreaShortVo trackingarea, TrackingStatus trackingStatus,ILocation edLoc) 
	{
	    DomainFactory factory = getDomainFactory();
		
	//	StringBuilder hqlJoins = new StringBuilder("select tr from Tracking as tr left join tr.patient as p left join tr.attendance as att left join tr.currentArea as ta");
		
		StringBuilder hqlJoins = new StringBuilder("select tr , (select count (alert.id) from PatientAlert as alert where ( alert.isRIE = false or alert.isRIE is null ) " +
				"and alert.isCurrentlyActiveAlert = true and alert.patient.id = p.id), " +
				"(select count (allergy.id) from PatientAllergy as allergy where ( allergy.isRIE = false or allergy.isRIE is null ) " +
				"and allergy.isCurrentlyActiveAllergy = true and allergy.patient.id = p.id) " +
				"from Tracking as tr left join tr.patient as p left join tr.attendance as att left join tr.currentArea as ta");
		StringBuilder hqlConditions = new StringBuilder(" where ");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		//WDEV-18293
		String and = "";

		if( trackingarea != null )
		{
			if (trackingarea.getIsOverallViewIsNotNull() && trackingarea.getIsOverallView().equals(true))
			{
				hqlConditions.append(" ta.id is not null ");

			}
			else
			{
				hqlConditions.append(" ta.id = :TrackingAreaId ");
				paramNames.add("TrackingAreaId");
				paramValues.add(trackingarea.getID_TrackingArea());
			}
			//WDEV-18293
			and = " and ";
		}
					
		if( edLoc != null)
		{
			hqlJoins.append(" left join tr.eDLocation as loc ");
			
			hqlConditions.append(and);
			hqlConditions.append(" loc.id = :locId ");
			paramNames.add("locId");
			paramValues.add(edLoc.getID());
			and = " and ";
		}
		else
		{
			if( trackingarea != null )
			{
				hqlJoins.append(" left join tr.eDLocation as loc ");
				
				hqlConditions.append(and);
				hqlConditions.append(" loc.id = :locId ");
				paramNames.add("locId");
				paramValues.add(trackingarea.getEDLocation().getID_Location());
				and = " and ";
			}
		}
		
		if( trackingStatus != null)
		{
						
			hqlJoins.append(" left join tr.currentStatus as cs left join cs.status as s ");
			
			hqlConditions.append(and);
			hqlConditions.append(" s.id = :statusId ");
			paramNames.add("statusId");
			paramValues.add(trackingStatus.getID());
			and = " and ";
		}
		
		//WDEV-18001
		long startTime = System.currentTimeMillis();
		
		List<?> patients = factory.find(hqlJoins.append(hqlConditions.toString()).toString(), paramNames, paramValues);
		
		long endTime = System.currentTimeMillis();
		long miliseconds = endTime - startTime;
		System.out.println("Time Factory.Find : " + miliseconds);
		
		TrackingForDisplayClinicianAndTriageWorklistVoCollection coll = new TrackingForDisplayClinicianAndTriageWorklistVoCollection();//WDEV-18001
		
		//WDEV-18001
		startTime = System.currentTimeMillis();
		
		if( patients != null && patients.size() > 0 )
		{
			for(int i=0; i<patients.size(); i++)
			{
				Object[] items = (Object[]) patients.get(i);
				TrackingForDisplayClinicianAndTriageWorklistVo tracking = null;//WDEV-18001
				
				if(items[0] instanceof Tracking)
				{
					//WDEV-18001
					long startTime1 = System.currentTimeMillis();
					
					tracking = TrackingForDisplayClinicianAndTriageWorklistVoAssembler.create((Tracking) items[0]);//WDEV-18001
					
					long endTime1 = System.currentTimeMillis();
					long miliseconds1 = endTime1 - startTime1;
					System.out.println("Time Assembly TrackingForDisplayClinicianAndTriageWorklistVo  : " + miliseconds1);
				}
				
				if(items[1] instanceof Long)
				{
					if(tracking != null && tracking.getPatient() != null)
					{
						tracking.getPatient().setHasAlerts(((Long) items[1]) > 0 ? Boolean.TRUE : Boolean.FALSE);
					}
				}
				
				if(items[2] instanceof Long)
				{
					if(tracking != null && tracking.getPatient() != null)
						
					{
						tracking.getPatient().setHasAllergies(((Long) items[2]) > 0 ? Boolean.TRUE : Boolean.FALSE);
					}
				}
				
				coll.add(tracking);
			}
		}
	
		//WDEV-18001
		endTime = System.currentTimeMillis();
		miliseconds = endTime - startTime;
		System.out.println("Time Assembler Collection: " + miliseconds);
		
		return coll;//WDEV-17757
	}


	//wdev-17326
	public TrackingAreaShortVoCollection listTrackingAreas(ILocation edloc)
	{
		
		if( edloc == null)
			throw new CodingRuntimeException("Cannot list Tracking Area for a null EDLocation Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select ta   from TrackingConfiguration as trc left join trc.areas as ta where ta.eDLocation.id = :EDLocationId and ta.status.id = :ActiveStatus and ta.isRegistrationArea = 0 order by index(ta)";//order by upper(ta.areaDisplayName)";
		List<?> list = factory.find(query, new String[] {"EDLocationId", "ActiveStatus"}, new Object[] {edloc.getID(), PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if( list != null && list.size() > 0)
			return TrackingAreaShortVoAssembler.createTrackingAreaShortVoCollectionFromTrackingArea(list);
		
		
		return null;
		
		
	}


	//WDEV-18001
	public TrackingForClinicianWorklistAndTriageVo getTrackingForClinicianWorklistAndTriage(TrackingRefVo trackingRef)
	{
		if(trackingRef == null || trackingRef.getID_Tracking() == null)
			throw new CodingRuntimeException("Cannnot get Tracking for a null Id.");
		
		return TrackingForClinicianWorklistAndTriageVoAssembler.create((Tracking) getDomainFactory().getDomainObject(Tracking.class, trackingRef.getID_Tracking()));
	
	}


	

	
	/*public AttendanceKPIConfigForTriageVo getAttendanceKPIConfigForTriage(ILocation edLocation) 
	{
		if(edLocation == null)
			throw new CodingRuntimeException("Cannot get AttendanceKPIConfig for a null EDLocation Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select kpi from AttendanceKPIConfig as kpi left join kpi.eDLocation as loc where loc.id = :EDLoc";
		
		List<?> list = factory.find(query, new String[] {"EDLoc"}, new Object[] {edLocation.getID()});
		
		if(list == null || list.size() == 0)
			return null;
		
		return AttendanceKPIConfigForTriageVoAssembler.create((AttendanceKPIConfig) list.get(0));
	}


	
	public AttendanceKPIConfigForClinicianWorklistVo getAttendanceKPIConfigForClinicianWorklist(ILocation edLocation) 
	{
		if(edLocation == null)
			throw new CodingRuntimeException("Cannot get AttendanceKPIConfig for a null EDLocation Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select kpi from AttendanceKPIConfig as kpi left join kpi.eDLocation as loc where loc.id = :EDLoc";
		
		List<?> list = factory.find(query, new String[] {"EDLoc"}, new Object[] {edLocation.getID()});
		
		if(list == null || list.size() == 0)
			return null;
		
		return AttendanceKPIConfigForClinicianWorklistVoAssembler.create((AttendanceKPIConfig) list.get(0));
	}*/

	
}
