//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import java.util.List;

import ims.core.clinical.domain.objects.PatientWoundImages;
import ims.core.clinical.domain.objects.WoundImage;
import ims.core.clinical.vo.WoundImageRefVo;
import ims.domain.DomainFactory;

import ims.emergency.domain.base.impl.BaseWoundImagesCCImpl;
import ims.emergency.vo.WoundImagesVo;
import ims.emergency.vo.domain.EDAssessmentWoundImagesVoAssembler;
import ims.emergency.vo.domain.WoundImagesVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class WoundImagesCCImpl extends BaseWoundImagesCCImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.EDAssessmentWoundImagesVo getEDAssessmentWoundImageByPatient(ims.core.patient.vo.PatientRefVo patRef)
	{
		DomainFactory factory = getDomainFactory();
		
		if (patRef == null )
		{
			throw new CodingRuntimeException("Cannot get EDAssessmentWoundImagesVo on null Patient ");
		}
		
		StringBuffer hql = new StringBuffer();
		 
		hql.append("select e1_1 from PatientWoundImages as e1_1 left join e1_1.patient as p1_1 where (p1_1.id = :patid)");
	
		List<?> list = factory.find(hql.toString(), new String[] {"patid"}, new Object[] {patRef.getID_Patient()	});
			
		if (list!=null && list.size()>0)
			return EDAssessmentWoundImagesVoAssembler.createEDAssessmentWoundImagesVoCollectionFromPatientWoundImages(list).get(0);
		
		return null;
		
	}

	public ims.emergency.vo.EDAssessmentWoundImagesVo saveRecord(ims.emergency.vo.EDAssessmentWoundImagesVo record) throws ims.domain.exceptions.StaleObjectException
	{
		if (record == null)
			throw new CodingRuntimeException("Cannot save null EDAssessmentWoundImagesVo ");

		DomainFactory factory = getDomainFactory();
		PatientWoundImages domainEDAssessmentWoundImages = EDAssessmentWoundImagesVoAssembler.extractPatientWoundImages(factory, record);

		factory.save(domainEDAssessmentWoundImages);

		return EDAssessmentWoundImagesVoAssembler.create(domainEDAssessmentWoundImages);
	}

	

	
	public WoundImagesVo getWoundImagesVo(WoundImageRefVo woundImageRef)
	{
		if (woundImageRef == null || woundImageRef.getID_WoundImage()== null)
		{
			throw new CodingRuntimeException("Cannot get EDWoundImagesRefVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		WoundImage domainEDWoundImages = (WoundImage) factory.getDomainObject(WoundImage.class, woundImageRef.getID_WoundImage());
		
		return WoundImagesVoAssembler.create(domainEDWoundImages);
	}
}
