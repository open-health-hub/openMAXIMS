//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.domain.base.impl.BaseRelevantPMHImpl;
import ims.emergency.domain.objects.PatientRelevantPMH;
import ims.emergency.domain.objects.Triage;
import ims.emergency.vo.EmergencyAttendanceForPatientMedsVo;
import ims.emergency.vo.PatientRelevantPMHVo;
import ims.emergency.vo.PatientRelevantPMHVoCollection;
import ims.emergency.vo.TriageForRelvantPMHVo;
import ims.emergency.vo.domain.EmergencyAttendanceForPatientMedsVoAssembler;
import ims.emergency.vo.domain.PatientRelevantPMHVoAssembler;
import ims.emergency.vo.domain.TriageForRelvantPMHVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class RelevantPMHImpl extends BaseRelevantPMHImpl
{

	private static final long serialVersionUID = 1L;

	//WDEV-17602
	public PatientRelevantPMHVoCollection getAllRelevantPMH(PatientRefVo patientRefVo)
	{
		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		if (patientRefVo == null || patientRefVo.getID_Patient() == null)
		{
			throw new CodingRuntimeException("Cannot get patientRefVo on null Id ");
		}

		StringBuffer hql = new StringBuffer();

		hql.append(" select pmh from PatientRelevantPMH as pmh left join pmh.patient as pat where pat.id = :patientID");
		hql.append(" order by pmh.attendance.startDateTime desc");
	
		markers.add("patientID");
		values.add(patientRefVo.getID_Patient());

		return PatientRelevantPMHVoAssembler.createPatientRelevantPMHVoCollectionFromPatientRelevantPMH(factory.find(hql.toString(), markers, values));
	}

	public PatientRelevantPMHVo getRelevantPMH(CareContextRefVo careContextRefVo)
	{
		DomainFactory factory = getDomainFactory();

		if (careContextRefVo == null || careContextRefVo.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get careContextRefVo on null Id ");
		}

		StringBuffer hql = new StringBuffer();

		hql.append(" select PMH from PatientRelevantPMH as PMH left join PMH.attendance as contextID where contextID.id = :contextID");

		List<?>  list =  factory.find(hql.toString(), new String[] {"contextID"}, new Object[] {careContextRefVo.getID_CareContext()});
		
		if (list!=null && list.size()>0)
		return PatientRelevantPMHVoAssembler.createPatientRelevantPMHVoCollectionFromPatientRelevantPMH(list).get(0);

		return null;
	}

	public PatientRelevantPMHVo savePatientPMH(PatientRelevantPMHVo patientPMHToSave) throws StaleObjectException, UniqueKeyViolationException
	{
		if (patientPMHToSave == null)
			throw new CodingRuntimeException("Cannot save null PatientPMH");

		if (!patientPMHToSave.isValidated())
			throw new DomainRuntimeException("PatientPMHVo Not Validated.");

		DomainFactory factory = getDomainFactory();
		PatientRelevantPMH domainPatientPMH = PatientRelevantPMHVoAssembler.extractPatientRelevantPMH(factory, patientPMHToSave);

		factory.save(domainPatientPMH);

		return PatientRelevantPMHVoAssembler.create(domainPatientPMH);
	}

	public EmergencyAttendanceForPatientMedsVo getEmergencyAttendance(CareContextRefVo careContextRef)
	{
		
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get EmergencyAttendanceVo on null Id ");
		}
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer();
		
		hql.append("select emergAtt from EmergencyAttendance as emergAtt where emergAtt.careContext.id = :careContextID ");
	
		List<?> list = factory.find(hql.toString(), new String[] {"careContextID"}, new Object[] {careContextRef.getID_CareContext()});
			
		if (list!=null && list.size()>0)
			return EmergencyAttendanceForPatientMedsVoAssembler.createEmergencyAttendanceForPatientMedsVoCollectionFromEmergencyAttendance(list).get(0);
		
		return null;
	}

	//WDEV-17602
	public TriageForRelvantPMHVo getTriageByCareContext(CareContextRefVo careContextRef)
	{
		DomainFactory factory = getDomainFactory();
		
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get TriageForPatientMedsVo on null Id ");
		}
		
		StringBuffer hql = new StringBuffer();
		
		hql.append("select triage from Triage as triage where triage.attendance.id = :careContextID ");
	
		List<?> list = factory.find(hql.toString(), new String[] {"careContextID"}, new Object[] {careContextRef.getID_CareContext()});
			
		if (list!=null && list.size()>0)
			return TriageForRelvantPMHVoAssembler.create((Triage)list.get(0));
		
		return null;
	}
}
