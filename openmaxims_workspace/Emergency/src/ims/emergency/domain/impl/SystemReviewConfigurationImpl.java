//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.helper.Keywords;

import ims.clinical.vo.ClinicalProblemVoCollection;
import ims.clinical.vo.domain.ClinicalProblemVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.emergency.configuration.domain.objects.SystemReviewForPresentingProblemConfig;
import ims.emergency.domain.base.impl.BaseSystemReviewConfigurationImpl;
import ims.emergency.vo.SystemReviewForPresentingProblemConfigVo;
import ims.emergency.vo.SystemReviewForPresentingProblemConfigVoCollection;
import ims.emergency.vo.domain.SystemReviewForPresentingProblemConfigVoAssembler;

public class SystemReviewConfigurationImpl extends BaseSystemReviewConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.ClinicalProblemVoCollection listClinicalProblems(String filter) throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from ClinicalProblem x");
		
		 
		String ret = "";
		if(filter!=null)
			ret = filter.replaceAll("%", "");
		if(ret.length()!=0)
			hql.append(" join x.keywords as kw");
		
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		hql.append(" where x.isActive = :isActive");
		names.add("isActive");
		values.add(Boolean.TRUE);	
						
		List clinProblems =  Keywords.searchByKeywords(factory, filter, hql.toString(), names, values);
		if(clinProblems != null && clinProblems.size() > 0)
		{
			ClinicalProblemVoCollection tempColl = ClinicalProblemVoAssembler.createClinicalProblemVoCollectionFromClinicalProblem(clinProblems);
			return tempColl;
		}
				
		return null;
	}

	

	public ims.emergency.vo.SystemReviewForPresentingProblemConfigVo gettSystemReviewConfigurationVo(ims.clinical.configuration.vo.ClinicalProblemRefVo clinicalProblemRef)
	{
		if(	clinicalProblemRef == null)
			return null;
		DomainFactory factory = getDomainFactory();	
		String hsql = "select s1_1 from SystemReviewForPresentingProblemConfig as s1_1 left join s1_1.problem as c1_1	where	(c1_1.id = :id)";
		List sys = factory.find(hsql, new String[] {"id"}, new Object[] {clinicalProblemRef.getID_ClinicalProblem()});
		if(sys != null && sys.size() > 0)
		{
			SystemReviewForPresentingProblemConfigVoCollection tempColl = SystemReviewForPresentingProblemConfigVoAssembler.createSystemReviewForPresentingProblemConfigVoCollectionFromSystemReviewForPresentingProblemConfig(sys);
			if(	tempColl != null)
				return tempColl.get(0);
		}
		return null;
		 
	}

	
	public SystemReviewForPresentingProblemConfigVo save(SystemReviewForPresentingProblemConfigVo record)	throws StaleObjectException, UniqueKeyViolationException 
	{
		if(	record == null)
			throw new DomainRuntimeException(" SystemReviewForPresentingProblemConfigVo has not be validated.");
		
		DomainFactory factory = getDomainFactory();	
		SystemReviewForPresentingProblemConfig doSystemReviewForPresentingProblemConfig = SystemReviewForPresentingProblemConfigVoAssembler.extractSystemReviewForPresentingProblemConfig(factory, record);
		
		try
		{
			factory.save(doSystemReviewForPresentingProblemConfig);
		}
		catch(UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException();
		}
		
		return SystemReviewForPresentingProblemConfigVoAssembler.create(doSystemReviewForPresentingProblemConfig);
	}
}
