//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4876.20447)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.emergency.domain.base.impl.BaseEDWhiteBoardDialogImpl;
import ims.emergency.vo.TrackingAreaShortVo;
import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVoCollection;
import ims.emergency.vo.domain.TrackingAreaShortVoAssembler;
import ims.emergency.vo.domain.TrackingForClinicianWorklistAndTriageVoAssembler;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;

import java.util.ArrayList;
import java.util.List;

public class EDWhiteBoardDialogImpl extends BaseEDWhiteBoardDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.TrackingAreaShortVoCollection listTrackingAreas(ims.framework.interfaces.ILocation edLoc)
	{
		if( edLoc == null)
			throw new CodingRuntimeException("Cannot list Tracking Area for a null EDLocation Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select ta   from TrackingConfiguration as trc left join trc.areas as ta where ta.eDLocation.id = :EDLocationId and ta.status.id = :ActiveStatus and ta.isRegistrationArea = 0 order by index(ta)";//order by upper(ta.areaDisplayName)";
		List<?> list = factory.find(query, new String[] {"EDLocationId", "ActiveStatus"}, new Object[] {edLoc.getID(), PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if( list != null && list.size() > 0)
			return TrackingAreaShortVoAssembler.createTrackingAreaShortVoCollectionFromTrackingArea(list);
		
		
		return null;
	}

	public TrackingForClinicianWorklistAndTriageVoCollection listTrackingPatients(TrackingAreaShortVo trackingArea, TrackingStatus trackingStatus, ILocation edLoc)
	{
		DomainFactory factory = getDomainFactory();
		
		StringBuilder hqlJoins = new StringBuilder("select tr from Tracking as tr left join tr.patient as p left join tr.attendance as att left join tr.currentArea as ta");
		StringBuilder hqlConditions = new StringBuilder(" where ");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		String and = " and ";
		
		if( trackingArea != null )
		{
			if (trackingArea.getIsOverallViewIsNotNull() && trackingArea.getIsOverallView().equals(true))
    		{
    			hqlConditions.append(" ta.id is not null ");
    			
    		}
    		else
    		{
    			hqlConditions.append(" ta.id = :TrackingAreaId ");
    			paramNames.add("TrackingAreaId");
    			paramValues.add(trackingArea.getID_TrackingArea());
    		}
		}
		
		if( edLoc != null)
		{
			hqlJoins.append(" left join tr.eDLocation as loc ");
			
			hqlConditions.append(and);
			hqlConditions.append(" loc.id = :locId ");
			paramNames.add("locId");
			paramValues.add(edLoc.getID());
			and = " and ";
		}
		else
		{
			if( trackingArea != null )
			{
				hqlJoins.append(" left join tr.eDLocation as loc ");
				
				hqlConditions.append(and);
				hqlConditions.append(" loc.id = :locId ");
				paramNames.add("locId");
				paramValues.add(trackingArea.getEDLocation().getID_Location());
				and = " and ";
			}
		}
		
		if( trackingStatus != null)
		{
						
			hqlJoins.append(" left join tr.currentStatus as cs left join cs.status as s ");
			
			hqlConditions.append(and);
			hqlConditions.append(" s.id = :statusId ");
			paramNames.add("statusId");
			paramValues.add(trackingStatus.getID());
			and = " and ";
		}
		
		
		
		List<?> patients = factory.find(hqlJoins.append(hqlConditions.toString()).toString(), paramNames, paramValues);
		
		if( patients != null && patients.size() > 0 )
		{
			return TrackingForClinicianWorklistAndTriageVoAssembler.createTrackingForClinicianWorklistAndTriageVoCollectionFromTracking(patients);
		}
		
		return null;
	}

	public PatientShort getPatientShort(PatientRefVo patientRef)
	{
		if (patientRef == null || patientRef.getID_Patient() == null)
		{
			throw new CodingRuntimeException("Cannot get Patient by null Id ");
		}

		DomainFactory factory = getDomainFactory();

		Patient domainPatient = (Patient) factory.getDomainObject(Patient.class, patientRef.getID_Patient());

		return PatientShortAssembler.create(domainPatient);
	}

	public CareContextShortVo getCareContextShort(CareContextRefVo careContextRef)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get CarerContext by null Id ");
		}

		DomainFactory factory = getDomainFactory();

		CareContext domainCareContext = (CareContext) factory.getDomainObject(CareContext.class, careContextRef.getID_CareContext());

		return CareContextShortVoAssembler.create(domainCareContext);
	}
}
