//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.domain.DomainFactory;
import ims.emergency.configuration.domain.objects.TrackingArea;
import ims.emergency.domain.base.impl.BaseAreaWorkspaceConfigImpl;
import ims.emergency.vo.domain.TrackingAreaVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class AreaWorkspaceConfigImpl extends BaseAreaWorkspaceConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.TrackingAreaVo getTrackingArea(ims.emergency.configuration.vo.TrackingAreaRefVo trackingAreaRef)
	{
		if (trackingAreaRef == null || trackingAreaRef.getID_TrackingArea() == null)
		{
			throw new CodingRuntimeException("Cannot get TrackingAreaRefVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		TrackingArea domainTrackingArea = (TrackingArea) factory.getDomainObject(TrackingArea.class, trackingAreaRef.getID_TrackingArea());
	
		return TrackingAreaVoAssembler.create(domainTrackingArea);
	}
}
