//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.clinical.vo.lookups.TreatmentInterventionType;
import ims.clinicaladmin.vo.domain.TreatmentInterventionLiteVoAssembler;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.domain.InterventionsDiagnosisInvestigationsCc;
import ims.emergency.domain.base.impl.BaseInterventionsTreatmentsImpl;
import ims.emergency.domain.objects.InterventionsTreatmentsForAttendence;
import ims.emergency.vo.InterventionsTreatmentsForAttendenceVo;
import ims.emergency.vo.domain.InterventionsTreatmentsForAttendenceVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class InterventionsTreatmentsImpl extends BaseInterventionsTreatmentsImpl
{
	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.InterventionsTreatmentsForAttendenceVo getInterventionsTreatmentsForAttendence(ims.core.admin.vo.CareContextRefVo attendence)
	{
		InterventionsDiagnosisInvestigationsCc impl = (InterventionsDiagnosisInvestigationsCc)getDomainImpl(InterventionsDiagnosisInvestigationsCcImpl.class);
		return impl.getInterventionsTreatmentsForAttendence(attendence);
	}

	public ims.clinicaladmin.vo.TreatmentInterventionLiteVoCollection listTreatmentsInterventionsFromHotlist(String listOfTreatmentsInterventionsAllreadyAdded, TreatmentInterventionType type)
	{
		DomainFactory factory = getDomainFactory();
		StringBuilder query = new StringBuilder("select ti from TreatmentInterventionHotlist as th left join th.hotListItem as titem left join titem.treatmentIntervention as ti left join th.specialty as sp left join ti.treatmentInterventionType as tType where sp.id = :Emergency and ti.isActive = 1 ");
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		markers.add("Emergency");
		values.add(Specialty.EMERGENCY.getID());
		
		if(listOfTreatmentsInterventionsAllreadyAdded != null && listOfTreatmentsInterventionsAllreadyAdded.length() > 0)
		{
			query.append(" and ti.id not in (" + listOfTreatmentsInterventionsAllreadyAdded + ") ");
		}
		
		if(type != null)
		{
			query.append(" and tType.id = :TType ");
			markers.add("TType");
			values.add(type.getID());
		}
		
		query.append(" order by UPPER(tType.text) asc, UPPER(ti.treatmentInterventionName) asc");
		
		List<?> tiList = factory.find(query.toString(), markers, values);
		
		return TreatmentInterventionLiteVoAssembler.createTreatmentInterventionLiteVoCollectionFromTreatmentIntervention(tiList);
	}

	public ims.clinicaladmin.vo.TreatmentInterventionLiteVoCollection listTreatmentsInterventions(String criteria, String listOfTreatmentsInterventionsAllreadyAdded)
	{
		if(criteria == null || criteria.length() == 0)
			throw new CodingRuntimeException("Cannot search on null TreatmentIntervention name.");
		
		DomainFactory factory = getDomainFactory();
		StringBuilder query = new StringBuilder("select ti from TreatmentIntervention as ti left join ti.keywords as kw where ti.isActive = 1 and ti.id not in (select tisec.id from TreatmentInterventionHotlist as th left join th.hotListItem as titem left join titem.treatmentIntervention as tisec left join th.specialty as sp where sp.id = :Emergency) and (ti.treatmentInterventionName like :TreatmentName or kw.keyword like :TreatmentName) ");
		
		if(listOfTreatmentsInterventionsAllreadyAdded != null && listOfTreatmentsInterventionsAllreadyAdded.length() > 0)
		{
			query.append(" and ti.id not in (" + listOfTreatmentsInterventionsAllreadyAdded + ") ");
		}
		
		query.append(" order by UPPER(ti.treatmentInterventionName) asc");
		
		List<?> tiList = factory.find(query.toString(), new String[] {"Emergency", "TreatmentName"}, new Object[] {Specialty.EMERGENCY.getID(), criteria + "%"});
		
		return TreatmentInterventionLiteVoAssembler.createTreatmentInterventionLiteVoCollectionFromTreatmentIntervention(tiList);
	}

	public InterventionsTreatmentsForAttendenceVo save(InterventionsTreatmentsForAttendenceVo record) throws StaleObjectException
	{
		if(record == null)
			throw new CodingRuntimeException("Cannot save a null InterventionsTreatmentsForAttendenceVo.");
		
		if(!record.isValidated())
			throw new CodingRuntimeException("InterventionsTreatmentsForAttendenceVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		InterventionsTreatmentsForAttendence doRecord = InterventionsTreatmentsForAttendenceVoAssembler.extractInterventionsTreatmentsForAttendence(factory, record);
		
		if(record.getID_InterventionsTreatmentsForAttendence() == null && record.getAttendance() != null)
		{
			InterventionsTreatmentsForAttendenceVo staleRecord = getInterventionsTreatmentsForAttendence(record.getAttendance());
			if(staleRecord != null)
				throw new StaleObjectException(doRecord);
		}
		
		factory.save(doRecord);
		
		return InterventionsTreatmentsForAttendenceVoAssembler.create(doRecord);
	}
}
