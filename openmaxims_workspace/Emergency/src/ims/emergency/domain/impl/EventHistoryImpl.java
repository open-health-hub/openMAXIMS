//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.core.admin.pas.domain.objects.AdmissionDetail;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.domain.DomainFactory;
import ims.emergency.domain.base.impl.BaseEventHistoryImpl;
import ims.emergency.vo.AdmissionDetailForEventHistoryVo;
import ims.emergency.vo.EmergencyAttendanceForEventHistoryVo;
import ims.emergency.vo.EmergencyAttendanceForEventHistoryVoCollection;
import ims.emergency.vo.ReferralToSpecialtyTeamForEventHistoryVoCollection;
import ims.emergency.vo.SeenByHcpForEventHistoryVoCollection;
import ims.emergency.vo.TrackingAttendanceStatusForEventHistoryVoCollection;
import ims.emergency.vo.TrackingMovementTimesForEventHistoryVoCollection;
import ims.emergency.vo.TriageForEventHistoryVo;
import ims.emergency.vo.TriageForEventHistoryVoCollection;
import ims.emergency.vo.domain.AdmissionDetailForEventHistoryVoAssembler;
import ims.emergency.vo.domain.EmergencyAttendanceForEventHistoryVoAssembler;
import ims.emergency.vo.domain.ReferralToSpecialtyTeamForEventHistoryVoAssembler;
import ims.emergency.vo.domain.SeenByHcpForEventHistoryVoAssembler;
import ims.emergency.vo.domain.TrackingAttendanceStatusForEventHistoryVoAssembler;
import ims.emergency.vo.domain.TrackingMovementTimesForEventHistoryVoAssembler;
import ims.emergency.vo.domain.TriageForEventHistoryVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.List;

public class EventHistoryImpl extends BaseEventHistoryImpl
{

	private static final long serialVersionUID = 1L;

	public EmergencyAttendanceForEventHistoryVo getEmergencyAttendance(CareContextRefVo careContextRef)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get EmergencyAttendanceForEventHistoryVo on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer hql = new StringBuffer();

		hql.append(" select Emergency from EmergencyAttendance as Emergency left join Emergency.careContext as contextID where contextID.id = :contextID");
		markers.add("contextID");
		values.add(careContextRef.getID_CareContext());

		EmergencyAttendanceForEventHistoryVoCollection emergencyAttendance = EmergencyAttendanceForEventHistoryVoAssembler.createEmergencyAttendanceForEventHistoryVoCollectionFromEmergencyAttendance(factory.find(hql.toString(), markers, values));

		if (emergencyAttendance != null && emergencyAttendance.size() > 0)
		{
			return emergencyAttendance.get(0);
		}
		else
		{
			return null;
		}
	}

	public TriageForEventHistoryVo getTriageForEventHistory(CareContextRefVo careContextRef)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get TriageForEventHistoryVo on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer hql = new StringBuffer();

		hql.append(" select triage from Triage as triage left join triage.attendance as contextID where contextID.id = :contextID");
		markers.add("contextID");
		values.add(careContextRef.getID_CareContext());

		TriageForEventHistoryVoCollection triage = TriageForEventHistoryVoAssembler.createTriageForEventHistoryVoCollectionFromTriage(factory.find(hql.toString(), markers, values));

		if (triage != null && triage.size() > 0)
		{
			return triage.get(0);
		}
		else
		{
			return null;
		}
	}

	public ReferralToSpecialtyTeamForEventHistoryVoCollection getReferralsToSpecialty(CareContextRefVo careContextRef)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get ReferralToSpecialtyTeamForEventHistoryVoCollection on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer hql = new StringBuffer();

		hql.append(" select referral from ReferralToSpecTeam as referral left join referral.attendance as contextID where contextID.id = :contextID");
		markers.add("contextID");
		values.add(careContextRef.getID_CareContext());

		return ReferralToSpecialtyTeamForEventHistoryVoAssembler.createReferralToSpecialtyTeamForEventHistoryVoCollectionFromReferralToSpecTeam(factory.find(hql.toString(), markers, values));
	}

	public TrackingAttendanceStatusForEventHistoryVoCollection getTrackingAttendanceStatuses(CareContextRefVo careContextRef)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get TrackingAttendanceStatusForEventHistoryVoCollection on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer hql = new StringBuffer();

		hql.append(" select attendanceStatus from TrackingAttendanceStatus as attendanceStatus left join attendanceStatus.attendance as contextID where contextID.id = :contextID");
		markers.add("contextID");
		values.add(careContextRef.getID_CareContext());

		return TrackingAttendanceStatusForEventHistoryVoAssembler.createTrackingAttendanceStatusForEventHistoryVoCollectionFromTrackingAttendanceStatus(factory.find(hql.toString(), markers, values));
	}

	public TrackingMovementTimesForEventHistoryVoCollection getTrackingMovementTimes(CareContextRefVo careContextRef)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get TrackingMovementTimesForEventHistoryVoCollection on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer hql = new StringBuffer();

		hql.append(" select movementTimes from TrackingMovementTimes as movementTimes left join movementTimes.attendance as contextID where contextID.id = :contextID");
		markers.add("contextID");
		values.add(careContextRef.getID_CareContext());

		return TrackingMovementTimesForEventHistoryVoAssembler.createTrackingMovementTimesForEventHistoryVoCollectionFromTrackingMovementTimes(factory.find(hql.toString(), markers, values));
	}

	//WDEV-16816
	public SeenByHcpForEventHistoryVoCollection getSeenByHcp(CareContextRefVo careContextRef)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get SeenByHcpForEventHistoryVoCollection on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer hql = new StringBuffer();

		hql.append(" select seenByHcp from SeenByHCP as seenByHcp left join seenByHcp.attendance as contextID where contextID.id = :contextID");
		markers.add("contextID");
		values.add(careContextRef.getID_CareContext());

		return SeenByHcpForEventHistoryVoAssembler.createSeenByHcpForEventHistoryVoCollectionFromSeenByHCP(factory.find(hql.toString(), markers, values));
	}

	//WDEV-17038	
	public AdmissionDetailForEventHistoryVo getAdmissionDetail(PatientRefVo patientRef, DateTime dischargeDate)
	{
		if (patientRef == null || patientRef.getID_Patient() == null)
			throw new CodingRuntimeException("Cannot get AdmissionDetails value on null patientRef.");

		DateTime	dischargeDateClone=(DateTime)dischargeDate.clone();
		DateTime dischargeDatePlus24 = dischargeDateClone.addHours(ims.configuration.gen.ConfigFlag.UI.ED_SHOW_DISCHARGED_TRACKING_RECORDS_PERIOD.getValue());
		
		StringBuffer hql = new StringBuffer("select admDetail from AdmissionDetail as admDetail left join admDetail.pasEvent as pasEvent where pasEvent.patient.id = :patID and admDetail.admissionDateTime >= :DischDate and admDetail.admissionDateTime < :DischDate24  order by admDetail.systemInformation.creationDateTime desc ");

		DomainFactory factory = getDomainFactory();

		List<?> list = factory.find(hql.toString(), new String[] { "patID","DischDate", "DischDate24" }, new Object[] {patientRef.getID_Patient(),dischargeDate.getJavaDate(),dischargeDatePlus24.getJavaDate() });
		
		if (list != null && list.size() > 0)
			return AdmissionDetailForEventHistoryVoAssembler.create((AdmissionDetail) list.get(0));

		return null;
	}

}
